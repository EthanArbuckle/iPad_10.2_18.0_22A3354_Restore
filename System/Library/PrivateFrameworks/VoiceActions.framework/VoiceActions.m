uint64_t type metadata accessor for Sentencepiece_TrainerSpec(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_2579153B0);
}

uint64_t type metadata accessor for Sentencepiece_TrainerSpec._StorageClass()
{
  return objc_opt_self();
}

uint64_t sub_24A12EEC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Sentencepiece_TrainerSpec(0) + 24));
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 56) == 4)
    return 0;
  else
    return *(unsigned __int8 *)(v1 + 56);
}

BOOL sub_24A12EF10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24A12EF28()
{
  sub_24A13DA24();
  return sub_24A215864();
}

void sub_24A12EF64(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_24A12EF6C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_24A135E78(a1);
  *a2 = result;
  return result;
}

uint64_t sub_24A12EF90()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t sub_24A12EF9C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_24A135E78(*a1);
  *a2 = result;
  return result;
}

void sub_24A12EFC4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_24A12EFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A133BE0(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BFE0], a2);
}

uint64_t sub_24A12EFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A133C20(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BFE0]);
}

uint64_t (*sub_24A12EFEC())()
{
  return nullsub_1;
}

void sub_24A12F004(_QWORD *a1@<X8>)
{
  *a1 = &unk_251B98E18;
}

uint64_t sub_24A12F014(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  if (v2[1])
    v3 = *v2;
  else
    v3 = 0;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t (*sub_24A12F070())()
{
  return nullsub_1;
}

uint64_t sub_24A12F084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_24A135F88(&qword_257908DC0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Sentencepiece_ModelProto(0);
  sub_24A1360A0(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_257908DC0);
  v7 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v5, 1, v7) != 1)
    return sub_24A135FDC((uint64_t)v5, a1, type metadata accessor for Sentencepiece_TrainerSpec);
  sub_24A2157F8();
  sub_24A215834();
  v8 = *(int *)(v7 + 24);
  if (qword_2579138D8 != -1)
    swift_once();
  *(_QWORD *)(a1 + v8) = qword_2579138E0;
  swift_retain();
  return sub_24A13DAA8((uint64_t)v5, &qword_257908DC0);
}

uint64_t sub_24A12F1A8()
{
  return sub_24A12F014(type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
}

float sub_24A12F1B4()
{
  uint64_t v0;
  uint64_t v1;
  float result;

  v1 = v0 + *(int *)(type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0) + 28);
  result = *(float *)v1;
  if (*(_BYTE *)(v1 + 4))
    return 0.0;
  return result;
}

BOOL sub_24A12F1E8(char *a1, char *a2)
{
  return qword_24A219600[*a1] == qword_24A219600[*a2];
}

uint64_t sub_24A12F20C()
{
  sub_24A216638();
  sub_24A215C54();
  return sub_24A21665C();
}

uint64_t sub_24A12F26C()
{
  sub_24A13D9E0();
  return sub_24A215864();
}

uint64_t sub_24A12F2A4()
{
  sub_24A216638();
  sub_24A215C54();
  return sub_24A21665C();
}

uint64_t sub_24A12F300@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_24A13612C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_24A12F324()
{
  char *v0;

  return qword_24A219600[*v0];
}

uint64_t sub_24A12F338@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_24A13612C(*a1);
  *a2 = result;
  return result;
}

void sub_24A12F360(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_24A219600[*v1];
}

uint64_t sub_24A12F378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_24A215840();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_24A12F3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_24A215840();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

void sub_24A12F3F8(_QWORD *a1@<X8>)
{
  *a1 = &unk_251B98E40;
}

uint64_t sub_24A12F408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  char *v85;
  _QWORD *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  _QWORD *v92;
  char *v93;
  uint64_t v95;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D668);
  sub_24A136154(v0, (uint64_t)qword_25791D668);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_24A218620;
  v5 = v95 + v4;
  v6 = v95 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v95 + v4) = 1;
  *(_QWORD *)v6 = "input";
  *(_QWORD *)(v6 + 8) = 5;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_24A2159B4();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v95 + v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 7;
  *(_QWORD *)v10 = "input_format";
  *(_QWORD *)(v10 + 8) = 12;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v95 + v4 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 2;
  *(_QWORD *)v12 = "model_prefix";
  *((_QWORD *)v12 + 1) = 12;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v95 + v4 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 3;
  *(_QWORD *)v14 = "model_type";
  *((_QWORD *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v95 + v4 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 4;
  *(_QWORD *)v16 = "vocab_size";
  *((_QWORD *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v95 + v4 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 5;
  *(_QWORD *)v18 = "accept_language";
  *((_QWORD *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v95 + v4 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 6;
  *(_QWORD *)v20 = "self_test_sample_size";
  *((_QWORD *)v20 + 1) = 21;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v95 + v4 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 50;
  *(_QWORD *)v22 = "enable_differential_privacy";
  *((_QWORD *)v22 + 1) = 27;
  v22[16] = 2;
  v9();
  v23 = v95 + v4 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 51;
  *(_QWORD *)v23 = "differential_privacy_noise_level";
  *(_QWORD *)(v23 + 8) = 32;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  v24 = (_QWORD *)(v95 + v4 + 9 * v3);
  v25 = (char *)v24 + *(int *)(v1 + 48);
  *v24 = 52;
  *(_QWORD *)v25 = "differential_privacy_clipping_threshold";
  *((_QWORD *)v25 + 1) = 39;
  v25[16] = 2;
  v9();
  v26 = (_QWORD *)(v95 + v4 + 10 * v3);
  v27 = (char *)v26 + *(int *)(v1 + 48);
  *v26 = 10;
  *(_QWORD *)v27 = "character_coverage";
  *((_QWORD *)v27 + 1) = 18;
  v27[16] = 2;
  v9();
  v28 = (_QWORD *)(v95 + v4 + 11 * v3);
  v29 = (char *)v28 + *(int *)(v1 + 48);
  *v28 = 11;
  *(_QWORD *)v29 = "input_sentence_size";
  *((_QWORD *)v29 + 1) = 19;
  v29[16] = 2;
  v9();
  v30 = (_QWORD *)(v95 + v4 + 12 * v3);
  v31 = (char *)v30 + *(int *)(v1 + 48);
  *v30 = 19;
  *(_QWORD *)v31 = "shuffle_input_sentence";
  *((_QWORD *)v31 + 1) = 22;
  v31[16] = 2;
  v9();
  v32 = (_QWORD *)(v95 + v4 + 13 * v3);
  v33 = (char *)v32 + *(int *)(v1 + 48);
  *v32 = 12;
  *(_QWORD *)v33 = "mining_sentence_size";
  *((_QWORD *)v33 + 1) = 20;
  v33[16] = 2;
  v9();
  v34 = (_QWORD *)(v95 + v4 + 14 * v3);
  v35 = (char *)v34 + *(int *)(v1 + 48);
  *v34 = 13;
  *(_QWORD *)v35 = "training_sentence_size";
  *((_QWORD *)v35 + 1) = 22;
  v35[16] = 2;
  v9();
  v36 = (_QWORD *)(v95 + v4 + 15 * v3);
  v37 = (char *)v36 + *(int *)(v1 + 48);
  *v36 = 14;
  *(_QWORD *)v37 = "seed_sentencepiece_size";
  *((_QWORD *)v37 + 1) = 23;
  v37[16] = 2;
  v9();
  v38 = v95 + v4 + 16 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 16 * v3) = 15;
  *(_QWORD *)v38 = "shrinking_factor";
  *(_QWORD *)(v38 + 8) = 16;
  *(_BYTE *)(v38 + 16) = 2;
  v9();
  v39 = (_QWORD *)(v95 + v4 + 17 * v3);
  v40 = (char *)v39 + *(int *)(v1 + 48);
  *v39 = 18;
  *(_QWORD *)v40 = "max_sentence_length";
  *((_QWORD *)v40 + 1) = 19;
  v40[16] = 2;
  v9();
  v41 = (_QWORD *)(v95 + v4 + 18 * v3);
  v42 = (char *)v41 + *(int *)(v1 + 48);
  *v41 = 16;
  *(_QWORD *)v42 = "num_threads";
  *((_QWORD *)v42 + 1) = 11;
  v42[16] = 2;
  v9();
  v43 = (_QWORD *)(v95 + v4 + 19 * v3);
  v44 = (char *)v43 + *(int *)(v1 + 48);
  *v43 = 17;
  *(_QWORD *)v44 = "num_sub_iterations";
  *((_QWORD *)v44 + 1) = 18;
  v44[16] = 2;
  v9();
  v45 = (_QWORD *)(v95 + v4 + 20 * v3);
  v46 = (char *)v45 + *(int *)(v1 + 48);
  *v45 = 20;
  *(_QWORD *)v46 = "max_sentencepiece_length";
  *((_QWORD *)v46 + 1) = 24;
  v46[16] = 2;
  v9();
  v47 = (_QWORD *)(v95 + v4 + 21 * v3);
  v48 = (char *)v47 + *(int *)(v1 + 48);
  *v47 = 21;
  *(_QWORD *)v48 = "split_by_unicode_script";
  *((_QWORD *)v48 + 1) = 23;
  v48[16] = 2;
  v9();
  v49 = (_QWORD *)(v95 + v4 + 22 * v3);
  v50 = (char *)v49 + *(int *)(v1 + 48);
  *v49 = 23;
  *(_QWORD *)v50 = "split_by_number";
  *((_QWORD *)v50 + 1) = 15;
  v50[16] = 2;
  v9();
  v51 = (_QWORD *)(v95 + v4 + 23 * v3);
  v52 = (char *)v51 + *(int *)(v1 + 48);
  *v51 = 22;
  *(_QWORD *)v52 = "split_by_whitespace";
  *((_QWORD *)v52 + 1) = 19;
  v52[16] = 2;
  v9();
  v53 = (_QWORD *)(v95 + v4 + 24 * v3);
  v54 = (char *)v53 + *(int *)(v1 + 48);
  *v53 = 24;
  *(_QWORD *)v54 = "treat_whitespace_as_suffix";
  *((_QWORD *)v54 + 1) = 26;
  v54[16] = 2;
  v9();
  v55 = (_QWORD *)(v95 + v4 + 25 * v3);
  v56 = (char *)v55 + *(int *)(v1 + 48);
  *v55 = 26;
  *(_QWORD *)v56 = "allow_whitespace_only_pieces";
  *((_QWORD *)v56 + 1) = 28;
  v56[16] = 2;
  v9();
  v57 = (_QWORD *)(v95 + v4 + 26 * v3);
  v58 = (char *)v57 + *(int *)(v1 + 48);
  *v57 = 25;
  *(_QWORD *)v58 = "split_digits";
  *((_QWORD *)v58 + 1) = 12;
  v58[16] = 2;
  v9();
  v59 = (_QWORD *)(v95 + v4 + 27 * v3);
  v60 = (char *)v59 + *(int *)(v1 + 48);
  *v59 = 53;
  *(_QWORD *)v60 = "pretokenization_delimiter";
  *((_QWORD *)v60 + 1) = 25;
  v60[16] = 2;
  v9();
  v61 = (_QWORD *)(v95 + v4 + 28 * v3);
  v62 = (char *)v61 + *(int *)(v1 + 48);
  *v61 = 30;
  *(_QWORD *)v62 = "control_symbols";
  *((_QWORD *)v62 + 1) = 15;
  v62[16] = 2;
  v9();
  v63 = (_QWORD *)(v95 + v4 + 29 * v3);
  v64 = (char *)v63 + *(int *)(v1 + 48);
  *v63 = 31;
  *(_QWORD *)v64 = "user_defined_symbols";
  *((_QWORD *)v64 + 1) = 20;
  v64[16] = 2;
  v9();
  v65 = (_QWORD *)(v95 + v4 + 30 * v3);
  v66 = (char *)v65 + *(int *)(v1 + 48);
  *v65 = 36;
  *(_QWORD *)v66 = "required_chars";
  *((_QWORD *)v66 + 1) = 14;
  v66[16] = 2;
  v9();
  v67 = (_QWORD *)(v95 + v4 + 31 * v3);
  v68 = (char *)v67 + *(int *)(v1 + 48);
  *v67 = 35;
  *(_QWORD *)v68 = "byte_fallback";
  *((_QWORD *)v68 + 1) = 13;
  v68[16] = 2;
  v9();
  v69 = v95 + v4 + 32 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 32 * v3) = 32;
  *(_QWORD *)v69 = "vocabulary_output_piece_score";
  *(_QWORD *)(v69 + 8) = 29;
  *(_BYTE *)(v69 + 16) = 2;
  v9();
  v70 = (_QWORD *)(v95 + v4 + 33 * v3);
  v71 = (char *)v70 + *(int *)(v1 + 48);
  *v70 = 33;
  *(_QWORD *)v71 = "hard_vocab_limit";
  *((_QWORD *)v71 + 1) = 16;
  v71[16] = 2;
  v9();
  v72 = (_QWORD *)(v95 + v4 + 34 * v3);
  v73 = (char *)v72 + *(int *)(v1 + 48);
  *v72 = 34;
  *(_QWORD *)v73 = "use_all_vocab";
  *((_QWORD *)v73 + 1) = 13;
  v73[16] = 2;
  v9();
  v74 = (_QWORD *)(v95 + v4 + 35 * v3);
  v75 = (char *)v74 + *(int *)(v1 + 48);
  *v74 = 40;
  *(_QWORD *)v75 = "unk_id";
  *((_QWORD *)v75 + 1) = 6;
  v75[16] = 2;
  v9();
  v76 = (_QWORD *)(v95 + v4 + 36 * v3);
  v77 = (char *)v76 + *(int *)(v1 + 48);
  *v76 = 41;
  *(_QWORD *)v77 = "bos_id";
  *((_QWORD *)v77 + 1) = 6;
  v77[16] = 2;
  v9();
  v78 = (_QWORD *)(v95 + v4 + 37 * v3);
  v79 = (char *)v78 + *(int *)(v1 + 48);
  *v78 = 42;
  *(_QWORD *)v79 = "eos_id";
  *((_QWORD *)v79 + 1) = 6;
  v79[16] = 2;
  v9();
  v80 = (_QWORD *)(v95 + v4 + 38 * v3);
  v81 = (char *)v80 + *(int *)(v1 + 48);
  *v80 = 43;
  *(_QWORD *)v81 = "pad_id";
  *((_QWORD *)v81 + 1) = 6;
  v81[16] = 2;
  v9();
  v82 = (_QWORD *)(v95 + v4 + 39 * v3);
  v83 = (char *)v82 + *(int *)(v1 + 48);
  *v82 = 45;
  *(_QWORD *)v83 = "unk_piece";
  *((_QWORD *)v83 + 1) = 9;
  v83[16] = 2;
  v9();
  v84 = (_QWORD *)(v95 + v4 + 40 * v3);
  v85 = (char *)v84 + *(int *)(v1 + 48);
  *v84 = 46;
  *(_QWORD *)v85 = "bos_piece";
  *((_QWORD *)v85 + 1) = 9;
  v85[16] = 2;
  v9();
  v86 = (_QWORD *)(v95 + v4 + 41 * v3);
  v87 = (char *)v86 + *(int *)(v1 + 48);
  *v86 = 47;
  *(_QWORD *)v87 = "eos_piece";
  *((_QWORD *)v87 + 1) = 9;
  v87[16] = 2;
  v9();
  v88 = (_QWORD *)(v95 + v4 + 42 * v3);
  v89 = (char *)v88 + *(int *)(v1 + 48);
  *v88 = 48;
  *(_QWORD *)v89 = "pad_piece";
  *((_QWORD *)v89 + 1) = 9;
  v89[16] = 2;
  v9();
  v90 = (_QWORD *)(v95 + v4 + 43 * v3);
  v91 = (char *)v90 + *(int *)(v1 + 48);
  *v90 = 44;
  *(_QWORD *)v91 = "unk_surface";
  *((_QWORD *)v91 + 1) = 11;
  v91[16] = 2;
  v9();
  v92 = (_QWORD *)(v95 + v4 + 44 * v3);
  v93 = (char *)v92 + *(int *)(v1 + 48);
  *v92 = 49;
  *(_QWORD *)v93 = "train_extremely_large_corpus";
  *((_QWORD *)v93 + 1) = 28;
  v93[16] = 2;
  v9();
  return sub_24A2159C0();
}

double sub_24A12FE58()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  type metadata accessor for Sentencepiece_TrainerSpec._StorageClass();
  v0 = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_BYTE *)(v0 + 56) = 4;
  *(_DWORD *)(v0 + 60) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 72) = v1;
  *(_DWORD *)(v0 + 80) = 0;
  *(_WORD *)(v0 + 84) = 513;
  *(_DWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 92) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 1;
  *(_DWORD *)(v0 + 108) = 0;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 0;
  *(_WORD *)(v0 + 128) = 513;
  *(_DWORD *)(v0 + 132) = 0;
  *(_BYTE *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 0;
  *(_BYTE *)(v0 + 144) = 1;
  *(_DWORD *)(v0 + 148) = 0;
  *(_BYTE *)(v0 + 152) = 1;
  *(_DWORD *)(v0 + 156) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_DWORD *)(v0 + 164) = 0;
  *(_BYTE *)(v0 + 168) = 1;
  *(_DWORD *)(v0 + 172) = 0;
  *(_BYTE *)(v0 + 176) = 1;
  *(_DWORD *)(v0 + 180) = 0;
  *(_BYTE *)(v0 + 184) = 1;
  *(_DWORD *)(v0 + 188) = 0;
  *(_BYTE *)(v0 + 192) = 1;
  *(_WORD *)(v0 + 197) = 514;
  *(_DWORD *)(v0 + 193) = 33686018;
  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 208) = 0;
  *(_QWORD *)(v0 + 216) = v1;
  *(_QWORD *)(v0 + 224) = v1;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = 33686018;
  *(_BYTE *)(v0 + 256) = 1;
  *(_DWORD *)(v0 + 260) = 0;
  *(_BYTE *)(v0 + 264) = 1;
  *(_DWORD *)(v0 + 268) = 0;
  *(_BYTE *)(v0 + 272) = 1;
  *(_DWORD *)(v0 + 276) = 0;
  *(_BYTE *)(v0 + 280) = 1;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_BYTE *)(v0 + 368) = 2;
  qword_2579138E0 = v0;
  return result;
}

uint64_t sub_24A12FF70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A12FFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v0;
  v3 = *(int *)(type metadata accessor for Sentencepiece_TrainerSpec(0) + 24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Sentencepiece_TrainerSpec._StorageClass();
    v4 = swift_allocObject();
    v5 = swift_retain();
    sub_24A135194(v5);
    swift_release();
    *(_QWORD *)(v2 + v3) = v4;
    swift_release();
  }
  swift_retain();
  v6 = sub_24A215870();
  v8 = v1;
  if (!v1)
  {
    v10 = v6;
    while ((v7 & 1) == 0)
    {
      switch(v10)
      {
        case 1:
        case 5:
        case 30:
        case 31:
          swift_beginAccess();
          v11 = v8;
          sub_24A2158C4();
          goto LABEL_17;
        case 2:
        case 7:
        case 36:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 53:
          swift_beginAccess();
          v11 = v8;
          sub_24A2158D0();
          goto LABEL_17;
        case 3:
          swift_beginAccess();
          sub_24A13DA24();
          v11 = v8;
          sub_24A215894();
          goto LABEL_17;
        case 4:
        case 6:
        case 12:
        case 13:
        case 14:
        case 16:
        case 17:
        case 18:
        case 20:
        case 40:
        case 41:
        case 42:
        case 43:
          swift_beginAccess();
          v11 = v8;
          sub_24A2158B8();
          goto LABEL_17;
        case 10:
        case 15:
        case 51:
          swift_beginAccess();
          v11 = v8;
          sub_24A2158AC();
          goto LABEL_17;
        case 11:
        case 52:
          swift_beginAccess();
          v11 = v8;
          sub_24A2158DC();
          goto LABEL_17;
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 32:
        case 33:
        case 34:
        case 35:
        case 49:
        case 50:
          swift_beginAccess();
          v11 = v8;
          sub_24A215888();
LABEL_17:
          v8 = v11;
          swift_endAccess();
          break;
        default:
          if ((unint64_t)(v10 - 200) <= 0x1FFFFF37)
          {
            sub_24A137FF0(&qword_257908E30, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218A74);
            sub_24A21587C();
          }
          break;
      }
      v10 = sub_24A215870();
    }
  }
  return swift_release();
}

uint64_t sub_24A1305E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Sentencepiece_TrainerSpec(0) + 24));
  swift_retain();
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A215978();
    if (v1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 48))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  if (v1)
    return swift_release();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 56) != 4)
  {
    sub_24A13DA24();
    sub_24A215948();
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 64) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 72) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A215978();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 84) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 32))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 112) & 1) == 0)
    sub_24A215960();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 128) & 1) == 0)
    sub_24A215990();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 144) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 152) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 160) & 1) == 0)
    sub_24A215960();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 176) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 184) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 168) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 129) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 192) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 193) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 195) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 194) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 196) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 198) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 197) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 216) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A215978();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v2 + 224) + 16))
  {
    swift_bridgeObjectRetain();
    sub_24A215978();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 249) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 250) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 251) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 248) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 240))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 256) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 264) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 272) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 280) & 1) == 0)
    sub_24A21596C();
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 360))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 296))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 312))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 328))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 344))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 368) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 85) != 2)
    sub_24A21593C();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 92) & 1) == 0)
    sub_24A215960();
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 104) & 1) == 0)
    sub_24A215990();
  swift_beginAccess();
  if (*(_QWORD *)(v2 + 208))
  {
    swift_bridgeObjectRetain();
    sub_24A215984();
    swift_bridgeObjectRelease();
  }
  sub_24A215930();
  swift_release();
  return sub_24A2157EC();
}

uint64_t sub_24A13131C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_24A2157F8();
  sub_24A215834();
  v4 = *(int *)(a1 + 24);
  if (qword_2579138D8 != -1)
    swift_once();
  *(_QWORD *)(a2 + v4) = qword_2579138E0;
  return swift_retain();
}

unint64_t sub_24A131384()
{
  return 0xD000000000000019;
}

uint64_t (*sub_24A1313A8())()
{
  return nullsub_1;
}

uint64_t sub_24A1313B8()
{
  return sub_24A12FFF4();
}

uint64_t sub_24A1313CC()
{
  return sub_24A1305E4();
}

uint64_t sub_24A1313E4()
{
  sub_24A137FF0(&qword_2579098C0, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218AEC);
  return sub_24A215858();
}

uint64_t sub_24A131438@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_2579138D0, (uint64_t)qword_25791D668, a1);
}

uint64_t sub_24A131454()
{
  sub_24A137FF0(&qword_257908E30, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218A74);
  return sub_24A215918();
}

uint64_t sub_24A131498()
{
  sub_24A137FF0(&qword_257908E30, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218A74);
  return sub_24A215924();
}

uint64_t sub_24A1314F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D680);
  sub_24A136154(v0, (uint64_t)qword_25791D680);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218630;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "UNIGRAM";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "BPE";
  *(_QWORD *)(v11 + 8) = 3;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "WORD";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "CHAR";
  *((_QWORD *)v15 + 1) = 4;
  v15[16] = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A1316AC@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_2579138E8, (uint64_t)qword_25791D680, a1);
}

uint64_t sub_24A1316C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D698);
  sub_24A136154(v0, (uint64_t)qword_25791D698);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218640;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "name";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "precompiled_charsmap";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "add_dummy_prefix";
  *((_QWORD *)v13 + 1) = 16;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "remove_extra_whitespaces";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "escape_whitespaces";
  *((_QWORD *)v17 + 1) = 18;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "normalization_rule_tsv";
  *((_QWORD *)v19 + 1) = 22;
  v19[16] = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A13190C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;

  result = sub_24A215870();
  if (!v0)
  {
    v3 = result;
    while ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 1:
        case 6:
          type metadata accessor for Sentencepiece_NormalizerSpec(0);
          sub_24A2158D0();
          break;
        case 2:
          type metadata accessor for Sentencepiece_NormalizerSpec(0);
          sub_24A2158A0();
          break;
        case 3:
        case 4:
        case 5:
          type metadata accessor for Sentencepiece_NormalizerSpec(0);
          sub_24A215888();
          break;
        default:
          if ((unint64_t)(v3 - 200) <= 0x1FFFFF37)
          {
            type metadata accessor for Sentencepiece_NormalizerSpec(0);
            sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
            sub_24A21587C();
          }
          break;
      }
      result = sub_24A215870();
      v3 = result;
    }
  }
  return result;
}

uint64_t sub_24A131AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  int *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  result = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v3 = (int *)result;
  if (*(_QWORD *)(v0 + *(int *)(result + 24) + 8))
    result = sub_24A215984();
  if (!v1)
  {
    v4 = v0 + v3[7];
    v5 = *(_QWORD *)(v4 + 8);
    if (v5 >> 60 != 15)
    {
      v6 = *(_QWORD *)v4;
      sub_24A135EC4(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
      sub_24A215954();
      sub_24A135F08(v6, v5);
    }
    if (*(_BYTE *)(v0 + v3[8]) != 2)
      sub_24A21593C();
    if (*(_BYTE *)(v0 + v3[9]) != 2)
      sub_24A21593C();
    sub_24A131C98(v0);
    sub_24A131D0C(v0);
    sub_24A215930();
    return sub_24A2157EC();
  }
  return result;
}

uint64_t sub_24A131C98(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 40)) != 2)
    return sub_24A21593C();
  return result;
}

uint64_t sub_24A131D0C(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  if (*(_QWORD *)(a1 + *(int *)(result + 44) + 8))
    return sub_24A215984();
  return result;
}

double sub_24A131D80@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_24A2157F8();
  sub_24A215834();
  v4 = a1[7];
  v5 = (_QWORD *)(a2 + a1[6]);
  *v5 = 0;
  v5[1] = 0;
  result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_24A218610;
  v7 = a1[9];
  *(_BYTE *)(a2 + a1[8]) = 2;
  *(_BYTE *)(a2 + v7) = 2;
  v8 = a1[11];
  *(_BYTE *)(a2 + a1[10]) = 2;
  v9 = (_QWORD *)(a2 + v8);
  *v9 = 0;
  v9[1] = 0;
  return result;
}

unint64_t sub_24A131DE8()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_24A131E04()
{
  return sub_24A13190C();
}

uint64_t sub_24A131E18()
{
  return sub_24A131AD4();
}

uint64_t sub_24A131E2C()
{
  sub_24A137FF0(&qword_2579098B8, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C7C);
  return sub_24A215858();
}

uint64_t sub_24A131E7C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_2579138F0, (uint64_t)qword_25791D698, a1);
}

uint64_t sub_24A131E98()
{
  sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
  return sub_24A215918();
}

uint64_t sub_24A131ED8()
{
  sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
  return sub_24A215924();
}

uint64_t sub_24A131F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D6B0);
  sub_24A136154(v0, (uint64_t)qword_25791D6B0);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A218650;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "samples";
  *(_QWORD *)(v5 + 8) = 7;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = sub_24A2159B4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_24A2159C0();
}

uint64_t sub_24A132030()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;

  result = sub_24A215870();
  if (!v0)
  {
    v3 = result;
    while ((v2 & 1) == 0)
    {
      if (v3 == 1)
      {
        type metadata accessor for Sentencepiece_SelfTestData.Sample(0);
        sub_24A137FF0(&qword_257908DE8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218ED4);
        sub_24A2158E8();
      }
      else if ((unint64_t)(v3 - 200) < 0x1FFFFF38)
      {
        type metadata accessor for Sentencepiece_SelfTestData(0);
        sub_24A137FF0(&qword_257908E50, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218D6C);
        sub_24A21587C();
      }
      result = sub_24A215870();
      v3 = result;
    }
  }
  return result;
}

uint64_t sub_24A1321BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for Sentencepiece_SelfTestData.Sample(0),
        sub_24A137FF0(&qword_257908DE8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218ED4), result = sub_24A21599C(), !v1))
  {
    type metadata accessor for Sentencepiece_SelfTestData(0);
    result = sub_24A215930();
    if (!v1)
      return sub_24A2157EC();
  }
  return result;
}

uint64_t sub_24A1322BC@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  sub_24A2157F8();
  return sub_24A215834();
}

unint64_t sub_24A132300()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_24A13231C()
{
  return sub_24A215828() & 1;
}

uint64_t sub_24A132344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A133BE0(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BF10], a2);
}

uint64_t sub_24A132350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A133C20(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE5BF10]);
}

uint64_t sub_24A13235C()
{
  return sub_24A132030();
}

uint64_t sub_24A132370()
{
  return sub_24A1321BC();
}

uint64_t sub_24A132384()
{
  sub_24A137FF0(&qword_2579098B0, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218DE4);
  return sub_24A215858();
}

uint64_t sub_24A1323D4@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_2579138F8, (uint64_t)qword_25791D6B0, a1);
}

uint64_t sub_24A1323F0()
{
  sub_24A137FF0(&qword_257908E50, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218D6C);
  return sub_24A215918();
}

uint64_t sub_24A132430()
{
  sub_24A137FF0(&qword_257908E50, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218D6C);
  return sub_24A215924();
}

uint64_t sub_24A132484()
{
  uint64_t result;

  result = sub_24A215D98();
  qword_25791D6C8 = 0xD00000000000001ALL;
  unk_25791D6D0 = 0x800000024A21FED0;
  return result;
}

uint64_t sub_24A1324EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D6D8);
  sub_24A136154(v0, (uint64_t)qword_25791D6D8);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218660;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "input";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "expected";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A13263C()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_24A215870();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      type metadata accessor for Sentencepiece_SelfTestData.Sample(0);
      sub_24A2158D0();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_24A1326E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for Sentencepiece_SelfTestData.Sample(0);
  v3 = result;
  if (*(_QWORD *)(v0 + *(int *)(result + 20) + 8))
    result = sub_24A215984();
  if (!v1)
  {
    if (*(_QWORD *)(v0 + *(int *)(v3 + 24) + 8))
      sub_24A215984();
    return sub_24A2157EC();
  }
  return result;
}

uint64_t sub_24A1327B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = sub_24A2157F8();
  v5 = *(int *)(a1 + 24);
  v6 = (_QWORD *)(a2 + *(int *)(a1 + 20));
  *v6 = 0;
  v6[1] = 0;
  v7 = (_QWORD *)(a2 + v5);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t sub_24A1327E8(uint64_t a1, uint64_t a2)
{
  return sub_24A1342D4(a1, a2, &qword_257913900, &qword_25791D6C8);
}

uint64_t sub_24A13280C()
{
  return sub_24A13263C();
}

uint64_t sub_24A132820()
{
  return sub_24A1326E8();
}

uint64_t sub_24A132834()
{
  sub_24A137FF0(&qword_2579098A8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218F4C);
  return sub_24A215858();
}

uint64_t sub_24A132884@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_257913908, (uint64_t)qword_25791D6D8, a1);
}

uint64_t sub_24A1328A0()
{
  sub_24A137FF0(&qword_257908DE8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218ED4);
  return sub_24A215918();
}

uint64_t sub_24A1328E0()
{
  sub_24A137FF0(&qword_257908DE8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218ED4);
  return sub_24A215924();
}

uint64_t sub_24A132934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D6F0);
  sub_24A136154(v0, (uint64_t)qword_25791D6F0);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218670;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "pieces";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "trainer_spec";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "normalizer_spec";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "self_test_data";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "denormalizer_spec";
  *(_QWORD *)(v16 + 8) = 17;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A132B44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  sub_24A135F88(&qword_257908DD0);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v49 = (uint64_t)&v44 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v3 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  v52 = v3;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v53 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A135F88(&qword_257908DC8);
  v5 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v54 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v50 = (uint64_t)&v44 - v7;
  v55 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v8 = *(_QWORD *)(v55 - 8);
  v9 = MEMORY[0x24BDAC7A8](v55);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v44 - v12;
  v14 = sub_24A135F88(&qword_257908DC0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for Sentencepiece_ModelProto(0);
  v22 = v0;
  if ((sub_24A215828() & 1) == 0)
    goto LABEL_14;
  v44 = v20;
  v45 = v11;
  v46 = v16;
  v47 = v8;
  v48 = v13;
  v23 = v55;
  sub_24A132FB4(*v0);
  v24 = sub_24A2157E0();
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
    goto LABEL_14;
  v25 = (uint64_t)v46;
  sub_24A1360A0((uint64_t)v22 + v21[7], (uint64_t)v46, &qword_257908DC0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v25, 1, v17) == 1)
  {
    sub_24A13DAA8(v25, &qword_257908DC0);
    v26 = v47;
    v27 = (uint64_t)v48;
  }
  else
  {
    v28 = (uint64_t)v44;
    sub_24A135FDC(v25, (uint64_t)v44, type metadata accessor for Sentencepiece_TrainerSpec);
    v29 = sub_24A215828();
    sub_24A136064(v28, type metadata accessor for Sentencepiece_TrainerSpec);
    v26 = v47;
    v27 = (uint64_t)v48;
    if ((v29 & 1) == 0)
      goto LABEL_14;
  }
  v30 = v22;
  v31 = v50;
  sub_24A1360A0((uint64_t)v22 + v21[8], v50, &qword_257908DC8);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  v33 = v23;
  if (v32(v31, 1, v23) == 1)
  {
    sub_24A13DAA8(v31, &qword_257908DC8);
    v35 = (uint64_t)v53;
    v34 = (uint64_t)v54;
    v36 = (uint64_t)v45;
    v38 = v51;
    v37 = v52;
  }
  else
  {
    sub_24A135FDC(v31, v27, type metadata accessor for Sentencepiece_NormalizerSpec);
    v39 = sub_24A215828();
    sub_24A136064(v27, type metadata accessor for Sentencepiece_NormalizerSpec);
    v35 = (uint64_t)v53;
    v34 = (uint64_t)v54;
    v36 = (uint64_t)v45;
    v38 = v51;
    v37 = v52;
    if ((v39 & 1) == 0)
      goto LABEL_14;
  }
  v40 = v49;
  sub_24A1360A0((uint64_t)v30 + v21[9], v49, &qword_257908DD0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v40, 1, v38) == 1)
  {
    sub_24A13DAA8(v40, &qword_257908DD0);
    goto LABEL_12;
  }
  sub_24A135FDC(v40, v35, type metadata accessor for Sentencepiece_SelfTestData);
  v41 = sub_24A215828();
  sub_24A136064(v35, type metadata accessor for Sentencepiece_SelfTestData);
  if ((v41 & 1) == 0)
  {
LABEL_14:
    v42 = 0;
    return v42 & 1;
  }
LABEL_12:
  sub_24A1360A0((uint64_t)v30 + v21[10], v34, &qword_257908DC8);
  if (v32(v34, 1, v33) == 1)
  {
    sub_24A13DAA8(v34, &qword_257908DC8);
    v42 = 1;
  }
  else
  {
    sub_24A135FDC(v34, v36, type metadata accessor for Sentencepiece_NormalizerSpec);
    v42 = sub_24A215828();
    sub_24A136064(v36, type metadata accessor for Sentencepiece_NormalizerSpec);
  }
  return v42 & 1;
}

uint64_t sub_24A132FB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_24A135044(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_24A136020(v8, (uint64_t)v5, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
      v17 = v7;
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        sub_24A135044((_QWORD *)(v10 > 1), v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
      v12 = sub_24A13DAE4((uint64_t *)&v14);
      sub_24A136020((uint64_t)v5, (uint64_t)v12, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
      *(_QWORD *)(v7 + 16) = v11 + 1;
      sub_24A13DB20(&v14, v7 + 40 * v11 + 32);
      sub_24A136064((uint64_t)v5, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t sub_24A13312C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t (*v5)(uint64_t);
  void *v6;

  result = sub_24A215870();
  if (!v0)
  {
    v3 = result;
    while ((v2 & 1) == 0)
    {
      switch(v3)
      {
        case 1:
          type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
          sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
          sub_24A2158E8();
          break;
        case 2:
          type metadata accessor for Sentencepiece_ModelProto(0);
          type metadata accessor for Sentencepiece_TrainerSpec(0);
          v4 = &qword_257908E30;
          v5 = type metadata accessor for Sentencepiece_TrainerSpec;
          v6 = &unk_24A218A74;
          goto LABEL_10;
        case 3:
        case 5:
          type metadata accessor for Sentencepiece_ModelProto(0);
          type metadata accessor for Sentencepiece_NormalizerSpec(0);
          v4 = &qword_257908E48;
          v5 = type metadata accessor for Sentencepiece_NormalizerSpec;
          v6 = &unk_24A218C04;
          goto LABEL_10;
        case 4:
          type metadata accessor for Sentencepiece_ModelProto(0);
          type metadata accessor for Sentencepiece_SelfTestData(0);
          v4 = &qword_257908E50;
          v5 = type metadata accessor for Sentencepiece_SelfTestData;
          v6 = &unk_24A218D6C;
LABEL_10:
          sub_24A137FF0(v4, v5, (uint64_t)v6);
          sub_24A2158F4();
          break;
        default:
          if ((unint64_t)(v3 - 200) <= 0x1FFFFF37)
          {
            type metadata accessor for Sentencepiece_ModelProto(0);
            sub_24A137FF0((unint64_t *)&qword_257908E70, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21903C);
            sub_24A21587C();
          }
          break;
      }
      result = sub_24A215870();
      v3 = result;
    }
  }
  return result;
}

uint64_t sub_24A133374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0),
        sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4), result = sub_24A21599C(), !v4))
  {
    result = sub_24A1334F4(v3, a1, a2, a3);
    if (!v4)
    {
      sub_24A133668(v3, a1, a2, a3);
      sub_24A1337DC(v3, a1, a2, a3);
      sub_24A133950(v3, a1, a2, a3);
      type metadata accessor for Sentencepiece_ModelProto(0);
      sub_24A215930();
      return sub_24A2157EC();
    }
  }
  return result;
}

uint64_t sub_24A1334F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = sub_24A135F88(&qword_257908DC0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sentencepiece_ModelProto(0);
  sub_24A1360A0(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_257908DC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_24A13DAA8((uint64_t)v7, &qword_257908DC0);
  sub_24A135FDC((uint64_t)v7, (uint64_t)v11, type metadata accessor for Sentencepiece_TrainerSpec);
  sub_24A137FF0(&qword_257908E30, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218A74);
  sub_24A2159A8();
  return sub_24A136064((uint64_t)v11, type metadata accessor for Sentencepiece_TrainerSpec);
}

uint64_t sub_24A133668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = sub_24A135F88(&qword_257908DC8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sentencepiece_ModelProto(0);
  sub_24A1360A0(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_257908DC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_24A13DAA8((uint64_t)v7, &qword_257908DC8);
  sub_24A135FDC((uint64_t)v7, (uint64_t)v11, type metadata accessor for Sentencepiece_NormalizerSpec);
  sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
  sub_24A2159A8();
  return sub_24A136064((uint64_t)v11, type metadata accessor for Sentencepiece_NormalizerSpec);
}

uint64_t sub_24A1337DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = sub_24A135F88(&qword_257908DD0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sentencepiece_ModelProto(0);
  sub_24A1360A0(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_257908DD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_24A13DAA8((uint64_t)v7, &qword_257908DD0);
  sub_24A135FDC((uint64_t)v7, (uint64_t)v11, type metadata accessor for Sentencepiece_SelfTestData);
  sub_24A137FF0(&qword_257908E50, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218D6C);
  sub_24A2159A8();
  return sub_24A136064((uint64_t)v11, type metadata accessor for Sentencepiece_SelfTestData);
}

uint64_t sub_24A133950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = sub_24A135F88(&qword_257908DC8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Sentencepiece_ModelProto(0);
  sub_24A1360A0(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_257908DC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_24A13DAA8((uint64_t)v7, &qword_257908DC8);
  sub_24A135FDC((uint64_t)v7, (uint64_t)v11, type metadata accessor for Sentencepiece_NormalizerSpec);
  sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
  sub_24A2159A8();
  return sub_24A136064((uint64_t)v11, type metadata accessor for Sentencepiece_NormalizerSpec);
}

uint64_t sub_24A133AC4@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);

  *a2 = MEMORY[0x24BEE4AF8];
  sub_24A2157F8();
  sub_24A215834();
  v4 = (char *)a2 + a1[7];
  v5 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + a1[8];
  v7 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v11(v6, 1, 1, v7);
  v8 = (char *)a2 + a1[9];
  v9 = type metadata accessor for Sentencepiece_SelfTestData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v11)((char *)a2 + a1[10], 1, 1, v7);
}

unint64_t sub_24A133BC0()
{
  return 0xD000000000000018;
}

uint64_t sub_24A133BE0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *(int *)(a1 + 20);
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t sub_24A133C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v4 + *(int *)(a2 + 20);
  v7 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v6, a1, v7);
}

uint64_t sub_24A133C60()
{
  return sub_24A13312C();
}

uint64_t sub_24A133C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A133374(a1, a2, a3);
}

uint64_t sub_24A133C88()
{
  sub_24A137FF0(&qword_2579098A0, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A2190B4);
  return sub_24A215858();
}

uint64_t sub_24A133CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_257913910, (uint64_t)qword_25791D6F0, a1);
}

uint64_t sub_24A133CF4()
{
  sub_24A137FF0((unint64_t *)&qword_257908E70, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21903C);
  return sub_24A215918();
}

uint64_t sub_24A133D34()
{
  sub_24A137FF0((unint64_t *)&qword_257908E70, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21903C);
  return sub_24A215924();
}

uint64_t sub_24A133D88()
{
  uint64_t result;

  result = sub_24A215D98();
  qword_25791D708 = 0xD000000000000018;
  unk_25791D710 = 0x800000024A21FEF0;
  return result;
}

uint64_t sub_24A133DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D718);
  sub_24A136154(v0, (uint64_t)qword_25791D718);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218680;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "piece";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "score";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "type";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A133F90()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  result = sub_24A215870();
  v3 = v0;
  if (!v0)
  {
    for (i = result; ; i = result)
    {
      if ((v2 & 1) != 0)
        return result;
      switch(i)
      {
        case 3:
          type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
          sub_24A13D9E0();
          v5 = v3;
          sub_24A215894();
          break;
        case 2:
          type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
          v5 = v3;
          sub_24A2158AC();
          break;
        case 1:
          type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
          v5 = v3;
          sub_24A2158D0();
          break;
        default:
          if ((unint64_t)(i - 200) >= 0x1FFFFF38)
            goto LABEL_14;
          type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
          sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
          v5 = v3;
          sub_24A21587C();
          break;
      }
      v3 = v5;
LABEL_14:
      result = sub_24A215870();
    }
  }
  return result;
}

uint64_t sub_24A13411C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  v3 = result;
  if (*(_QWORD *)(v0 + *(int *)(result + 24) + 8))
    result = sub_24A215984();
  if (!v1)
  {
    if ((*(_BYTE *)(v0 + *(int *)(v3 + 28) + 4) & 1) == 0)
      sub_24A215960();
    if (*(_BYTE *)(v0 + *(int *)(v3 + 32)) != 6)
    {
      sub_24A13D9E0();
      sub_24A215948();
    }
    sub_24A215930();
    return sub_24A2157EC();
  }
  return result;
}

uint64_t sub_24A13425C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  sub_24A2157F8();
  result = sub_24A215834();
  v5 = a1[7];
  v6 = (_QWORD *)(a2 + a1[6]);
  *v6 = 0;
  v6[1] = 0;
  v7 = a2 + v5;
  *(_DWORD *)v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  *(_BYTE *)(a2 + a1[8]) = 6;
  return result;
}

uint64_t sub_24A1342B4(uint64_t a1, uint64_t a2)
{
  return sub_24A1342D4(a1, a2, &qword_257913918, &qword_25791D708);
}

uint64_t sub_24A1342D4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_24A134328()
{
  return sub_24A215828() & 1;
}

uint64_t sub_24A134350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_24A215804();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_24A134388(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_24A215804();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_24A1343C0()
{
  return sub_24A133F90();
}

uint64_t sub_24A1343D4()
{
  return sub_24A13411C();
}

uint64_t sub_24A1343E8()
{
  sub_24A137FF0(&qword_257909898, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A21921C);
  return sub_24A215858();
}

uint64_t sub_24A134438@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(&qword_257913920, (uint64_t)qword_25791D718, a1);
}

uint64_t sub_24A134454()
{
  sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
  return sub_24A215918();
}

uint64_t sub_24A134494()
{
  sub_24A216638();
  sub_24A215C54();
  return sub_24A21665C();
}

uint64_t sub_24A1344E8()
{
  sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
  return sub_24A215924();
}

uint64_t sub_24A134538()
{
  sub_24A216638();
  sub_24A215C54();
  return sub_24A21665C();
}

uint64_t sub_24A13458C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_24A2159CC();
  sub_24A13DA68(v0, qword_25791D730);
  sub_24A136154(v0, (uint64_t)qword_25791D730);
  sub_24A135F88(&qword_2579098D8);
  v1 = sub_24A135F88(&qword_2579098E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A218640;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "NORMAL";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_24A2159B4();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "UNKNOWN";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "CONTROL";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "USER_DEFINED";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "UNUSED";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "BYTE";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  return sub_24A2159C0();
}

uint64_t sub_24A1347C0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1347DC(qword_257913928, (uint64_t)qword_25791D730, a1);
}

uint64_t sub_24A1347DC@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_24A2159CC();
  v6 = sub_24A136154(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_24A134848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  BOOL v29;
  uint64_t v31;

  v4 = type metadata accessor for Sentencepiece_SelfTestData.Sample(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v31 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      while (1)
      {
        sub_24A136020(a1 + v12, (uint64_t)v10, type metadata accessor for Sentencepiece_SelfTestData.Sample);
        sub_24A136020(a2 + v12, (uint64_t)v7, type metadata accessor for Sentencepiece_SelfTestData.Sample);
        v15 = *(int *)(v4 + 20);
        v16 = &v10[v15];
        v17 = *(_QWORD *)&v10[v15 + 8];
        v18 = &v7[v15];
        v19 = *((_QWORD *)v18 + 1);
        if (v17)
        {
          if (!v19
            || (*(_QWORD *)v16 == *(_QWORD *)v18 ? (v20 = v17 == v19) : (v20 = 0), !v20 && (sub_24A21659C() & 1) == 0))
          {
LABEL_30:
            sub_24A136064((uint64_t)v7, type metadata accessor for Sentencepiece_SelfTestData.Sample);
            sub_24A136064((uint64_t)v10, type metadata accessor for Sentencepiece_SelfTestData.Sample);
            goto LABEL_31;
          }
        }
        else if (v19)
        {
          goto LABEL_30;
        }
        v21 = *(int *)(v4 + 24);
        v22 = &v10[v21];
        v23 = *(_QWORD *)&v10[v21 + 8];
        v24 = &v7[v21];
        v25 = *((_QWORD *)v24 + 1);
        if (v23)
        {
          if (!v25)
            goto LABEL_30;
          v26 = *(_QWORD *)v22 == *(_QWORD *)v24 && v23 == v25;
          if (!v26 && (sub_24A21659C() & 1) == 0)
            goto LABEL_30;
        }
        else if (v25)
        {
          goto LABEL_30;
        }
        sub_24A215804();
        sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v27 = sub_24A215C6C();
        sub_24A136064((uint64_t)v7, type metadata accessor for Sentencepiece_SelfTestData.Sample);
        sub_24A136064((uint64_t)v10, type metadata accessor for Sentencepiece_SelfTestData.Sample);
        v29 = v14-- != 0;
        if ((v27 & 1) != 0)
        {
          v12 += v13;
          if (v29)
            continue;
        }
        return v27 & 1;
      }
    }
    v27 = 1;
  }
  else
  {
LABEL_31:
    v27 = 0;
  }
  return v27 & 1;
}

uint64_t sub_24A134A60(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  float *v21;
  char v22;
  float *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  char v31;
  uint64_t v33;
  uint64_t v34;

  v4 = (int *)type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v33 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (v11 && a1 != a2)
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v33 = *(_QWORD *)(v8 + 72);
      v13 = v11 - 1;
      while (1)
      {
        sub_24A136020(a1 + v12, (uint64_t)v10, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
        sub_24A136020(a2 + v12, (uint64_t)v7, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
        v14 = v4[6];
        v15 = &v10[v14];
        v16 = *(_QWORD *)&v10[v14 + 8];
        v17 = &v7[v14];
        v18 = *((_QWORD *)v17 + 1);
        if (v16)
        {
          if (!v18)
            goto LABEL_33;
          v19 = *(_QWORD *)v15 == *(_QWORD *)v17 && v16 == v18;
          if (!v19 && (sub_24A21659C() & 1) == 0)
            goto LABEL_33;
        }
        else if (v18)
        {
          goto LABEL_33;
        }
        v20 = v4[7];
        v21 = (float *)&v10[v20];
        v22 = v10[v20 + 4];
        v23 = (float *)&v7[v20];
        v24 = v7[v20 + 4];
        if ((v22 & 1) != 0)
        {
          if (!v24)
            goto LABEL_33;
        }
        else
        {
          if (*v21 != *v23)
            LOBYTE(v24) = 1;
          if ((v24 & 1) != 0)
          {
LABEL_33:
            sub_24A136064((uint64_t)v7, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
            sub_24A136064((uint64_t)v10, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
            goto LABEL_34;
          }
        }
        v25 = v4[8];
        v26 = v10[v25];
        v27 = v7[v25];
        if (v26 == 6)
        {
          if ((_DWORD)v27 != 6)
            goto LABEL_33;
        }
        else if ((_DWORD)v27 == 6 || qword_24A219600[v26] != qword_24A219600[v27])
        {
          goto LABEL_33;
        }
        sub_24A215804();
        sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        if ((sub_24A215C6C() & 1) == 0)
          goto LABEL_33;
        v34 = v13;
        sub_24A215840();
        sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
        v28 = v34;
        v29 = sub_24A215C6C();
        sub_24A136064((uint64_t)v7, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
        sub_24A136064((uint64_t)v10, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
        v30 = v28 != 0;
        v13 = v28 - 1;
        v31 = v30;
        if ((v29 & 1) != 0)
        {
          v12 += v33;
          if ((v31 & 1) != 0)
            continue;
        }
        return v29 & 1;
      }
    }
    v29 = 1;
  }
  else
  {
LABEL_34:
    v29 = 0;
  }
  return v29 & 1;
}

uint64_t sub_24A134D18(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_24A21659C(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_24A21659C() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

void sub_24A134DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_24A134E3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x24A135020);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

_QWORD *sub_24A135044(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_24A135060(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_24A135060(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_257909910);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_24A135F88(&qword_257909918);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_24A135194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v30;

  v2 = a1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 56) = 4;
  *(_DWORD *)(v1 + 60) = 0;
  *(_BYTE *)(v1 + 64) = 1;
  *(_QWORD *)(v1 + 72) = v3;
  *(_DWORD *)(v1 + 80) = 0;
  *(_WORD *)(v1 + 84) = 513;
  *(_DWORD *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 92) = 1;
  *(_QWORD *)(v1 + 96) = 0;
  v30 = (_BYTE *)(a1 + 256);
  *(_BYTE *)(v1 + 104) = 1;
  *(_DWORD *)(v1 + 108) = 0;
  *(_BYTE *)(v1 + 112) = 1;
  *(_QWORD *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 128) = 513;
  *(_DWORD *)(v1 + 132) = 0;
  *(_DWORD *)(v1 + 140) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  *(_BYTE *)(v1 + 144) = 1;
  *(_DWORD *)(v1 + 148) = 0;
  *(_BYTE *)(v1 + 152) = 1;
  *(_DWORD *)(v1 + 156) = 0;
  *(_DWORD *)(v1 + 164) = 0;
  *(_BYTE *)(v1 + 160) = 1;
  *(_BYTE *)(v1 + 168) = 1;
  *(_DWORD *)(v1 + 172) = 0;
  *(_BYTE *)(v1 + 176) = 1;
  *(_DWORD *)(v1 + 180) = 0;
  *(_DWORD *)(v1 + 188) = 0;
  *(_BYTE *)(v1 + 184) = 1;
  *(_BYTE *)(v1 + 192) = 1;
  *(_WORD *)(v1 + 197) = 514;
  *(_DWORD *)(v1 + 193) = 33686018;
  *(_QWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 216) = v3;
  *(_QWORD *)(v1 + 224) = v3;
  *(_QWORD *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 256) = 1;
  *(_BYTE *)(v1 + 264) = 1;
  *(_BYTE *)(v1 + 272) = 1;
  *(_BYTE *)(v1 + 280) = 1;
  *(_BYTE *)(v1 + 368) = 2;
  *(_QWORD *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 248) = 33686018;
  *(_DWORD *)(v1 + 260) = 0;
  *(_DWORD *)(v1 + 268) = 0;
  *(_DWORD *)(v1 + 276) = 0;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 352) = 0u;
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 16);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8 = *(_QWORD *)(v2 + 40);
  v7 = *(_QWORD *)(v2 + 48);
  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = v8;
  *(_QWORD *)(v1 + 48) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v7) = *(_BYTE *)(v2 + 56);
  swift_beginAccess();
  *(_BYTE *)(v1 + 56) = v7;
  swift_beginAccess();
  LODWORD(v7) = *(_DWORD *)(v2 + 60);
  v9 = *(_BYTE *)(v2 + 64);
  swift_beginAccess();
  *(_DWORD *)(v1 + 60) = v7;
  *(_BYTE *)(v1 + 64) = v9;
  swift_beginAccess();
  v10 = *(_QWORD *)(v2 + 72);
  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v10) = *(_DWORD *)(v2 + 80);
  LOBYTE(v7) = *(_BYTE *)(v2 + 84);
  swift_beginAccess();
  *(_DWORD *)(v1 + 80) = v10;
  *(_BYTE *)(v1 + 84) = v7;
  swift_beginAccess();
  LOBYTE(v10) = *(_BYTE *)(v2 + 85);
  swift_beginAccess();
  *(_BYTE *)(v1 + 85) = v10;
  swift_beginAccess();
  LODWORD(v10) = *(_DWORD *)(v2 + 88);
  LOBYTE(v7) = *(_BYTE *)(v2 + 92);
  swift_beginAccess();
  *(_DWORD *)(v1 + 88) = v10;
  *(_BYTE *)(v1 + 92) = v7;
  swift_beginAccess();
  v11 = *(_QWORD *)(v2 + 96);
  LOBYTE(v7) = *(_BYTE *)(v2 + 104);
  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = v11;
  *(_BYTE *)(v1 + 104) = v7;
  swift_beginAccess();
  LODWORD(v11) = *(_DWORD *)(v2 + 108);
  LOBYTE(v7) = *(_BYTE *)(v2 + 112);
  swift_beginAccess();
  *(_DWORD *)(v1 + 108) = v11;
  *(_BYTE *)(v1 + 112) = v7;
  swift_beginAccess();
  v12 = *(_QWORD *)(v2 + 120);
  LOBYTE(v7) = *(_BYTE *)(v2 + 128);
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = v12;
  *(_BYTE *)(v1 + 128) = v7;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 129);
  swift_beginAccess();
  *(_BYTE *)(v1 + 129) = v12;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 132);
  LOBYTE(v7) = *(_BYTE *)(v2 + 136);
  swift_beginAccess();
  *(_DWORD *)(v1 + 132) = v12;
  *(_BYTE *)(v1 + 136) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 140);
  LOBYTE(v7) = *(_BYTE *)(v2 + 144);
  swift_beginAccess();
  *(_DWORD *)(v1 + 140) = v12;
  *(_BYTE *)(v1 + 144) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 148);
  LOBYTE(v7) = *(_BYTE *)(v2 + 152);
  swift_beginAccess();
  *(_DWORD *)(v1 + 148) = v12;
  *(_BYTE *)(v1 + 152) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 156);
  LOBYTE(v7) = *(_BYTE *)(v2 + 160);
  swift_beginAccess();
  *(_DWORD *)(v1 + 156) = v12;
  *(_BYTE *)(v1 + 160) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 164);
  LOBYTE(v7) = *(_BYTE *)(v2 + 168);
  swift_beginAccess();
  *(_DWORD *)(v1 + 164) = v12;
  *(_BYTE *)(v1 + 168) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 172);
  LOBYTE(v7) = *(_BYTE *)(v2 + 176);
  swift_beginAccess();
  *(_DWORD *)(v1 + 172) = v12;
  *(_BYTE *)(v1 + 176) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 180);
  LOBYTE(v7) = *(_BYTE *)(v2 + 184);
  swift_beginAccess();
  *(_DWORD *)(v1 + 180) = v12;
  *(_BYTE *)(v1 + 184) = v7;
  swift_beginAccess();
  LODWORD(v12) = *(_DWORD *)(v2 + 188);
  LOBYTE(v7) = *(_BYTE *)(v2 + 192);
  swift_beginAccess();
  *(_DWORD *)(v1 + 188) = v12;
  *(_BYTE *)(v1 + 192) = v7;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 193);
  swift_beginAccess();
  *(_BYTE *)(v1 + 193) = v12;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 194);
  swift_beginAccess();
  *(_BYTE *)(v1 + 194) = v12;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 195);
  swift_beginAccess();
  *(_BYTE *)(v1 + 195) = v12;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 196);
  swift_beginAccess();
  *(_BYTE *)(v1 + 196) = v12;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 197);
  swift_beginAccess();
  *(_BYTE *)(v1 + 197) = v12;
  swift_beginAccess();
  LOBYTE(v12) = *(_BYTE *)(v2 + 198);
  swift_beginAccess();
  *(_BYTE *)(v1 + 198) = v12;
  swift_beginAccess();
  v14 = *(_QWORD *)(v2 + 200);
  v13 = *(_QWORD *)(v2 + 208);
  swift_beginAccess();
  *(_QWORD *)(v1 + 200) = v14;
  *(_QWORD *)(v1 + 208) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v15 = *(_QWORD *)(v2 + 216);
  swift_beginAccess();
  *(_QWORD *)(v1 + 216) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v16 = *(_QWORD *)(v2 + 224);
  swift_beginAccess();
  *(_QWORD *)(v1 + 224) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v18 = *(_QWORD *)(v2 + 232);
  v17 = *(_QWORD *)(v2 + 240);
  swift_beginAccess();
  *(_QWORD *)(v1 + 232) = v18;
  *(_QWORD *)(v1 + 240) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v17) = *(_BYTE *)(v2 + 248);
  swift_beginAccess();
  *(_BYTE *)(v1 + 248) = v17;
  swift_beginAccess();
  LOBYTE(v17) = *(_BYTE *)(v2 + 249);
  swift_beginAccess();
  *(_BYTE *)(v1 + 249) = v17;
  swift_beginAccess();
  LOBYTE(v17) = *(_BYTE *)(v2 + 250);
  swift_beginAccess();
  *(_BYTE *)(v1 + 250) = v17;
  swift_beginAccess();
  LOBYTE(v17) = *(_BYTE *)(v2 + 251);
  swift_beginAccess();
  *(_BYTE *)(v1 + 251) = v17;
  swift_beginAccess();
  LODWORD(v17) = *(_DWORD *)(v2 + 252);
  LOBYTE(v7) = *(_BYTE *)(v2 + 256);
  swift_beginAccess();
  *(_DWORD *)(v1 + 252) = v17;
  *(_BYTE *)(v1 + 256) = v7;
  swift_beginAccess();
  LODWORD(v17) = *(_DWORD *)(v2 + 260);
  LOBYTE(v7) = v30[8];
  swift_beginAccess();
  *(_DWORD *)(v1 + 260) = v17;
  *(_BYTE *)(v1 + 264) = v7;
  swift_beginAccess();
  LODWORD(v17) = *(_DWORD *)(v2 + 268);
  LOBYTE(v7) = v30[16];
  swift_beginAccess();
  *(_DWORD *)(v1 + 268) = v17;
  *(_BYTE *)(v1 + 272) = v7;
  swift_beginAccess();
  LODWORD(v17) = *(_DWORD *)(v2 + 276);
  LOBYTE(v7) = v30[24];
  swift_beginAccess();
  *(_DWORD *)(v1 + 276) = v17;
  *(_BYTE *)(v1 + 280) = v7;
  swift_beginAccess();
  v20 = *(_QWORD *)(v2 + 288);
  v19 = *(_QWORD *)(v2 + 296);
  swift_beginAccess();
  *(_QWORD *)(v1 + 288) = v20;
  *(_QWORD *)(v1 + 296) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v22 = *(_QWORD *)(v2 + 304);
  v21 = *(_QWORD *)(v2 + 312);
  swift_beginAccess();
  *(_QWORD *)(v1 + 304) = v22;
  *(_QWORD *)(v1 + 312) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v24 = *(_QWORD *)(v2 + 320);
  v23 = *(_QWORD *)(v2 + 328);
  swift_beginAccess();
  *(_QWORD *)(v1 + 320) = v24;
  *(_QWORD *)(v1 + 328) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v26 = *(_QWORD *)(v2 + 336);
  v25 = *(_QWORD *)(v2 + 344);
  swift_beginAccess();
  *(_QWORD *)(v1 + 336) = v26;
  *(_QWORD *)(v1 + 344) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v28 = *(_QWORD *)(v2 + 352);
  v27 = *(_QWORD *)(v2 + 360);
  swift_beginAccess();
  *(_QWORD *)(v1 + 352) = v28;
  *(_QWORD *)(v1 + 360) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LOBYTE(v2) = *(_BYTE *)(v2 + 368);
  swift_beginAccess();
  *(_BYTE *)(v1 + 368) = v2;
  return v1;
}

uint64_t sub_24A135E78(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x302010004uLL >> (8 * a1));
}

uint64_t type metadata accessor for Sentencepiece_NormalizerSpec(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_2579153C0);
}

uint64_t sub_24A135EB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_24A135EC4(a1, a2);
  return a1;
}

uint64_t sub_24A135EC4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_24A135F08(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_24A135F1C(a1, a2);
  return a1;
}

uint64_t sub_24A135F1C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t type metadata accessor for Sentencepiece_SelfTestData(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_2579153D0);
}

uint64_t type metadata accessor for Sentencepiece_SelfTestData.Sample(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_2579153E0);
}

uint64_t sub_24A135F88(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD0A9D4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for Sentencepiece_ModelProto(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_2579153F0);
}

uint64_t sub_24A135FDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A136020(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A136064(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1360A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_24A135F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Sentencepiece_ModelProto.SentencePiece(uint64_t a1)
{
  return sub_24A1360F8(a1, (uint64_t *)&unk_257915400);
}

uint64_t sub_24A1360F8(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A13612C(unint64_t a1)
{
  if (a1 >= 7)
    return 6;
  else
    return (0x4050302010006uLL >> (8 * a1));
}

uint64_t sub_24A136154(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_24A13616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_24A134DDC((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_24A136240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_24A21569C();
  v11 = result;
  if (result)
  {
    result = sub_24A2156B4();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_24A2156A8();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_24A134DDC(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_24A1362F4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_24A136340()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_24A136374 + dword_24A13654C[v0 >> 62]))();
}

uint64_t sub_24A136384@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_24A13656C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  void (*v53)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v54;
  _BYTE *v55;
  void (*v56)(_BYTE *, uint64_t);
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;

  v4 = sub_24A215840();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v57[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v57[-v9];
  v11 = sub_24A215804();
  v63 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v57[-v15];
  v17 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v18 = v17[6];
  v19 = (_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if (!v20)
  {
    v61 = v10;
    v62 = v8;
    if (v22)
      goto LABEL_15;
    goto LABEL_10;
  }
  if (!v22)
    goto LABEL_15;
  v61 = v10;
  v62 = v8;
  v23 = *v19 == *v21 && v20 == v22;
  if (v23 || (v24 = 0, (sub_24A21659C() & 1) != 0))
  {
LABEL_10:
    v59 = v5;
    v60 = v4;
    v25 = v17[7];
    v27 = *(_QWORD *)(a1 + v25);
    v26 = *(_QWORD *)(a1 + v25 + 8);
    v28 = (uint64_t *)(a2 + v25);
    v29 = *v28;
    v30 = v28[1];
    if (v26 >> 60 == 15)
    {
      if (v30 >> 60 == 15)
      {
LABEL_18:
        v33 = v17[8];
        v34 = *(unsigned __int8 *)(a1 + v33);
        v35 = *(unsigned __int8 *)(a2 + v33);
        if (v34 == 2)
        {
          v37 = v59;
          v36 = v60;
          if (v35 != 2)
            goto LABEL_15;
        }
        else
        {
          v37 = v59;
          v36 = v60;
          if (v35 == 2 || ((((v35 & 1) == 0) ^ v34) & 1) == 0)
            goto LABEL_15;
        }
        v38 = v17[9];
        v39 = *(unsigned __int8 *)(a1 + v38);
        v40 = *(unsigned __int8 *)(a2 + v38);
        if (v39 == 2)
        {
          if (v40 != 2)
            goto LABEL_15;
        }
        else if (v40 == 2 || ((((v40 & 1) == 0) ^ v39) & 1) == 0)
        {
          goto LABEL_15;
        }
        v41 = v17[10];
        v42 = *(unsigned __int8 *)(a1 + v41);
        v43 = *(unsigned __int8 *)(a2 + v41);
        if (v42 == 2)
        {
          if (v43 != 2)
            goto LABEL_15;
        }
        else if (v43 == 2 || ((((v43 & 1) == 0) ^ v42) & 1) == 0)
        {
          goto LABEL_15;
        }
        v44 = v17[11];
        v45 = (_QWORD *)(a1 + v44);
        v46 = *(_QWORD *)(a1 + v44 + 8);
        v47 = (_QWORD *)(a2 + v44);
        v48 = v47[1];
        if (v46)
        {
          if (v48)
          {
            if (*v45 != *v47 || v46 != v48)
            {
              v24 = 0;
              if ((sub_24A21659C() & 1) == 0)
                return v24 & 1;
            }
            goto LABEL_40;
          }
        }
        else if (!v48)
        {
LABEL_40:
          v49 = v63;
          v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v63 + 16);
          v50(v16, a1, v11);
          v50(v14, a2, v11);
          sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          LOBYTE(v50) = sub_24A215C6C();
          v51 = *(void (**)(_BYTE *, uint64_t))(v49 + 8);
          v51(v14, v11);
          v51(v16, v11);
          if ((v50 & 1) != 0)
          {
            v52 = a1 + v17[5];
            v53 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v37 + 16);
            v54 = v61;
            v53(v61, v52, v36);
            v55 = v62;
            v53(v62, a2 + v17[5], v36);
            sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
            v24 = sub_24A215C6C();
            v56 = *(void (**)(_BYTE *, uint64_t))(v37 + 8);
            v56(v55, v36);
            v56(v54, v36);
            return v24 & 1;
          }
        }
LABEL_15:
        v24 = 0;
        return v24 & 1;
      }
    }
    else if (v30 >> 60 != 15)
    {
      sub_24A135EB0(v27, v26);
      sub_24A135EB0(v29, v30);
      sub_24A1362F4(v27, v26);
      v58 = v32;
      sub_24A135F08(v29, v30);
      sub_24A135F08(v27, v26);
      if ((v58 & 1) == 0)
        goto LABEL_15;
      goto LABEL_18;
    }
    sub_24A135EB0(v27, v26);
    sub_24A135EB0(v29, v30);
    sub_24A135F08(v27, v26);
    sub_24A135F08(v29, v30);
    goto LABEL_15;
  }
  return v24 & 1;
}

uint64_t sub_24A136988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v28;
  uint64_t v29;

  v4 = sub_24A215840();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  v11 = sub_24A215804();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v28 - v16;
  if ((sub_24A134848(*a1, *a2) & 1) == 0)
    goto LABEL_4;
  v28 = v8;
  v29 = v5;
  v18 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v19 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v19(v17, (char *)a1 + *(int *)(v18 + 20), v11);
  v19(v15, (char *)a2 + *(int *)(v18 + 20), v11);
  sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  LOBYTE(v19) = sub_24A215C6C();
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, v11);
  v20(v17, v11);
  if ((v19 & 1) != 0)
  {
    v21 = v29;
    v22 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v22(v10, (char *)a1 + *(int *)(v18 + 24), v4);
    v23 = (char *)a2 + *(int *)(v18 + 24);
    v24 = v28;
    v22(v28, v23, v4);
    sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
    v25 = sub_24A215C6C();
    v26 = *(void (**)(char *, uint64_t))(v21 + 8);
    v26(v24, v4);
    v26(v10, v4);
  }
  else
  {
LABEL_4:
    v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_24A136BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;

  v4 = sub_24A215804();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for Sentencepiece_SelfTestData.Sample(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  if (!v14)
  {
    if (v16)
      goto LABEL_19;
    goto LABEL_10;
  }
  if (!v16)
    goto LABEL_19;
  v17 = *v13 == *v15 && v14 == v16;
  if (v17 || (v18 = 0, (sub_24A21659C() & 1) != 0))
  {
LABEL_10:
    v19 = *(int *)(v11 + 24);
    v20 = (_QWORD *)(a1 + v19);
    v21 = *(_QWORD *)(a1 + v19 + 8);
    v22 = (_QWORD *)(a2 + v19);
    v23 = v22[1];
    if (v21)
    {
      if (v23)
      {
        if (*v20 != *v22 || v21 != v23)
        {
          v18 = 0;
          if ((sub_24A21659C() & 1) == 0)
            return v18 & 1;
        }
LABEL_20:
        v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
        v25(v10, a1, v4);
        v25(v8, a2, v4);
        sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v18 = sub_24A215C6C();
        v26 = *(void (**)(char *, uint64_t))(v5 + 8);
        v26(v8, v4);
        v26(v10, v4);
        return v18 & 1;
      }
    }
    else if (!v23)
    {
      goto LABEL_20;
    }
LABEL_19:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_24A136D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char v29;
  char v30;
  _QWORD *v31;
  char v32;
  char v33;
  int v34;
  int v35;
  float v36;
  char v37;
  char v38;
  char v39;
  char v40;
  float v41;
  char v42;
  char v43;
  char v44;
  char v45;
  int v46;
  int v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  float v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  char v117;
  uint64_t v118;
  void (*v119)(_BYTE *, uint64_t, uint64_t);
  void (*v120)(_BYTE *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v124;
  uint64_t v125;
  _BYTE *v126;
  char v127;
  uint64_t v128;
  void (*v129)(_BYTE *, uint64_t);
  _BYTE v131[12];
  int v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  _BYTE *v141;

  v139 = sub_24A215840();
  v4 = *(_QWORD *)(v139 - 8);
  v5 = MEMORY[0x24BDAC7A8](v139);
  v141 = &v131[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v140 = &v131[-v7];
  v8 = sub_24A215804();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v131[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v131[-v13];
  v138 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v15 = *(int *)(v138 + 24);
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a2 + v15);
  if (v16 == v17)
  {
LABEL_249:
    v118 = v9;
    v119 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16);
    v119(v14, a1, v8);
    v119(v12, a2, v8);
    sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    LOBYTE(v119) = sub_24A215C6C();
    v120 = *(void (**)(_BYTE *, uint64_t))(v118 + 8);
    v120(v12, v8);
    v120(v14, v8);
    if ((v119 & 1) != 0)
    {
      v121 = v138;
      v122 = v139;
      v123 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16);
      v124 = v140;
      v123(v140, a1 + *(int *)(v138 + 20), v139);
      v125 = a2 + *(int *)(v121 + 20);
      v126 = v141;
      v123(v141, v125, v122);
      sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
      v127 = sub_24A215C6C();
      v128 = v4;
      v23 = v127;
      v129 = *(void (**)(_BYTE *, uint64_t))(v128 + 8);
      v129(v126, v122);
      v129(v124, v122);
      return v23 & 1;
    }
LABEL_251:
    v23 = 0;
    return v23 & 1;
  }
  v137 = v9;
  swift_beginAccess();
  v18 = *(_QWORD **)(v16 + 16);
  swift_beginAccess();
  if ((sub_24A134D18(v18, *(_QWORD **)(v17 + 16)) & 1) == 0)
    goto LABEL_251;
  v136 = v4;
  swift_beginAccess();
  v19 = *(_QWORD *)(v16 + 24);
  v20 = *(_QWORD *)(v16 + 32);
  swift_beginAccess();
  v21 = *(_QWORD *)(v17 + 32);
  if (!v20)
  {
    if (v21)
      goto LABEL_251;
LABEL_12:
    swift_beginAccess();
    v25 = *(_QWORD *)(v16 + 40);
    v24 = *(_QWORD *)(v16 + 48);
    swift_beginAccess();
    v26 = *(_QWORD *)(v17 + 48);
    if (v24)
    {
      if (!v26)
        goto LABEL_251;
      if (v25 != *(_QWORD *)(v17 + 40) || v24 != v26)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v26)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v27 = *(unsigned __int8 *)(v16 + 56);
    swift_beginAccess();
    v28 = *(unsigned __int8 *)(v17 + 56);
    if (v27 == 4)
    {
      if (v28 != 4)
        goto LABEL_251;
    }
    else
    {
      v23 = 0;
      if (v28 == 4 || v27 != v28)
        return v23 & 1;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 60);
    v29 = *(_BYTE *)(v16 + 64);
    swift_beginAccess();
    v30 = *(_BYTE *)(v17 + 64);
    if ((v29 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 64))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 60))
        v30 = 1;
      if ((v30 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v31 = *(_QWORD **)(v16 + 72);
    swift_beginAccess();
    if ((sub_24A134D18(v31, *(_QWORD **)(v17 + 72)) & 1) == 0)
      goto LABEL_251;
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 80);
    v32 = *(_BYTE *)(v16 + 84);
    swift_beginAccess();
    v33 = *(_BYTE *)(v17 + 84);
    if ((v32 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 84))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 80))
        v33 = 1;
      if ((v33 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v34 = *(unsigned __int8 *)(v16 + 85);
    swift_beginAccess();
    v35 = *(unsigned __int8 *)(v17 + 85);
    if (v34 == 2)
    {
      if (v35 != 2)
        goto LABEL_251;
    }
    else if (v35 == 2 || ((v34 ^ ((v35 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v36 = *(float *)(v16 + 88);
    v37 = *(_BYTE *)(v16 + 92);
    swift_beginAccess();
    v38 = *(_BYTE *)(v17 + 92);
    if ((v37 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 92))
        goto LABEL_251;
    }
    else
    {
      if (v36 != *(float *)(v17 + 88))
        v38 = 1;
      if ((v38 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v135 = *(_QWORD *)(v16 + 96);
    v39 = *(_BYTE *)(v16 + 104);
    swift_beginAccess();
    v40 = *(_BYTE *)(v17 + 104);
    if ((v39 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 104))
        goto LABEL_251;
    }
    else
    {
      if (v135 != *(_QWORD *)(v17 + 96))
        v40 = 1;
      if ((v40 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v41 = *(float *)(v16 + 108);
    v42 = *(_BYTE *)(v16 + 112);
    swift_beginAccess();
    v43 = *(_BYTE *)(v17 + 112);
    if ((v42 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 112))
        goto LABEL_251;
    }
    else
    {
      if (v41 != *(float *)(v17 + 108))
        v43 = 1;
      if ((v43 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v135 = *(_QWORD *)(v16 + 120);
    v44 = *(_BYTE *)(v16 + 128);
    swift_beginAccess();
    v45 = *(_BYTE *)(v17 + 128);
    if ((v44 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 128))
        goto LABEL_251;
    }
    else
    {
      if (v135 != *(_QWORD *)(v17 + 120))
        v45 = 1;
      if ((v45 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v46 = *(unsigned __int8 *)(v16 + 129);
    swift_beginAccess();
    v47 = *(unsigned __int8 *)(v17 + 129);
    if (v46 == 2)
    {
      if (v47 != 2)
        goto LABEL_251;
    }
    else if (v47 == 2 || ((v46 ^ ((v47 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 132);
    v48 = *(_BYTE *)(v16 + 136);
    swift_beginAccess();
    v49 = *(_BYTE *)(v17 + 136);
    if ((v48 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 136))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 132))
        v49 = 1;
      if ((v49 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 140);
    v50 = *(_BYTE *)(v16 + 144);
    swift_beginAccess();
    v51 = *(_BYTE *)(v17 + 144);
    if ((v50 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 144))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 140))
        v51 = 1;
      if ((v51 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 148);
    v52 = *(_BYTE *)(v16 + 152);
    swift_beginAccess();
    v53 = *(_BYTE *)(v17 + 152);
    if ((v52 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 152))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 148))
        v53 = 1;
      if ((v53 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v54 = *(float *)(v16 + 156);
    v55 = *(_BYTE *)(v16 + 160);
    swift_beginAccess();
    v56 = *(_BYTE *)(v17 + 160);
    if ((v55 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 160))
        goto LABEL_251;
    }
    else
    {
      if (v54 != *(float *)(v17 + 156))
        v56 = 1;
      if ((v56 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 164);
    v57 = *(_BYTE *)(v16 + 168);
    swift_beginAccess();
    v58 = *(_BYTE *)(v17 + 168);
    if ((v57 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 168))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 164))
        v58 = 1;
      if ((v58 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 172);
    v59 = *(_BYTE *)(v16 + 176);
    swift_beginAccess();
    v60 = *(_BYTE *)(v17 + 176);
    if ((v59 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 176))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 172))
        v60 = 1;
      if ((v60 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 180);
    v61 = *(_BYTE *)(v16 + 184);
    swift_beginAccess();
    v62 = *(_BYTE *)(v17 + 184);
    if ((v61 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 184))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 180))
        v62 = 1;
      if ((v62 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 188);
    v63 = *(_BYTE *)(v16 + 192);
    swift_beginAccess();
    v64 = *(_BYTE *)(v17 + 192);
    if ((v63 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 192))
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 188))
        v64 = 1;
      if ((v64 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v65 = *(unsigned __int8 *)(v16 + 193);
    swift_beginAccess();
    v66 = *(unsigned __int8 *)(v17 + 193);
    if (v65 == 2)
    {
      if (v66 != 2)
        goto LABEL_251;
    }
    else if (v66 == 2 || ((v65 ^ ((v66 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v67 = *(unsigned __int8 *)(v16 + 194);
    swift_beginAccess();
    v68 = *(unsigned __int8 *)(v17 + 194);
    if (v67 == 2)
    {
      if (v68 != 2)
        goto LABEL_251;
    }
    else if (v68 == 2 || ((v67 ^ ((v68 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v69 = *(unsigned __int8 *)(v16 + 195);
    swift_beginAccess();
    v70 = *(unsigned __int8 *)(v17 + 195);
    if (v69 == 2)
    {
      if (v70 != 2)
        goto LABEL_251;
    }
    else if (v70 == 2 || ((v69 ^ ((v70 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v71 = *(unsigned __int8 *)(v16 + 196);
    swift_beginAccess();
    v72 = *(unsigned __int8 *)(v17 + 196);
    if (v71 == 2)
    {
      if (v72 != 2)
        goto LABEL_251;
    }
    else if (v72 == 2 || ((v71 ^ ((v72 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v73 = *(unsigned __int8 *)(v16 + 197);
    swift_beginAccess();
    v74 = *(unsigned __int8 *)(v17 + 197);
    if (v73 == 2)
    {
      if (v74 != 2)
        goto LABEL_251;
    }
    else if (v74 == 2 || ((v73 ^ ((v74 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v75 = *(unsigned __int8 *)(v16 + 198);
    swift_beginAccess();
    v76 = *(unsigned __int8 *)(v17 + 198);
    if (v75 == 2)
    {
      if (v76 != 2)
        goto LABEL_251;
    }
    else if (v76 == 2 || ((v75 ^ ((v76 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v77 = *(_QWORD *)(v16 + 200);
    v78 = *(_QWORD *)(v16 + 208);
    swift_beginAccess();
    v79 = *(_QWORD *)(v17 + 208);
    if (v78)
    {
      if (!v79)
        goto LABEL_251;
      if (v77 != *(_QWORD *)(v17 + 200) || v78 != v79)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v79)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v80 = *(_QWORD **)(v16 + 216);
    swift_beginAccess();
    if ((sub_24A134D18(v80, *(_QWORD **)(v17 + 216)) & 1) == 0)
      goto LABEL_251;
    swift_beginAccess();
    v81 = *(_QWORD **)(v16 + 224);
    swift_beginAccess();
    if ((sub_24A134D18(v81, *(_QWORD **)(v17 + 224)) & 1) == 0)
      goto LABEL_251;
    swift_beginAccess();
    v82 = *(_QWORD *)(v16 + 232);
    v83 = *(_QWORD *)(v16 + 240);
    swift_beginAccess();
    v84 = *(_QWORD *)(v17 + 240);
    if (v83)
    {
      if (!v84)
        goto LABEL_251;
      if (v82 != *(_QWORD *)(v17 + 232) || v83 != v84)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v84)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v85 = *(unsigned __int8 *)(v16 + 248);
    swift_beginAccess();
    v86 = *(unsigned __int8 *)(v17 + 248);
    if (v85 == 2)
    {
      if (v86 != 2)
        goto LABEL_251;
    }
    else if (v86 == 2 || ((v85 ^ ((v86 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v87 = *(unsigned __int8 *)(v16 + 249);
    swift_beginAccess();
    v88 = *(unsigned __int8 *)(v17 + 249);
    if (v87 == 2)
    {
      if (v88 != 2)
        goto LABEL_251;
    }
    else if (v88 == 2 || ((v87 ^ ((v88 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v89 = *(unsigned __int8 *)(v16 + 250);
    swift_beginAccess();
    v90 = *(unsigned __int8 *)(v17 + 250);
    if (v89 == 2)
    {
      if (v90 != 2)
        goto LABEL_251;
    }
    else if (v90 == 2 || ((v89 ^ ((v90 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v91 = *(unsigned __int8 *)(v16 + 251);
    swift_beginAccess();
    v92 = *(unsigned __int8 *)(v17 + 251);
    if (v91 == 2)
    {
      if (v92 != 2)
        goto LABEL_251;
    }
    else if (v92 == 2 || ((v91 ^ ((v92 & 1) == 0)) & 1) == 0)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v132 = *(_DWORD *)(v16 + 252);
    v133 = (_BYTE *)(v16 + 256);
    LODWORD(v135) = *(unsigned __int8 *)(v16 + 256);
    swift_beginAccess();
    v134 = (_BYTE *)(v17 + 256);
    v93 = *(_BYTE *)(v17 + 256);
    if ((v135 & 1) != 0)
    {
      if (!*(_BYTE *)(v17 + 256))
        goto LABEL_251;
    }
    else
    {
      if (v132 != *(_DWORD *)(v17 + 252))
        v93 = 1;
      if ((v93 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 260);
    v94 = v133[8];
    swift_beginAccess();
    v95 = v134[8];
    if ((v94 & 1) != 0)
    {
      if (!v134[8])
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 260))
        v95 = 1;
      if ((v95 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 268);
    v96 = v133[16];
    swift_beginAccess();
    v97 = v134[16];
    if ((v96 & 1) != 0)
    {
      if (!v134[16])
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 268))
        v97 = 1;
      if ((v97 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    LODWORD(v135) = *(_DWORD *)(v16 + 276);
    v98 = v133[24];
    swift_beginAccess();
    v99 = v134[24];
    if ((v98 & 1) != 0)
    {
      if (!v134[24])
        goto LABEL_251;
    }
    else
    {
      if ((_DWORD)v135 != *(_DWORD *)(v17 + 276))
        v99 = 1;
      if ((v99 & 1) != 0)
        goto LABEL_251;
    }
    swift_beginAccess();
    v100 = *(_QWORD *)(v16 + 288);
    v101 = *(_QWORD *)(v16 + 296);
    swift_beginAccess();
    v102 = *(_QWORD *)(v17 + 296);
    if (v101)
    {
      if (!v102)
        goto LABEL_251;
      if (v100 != *(_QWORD *)(v17 + 288) || v101 != v102)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v102)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v103 = *(_QWORD *)(v16 + 304);
    v104 = *(_QWORD *)(v16 + 312);
    swift_beginAccess();
    v105 = *(_QWORD *)(v17 + 312);
    if (v104)
    {
      if (!v105)
        goto LABEL_251;
      if (v103 != *(_QWORD *)(v17 + 304) || v104 != v105)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v105)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v106 = *(_QWORD *)(v16 + 320);
    v107 = *(_QWORD *)(v16 + 328);
    swift_beginAccess();
    v108 = *(_QWORD *)(v17 + 328);
    if (v107)
    {
      if (!v108)
        goto LABEL_251;
      if (v106 != *(_QWORD *)(v17 + 320) || v107 != v108)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v108)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v109 = *(_QWORD *)(v16 + 336);
    v110 = *(_QWORD *)(v16 + 344);
    swift_beginAccess();
    v111 = *(_QWORD *)(v17 + 344);
    if (v110)
    {
      if (!v111)
        goto LABEL_251;
      if (v109 != *(_QWORD *)(v17 + 336) || v110 != v111)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v111)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v112 = *(_QWORD *)(v16 + 352);
    v113 = *(_QWORD *)(v16 + 360);
    swift_beginAccess();
    v114 = *(_QWORD *)(v17 + 360);
    if (v113)
    {
      if (!v114)
        goto LABEL_251;
      if (v112 != *(_QWORD *)(v17 + 352) || v113 != v114)
      {
        v23 = 0;
        if ((sub_24A21659C() & 1) == 0)
          return v23 & 1;
      }
    }
    else if (v114)
    {
      goto LABEL_251;
    }
    swift_beginAccess();
    v115 = *(unsigned __int8 *)(v16 + 368);
    swift_beginAccess();
    v116 = *(unsigned __int8 *)(v17 + 368);
    if (v115 == 2)
    {
      v4 = v136;
      v9 = v137;
      if (v116 != 2)
        goto LABEL_251;
    }
    else
    {
      if (v116 == 2)
        goto LABEL_251;
      v117 = v115 ^ ((v116 & 1) == 0);
      v4 = v136;
      v9 = v137;
      if ((v117 & 1) == 0)
        goto LABEL_251;
    }
    goto LABEL_249;
  }
  if (!v21)
    goto LABEL_251;
  if (v19 == *(_QWORD *)(v17 + 24) && v20 == v21)
    goto LABEL_12;
  v23 = 0;
  if ((sub_24A21659C() & 1) != 0)
    goto LABEL_12;
  return v23 & 1;
}

uint64_t sub_24A137FF0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24BD0A9EC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A138030(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  int *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t *v85;
  uint64_t *v86;
  char v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v97;
  char v98;
  int *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;

  v121 = sub_24A215840();
  v120 = *(_QWORD *)(v121 - 8);
  v4 = MEMORY[0x24BDAC7A8](v121);
  v119 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v118 = (char *)&v113 - v6;
  v124 = sub_24A215804();
  v123 = *(_QWORD *)(v124 - 8);
  v7 = MEMORY[0x24BDAC7A8](v124);
  v122 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v131 = (char *)&v113 - v9;
  v136 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v134 = *(_QWORD *)(v136 - 8);
  MEMORY[0x24BDAC7A8](v136);
  v126 = (uint64_t *)((char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_24A135F88(&qword_2579098F8);
  MEMORY[0x24BDAC7A8](v133);
  v139 = (uint64_t)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_24A135F88(&qword_257908DD0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v129 = (uint64_t *)((char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BDAC7A8](v13);
  v138 = (uint64_t)&v113 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v135 = (uint64_t)&v113 - v17;
  v143 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v140 = *(_QWORD *)(v143 - 8);
  MEMORY[0x24BDAC7A8](v143);
  v132 = (uint64_t)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = sub_24A135F88(&qword_257909900);
  v19 = MEMORY[0x24BDAC7A8](v142);
  v128 = (uint64_t)&v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v141 = (uint64_t)&v113 - v21;
  v22 = sub_24A135F88(&qword_257908DC8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v125 = (uint64_t)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v130 = (uint64_t)&v113 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v127 = (uint64_t)&v113 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v137 = (uint64_t)&v113 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v113 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v113 - v34;
  v36 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v144 = *(int **)(v36 - 8);
  v145 = v36;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v113 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_24A135F88(&qword_257909908);
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)&v113 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_24A135F88(&qword_257908DC0);
  v43 = MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)&v113 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x24BDAC7A8](v43);
  v48 = (char *)&v113 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)&v113 - v49;
  if ((sub_24A134A60(*a1, *a2) & 1) == 0)
    goto LABEL_30;
  v117 = v45;
  v114 = v38;
  v115 = v33;
  v116 = v35;
  v51 = (int *)type metadata accessor for Sentencepiece_ModelProto(0);
  v52 = a1;
  sub_24A1360A0((uint64_t)a1 + v51[7], (uint64_t)v50, &qword_257908DC0);
  sub_24A1360A0((uint64_t)a2 + v51[7], (uint64_t)v48, &qword_257908DC0);
  v53 = (uint64_t)&v41[*(int *)(v39 + 48)];
  sub_24A1360A0((uint64_t)v50, (uint64_t)v41, &qword_257908DC0);
  sub_24A1360A0((uint64_t)v48, v53, &qword_257908DC0);
  v54 = v145;
  v55 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v144 + 6);
  if (v55((uint64_t)v41, 1, v145) == 1)
  {
    sub_24A13DAA8((uint64_t)v48, &qword_257908DC0);
    sub_24A13DAA8((uint64_t)v50, &qword_257908DC0);
    if (v55(v53, 1, v54) == 1)
    {
      sub_24A13DAA8((uint64_t)v41, &qword_257908DC0);
      goto LABEL_9;
    }
LABEL_7:
    v57 = &qword_257909908;
    v58 = (uint64_t)v41;
LABEL_29:
    sub_24A13DAA8(v58, v57);
    goto LABEL_30;
  }
  v56 = (uint64_t)v117;
  sub_24A1360A0((uint64_t)v41, (uint64_t)v117, &qword_257908DC0);
  if (v55(v53, 1, v54) == 1)
  {
    sub_24A13DAA8((uint64_t)v48, &qword_257908DC0);
    sub_24A13DAA8((uint64_t)v50, &qword_257908DC0);
    sub_24A136064(v56, type metadata accessor for Sentencepiece_TrainerSpec);
    goto LABEL_7;
  }
  v59 = v56;
  v60 = (uint64_t)v114;
  sub_24A135FDC(v53, (uint64_t)v114, type metadata accessor for Sentencepiece_TrainerSpec);
  v61 = sub_24A136D58(v59, v60);
  sub_24A136064(v60, type metadata accessor for Sentencepiece_TrainerSpec);
  sub_24A13DAA8((uint64_t)v48, &qword_257908DC0);
  sub_24A13DAA8((uint64_t)v50, &qword_257908DC0);
  sub_24A136064(v59, type metadata accessor for Sentencepiece_TrainerSpec);
  sub_24A13DAA8((uint64_t)v41, &qword_257908DC0);
  if ((v61 & 1) == 0)
    goto LABEL_30;
LABEL_9:
  v62 = (uint64_t)v52;
  v63 = (uint64_t)v116;
  sub_24A1360A0((uint64_t)v52 + v51[8], (uint64_t)v116, &qword_257908DC8);
  v64 = v51[8];
  v145 = (uint64_t)a2;
  v65 = (uint64_t)v115;
  sub_24A1360A0((uint64_t)a2 + v64, (uint64_t)v115, &qword_257908DC8);
  v66 = v141;
  v67 = v141 + *(int *)(v142 + 48);
  sub_24A1360A0(v63, v141, &qword_257908DC8);
  sub_24A1360A0(v65, v67, &qword_257908DC8);
  v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  v69 = v143;
  if (v68(v66, 1, v143) == 1)
  {
    sub_24A13DAA8(v65, &qword_257908DC8);
    sub_24A13DAA8(v63, &qword_257908DC8);
    if (v68(v67, 1, v69) == 1)
    {
      sub_24A13DAA8(v66, &qword_257908DC8);
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v70 = v137;
  sub_24A1360A0(v66, v137, &qword_257908DC8);
  if (v68(v67, 1, v69) == 1)
  {
    sub_24A13DAA8(v65, &qword_257908DC8);
    sub_24A13DAA8(v63, &qword_257908DC8);
    sub_24A136064(v70, type metadata accessor for Sentencepiece_NormalizerSpec);
LABEL_14:
    v57 = &qword_257909900;
    v58 = v66;
    goto LABEL_29;
  }
  v71 = v63;
  v72 = v132;
  sub_24A135FDC(v67, v132, type metadata accessor for Sentencepiece_NormalizerSpec);
  v73 = sub_24A13656C(v70, v72);
  sub_24A136064(v72, type metadata accessor for Sentencepiece_NormalizerSpec);
  sub_24A13DAA8(v65, &qword_257908DC8);
  sub_24A13DAA8(v71, &qword_257908DC8);
  v69 = v143;
  sub_24A136064(v70, type metadata accessor for Sentencepiece_NormalizerSpec);
  sub_24A13DAA8(v66, &qword_257908DC8);
  if ((v73 & 1) == 0)
    goto LABEL_30;
LABEL_16:
  v74 = v51[9];
  v141 = v62;
  v75 = v135;
  sub_24A1360A0(v62 + v74, v135, &qword_257908DD0);
  v144 = v51;
  v76 = v51[9];
  v77 = v75;
  v78 = v138;
  sub_24A1360A0(v145 + v76, v138, &qword_257908DD0);
  v79 = v139;
  v80 = v139 + *(int *)(v133 + 48);
  sub_24A1360A0(v77, v139, &qword_257908DD0);
  sub_24A1360A0(v78, v80, &qword_257908DD0);
  v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  v82 = v136;
  if (v81(v79, 1, v136) == 1)
  {
    sub_24A13DAA8(v78, &qword_257908DD0);
    sub_24A13DAA8(v77, &qword_257908DD0);
    v83 = v81(v80, 1, v82);
    v84 = v131;
    if (v83 == 1)
    {
      sub_24A13DAA8(v139, &qword_257908DD0);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  v85 = v129;
  sub_24A1360A0(v79, (uint64_t)v129, &qword_257908DD0);
  if (v81(v80, 1, v82) == 1)
  {
    sub_24A13DAA8(v138, &qword_257908DD0);
    sub_24A13DAA8(v77, &qword_257908DD0);
    sub_24A136064((uint64_t)v85, type metadata accessor for Sentencepiece_SelfTestData);
LABEL_21:
    v57 = &qword_2579098F8;
    v58 = v139;
    goto LABEL_29;
  }
  v86 = v126;
  sub_24A135FDC(v80, (uint64_t)v126, type metadata accessor for Sentencepiece_SelfTestData);
  v87 = sub_24A136988(v85, v86);
  sub_24A136064((uint64_t)v86, type metadata accessor for Sentencepiece_SelfTestData);
  sub_24A13DAA8(v138, &qword_257908DD0);
  sub_24A13DAA8(v77, &qword_257908DD0);
  v84 = v131;
  sub_24A136064((uint64_t)v85, type metadata accessor for Sentencepiece_SelfTestData);
  sub_24A13DAA8(v79, &qword_257908DD0);
  if ((v87 & 1) == 0)
    goto LABEL_30;
LABEL_23:
  v88 = v144;
  v89 = v141;
  v90 = v127;
  sub_24A1360A0(v141 + v144[10], v127, &qword_257908DC8);
  v91 = v130;
  sub_24A1360A0(v145 + v88[10], v130, &qword_257908DC8);
  v92 = v128;
  v93 = v128 + *(int *)(v142 + 48);
  sub_24A1360A0(v90, v128, &qword_257908DC8);
  sub_24A1360A0(v91, v93, &qword_257908DC8);
  if (v68(v92, 1, v69) != 1)
  {
    v94 = v125;
    sub_24A1360A0(v92, v125, &qword_257908DC8);
    if (v68(v93, 1, v69) != 1)
    {
      v97 = v132;
      sub_24A135FDC(v93, v132, type metadata accessor for Sentencepiece_NormalizerSpec);
      v98 = sub_24A13656C(v94, v97);
      sub_24A136064(v97, type metadata accessor for Sentencepiece_NormalizerSpec);
      sub_24A13DAA8(v130, &qword_257908DC8);
      sub_24A13DAA8(v90, &qword_257908DC8);
      sub_24A136064(v94, type metadata accessor for Sentencepiece_NormalizerSpec);
      sub_24A13DAA8(v92, &qword_257908DC8);
      if ((v98 & 1) == 0)
        goto LABEL_30;
      goto LABEL_33;
    }
    sub_24A13DAA8(v130, &qword_257908DC8);
    sub_24A13DAA8(v90, &qword_257908DC8);
    sub_24A136064(v94, type metadata accessor for Sentencepiece_NormalizerSpec);
    goto LABEL_28;
  }
  sub_24A13DAA8(v91, &qword_257908DC8);
  sub_24A13DAA8(v90, &qword_257908DC8);
  if (v68(v93, 1, v69) != 1)
  {
LABEL_28:
    v57 = &qword_257909900;
    v58 = v92;
    goto LABEL_29;
  }
  sub_24A13DAA8(v92, &qword_257908DC8);
LABEL_33:
  v99 = v144;
  v100 = v123;
  v101 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 16);
  v102 = v124;
  v101(v84, v89 + v144[5], v124);
  v103 = v145;
  v104 = v122;
  v101(v122, v145 + v99[5], v102);
  sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  LOBYTE(v101) = sub_24A215C6C();
  v105 = *(void (**)(char *, uint64_t))(v100 + 8);
  v105(v104, v102);
  v105(v84, v102);
  if ((v101 & 1) != 0)
  {
    v106 = v120;
    v107 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v108 = v118;
    v109 = v121;
    v107(v118, v89 + v99[6], v121);
    v110 = v103 + v99[6];
    v111 = v119;
    v107(v119, v110, v109);
    sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
    v95 = sub_24A215C6C();
    v112 = *(void (**)(char *, uint64_t))(v106 + 8);
    v112(v111, v109);
    v112(v108, v109);
    return v95 & 1;
  }
LABEL_30:
  v95 = 0;
  return v95 & 1;
}

uint64_t sub_24A138D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  float *v26;
  char v27;
  float *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;

  v4 = sub_24A215840();
  v42 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v41 - v8;
  v10 = sub_24A215804();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  v17 = (int *)type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  v18 = v17[6];
  v19 = (_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (_QWORD *)(a2 + v18);
  v22 = v21[1];
  if (!v20)
  {
    v41 = v4;
    if (v22)
      goto LABEL_23;
    goto LABEL_10;
  }
  if (!v22)
    goto LABEL_23;
  v41 = v4;
  v23 = *v19 == *v21 && v20 == v22;
  if (v23 || (v24 = 0, (sub_24A21659C() & 1) != 0))
  {
LABEL_10:
    v25 = v17[7];
    v26 = (float *)(a1 + v25);
    v27 = *(_BYTE *)(a1 + v25 + 4);
    v28 = (float *)(a2 + v25);
    v29 = *(unsigned __int8 *)(a2 + v25 + 4);
    if ((v27 & 1) != 0)
    {
      if (!v29)
        goto LABEL_23;
    }
    else
    {
      if (*v26 != *v28)
        LOBYTE(v29) = 1;
      if ((v29 & 1) != 0)
        goto LABEL_23;
    }
    v30 = v17[8];
    v31 = *(char *)(a1 + v30);
    v32 = *(char *)(a2 + v30);
    if (v31 == 6)
    {
      if ((_DWORD)v32 != 6)
        goto LABEL_23;
    }
    else if ((_DWORD)v32 == 6 || qword_24A219600[v31] != qword_24A219600[v32])
    {
      goto LABEL_23;
    }
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v33(v16, a1, v10);
    v33(v14, a2, v10);
    sub_24A137FF0(&qword_2579098E8, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    LOBYTE(v33) = sub_24A215C6C();
    v34 = *(void (**)(char *, uint64_t))(v11 + 8);
    v34(v14, v10);
    v34(v16, v10);
    if ((v33 & 1) != 0)
    {
      v35 = a1 + v17[5];
      v36 = v41;
      v37 = v42;
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
      v38(v9, v35, v41);
      v38(v7, a2 + v17[5], v36);
      sub_24A137FF0(&qword_2579098F0, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BFE0], MEMORY[0x24BE5BFF0]);
      v24 = sub_24A215C6C();
      v39 = *(void (**)(char *, uint64_t))(v37 + 8);
      v39(v7, v36);
      v39(v9, v36);
      return v24 & 1;
    }
LABEL_23:
    v24 = 0;
  }
  return v24 & 1;
}

unint64_t sub_24A139024()
{
  unint64_t result;

  result = qword_257908E18;
  if (!qword_257908E18)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A2186F4, &type metadata for Sentencepiece_TrainerSpec.ModelType);
    atomic_store(result, (unint64_t *)&qword_257908E18);
  }
  return result;
}

unint64_t sub_24A13906C()
{
  unint64_t result;

  result = qword_257908E20;
  if (!qword_257908E20)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21871C, &type metadata for Sentencepiece_TrainerSpec.ModelType);
    atomic_store(result, (unint64_t *)&qword_257908E20);
  }
  return result;
}

unint64_t sub_24A1390B4()
{
  unint64_t result;

  result = qword_257908E28;
  if (!qword_257908E28)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A2187A4, &type metadata for Sentencepiece_TrainerSpec.ModelType);
    atomic_store(result, (unint64_t *)&qword_257908E28);
  }
  return result;
}

uint64_t sub_24A1390F8()
{
  return sub_24A137FF0(&qword_257908E30, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218A74);
}

uint64_t sub_24A139124()
{
  return sub_24A139338(&qword_257908E38, &qword_257908E40);
}

uint64_t sub_24A139148(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD0A9E0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_24A13918C()
{
  return sub_24A137FF0(&qword_257908E48, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218C04);
}

uint64_t sub_24A1391B8()
{
  return sub_24A137FF0(&qword_257908E50, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218D6C);
}

unint64_t sub_24A1391E8()
{
  unint64_t result;

  result = qword_257908E58;
  if (!qword_257908E58)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A2188D4, &type metadata for Sentencepiece_ModelProto.SentencePiece.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_257908E58);
  }
  return result;
}

unint64_t sub_24A139230()
{
  unint64_t result;

  result = qword_257908E60;
  if (!qword_257908E60)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A2188FC, &type metadata for Sentencepiece_ModelProto.SentencePiece.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_257908E60);
  }
  return result;
}

unint64_t sub_24A139278()
{
  unint64_t result;

  result = qword_257908E68;
  if (!qword_257908E68)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A218984, &type metadata for Sentencepiece_ModelProto.SentencePiece.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_257908E68);
  }
  return result;
}

uint64_t sub_24A1392BC()
{
  return sub_24A137FF0(&qword_257908E00, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2191A4);
}

uint64_t sub_24A1392E8()
{
  return sub_24A137FF0((unint64_t *)&qword_257908E70, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21903C);
}

uint64_t sub_24A139314()
{
  return sub_24A139338(&qword_257908E78, &qword_257908E80);
}

uint64_t sub_24A139338(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_24A139148(a2);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A139378()
{
  return sub_24A137FF0(&qword_257908E88, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218B4C);
}

uint64_t sub_24A1393A4()
{
  return sub_24A137FF0(&qword_257908DD8, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218B74);
}

uint64_t sub_24A1393D0()
{
  return sub_24A137FF0(&qword_257908E90, type metadata accessor for Sentencepiece_TrainerSpec, (uint64_t)&unk_24A218BB4);
}

uint64_t sub_24A1393FC()
{
  return sub_24A137FF0(&qword_257908E98, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218CDC);
}

uint64_t sub_24A139428()
{
  return sub_24A137FF0(&qword_257908DE0, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218D04);
}

uint64_t sub_24A139454()
{
  return sub_24A137FF0(&qword_257908EA0, type metadata accessor for Sentencepiece_NormalizerSpec, (uint64_t)&unk_24A218D44);
}

uint64_t sub_24A139480()
{
  return sub_24A137FF0(&qword_257908EA8, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218E44);
}

uint64_t sub_24A1394AC()
{
  return sub_24A137FF0(&qword_257908DF0, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218E6C);
}

uint64_t sub_24A1394D8()
{
  return sub_24A137FF0(&qword_257908EB0, type metadata accessor for Sentencepiece_SelfTestData, (uint64_t)&unk_24A218EAC);
}

uint64_t sub_24A139504()
{
  return sub_24A137FF0(&qword_257908EB8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218FAC);
}

uint64_t sub_24A139530()
{
  return sub_24A137FF0(&qword_257908DE8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218ED4);
}

uint64_t sub_24A13955C()
{
  return sub_24A137FF0(&qword_257908DF8, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A218FD4);
}

uint64_t sub_24A139588()
{
  return sub_24A137FF0(&qword_257908EC0, type metadata accessor for Sentencepiece_SelfTestData.Sample, (uint64_t)&unk_24A219014);
}

uint64_t sub_24A1395B4()
{
  return sub_24A137FF0(&qword_257908EC8, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A219114);
}

uint64_t sub_24A1395E0()
{
  return sub_24A137FF0(&qword_257908E08, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21913C);
}

uint64_t sub_24A13960C()
{
  return sub_24A137FF0(&qword_257908ED0, type metadata accessor for Sentencepiece_ModelProto, (uint64_t)&unk_24A21917C);
}

uint64_t sub_24A139638()
{
  return sub_24A137FF0(&qword_257908ED8, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A21927C);
}

uint64_t sub_24A139664()
{
  return sub_24A137FF0(&qword_257908E10, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2192A4);
}

uint64_t sub_24A139690()
{
  return sub_24A137FF0(qword_257908EE0, type metadata accessor for Sentencepiece_ModelProto.SentencePiece, (uint64_t)&unk_24A2192E4);
}

uint64_t *sub_24A1396BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_24A215804();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_24A215840();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t sub_24A139778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_release();
}

uint64_t sub_24A1397E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t sub_24A13987C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24A13991C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_24A1399AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_24A139A44()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A139A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_24A215804();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_24A215840();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_24A139AF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A139B04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_24A215804();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_24A215840();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_24A139BA8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_24A215804();
  if (v1 <= 0x3F)
  {
    result = sub_24A215840();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for Sentencepiece_TrainerSpec.ModelType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Sentencepiece_TrainerSpec.ModelType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Sentencepiece_TrainerSpec.ModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24A139D24 + 4 * byte_24A2186E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24A139D58 + 4 * byte_24A2186E0[v4]))();
}

uint64_t sub_24A139D58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A139D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A139D68);
  return result;
}

uint64_t sub_24A139D74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A139D7CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24A139D80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A139D88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Sentencepiece_TrainerSpec.ModelType()
{
  return &type metadata for Sentencepiece_TrainerSpec.ModelType;
}

_QWORD *sub_24A139DA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_24A215804();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_24A215840();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (char *)a1 + v13;
    v18 = (_OWORD *)((char *)a2 + v13);
    v19 = *(_QWORD *)((char *)a2 + v13 + 8);
    swift_bridgeObjectRetain();
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)v17 = *v18;
    }
    else
    {
      v21 = *(_QWORD *)v18;
      sub_24A135EC4(v21, v19);
      *(_QWORD *)v17 = v21;
      *((_QWORD *)v17 + 1) = v19;
    }
    v22 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    v23 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v24 = (_QWORD *)((char *)a1 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_24A139ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v4 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_24A135F1C(*v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A139F7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a1 + v12;
  v17 = (_OWORD *)(a2 + v12);
  v18 = *(_QWORD *)(a2 + v12 + 8);
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *v17;
  }
  else
  {
    v19 = *(_QWORD *)v17;
    sub_24A135EC4(v19, v18);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v18;
  }
  v20 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A13A084(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *(_QWORD *)(a2 + v14 + 8);
  if (*(_QWORD *)(a1 + v14 + 8) >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      v19 = *v16;
      sub_24A135EC4(v19, v17);
      v20 = *v15;
      v21 = v15[1];
      *v15 = v19;
      v15[1] = v17;
      sub_24A135F1C(v20, v21);
      goto LABEL_8;
    }
    sub_24A13A204((uint64_t)v15);
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  v18 = *v16;
  sub_24A135EC4(v18, v17);
  *v15 = v18;
  v15[1] = v17;
LABEL_8:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v22 = a3[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A13A204(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t sub_24A13A238(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  v13 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_24A13A2F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *(_QWORD *)(a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      v21 = *v17;
      *v17 = *v18;
      v17[1] = v20;
      sub_24A135F1C(v21, v19);
      goto LABEL_6;
    }
    sub_24A13A204((uint64_t)v17);
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
LABEL_6:
  v22 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A13A420()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13A430()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13A440()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_24A215804();
  if (v1 <= 0x3F)
  {
    result = sub_24A215840();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A13A4E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_24A215804();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_24A215840();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v7;
}

uint64_t sub_24A13A5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_24A215840();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *sub_24A13A630(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_24A215840();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

_QWORD *sub_24A13A6DC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_24A215840();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_QWORD *sub_24A13A784(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_24A215840();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

_QWORD *sub_24A13A81C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_24A215840();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A13A8BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13A8C8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_24A215804();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_24A215840();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_24A13A968()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24A13A974(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_24A215804();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_24A215840();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_24A13AA10()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_24A215804();
  if (v1 <= 0x3F)
  {
    result = sub_24A215840();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A13AAA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_24A215804();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_24A13AB50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A13ABA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A13AC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A13ACD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_24A13AD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A13ADBC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13ADC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_24A215804();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_24A13AE54()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13AE60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_24A215804();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_24A13AEDC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A215804();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A13AF50(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, int *);
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, _QWORD, uint64_t, int *);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  unsigned int (*v79)(char *, uint64_t, int *);
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_24A215804();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v81 = v11;
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_24A215840();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = a3[7];
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Sentencepiece_TrainerSpec(0);
    v22 = *(_QWORD *)(v21 - 8);
    v80 = v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_24A135F88(&qword_257908DC0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v12(v19, v20, v81);
      v17(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v16);
      *(_QWORD *)&v19[*(int *)(v21 + 24)] = *(_QWORD *)&v20[*(int *)(v21 + 24)];
      v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
      swift_retain();
      v24(v19, 0, 1, v21);
    }
    v25 = a3[8];
    v26 = (char *)v7 + v25;
    v27 = (char *)a2 + v25;
    v28 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
    v29 = *((_QWORD *)v28 - 1);
    v79 = *(unsigned int (**)(char *, uint64_t, int *))(v29 + 48);
    v77 = v16;
    v78 = v12;
    if (v79(v27, 1, v28))
    {
      v30 = sub_24A135F88(&qword_257908DC8);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v12(v26, v27, v81);
      v80(&v26[v28[5]], &v27[v28[5]], v16);
      v31 = v28[6];
      v32 = &v26[v31];
      v33 = &v27[v31];
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      v35 = v28[7];
      v36 = &v26[v35];
      v37 = (uint64_t *)&v27[v35];
      v38 = *(_QWORD *)&v27[v35 + 8];
      swift_bridgeObjectRetain();
      if (v38 >> 60 == 15)
      {
        *(_OWORD *)v36 = *(_OWORD *)v37;
      }
      else
      {
        v75 = v29;
        v39 = *v37;
        sub_24A135EC4(*v37, v38);
        *(_QWORD *)v36 = v39;
        *((_QWORD *)v36 + 1) = v38;
        v29 = v75;
      }
      v26[v28[8]] = v27[v28[8]];
      v26[v28[9]] = v27[v28[9]];
      v26[v28[10]] = v27[v28[10]];
      v40 = v28[11];
      v41 = &v26[v40];
      v42 = &v27[v40];
      v43 = *((_QWORD *)v42 + 1);
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56);
      swift_bridgeObjectRetain();
      v44(v26, 0, 1, v28);
    }
    v45 = a3[9];
    v46 = (uint64_t *)((char *)v7 + v45);
    v47 = (uint64_t *)((char *)a2 + v45);
    v48 = type metadata accessor for Sentencepiece_SelfTestData(0);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      v50 = sub_24A135F88(&qword_257908DD0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      v51 = v80;
    }
    else
    {
      *v46 = *v47;
      v52 = *(int *)(v48 + 20);
      v76 = v29;
      v53 = (char *)v46 + v52;
      v54 = (char *)v47 + v52;
      swift_bridgeObjectRetain();
      v55 = v53;
      v29 = v76;
      v78(v55, v54, v81);
      v51 = v80;
      v80((char *)v46 + *(int *)(v48 + 24), (char *)v47 + *(int *)(v48 + 24), v77);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    v56 = a3[10];
    v57 = (char *)v7 + v56;
    v58 = (char *)a2 + v56;
    if (v79(v58, 1, v28))
    {
      v59 = sub_24A135F88(&qword_257908DC8);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v78(v57, v58, v81);
      v51(&v57[v28[5]], &v58[v28[5]], v77);
      v60 = v28[6];
      v61 = &v57[v60];
      v62 = &v58[v60];
      v63 = *((_QWORD *)v62 + 1);
      *(_QWORD *)v61 = *(_QWORD *)v62;
      *((_QWORD *)v61 + 1) = v63;
      v64 = v28[7];
      v65 = &v57[v64];
      v66 = &v58[v64];
      v67 = *(_QWORD *)&v58[v64 + 8];
      swift_bridgeObjectRetain();
      if (v67 >> 60 == 15)
      {
        *(_OWORD *)v65 = *(_OWORD *)v66;
      }
      else
      {
        v68 = *(_QWORD *)v66;
        sub_24A135EC4(v68, v67);
        *(_QWORD *)v65 = v68;
        *((_QWORD *)v65 + 1) = v67;
      }
      v57[v28[8]] = v58[v28[8]];
      v57[v28[9]] = v58[v28[9]];
      v57[v28[10]] = v58[v28[10]];
      v69 = v28[11];
      v70 = &v57[v69];
      v71 = &v58[v69];
      v72 = *((_QWORD *)v71 + 1);
      *(_QWORD *)v70 = *(_QWORD *)v71;
      *((_QWORD *)v70 + 1) = v72;
      v73 = *(void (**)(char *, _QWORD, uint64_t, int *))(v29 + 56);
      swift_bridgeObjectRetain();
      v73(v57, 0, 1, v28);
    }
  }
  return v7;
}

uint64_t sub_24A13B3F4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  unint64_t v22;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_24A215804();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[6];
  v8 = sub_24A215840();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = a1 + a2[7];
  v11 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    v6(v10, v5);
    v9(v10 + *(int *)(v11 + 20), v8);
    swift_release();
  }
  v12 = a1 + a2[8];
  v13 = type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48);
  if (!v14(v12, 1, v13))
  {
    v6(v12, v5);
    v9(v12 + *(int *)(v13 + 20), v8);
    swift_bridgeObjectRelease();
    v15 = (uint64_t *)(v12 + *(int *)(v13 + 28));
    v16 = v15[1];
    if (v16 >> 60 != 15)
      sub_24A135F1C(*v15, v16);
    swift_bridgeObjectRelease();
  }
  v17 = a1 + a2[9];
  v18 = type metadata accessor for Sentencepiece_SelfTestData(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    swift_bridgeObjectRelease();
    v6(v17 + *(int *)(v18 + 20), v5);
    v9(v17 + *(int *)(v18 + 24), v8);
  }
  v19 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v19, 1, v13);
  if (!(_DWORD)result)
  {
    v6(v19, v5);
    v9(v19 + *(int *)(v13 + 20), v8);
    swift_bridgeObjectRelease();
    v21 = (uint64_t *)(v19 + *(int *)(v13 + 28));
    v22 = v21[1];
    if (v22 >> 60 != 15)
      sub_24A135F1C(*v21, v22);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_24A13B658(_QWORD *a1, _QWORD *a2, int *a3)
{
  int *v3;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  unsigned int (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, int *);
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  unsigned int (*v53)(_QWORD, _QWORD, _QWORD);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, int *);
  unsigned int (*v76)(_QWORD, _QWORD, _QWORD);
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  int *v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);

  v3 = a3;
  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v82 = v9;
  v10(v7, v8, v9);
  v11 = v3[6];
  v12 = (char *)v5 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_24A215840();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v16 = v3[7];
  v17 = (char *)v5 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v20 = *(_QWORD *)(v19 - 8);
  v83 = v10;
  v80 = v15;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_24A135F88(&qword_257908DC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v10(v17, v18, v82);
    v15(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v14);
    *(_QWORD *)&v17[*(int *)(v19 + 24)] = *(_QWORD *)&v18[*(int *)(v19 + 24)];
    v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
    swift_retain();
    v22(v17, 0, 1, v19);
  }
  v23 = v3[8];
  v24 = (char *)v5 + v23;
  v25 = (char *)a2 + v23;
  v26 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v27 = *((_QWORD *)v26 - 1);
  v28 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v27 + 48);
  v81 = v3;
  v79 = v14;
  if (v28(v25, 1, v26))
  {
    v29 = sub_24A135F88(&qword_257908DC8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v83(v24, v25, v82);
    v80(&v24[v26[5]], &v25[v26[5]], v14);
    v30 = v26[6];
    v31 = &v24[v30];
    v32 = &v25[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v26[7];
    v35 = &v24[v34];
    v36 = (uint64_t *)&v25[v34];
    v37 = *(_QWORD *)&v25[v34 + 8];
    swift_bridgeObjectRetain();
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    else
    {
      v76 = v28;
      v38 = *v36;
      sub_24A135EC4(*v36, v37);
      *(_QWORD *)v35 = v38;
      *((_QWORD *)v35 + 1) = v37;
      v28 = v76;
    }
    v24[v26[8]] = v25[v26[8]];
    v24[v26[9]] = v25[v26[9]];
    v24[v26[10]] = v25[v26[10]];
    v39 = v26[11];
    v40 = &v24[v39];
    v41 = &v25[v39];
    v42 = *((_QWORD *)v41 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = *(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56);
    swift_bridgeObjectRetain();
    v43(v24, 0, 1, v26);
    v3 = v81;
  }
  v44 = v3[9];
  v45 = (_QWORD *)((char *)v5 + v44);
  v46 = (_QWORD *)((char *)a2 + v44);
  v47 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v48 = *(_QWORD *)(v47 - 8);
  v78 = v27;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = sub_24A135F88(&qword_257908DD0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    v51 = v80;
    v50 = v81;
  }
  else
  {
    *v45 = *v46;
    v52 = *(int *)(v47 + 20);
    v77 = v5;
    v53 = v28;
    v54 = (char *)v45 + v52;
    v55 = (char *)v46 + v52;
    swift_bridgeObjectRetain();
    v56 = v54;
    v28 = v53;
    v5 = v77;
    v83(v56, v55, v82);
    v51 = v80;
    v80((char *)v45 + *(int *)(v47 + 24), (char *)v46 + *(int *)(v47 + 24), v79);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    v50 = v81;
  }
  v57 = v50[10];
  v58 = (char *)v5 + v57;
  v59 = (char *)a2 + v57;
  if (v28(v59, 1, v26))
  {
    v60 = sub_24A135F88(&qword_257908DC8);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v83(v58, v59, v82);
    v51(&v58[v26[5]], &v59[v26[5]], v79);
    v61 = v26[6];
    v62 = &v58[v61];
    v63 = &v59[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v65 = v26[7];
    v66 = &v58[v65];
    v67 = &v59[v65];
    v68 = *(_QWORD *)&v59[v65 + 8];
    swift_bridgeObjectRetain();
    if (v68 >> 60 == 15)
    {
      *(_OWORD *)v66 = *(_OWORD *)v67;
    }
    else
    {
      v69 = *(_QWORD *)v67;
      sub_24A135EC4(v69, v68);
      *(_QWORD *)v66 = v69;
      *((_QWORD *)v66 + 1) = v68;
    }
    v58[v26[8]] = v59[v26[8]];
    v58[v26[9]] = v59[v26[9]];
    v58[v26[10]] = v59[v26[10]];
    v70 = v26[11];
    v71 = &v58[v70];
    v72 = &v59[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(void (**)(char *, _QWORD, uint64_t, int *))(v78 + 56);
    swift_bridgeObjectRetain();
    v74(v58, 0, 1, v26);
  }
  return v5;
}

char *sub_24A13BAE4(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t (*v30)(char *, uint64_t, int *);
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, _QWORD, uint64_t, int *);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  int v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  void (*v98)(char *, _QWORD, uint64_t, int *);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *);
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t, int *);
  uint64_t v113;
  int *v114;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  v10 = *(_QWORD *)(v9 - 8);
  v109 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v109(v7, v8, v9);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = (char *)a2 + v11;
  v14 = sub_24A215840();
  v111 = *(_QWORD *)(v14 - 8);
  v113 = v14;
  v108 = *(void (**)(char *, char *))(v111 + 24);
  v108(v12, v13);
  v114 = a3;
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
      v23 = v113;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v113);
      *(_QWORD *)&v16[*(int *)(v18 + 24)] = *(_QWORD *)&v17[*(int *)(v18 + 24)];
      v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56);
      swift_retain();
      v24(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    sub_24A136064((uint64_t)v16, type metadata accessor for Sentencepiece_TrainerSpec);
LABEL_6:
    v25 = sub_24A135F88(&qword_257908DC0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v23 = v113;
    goto LABEL_7;
  }
  v109(v16, v17, v9);
  v23 = v113;
  ((void (*)(char *, char *, uint64_t))v108)(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v113);
  *(_QWORD *)&v16[*(int *)(v18 + 24)] = *(_QWORD *)&v17[*(int *)(v18 + 24)];
  swift_retain();
  swift_release();
LABEL_7:
  v26 = v114[8];
  v27 = &a1[v26];
  v28 = (char *)a2 + v26;
  v29 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v106 = *((_QWORD *)v29 - 1);
  v30 = *(uint64_t (**)(char *, uint64_t, int *))(v106 + 48);
  v31 = v30(v27, 1, v29);
  v112 = v30;
  v32 = v30(v28, 1, v29);
  v110 = v9;
  v107 = v10;
  if (!v31)
  {
    if (v32)
    {
      sub_24A136064((uint64_t)v27, type metadata accessor for Sentencepiece_NormalizerSpec);
      goto LABEL_13;
    }
    v109(v27, v28, v9);
    ((void (*)(char *, char *, uint64_t))v108)(&v27[v29[5]], &v28[v29[5]], v23);
    v41 = v29[6];
    v42 = &v27[v41];
    v43 = &v28[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = v29[7];
    v45 = (uint64_t *)&v27[v44];
    v46 = (uint64_t *)&v28[v44];
    v47 = *(_QWORD *)&v28[v44 + 8];
    if (*(_QWORD *)&v27[v44 + 8] >> 60 == 15)
    {
      if (v47 >> 60 != 15)
      {
        v48 = *v46;
        sub_24A135EC4(v48, v47);
        *v45 = v48;
        v45[1] = v47;
LABEL_24:
        v27[v29[8]] = v28[v29[8]];
        v27[v29[9]] = v28[v29[9]];
        v27[v29[10]] = v28[v29[10]];
        v57 = v29[11];
        v58 = &v27[v57];
        v59 = &v28[v57];
        *(_QWORD *)v58 = *(_QWORD *)v59;
        *((_QWORD *)v58 + 1) = *((_QWORD *)v59 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      if (v47 >> 60 != 15)
      {
        v54 = *v46;
        sub_24A135EC4(v54, v47);
        v55 = *v45;
        v56 = v45[1];
        *v45 = v54;
        v45[1] = v47;
        sub_24A135F1C(v55, v56);
        goto LABEL_24;
      }
      sub_24A13A204((uint64_t)v45);
    }
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_24;
  }
  if (v32)
  {
LABEL_13:
    v40 = sub_24A135F88(&qword_257908DC8);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(&v27[v29[5]], &v28[v29[5]], v23);
  v33 = v29[6];
  v34 = &v27[v33];
  v35 = &v28[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
  v36 = v29[7];
  v37 = &v27[v36];
  v38 = (uint64_t *)&v28[v36];
  v39 = *(_QWORD *)&v28[v36 + 8];
  swift_bridgeObjectRetain();
  if (v39 >> 60 == 15)
  {
    *(_OWORD *)v37 = *(_OWORD *)v38;
  }
  else
  {
    v49 = *v38;
    sub_24A135EC4(*v38, v39);
    *(_QWORD *)v37 = v49;
    *((_QWORD *)v37 + 1) = v39;
  }
  v27[v29[8]] = v28[v29[8]];
  v27[v29[9]] = v28[v29[9]];
  v27[v29[10]] = v28[v29[10]];
  v50 = v29[11];
  v51 = &v27[v50];
  v52 = &v28[v50];
  *(_QWORD *)v51 = *(_QWORD *)v52;
  *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
  v53 = *(void (**)(char *, _QWORD, uint64_t, int *))(v106 + 56);
  swift_bridgeObjectRetain();
  v53(v27, 0, 1, v29);
LABEL_25:
  v60 = v114[9];
  v61 = &a1[v60];
  v62 = (char *)a2 + v60;
  v63 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  v66 = v65(v61, 1, v63);
  v67 = v65(v62, 1, v63);
  if (v66)
  {
    if (!v67)
    {
      *(_QWORD *)v61 = *(_QWORD *)v62;
      v68 = *(int *)(v63 + 20);
      v69 = &v61[v68];
      v70 = &v62[v68];
      v71 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
      swift_bridgeObjectRetain();
      v71(v69, v70, v110);
      v23 = v113;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(&v61[*(int *)(v63 + 24)], &v62[*(int *)(v63 + 24)], v113);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v67)
  {
    sub_24A136064((uint64_t)v61, type metadata accessor for Sentencepiece_SelfTestData);
LABEL_30:
    v72 = sub_24A135F88(&qword_257908DD0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    goto LABEL_31;
  }
  *(_QWORD *)v61 = *(_QWORD *)v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v109(&v61[*(int *)(v63 + 20)], &v62[*(int *)(v63 + 20)], v110);
  ((void (*)(char *, char *, uint64_t))v108)(&v61[*(int *)(v63 + 24)], &v62[*(int *)(v63 + 24)], v23);
LABEL_31:
  v73 = v114[10];
  v74 = &a1[v73];
  v75 = (char *)a2 + v73;
  v76 = v112(&a1[v73], 1, v29);
  v77 = v112(v75, 1, v29);
  if (!v76)
  {
    if (v77)
    {
      sub_24A136064((uint64_t)v74, type metadata accessor for Sentencepiece_NormalizerSpec);
      goto LABEL_37;
    }
    v109(v74, v75, v110);
    ((void (*)(char *, char *, uint64_t))v108)(&v74[v29[5]], &v75[v29[5]], v23);
    v86 = v29[6];
    v87 = &v74[v86];
    v88 = &v75[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = *((_QWORD *)v88 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v89 = v29[7];
    v90 = (uint64_t *)&v74[v89];
    v91 = (uint64_t *)&v75[v89];
    v92 = *(_QWORD *)&v75[v89 + 8];
    if (*(_QWORD *)&v74[v89 + 8] >> 60 == 15)
    {
      if (v92 >> 60 != 15)
      {
        v93 = *v91;
        sub_24A135EC4(v93, v92);
        *v90 = v93;
        v90[1] = v92;
LABEL_48:
        v74[v29[8]] = v75[v29[8]];
        v74[v29[9]] = v75[v29[9]];
        v74[v29[10]] = v75[v29[10]];
        v102 = v29[11];
        v103 = &v74[v102];
        v104 = &v75[v102];
        *(_QWORD *)v103 = *(_QWORD *)v104;
        *((_QWORD *)v103 + 1) = *((_QWORD *)v104 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (v92 >> 60 != 15)
      {
        v99 = *v91;
        sub_24A135EC4(v99, v92);
        v100 = *v90;
        v101 = v90[1];
        *v90 = v99;
        v90[1] = v92;
        sub_24A135F1C(v100, v101);
        goto LABEL_48;
      }
      sub_24A13A204((uint64_t)v90);
    }
    *(_OWORD *)v90 = *(_OWORD *)v91;
    goto LABEL_48;
  }
  if (v77)
  {
LABEL_37:
    v85 = sub_24A135F88(&qword_257908DC8);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v74, v75, v110);
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(&v74[v29[5]], &v75[v29[5]], v23);
  v78 = v29[6];
  v79 = &v74[v78];
  v80 = &v75[v78];
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *((_QWORD *)v79 + 1) = *((_QWORD *)v80 + 1);
  v81 = v29[7];
  v82 = &v74[v81];
  v83 = &v75[v81];
  v84 = *(_QWORD *)&v75[v81 + 8];
  swift_bridgeObjectRetain();
  if (v84 >> 60 == 15)
  {
    *(_OWORD *)v82 = *(_OWORD *)v83;
  }
  else
  {
    v94 = *(_QWORD *)v83;
    sub_24A135EC4(v94, v84);
    *(_QWORD *)v82 = v94;
    *((_QWORD *)v82 + 1) = v84;
  }
  v74[v29[8]] = v75[v29[8]];
  v74[v29[9]] = v75[v29[9]];
  v74[v29[10]] = v75[v29[10]];
  v95 = v29[11];
  v96 = &v74[v95];
  v97 = &v75[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *((_QWORD *)v96 + 1) = *((_QWORD *)v97 + 1);
  v98 = *(void (**)(char *, _QWORD, uint64_t, int *))(v106 + 56);
  swift_bridgeObjectRetain();
  v98(v74, 0, 1, v29);
  return a1;
}

_QWORD *sub_24A13C368(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, int *);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  void (*v46)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = sub_24A215840();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v45 = a3;
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v20 = *(_QWORD *)(v19 - 8);
  v46 = v10;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_24A135F88(&qword_257908DC0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v10(v17, v18, v9);
    v15(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v14);
    *(_QWORD *)&v17[*(int *)(v19 + 24)] = *(_QWORD *)&v18[*(int *)(v19 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = v45[8];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v26 = *((_QWORD *)v25 - 1);
  v27 = *(unsigned int (**)(char *, uint64_t, int *))(v26 + 48);
  v44 = v9;
  if (v27(v24, 1, v25))
  {
    v28 = sub_24A135F88(&qword_257908DC8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v46(v23, v24, v9);
    v15(&v23[v25[5]], &v24[v25[5]], v14);
    *(_OWORD *)&v23[v25[6]] = *(_OWORD *)&v24[v25[6]];
    *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
    v23[v25[8]] = v24[v25[8]];
    v23[v25[9]] = v24[v25[9]];
    v23[v25[10]] = v24[v25[10]];
    *(_OWORD *)&v23[v25[11]] = *(_OWORD *)&v24[v25[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
  }
  v43 = v26;
  v29 = v45[9];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v32 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_24A135F88(&qword_257908DD0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    v35 = v14;
  }
  else
  {
    *v30 = *v31;
    v46((char *)v30 + *(int *)(v32 + 20), (char *)v31 + *(int *)(v32 + 20), v44);
    v36 = *(int *)(v32 + 24);
    v37 = (char *)v31 + v36;
    v35 = v14;
    v15((char *)v30 + v36, v37, v14);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v38 = v45[10];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  if (v27(v40, 1, v25))
  {
    v41 = sub_24A135F88(&qword_257908DC8);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v46(v39, v40, v44);
    v15(&v39[v25[5]], &v40[v25[5]], v35);
    *(_OWORD *)&v39[v25[6]] = *(_OWORD *)&v40[v25[6]];
    *(_OWORD *)&v39[v25[7]] = *(_OWORD *)&v40[v25[7]];
    v39[v25[8]] = v40[v25[8]];
    v39[v25[9]] = v40[v25[9]];
    v39[v25[10]] = v40[v25[10]];
    *(_OWORD *)&v39[v25[11]] = *(_OWORD *)&v40[v25[11]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56))(v39, 0, 1, v25);
  }
  return a1;
}

char *sub_24A13C734(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t (*v27)(char *, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  void (*v82)(char *, char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = sub_24A215804();
  v85 = *(_QWORD *)(v9 - 8);
  v82 = *(void (**)(char *, char *, uint64_t))(v85 + 40);
  v82(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = (char *)a2 + v10;
  v13 = sub_24A215840();
  v84 = *(_QWORD *)(v13 - 8);
  v81 = *(void (**)(char *, char *, uint64_t))(v84 + 40);
  v81(v11, v12, v13);
  v87 = a3;
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v15, v16, v9);
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v13);
      *(_QWORD *)&v15[*(int *)(v17 + 24)] = *(_QWORD *)&v16[*(int *)(v17 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_24A136064((uint64_t)v15, type metadata accessor for Sentencepiece_TrainerSpec);
LABEL_6:
    v22 = sub_24A135F88(&qword_257908DC0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v82(v15, v16, v9);
  v81(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v13);
  *(_QWORD *)&v15[*(int *)(v17 + 24)] = *(_QWORD *)&v16[*(int *)(v17 + 24)];
  swift_release();
LABEL_7:
  v23 = v87[8];
  v24 = &a1[v23];
  v25 = (char *)a2 + v23;
  v26 = (int *)type metadata accessor for Sentencepiece_NormalizerSpec(0);
  v80 = *((_QWORD *)v26 - 1);
  v27 = *(uint64_t (**)(char *, uint64_t, int *))(v80 + 48);
  v28 = v27(v24, 1, v26);
  v29 = v27(v25, 1, v26);
  v86 = v9;
  v83 = v13;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v24, v25, v9);
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v24[v26[5]], &v25[v26[5]], v13);
      *(_OWORD *)&v24[v26[6]] = *(_OWORD *)&v25[v26[6]];
      *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
      v24[v26[8]] = v25[v26[8]];
      v24[v26[9]] = v25[v26[9]];
      v24[v26[10]] = v25[v26[10]];
      *(_OWORD *)&v24[v26[11]] = *(_OWORD *)&v25[v26[11]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v80 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    sub_24A136064((uint64_t)v24, type metadata accessor for Sentencepiece_NormalizerSpec);
LABEL_12:
    v30 = sub_24A135F88(&qword_257908DC8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  v82(v24, v25, v9);
  v81(&v24[v26[5]], &v25[v26[5]], v13);
  v48 = v26[6];
  v49 = &v24[v48];
  v50 = (uint64_t *)&v25[v48];
  v52 = *v50;
  v51 = v50[1];
  *(_QWORD *)v49 = v52;
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  v53 = v26[7];
  v54 = (uint64_t *)&v24[v53];
  v55 = (uint64_t *)&v25[v53];
  v56 = *(_QWORD *)&v24[v53 + 8];
  if (v56 >> 60 != 15)
  {
    v57 = v55[1];
    if (v57 >> 60 != 15)
    {
      v68 = *v54;
      *v54 = *v55;
      v54[1] = v57;
      sub_24A135F1C(v68, v56);
      goto LABEL_37;
    }
    sub_24A13A204((uint64_t)v54);
  }
  *(_OWORD *)v54 = *(_OWORD *)v55;
LABEL_37:
  v24[v26[8]] = v25[v26[8]];
  v24[v26[9]] = v25[v26[9]];
  v24[v26[10]] = v25[v26[10]];
  v69 = v26[11];
  v70 = &v24[v69];
  v71 = (uint64_t *)&v25[v69];
  v73 = *v71;
  v72 = v71[1];
  *(_QWORD *)v70 = v73;
  *((_QWORD *)v70 + 1) = v72;
  swift_bridgeObjectRelease();
LABEL_13:
  v31 = v87[9];
  v32 = &a1[v31];
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for Sentencepiece_SelfTestData(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v39 = v86;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v86);
      (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    sub_24A136064((uint64_t)v32, type metadata accessor for Sentencepiece_SelfTestData);
LABEL_18:
    v40 = sub_24A135F88(&qword_257908DD0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    v39 = v86;
    goto LABEL_19;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  swift_bridgeObjectRelease();
  v39 = v86;
  v82(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v86);
  v81(&v32[*(int *)(v34 + 24)], &v33[*(int *)(v34 + 24)], v83);
LABEL_19:
  v41 = v87[10];
  v42 = &a1[v41];
  v43 = (char *)a2 + v41;
  v44 = v27(&a1[v41], 1, v26);
  v45 = v27(v43, 1, v26);
  if (!v44)
  {
    if (v45)
    {
      sub_24A136064((uint64_t)v42, type metadata accessor for Sentencepiece_NormalizerSpec);
      goto LABEL_24;
    }
    v82(v42, v43, v39);
    v81(&v42[v26[5]], &v43[v26[5]], v83);
    v58 = v26[6];
    v59 = &v42[v58];
    v60 = (uint64_t *)&v43[v58];
    v62 = *v60;
    v61 = v60[1];
    *(_QWORD *)v59 = v62;
    *((_QWORD *)v59 + 1) = v61;
    swift_bridgeObjectRelease();
    v63 = v26[7];
    v64 = (uint64_t *)&v42[v63];
    v65 = (uint64_t *)&v43[v63];
    v66 = *(_QWORD *)&v42[v63 + 8];
    if (v66 >> 60 != 15)
    {
      v67 = v65[1];
      if (v67 >> 60 != 15)
      {
        v74 = *v64;
        *v64 = *v65;
        v64[1] = v67;
        sub_24A135F1C(v74, v66);
        goto LABEL_39;
      }
      sub_24A13A204((uint64_t)v64);
    }
    *(_OWORD *)v64 = *(_OWORD *)v65;
LABEL_39:
    v42[v26[8]] = v43[v26[8]];
    v42[v26[9]] = v43[v26[9]];
    v42[v26[10]] = v43[v26[10]];
    v75 = v26[11];
    v76 = &v42[v75];
    v77 = (uint64_t *)&v43[v75];
    v79 = *v77;
    v78 = v77[1];
    *(_QWORD *)v76 = v79;
    *((_QWORD *)v76 + 1) = v78;
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v45)
  {
LABEL_24:
    v46 = sub_24A135F88(&qword_257908DC8);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v42, v43, v39);
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v42[v26[5]], &v43[v26[5]], v83);
  *(_OWORD *)&v42[v26[6]] = *(_OWORD *)&v43[v26[6]];
  *(_OWORD *)&v42[v26[7]] = *(_OWORD *)&v43[v26[7]];
  v42[v26[8]] = v43[v26[8]];
  v42[v26[9]] = v43[v26[9]];
  v42[v26[10]] = v43[v26[10]];
  *(_OWORD *)&v42[v26[11]] = *(_OWORD *)&v43[v26[11]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v80 + 56))(v42, 0, 1, v26);
  return a1;
}

uint64_t sub_24A13CE3C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13CE48(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_24A215804();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_24A215840();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_24A135F88(&qword_257908DC0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v14 = sub_24A135F88(&qword_257908DC8);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[8];
          }
          else
          {
            v10 = sub_24A135F88(&qword_257908DD0);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a3[9];
          }
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_24A13CF60()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24A13CF6C(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_24A215804();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_24A215840();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_24A135F88(&qword_257908DC0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v14 = sub_24A135F88(&qword_257908DC8);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[8];
          }
          else
          {
            v10 = sub_24A135F88(&qword_257908DD0);
            v9 = *(_QWORD *)(v10 - 8);
            v11 = a4[9];
          }
        }
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_24A13D080()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_24A215804();
  if (v0 <= 0x3F)
  {
    sub_24A215840();
    if (v1 <= 0x3F)
    {
      sub_24A13D198(319, &qword_257909170, (void (*)(uint64_t))type metadata accessor for Sentencepiece_TrainerSpec);
      if (v2 <= 0x3F)
      {
        sub_24A13D198(319, &qword_257909178, (void (*)(uint64_t))type metadata accessor for Sentencepiece_NormalizerSpec);
        if (v3 <= 0x3F)
        {
          sub_24A13D198(319, qword_257909180, (void (*)(uint64_t))type metadata accessor for Sentencepiece_SelfTestData);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_24A13D198(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_24A216200();
    if (!v5)
      atomic_store(v4, a2);
  }
}

_QWORD *sub_24A13D1E4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_24A215804();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_24A215840();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    v17[4] = v18[4];
    *(_DWORD *)v17 = *(_DWORD *)v18;
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_24A13D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A13D344(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a1 + v12;
  v17 = a2 + v12;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A13D404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = (int *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 4) = *((_BYTE *)v16 + 4);
  *(_DWORD *)v15 = v17;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_24A13D4DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_24A13D590(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_24A215804();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_24A215840();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = a3[8];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  return a1;
}

uint64_t sub_24A13D654()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13D664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = sub_24A215804();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_24A215840();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t sub_24A13D71C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A13D72C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_24A215804();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_24A215840();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_24A13D7D4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_24A215804();
  if (v1 <= 0x3F)
  {
    result = sub_24A215840();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Sentencepiece_ModelProto.SentencePiece.TypeEnum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Sentencepiece_ModelProto.SentencePiece.TypeEnum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24A13D950 + 4 * byte_24A2186EF[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24A13D984 + 4 * byte_24A2186EA[v4]))();
}

uint64_t sub_24A13D984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A13D98C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A13D994);
  return result;
}

uint64_t sub_24A13D9A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A13D9A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24A13D9AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A13D9B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A13D9C0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24A13D9C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Sentencepiece_ModelProto.SentencePiece.TypeEnum()
{
  return &type metadata for Sentencepiece_ModelProto.SentencePiece.TypeEnum;
}

unint64_t sub_24A13D9E0()
{
  unint64_t result;

  result = qword_2579098C8;
  if (!qword_2579098C8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21893C, &type metadata for Sentencepiece_ModelProto.SentencePiece.TypeEnum);
    atomic_store(result, (unint64_t *)&qword_2579098C8);
  }
  return result;
}

unint64_t sub_24A13DA24()
{
  unint64_t result;

  result = qword_2579098D0;
  if (!qword_2579098D0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21875C, &type metadata for Sentencepiece_TrainerSpec.ModelType);
    atomic_store(result, (unint64_t *)&qword_2579098D0);
  }
  return result;
}

uint64_t *sub_24A13DA68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_24A13DAA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_24A135F88(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_24A13DAE4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_24A13DB20(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_24A13DB48()
{
  char **v0;
  char *v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *((_QWORD *)*v0 + 2);
  if (v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v1 = sub_24A148928((uint64_t)v1);
    bzero(v1 + 32, 4 * v2);
    *v0 = v1;
  }
}

uint64_t sub_24A13DBA0()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13DBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13DC38())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13DC74()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_24A13DCA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_24A13DCE0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13DD1C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_24A13DD4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*sub_24A13DD88())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13DDC4()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_24A13DDF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_24A13DE30())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13DE6C()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13DEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13DF04())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13DF40()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13DF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13DFD8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E014()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A13E048(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E08C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E0C8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A13E0FC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E140())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E17C()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13E1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E214())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E250()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 120);
}

uint64_t sub_24A13E280(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 120) = a1;
  return result;
}

uint64_t (*sub_24A13E2BC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E2F8()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13E340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E390())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E3CC()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13E414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E464())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E4A0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A13E4D4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 160) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E518())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E554()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 168);
}

uint64_t sub_24A13E584(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 168) = a1;
  return result;
}

uint64_t (*sub_24A13E5C0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E5FC()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13E644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E694())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E6D0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_24A13E704(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 192) = a1;
  *(_BYTE *)(v2 + 200) = a2 & 1;
  return result;
}

uint64_t (*sub_24A13E754())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E790()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 208);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A13E7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 208) = a1;
  *(_QWORD *)(v2 + 216) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A13E828())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E864()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 224);
}

uint64_t sub_24A13E898(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 224) = a1;
  *(_BYTE *)(v2 + 232) = a2 & 1;
  return result;
}

uint64_t (*sub_24A13E8E8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A13E924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  __int128 v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  if (!*(_QWORD *)(a3 + 16))
  {
    v12 = 0u;
    v13 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_24A148970(a1, a2);
  if ((v7 & 1) == 0)
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_24A14D1A4(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_8:
    sub_24A14D268((uint64_t)&v12);
    goto LABEL_9;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return v11;
LABEL_9:
  *(_QWORD *)&v12 = 0;
  *((_QWORD *)&v12 + 1) = 0xE000000000000000;
  sub_24A216308();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v12 = 0x742064656C696146;
  *((_QWORD *)&v12 + 1) = 0xEF2064616572206FLL;
  sub_24A215D98();
  sub_24A215D98();
  v9 = v12;
  sub_24A14C404();
  swift_allocError();
  *v10 = v9;
  return swift_willThrow();
}

_QWORD *sub_24A13EA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;

  if (!*(_QWORD *)(a3 + 16))
  {
    v15 = 0u;
    v16 = 0u;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v6 = sub_24A148970(a1, a2);
  if ((v7 & 1) == 0)
  {
    v15 = 0u;
    v16 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_24A14D1A4(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v15);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v16 + 1))
  {
LABEL_8:
    sub_24A14D268((uint64_t)&v15);
LABEL_9:
    if (*(_QWORD *)(a3 + 16))
    {
      swift_bridgeObjectRetain();
      v9 = sub_24A148970(a1, a2);
      if ((v10 & 1) != 0)
      {
        sub_24A14D1A4(*(_QWORD *)(a3 + 56) + 32 * v9, (uint64_t)&v15);
      }
      else
      {
        v15 = 0u;
        v16 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v16 + 1))
      {
        sub_24A135F88(&qword_257909948);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if (v14[2] == 2 && (v14[4] == a1 && v14[5] == a2 || (sub_24A21659C() & 1) != 0))
          {
            v8 = v14[6];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return (_QWORD *)v8;
          }
          swift_bridgeObjectRelease();
        }
LABEL_22:
        *(_QWORD *)&v15 = 0;
        *((_QWORD *)&v15 + 1) = 0xE000000000000000;
        sub_24A216308();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v15 = 0x742064656C696146;
        *((_QWORD *)&v15 + 1) = 0xEF2064616572206FLL;
        sub_24A215D98();
        sub_24A215D98();
        v8 = *((_QWORD *)&v15 + 1);
        v11 = v15;
        sub_24A14C404();
        swift_allocError();
        *v12 = v11;
        v12[1] = v8;
        swift_willThrow();
        return (_QWORD *)v8;
      }
    }
    else
    {
      v15 = 0u;
      v16 = 0u;
    }
    sub_24A14D268((uint64_t)&v15);
    goto LABEL_22;
  }
  if (!swift_dynamicCast())
    goto LABEL_9;
  return v14;
}

uint64_t sub_24A13ED00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (!*(_QWORD *)(a3 + 16))
  {
    v25 = 0u;
    v26 = 0u;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  v6 = sub_24A148970(a1, a2);
  if ((v7 & 1) == 0)
  {
    v25 = 0u;
    v26 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  sub_24A14D1A4(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)&v25);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v26 + 1))
  {
LABEL_13:
    sub_24A14D268((uint64_t)&v25);
    goto LABEL_14;
  }
  sub_24A135F88(&qword_25790A498);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    *(_QWORD *)&v25 = 0;
    *((_QWORD *)&v25 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v25 = 0x742064656C696146;
    *((_QWORD *)&v25 + 1) = 0xEF2064616572206FLL;
    sub_24A215D98();
    sub_24A215D98();
    v22 = *((_QWORD *)&v25 + 1);
    v10 = v25;
    sub_24A14C404();
    swift_allocError();
    *v23 = v10;
    v23[1] = v22;
    swift_willThrow();
    return v10;
  }
  v8 = v27;
  v9 = *(_QWORD *)(v27 + 16);
  if (v9)
  {
    *(_QWORD *)&v25 = MEMORY[0x24BEE4AF8];
    sub_24A148B80(0, v9, 0);
    v10 = v25;
    v11 = (uint64_t *)(v8 + 56);
    do
    {
      v12 = *(v11 - 3);
      v13 = *(v11 - 2);
      v14 = *(v11 - 1);
      v15 = *v11;
      swift_bridgeObjectRetain();
      v16 = MEMORY[0x24BD095F4](v12, v13, v14, v15);
      v18 = v17;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v25 = v10;
      v20 = *(_QWORD *)(v10 + 16);
      v19 = *(_QWORD *)(v10 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_24A148B80(v19 > 1, v20 + 1, 1);
        v10 = v25;
      }
      *(_QWORD *)(v10 + 16) = v20 + 1;
      v21 = v10 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v16;
      *(_QWORD *)(v21 + 40) = v18;
      v11 += 4;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v10;
}

uint64_t sub_24A13EF68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v6 = a2;
  v7 = result;
  v28 = MEMORY[0x24BEE4AF8];
  result = sub_24A148BD4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = v28;
    if (v6 <= v7)
      v8 = v7;
    else
      v8 = v6;
    v23 = v8;
    v24 = v6;
    v9 = v7;
    while (v6 != v9)
    {
      if (v7 < 0)
        goto LABEL_35;
      if ((unint64_t)v9 >= *(_QWORD *)(*(_QWORD *)a3 + 16))
        goto LABEL_36;
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8 * v9 + 32) + 16);
      v11 = v9 * v10;
      if ((unsigned __int128)(v9 * (__int128)v10) >> 64 != (v9 * v10) >> 63)
        goto LABEL_37;
      v12 = v11 + v10;
      if (__OFADD__(v11, v10))
        goto LABEL_38;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 8 * v9 + 32) + 16);
      if (v12 < v11)
        goto LABEL_39;
      if (v11 < 0)
        goto LABEL_40;
      v14 = *a4;
      v15 = *(_QWORD *)(*a4 + 16);
      if (v15 < v11 || (uint64_t)v15 < v12)
        goto LABEL_41;
      v17 = v7;
      sub_24A2165C0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v18 = swift_dynamicCastClass();
      if (!v18)
      {
        swift_bridgeObjectRelease();
        v18 = MEMORY[0x24BEE4AF8];
      }
      v19 = *(_QWORD *)(v18 + 16);
      swift_release();
      if (v19 == v13)
      {
        v20 = swift_dynamicCastClass();
        if (!v20)
        {
          swift_bridgeObjectRelease();
          v20 = MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v20 = sub_24A14A964(v14, v14 + 32, v11, (2 * v12) | 1);
      }
      result = swift_bridgeObjectRelease();
      if (v27)
      {
        swift_release();
        return v5;
      }
      v22 = *(_QWORD *)(v28 + 16);
      v21 = *(_QWORD *)(v28 + 24);
      if (v22 >= v21 >> 1)
        result = sub_24A148BD4(v21 > 1, v22 + 1, 1);
      *(_QWORD *)(v28 + 16) = v22 + 1;
      *(_QWORD *)(v28 + 8 * v22 + 32) = v20;
      v7 = v17;
      v6 = v24;
      if (v24 < v7)
        goto LABEL_42;
      if (v23 == v9)
        goto LABEL_43;
      if (v24 == ++v9)
        return v5;
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_24A13F1BC(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)sub_24A216350();
      v7 = (uint64_t)sub_24A14927C(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_24A149198(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

BOOL sub_24A13F408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  (*(void (**)(void))(*(_QWORD *)v0 + 560))();
  v2 = v1;
  v3 = swift_bridgeObjectRelease();
  if (!v2)
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 584))(v3);
  if ((v5 & 1) != 0)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 608))(v4);
  v7 = v6;
  v8 = swift_bridgeObjectRelease();
  if (!v7)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 632))(v8);
  return (v9 & 1) == 0;
}

uint64_t sub_24A13F484(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A13F4C0 + 4 * byte_24A219630[a1]))(0xD000000000000016, 0x800000024A220940);
}

uint64_t sub_24A13F4C0()
{
  return 0x6165467475706E69;
}

uint64_t sub_24A13F4DC()
{
  return 0x6172467475706E69;
}

uint64_t sub_24A13F500()
{
  return 0x65764F656D617266;
}

uint64_t sub_24A13F520()
{
  return 1802723693;
}

uint64_t sub_24A13F530()
{
  return 0x6465626D45736F70;
}

uint64_t sub_24A13F554()
{
  return 0x6168536574617473;
}

uint64_t sub_24A13F574()
{
  return 0x6174537475706E69;
}

uint64_t sub_24A13F598()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_24A13F694()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t sub_24A13F6D8()
{
  return sub_24A216644();
}

uint64_t sub_24A13F700()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t sub_24A13F740()
{
  unsigned __int8 *v0;

  return sub_24A13F484(*v0);
}

uint64_t sub_24A13F748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A14B7A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A13F76C()
{
  return 0;
}

void sub_24A13F778(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_24A13F784()
{
  sub_24A14B68C();
  return sub_24A2166A4();
}

uint64_t sub_24A13F7AC()
{
  sub_24A14B68C();
  return sub_24A2166B0();
}

uint64_t sub_24A13F7D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A13F840()
{
  sub_24A13F7D4();
  return swift_deallocClassInstance();
}

uint64_t sub_24A13F860(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_24A13F8AC(a1);
  return v2;
}

_QWORD *sub_24A13F8AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char *v98;

  v2 = v1;
  v4 = sub_24A135F88(&qword_257909920);
  v5 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  v76 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v98 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + 16) = 0;
  v74 = v2 + 16;
  *(_OWORD *)(v2 + 32) = 0u;
  v73 = (uint64_t *)(v2 + 32);
  *(_OWORD *)(v2 + 48) = 0u;
  v72 = (uint64_t *)(v2 + 48);
  *(_QWORD *)(v2 + 24) = 0xE000000000000000;
  *(_QWORD *)(v2 + 64) = 0xE000000000000000;
  *(_QWORD *)(v2 + 72) = 0;
  v71 = v2 + 72;
  *(_QWORD *)(v2 + 80) = 0xE000000000000000;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 88) = MEMORY[0x24BEE4AF8];
  v70 = (_QWORD *)(v2 + 88);
  *(_QWORD *)(v2 + 96) = v7;
  v69 = (_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 104) = 0;
  v68 = v2 + 104;
  *(_QWORD *)(v2 + 112) = 0xE000000000000000;
  *(_QWORD *)(v2 + 128) = 0;
  v66 = v2 + 128;
  *(_QWORD *)(v2 + 120) = 0;
  v67 = (uint64_t *)(v2 + 120);
  *(_QWORD *)(v2 + 136) = 0xE000000000000000;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0xE000000000000000;
  *(_QWORD *)(v2 + 160) = v7;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  v8 = (uint64_t *)(v2 + 168);
  *(_QWORD *)(v2 + 208) = 0;
  *(_BYTE *)(v2 + 200) = 1;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_BYTE *)(v2 + 232) = 1;
  v9 = a1[3];
  v77 = a1[4];
  v79 = a1;
  sub_24A14B668(a1, v9);
  sub_24A14B68C();
  v10 = v78;
  sub_24A216674();
  if (v10)
  {
    swift_release();
    v11 = (_QWORD *)v2;
  }
  else
  {
    v64 = (_QWORD *)(v2 + 160);
    v65 = v2 + 144;
    v77 = v2 + 208;
    v78 = (_QWORD *)v2;
    v63 = v2 + 224;
    v97 = 0;
    v12 = sub_24A2164D0();
    v14 = v13;
    swift_beginAccess();
    v15 = v78;
    v78[2] = v12;
    v15[3] = v14;
    swift_bridgeObjectRelease();
    v96 = 1;
    v16 = sub_24A2164E8();
    v17 = v73;
    swift_beginAccess();
    *v17 = v16;
    v95 = 2;
    v19 = sub_24A2164E8();
    v20 = v77;
    swift_beginAccess();
    *(_QWORD *)(v20 - 168) = v19;
    v94 = 3;
    v21 = sub_24A2164E8();
    v22 = v72;
    swift_beginAccess();
    *v22 = v21;
    v93 = 4;
    v23 = sub_24A2164D0();
    v25 = v24;
    swift_beginAccess();
    v15[7] = v23;
    v15[8] = v25;
    swift_bridgeObjectRelease();
    v92 = 5;
    v26 = sub_24A2164D0();
    v28 = v27;
    swift_beginAccess();
    v15[9] = v26;
    v15[10] = v28;
    swift_bridgeObjectRelease();
    sub_24A135F88(&qword_257909928);
    v91 = 6;
    sub_24A14B6D0();
    sub_24A2164F4();
    v29 = v90;
    v30 = v70;
    swift_beginAccess();
    *v30 = v29;
    swift_bridgeObjectRelease();
    sub_24A135F88(&qword_257909948);
    LOBYTE(v90) = 7;
    v31 = sub_24A14B74C(&qword_257909950, &qword_257909948, MEMORY[0x24BEE0D38]);
    sub_24A2164F4();
    v74 = v31;
    v32 = v89;
    v33 = v69;
    swift_beginAccess();
    *v33 = v32;
    swift_bridgeObjectRelease();
    LOBYTE(v89) = 8;
    v34 = sub_24A2164D0();
    v36 = v35;
    swift_beginAccess();
    v15[13] = v34;
    v15[14] = v36;
    swift_bridgeObjectRelease();
    v88 = 9;
    v37 = sub_24A2164E8();
    v38 = v67;
    swift_beginAccess();
    *v38 = v37;
    v87 = 10;
    v39 = sub_24A2164D0();
    v41 = v40;
    swift_beginAccess();
    v42 = v78;
    v78[16] = v39;
    v42[17] = v41;
    swift_bridgeObjectRelease();
    v86 = 11;
    v43 = sub_24A2164D0();
    v45 = v44;
    swift_beginAccess();
    v46 = v78;
    v78[18] = v43;
    v46[19] = v45;
    swift_bridgeObjectRelease();
    v85 = 12;
    sub_24A2164F4();
    v47 = v84;
    v48 = v64;
    swift_beginAccess();
    *v48 = v47;
    swift_bridgeObjectRelease();
    LOBYTE(v84) = 13;
    v49 = sub_24A2164E8();
    swift_beginAccess();
    *v8 = v49;
    v83 = 14;
    v50 = sub_24A216488();
    v52 = v51;
    swift_beginAccess();
    v53 = v78;
    v78[22] = v50;
    v53[23] = v52;
    swift_bridgeObjectRelease();
    v82 = 15;
    v54 = sub_24A2164AC();
    LOBYTE(v52) = v55;
    swift_beginAccess();
    v56 = v78;
    v78[24] = v54;
    *((_BYTE *)v56 + 200) = v52 & 1;
    v81 = 16;
    v57 = sub_24A216488();
    v59 = v58;
    swift_beginAccess();
    v60 = v78;
    v78[26] = v57;
    v60[27] = v59;
    swift_bridgeObjectRelease();
    v80 = 17;
    v61 = sub_24A2164AC();
    LOBYTE(v59) = v62;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v98, v75);
    swift_beginAccess();
    v11 = v78;
    v78[28] = v61;
    *((_BYTE *)v11 + 232) = v59 & 1;
  }
  sub_24A14D184((uint64_t)v79);
  return v11;
}

uint64_t sub_24A1400B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 672))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A1400DC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 516);
}

uint64_t sub_24A14010C(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_DWORD *)(v1 + 516) = a1;
  return result;
}

uint64_t (*sub_24A140148())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t VATransducer.__allocating_init(config:debug:)(uint64_t a1)
{
  swift_allocObject();
  return sub_24A14BFB4(a1);
}

uint64_t VATransducer.init(config:debug:)(uint64_t a1)
{
  return sub_24A14BFB4(a1);
}

unint64_t sub_24A1401E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint8_t *v64;
  void (*v65)(uint64_t, uint64_t);
  NSObject *v66;
  os_log_type_t v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  os_log_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t result;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int32x2_t v116;
  char v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int32x2_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t);
  uint64_t v130;
  _QWORD *v131;
  int32x2_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x2_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int32x2_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int32x2_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  os_log_t v177;
  int v178;
  uint64_t v179;
  void (*v180)(uint64_t);
  uint8_t *v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(void);
  os_log_t v191;
  uint64_t *v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  unint64_t *v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202[3];
  uint64_t v203[3];
  __int128 v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  char v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _OWORD v218[2];
  uint64_t v219;

  v3 = v2;
  LODWORD(v199) = a2;
  v200 = sub_24A215A8C();
  v198 = *(void (**)(uint64_t, uint64_t))(v200 - 8);
  v5 = MEMORY[0x24BDAC7A8](v200);
  v7 = ((char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x24BDAC7A8](v5);
  v197 = (uint64_t)&v176 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v176 - v10;
  *(_OWORD *)(v2 + 16) = 0u;
  v12 = v2 + 16;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0xE000000000000000;
  *(_OWORD *)(v2 + 176) = 0u;
  v13 = (uint64_t *)(v2 + 176);
  *(_OWORD *)(v2 + 208) = 0u;
  v195 = v2 + 208;
  *(_QWORD *)(v2 + 240) = -1;
  v196 = (unint64_t *)(v2 + 240);
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 217) = 0u;
  v14 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 248) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v2 + 256) = v14;
  *(_DWORD *)(v2 + 264) = -1028740016;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 272) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 280) = v15;
  *(_QWORD *)(v2 + 288) = v15;
  *(_QWORD *)(v2 + 296) = v15;
  *(_QWORD *)(v2 + 304) = v15;
  *(_QWORD *)(v2 + 312) = -1;
  *(_QWORD *)(v2 + 320) = v15;
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_QWORD *)(v2 + 336) = v15;
  strcpy((char *)(v2 + 344), "ctc_activation");
  *(_BYTE *)(v2 + 359) = -18;
  type metadata accessor for VATinyASRFeatureExtract();
  *(_QWORD *)(v2 + 160) = VATinyASRFeatureExtract.__allocating_init()();
  if (((*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))() & 1) == 0)
  {
    v191 = v7;
    v192 = (uint64_t *)(v2 + 176);
    *(_QWORD *)&v194 = type metadata accessor for VAEspressoUtils();
    v21 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 168);
    v22 = v21();
    v24 = v23;
    v25 = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 312))(v203);
    LOBYTE(v202[0]) = v203[0];
    v26 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 336))(v25);
    v27 = v201;
    static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v22, v24, (char *)v202, v26, v28, v199 & 1, &v204);
    if (v27)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v190 = v21;
      v201 = 0;
      v193 = a1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v199 = v204;
      v47 = v205;
      v48 = v206;
      v49 = v207;
      v50 = v208;
      v194 = v209;
      v51 = v210;
      v52 = v211;
      swift_beginAccess();
      v53 = *(_QWORD *)(v3 + 16);
      v54 = *(_QWORD *)(v3 + 24);
      v55 = *(_QWORD *)(v3 + 32);
      v56 = *(_QWORD *)(v3 + 40);
      v57 = *(_QWORD *)(v3 + 48);
      *(_OWORD *)(v3 + 16) = v199;
      *(_QWORD *)(v3 + 32) = v47;
      *(_QWORD *)(v3 + 40) = v48;
      *(_QWORD *)(v3 + 48) = v49;
      *(_QWORD *)(v3 + 56) = v50;
      *(_OWORD *)(v3 + 64) = v194;
      *(_QWORD *)(v3 + 80) = v51;
      *(_BYTE *)(v3 + 88) = v52;
      sub_24A14C34C(v53, v54, v55, v56, v57);
      *(_QWORD *)&v199 = *(_QWORD *)(v3 + 48);
      if ((_QWORD)v199)
      {
        v58 = *(uint64_t (**)(void))(v3 + 16);
        v59 = *(_QWORD *)(v3 + 24);
        v189 = *(_QWORD *)(v3 + 32);
        v190 = v58;
        v60 = *(_QWORD *)(v3 + 40);
        v186 = v59;
        v187 = v60;
        v61 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)&v194 = *(_QWORD *)(v3 + 56);
        v62 = *(_QWORD *)(v3 + 80);
        v188 = *(_QWORD *)(v3 + 72);
        v63 = *(unsigned __int8 *)(v3 + 88);
        v185 = v63 & 1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v64 = (uint8_t *)sub_24A1B9D90();
        v65 = v198;
        v180 = (void (*)(uint64_t))*((_QWORD *)v198 + 2);
        v181 = v64;
        v180(v197);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v66 = sub_24A215A74();
        v67 = sub_24A2160EC();
        v68 = v67;
        v69 = os_log_type_enabled(v66, v67);
        v183 = v62;
        v184 = v61;
        v182 = v63;
        if (v69)
        {
          v70 = swift_slowAlloc();
          v178 = v68;
          v71 = v70;
          v179 = swift_slowAlloc();
          *(_QWORD *)&v204 = v179;
          *(_DWORD *)v71 = 136315394;
          swift_bridgeObjectRetain();
          v177 = v66;
          v202[0] = sub_24A148270(v194, v61, (uint64_t *)&v204);
          v72 = v200;
          sub_24A216260();
          swift_bridgeObjectRelease();
          *(_WORD *)(v71 + 12) = 1024;
          LODWORD(v202[0]) = v185;
          sub_24A216260();
          v73 = v72;
          v74 = v189;
          sub_24A14C34C((uint64_t)v190, v186, v189, v187, v199);
          v75 = v177;
          _os_log_impl(&dword_24A12D000, v177, (os_log_type_t)v178, "Loaded %s, aneChosen=%{BOOL}d", (uint8_t *)v71, 0x12u);
          v76 = v179;
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v76, -1, -1);
          MEMORY[0x24BD0AAAC](v71, -1, -1);

          v77 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v198 + 1);
          v77(v197, v73);
        }
        else
        {
          v74 = v189;
          sub_24A14C34C((uint64_t)v190, v186, v189, v187, v199);

          v77 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v65 + 1);
          v73 = v200;
          v77(v197, v200);
        }
        v85 = v191;
        ((void (*)(os_log_t, uint8_t *, uint64_t))v180)(v191, v181, v73);
        swift_bridgeObjectRetain_n();
        v86 = sub_24A215A74();
        v87 = sub_24A2160F8();
        if (os_log_type_enabled(v86, v87))
        {
          v198 = v77;
          v88 = (uint8_t *)swift_slowAlloc();
          v197 = swift_slowAlloc();
          *(_QWORD *)&v204 = v197;
          v181 = v88;
          *(_DWORD *)v88 = 136315138;
          v179 = (uint64_t)(v88 + 4);
          swift_bridgeObjectRetain();
          v180 = (void (*)(uint64_t))(MEMORY[0x24BEE4AD8] + 8);
          v89 = sub_24A215C30();
          v91 = v90;
          swift_bridgeObjectRelease();
          v202[0] = sub_24A148270(v89, v91, (uint64_t *)&v204);
          sub_24A216260();
          v74 = v189;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v92 = v181;
          _os_log_impl(&dword_24A12D000, v86, v87, "tASR model config: %s", v181, 0xCu);
          v93 = v197;
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v93, -1, -1);
          MEMORY[0x24BD0AAAC](v92, -1, -1);

          v198((uint64_t)v191, v200);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v77((uint64_t)v85, v73);
        }
        v94 = v201;
        v95 = v186;
        *(_QWORD *)&v204 = v190;
        *((_QWORD *)&v204 + 1) = v186;
        v205 = v74;
        v96 = v187;
        v206 = v187;
        v207 = v199;
        v208 = v194;
        *(_QWORD *)&v209 = v184;
        *((_QWORD *)&v209 + 1) = v188;
        v210 = v183;
        v211 = v185;
        v97 = sub_24A14AD0C((uint64_t)&v204);
        v201 = v94;
        if (v94)
        {
          swift_release();
          sub_24A14C34C((uint64_t)v190, v95, v189, v96, v199);
          goto LABEL_23;
        }
        v83 = v97;
        sub_24A14C34C((uint64_t)v190, v95, v189, v96, v199);
        v84 = v193;
        goto LABEL_26;
      }
      *(_QWORD *)&v204 = 0;
      *((_QWORD *)&v204 + 1) = 0xE000000000000000;
      sub_24A216308();
      v80 = swift_bridgeObjectRelease();
      *(_QWORD *)&v204 = 0x742064656C696146;
      *((_QWORD *)&v204 + 1) = 0xEF2064616F6C206FLL;
      ((void (*)(uint64_t))v190)(v80);
      sub_24A215D98();
      swift_bridgeObjectRelease();
      v81 = v204;
      sub_24A14C404();
      swift_allocError();
      *v82 = v81;
      swift_willThrow();
    }
    swift_release();
    goto LABEL_23;
  }
  *(_QWORD *)&v194 = v11;
  type metadata accessor for VAEspressoUtilsV2();
  v16 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 168))();
  v18 = v17;
  v19 = sub_24A1516F0();
  v20 = v201;
  sub_24A1D80C4(v16, v18, v19 & 1, (uint64_t *)&v212);
  if (v20)
  {
    swift_bridgeObjectRelease();
    swift_release();
LABEL_23:
    sub_24A14C34C(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
    sub_24A14C388(*(_QWORD *)(v3 + 96), *(_QWORD *)(v3 + 104));
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VACTCEncoder();
    swift_deallocPartialClassInstance();
    return v3;
  }
  v192 = v13;
  v193 = a1;
  v201 = 0;
  v29 = v213;
  v188 = *((_QWORD *)&v212 + 1);
  v189 = v212;
  v31 = v214;
  v30 = v215;
  v32 = v216;
  swift_bridgeObjectRelease();
  v218[0] = v212;
  v219 = v29;
  v217 = v31;
  swift_beginAccess();
  *(_QWORD *)&v199 = *(_QWORD *)(v3 + 96);
  v197 = *(_QWORD *)(v3 + 104);
  v33 = *(NSObject **)(v3 + 128);
  v190 = *(uint64_t (**)(void))(v3 + 136);
  v191 = v33;
  v34 = v188;
  *(_QWORD *)(v3 + 96) = v189;
  *(_QWORD *)(v3 + 104) = v34;
  *(_QWORD *)(v3 + 112) = v29;
  *(_QWORD *)(v3 + 120) = v31;
  *(_QWORD *)(v3 + 128) = v30;
  *(_QWORD *)(v3 + 136) = v32;
  sub_24A14C448((uint64_t)v218);
  sub_24A14C470((uint64_t)&v219);
  sub_24A14C470((uint64_t)&v217);
  swift_retain();
  swift_retain();
  sub_24A14C388(v199, v197);
  v35 = sub_24A1B9D90();
  v36 = v198;
  v37 = v200;
  (*((void (**)(_QWORD, uint64_t, uint64_t))v198 + 2))(v194, v35, v200);
  sub_24A14C448((uint64_t)v218);
  sub_24A14C470((uint64_t)&v219);
  sub_24A14C470((uint64_t)&v217);
  swift_retain();
  swift_retain();
  sub_24A14C448((uint64_t)v218);
  sub_24A14C470((uint64_t)&v219);
  sub_24A14C470((uint64_t)&v217);
  *(_QWORD *)&v199 = v30;
  swift_retain();
  swift_retain();
  v38 = sub_24A215A74();
  v39 = sub_24A2160F8();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    v197 = swift_slowAlloc();
    *(_QWORD *)&v204 = v197;
    *(_DWORD *)v40 = 136315138;
    v191 = v38;
    v41 = sub_24A1D7D04();
    v202[0] = sub_24A148270(v41, v42, (uint64_t *)&v204);
    sub_24A216260();
    swift_bridgeObjectRelease();
    sub_24A14C498((uint64_t)v218);
    sub_24A14C4C0((uint64_t)&v219);
    sub_24A14C4C0((uint64_t)&v217);
    swift_release();
    swift_release();
    sub_24A14C498((uint64_t)v218);
    sub_24A14C4C0((uint64_t)&v219);
    sub_24A14C4C0((uint64_t)&v217);
    swift_release();
    swift_release();
    v43 = v191;
    _os_log_impl(&dword_24A12D000, v191, v39, "tASR model description: %s", v40, 0xCu);
    v44 = v197;
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v44, -1, -1);
    MEMORY[0x24BD0AAAC](v40, -1, -1);

    v45 = (*((uint64_t (**)(_QWORD, uint64_t))v198 + 1))(v194, v200);
  }
  else
  {
    sub_24A14C498((uint64_t)v218);
    sub_24A14C4C0((uint64_t)&v219);
    sub_24A14C4C0((uint64_t)&v217);
    swift_release();
    swift_release();
    sub_24A14C498((uint64_t)v218);
    sub_24A14C4C0((uint64_t)&v219);
    sub_24A14C4C0((uint64_t)&v217);

    swift_release();
    swift_release();
    v45 = (*((uint64_t (**)(_QWORD, uint64_t))v36 + 1))(v194, v37);
  }
  v46 = v201;
  v78 = v193;
  (*(void (**)(uint64_t))(*(_QWORD *)v193 + 448))(v45);
  v79 = sub_24A14ABB4();
  v201 = v46;
  if (v46)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_24A14C498((uint64_t)v218);
    sub_24A14C4C0((uint64_t)&v219);
    sub_24A14C4C0((uint64_t)&v217);
    swift_release();
    swift_release();
    goto LABEL_23;
  }
  v83 = v79;
  sub_24A14C498((uint64_t)v218);
  sub_24A14C4C0((uint64_t)&v219);
  sub_24A14C4C0((uint64_t)&v217);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v84 = v78;
LABEL_26:
  *(_QWORD *)(v3 + 168) = v83;
  v99 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 664);
  v100 = swift_retain();
  v101 = v99(v100);
  swift_release();
  v102 = swift_beginAccess();
  *(_BYTE *)(v3 + 232) = v101 & 1;
  if ((v101 & 1) == 0)
  {
    v128 = v201;
    goto LABEL_32;
  }
  v103 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v3 + 168) + 560))(v102);
  v105 = v104;
  swift_beginAccess();
  *(_QWORD *)(v3 + 184) = v103;
  *(_QWORD *)(v3 + 192) = v105;
  v106 = swift_bridgeObjectRelease();
  v107 = *(_QWORD *)(v3 + 168);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 584))(v106);
  if ((v108 & 1) != 0)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v109 = result;
  v193 = v84;
  v110 = v196;
  v111 = swift_beginAccess();
  *(_QWORD *)(v3 + 240) = v109;
  v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 608))(v111);
  v114 = v113;
  swift_beginAccess();
  *(_QWORD *)(v3 + 208) = v112;
  *(_QWORD *)(v3 + 216) = v114;
  v115 = swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v3 + 168) + 632))(v115);
  if ((v117 & 1) == 0)
  {
    v118 = result;
    v116.i32[0] = 0;
    v119 = sub_24A1420E4(*v110, v116);
    v120 = sub_24A1421D4(v119, v118);
    swift_beginAccess();
    *(_QWORD *)(v12 + 184) = v120;
    swift_bridgeObjectRelease();
    v121.i32[0] = 0;
    v122 = sub_24A1420E4(v118, v121);
    swift_beginAccess();
    *(_QWORD *)(v12 + 208) = v122;
    swift_bridgeObjectRelease();
    type metadata accessor for VAContextEncoder();
    v123 = *v110;
    v84 = v193;
    v124 = swift_retain();
    v125 = v123;
    v126 = v201;
    v127 = VAContextEncoder.__allocating_init(config:outputDim:)(v124, v125);
    v128 = v126;
    if (v126)
    {
      swift_release();
      swift_release();
      return v3;
    }
    v174 = v127;
    v175 = v192;
    swift_beginAccess();
    *v175 = v174;
    swift_release();
    if (!*v175)
      *(_BYTE *)(v12 + 216) = 0;
LABEL_32:
    v129 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v3 + 168) + 368);
    v130 = swift_retain();
    v131 = (_QWORD *)v129(v130);
    result = swift_release();
    if (!v131[2])
    {
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    v133 = v131[4];
    v134 = *(_QWORD *)(v133 + 16);
    if (v134)
    {
      v135 = (uint64_t *)(v133 + 32);
      v136 = 1;
      while (1)
      {
        v137 = *v135++;
        result = v136 * v137;
        if ((unsigned __int128)(v136 * (__int128)v137) >> 64 != (v136 * v137) >> 63)
          break;
        v136 = result;
        if (!--v134)
          goto LABEL_39;
      }
      __break(1u);
    }
    else
    {
      result = 1;
LABEL_39:
      v132.i32[0] = 0;
      v138 = sub_24A1420E4(result, v132);
      swift_beginAccess();
      *(_QWORD *)(v12 + 256) = v138;
      result = swift_bridgeObjectRelease();
      if (v131[2] < 2uLL)
        goto LABEL_79;
      v140 = v131[5];
      v141 = *(_QWORD *)(v140 + 16);
      if (!v141)
      {
        result = 1;
LABEL_46:
        v139.i32[0] = 0;
        v145 = sub_24A1420E4(result, v139);
        swift_beginAccess();
        *(_QWORD *)(v12 + 264) = v145;
        result = swift_bridgeObjectRelease();
        if (v131[2] < 3uLL)
          goto LABEL_80;
        v147 = v131[6];
        v148 = *(_QWORD *)(v147 + 16);
        if (!v148)
        {
          result = 1;
LABEL_53:
          v146.i32[0] = 0;
          v152 = sub_24A1420E4(result, v146);
          swift_beginAccess();
          *(_QWORD *)(v12 + 272) = v152;
          result = swift_bridgeObjectRelease();
          if (v131[2] < 4uLL)
            goto LABEL_81;
          v154 = v131[7];
          v155 = *(_QWORD *)(v154 + 16);
          if (!v155)
          {
            result = 1;
LABEL_60:
            v153.i32[0] = 0;
            v159 = sub_24A1420E4(result, v153);
            swift_beginAccess();
            *(_QWORD *)(v12 + 280) = v159;
            result = swift_bridgeObjectRelease();
            if (v131[2] < 5uLL)
              goto LABEL_82;
            v160 = v131[8];
            swift_bridgeObjectRetain();
            result = swift_bridgeObjectRelease();
            v161 = *(_QWORD *)(v160 + 16);
            if (!v161)
            {
              swift_bridgeObjectRelease();
              v166 = 1.0;
LABEL_67:
              v167 = (_QWORD *)(v12 + 288);
              sub_24A14A560(0.0, v166, 1.0);
              v169 = v168;
              swift_beginAccess();
              *v167 = v169;
              swift_bridgeObjectRelease();
              type metadata accessor for VABundleUtil();
              (*(void (**)(void))(*(_QWORD *)v84 + 264))();
              v170 = static VABundleUtil.bundlePathFallback(path:)();
              if (v128)
              {
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                v172 = v170;
                v173 = v171;
                swift_bridgeObjectRelease();
                sub_24A14556C(v172, v173);
                swift_bridgeObjectRelease();
                sub_24A145FA8();
              }
              swift_release();
              return v3;
            }
            v162 = 0;
            v163 = 1;
            while (1)
            {
              v164 = *(_QWORD *)(v160 + 8 * v162 + 32);
              v165 = v163 * v164;
              if ((unsigned __int128)(v163 * (__int128)v164) >> 64 != (v163 * v164) >> 63)
                goto LABEL_77;
              ++v162;
              v163 *= v164;
              if (v161 == v162)
              {
                swift_bridgeObjectRelease();
                v166 = (float)v165;
                goto LABEL_67;
              }
            }
          }
          v156 = (uint64_t *)(v154 + 32);
          v157 = 1;
          while (1)
          {
            v158 = *v156++;
            result = v157 * v158;
            if ((unsigned __int128)(v157 * (__int128)v158) >> 64 != (v157 * v158) >> 63)
              break;
            v157 = result;
            if (!--v155)
              goto LABEL_60;
          }
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
        v149 = (uint64_t *)(v147 + 32);
        v150 = 1;
        while (1)
        {
          v151 = *v149++;
          result = v150 * v151;
          if ((unsigned __int128)(v150 * (__int128)v151) >> 64 != (v150 * v151) >> 63)
            break;
          v150 = result;
          if (!--v148)
            goto LABEL_53;
        }
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v142 = (uint64_t *)(v140 + 32);
      v143 = 1;
      while (1)
      {
        v144 = *v142++;
        result = v143 * v144;
        if ((unsigned __int128)(v143 * (__int128)v144) >> 64 != (v143 * v144) >> 63)
          break;
        v143 = result;
        if (!--v141)
          goto LABEL_46;
      }
    }
    __break(1u);
    goto LABEL_75;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_24A1414B8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;
  float v14;
  int32x2_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  __int128 v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  NSObject *v87;
  uint64_t (*v88)(void);
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t (*v92)(void);
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[26];

  v2 = v0;
  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v96 = v3;
  v97 = v4;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v95 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v94 = (char *)&v76 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v76 - v9;
  v11 = sub_24A1C3A28();
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v104);
  if (v1)
    return (uint64_t)v11;
  sub_24A1C3A34();
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v105);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v106);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v108);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)v109);
  v13 = sub_24A1C36DC();
  v14 = 0.0;
  v15.i32[0] = 0;
  v109[25] = sub_24A1420E4(v13, v15);
  v103 = 0;
  v16 = *(uint64_t (**)(void))(*v2 + 792);
  v17 = *(_QWORD *)(v16() + 16);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_54:
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
  v18 = *(uint64_t (**)(void))(*v2 + 936);
  v91 = v2[55];
  v19 = swift_beginAccess();
  v20 = 0;
  v77 = (char *)&v99 + 4;
  v81 = &v100;
  v82 = &v99;
  *((_QWORD *)&v21 + 1) = 2;
  v90 = xmmword_24A218650;
  v89 = MEMORY[0x24BEE4AE0] + 8;
  *(_QWORD *)&v21 = 136315394;
  v80 = v21;
  v79 = MEMORY[0x24BEE4AD8] + 8;
  *(_QWORD *)&v21 = 134218240;
  v78 = v21;
  *(_QWORD *)&v21 = 67109120;
  v76 = v21;
  v86 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v88 = v16;
  v92 = v18;
  while (1)
  {
    v24 = ((uint64_t (*)(uint64_t))v16)(v19);
    if ((v20 & 0x8000000000000000) != 0)
      goto LABEL_57;
    if (v20 >= *(_QWORD *)(v24 + 16))
      break;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_24A135F88(&qword_257909960);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v90;
    v26 = v18();
    *(float *)(inited + 32) = (float)(int)v26;
    MEMORY[0x24BDAC7A8](v26);
    sub_24A1C378C((uint64_t (*)(void))sub_24A14C4E8);
    swift_setDeallocating();
    v27 = sub_24A1C399C(v91);
    v93 = v20;
    MEMORY[0x24BDAC7A8](v27);
    v28 = sub_24A1C378C((uint64_t (*)(void))sub_24A14C4FC);
    MEMORY[0x24BDAC7A8](v28);
    swift_bridgeObjectRetain();
    sub_24A1C378C((uint64_t (*)(void))sub_24A14C4E8);
    v29 = swift_bridgeObjectRelease();
    MEMORY[0x24BDAC7A8](v29);
    sub_24A1C378C((uint64_t (*)(void))sub_24A14C4E8);
    swift_bridgeObjectRelease();
    v30 = sub_24A1C399C(v2[45]);
    v31 = v107;
    if (v107 < 0)
      goto LABEL_63;
    if (v107)
    {
      v32 = sub_24A215EF4();
      *(_QWORD *)(v32 + 16) = v31;
      bzero((void *)(v32 + 32), 4 * v31);
    }
    else
    {
      v32 = MEMORY[0x24BEE4AF8];
    }
    v102 = v32;
    MEMORY[0x24BDAC7A8](v30);
    sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
    v101 = 0;
    v33 = v102;
    v34 = *(_QWORD *)(v102 + 16);
    if (!v34)
      goto LABEL_59;
    v35 = *(float *)(v102 + 32);
    v36 = v34 - 1;
    v18 = v92;
    if (v34 != 1)
    {
      swift_beginAccess();
      v46 = 0;
      v47 = v33 + 36;
      do
      {
        v48 = v46 + 1;
        if (v35 < *(float *)(v47 + 4 * v46))
        {
          if (v48 < (uint64_t)0xFFFFFFFF80000000)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v48 > 0x7FFFFFFF)
            goto LABEL_56;
          v101 = v46 + 1;
          v35 = *(float *)(v47 + 4 * v46);
        }
        ++v46;
      }
      while (v36 != v48);
    }
    v37 = swift_beginAccess();
    v38 = (int)v101;
    if (v101)
    {
      if (__OFADD__(v103, 1))
        goto LABEL_60;
      ++v103;
      if (((unsigned int (*)(uint64_t))v18)(v37) == (_DWORD)v38)
      {
        v39 = v18();
        v40 = (*(uint64_t (**)(void))(*v2 + 528))();
        if (*(_QWORD *)(v40 + 16))
        {
          v41 = sub_24A1489D4(v39);
          v42 = v96;
          if ((v43 & 1) != 0)
          {
            v44 = (uint64_t *)(*(_QWORD *)(v40 + 56) + 16 * v41);
            v45 = v44[1];
            v85 = *v44;
            swift_bridgeObjectRetain();
          }
          else
          {
            v45 = 0xE700000000000000;
            v85 = 0x6E776F6E6B6E55;
          }
        }
        else
        {
          v45 = 0xE700000000000000;
          v85 = 0x6E776F6E6B6E55;
          v42 = v96;
        }
        v18 = v92;
        swift_bridgeObjectRelease();
        v64 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v10, v64, v42);
        swift_bridgeObjectRetain();
        v65 = sub_24A215A74();
        v66 = sub_24A216104();
        v87 = v65;
        if (os_log_type_enabled(v65, v66))
        {
          v67 = swift_slowAlloc();
          v68 = swift_slowAlloc();
          v99 = v68;
          *(_DWORD *)v67 = v80;
          v83 = v67 + 4;
          v84 = v68;
          swift_bridgeObjectRetain();
          v98 = sub_24A148270(v85, v45, &v99);
          sub_24A216260();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v67 + 12) = 2048;
          v98 = v103;
          sub_24A216260();
          v69 = v87;
          _os_log_impl(&dword_24A12D000, v87, v66, "Ignoring repeated symbol %s, non-blank cycle count %ld", (uint8_t *)v67, 0x16u);
          v70 = v84;
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v70, -1, -1);
          v71 = v67;
          v42 = v96;
          MEMORY[0x24BD0AAAC](v71, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*(void (**)(char *, uint64_t))(v97 + 8))(v10, v42);
      }
      else
      {
        v49 = (*(uint64_t (**)(void))(*v2 + 528))();
        if (*(_QWORD *)(v49 + 16) && (v50 = sub_24A1489D4(v38), (v51 & 1) != 0))
        {
          v52 = (uint64_t *)(*(_QWORD *)(v49 + 56) + 16 * v50);
          v54 = *v52;
          v53 = v52[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v55 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v55 = sub_24A14804C(0, v55[2] + 1, 1, v55);
          v57 = v55[2];
          v56 = v55[3];
          v86 = v55;
          if (v57 >= v56 >> 1)
            v86 = sub_24A14804C((_QWORD *)(v56 > 1), v57 + 1, 1, v86);
          v58 = v86;
          v86[2] = v57 + 1;
          v59 = &v58[2 * v57];
          v59[4] = v54;
          v59[5] = v53;
          v42 = v96;
        }
        else
        {
          swift_bridgeObjectRelease();
          v60 = sub_24A1B9D90();
          v42 = v96;
          (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v94, v60, v96);
          v61 = sub_24A215A74();
          v62 = sub_24A216104();
          if (os_log_type_enabled(v61, v62))
          {
            v63 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v63 = v76;
            LODWORD(v99) = v101;
            sub_24A216260();
            _os_log_impl(&dword_24A12D000, v61, v62, "No symbol for %d", v63, 8u);
            MEMORY[0x24BD0AAAC](v63, -1, -1);
          }

          (*(void (**)(char *, uint64_t))(v97 + 8))(v94, v42);
        }
        (*(void (**)(_QWORD))(*v2 + 944))(v101);
        v18 = v92;
      }
      if (v103 < 3)
      {
        v16 = v88;
        v20 = v93;
      }
      else
      {
        v72 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v95, v72, v42);
        v73 = sub_24A215A74();
        v74 = sub_24A216104();
        if (os_log_type_enabled(v73, v74))
        {
          v75 = swift_slowAlloc();
          *(_DWORD *)v75 = v78;
          v99 = v103;
          sub_24A216260();
          *(_WORD *)(v75 + 12) = 2048;
          v99 = 3;
          sub_24A216260();
          _os_log_impl(&dword_24A12D000, v73, v74, "Escaping loop... non-blank cycle count %ld >= %ld", (uint8_t *)v75, 0x16u);
          MEMORY[0x24BD0AAAC](v75, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v96);
        v20 = v93 + 1;
        if (__OFADD__(v93, 1))
          goto LABEL_62;
        v103 = 0;
        (*(void (**)(_QWORD))(*v2 + 944))(0);
        v16 = v88;
      }
    }
    else
    {
      v103 = 0;
      v20 = v93 + 1;
      if (__OFADD__(v93, 1))
        goto LABEL_61;
      v16 = v88;
    }
    v14 = v14 + v35;
    v22 = swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(((uint64_t (*)(uint64_t))v16)(v22) + 16);
    v19 = swift_bridgeObjectRelease();
    if ((uint64_t)v20 >= v23)
    {
      v11 = v86;
      goto LABEL_54;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A1420E4(unint64_t a1, int32x2_t a2)
{
  uint64_t result;
  __int32 *v4;
  unint64_t v5;
  __int32 v6;
  int32x4_t v7;
  int32x4_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a1 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a1)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a1;
  v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    v5 = 0;
    v6 = a2.i32[0];
LABEL_9:
    v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  v6 = a2.i32[0];
  v7 = vdupq_lane_s32(a2, 0);
  v8 = (int32x4_t *)(result + 48);
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A1421D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_24A135F88(&qword_25790A458);
      v4 = (_QWORD *)sub_24A215EF4();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_24A1422C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VATransducer.deinit()
{
  uint64_t v0;

  VACTCEncoder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VACTCEncoder.deinit()
{
  uint64_t v0;

  sub_24A14C34C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  sub_24A14C388(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VATransducer.__deallocating_deinit()
{
  VACTCEncoder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1424D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = v12;
  return sub_24A14C5A8(v3, v4, v5, v6, v7);
}

uint64_t sub_24A14254C(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *((_QWORD *)a1 + 2);
  v13 = *(__int128 *)((char *)a1 + 24);
  v14 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  v12 = a1[3];
  v4 = *((_QWORD *)a1 + 8);
  v5 = *((_BYTE *)a1 + 72);
  swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 40);
  v10 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v1 + 16) = v14;
  *(_QWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 40) = v13;
  *(_QWORD *)(v1 + 56) = v3;
  *(_OWORD *)(v1 + 64) = v12;
  *(_QWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 88) = v5;
  return sub_24A14C34C(v6, v7, v8, v9, v10);
}

uint64_t sub_24A142604@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_beginAccess();
  v3 = v1[12];
  v4 = v1[13];
  v5 = v1[14];
  v6 = v1[15];
  v8 = v1[16];
  v7 = v1[17];
  result = sub_24A14C5E4(v3, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  return result;
}

uint64_t sub_24A142688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 96);
  v4 = *(_QWORD *)(v1 + 104);
  sub_24A14C640(a1, v1 + 96);
  return sub_24A14C388(v3, v4);
}

uint64_t sub_24A142710()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A142744(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 176) = a1;
  return swift_release();
}

uint64_t sub_24A142788()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1427D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 184) = a1;
  *(_QWORD *)(v2 + 192) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142820())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A14285C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142890(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 200) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1428D4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142910()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142944(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 224) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A142988()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 232);
}

uint64_t sub_24A1429B8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 232) = a1;
  return result;
}

uint64_t (*sub_24A1429F4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142A30()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 240);
}

uint64_t sub_24A142A60(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 240) = a1;
  return result;
}

uint64_t (*sub_24A142A9C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142AD8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142B0C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 248) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142B50())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142B8C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142BC0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 256) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142C04())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142C40()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142C74(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 272) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142CB8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142CF4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142D28(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 280) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142D6C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142DA8()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142DDC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 288) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142E20())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A142E60()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142E94(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 296) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142ED8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142F14()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A142F48(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 304) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A142F8C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A142FC8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 312);
}

uint64_t sub_24A142FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 312) = a1;
  return result;
}

uint64_t (*sub_24A143034())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A143070()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1430A4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 320) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1430E8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A143124()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 328);
}

uint64_t sub_24A143154(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 328) = a1;
  return result;
}

uint64_t (*sub_24A143190())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1431CC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 332);
}

uint64_t sub_24A1431FC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 332) = a1;
  return result;
}

uint64_t (*sub_24A143238())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A143274()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1432A8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 336) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1432EC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A143328()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A143370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 344) = a1;
  *(_QWORD *)(v2 + 352) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1433C0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1433FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 960))();
}

uint64_t sub_24A143414(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t *, _QWORD);
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  char **v37;
  char *v38;
  char **v39;
  char v40;
  uint64_t *v41;
  uint64_t result;
  uint64_t (*v43)(uint64_t *, _QWORD);
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint8_t *v59;
  _QWORD v60[2];
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;

  v4 = v3;
  v5 = v2;
  v64 = a1;
  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v60 - v12;
  v75 = sub_24A215690();
  v68 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v67 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 360);
    v16 = swift_bridgeObjectRetain();
    v66 = v15(v16);
    if (!v66)
    {
      swift_bridgeObjectRelease();
      v54 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v54, v7);
      v55 = sub_24A215A74();
      v56 = sub_24A216104();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = v8;
        v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v58 = 0;
        _os_log_impl(&dword_24A12D000, v55, v56, "Context encoder not initialized. Ignoring setContext", v58, 2u);
        v59 = v58;
        v8 = v57;
        MEMORY[0x24BD0AAAC](v59, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }
    v60[0] = v13;
    v62 = v8;
    v63 = v7;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 488))(1);
    v73 = v64;
    v74 = a2;
    v61 = a2;
    v71 = 44;
    v72 = 0xE100000000000000;
    v17 = (void (*)(uint64_t *, _QWORD))sub_24A14C688();
    v18 = sub_24A216284();
    v65 = *(uint64_t **)(v18 + 16);
    v60[1] = v18;
    if (!v65)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      v45 = sub_24A1B9D90();
      v46 = v62;
      v47 = v63;
      v48 = v60[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v62 + 16))(v60[0], v45, v63);
      v49 = v61;
      swift_bridgeObjectRetain();
      v50 = sub_24A215A74();
      v51 = sub_24A2160EC();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        v53 = swift_slowAlloc();
        v73 = v53;
        *(_DWORD *)v52 = 136315138;
        swift_bridgeObjectRetain();
        v71 = sub_24A148270(v64, v49, &v73);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v50, v51, "Using contextual bias: %s", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v53, -1, -1);
        MEMORY[0x24BD0AAAC](v52, -1, -1);
        swift_release();

        return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v48, v63);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
      }
    }
    v19 = 0;
    v20 = v18 + 40;
    while (1)
    {
      v73 = sub_24A215D14();
      v74 = v21;
      v71 = 95;
      v72 = 0xE100000000000000;
      v69 = 32;
      v70 = 0xE100000000000000;
      v22 = sub_24A2162A8();
      v24 = v23;
      swift_bridgeObjectRelease();
      v73 = v22;
      v74 = v24;
      v25 = v67;
      sub_24A215630();
      v26 = sub_24A21629C();
      v28 = v27;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v25, v75);
      swift_bridgeObjectRelease();
      v29 = v66;
      swift_retain();
      v30 = sub_24A14C7BC(v26, v28, v29);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        return swift_bridgeObjectRelease();
      }
      v31 = v30;
      swift_release();
      swift_bridgeObjectRelease();
      v33 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 424))(&v73);
      v34 = *v32;
      if (*v32)
      {
        v35 = v32;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v35 = v34;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v34 = sub_24A14893C(v34);
          *v35 = v34;
        }
        if ((unint64_t)v19 >= v34[2])
        {
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          result = (uint64_t)sub_24A14893C(v33);
          *v19 = result;
          if (!*(_QWORD *)(result + 16))
            goto LABEL_35;
LABEL_21:
          sub_24A13DB48();
LABEL_22:
          v17(&v73, 0);
          v43 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 472))(&v73);
          if (*v44)
            sub_24A13DB48();
          return v43(&v73, 0);
        }
        v34[(_QWORD)v19 + 4] = v31;
      }
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t *, _QWORD))v33)(&v73, 0);
      v33 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 472))(&v73);
      v38 = *v37;
      v4 = 0;
      if (*v37)
      {
        v39 = v37;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        *v39 = v38;
        if ((v40 & 1) == 0)
        {
          v38 = sub_24A148928((uint64_t)v38);
          *v39 = v38;
        }
        if ((unint64_t)v19 >= *((_QWORD *)v38 + 2))
          goto LABEL_33;
        *(_DWORD *)&v38[4 * (_QWORD)v19 + 32] = 1065353216;
      }
      ((void (*)(uint64_t *, _QWORD))v33)(&v73, 0);
      v19 = (uint64_t *)((char *)v19 + 1);
      v20 += 16;
      if (v65 == v19)
        goto LABEL_25;
    }
  }
  v17 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 424))(&v73);
  v33 = (_QWORD *)*v41;
  if (!*v41)
    goto LABEL_22;
  v19 = v41;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v19 = (uint64_t)v33;
  if ((result & 1) == 0)
    goto LABEL_34;
  if (v33[2])
    goto LABEL_21;
LABEL_35:
  __break(1u);
  return result;
}

_QWORD *sub_24A143A94(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr);
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73[6];
  _QWORD v74[6];
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char v79[8];
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v4 = v2;
  v5 = v1;
  v6 = a1;
  v7 = a1[2];
  v8 = *(_QWORD *)(v1 + 168);
  if (v7 != (*(uint64_t (**)(void))(*(_QWORD *)v8 + 248))())
  {
    __break(1u);
    goto LABEL_21;
  }
  if (!v7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = *(_QWORD *)(v6[4] + 16);
  if (v7 != (*(uint64_t (**)(void))(*(_QWORD *)v8 + 440))())
  {
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x24BEE4AF8];
    goto LABEL_24;
  }
  v9 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 312);
  v9(v73);
  sub_24A14CDC8(v73);
  v10 = sub_24A14C640((uint64_t)v73, (uint64_t)v79);
  if (!v80)
  {
    v20 = v5;
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 288))(&v63, v10);
    v21 = v67;
    if (v67)
    {
      v22 = v65;
      v23 = v66;
      v25 = v63;
      v24 = v64;
      v55[0] = v63;
      v55[1] = v64;
      v55[2] = v65;
      v56 = v66;
      v57 = v67;
      v58 = v68;
      v59 = v69;
      v60 = v70;
      v61 = v71;
      v62 = v72 & 1;
      sub_24A14678C((uint64_t)v6, (uint64_t)v55);
      result = (_QWORD *)sub_24A14C34C(v25, v24, v22, v23, v21);
      if (v2)
        return result;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v20 + 856))(result);
    }
    goto LABEL_31;
  }
  ((void (*)(_QWORD *__return_ptr, uint64_t))v9)(v74, v10);
  result = (_QWORD *)sub_24A14C640((uint64_t)v74, (uint64_t)v75);
  if (!*((_QWORD *)&v75[0] + 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v76 = v75[0];
  v77 = v75[1];
  v78 = v75[2];
  v12 = sub_24A1D7E60(1952540006, 0xE400000000000000, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v3 = v2;
  if (v2)
    goto LABEL_8;
  v13 = v12;
  sub_24A135F88(&qword_25790A448);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_24A218650;
  *(_QWORD *)(v14 + 32) = v6;
  v15 = *(void (**)(uint64_t))(*(_QWORD *)v13 + 648);
  swift_bridgeObjectRetain();
  v15(v14);
  swift_bridgeObjectRelease();
  swift_release();
  v16 = sub_24A1D7E60(0x6E695F736B73616DLL, 0xE800000000000000, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v7 = 0xE90000000000006ELL;
  (*(void (**)(void))(*(_QWORD *)v5 + 648))();
  (*(void (**)(void))(*(_QWORD *)v16 + 624))();
  swift_bridgeObjectRelease();
  swift_release();
  v17 = sub_24A1D7E60(0x695F74657366666FLL, 0xE90000000000006ELL, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v4 = 0xD000000000000010;
  (*(void (**)(void))(*(_QWORD *)v5 + 672))();
  (*(void (**)(void))(*(_QWORD *)v17 + 624))();
  swift_bridgeObjectRelease();
  swift_release();
  v18 = sub_24A1D7E60(0xD000000000000010, 0x800000024A220CB0, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  (*(void (**)(void))(*(_QWORD *)v5 + 576))();
  (*(void (**)(void))(*(_QWORD *)v18 + 624))();
  swift_bridgeObjectRelease();
  swift_release();
  v19 = sub_24A1D7E60(0xD000000000000012, 0x800000024A220CD0, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  (*(void (**)(void))(*(_QWORD *)v5 + 600))();
  (*(void (**)(void))(*(_QWORD *)v19 + 624))();
  swift_bridgeObjectRelease();
  swift_release();
  v26 = sub_24A1D7E60(0x686361635F6E6E63, 0xEC0000006E695F65, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  (*(void (**)(void))(*(_QWORD *)v5 + 624))();
  (*(void (**)(void))(*(_QWORD *)v26 + 624))();
  swift_bridgeObjectRelease();
  v27 = swift_release();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 480))(v27) & 1) == 0)
    goto LABEL_28;
  result = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 384))();
  if (!v28)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v6 = (_QWORD *)sub_24A1D7E60((uint64_t)result, v28, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v29 = swift_bridgeObjectRelease();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 408))(v29);
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v63 = MEMORY[0x24BEE4AF8];
  v30 = result[2];
  if (!v30)
    goto LABEL_23;
  swift_bridgeObjectRetain();
  for (i = 0; i != v30; ++i)
  {
    v32 = swift_bridgeObjectRetain();
    sub_24A1472A0(v32);
  }
  swift_bridgeObjectRelease_n();
  v33 = v63;
LABEL_24:
  (*(void (**)(uint64_t))(*v6 + 624))(v33);
  swift_bridgeObjectRelease();
  v34 = swift_release();
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 432))(v34);
  if (!v35)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v36 = sub_24A1D7E60((uint64_t)result, v35, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v37 = swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_8:
    v84 = v76;
    sub_24A14C498((uint64_t)&v84);
    v85 = v77;
    sub_24A14C4C0((uint64_t)&v85);
    v86 = *((_QWORD *)&v77 + 1);
    sub_24A14C4C0((uint64_t)&v86);
    swift_release();
    return (_QWORD *)swift_release();
  }
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 456))(v37);
  if (!result)
  {
LABEL_36:
    __break(1u);
    return result;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 624))();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_28:
  v38 = sub_24A1926B0();
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 816))(v38);
  v41 = sub_24A1D7F90(v39, v40, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v42 = swift_bridgeObjectRelease();
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 744))(v42);
  result = (_QWORD *)swift_release();
  if (!*(_QWORD *)(v43 + 16))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v44 = *(_QWORD *)(v43 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 800))(v44);
  v45 = sub_24A1D7F90(v4 + 1, 0x800000024A220CF0, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 720))(v45);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 584))(v46);
  v47 = sub_24A1D7F90(v4 + 3, 0x800000024A220D10, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 720))(v47);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 608))(v48);
  v49 = sub_24A1D7F90(0x686361635F6E6E63, 0xED000074756F5F65, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 720))(v49);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 632))(v50);
  v51 = sub_24A1D7F90(0x756F5F736B73616DLL, v7 + 6, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 720))(v51);
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 656))(v52);
  v53 = sub_24A1D7F90(0x6F5F74657366666FLL, 0xEA00000000007475, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 720))(v53);
  swift_release();
  v20 = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 680))(v54);
  v81 = v76;
  sub_24A14C498((uint64_t)&v81);
  v82 = v77;
  sub_24A14C4C0((uint64_t)&v82);
  v83 = *((_QWORD *)&v77 + 1);
  sub_24A14C4C0((uint64_t)&v83);
  swift_release();
  result = (_QWORD *)swift_release();
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v20 + 856))(result);
}

uint64_t sub_24A1443FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  int64_t v19;
  char *v20;
  uint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v6 = sub_24A145FA8();
  v38 = a1;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD **)(v3 + 160);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v8) + 0x80))(v6);
  if (!result)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  v11 = result;
  v33 = v3;
  v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (result >= 1 && v7 != 0)
  {
    v16 = 0;
    v36 = result;
    v37 = v7;
    while (1)
    {
      v17 = __OFADD__(v16, v11) ? ((v16 + v11) >> 63) ^ 0x8000000000000000 : v16 + v11;
      v18 = *(uint64_t (**)(void))((*v9 & *v8) + 0x88);
      result = v18();
      if (__OFADD__(v16, result))
        break;
      v40 = v12;
      if (v7 >= v16 + result)
        v19 = v16 + result;
      else
        v19 = v7;
      if (v19 < v16)
        goto LABEL_42;
      if (v16 < 0)
        goto LABEL_43;
      v39 = v17;
      v20 = (char *)MEMORY[0x24BEE4AF8];
      v21 = v19 - v16;
      if (v19 != v16)
      {
        v41 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        result = sub_24A148BB8(0, v21 & ~(v21 >> 63), 0);
        if (v21 < 0)
          goto LABEL_44;
        v20 = (char *)v41;
        result = v38;
        while (v19 != v16)
        {
          v22 = *(_WORD *)(result + 2 * v16 + 32);
          v24 = *(_QWORD *)(v41 + 16);
          v23 = *(_QWORD *)(v41 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_24A148BB8(v23 > 1, v24 + 1, 1);
            result = v38;
          }
          *(_QWORD *)(v41 + 16) = v24 + 1;
          *(float *)(v41 + 4 * v24 + 32) = (float)v22;
          if (v19 == ++v16)
          {
            result = swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        __break(1u);
        break;
      }
LABEL_26:
      v25 = *((_QWORD *)v20 + 2);
      v26 = ((uint64_t (*)(uint64_t))v18)(result);
      v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v12 = v40;
      v11 = v36;
      if (v25 < v26)
      {
        do
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = sub_24A147E34(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
          v28 = *((_QWORD *)v20 + 2);
          v27 = *((_QWORD *)v20 + 3);
          v29 = v28 + 1;
          if (v28 >= v27 >> 1)
            v20 = sub_24A147E34((char *)(v27 > 1), v28 + 1, 1, v20);
          *((_QWORD *)v20 + 2) = v29;
          *(_DWORD *)&v20[4 * v28 + 32] = 0;
        }
        while (v29 < v18());
      }
      v30 = (*(uint64_t (**)(char *))((*v9 & *v8) + 0x170))(v20);
      swift_bridgeObjectRelease();
      v7 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_24A148158(0, v40[2] + 1, 1, v40, &qword_25790A450, &qword_25790A458);
      v32 = v12[2];
      v31 = v12[3];
      if (v32 >= v31 >> 1)
        v12 = sub_24A148158((_QWORD *)(v31 > 1), v32 + 1, 1, v12, &qword_25790A450, &qword_25790A458);
      v12[2] = v32 + 1;
      v12[v32 + 4] = v30;
      v16 = v39;
      if (v39 >= v37)
        goto LABEL_7;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_7:
  v14 = v33;
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)v33 + 880))(v12, a2, a3);
  if (!v4)
    v14 = v15;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_24A144780(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, float), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  float v36;
  _QWORD *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, float);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v65 = a3;
  v66 = a2;
  v6 = sub_24A215690();
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = MEMORY[0x24BEE4AF8];
  v67 = *(_QWORD *)(a1 + 16);
  v69 = v3;
  v9 = *(_QWORD *)(v3 + 168);
  v10 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 248);
  v11 = ((uint64_t (*)(uint64_t))v10)(v7);
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 296))();
  v13 = v11 - v12;
  if (__OFSUB__(v11, v12))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (!v13)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  v71 = v4;
  v14 = v67;
  if (v13 >= 1 && v67 != 0)
  {
    v17 = 0;
    v61 = a1 + 32;
    v18 = 0.0;
    v68 = v13;
    while (1)
    {
      if (__OFADD__(v17, v13))
        v19 = ((v17 + v13) >> 63) ^ 0x8000000000000000;
      else
        v19 = v17 + v13;
      v20 = v10();
      if (__OFADD__(v17, v20))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v70 = v19;
      if (v14 >= v17 + v20)
        v21 = v17 + v20;
      else
        v21 = v14;
      if (v21 < v17)
        goto LABEL_44;
      if (v17 < 0)
        goto LABEL_45;
      sub_24A2165C0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v22 = swift_dynamicCastClass();
      if (!v22)
      {
        swift_bridgeObjectRelease();
        v22 = MEMORY[0x24BEE4AF8];
      }
      v23 = *(_QWORD *)(v22 + 16);
      swift_release();
      if (v23 == v21 - v17)
      {
        v24 = (_QWORD *)swift_dynamicCastClass();
        if (!v24)
        {
          swift_bridgeObjectRelease();
          v24 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v24 = (_QWORD *)sub_24A14A7E4(a1, v61, v17, (2 * v21) | 1);
      }
      v25 = swift_bridgeObjectRelease();
      v26 = v24[2];
      if (v26 < ((uint64_t (*)(uint64_t))v10)(v25))
        break;
LABEL_35:
      v34 = v71;
      v35 = sub_24A143A94(v24);
      v71 = v34;
      if (v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v24;
      }
      v37 = v35;
      v38 = v36;
      swift_bridgeObjectRelease();
      v18 = v18 + v38;
      if (v37[2])
      {
        v39 = swift_bridgeObjectRetain();
        sub_24A1473E4(v39);
        v76 = (uint64_t)v37;
        sub_24A135F88(&qword_257909948);
        sub_24A14C9E8();
        v40 = sub_24A215C60();
        v42 = v41;
        swift_bridgeObjectRelease();
        v76 = v40;
        v77 = v42;
        v74 = 8492770;
        v75 = 0xA300000000000000;
        v72 = 32;
        v73 = 0xE100000000000000;
        sub_24A14C688();
        v43 = sub_24A2162A8();
        v45 = v44;
        swift_bridgeObjectRelease();
        v76 = v43;
        v77 = v45;
        v46 = v62;
        sub_24A215630();
        v14 = v67;
        v47 = sub_24A21629C();
        v49 = v48;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v46, v64);
        swift_bridgeObjectRelease();
        v66(v47, v49, 0, v18);
      }
      swift_bridgeObjectRelease();
      v13 = v68;
      v17 = v70;
      if (v70 >= v14)
      {
        v16 = v78;
        goto LABEL_41;
      }
    }
    v27 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 440);
    while (1)
    {
      v28 = v27();
      if (v28 < 0)
        goto LABEL_48;
      v29 = v28;
      if (v28)
      {
        v30 = sub_24A215EF4();
        *(_QWORD *)(v30 + 16) = v29;
        memset_pattern16((void *)(v30 + 32), &unk_24A219990, 4 * v29);
      }
      else
      {
        v30 = MEMORY[0x24BEE4AF8];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = sub_24A148158(0, v24[2] + 1, 1, v24, &qword_25790A450, &qword_25790A458);
      v32 = v24[2];
      v31 = v24[3];
      v33 = v32 + 1;
      if (v32 >= v31 >> 1)
        v24 = sub_24A148158((_QWORD *)(v31 > 1), v32 + 1, 1, v24, &qword_25790A450, &qword_25790A458);
      v24[2] = v33;
      v24[v32 + 4] = v30;
      if (v33 >= v10())
        goto LABEL_35;
    }
  }
  v18 = 0.0;
  v16 = MEMORY[0x24BEE4AF8];
LABEL_41:
  v76 = v16;
  sub_24A135F88(&qword_257909948);
  sub_24A14C9E8();
  v50 = sub_24A215C60();
  v52 = v51;
  swift_bridgeObjectRelease();
  v76 = v50;
  v77 = v52;
  v74 = 8492770;
  v75 = 0xA300000000000000;
  v72 = 32;
  v73 = 0xE100000000000000;
  sub_24A14C688();
  v53 = sub_24A2162A8();
  v55 = v54;
  swift_bridgeObjectRelease();
  v76 = v53;
  v77 = v55;
  v56 = v62;
  sub_24A215630();
  v24 = (_QWORD *)sub_24A21629C();
  v58 = v57;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v64);
  swift_bridgeObjectRelease();
  v66((uint64_t)v24, v58, 1, v18);
  (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v69 + 344))(0, 0xE000000000000000);
  return (uint64_t)v24;
}

uint64_t sub_24A144DC4()
{
  return sub_24A145FA8();
}

void sub_24A144DE8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  void (*v17)(uint64_t *, _QWORD);
  float *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t *, _QWORD);
  _QWORD *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v4 = v2;
  v7 = sub_24A215690();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24A143A94(a1);
  if (!v3)
  {
    v14 = (uint64_t)v11;
    v15 = v13;
    v16 = v12;
    v17 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 760))(&v64);
    *v18 = v15 + *v18;
    v17(&v64, 0);
    v19 = *(_QWORD *)(v14 + 16);
    v58 = v7;
    v59 = v16;
    if (v19)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v4 + 776))(0);
      v20 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 736);
      swift_bridgeObjectRetain();
      v21 = v20(&v64);
      v57 = a2;
      v22 = (uint64_t (*)(uint64_t *, _QWORD))v21;
      sub_24A1473E4(v14);
      v23 = v22(&v64, 0);
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 720))(v23);
      sub_24A135F88(&qword_257909948);
      sub_24A14C9E8();
      v24 = sub_24A215C60();
      v26 = v25;
      swift_bridgeObjectRelease();
      v64 = v24;
      v65 = v26;
      v62 = 8492770;
      v63 = 0xA300000000000000;
      v60 = 32;
      v61 = 0xE100000000000000;
      sub_24A14C688();
      v27 = sub_24A2162A8();
      v56 = 0;
      v29 = v28;
      swift_bridgeObjectRelease();
      v64 = v27;
      v65 = v29;
      sub_24A215630();
      sub_24A21629C();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v58);
      swift_bridgeObjectRelease();
      v30 = sub_24A215D14();
      v32 = v31;
      swift_bridgeObjectRelease();
      v64 = v30;
      v65 = v32;
      v62 = 0x696D72657465645CLL;
      v63 = 0xEB0000000072656ELL;
      v60 = 0;
      v61 = 0xE000000000000000;
      a2 = v57;
      v33 = sub_24A2162A8();
      v35 = v34;
      swift_bridgeObjectRelease();
      v36 = swift_bridgeObjectRelease();
      v37 = 0;
    }
    else
    {
      v38 = swift_bridgeObjectRelease();
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 720);
      v40 = *(_QWORD *)(v39(v38) + 16);
      v36 = swift_bridgeObjectRelease();
      v35 = 0xE000000000000000;
      if (v40)
      {
        v56 = 0;
        v57 = a2;
        v64 = v39(v36);
        sub_24A135F88(&qword_257909948);
        sub_24A14C9E8();
        v41 = sub_24A215C60();
        v43 = v42;
        swift_bridgeObjectRelease();
        v64 = v41;
        v65 = v43;
        v62 = 8492770;
        v63 = 0xA300000000000000;
        v60 = 32;
        v61 = 0xE100000000000000;
        sub_24A14C688();
        v44 = sub_24A2162A8();
        v46 = v45;
        swift_bridgeObjectRelease();
        v64 = v44;
        v65 = v46;
        sub_24A215630();
        sub_24A21629C();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v58);
        swift_bridgeObjectRelease();
        v47 = sub_24A215D14();
        v49 = v48;
        swift_bridgeObjectRelease();
        v64 = v47;
        v65 = v49;
        v62 = 0x696D72657465645CLL;
        v63 = 0xEB0000000072656ELL;
        v60 = 0;
        v61 = 0xE000000000000000;
        v33 = sub_24A2162A8();
        v35 = v50;
        v36 = swift_bridgeObjectRelease();
        v51 = HIBYTE(v35) & 0xF;
        if ((v35 & 0x2000000000000000) == 0)
          v51 = v33 & 0xFFFFFFFFFFFFLL;
        if (v51)
        {
          (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v4 + 344))(0, 0xE000000000000000);
          v52 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 736))(&v64);
          *v53 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRelease();
          v54 = v52(&v64, 0);
          v36 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v4 + 752))(v54, 0.0);
          v37 = 1;
        }
        else
        {
          v37 = 0;
        }
        a2 = v57;
      }
      else
      {
        v37 = 0;
        v33 = 0;
      }
    }
    v55 = (*(float (**)(uint64_t))(*(_QWORD *)v4 + 744))(v36);
    *(_QWORD *)a2 = v33;
    *(_QWORD *)(a2 + 8) = v35;
    *(float *)(a2 + 16) = v55;
    *(_BYTE *)(a2 + 20) = v37;
    *(_QWORD *)(a2 + 24) = v59;
  }
}

float sub_24A14534C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = sub_24A215690();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 720))(v4);
  sub_24A135F88(&qword_257909948);
  sub_24A14C9E8();
  v7 = sub_24A215C60();
  v9 = v8;
  swift_bridgeObjectRelease();
  v17 = v7;
  v18 = v9;
  v16[4] = 8492770;
  v16[5] = 0xA300000000000000;
  v16[2] = 32;
  v16[3] = 0xE100000000000000;
  sub_24A14C688();
  v10 = sub_24A2162A8();
  v12 = v11;
  swift_bridgeObjectRelease();
  v17 = v10;
  v18 = v12;
  sub_24A215630();
  sub_24A21629C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v13 = swift_bridgeObjectRelease();
  v14 = (*(float (**)(uint64_t))(*(_QWORD *)v1 + 744))(v13);
  sub_24A145FA8();
  return v14;
}

float VACTCEncoder.fbankSil.getter()
{
  return -87.337;
}

uint64_t sub_24A145518(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_24A1401E0(a1, a2);
  return v4;
}

uint64_t sub_24A14556C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t *, _QWORD);
  uint64_t *v81;
  uint64_t *v82;
  char isUniquelyReferenced_nonNull_native;
  void (*v84)(uint64_t *, _QWORD);
  uint64_t *v85;
  uint64_t *v86;
  char v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109[8];
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_24A215C84();
  if (v3)
    return result;
  v12 = result;
  v13 = v11;
  v115 = a2;
  v116 = v9;
  v117 = v7;
  v118 = v6;
  v129 = 10;
  v130 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](result);
  v111 = &v129;
  swift_bridgeObjectRetain();
  v14 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A14D1E0, (uint64_t)v109, v12, v13);
  v122 = 0;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  v114 = a1;
  v123 = v2;
  v121 = v15;
  if (!v15)
  {
LABEL_93:
    swift_bridgeObjectRelease();
    v98 = v117;
    v97 = v118;
    v100 = v115;
    v99 = v116;
    v101 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v99, v101, v97);
    v102 = v123;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v103 = sub_24A215A74();
    v104 = sub_24A2160F8();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = v100;
      v106 = swift_slowAlloc();
      v107 = swift_slowAlloc();
      v129 = v107;
      *(_DWORD *)v106 = 134218242;
      v108 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v102 + 528))() + 16);
      swift_release();
      swift_bridgeObjectRelease();
      v131 = v108;
      sub_24A216260();
      swift_release();
      *(_WORD *)(v106 + 12) = 2080;
      swift_bridgeObjectRetain();
      v131 = sub_24A148270(v114, v105, &v129);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v103, v104, "Loaded %ld symbols from %s", (uint8_t *)v106, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v107, -1, -1);
      MEMORY[0x24BD0AAAC](v106, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v116, v118);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
      return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v99, v97);
    }
  }
  v16 = 0;
  v119 = v14;
  v120 = v14 + 32;
  v112 = (char *)&v129 + 2;
  v113 = (char *)&v129 + 3;
  while (2)
  {
    if (v16 >= *(_QWORD *)(v14 + 16))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    v124 = v16;
    v17 = (unint64_t *)(v120 + 32 * v16);
    v18 = *v17;
    v19 = v17[1] >> 14;
    if (v19 == *v17 >> 14)
    {
      v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_32;
    }
    v21 = v17[3];
    v128 = v17[2];
    swift_bridgeObjectRetain_n();
    v22 = v18;
    v23 = v18;
    v24 = v18;
    v127 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v125 = v21;
    do
    {
      while (1)
      {
        if (sub_24A21623C() == 9 && v27 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          break;
        }
        v28 = sub_24A21659C();
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
          break;
        v22 = sub_24A216218();
        if (v19 == v22 >> 14)
          goto LABEL_23;
      }
      if (v23 >> 14 != v22 >> 14)
      {
        if (v22 >> 14 < v23 >> 14)
          goto LABEL_103;
        v29 = sub_24A216248();
        v31 = v30;
        v33 = v32;
        v126 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v35 = v127;
        else
          v35 = sub_24A147F40(0, v127[2] + 1, 1, v127);
        v37 = v35[2];
        v36 = v35[3];
        if (v37 >= v36 >> 1)
          v35 = sub_24A147F40((_QWORD *)(v36 > 1), v37 + 1, 1, v35);
        v35[2] = v37 + 1;
        v127 = v35;
        v25 = &v35[4 * v37];
        v25[4] = v29;
        v25[5] = v31;
        v26 = v126;
        v25[6] = v33;
        v25[7] = v26;
      }
      v22 = sub_24A216218();
      v23 = v22;
      v24 = v22;
    }
    while (v19 != v22 >> 14);
LABEL_23:
    if (v19 == v23 >> 14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    if (v19 < v24 >> 14)
      goto LABEL_103;
    v38 = sub_24A216248();
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v45 = v127;
    else
      v45 = sub_24A147F40(0, v127[2] + 1, 1, v127);
    v47 = v45[2];
    v46 = v45[3];
    if (v47 >= v46 >> 1)
      v45 = sub_24A147F40((_QWORD *)(v46 > 1), v47 + 1, 1, v45);
    v45[2] = v47 + 1;
    v127 = v45;
    v48 = &v45[4 * v47];
    v48[4] = v38;
    v48[5] = v40;
    v48[6] = v42;
    v48[7] = v44;
LABEL_31:
    swift_bridgeObjectRelease();
    v20 = v127;
LABEL_32:
    if (v20[2] < 2uLL)
      goto LABEL_98;
    v50 = v20[8];
    v49 = v20[9];
    v51 = v20[10];
    v52 = v20[11];
    v53 = v20;
    swift_bridgeObjectRetain();
    v54 = MEMORY[0x24BD095F4](v50, v49, v51, v52);
    v56 = v55;
    swift_bridgeObjectRelease();
    v57 = HIBYTE(v56) & 0xF;
    v58 = v54 & 0xFFFFFFFFFFFFLL;
    if ((v56 & 0x2000000000000000) != 0)
      v59 = HIBYTE(v56) & 0xF;
    else
      v59 = v54 & 0xFFFFFFFFFFFFLL;
    if (!v59)
    {
      swift_bridgeObjectRelease();
      v69 = 0;
      v68 = 1;
      goto LABEL_69;
    }
    if ((v56 & 0x1000000000000000) != 0)
    {
      v62 = (uint64_t)sub_24A149198(v54, v56, 10);
      LOBYTE(v54) = v96;
      goto LABEL_66;
    }
    if ((v56 & 0x2000000000000000) == 0)
    {
      if ((v54 & 0x1000000000000000) != 0)
        v60 = (unsigned __int8 *)((v56 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v60 = (unsigned __int8 *)sub_24A216350();
      v61 = v122;
      v62 = (uint64_t)sub_24A14927C(v60, v58, 10);
      v122 = v61;
      LOBYTE(v54) = v63 & 1;
LABEL_66:
      swift_bridgeObjectRelease();
      v68 = v54 & 1;
      if ((v54 & 1) != 0)
        v69 = 0;
      else
        v69 = v62;
LABEL_69:
      v70 = v123;
      v71 = v124;
      v72 = v53;
      if (!v53[2])
        goto LABEL_99;
      v73 = v53[4];
      v74 = v53[5];
      v75 = v53[6];
      v76 = v72[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v77 = MEMORY[0x24BD095F4](v73, v74, v75, v76);
      v79 = v78;
      swift_bridgeObjectRelease();
      if ((v68 & 1) != 0)
        goto LABEL_102;
      v16 = v71 + 1;
      v80 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v70 + 568))(&v129);
      v82 = v81;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v131 = *v82;
      *v82 = 0x8000000000000000;
      sub_24A149AF4(v69, v77, v79, isUniquelyReferenced_nonNull_native);
      *v82 = v131;
      swift_bridgeObjectRelease();
      v80(&v129, 0);
      v84 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v70 + 544))(&v129);
      v86 = v85;
      v87 = swift_isUniquelyReferenced_nonNull_native();
      v131 = *v86;
      *v86 = 0x8000000000000000;
      sub_24A1499B4(v77, v79, v69, v87);
      *v86 = v131;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v84(&v129, 0);
      v14 = v119;
      if (v16 == v121)
        goto LABEL_93;
      continue;
    }
    break;
  }
  v129 = v54;
  v130 = v56 & 0xFFFFFFFFFFFFFFLL;
  if (v54 != 43)
  {
    if (v54 != 45)
    {
      if (v57 && (v54 - 48) <= 9u)
      {
        v62 = (v54 - 48);
        if (v57 == 1)
          goto LABEL_65;
        if ((BYTE1(v54) - 48) <= 9u)
        {
          v62 = 10 * (v54 - 48) + (BYTE1(v54) - 48);
          v88 = v57 - 2;
          if (v88)
          {
            v89 = (unsigned __int8 *)v112;
            while (1)
            {
              v90 = *v89 - 48;
              if (v90 > 9)
                goto LABEL_63;
              v91 = 10 * v62;
              if ((unsigned __int128)(v62 * (__int128)10) >> 64 != (10 * v62) >> 63)
                goto LABEL_63;
              v62 = v91 + v90;
              if (__OFADD__(v91, v90))
                goto LABEL_63;
              LOBYTE(v54) = 0;
              ++v89;
              if (!--v88)
                goto LABEL_66;
            }
          }
          goto LABEL_65;
        }
      }
LABEL_63:
      v62 = 0;
      LOBYTE(v54) = 1;
      goto LABEL_66;
    }
    if (v57)
    {
      if (v57 != 1 && (BYTE1(v54) - 48) <= 9u)
      {
        if (v57 == 2)
        {
          LOBYTE(v54) = 0;
          v62 = -(uint64_t)(BYTE1(v54) - 48);
          goto LABEL_66;
        }
        if ((BYTE2(v54) - 48) <= 9u)
        {
          v62 = -10 * (BYTE1(v54) - 48) - (BYTE2(v54) - 48);
          v92 = v57 - 3;
          if (v92)
          {
            v93 = (unsigned __int8 *)v113;
            while (1)
            {
              v94 = *v93 - 48;
              if (v94 > 9)
                goto LABEL_63;
              v95 = 10 * v62;
              if ((unsigned __int128)(v62 * (__int128)10) >> 64 != (10 * v62) >> 63)
                goto LABEL_63;
              v62 = v95 - v94;
              if (__OFSUB__(v95, v94))
                goto LABEL_63;
              LOBYTE(v54) = 0;
              ++v93;
              if (!--v92)
                goto LABEL_66;
            }
          }
LABEL_65:
          LOBYTE(v54) = 0;
          goto LABEL_66;
        }
      }
      goto LABEL_63;
    }
    goto LABEL_100;
  }
  if (v57)
  {
    if (v57 != 1 && (BYTE1(v54) - 48) <= 9u)
    {
      v62 = (BYTE1(v54) - 48);
      if (v57 == 2)
        goto LABEL_65;
      if ((BYTE2(v54) - 48) <= 9u)
      {
        v62 = 10 * (BYTE1(v54) - 48) + (BYTE2(v54) - 48);
        v64 = v57 - 3;
        if (v64)
        {
          v65 = (unsigned __int8 *)v113;
          while (1)
          {
            v66 = *v65 - 48;
            if (v66 > 9)
              goto LABEL_63;
            v67 = 10 * v62;
            if ((unsigned __int128)(v62 * (__int128)10) >> 64 != (10 * v62) >> 63)
              goto LABEL_63;
            v62 = v67 + v66;
            if (__OFADD__(v67, v66))
              goto LABEL_63;
            LOBYTE(v54) = 0;
            ++v65;
            if (!--v64)
              goto LABEL_66;
          }
        }
        goto LABEL_65;
      }
    }
    goto LABEL_63;
  }
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  LODWORD(v111) = 0;
  v110 = 754;
  v109[0] = 2;
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A145FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(_BYTE *);
  uint64_t v9;
  float v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(_BYTE *, _QWORD);
  void (*v17)(_BYTE *, _QWORD);
  void (*v18)(_BYTE *, _QWORD);
  void (*v19)(_BYTE *, _QWORD);
  _BYTE v20[32];

  v1 = v0;
  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 728))(MEMORY[0x24BEE4AF8]);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v0 + 752))(v2, 0.0);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 704))(-1);
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 648);
  v5 = *(_QWORD *)(v4(v3) + 16);
  v6 = swift_bridgeObjectRelease();
  if (v5)
  {
    v7 = 0;
    v8 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 664);
    while (1)
    {
      v9 = *(_QWORD *)(v4(v6) + 16);
      swift_bridgeObjectRelease();
      v10 = (uint64_t)v7 >= v9 - 8 ? 1.0 : 0.0;
      v11 = (uint64_t (*)(_BYTE *, _QWORD))v8(v20);
      v13 = v12;
      v14 = *v12;
      result = swift_isUniquelyReferenced_nonNull_native();
      *v13 = v14;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_24A148928(v14);
        v14 = result;
        *v13 = result;
      }
      if (v7 >= *(_QWORD *)(v14 + 16))
        break;
      *(float *)(v14 + 4 * v7 + 32) = v10;
      v6 = v11(v20, 0);
      if (v5 == ++v7)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    v16 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 640))(v20);
    sub_24A13DB48();
    v16(v20, 0);
    v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 592))(v20);
    sub_24A13DB48();
    v17(v20, 0);
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 616))(v20);
    sub_24A13DB48();
    v18(v20, 0);
    v19 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 688))(v20);
    sub_24A13DB48();
    v19(v20, 0);
    return (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v1 + 344))(0, 0xE000000000000000);
  }
  return result;
}

uint64_t static VACTCEncoder.build(config:debug:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  v6 = v5;
  v7 = swift_bridgeObjectRelease();
  if (v6 && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 360))(v7), v9 = v8, swift_bridgeObjectRelease(), v9))
  {
    type metadata accessor for VATransducer();
    swift_allocObject();
    v10 = swift_retain();
    v11 = sub_24A14BFB4(v10);
    if (!v2)
      return v11;
  }
  else
  {
    type metadata accessor for VACTCEncoder();
    v9 = swift_allocObject();
    v12 = swift_retain();
    sub_24A1401E0(v12, a2 & 1);
  }
  return v9;
}

_QWORD *sub_24A146278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *result;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v2 = v0;
  v56 = sub_24A215A8C();
  v3 = *(_QWORD *)(v56 - 8);
  v4 = MEMORY[0x24BDAC7A8](v56);
  v6 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 792))(v4);
  v9 = v7;
  v59 = *(_QWORD *)(v7 + 16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v54 = v6;
  v48[1] = v1;
  v60 = 0;
  v10 = 0;
  v57 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 528);
  v58 = v7 + 32;
  v55 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v11 = 0.0;
  *(_QWORD *)&v8 = 136315138;
  v51 = v8;
  v49 = v3;
  v50 = MEMORY[0x24BEE4AD8] + 8;
  v53 = v7;
  while (v10 < *(_QWORD *)(v9 + 16))
  {
    v12 = *(_QWORD *)(v58 + 8 * v10);
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      goto LABEL_52;
    v14 = *(float *)(v12 + 32);
    v15 = v13 - 1;
    if (v15)
    {
      v17 = 0;
      v16 = 0;
      v18 = v12 + 36;
      do
      {
        v19 = *(float *)(v18 + 4 * v17);
        if (v14 < v19)
          v16 = v17 + 1;
        v20 = v17 + 1;
        if (v14 < v19)
          v14 = *(float *)(v18 + 4 * v17);
        ++v17;
      }
      while (v15 != v20);
    }
    else
    {
      v16 = 0;
    }
    v21 = v57();
    if (*(_QWORD *)(v21 + 16) && (v22 = sub_24A1489D4(v16), (v23 & 1) != 0))
    {
      v24 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v22);
      v25 = *v24;
      v26 = v24[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v26)
      {
        if (v25 == 0x3E6B6E616C623CLL && v26 == 0xE700000000000000)
        {
          v28 = 0;
          v26 = 0xE700000000000000;
          v25 = 0x3E6B6E616C623CLL;
LABEL_29:
          v29 = v60;
          goto LABEL_30;
        }
        v28 = 0;
        if ((sub_24A21659C() & 1) != 0)
          goto LABEL_29;
        v29 = v60;
        if (v60)
          goto LABEL_30;
LABEL_27:
        v29 = mach_absolute_time();
        goto LABEL_30;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = 0;
    }
    v29 = v60;
    v26 = 0;
    v28 = 1;
    if (!v60)
      goto LABEL_27;
LABEL_30:
    v60 = v29;
    if (v16 < 1 || v16 == (*(uint64_t (**)(void))(*(_QWORD *)v2 + 696))())
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 336))();
      if ((v28 & 1) != 0)
        goto LABEL_53;
      if (v30 == v25 && v26 == v31)
      {
        swift_bridgeObjectRelease();
LABEL_44:
        v38 = sub_24A1B9D90();
        v39 = v54;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v54, v38, v56);
        swift_bridgeObjectRetain();
        v40 = sub_24A215A74();
        v41 = v3;
        v42 = sub_24A2160EC();
        if (os_log_type_enabled(v40, v42))
        {
          v43 = swift_slowAlloc();
          v52 = swift_slowAlloc();
          v63 = v52;
          *(_DWORD *)v43 = v51;
          v61 = v25;
          v62 = v26;
          swift_bridgeObjectRetain();
          sub_24A135F88(&qword_257909980);
          v44 = sub_24A215D08();
          *(_QWORD *)(v43 + 4) = sub_24A148270(v44, v45, &v63);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24A12D000, v40, v42, "Skipping repeated fragment \"%s\"", (uint8_t *)v43, 0xCu);
          v46 = v52;
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v46, -1, -1);
          MEMORY[0x24BD0AAAC](v43, -1, -1);

          v3 = v49;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v56);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v56);
          v3 = v41;
        }
        v9 = v53;
        goto LABEL_4;
      }
      v33 = sub_24A21659C();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        goto LABEL_44;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v34 = v55;
      else
        v34 = sub_24A14804C(0, v55[2] + 1, 1, v55);
      v36 = v34[2];
      v35 = v34[3];
      if (v36 >= v35 >> 1)
        v34 = sub_24A14804C((_QWORD *)(v35 > 1), v36 + 1, 1, v34);
      v34[2] = v36 + 1;
      v55 = v34;
      v37 = &v34[2 * v36];
      v37[4] = v25;
      v37[5] = v26;
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v2 + 344))(v25, v26);
    }
LABEL_4:
    ++v10;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 704))(v16);
    v11 = v11 - v14;
    if (v10 == v59)
    {
      swift_bridgeObjectRelease();
      return v55;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  result = (_QWORD *)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_24A14678C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t (*v9)(_BYTE *);
  uint64_t v10;
  void (*v11)(_BYTE *, _QWORD);
  uint64_t (*v12)(_BYTE *);
  void (*v13)(_BYTE *, _QWORD);
  uint64_t (*v14)(_BYTE *);
  void (*v15)(_BYTE *, _QWORD);
  uint64_t (*v16)(_BYTE *);
  void (*v17)(_BYTE *, _QWORD);
  uint64_t (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t (*v29)(_BYTE *);
  uint64_t v30;
  uint64_t v31;
  int32x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  void (*v39)(_BYTE *, _QWORD);
  void (*v40)(_BYTE *, _QWORD);
  void (*v41)(_BYTE *, _QWORD);
  uint64_t (*v42)(_BYTE *, _QWORD);
  uint64_t (*v43)(_BYTE *);
  uint64_t (*v44)(_BYTE *);
  uint64_t (*v45)(_BYTE *);
  uint64_t (*v46)(_BYTE *);
  uint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57[21];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[176];
  int v63;

  v4 = v2;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(a2 + 24);
  sub_24A1C3A28();
  sub_24A1C3A40();
  result = sub_24A1C3A48((uint64_t)&v49);
  if (v3)
    return result;
  if (*(_QWORD *)(a1 + 16) && *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    MEMORY[0x24BDAC7A8](result);
    sub_24A1C378C((uint64_t (*)(void))sub_24A14D358);
  }
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v50);
  v47 = v6;
  v9 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 664);
  v10 = v9(v48);
  v63 = v7;
  v11 = (void (*)(_BYTE *, _QWORD))v10;
  MEMORY[0x24BDAC7A8](v10);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14CDFC);
  v11(v48, 0);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v51);
  v46 = v9;
  v12 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 688);
  v13 = (void (*)(_BYTE *, _QWORD))v12(v48);
  MEMORY[0x24BDAC7A8](v13);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D344);
  v13(v48, 0);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v52);
  v45 = v12;
  v14 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 592);
  v15 = (void (*)(_BYTE *, _QWORD))v14(v48);
  MEMORY[0x24BDAC7A8](v15);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D344);
  v15(v48, 0);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v53);
  v44 = v14;
  v16 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 616);
  v17 = (void (*)(_BYTE *, _QWORD))v16(v48);
  MEMORY[0x24BDAC7A8](v17);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D344);
  v17(v48, 0);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v54);
  v43 = *(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 640);
  v18 = (uint64_t (*)(_BYTE *, _QWORD))v43(v48);
  MEMORY[0x24BDAC7A8](v18);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D344);
  v19 = v18(v48, 0);
  v20 = v4;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 480))(v19) & 1) != 0)
  {
    result = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 384))();
    if (v21)
    {
      sub_24A1C3A40();
      sub_24A1C3A48((uint64_t)&v55);
      v22 = swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 432))(v22);
      if (v23)
      {
        sub_24A1C3A40();
        sub_24A1C3A48((uint64_t)&v56);
        v25 = v4;
        v24 = swift_bridgeObjectRelease();
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 408))(v24);
        if (result)
        {
          if (*(_QWORD *)(result + 16))
          {
            if (*(_QWORD *)(*(_QWORD *)(result + 32) + 16))
            {
              MEMORY[0x24BDAC7A8](result);
              sub_24A1C378C((uint64_t (*)(void))sub_24A14D358);
            }
            swift_bridgeObjectRelease();
            v25 = v4;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v25 + 472))(v48);
          if (*v26)
          {
            v27 = (void (*)(_BYTE *, _QWORD))result;
            MEMORY[0x24BDAC7A8](result);
            sub_24A1C378C((uint64_t (*)(void))sub_24A14D344);
            v27(v48, 0);
            v20 = v4;
            goto LABEL_19;
          }
LABEL_25:
          __break(1u);
          return result;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_19:
  (*(void (**)(void))(*(_QWORD *)v20 + 816))();
  sub_24A1C3A34();
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)v57);
  swift_bridgeObjectRelease();
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v58);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v59);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v60);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v61);
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)v62);
  v28 = sub_24A1C399C(v47);
  v29 = v16;
  v30 = v20;
  v31 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 792))(v28) + 16);
  swift_bridgeObjectRelease();
  if (!v31)
  {
    v33 = v57[3];
    v32.i32[0] = 0;
    v34 = sub_24A1420E4(v57[2], v32);
    v35 = sub_24A1421D4(v34, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 800))(v35);
  }
  v36 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v30 + 808))(v48);
  sub_24A14CF28((uint64_t)v57, v37);
  v36(v48, 0);
  v38 = (void (*)(_BYTE *, _QWORD))v44(v48);
  MEMORY[0x24BDAC7A8](v38);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
  v38(v48, 0);
  v39 = (void (*)(_BYTE *, _QWORD))v29(v48);
  MEMORY[0x24BDAC7A8](v39);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
  v39(v48, 0);
  v40 = (void (*)(_BYTE *, _QWORD))v43(v48);
  MEMORY[0x24BDAC7A8](v40);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
  v40(v48, 0);
  v41 = (void (*)(_BYTE *, _QWORD))v46(v48);
  MEMORY[0x24BDAC7A8](v41);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
  v41(v48, 0);
  v42 = (uint64_t (*)(_BYTE *, _QWORD))v45(v48);
  MEMORY[0x24BDAC7A8](v42);
  sub_24A1C378C((uint64_t (*)(void))sub_24A14D330);
  return v42(v48, 0);
}

uint64_t sub_24A1472A0(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24A147E34(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 32];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 4 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 4 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A1473E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_24A14804C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t VACTCEncoder.__deallocating_deinit()
{
  VACTCEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A147554(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  BOOL v10;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = result;
    v4 = 0;
    v5 = a2 + 32;
    while (v3)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 16);
      v7 = (char *)(v3 + 4 * v4);
      v8 = (char *)(*(_QWORD *)v5 + 32);
      if (v8 < &v7[4 * v6] && v7 < &v8[4 * v6])
        goto LABEL_14;
      result = (uint64_t)memcpy(v7, v8, 4 * v6);
      v10 = __OFADD__(v4, v6);
      v4 += v6;
      if (v10)
      {
        __break(1u);
        break;
      }
      v5 += 8;
      if (!--v2)
        return result;
    }
    __break(1u);
LABEL_14:
    result = sub_24A21644C();
    __break(1u);
  }
  return result;
}

void *sub_24A14762C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  char *v7;
  void *result;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (v3 > a2)
    goto LABEL_9;
  if (!a1)
  {
    __break(1u);
LABEL_9:
    sub_24A2163EC();
    __break(1u);
    goto LABEL_10;
  }
  v4 = (char *)(*(_QWORD *)a3 + 32);
  v5 = 4 * v3;
  v6 = &a1[4 * v3];
  v7 = &v4[4 * v3];
  if (v4 >= v6 || v7 <= a1)
    return memcpy(a1, v4, v5);
LABEL_10:
  result = (void *)sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14770C(char *a1, int64_t a2, uint64_t a3, int32x2_t a4)
{
  int64_t v5;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (v5 > a2)
    goto LABEL_12;
  a4.i32[0] = 0;
  v7 = sub_24A1420E4(v5, a4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    if (a1)
      goto LABEL_4;
    goto LABEL_11;
  }
  v7 = (uint64_t)sub_24A148928(v7);
  if (!a1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    sub_24A2163EC();
    __break(1u);
    goto LABEL_13;
  }
LABEL_4:
  v8 = (char *)(v7 + 32);
  v9 = 4 * *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (v7 + 32 + v9 <= (unint64_t)a1 || v8 >= &a1[v9])
  {
    memcpy(v8, a1, v9);
    *(_QWORD *)a3 = v7;
    return swift_bridgeObjectRelease();
  }
LABEL_13:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A147840(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_24A147CDC(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_24A215E1C();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_24A215D68();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_24A215D68();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_24A215E40();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_24A147F40(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_24A147F40((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_24A215D68();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_24A215E40();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_24A147F40(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_24A147F40((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_24A2163E0();
  __break(1u);
LABEL_42:
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A147CDC(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_24A215E40();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_24A147F40(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_24A147F40((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

char *sub_24A147E34(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_257909960);
      v10 = (char *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_24A14AACC(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24A147F40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A480);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A14BEC4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24A14804C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A460);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A14C6CC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24A148158(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      sub_24A135F88(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = j__malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A14CE24(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A148270(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_24A148340(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_24A14D1A4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_24A14D1A4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_24A14D184((uint64_t)v12);
  return v7;
}

uint64_t sub_24A148340(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_24A21626C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_24A1484F8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_24A216350();
  if (!v8)
  {
    sub_24A2163E0();
    __break(1u);
LABEL_17:
    result = sub_24A21644C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_24A1484F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_24A14858C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24A1487DC(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_24A1487DC(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24A14858C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_24A148700(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_24A216314();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_24A2163E0();
      __break(1u);
LABEL_10:
      v2 = sub_24A215DBC();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_24A21644C();
    __break(1u);
LABEL_14:
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_24A148700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24A135F88(&qword_25790A468);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24A148764(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_24A215DF8();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24BD0969C](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_24A1487DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A468);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

char *sub_24A148928(uint64_t a1)
{
  return sub_24A147E34(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_24A14893C(_QWORD *a1)
{
  return sub_24A148158(0, a1[2], 0, a1, &qword_25790A450, &qword_25790A458);
}

unint64_t sub_24A148970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_24A216638();
  sub_24A215D50();
  v4 = sub_24A21665C();
  return sub_24A148A04(a1, a2, v4);
}

unint64_t sub_24A1489D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A21662C();
  return sub_24A148AE4(a1, v2);
}

unint64_t sub_24A148A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_24A21659C() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_24A21659C() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24A148AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_24A148B80(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24A148BF0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24A148B9C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24A148D58(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24A148BB8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24A148EB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24A148BD4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24A149010(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_24A148BF0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A460);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A148D58(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A4A8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A148EB4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_257909960);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A149010(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A450);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_24A135F88(&qword_25790A458);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

unsigned __int8 *sub_24A149198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_24A215E34();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_24A1494F8();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_24A216350();
  }
LABEL_7:
  v11 = sub_24A14927C(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_24A14927C(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_24A1494F8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_24A215E40();
  v4 = sub_24A149574(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A149574(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_24A1496B8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_24A148700(v9, 0);
      v12 = sub_24A1497A4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24BD0960C](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24BD0960CLL);
LABEL_9:
      sub_24A216350();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24BD0960C]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_24A1496B8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_24A148764(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_24A148764(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_24A215DE0();
  }
  __break(1u);
  return result;
}

unint64_t sub_24A1497A4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_24A148764(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_24A215DEC();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_24A216350();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_24A148764(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_24A215DC8();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_24A1499B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24A1489D4(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24A14A208();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (uint64_t *)(v18[7] + 16 * v12);
      result = *v19;
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v23 = (uint64_t *)(v18[7] + 16 * v12);
    *v23 = a1;
    v23[1] = a2;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      result = 0;
      v18[2] = v26;
      return result;
    }
    goto LABEL_14;
  }
  sub_24A149C4C(v15, a4 & 1);
  v21 = sub_24A1489D4(a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A149AF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24A148970(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = v13 + ((v11 ^ 1) & 1);
  if (__OFADD__(v13, (v11 ^ 1) & 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v11;
  v16 = *(_QWORD *)(v10 + 24);
  if (v16 >= v14 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_24A14A3B4();
LABEL_7:
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7];
      result = *(_QWORD *)(v18 + 8 * v12);
      *(_QWORD *)(v18 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v17[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v17[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v17[7] + 8 * v12) = a1;
    v23 = v17[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v17[2] = v25;
      swift_bridgeObjectRetain();
      return 0;
    }
    goto LABEL_14;
  }
  sub_24A149F00(v14, a4 & 1);
  v20 = sub_24A148970(a2, a3);
  if ((v15 & 1) == (v21 & 1))
  {
    v12 = v20;
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A149C4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790A470);
  result = sub_24A216434();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero(v34, 8 * v33);
                else
                  *v34 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_24A21662C();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A149F00(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790A478);
  v37 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_24A14A208()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_24A135F88(&qword_25790A470);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24A14A3B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_24A135F88(&qword_25790A478);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_24A14A560(float a1, float a2, float a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  BOOL v10;
  float *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  BOOL v19;
  float v20;
  BOOL v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  float *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v6 = a1 <= a2;
  if (a3 > 0.0)
    v6 = a1 >= a2;
  if (!v6)
  {
    v7 = -1;
    do
    {
      v8 = ++v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      v9 = a1 + (float)((float)v8 * a3);
      v10 = v9 <= a2;
      if (a3 > 0.0)
        v10 = v9 >= a2;
    }
    while (!v10);
    if (v8 <= 0)
      goto LABEL_18;
    sub_24A135F88(&qword_257909960);
    v11 = (float *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    v14 = v13 >> 2;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v14;
    v15 = v11 + 8;
    v16 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - v8;
    v17 = -1;
    v18 = a1;
    while (1)
    {
      v19 = v18 <= a2;
      if (a3 > 0.0)
        v19 = v18 >= a2;
      if (v19)
        goto LABEL_47;
      v20 = a1 + (float)((float)(v17 + 2) * a3);
      *v15++ = v18;
      ++v17;
      v18 = v20;
      if (v7 == v17)
        goto LABEL_19;
    }
  }
LABEL_18:
  v8 = 0;
  v11 = (float *)MEMORY[0x24BEE4AF8];
  v15 = (float *)(MEMORY[0x24BEE4AF8] + 32);
  v16 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 24) >> 1;
  v20 = a1;
LABEL_19:
  v21 = v20 <= a2;
  if (a3 > 0.0)
    v21 = v20 >= a2;
  if (!v21)
  {
    while (!__OFADD__(v8, 1))
    {
      if (!v16)
      {
        v22 = *((_QWORD *)v11 + 3);
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_48;
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        sub_24A135F88(&qword_257909960);
        v25 = (float *)swift_allocObject();
        v26 = j__malloc_size(v25);
        v27 = v26 - 32;
        if (v26 < 32)
          v27 = v26 - 29;
        v28 = v27 >> 2;
        *((_QWORD *)v25 + 2) = v24;
        *((_QWORD *)v25 + 3) = 2 * (v27 >> 2);
        v29 = (unint64_t)(v25 + 8);
        v30 = *((_QWORD *)v11 + 3) >> 1;
        if (*((_QWORD *)v11 + 2))
        {
          v31 = v11 + 8;
          if (v25 != v11 || v29 >= (unint64_t)v31 + 4 * v30)
            memmove(v25 + 8, v31, 4 * v30);
          *((_QWORD *)v11 + 2) = 0;
        }
        v15 = (float *)(v29 + 4 * v30);
        v16 = (v28 & 0x7FFFFFFFFFFFFFFFLL) - v30;
        swift_release();
        v11 = v25;
      }
      v32 = __OFSUB__(v16--, 1);
      if (v32)
        goto LABEL_46;
      *v15++ = v20;
      v20 = a1 + (float)((float)(v8 + 1) * a3);
      v33 = v20 <= a2;
      if (a3 > 0.0)
        v33 = v20 >= a2;
      ++v8;
      if (v33)
        goto LABEL_40;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
LABEL_40:
  v34 = *((_QWORD *)v11 + 3);
  if (v34 >= 2)
  {
    v35 = v34 >> 1;
    v32 = __OFSUB__(v35, v16);
    v36 = v35 - v16;
    if (v32)
    {
LABEL_49:
      __break(1u);
      return;
    }
    *((_QWORD *)v11 + 2) = v36;
  }
}

uint64_t sub_24A14A7E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        sub_24A135F88(&qword_25790A458);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_24A135F88(&qword_25790A450);
      v9 = (_QWORD *)swift_allocObject();
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 25;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 3);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14A964(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 4 * v5;
    if (v5 <= 0)
    {
      v9 = (char *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = v9 + 32;
        v13 = (char *)(a2 + 4 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8])
          goto LABEL_19;
        memcpy(v12, v13, 4 * v5);
        return (uint64_t)v9;
      }
    }
    else
    {
      sub_24A135F88(&qword_257909960);
      v9 = (char *)swift_allocObject();
      v10 = j__malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 29;
      *((_QWORD *)v9 + 2) = v5;
      *((_QWORD *)v9 + 3) = 2 * (v11 >> 2);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

char *sub_24A14AACC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14ABB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;

  v1 = type metadata accessor for VABundleUtil();
  static VABundleUtil.bundlePathFallback(path:)();
  if (!v0)
  {
    type metadata accessor for VACTCEncoderConfig();
    v2 = sub_24A14D2A8();
    sub_24A17D140(v2, &v6);
    swift_bridgeObjectRelease();
    v1 = v6;
    if ((v7 & 1) != 0)
    {
      if (v6 == 0x8000000000000000)
      {
        sub_24A216308();
        swift_bridgeObjectRelease();
        sub_24A215D98();
        v1 = 0x800000024A2211B0;
        sub_24A14C404();
        swift_allocError();
        *v3 = 0xD00000000000001ALL;
        v3[1] = 0x800000024A2211B0;
      }
      else
      {
        sub_24A14D2EC();
        swift_allocError();
        *v4 = v1;
      }
      swift_willThrow();
    }
  }
  return v1;
}

uint64_t sub_24A14AD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD **v27;
  _QWORD *v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD *, _QWORD);
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[4];
  unint64_t v70;

  v2 = *(_QWORD *)(a1 + 32);
  type metadata accessor for VACTCEncoderConfig();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0xE000000000000000;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0xE000000000000000;
  *(_QWORD *)(v3 + 72) = 0;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 80) = 0xE000000000000000;
  *(_QWORD *)(v3 + 88) = v4;
  *(_QWORD *)(v3 + 96) = v4;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0xE000000000000000;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0xE000000000000000;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0xE000000000000000;
  *(_QWORD *)(v3 + 160) = v4;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_BYTE *)(v3 + 200) = 1;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 232) = 1;
  v5 = sub_24A13EA98(0x65467475706E493CLL, 0xEC0000003E737461, v2);
  if (v1)
    goto LABEL_32;
  (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 232))(v5);
  v6 = sub_24A13E924(0xD000000000000011, 0x800000024A2210A0, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 256))(v6);
  v7 = sub_24A13E924(0xD000000000000018, 0x800000024A2210C0, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 280))(v7);
  v8 = sub_24A13E924(0x764F656D6172463CLL, 0xEE003E70616C7265, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 304))(v8);
  v9 = sub_24A13EA98(0x3E6B73614D3CLL, 0xE600000000000000, v2);
  (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 328))(v9);
  v10 = sub_24A13EA98(0xD000000000000010, 0x800000024A2210E0, v2);
  (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 352))(v10);
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 376))(MEMORY[0x24BEE4AF8]);
  if (!*(_QWORD *)(v2 + 16)
    || (v11 = sub_24A148970(0x685365746174533CLL, 0xED00003E73657061), (v12 & 1) == 0)
    || (sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v11, (uint64_t)v69),
        sub_24A135F88(&qword_25790A488),
        (swift_dynamicCast() & 1) == 0))
  {
LABEL_31:
    sub_24A14C404();
    swift_allocError();
    *v45 = 0xD000000000000026;
    v45[1] = 0x800000024A221100;
    swift_willThrow();
LABEL_32:
    swift_release();
    return v3;
  }
  v13 = v67;
  v64 = *(_QWORD *)(v67 + 16);
  if (!v64)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    v13 = 0xD000000000000026;
    v33 = sub_24A13ED00(0x74537475706E493CLL, 0xED00003E73657461, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 400))(v33);
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 424))(0x432C522C31, 0xE500000000000000);
    v34 = sub_24A13E924(0x69447475706E493CLL, 0xEA00000000003E6DLL, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 448))(v34);
    v35 = sub_24A13EA98(0x6D726F666E6F433CLL, 0xEE003E74754F7265, v2);
    (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 472))(v35);
    v36 = sub_24A13EA98(0x74736F504354433CLL, 0xEF3E73726F697265, v2);
    (*(void (**)(_QWORD *))(*(_QWORD *)v3 + 496))(v36);
    v37 = sub_24A13ED00(0x5374757074754F3CLL, 0xEE003E7365746174, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 520))(v37);
    v38 = sub_24A13E924(0x4474757074754F3CLL, 0xEB000000003E6D69, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 544))(v38);
    if (*(_QWORD *)(v2 + 16) && (v39 = sub_24A148970(0xD000000000000013, 0x800000024A221130), (v40 & 1) != 0))
    {
      sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v39, (uint64_t)v69);
      v41 = swift_dynamicCast();
      v42 = v41 == 0;
      if (v41)
        v43 = v67;
      else
        v43 = 0;
      if (v42)
        v44 = 0;
      else
        v44 = v68;
    }
    else
    {
LABEL_35:
      v43 = 0;
      v44 = 0;
    }
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 568))(v43, v44);
    if (*(_QWORD *)(v2 + 16) && (v46 = sub_24A148970(v13 - 17, 0x800000024A221150), (v47 & 1) != 0))
    {
      sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v46, (uint64_t)v69);
      v48 = swift_dynamicCast();
      if (v48)
        v49 = v67;
      else
        v49 = 0;
      v50 = v48 ^ 1u;
    }
    else
    {
      v49 = 0;
      v50 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 592))(v49, v50);
    if (*(_QWORD *)(v2 + 16) && (v51 = sub_24A148970(v13 - 16, 0x800000024A221170), (v52 & 1) != 0))
    {
      sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v51, (uint64_t)v69);
      v53 = swift_dynamicCast();
      v54 = v53 == 0;
      if (v53)
        v55 = v67;
      else
        v55 = 0;
      if (v54)
        v56 = 0;
      else
        v56 = v68;
    }
    else
    {
      v55 = 0;
      v56 = 0;
    }
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v3 + 616))(v55, v56);
    if (*(_QWORD *)(v2 + 16) && (v57 = sub_24A148970(v13 - 13, 0x800000024A221190), (v58 & 1) != 0))
    {
      sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v57, (uint64_t)v69);
      v59 = swift_dynamicCast();
      if (v59)
        v60 = v67;
      else
        v60 = 0;
      v61 = v59 ^ 1u;
    }
    else
    {
      v60 = 0;
      v61 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 640))(v60, v61);
    return v3;
  }
  v14 = 0;
  v63 = v67 + 32;
  v62 = v67;
  while (1)
  {
    if (v14 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_24A14D1A4(v63 + 32 * v14, (uint64_t)v69);
    if (!swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    v70 = v14;
    v69[0] = v67;
    v69[1] = v68;
    v67 = 44;
    v68 = 0xE100000000000000;
    sub_24A14C688();
    v15 = sub_24A216284();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
      break;
    swift_bridgeObjectRelease();
    v65 = MEMORY[0x24BEE4AF8];
LABEL_17:
    v66 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v3 + 384))(v69);
    v28 = v27;
    v29 = *v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v28 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = sub_24A148158(0, v29[2] + 1, 1, v29, &qword_25790A4A0, &qword_257909940);
      *v28 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = sub_24A148158((_QWORD *)(v31 > 1), v32 + 1, 1, v29, &qword_25790A4A0, &qword_257909940);
      *v28 = v29;
    }
    v13 = v62;
    v14 = v70 + 1;
    v29[2] = v32 + 1;
    v29[v32 + 4] = v65;
    v66(v69, 0);
    if (v14 == v64)
      goto LABEL_22;
  }
  v69[0] = MEMORY[0x24BEE4AF8];
  sub_24A148B9C(0, v16, 0);
  v17 = v69[0];
  v18 = (unint64_t *)(v15 + 40);
  while (1)
  {
    v19 = v17;
    v21 = *(v18 - 1);
    v20 = *v18;
    swift_bridgeObjectRetain();
    result = sub_24A13F1BC(v21, v20);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    v17 = v19;
    v69[0] = v19;
    v26 = *(_QWORD *)(v19 + 16);
    v25 = *(_QWORD *)(v19 + 24);
    if (v26 >= v25 >> 1)
    {
      sub_24A148B9C(v25 > 1, v26 + 1, 1);
      v17 = v69[0];
    }
    v18 += 2;
    *(_QWORD *)(v17 + 16) = v26 + 1;
    *(_QWORD *)(v17 + 8 * v26 + 32) = v24;
    if (!--v16)
    {
      v65 = v17;
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

_QWORD *sub_24A14B668(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_24A14B68C()
{
  unint64_t result;

  result = qword_257915410[0];
  if (!qword_257915410[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219914, &type metadata for VACTCEncoderConfig.CodingKeys);
    atomic_store(result, qword_257915410);
  }
  return result;
}

unint64_t sub_24A14B6D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257909930;
  if (!qword_257909930)
  {
    v1 = sub_24A139148(&qword_257909928);
    v2 = sub_24A14B74C((unint64_t *)&qword_257909938, &qword_257909940, MEMORY[0x24BEE1798]);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257909930);
  }
  return result;
}

uint64_t sub_24A14B74C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_24A139148(a2);
    v7 = a3;
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12D0], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A14B7A0(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6165467475706E69 && a2 == 0xEA00000000007374;
  if (v3 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6172467475706E69 && a2 == 0xEF746E756F43656DLL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A220940 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65764F656D617266 && a2 == 0xEC00000070616C72 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1802723693 && a2 == 0xE400000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6465626D45736F70 && a2 == 0xEE0074657366664FLL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6168536574617473 && a2 == 0xEB00000000736570 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6174537475706E69 && a2 == 0xEB00000000736574 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A220990 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6D69447475706E69 && a2 == 0xE800000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656D726F666E6F63 && a2 == 0xEC00000074754F72 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6574736F50435463 && a2 == 0xED000073726F6972 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x745374757074756FLL && a2 == 0xEC00000073657461 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x694474757074756FLL && a2 == 0xE90000000000006DLL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A2209E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A220A00 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A220A20 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A220A40)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_24A14BEC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14BFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t *v22;
  unint64_t v23;
  const char *v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void (*v43)(uint64_t, unint64_t);
  uint64_t (*v44)(_QWORD *);
  _QWORD *(*v45)(uint64_t *__return_ptr);
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  char v54;
  uint64_t v55;

  v3 = v2;
  v4 = v1;
  *(_DWORD *)(v1 + 516) = 0;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360);
  v7 = swift_retain();
  v8 = v6(v7);
  if (!v9)
  {
    swift_release();
    sub_24A14C404();
    swift_allocError();
    v23 = 0xD000000000000021;
    v24 = "VATransducer needs labelModelPath";
LABEL_7:
    *v22 = v23;
    v22[1] = (unint64_t)(v24 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_8;
  }
  v10 = v8;
  v11 = v9;
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 384))();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    swift_release();
    sub_24A14C404();
    swift_allocError();
    v23 = 0xD000000000000022;
    v24 = "VATransducer needs joinerModelPath";
    goto LABEL_7;
  }
  v14 = v12;
  v15 = v13;
  v46 = v10;
  type metadata accessor for VAEspressoUtils();
  v45 = *(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 312);
  v16 = v45(&v55);
  v54 = v55;
  v44 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 336);
  v17 = v44(v16);
  v18 = v3;
  v20 = v19;
  v21 = sub_24A1516F0();
  static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v14, v15, &v54, v17, v20, v21 & 1, &v47);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    v26 = swift_bridgeObjectRelease();
    v27 = v48;
    v28 = v49;
    v29 = v50;
    v30 = v51;
    v31 = v53;
    *(_OWORD *)(v4 + 360) = v47;
    *(_QWORD *)(v4 + 376) = v27;
    *(_DWORD *)(v4 + 384) = v28;
    *(_OWORD *)(v4 + 392) = v29;
    *(_QWORD *)(v4 + 408) = v30;
    *(_OWORD *)(v4 + 416) = v52;
    *(_BYTE *)(v4 + 432) = v31;
    v32 = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))v45)(&v55, v26);
    v54 = v55;
    v33 = v44(v32);
    v35 = v34;
    v36 = sub_24A1516F0();
    static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v46, v11, &v54, v33, v35, v36 & 1, &v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v48;
    v38 = v49;
    v39 = v50;
    v40 = v51;
    v41 = v53;
    *(_OWORD *)(v4 + 440) = v47;
    *(_QWORD *)(v4 + 456) = v37;
    *(_DWORD *)(v4 + 464) = v38;
    *(_OWORD *)(v4 + 472) = v39;
    *(_QWORD *)(v4 + 488) = v40;
    *(_OWORD *)(v4 + 496) = v52;
    *(_BYTE *)(v4 + 512) = v41;
    swift_release();
    v42 = swift_retain();
    sub_24A1401E0(v42, 0);
    v43 = *(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 824);
    swift_retain();
    v43(0x5F7265646F636E65, 0xEB0000000074756FLL);
    swift_release();
    swift_release();
    return v4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_8:
  swift_release();
  type metadata accessor for VATransducer();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t sub_24A14C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A14C388(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for VACTCEncoder()
{
  return objc_opt_self();
}

unint64_t sub_24A14C404()
{
  unint64_t result;

  result = qword_257909958;
  if (!qword_257909958)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAKeywordSpotterError, &type metadata for VAKeywordSpotterError);
    atomic_store(result, (unint64_t *)&qword_257909958);
  }
  return result;
}

uint64_t sub_24A14C448(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A14C470(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A14C498(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A14C4C0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

double sub_24A14C4E8(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = sub_24A14C524(a1).n128_u64[0];
  return result;
}

uint64_t sub_24A14C4FC(char *a1, int64_t a2, int32x2_t a3)
{
  uint64_t v3;

  return sub_24A14770C(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

__n128 sub_24A14C524(__n128 *a1)
{
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int32 *v5;
  unsigned __int32 *v6;
  unint64_t v7;
  unsigned __int32 v8;
  __n128 result;
  __n128 *v10;
  __n128 *v11;
  uint64_t v12;
  __n128 v13;

  v2 = *(__n128 **)(v1 + 16);
  v3 = v2[1].n128_u64[0];
  if (v3)
  {
    if (v3 < 8 || (unint64_t)((char *)a1 - (char *)v2 - 32) < 0x20)
    {
      v4 = 0;
LABEL_5:
      v5 = (unsigned __int32 *)a1 + v4;
      v6 = (unsigned __int32 *)&v2[2] + v4;
      v7 = v3 - v4;
      do
      {
        v8 = *v6++;
        result.n128_u32[0] = v8;
        *v5++ = v8;
        --v7;
      }
      while (v7);
      return result;
    }
    v4 = v3 & 0x7FFFFFFFFFFFFFF8;
    v10 = v2 + 3;
    v11 = a1 + 1;
    v12 = v3 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = v10[-1];
      v13 = *v10;
      v11[-1] = result;
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 8;
    }
    while (v12);
    if (v3 != v4)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_24A14C5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24A14C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_24A14C640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_257909968);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A14C688()
{
  unint64_t result;

  result = qword_257909970;
  if (!qword_257909970)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_257909970);
  }
  return result;
}

uint64_t sub_24A14C6CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14C7BC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, unint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  swift_bridgeObjectRetain_n();
  v12 = sub_24A215A74();
  v13 = sub_24A2160F8();
  if (os_log_type_enabled(v12, v13))
  {
    v25 = a1;
    v14 = swift_slowAlloc();
    v24 = v3;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v23 = v7;
    v17 = v16;
    v27 = v16;
    v22 = v8;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    v26 = sub_24A148270(v25, a2, &v27);
    a1 = v25;
    sub_24A216260();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A12D000, v12, v13, "Computing context vector for \"%s\"", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v17, -1, -1);
    MEMORY[0x24BD0AAAC](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  v18 = *(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 152);
  swift_retain();
  v19 = v18(a1, a2);
  swift_release();
  return v19;
}

unint64_t sub_24A14C9E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257909978;
  if (!qword_257909978)
  {
    v1 = sub_24A139148(&qword_257909948);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_257909978);
  }
  return result;
}

uint64_t type metadata accessor for VATransducer()
{
  return objc_opt_self();
}

uint64_t sub_24A14CA54(uint64_t a1)
{
  uint64_t v1;

  return sub_24A147554(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for VACTCEncoderConfig()
{
  return objc_opt_self();
}

uint64_t method lookup function for VATransducer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VATransducer.__allocating_init(config:debug:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 960))();
}

uint64_t method lookup function for VACTCEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VACTCEncoder.setContext(context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of VACTCEncoder.greedyDecodeChunk()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of VACTCEncoder.batchDecodeFromBytes(data:hypothesis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of VACTCEncoder.batchDecodeFromFeatures(features:hypothesis:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of VACTCEncoder.startStreaming()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of VACTCEncoder.streamingDecodeFromFeatures(features:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of VACTCEncoder.stopStreaming()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t getEnumTagSinglePayload for VACTCEncoderConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VACTCEncoderConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_24A14CC70 + 4 * byte_24A219647[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_24A14CCA4 + 4 * byte_24A219642[v4]))();
}

uint64_t sub_24A14CCA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A14CCAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A14CCB4);
  return result;
}

uint64_t sub_24A14CCC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A14CCC8);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_24A14CCCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A14CCD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VACTCEncoderConfig.CodingKeys()
{
  return &type metadata for VACTCEncoderConfig.CodingKeys;
}

unint64_t sub_24A14CCF4()
{
  unint64_t result;

  result = qword_2579155A0[0];
  if (!qword_2579155A0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A2198EC, &type metadata for VACTCEncoderConfig.CodingKeys);
    atomic_store(result, qword_2579155A0);
  }
  return result;
}

unint64_t sub_24A14CD3C()
{
  unint64_t result;

  result = qword_2579156B0;
  if (!qword_2579156B0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21985C, &type metadata for VACTCEncoderConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579156B0);
  }
  return result;
}

unint64_t sub_24A14CD84()
{
  unint64_t result;

  result = qword_2579156B8[0];
  if (!qword_2579156B8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219884, &type metadata for VACTCEncoderConfig.CodingKeys);
    atomic_store(result, qword_2579156B8);
  }
  return result;
}

uint64_t *sub_24A14CDC8(uint64_t *a1)
{
  sub_24A14C388(*a1, a1[1]);
  return a1;
}

void *sub_24A14CDFC(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24A14762C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_24A14CE24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_24A135F88(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14CF28(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)a2 + 32;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      v6 = __OFADD__(v3, v5);
      v3 += v5;
      if (v6)
        break;
      v4 += 8;
      if (!--v2)
        goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    MEMORY[0x24BDAC7A8](result);
    return sub_24A1C378C((uint64_t (*)(void))sub_24A14CFD0);
  }
  return result;
}

uint64_t sub_24A14CFD0(char *a1, int64_t a2, int32x2_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v11;

  v4 = *(_QWORD *)(v3 + 16);
  if (v4 > a2)
    goto LABEL_13;
  v6 = *(_QWORD *)(v3 + 24);
  a3.i32[0] = 0;
  v7 = sub_24A1420E4(v4, a3);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v7 = (uint64_t)sub_24A148928(v7);
    if (a1)
      goto LABEL_4;
    goto LABEL_12;
  }
  if (!a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    sub_24A2163EC();
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = (char *)(v7 + 32);
    if (v7 + 32 + 4 * v4 <= (unint64_t)a1 || v8 >= &a1[4 * v4])
    {
      memcpy(v8, a1, 4 * v4);
      v11 = v7;
      *(_QWORD *)v6 = sub_24A13EF68(0, *(_QWORD *)(*(_QWORD *)v6 + 16), v6, &v11);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
LABEL_14:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14D184(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_24A14D1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A14D1E0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_24A21659C() & 1;
}

uint64_t sub_24A14D234()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A14D258()
{
  return swift_deallocObject();
}

uint64_t sub_24A14D268(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A135F88(&qword_25790A490);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A14D2A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790A4B0;
  if (!qword_25790A4B0)
  {
    v1 = type metadata accessor for VACTCEncoderConfig();
    result = MEMORY[0x24BD0A9EC](&unk_24A21964C, v1);
    atomic_store(result, (unint64_t *)&qword_25790A4B0);
  }
  return result;
}

unint64_t sub_24A14D2EC()
{
  unint64_t result;

  result = qword_25790A4B8;
  if (!qword_25790A4B8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21B870, &type metadata for JSONParseError);
    atomic_store(result, (unint64_t *)&qword_25790A4B8);
  }
  return result;
}

uint64_t sub_24A14D330(char *a1, int64_t a2, int32x2_t a3)
{
  return sub_24A14C4FC(a1, a2, a3);
}

void *sub_24A14D344(char *a1, uint64_t a2)
{
  return sub_24A14CDFC(a1, a2);
}

uint64_t sub_24A14D358(uint64_t a1)
{
  return sub_24A14CA54(a1);
}

uint64_t sub_24A14D380()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 160);
}

uint64_t sub_24A14D3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 160) = a1;
  return result;
}

uint64_t (*sub_24A14D3EC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t VAContextEncoder.__allocating_init(config:outputDim:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  VAContextEncoder.init(config:outputDim:)(a1, a2);
  return v4;
}

_QWORD *VAContextEncoder.init(config:outputDim:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = v2;
  v2[19] = 64;
  (*(void (**)(void))(*(_QWORD *)a1 + 440))();
  if (v3)
    goto LABEL_3;
  type metadata accessor for VABundleUtil();
  static VABundleUtil.bundlePathFallback(path:)();
  swift_bridgeObjectRelease();
  v2[20] = a2;
  type metadata accessor for VASentencePieceModel();
  v8 = swift_allocObject();
  v9 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v8 + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = v9;
  *(_WORD *)(v8 + 40) = 256;
  v2[18] = v8;
  swift_retain();
  sub_24A14F6DC();
  swift_release();
  v10 = swift_bridgeObjectRelease();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(v10);
  if (!v12)
  {
    sub_24A14C404();
    swift_allocError();
    *v18 = 0xD00000000000001FLL;
    v18[1] = 0x800000024A2211D0;
    swift_willThrow();
    swift_release();
LABEL_3:
    swift_release();
    type metadata accessor for VAContextEncoder();
    swift_deallocPartialClassInstance();
    return v4;
  }
  v13 = v11;
  v14 = v12;
  if (((*(uint64_t (**)(void))(*(_QWORD *)a1 + 288))() & 1) != 0)
  {
    type metadata accessor for VAEspressoUtilsV2();
    v15 = sub_24A1516F0();
    sub_24A1D80C4(v13, v14, v15 & 1, &v38);
    v16 = v38;
    v17 = v41;
    swift_bridgeObjectRelease();
    swift_release();
    v4[12] = v16;
    *(_OWORD *)(v4 + 13) = v39;
    *(_OWORD *)(v4 + 15) = v40;
    v4[17] = v17;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *(_OWORD *)((char *)v4 + 73) = 0u;
  }
  else
  {
    type metadata accessor for VAEspressoUtils();
    v19 = (*(_QWORD *(**)(char *__return_ptr))(*(_QWORD *)a1 + 312))(&v30);
    v29 = v30;
    v20 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)a1 + 336))(v19);
    v22 = v21;
    v23 = sub_24A1516F0();
    static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(v13, v14, &v29, v20, v22, v23 & 1, &v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v24 = v32;
    v25 = v33;
    v26 = v34;
    v27 = v35;
    v28 = v37;
    *((_OWORD *)v4 + 1) = v31;
    v4[4] = v24;
    v4[5] = v25;
    *((_OWORD *)v4 + 3) = v26;
    v4[8] = v27;
    *(_OWORD *)(v4 + 9) = v36;
    *((_BYTE *)v4 + 88) = v28;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
  }
  return v4;
}

uint64_t type metadata accessor for VAContextEncoder()
{
  return objc_opt_self();
}

uint64_t VASentencePieceModel.__allocating_init(_:)(char a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_allocObject();
  v3 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(result + 24) = v3;
  *(_QWORD *)(result + 32) = v3;
  *(_BYTE *)(result + 41) = 1;
  *(_BYTE *)(result + 40) = a1;
  return result;
}

uint64_t type metadata accessor for VASentencePieceModel()
{
  return objc_opt_self();
}

uint64_t sub_24A14D824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD *);
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v2 = v1;
  v3 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 144) + 248))();
  v4 = v3;
  v5 = *(_QWORD *)(v0 + 48);
  if (v5)
  {
    v6 = *(_BYTE *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 56);
    v18 = *(_QWORD *)(v0 + 72);
    v17 = *(_QWORD *)(v0 + 40);
    v30 = *(_QWORD *)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 24);
    v19[0] = *(_QWORD *)(v0 + 16);
    v11 = v19[0];
    v19[1] = v10;
    v19[2] = v30;
    v20 = v17;
    v21 = v5;
    v22 = v8;
    v23 = v9;
    v24 = v18;
    v25 = v7;
    v26 = v6 & 1;
    v12 = *(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v0 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v2 = v12(v4, v19);
    sub_24A14C34C(v11, v10, v30, v17, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 104);
    if (v13)
    {
      v27[0] = *(_QWORD *)(v0 + 96);
      v27[1] = v13;
      v14 = *(_OWORD *)(v0 + 128);
      v28 = *(_OWORD *)(v0 + 112);
      v29 = v14;
      v2 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v0 + 160))(v3, v27);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v15 = 0xD000000000000028;
      v15[1] = 0x800000024A2211F0;
      swift_willThrow();
    }
  }
  return v2;
}

uint64_t sub_24A14D9F0(uint64_t a1, int32x2_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v20 = MEMORY[0x24BEE4AF8];
    sub_24A148BB8(0, v3, 0);
    v4 = v20;
    v6 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(v20 + 16);
    v8 = v3;
    do
    {
      v10 = *v6++;
      v9 = v10;
      v11 = *(_QWORD *)(v20 + 24);
      if (v7 >= v11 >> 1)
        sub_24A148BB8(v11 > 1, v7 + 1, 1);
      *(_QWORD *)(v20 + 16) = v7 + 1;
      *(float *)(v20 + 4 * v7++ + 32) = (float)v9;
      --v8;
    }
    while (v8);
  }
  a2.i32[0] = 0;
  v12 = sub_24A1420E4(64 - v3, a2);
  v13 = swift_bridgeObjectRetain();
  sub_24A1472A0(v13);
  v14.i32[0] = 1.0;
  v21 = sub_24A1420E4(v3, v14);
  sub_24A1472A0(v12);
  v15 = sub_24A1D7E60(0x73657361726870, 0xE700000000000000, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
  if (v2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 624))(v4);
    swift_release();
    swift_bridgeObjectRelease();
    v16 = sub_24A1D7E60(0x6D5F657361726870, 0xEB000000006B7361, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 624))(v21);
    swift_release();
    swift_bridgeObjectRelease();
    sub_24A1926B0();
    v18 = sub_24A1D7F90(0x626D655F787463, 0xE700000000000000, MEMORY[0x24BEE14E8], MEMORY[0x24BEE1528]);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 720))(v18);
    swift_release();
    return v19;
  }
}

uint64_t sub_24A14DC54(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (a2 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    v3 = a2;
    if (a2)
    {
      sub_24A135F88(&qword_25790A740);
      result = sub_24A215EF4();
      *(_QWORD *)(result + 16) = v3;
      v7 = 32;
      do
      {
        v8 = result + v7;
        *(float *)v8 = a3;
        *(_QWORD *)(v8 + 8) = a1;
        v7 += 16;
        --v3;
      }
      while (v3);
    }
    else
    {
      return MEMORY[0x24BEE4AF8];
    }
  }
  return result;
}

uint64_t sub_24A14DD1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int32x2_t v11;
  _QWORD v12[4];
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[176];
  uint64_t v17;

  v5 = *a2;
  sub_24A1C3A28();
  sub_24A1C3A40();
  result = sub_24A1C3A48((uint64_t)&v14);
  if (!v3)
  {
    sub_24A1C3A40();
    v13[1] = v13;
    v7 = sub_24A1C3A48((uint64_t)&v15);
    MEMORY[0x24BDAC7A8](v7);
    v12[2] = a1;
    v12[3] = v2;
    v8 = sub_24A1C378C((uint64_t (*)(void))sub_24A150488);
    MEMORY[0x24BDAC7A8](v8);
    v12[-2] = a1;
    v12[-1] = v2;
    sub_24A1C378C((uint64_t (*)(void))sub_24A15055C);
    sub_24A1C3A34();
    sub_24A1C3A40();
    sub_24A1C3A48((uint64_t)v16);
    v9 = sub_24A1C399C(v5);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 120))(v9);
    v11.i32[0] = 0;
    v17 = sub_24A1420E4(v10, v11);
    MEMORY[0x24BDAC7A8](v17);
    v12[-2] = &v17;
    sub_24A1C378C((uint64_t (*)(void))sub_24A1505DC);
    return v17;
  }
  return result;
}

uint64_t *VAContextEncoder.deinit()
{
  uint64_t *v0;

  sub_24A14C34C(v0[2], v0[3], v0[4], v0[5], v0[6]);
  sub_24A14C388(v0[12], v0[13]);
  swift_release();
  return v0;
}

uint64_t VAContextEncoder.__deallocating_deinit()
{
  uint64_t *v0;

  sub_24A14C34C(v0[2], v0[3], v0[4], v0[5], v0[6]);
  sub_24A14C388(v0[12], v0[13]);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_24A14E024()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A14E058(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A14E09C()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A14E0D0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A14E114())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A14E150()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A14E184(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A14E1C8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_24A14E1F8(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 41) = a1;
  return result;
}

uint64_t (*sub_24A14E234())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t VASentencePieceModel.init(_:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 16) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v2;
  *(_BYTE *)(v1 + 41) = 1;
  *(_BYTE *)(v1 + 40) = a1;
  return v1;
}

uint64_t sub_24A14E294()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *, _QWORD);
  _QWORD *v2;
  _QWORD *v3;
  _BYTE v5[32];

  v1 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 184))(v5);
  v3 = v2;
  swift_bridgeObjectRelease();
  *v3 = MEMORY[0x24BEE4B00];
  return v1(v5, 0);
}

uint64_t sub_24A14E2EC()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  float v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  float v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t *v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t *);
  void (*v73)(uint64_t *, _QWORD);
  uint64_t *v74;
  uint64_t *v75;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t (*v82)(uint64_t);
  _QWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;

  v1 = v0;
  *(_QWORD *)&v85 = sub_24A215A8C();
  v2 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  *(_QWORD *)&v84 = (char *)v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = 8492770;
  v88 = 0xA300000000000000;
  sub_24A215D98();
  v4 = v87;
  v5 = v88;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 144);
  v7 = swift_bridgeObjectRetain();
  v8 = v6(v7);
  if (*(_QWORD *)(v8 + 16))
  {
    v9 = sub_24A148970(v4, v5);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A135F88(&qword_25790A460);
      v12 = swift_allocObject();
      v85 = xmmword_24A218650;
      *(_OWORD *)(v12 + 16) = xmmword_24A218650;
      *(_QWORD *)(v12 + 32) = v4;
      *(_QWORD *)(v12 + 40) = v5;
      sub_24A135F88(&qword_25790A4A8);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = v85;
      *(_QWORD *)(v13 + 32) = v11;
      return v12;
    }
  }
  v82 = v6;
  v80 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v1;
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 168);
  v16 = swift_bridgeObjectRetain();
  v17 = v15(v16);
  if (*(_QWORD *)(v17 + 16))
  {
    v18 = sub_24A148970(v4, v5);
    if ((v19 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 24 * v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = sub_24A215D5C();
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v78 = v5;
  v81 = v14;
  v77[1] = 0;
  if (result)
  {
    v22 = result;
    v87 = MEMORY[0x24BEE4AF8];
    result = sub_24A148B80(0, result & ~(result >> 63), 0);
    v23 = v82;
    if (v22 < 0)
      goto LABEL_58;
    v21 = (_QWORD *)v87;
    do
    {
      v24 = sub_24A215E1C();
      v26 = v25;
      v87 = (uint64_t)v21;
      v27 = v4;
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
      {
        sub_24A148B80(v28 > 1, v29 + 1, 1);
        v21 = (_QWORD *)v87;
      }
      v21[2] = v29 + 1;
      v30 = &v21[2 * v29];
      v30[4] = v24;
      v30[5] = v26;
      result = sub_24A215D68();
      --v22;
      v4 = v27;
    }
    while (v22);
    v14 = v81;
  }
  else
  {
    v23 = v82;
  }
  v89 = v21;
  v31 = 0.0;
  v32 = v85;
  v33 = v84;
  v77[0] = v4;
  while (1)
  {
    v34 = v21[2];
    v35 = v34 - 1;
    v83 = v21;
    if (v34 == 1)
      goto LABEL_36;
    if (!v34)
      goto LABEL_53;
    v36 = 0;
    v79 = (uint64_t)(v21 + 4);
    v37 = v21 + 7;
    v38 = -1;
    v39 = 3.4028e38;
    do
    {
      if (v36 >= v21[2])
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
        return result;
      }
      v40 = *(v37 - 2);
      v87 = *(v37 - 3);
      v88 = v40;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_24A215D98();
      swift_bridgeObjectRelease();
      v41 = swift_bridgeObjectRelease();
      v42 = v87;
      v43 = v88;
      v44 = v23(v41);
      if (*(_QWORD *)(v44 + 16) && (v45 = sub_24A148970(v42, v43), (v46 & 1) != 0))
      {
        v47 = *(float *)(*(_QWORD *)(v44 + 56) + 16 * v45 + 8);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (v47 < v39)
        {
          v38 = v36;
          v39 = v47;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      v32 = v85;
      ++v36;
      v37 += 2;
      v21 = v83;
      v33 = v84;
    }
    while (v35 != v36);
    if (v38 == -1)
      break;
    if ((v38 & 0x8000000000000000) != 0)
      goto LABEL_54;
    v48 = v83[2];
    if (v38 >= v48)
      goto LABEL_55;
    if (v38 + 1 >= v48)
      goto LABEL_56;
    v49 = *(_QWORD *)(v79 + 16 * v38 + 8);
    v87 = *(_QWORD *)(v79 + 16 * v38);
    v88 = v49;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = v87;
    v51 = v88;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A1506C0(v83);
      v83 = (_QWORD *)result;
    }
    v32 = v85;
    v52 = v83;
    if (v38 >= v83[2])
      goto LABEL_57;
    v53 = &v83[2 * v38];
    v53[4] = v50;
    v53[5] = v51;
    swift_bridgeObjectRelease();
    v89 = v52;
    sub_24A14EAD8(v38 + 1);
    result = swift_bridgeObjectRelease();
    v31 = v31 + v39;
    v21 = v89;
    v33 = v84;
  }
  v34 = v83[2];
  if (!v34)
    goto LABEL_47;
LABEL_36:
  swift_bridgeObjectRetain();
  v54 = v21 + 5;
  *(_QWORD *)&v55 = 136315138;
  v84 = v55;
  v79 = MEMORY[0x24BEE4AD8] + 8;
  while (2)
  {
    v57 = *(v54 - 1);
    v56 = *v54;
    v58 = swift_bridgeObjectRetain_n();
    if (*(_QWORD *)(v23(v58) + 16))
    {
      sub_24A148970(v57, v56);
      v60 = v59;
      swift_bridgeObjectRelease();
      if ((v60 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v61 = sub_24A1B9D90();
    v62 = v80;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v33, v61, v32);
    swift_bridgeObjectRetain();
    v63 = sub_24A215A74();
    v64 = v33;
    v65 = sub_24A216104();
    if (os_log_type_enabled(v63, v65))
    {
      v66 = swift_slowAlloc();
      v67 = swift_slowAlloc();
      v87 = v67;
      *(_DWORD *)v66 = v84;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v66 + 4) = sub_24A148270(v57, v56, &v87);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v63, v65, "Missing key %s", (uint8_t *)v66, 0xCu);
      swift_arrayDestroy();
      v68 = v67;
      v32 = v85;
      MEMORY[0x24BD0AAAC](v68, -1, -1);
      MEMORY[0x24BD0AAAC](v66, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v64, v32);
    v33 = v64;
    v14 = v81;
    v23 = v82;
LABEL_39:
    v54 += 2;
    if (--v34)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v21 = v89;
LABEL_47:
  swift_retain();
  v69 = swift_bridgeObjectRetain();
  v70 = sub_24A1513A8(v69, (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_release();
  v71 = v78;
  if (v14[40] == 1)
  {
    v72 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v14 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v73 = (void (*)(uint64_t *, _QWORD))v72(&v87);
    v75 = v74;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v86 = *v75;
    *v75 = 0x8000000000000000;
    sub_24A150D4C((uint64_t)v21, v70, v77[0], v71, isUniquelyReferenced_nonNull_native, v31);
    *v75 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73(&v87, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v89;
}

uint64_t sub_24A14EAD8(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_24A1506C0(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

float sub_24A14EBB4(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v3;
  float v4;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  float v43;
  unint64_t v44;
  unint64_t v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t *);
  void (*v59)(uint64_t *, _QWORD);
  uint64_t *v60;
  uint64_t *v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t (*v74)(uint64_t);
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;

  v78 = 8492770;
  v79 = 0xA300000000000000;
  sub_24A215D98();
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144);
  v7 = swift_bridgeObjectRetain();
  v74 = v6;
  v75 = v2;
  v8 = v6(v7);
  if (!*(_QWORD *)(v8 + 16) || (v9 = sub_24A148970(8492770, 0xA300000000000000), (v10 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(*(_QWORD *)v75 + 168);
    v16 = swift_bridgeObjectRetain();
    v17 = ((uint64_t (*)(uint64_t))v15)(v16);
    if (*(_QWORD *)(v17 + 16))
    {
      v18 = sub_24A148970(8492770, 0xA300000000000000);
      if ((v19 & 1) != 0)
      {
        v4 = *(float *)(*(_QWORD *)(v17 + 56) + 24 * v18 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
LABEL_60:
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = a2;
    v21 = sub_24A215D5C();
    v22 = MEMORY[0x24BEE4AF8];
    if (v21)
    {
      v23 = v21;
      v78 = MEMORY[0x24BEE4AF8];
      v17 = (uint64_t)&v78;
      sub_24A148B80(0, v21 & ~(v21 >> 63), 0);
      if (v23 < 0)
        goto LABEL_83;
      v22 = v78;
      do
      {
        v24 = sub_24A215E1C();
        v26 = v25;
        v78 = v22;
        v28 = *(_QWORD *)(v22 + 16);
        v27 = *(_QWORD *)(v22 + 24);
        if (v28 >= v27 >> 1)
        {
          v17 = (uint64_t)&v78;
          sub_24A148B80(v27 > 1, v28 + 1, 1);
          v22 = v78;
        }
        *(_QWORD *)(v22 + 16) = v28 + 1;
        v29 = v22 + 16 * v28;
        *(_QWORD *)(v29 + 32) = v24;
        *(_QWORD *)(v29 + 40) = v26;
        v3 = (_QWORD *)sub_24A215D68();
        --v23;
      }
      while (v23);
    }
    v30 = *(_QWORD *)(v22 + 16);
    v15 = sub_24A14DC54(-1, v30 + 1, 3.4028e38);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_81;
    v31 = *(_QWORD *)(v15 + 16);
    if (v31)
    {
LABEL_15:
      *(_DWORD *)(v15 + 32) = 0;
      v72 = v15 + 32;
      *(_QWORD *)(v15 + 40) = -1;
      v73 = v15;
      if (v30)
      {
        v32 = 0;
        v33 = v15 + 48;
        v20 = 3;
        while (2)
        {
          sub_24A135F88(&qword_25790A4C0);
          v34 = *(_QWORD *)(v22 + 16);
          if (v34 <= v32 || v34 < v30)
            goto LABEL_77;
          v69 = v32 + 1;
          if (v32)
            v36 = 0xE000000000000000;
          else
            v36 = 0xA300000000000000;
          v37 = 8492770;
          if (v32)
            v37 = 0;
          v76 = v37;
          sub_24A151274();
          v70 = v20;
          v71 = v33;
          v38 = v32;
          do
          {
            ++v38;
            v78 = v22;
            v79 = v22 + 32;
            v80 = v32;
            v81 = v20;
            swift_bridgeObjectRetain();
            sub_24A215C60();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v78 = v76;
            v79 = v36;
            swift_bridgeObjectRetain();
            sub_24A215D98();
            swift_bridgeObjectRelease();
            v39 = swift_bridgeObjectRelease();
            v3 = (_QWORD *)v78;
            v15 = v79;
            v17 = v74(v39);
            if (*(_QWORD *)(v17 + 16) && (v40 = sub_24A148970((uint64_t)v3, v15), (v41 & 1) != 0))
            {
              v4 = *(float *)(*(_QWORD *)(v17 + 56) + 16 * v40 + 8);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v42 = *(_QWORD *)(v73 + 16);
              if (v32 >= v42)
              {
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
LABEL_75:
                __break(1u);
LABEL_76:
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                v15 = (unint64_t)sub_24A1506D4((_QWORD *)v15);
                v31 = *(_QWORD *)(v15 + 16);
                if (!v31)
                  goto LABEL_82;
                goto LABEL_15;
              }
              if (v38 >= v42)
                goto LABEL_72;
              v43 = v4 + *(float *)(v72 + 16 * v32);
              if (v43 < *(float *)v33)
              {
                *(float *)v33 = v43;
                *(_QWORD *)(v33 + 8) = v32;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v33 += 16;
            v20 += 2;
          }
          while (v30 != v38);
          v33 = v71 + 16;
          v20 = v70 + 2;
          ++v32;
          if (v69 != v30)
            continue;
          break;
        }
        v31 = *(_QWORD *)(v73 + 16);
        if (!v31)
        {
          swift_bridgeObjectRelease();
          v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
          v4 = 0.0;
          goto LABEL_55;
        }
      }
      v44 = v31 - 1;
      v20 = v22 + 32;
      v4 = 0.0;
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v30 = (uint64_t)&qword_25790A4C0;
      while (1)
      {
        v45 = v72 + 16 * v44;
        v46 = *(float *)v45;
        v47 = *(_QWORD *)(v45 + 8);
        if (v47 == -1)
          break;
        if ((uint64_t)v44 <= (uint64_t)v47)
          goto LABEL_73;
        if ((v47 & 0x8000000000000000) != 0)
          goto LABEL_74;
        v48 = *(_QWORD *)(v22 + 16);
        if (v48 < v47 || v48 < v44)
          goto LABEL_75;
        v78 = v22;
        v79 = v22 + 32;
        v80 = v47;
        v81 = (2 * v44) | 1;
        sub_24A135F88(&qword_25790A4C0);
        sub_24A151274();
        swift_bridgeObjectRetain();
        v17 = sub_24A215C60();
        v51 = v50;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_24A14804C(0, v3[2] + 1, 1, v3);
        v53 = v3[2];
        v52 = v3[3];
        v15 = v53 + 1;
        v54 = v73;
        if (v53 >= v52 >> 1)
        {
          v3 = sub_24A14804C((_QWORD *)(v52 > 1), v53 + 1, 1, v3);
          v54 = v73;
        }
        v3[2] = v15;
        v55 = &v3[2 * v53];
        v55[4] = v17;
        v55[5] = v51;
        v4 = v4 + v46;
        v44 = v47;
        if (v47 >= *(_QWORD *)(v54 + 16))
          goto LABEL_76;
      }
      swift_bridgeObjectRelease();
      v4 = v4 + v46;
LABEL_55:
      v17 = v3[2];
      v20 = 8492770;
      if (!v17 || (v15 = v17 - 1, v17 == 1))
      {
LABEL_57:
        swift_retain();
        v56 = swift_bridgeObjectRetain();
        v57 = sub_24A1513A8(v56, (uint64_t)v75);
        swift_bridgeObjectRelease();
        swift_release();
        if ((v75[40] & 1) != 0)
        {
          v58 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v75 + 184);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v59 = (void (*)(uint64_t *, _QWORD))v58(&v78);
          v61 = v60;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v77 = *v61;
          *v61 = 0x8000000000000000;
          sub_24A150D4C((uint64_t)v3, v57, v20, 0xA300000000000000, isUniquelyReferenced_nonNull_native, v4);
          *v61 = v77;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v59(&v78, 0);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        goto LABEL_60;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_63:
        v17 = (uint64_t)&v3[2 * v17 + 3];
        v64 = v3 + 5;
        v30 = 1;
        while (1)
        {
          if (v30 - 1 != v15)
          {
            v66 = v3[2];
            if (v30 - 1 >= v66)
              goto LABEL_78;
            if (v15 >= v66)
              goto LABEL_79;
            v20 = *(v64 - 1);
            v67 = *v64;
            v68 = *(_QWORD *)v17;
            *(v64 - 1) = *(_QWORD *)(v17 - 8);
            *v64 = v68;
            v22 = v3[2];
            swift_bridgeObjectRetain();
            if (v15 >= v22)
              goto LABEL_80;
            *(_QWORD *)(v17 - 8) = v20;
            *(_QWORD *)v17 = v67;
            swift_bridgeObjectRelease();
            v20 = 8492770;
          }
          --v15;
          v17 -= 16;
          v64 += 2;
          if (v30++ >= (uint64_t)v15)
            goto LABEL_57;
        }
      }
LABEL_84:
      v3 = sub_24A1506C0(v3);
      goto LABEL_63;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v11 = *(_QWORD *)(v8 + 56) + 16 * v9;
  v12 = *(_QWORD *)v11;
  v4 = *(float *)(v11 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A135F88(&qword_25790A460);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_24A218650;
  *(_QWORD *)(v13 + 32) = 8492770;
  *(_QWORD *)(v13 + 40) = 0xA300000000000000;
  sub_24A135F88(&qword_25790A4A8);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_24A218650;
  *(_QWORD *)(v14 + 32) = v12;
  return v4;
}

uint64_t sub_24A14F36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;

  v3 = v2;
  v6 = sub_24A215690();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[2] = a2;
  v21 = MEMORY[0x24BEE4AF8];
  v20[1] = a1;
  sub_24A215630();
  sub_24A14C688();
  v10 = sub_24A216278();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v20[0] = v10;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 192);
    v13 = (uint64_t *)(v20[0] + 40);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v13;
      v16 = swift_bridgeObjectRetain();
      if ((v12(v16) & 1) != 0)
        v17 = 232;
      else
        v17 = 240;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + v17))(v14, v15);
      swift_bridgeObjectRelease();
      v18 = swift_bridgeObjectRetain();
      sub_24A14F4D4(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 += 2;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_24A14F4D4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_24A15037C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + 8 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 8 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A14F61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = MEMORY[0x24BEE4AF8];
  v10 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 248);
    swift_bridgeObjectRetain();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      v9 = v5(v7, v8);
      swift_bridgeObjectRelease();
      sub_24A14F4D4(v9);
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_24A14F6D0()
{
  return 0;
}

uint64_t sub_24A14F6DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t (*)(_QWORD), uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  uint8_t *v35;
  uint8_t *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(_OWORD *, _QWORD);
  _QWORD *v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  void (*v79)(_OWORD *, _QWORD);
  _QWORD *v80;
  _QWORD *v81;
  char v82;
  _QWORD *v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  char v91;
  float v92;
  _QWORD *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  _OWORD *v109;
  uint64_t result;
  _QWORD v111[2];
  void (*v112)(uint64_t (*)(_QWORD), uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char v131;
  char v132;
  _OWORD v133[2];
  uint64_t v134;

  v0 = type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  v123 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v128 = (uint64_t)v111 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_24A215A8C();
  v126 = *(_QWORD *)(v122 - 8);
  v2 = MEMORY[0x24BDAC7A8](v122);
  v121 = (char *)v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v124 = (char *)v111 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v125 = (char *)v111 - v6;
  v7 = type metadata accessor for Sentencepiece_TrainerSpec(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_24A21581C();
  MEMORY[0x24BDAC7A8](v10);
  v11 = type metadata accessor for Sentencepiece_ModelProto(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_24A215750();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A215714();
  v18 = (uint64_t)v127;
  v19 = sub_24A21575C();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return 1;
  }
  v21 = v20;
  v127 = v9;
  v119 = v14;
  v120 = v17;
  v118 = v15;
  v134 = 0;
  memset(v133, 0, sizeof(v133));
  v22 = v19;
  sub_24A135EC4(v19, v20);
  sub_24A215810();
  sub_24A1514EC();
  sub_24A21590C();
  v23 = (uint64_t)v13;
  v115 = v22;
  v116 = v21;
  v24 = (uint64_t)v127;
  sub_24A12F084((uint64_t)v127);
  LOBYTE(v22) = sub_24A12EEC0();
  sub_24A136064(v24, type metadata accessor for Sentencepiece_TrainerSpec);
  v132 = v22;
  v131 = 1;
  sub_24A1390B4();
  sub_24A215E64();
  sub_24A215E64();
  v25 = v120;
  v117 = v23;
  if (*(_QWORD **)&v133[0] == v130)
  {
    v26 = v129;
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 200))(1);
    v27 = sub_24A1B9D90();
    v28 = v126;
    v29 = *(void (**)(uint64_t (*)(_QWORD), uint64_t, uint64_t))(v126 + 16);
    v30 = v122;
    v29((uint64_t (*)(_QWORD))v125, v27, v122);
    v31 = sub_24A215A74();
    v32 = sub_24A2160F8();
    v33 = os_log_type_enabled(v31, v32);
    v34 = v121;
    if (v33)
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_24A12D000, v31, v32, "Using BPE segmentation model", v35, 2u);
      v36 = v35;
      v28 = v126;
      MEMORY[0x24BD0AAAC](v36, -1, -1);
    }

    v37 = *(void (**)(char *, uint64_t))(v28 + 8);
    v38 = v125;
  }
  else
  {
    sub_24A12F084(v24);
    v39 = sub_24A12EEC0();
    sub_24A136064(v24, type metadata accessor for Sentencepiece_TrainerSpec);
    v132 = v39;
    v131 = 0;
    sub_24A215E64();
    sub_24A215E64();
    v26 = v129;
    v40 = v24;
    v34 = v121;
    v30 = v122;
    if (*(_QWORD **)&v133[0] != v130)
    {
      *(_QWORD *)&v133[0] = 0;
      *((_QWORD *)&v133[0] + 1) = 0xE000000000000000;
      sub_24A216308();
      sub_24A215D98();
      sub_24A12F084(v40);
      v107 = sub_24A12EEC0();
      sub_24A136064(v40, type metadata accessor for Sentencepiece_TrainerSpec);
      LOBYTE(v130) = v107;
      sub_24A2163D4();
      v108 = v133[0];
      sub_24A151534();
      swift_allocError();
      *v109 = v108;
      swift_willThrow();
      sub_24A135F1C(v115, v116);
      sub_24A136064(v23, type metadata accessor for Sentencepiece_ModelProto);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v25, v119);
      return 1;
    }
    (*(void (**)(_QWORD))(*(_QWORD *)v129 + 200))(0);
    v41 = sub_24A1B9D90();
    v42 = v126;
    v29 = *(void (**)(uint64_t (*)(_QWORD), uint64_t, uint64_t))(v126 + 16);
    v29((uint64_t (*)(_QWORD))v124, v41, v30);
    v43 = sub_24A215A74();
    v44 = sub_24A2160F8();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_24A12D000, v43, v44, "Using BPE segmentation model", v45, 2u);
      v46 = v45;
      v42 = v126;
      MEMORY[0x24BD0AAAC](v46, -1, -1);
    }

    v37 = *(void (**)(char *, uint64_t))(v42 + 8);
    v38 = v124;
  }
  v114 = v37;
  v37(v38, v30);
  v47 = *(_QWORD *)v117;
  v126 = *(_QWORD *)(*(_QWORD *)v117 + 16);
  if (!v126)
  {
LABEL_36:
    v98 = sub_24A1B9D90();
    v29((uint64_t (*)(_QWORD))v34, v98, v30);
    swift_retain_n();
    v99 = sub_24A215A74();
    v100 = sub_24A2160F8();
    if (os_log_type_enabled(v99, v100))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v101 = 134217984;
      v102 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v26 + 120))() + 16);
      swift_release();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v133[0] = v102;
      v25 = v120;
      v34 = v121;
      sub_24A216260();
      swift_release();
      _os_log_impl(&dword_24A12D000, v99, v100, "Loaded %ld symbols", v101, 0xCu);
      v103 = v101;
      v30 = v122;
      MEMORY[0x24BD0AAAC](v103, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v105 = v118;
    v104 = v119;
    v106 = v117;
    sub_24A135F1C(v115, v116);
    v114(v34, v30);
    sub_24A136064(v106, type metadata accessor for Sentencepiece_ModelProto);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v25, v104);
    return 1;
  }
  v112 = v29;
  v113 = 0;
  v48 = *(char **)(*(_QWORD *)v26 + 136);
  v124 = *(char **)(*(_QWORD *)v26 + 160);
  v125 = v48;
  v49 = v47 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
  v123 = *(_QWORD *)(v123 + 72);
  v111[1] = v47;
  swift_bridgeObjectRetain();
  v50 = 0;
  v51 = v128;
  while (1)
  {
    v127 = (char *)v49;
    sub_24A151578(v49, v51);
    v53 = sub_24A12F1A8();
    v55 = v54;
    v56 = (void (*)(_OWORD *, _QWORD))((uint64_t (*)(_OWORD *))v125)(v133);
    v58 = v57;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v130 = (_QWORD *)*v58;
    v60 = v130;
    *v58 = 0x8000000000000000;
    v62 = sub_24A1489D4(v50);
    v63 = v60[2];
    v64 = (v61 & 1) == 0;
    v65 = v63 + v64;
    if (__OFADD__(v63, v64))
      break;
    v66 = v61;
    if (v60[3] >= v65)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v69 = v130;
        if ((v61 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        sub_24A14A208();
        v69 = v130;
        if ((v66 & 1) != 0)
          goto LABEL_22;
      }
    }
    else
    {
      sub_24A149C4C(v65, isUniquelyReferenced_nonNull_native);
      v67 = sub_24A1489D4(v50);
      if ((v66 & 1) != (v68 & 1))
        goto LABEL_46;
      v62 = v67;
      v69 = v130;
      if ((v66 & 1) != 0)
      {
LABEL_22:
        v70 = (uint64_t *)(v69[7] + 16 * v62);
        swift_bridgeObjectRelease();
        *v70 = v53;
        v70[1] = v55;
        goto LABEL_26;
      }
    }
    v69[(v62 >> 6) + 8] |= 1 << v62;
    *(_QWORD *)(v69[6] + 8 * v62) = v50;
    v71 = (uint64_t *)(v69[7] + 16 * v62);
    *v71 = v53;
    v71[1] = v55;
    v72 = v69[2];
    v73 = __OFADD__(v72, 1);
    v74 = v72 + 1;
    if (v73)
      goto LABEL_44;
    v69[2] = v74;
LABEL_26:
    *v58 = v69;
    swift_bridgeObjectRelease();
    v56(v133, 0);
    v75 = sub_24A12F1A8();
    v77 = v76;
    v78 = sub_24A12F1B4();
    v79 = (void (*)(_OWORD *, _QWORD))((uint64_t (*)(_OWORD *))v124)(v133);
    v81 = v80;
    v82 = swift_isUniquelyReferenced_nonNull_native();
    v130 = (_QWORD *)*v81;
    v83 = v130;
    *v81 = 0x8000000000000000;
    v85 = sub_24A148970(v75, v77);
    v86 = v83[2];
    v87 = (v84 & 1) == 0;
    v88 = v86 + v87;
    if (__OFADD__(v86, v87))
      goto LABEL_43;
    v89 = v84;
    if (v83[3] >= v88)
    {
      if ((v82 & 1) == 0)
        sub_24A150EE4();
    }
    else
    {
      sub_24A1506E8(v88, v82);
      v90 = sub_24A148970(v75, v77);
      if ((v89 & 1) != (v91 & 1))
        goto LABEL_47;
      v85 = v90;
    }
    v92 = -v78;
    v93 = v130;
    if ((v89 & 1) != 0)
    {
      v52 = v130[7] + 16 * v85;
      *(_QWORD *)v52 = v50;
      *(float *)(v52 + 8) = v92;
    }
    else
    {
      v130[(v85 >> 6) + 8] |= 1 << v85;
      v94 = (uint64_t *)(v93[6] + 16 * v85);
      *v94 = v75;
      v94[1] = v77;
      v95 = v93[7] + 16 * v85;
      *(_QWORD *)v95 = v50;
      *(float *)(v95 + 8) = v92;
      v96 = v93[2];
      v73 = __OFADD__(v96, 1);
      v97 = v96 + 1;
      if (v73)
        goto LABEL_45;
      v93[2] = v97;
      swift_bridgeObjectRetain();
    }
    ++v50;
    *v81 = v93;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v79(v133, 0);
    v51 = v128;
    sub_24A136064(v128, type metadata accessor for Sentencepiece_ModelProto.SentencePiece);
    v49 = (uint64_t)&v127[v123];
    v26 = v129;
    if (v126 == v50)
    {
      swift_bridgeObjectRelease();
      v25 = v120;
      v34 = v121;
      v30 = v122;
      v29 = v112;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  sub_24A2165CC();
  __break(1u);
LABEL_47:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A1501E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))() + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t VASentencePieceModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VASentencePieceModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *sub_24A150270(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A738);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A1512C0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_24A15037C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A4A8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A1517DC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_24A150488(unint64_t a1)
{
  uint64_t v1;
  int64x2_t *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  int64x2_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  float *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(int64x2_t **)(v1 + 16);
  v3 = v2[1].u64[0];
  if (!v3)
  {
LABEL_17:
    bzero((void *)(a1 + 4 * v3), 256 - 4 * v3);
    return;
  }
  if (v3 < 0xC
    || ((unint64_t)&v2[2] + 8 * v3 > a1 ? (v4 = (unint64_t)&v2[2] >= a1 + 4 * v3) : (v4 = 1), !v4))
  {
    v5 = 0;
LABEL_13:
    v13 = (float *)(a1 + 4 * v5);
    v14 = &v2[2].i64[v5];
    v15 = v3 - v5;
    do
    {
      v16 = *v14++;
      *v13++ = (float)v16;
      --v15;
    }
    while (v15);
    goto LABEL_15;
  }
  v5 = v3 & 0x7FFFFFFFFFFFFFF8;
  v6 = v2 + 4;
  v7 = (float32x4_t *)(a1 + 16);
  v8 = v3 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v10 = v6[-2];
    v9 = v6[-1];
    v12 = *v6;
    v11 = v6[1];
    v6 += 4;
    v7[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v10)), vcvtq_f64_s64(v9));
    *v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_s64(v12)), vcvtq_f64_s64(v11));
    v7 += 2;
    v8 -= 8;
  }
  while (v8);
  if (v3 != v5)
    goto LABEL_13;
LABEL_15:
  if (v3 <= 0x40)
  {
    if (v3 == 64)
      return;
    goto LABEL_17;
  }
  __break(1u);
}

void sub_24A15055C(char *__b)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v4 = 4 * v3;
  memset_pattern16(__b, &unk_24A2199A0, 4 * v3);
  if (v3 > 0x40)
  {
    __break(1u);
    return;
  }
  if (v3 != 64)
LABEL_6:
    bzero(&__b[v4], 256 - v4);
}

uint64_t sub_24A1505DC(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int *v8;
  unint64_t v9;
  int v10;
  __int128 *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 16);
  if (v4)
  {
    v5 = result;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v2 = v3;
    if ((result & 1) != 0)
    {
      if (v4 < 8)
        goto LABEL_5;
    }
    else
    {
      result = (uint64_t)sub_24A148928(v3);
      v3 = result;
      if (v4 < 8)
        goto LABEL_5;
    }
    if ((unint64_t)(v3 - v5) < 0xFFFFFFFFFFFFFFE0)
    {
      v6 = v4 & 0x7FFFFFFFFFFFFFF8;
      v11 = (__int128 *)(v5 + 16);
      v12 = (_OWORD *)(v3 + 48);
      v13 = v4 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 8;
      }
      while (v13);
      if (v4 == v6)
        goto LABEL_8;
      goto LABEL_6;
    }
LABEL_5:
    v6 = 0;
LABEL_6:
    v7 = (_DWORD *)(4 * v6 + v3 + 32);
    v8 = (int *)(v5 + 4 * v6);
    v9 = v4 - v6;
    do
    {
      v10 = *v8++;
      *v7++ = v10;
      --v9;
    }
    while (v9);
LABEL_8:
    *v2 = v3;
  }
  return result;
}

_QWORD *sub_24A1506C0(_QWORD *a1)
{
  return sub_24A14804C(0, a1[2], 0, a1);
}

_QWORD *sub_24A1506D4(_QWORD *a1)
{
  return sub_24A150270(0, a1[2], 0, a1);
}

uint64_t sub_24A1506E8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790A730);
  v42 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v36 = *(_QWORD *)v35;
    v37 = *(_DWORD *)(v35 + 8);
    if ((v42 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v20 = v36;
    *(_DWORD *)(v20 + 8) = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A150A10(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790A748);
  v41 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = *(_QWORD *)(v40 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = *(_QWORD *)(v40 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 24 * v21;
    v35 = *(_QWORD *)v33;
    v34 = *(_QWORD *)(v33 + 8);
    v36 = *(_DWORD *)(v33 + 16);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
    *(_QWORD *)v19 = v35;
    *(_QWORD *)(v19 + 8) = v34;
    *(_DWORD *)(v19 + 16) = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A150D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v7 = v6;
  v14 = *v6;
  v16 = sub_24A148970(a3, a4);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_24A15109C();
LABEL_7:
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7] + 24 * v16;
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      *(_QWORD *)v23 = a1;
      *(_QWORD *)(v23 + 8) = a2;
      *(float *)(v23 + 16) = a6;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a3;
    v27[1] = a4;
    v28 = v22[7] + 24 * v16;
    *(_QWORD *)v28 = a1;
    *(_QWORD *)(v28 + 8) = a2;
    *(float *)(v28 + 16) = a6;
    v29 = v22[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_24A150A10(v19, a5 & 1);
  v25 = sub_24A148970(a3, a4);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v7;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

void *sub_24A150EE4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_24A135F88(&qword_25790A730);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_DWORD *)(v20 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v24 = v21;
    *(_DWORD *)(v24 + 8) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24A15109C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_24A135F88(&qword_25790A748);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = v18[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v17 + v20);
    v22 = *(_QWORD *)(v17 + v20 + 8);
    v23 = *(_DWORD *)(v17 + v20 + 16);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = *v18;
    v24[1] = v19;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v21;
    *(_QWORD *)(v25 + 8) = v22;
    *(_DWORD *)(v25 + 16) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_24A151274()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790A4C8;
  if (!qword_25790A4C8)
  {
    v1 = sub_24A139148(&qword_25790A4C0);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE2170], v1);
    atomic_store(result, (unint64_t *)&qword_25790A4C8);
  }
  return result;
}

char *sub_24A1512C0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A1513A8(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t (*v6)(uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v18 = MEMORY[0x24BEE4AF8];
  sub_24A148B9C(0, v2, 0);
  v3 = v18;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144);
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v9 = *(v7 - 1);
    v8 = *v7;
    v10 = swift_bridgeObjectRetain_n();
    v11 = v6(v10);
    if (!*(_QWORD *)(v11 + 16))
      break;
    v12 = sub_24A148970(v9, v8);
    if ((v13 & 1) == 0)
      break;
    v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v12);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v18 + 16);
    v15 = *(_QWORD *)(v18 + 24);
    if (v16 >= v15 >> 1)
      sub_24A148B9C(v15 > 1, v16 + 1, 1);
    v7 += 2;
    *(_QWORD *)(v18 + 16) = v16 + 1;
    *(_QWORD *)(v18 + 8 * v16 + 32) = v14;
    if (!--v2)
      return v3;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

unint64_t sub_24A1514EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257908E70;
  if (!qword_257908E70)
  {
    v1 = type metadata accessor for Sentencepiece_ModelProto(255);
    result = MEMORY[0x24BD0A9EC](&unk_24A21903C, v1);
    atomic_store(result, (unint64_t *)&qword_257908E70);
  }
  return result;
}

unint64_t sub_24A151534()
{
  unint64_t result;

  result = qword_25790A4D0;
  if (!qword_25790A4D0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASentencePieceError, &type metadata for VASentencePieceError);
    atomic_store(result, (unint64_t *)&qword_25790A4D0);
  }
  return result;
}

uint64_t sub_24A151578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Sentencepiece_ModelProto.SentencePiece(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for VASentencePieceError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VASentencePieceError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for VASentencePieceError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for VASentencePieceError(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for VASentencePieceError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VASentencePieceError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VASentencePieceError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_24A1516F0()
{
  return 0;
}

ValueMetadata *type metadata accessor for VASentencePieceError()
{
  return &type metadata for VASentencePieceError;
}

uint64_t method lookup function for VAContextEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAContextEncoder.__allocating_init(config:outputDim:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of VAContextEncoder.computeCtxEmbedding(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t method lookup function for VASentencePieceModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VASentencePieceModel.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of VASentencePieceModel.clearCache()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of VASentencePieceModel.encodeWordBpe(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of VASentencePieceModel.encodeWord(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of VASentencePieceModel.encode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of VASentencePieceModel.decode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of VASentencePieceModel.readTokenizerModelProtobuf(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))() & 1;
}

uint64_t dispatch thunk of VASentencePieceModel.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

char *sub_24A1517DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A1518CC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x298))();
  *a2 = result;
  return result;
}

uint64_t sub_24A15190C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x2A0);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_24A15194C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrDelegate;
  swift_beginAccess();
  return MEMORY[0x24BD0AB54](v1);
}

uint64_t sub_24A151994()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_24A1519EC(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrDelegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24BD0AB54](v5);
  return sub_24A151A5C;
}

void sub_24A151A5C(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t sub_24A151AC8()
{
  return sub_24A151B30();
}

uint64_t sub_24A151AD4(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_audioDebugBytesBeforeSpeech);
}

uint64_t (*sub_24A151AE0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A151B24()
{
  return sub_24A151B30();
}

uint64_t sub_24A151B30()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A151B74(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_audioDebugBytesDuringSpeech);
}

uint64_t sub_24A151B80(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A151BCC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_24A151C10(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_25790A818);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_24A148970(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A151D30()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A151D78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_fuzzyKeywordsWithSpaces);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A151DC8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A151E0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_loopStartTime;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A151E50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_loopStartTime);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A151E98())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A151EDC()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_blockInferenceRequestPending);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A151F20(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_blockInferenceRequestPending);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A151F68())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A151FAC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return sub_24A15200C(a1, a2, a3, a4);
}

id sub_24A15200C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24[5];
  uint64_t v25;

  v6 = v4;
  v9 = (uint64_t)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrDelegate];
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_vadModel] = 0;
  v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference] = 0;
  v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal] = 0;
  v22 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_lastModelInputBeforeStartOfSpeech] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_audioDebugBytesBeforeSpeech] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_audioDebugBytesDuringSpeech] = 0;
  v10 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_fuzzyKeywordsWithSpaces;
  v11 = v6;
  v21 = v10;
  *(_QWORD *)&v6[v10] = sub_24A151C10(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_loopStartTime] = 0;
  v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_blockInferenceRequestPending] = 0;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v12 = (uint64_t)&v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider];
  v25 = a3;
  v13 = sub_24A152310(a3, (uint64_t)&v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider]);
  v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *a4) + 0xB0))(v13);
  v15 = v14;
  if (v14)
  {
    *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrConfig] = v14;
    type metadata accessor for VACTCEncoder();
    v16 = swift_retain();
    v17 = static VACTCEncoder.build(config:debug:)(v16, 0);
    if (!v5)
    {
      *(_QWORD *)&v11[OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel] = v17;

      sub_24A1ED7C4(v24);
      v19 = sub_24A1ED848(a1, (uint64_t)a4, (uint64_t)v24);
      swift_release();
      swift_unknownObjectRelease();
      sub_24A14D184(v25);
      return v19;
    }
    swift_unknownObjectRelease();

    swift_release();
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v18 = 0xD000000000000013;
    v18[1] = 0x800000024A221320;
    swift_willThrow();
    swift_unknownObjectRelease();

  }
  swift_unknownObjectRelease();
  sub_24A14D184(v25);
  sub_24A152354(v9);
  sub_24A14D184(v12);
  if (v15)
    swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = *(id *)&v6[v21];

  swift_bridgeObjectRelease();
  type metadata accessor for VATinyASRSpotter();
  swift_deallocPartialClassInstance();
  return v19;
}

uint64_t sub_24A152310(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A152354(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t type metadata accessor for VATinyASRSpotter()
{
  return objc_opt_self();
}

id static VATinyASRSpotter.buildForConfig(delegate:tasrDelegate:tasrConfig:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  _QWORD v9[5];

  v4 = type metadata accessor for VAStrategyProviderPassthrough();
  v5 = sub_24A1801F4();
  type metadata accessor for VAConfiguration();
  v6 = static VAConfiguration.buildForTasr(tasrConfig:)();
  v9[3] = v4;
  v9[4] = &protocol witness table for VAStrategyProviderPassthrough;
  v9[0] = v5;
  v7 = objc_allocWithZone((Class)type metadata accessor for VATinyASRSpotter());
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return sub_24A15200C(a1, a2, (uint64_t)v9, v6);
}

uint64_t sub_24A152458(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  _QWORD *v74;

  v2 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v7 = *((_BYTE *)a1 + 12);
  v8 = *((_BYTE *)a1 + 13);
  v9 = a1[2];
  v10 = a1[3];
  v11 = *((_BYTE *)a1 + 32);
  v12 = a1[5];
  v13 = *((_BYTE *)a1 + 48);
  v14 = *((unsigned __int8 *)a1 + 49);
  v15 = *((_DWORD *)a1 + 13);
  v16 = *((unsigned __int8 *)a1 + 56);
  v17 = a1[8];
  v18 = a1[9];
  v19 = *((unsigned __int8 *)a1 + 80);
  v20 = *((unsigned __int8 *)a1 + 81);
  v21 = *((unsigned __int8 *)a1 + 82);
  v22 = *((unsigned __int8 *)a1 + 83);
  v23 = *((unsigned __int8 *)a1 + 84);
  v24 = *((unsigned __int8 *)a1 + 85);
  v25 = *((unsigned __int8 *)a1 + 86);
  v53 = *a1;
  v54 = v6;
  v55 = v7;
  v56 = v8;
  v57 = v9;
  v58 = v10;
  v59 = v11;
  v51 = v12;
  v60 = v12;
  v61 = v13;
  v49 = v16;
  v50 = v14;
  v62 = v14;
  v63 = v15;
  v64 = v16;
  v47 = v18;
  v48 = v17;
  v65 = v17;
  v66 = v18;
  v45 = v20;
  v46 = v19;
  v67 = v19;
  v68 = v20;
  v43 = v22;
  v44 = v21;
  v69 = v21;
  v70 = v22;
  v41 = v24;
  v42 = v23;
  v71 = v23;
  v72 = v24;
  v40 = v25;
  v73 = v25;
  if ((VARuntimeParameters.allKeywordsAreValid.getter() & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    v37 = 0xD00000000000006DLL;
    v38 = "Keywords should be lower case and should not contain spaces to ensure model compatibility and API consistency";
    goto LABEL_6;
  }
  v39 = v4;
  v53 = v5;
  v54 = v6;
  v55 = v7;
  v56 = v8;
  v57 = v9;
  v58 = v10;
  v59 = v11;
  v60 = v51;
  v61 = v13;
  v62 = v50;
  v63 = v15;
  v64 = v49;
  v65 = v48;
  v66 = v47;
  v67 = v46;
  v68 = v45;
  v69 = v44;
  v70 = v43;
  v71 = v42;
  v72 = v41;
  v73 = v40;
  v26 = v74;
  v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v28 = v52;
  result = (*(uint64_t (**)(uint64_t *))((*MEMORY[0x24BEE4EA0] & *v74) + 0x3D8))(&v53);
  if (!v28)
  {
    v30 = sub_24A215F78();
    v31 = (uint64_t)v39;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v39, 1, 1, v30);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = 0;
    v32[3] = 0;
    v32[4] = v26;
    v33 = v26;
    v34 = sub_24A152B18(v31, (uint64_t)&unk_25790A7D0, (uint64_t)v32);
    v35 = (*(uint64_t (**)(uint64_t))((*v27 & *v33) + 0x138))(v34);
    result = (*(uint64_t (**)(uint64_t))((*v27 & *v33) + 0x130))(v35);
    if (!result)
    {
      sub_24A14C404();
      swift_allocError();
      v37 = 0xD00000000000001DLL;
      v38 = "Failed to create keyword task";
LABEL_6:
      *v36 = v37;
      v36[1] = (unint64_t)(v38 - 32) | 0x8000000000000000;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_24A152774(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[3] = a1;
  v2 = sub_24A215A8C();
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[7] = v3;
  *v3 = v1;
  v3[1] = sub_24A1527E8;
  return sub_24A154314();
}

uint64_t sub_24A1527E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A15284C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 24) = 1;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A15288C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  void *v15;

  v1 = *(void **)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v6 = v1;
  v7 = v1;
  v8 = sub_24A215A74();
  v9 = sub_24A216104();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void **)(v0 + 64);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = v10;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v14;
    sub_24A216260();
    *v12 = v14;

    _os_log_impl(&dword_24A12D000, v8, v9, "Error processing audio: %@", v11, 0xCu);
    sub_24A135F88(&qword_25790A820);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v12, -1, -1);
    MEMORY[0x24BD0AAAC](v11, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 64);

  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A152A4C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A152A78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A152AD0;
  return sub_24A152774(a1);
}

uint64_t sub_24A152AD0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A152B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_24A215F78();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_24A215F6C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_24A159A10(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_24A215F54();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

unint64_t sub_24A152C40(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(double *);
  void (*v18)(double *, _QWORD);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(double *, _QWORD);
  uint64_t *v29;
  uint64_t *v30;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  double v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint8_t *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint8_t *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  BOOL v72;
  _QWORD *v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t result;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  int v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  uint64_t (*v145)(double *);
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  double v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  char v157;
  int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  _QWORD *v169;

  v129 = sub_24A215A8C();
  v128 = *(_QWORD *)(v129 - 8);
  v3 = MEMORY[0x24BDAC7A8](v129);
  v118 = (char *)&v117 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v120 = (char *)&v117 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v119 = (char *)&v117 - v7;
  v8 = *(double *)a1;
  v9 = *(_DWORD *)(a1 + 8);
  v140 = *(unsigned __int8 *)(a1 + 12);
  v141 = *(unsigned __int8 *)(a1 + 13);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(unsigned __int8 *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(unsigned __int8 *)(a1 + 48);
  v137 = *(unsigned __int8 *)(a1 + 49);
  v15 = *(_DWORD *)(a1 + 52);
  v131 = *(unsigned __int8 *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  v133 = *(_QWORD *)(a1 + 72);
  v132 = *(unsigned __int8 *)(a1 + 80);
  v139 = *(unsigned __int8 *)(a1 + 81);
  v138 = *(unsigned __int8 *)(a1 + 82);
  v136 = *(unsigned __int8 *)(a1 + 83);
  v135 = *(unsigned __int8 *)(a1 + 84);
  v134 = *(unsigned __int8 *)(a1 + 85);
  v143 = *(unsigned __int8 *)(a1 + 86);
  v17 = *(uint64_t (**)(double *))((*MEMORY[0x24BEE4EA0] & *v1) + 0x398);
  v169 = v1;
  v145 = v17;
  v18 = (void (*)(double *, _QWORD))v17(&v150);
  v20 = v19;
  swift_bridgeObjectRelease();
  *v20 = MEMORY[0x24BEE4B00];
  v18(&v150, 0);
  v122 = v8;
  v150 = v8;
  LODWORD(v151) = v9;
  BYTE4(v151) = v140;
  BYTE5(v151) = v141;
  v124 = v10;
  v152 = v10;
  v153 = v11;
  v127 = v11;
  v121 = v12;
  v154 = v12;
  v126 = v13;
  v155 = v13;
  v130 = v14;
  v156 = v14;
  v157 = v137;
  v158 = v15;
  v159 = v131;
  v125 = v16;
  v160 = v16;
  v161 = v133;
  v162 = v132;
  v163 = v139;
  v164 = v138;
  v165 = v136;
  v166 = v135;
  v167 = v134;
  v168 = v143;
  v123 = VARuntimeParameters.keywordsNoThresholds.getter();
  v21 = *(_QWORD *)(v123 + 16);
  if (v21)
  {
    v144 = sub_24A14C688();
    v22 = (uint64_t *)(v123 + 40);
    do
    {
      v24 = *v22;
      v150 = *((double *)v22 - 1);
      v23 = *(_QWORD *)&v150;
      v151 = v24;
      v148 = 95;
      v149 = 0xE100000000000000;
      v146 = 32;
      v147 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      sub_24A2162A8();
      sub_24A215D14();
      swift_bridgeObjectRelease();
      v25 = sub_24A158ADC();
      v27 = v26;
      swift_bridgeObjectRelease();
      v28 = (void (*)(double *, _QWORD))v145(&v150);
      v30 = v29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v148 = *v30;
      *v30 = 0x8000000000000000;
      sub_24A158398(v23, v24, v25, v27, isUniquelyReferenced_nonNull_native);
      *v30 = v148;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28(&v150, 0);
      v22 += 2;
      --v21;
    }
    while (v21);
  }
  v32 = v169;
  swift_bridgeObjectRelease();
  if ((v143 & 1) != 0)
  {
    v33 = v122;
    if (*((_BYTE *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) == 1)
    {
      v34 = sub_24A1B9D90();
      v35 = v119;
      (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v119, v34, v129);
      v36 = sub_24A215A74();
      v37 = sub_24A2160F8();
      v38 = os_log_type_enabled(v36, v37);
      v39 = v142;
      v40 = v121;
      v41 = v130;
      if (v38)
      {
        v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v42 = 0;
        _os_log_impl(&dword_24A12D000, v36, v37, "block inference requested, but waiting for final", v42, 2u);
        MEMORY[0x24BD0AAAC](v42, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v128 + 8))(v35, v129);
      (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v32) + 0x3C0))(1);
      v43 = v141;
      v44 = v39;
    }
    else
    {
      (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v32) + 0x3C0))(0);
      v81 = v142;
      result = sub_24A153B60();
      v44 = v81;
      v40 = v121;
      v41 = v130;
      v43 = v141;
      if (v81)
        return result;
    }
  }
  else
  {
    v45 = sub_24A1B9D90();
    v46 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v120, v45, v129);
    v47 = sub_24A215A74();
    v48 = sub_24A2160F8();
    v49 = os_log_type_enabled(v47, v48);
    v33 = v122;
    if (v49)
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_24A12D000, v47, v48, "Unblock inference", v50, 2u);
      MEMORY[0x24BD0AAAC](v50, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v128 + 8))(v46, v129);
    v44 = v142;
    v40 = v121;
    v41 = v130;
    v43 = v141;
  }
  v142 = v44;
  v51 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrConfig;
  v52 = *(void (**)(uint64_t))(**(_QWORD **)((char *)v32
                                                     + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrConfig)
                                       + 384);
  v53 = swift_retain();
  v52(v53);
  v55 = v54;
  swift_release();
  swift_bridgeObjectRelease();
  v169 = (_QWORD *)v51;
  if (v55
    && (v56 = *(void (**)(uint64_t))(**(_QWORD **)((char *)v32 + v51) + 360),
        v57 = swift_retain(),
        v56(v57),
        v59 = v58,
        swift_release(),
        v60 = swift_bridgeObjectRelease(),
        v59))
  {
    v61 = v33;
  }
  else
  {
    v62 = mach_absolute_time();
    v63 = *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel);
    v150 = v33;
    LODWORD(v151) = v9;
    BYTE4(v151) = v140;
    BYTE5(v151) = v43;
    v152 = v124;
    v153 = v127;
    v154 = v40;
    v155 = v126;
    v156 = v41;
    v157 = v137;
    v158 = v15;
    v159 = v131;
    v160 = v125;
    v161 = v133;
    v162 = v132;
    v163 = v139;
    v164 = v138;
    v165 = v136;
    v166 = v135;
    v167 = v134;
    v168 = v143;
    swift_retain();
    v64 = sub_24A1FA3B8();
    v65 = v142;
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 848))(v64);
    swift_release();
    result = swift_bridgeObjectRelease();
    if (v65)
      return result;
    v142 = 0;
    v66 = sub_24A1B9D90();
    v67 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v118, v66, v129);
    v68 = sub_24A215A74();
    v69 = sub_24A2160EC();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v70 = 134217984;
      type metadata accessor for VARequestContext();
      v71 = mach_absolute_time();
      v72 = v71 >= v62;
      result = v71 - v62;
      if (!v72)
      {
        __break(1u);
        return result;
      }
      v150 = sub_24A165E68(result);
      sub_24A216260();
      _os_log_impl(&dword_24A12D000, v68, v69, "Updating context took %f secs", v70, 0xCu);
      MEMORY[0x24BD0AAAC](v70, -1, -1);
      v43 = v141;
    }

    v60 = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v67, v129);
    v61 = v122;
  }
  v73 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v74 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v32) + 0x118);
  v75 = v74(v60);
  v76 = v124;
  v77 = v131;
  if (v75)
  {
    v150 = v61;
    LODWORD(v151) = v9;
    BYTE4(v151) = v140;
    BYTE5(v151) = v43;
    v152 = v124;
    v153 = v127;
    v78 = v121;
    v154 = v121;
    v155 = v126;
    v156 = v130;
    v157 = v137;
    v158 = v15;
    v159 = v131;
    v79 = v133;
    v160 = v125;
    v161 = v133;
    v80 = v132;
    v162 = v132;
    v163 = v139;
    v164 = v138;
    v165 = v136;
    v166 = v135;
    v167 = v134;
    v168 = v143;
    (*(void (**)(double *))(*(_QWORD *)v75 + 312))(&v150);
    swift_release();
  }
  else
  {
    v145 = (uint64_t (*)(double *))type metadata accessor for VARequestContext();
    v83 = (_QWORD *)(*(uint64_t (**)(void))((*v73 & *v32) + 0x78))();
    v150 = v61;
    LODWORD(v151) = v9;
    BYTE4(v151) = v140;
    BYTE5(v151) = v43;
    v152 = v76;
    v153 = v127;
    v78 = v121;
    v154 = v121;
    v155 = v126;
    v156 = v130;
    v157 = v137;
    v158 = v15;
    v159 = v77;
    v79 = v133;
    v160 = v125;
    v161 = v133;
    v80 = v132;
    v162 = v132;
    v163 = v139;
    v164 = v138;
    v165 = v136;
    v166 = v135;
    v167 = v134;
    v168 = v143;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84 = sub_24A167FE8(v83, (uint64_t *)&v150);
    v85 = (*(uint64_t (**)(uint64_t))((*v73 & *v32) + 0x120))(v84);
    v86 = v74(v85);
    swift_release();
    if (!v86)
    {
      sub_24A14C404();
      swift_allocError();
      *v116 = 0xD00000000000001DLL;
      v116[1] = 0x800000024A2213D0;
      return swift_willThrow();
    }
  }
  v87 = *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider + 24);
  v88 = *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider + 32);
  sub_24A14B668((_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider), v87);
  v150 = v61;
  LODWORD(v151) = v9;
  BYTE4(v151) = v140;
  BYTE5(v151) = v141;
  v89 = v124;
  v152 = v124;
  v153 = v127;
  v154 = v78;
  v155 = v126;
  v90 = v80;
  v91 = v77;
  v92 = v130;
  v156 = v130;
  v157 = v137;
  v158 = v15;
  v159 = v91;
  v160 = v125;
  v161 = v79;
  v162 = v90;
  v163 = v139;
  v164 = v138;
  v165 = v136;
  v166 = v135;
  v167 = v134;
  v168 = v143;
  v93 = (*(uint64_t (**)(_QWORD *, _UNKNOWN **, double *, uint64_t, uint64_t))(v88 + 8))(v32, &protocol witness table for VAKeywordSpotterBase, &v150, v87, v88);
  v94 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v95 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v32) + 0x150))(v93);
  if ((v91 & 1) == 0)
  {
    v96 = *(uint64_t (**)(uint64_t))(**(_QWORD **)((char *)v169 + (_QWORD)v32) + 408);
    v97 = swift_retain();
    v98 = v96(v97);
    v95 = swift_release();
    if ((v98 & 1) == 0)
    {
      *(_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_vadModel) = 0;
      v107 = v140;
      v108 = v141;
      goto LABEL_36;
    }
  }
  v99 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_vadModel;
  if (*(_QWORD *)((char *)v32 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_vadModel))
  {
    v89 = v124;
    v100 = v127;
    v101 = v126;
    v102 = v125;
    v103 = v133;
    v104 = v132;
    v105 = v139;
    v106 = v138;
    v107 = v140;
    v108 = v141;
LABEL_37:
    v150 = v122;
    LODWORD(v151) = v9;
    BYTE4(v151) = v107;
    BYTE5(v151) = v108;
    v152 = v89;
    v153 = v100;
    v154 = v78;
    v155 = v101;
    v156 = v92;
    v157 = v137;
    v158 = v15;
    v159 = v131;
    v160 = v102;
    v161 = v103;
    v162 = v104;
    v163 = v105;
    v164 = v106;
    v165 = v136;
    v166 = v135;
    v167 = v134;
    v168 = v143;
    if ((sub_24A1FA788() & 1) != 0)
      v115 = MEMORY[0x24BEE4AF8];
    else
      v115 = 0;
    (*(void (**)(uint64_t))((*v94 & *v32) + 0x360))(v115);
    return (*(uint64_t (**)(uint64_t))((*v94 & *v32) + 0x378))(v115);
  }
  v109 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v94 & *v32) + 0x78))(v95);
  v110 = (*(uint64_t (**)(void))((*v94 & *v109) + 0xE0))();
  v112 = v111;

  v107 = v140;
  v108 = v141;
  if (!v112)
  {
    v113 = (uint64_t *)sub_24A1FF1F8();
    v110 = *v113;
    v112 = v113[1];
    swift_bridgeObjectRetain();
  }
  type metadata accessor for VASilenceModel();
  v114 = v142;
  result = sub_24A1A446C(v110, v112);
  if (!v114)
  {
    v142 = 0;
    *(_QWORD *)((char *)v32 + v99) = result;
    v89 = v124;
LABEL_36:
    swift_release();
    v100 = v127;
    v101 = v126;
    v102 = v125;
    v103 = v133;
    v104 = v132;
    v105 = v139;
    v106 = v138;
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_24A153B60()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  void (*v12)(void);
  _QWORD *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v0;
  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v34 - v8;
  *((_BYTE *)v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) = 0;
  *((_BYTE *)v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal) = 0;
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v0) + 0x180))(0);
  (*(void (**)(_QWORD))((*v10 & *v0) + 0x198))(0);
  v11 = *(_QWORD **)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
  if (v11)
  {
    v12 = *(void (**)(void))((*v10 & *v11) + 0x268);
    v13 = v11;
    v12();

  }
  v14 = *(uint64_t (**)(uint64_t))(**(_QWORD **)((char *)v2
                                                        + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel)
                                          + 904);
  v15 = swift_retain();
  v16 = v14(v15);
  v18 = v17;
  v20 = v19;
  result = swift_release();
  if (!v1)
  {
    v22 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0)
      v22 = v16 & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      v23 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v23, v3);
      swift_bridgeObjectRetain();
      v24 = sub_24A215A74();
      v25 = sub_24A2160F8();
      v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        v27 = swift_slowAlloc();
        v35 = v26;
        v28 = v27;
        v36 = swift_slowAlloc();
        v38 = v36;
        *(_DWORD *)v28 = 136315394;
        v34 = v28 + 4;
        swift_bridgeObjectRetain();
        v37 = sub_24A148270(v16, v18, &v38);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 12) = 1024;
        LODWORD(v37) = v20 & 1;
        sub_24A216260();
        _os_log_impl(&dword_24A12D000, v24, (os_log_type_t)v35, "Block inference, ignore \"%s\", isFinal %{BOOL}d", (uint8_t *)v28, 0x12u);
        v29 = v36;
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v29, -1, -1);
        MEMORY[0x24BD0AAAC](v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v30, v3);
      v31 = sub_24A215A74();
      v32 = sub_24A2160F8();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_24A12D000, v31, v32, "Block inference", v33, 2u);
        MEMORY[0x24BD0AAAC](v33, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
  return result;
}

uint64_t sub_24A153EDC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 v38;
  char v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  sub_24A215D14();
  v7 = sub_24A158ADC();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = sub_24A157BE0();
  if (v11)
  {
    v33 = v10;
    v34 = v11;
    v43 = 95;
    v44 = 0xE100000000000000;
    v41 = 32;
    v42 = 0xE100000000000000;
    sub_24A14C688();
    if (sub_24A2162A8() == v7 && v12 == v9)
    {
      swift_bridgeObjectRelease();
      v15 = 1;
      v16 = 1;
    }
    else
    {
      v14 = sub_24A21659C();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        v15 = 1;
        v16 = 1;
      }
      else if ((sub_24A1541B0() & 1) != 0)
      {
        v15 = 0;
        v16 = 1;
      }
      else
      {
        v15 = sub_24A215E10();
        v16 = 0;
      }
    }
    swift_bridgeObjectRelease();
    v18 = sub_24A215D14();
    v20 = v19;
    swift_bridgeObjectRelease();
    v33 = v18;
    v34 = v20;
    v43 = 32;
    v44 = 0xE100000000000000;
    v41 = 95;
    v42 = 0xE100000000000000;
    v21 = sub_24A2162A8();
    v23 = v22;
    result = swift_bridgeObjectRelease();
    if ((a2 | a1) < 0)
    {
      __break(1u);
    }
    else
    {
      v24 = sub_24A1DF918();
      v25 = sub_24A1DF918();
      v26 = sub_24A162F28();
      result = sub_24A1DF928(v21, v23, a1, a2, v16, v15 & 1, v26 & 1, (uint64_t)&v33, a4, v24, v25);
      v27 = v34;
      v28 = v35;
      if (v39)
        v29 = 256;
      else
        v29 = 0;
      v30 = v29 | v38;
      v31 = v40 != 0;
      *(_QWORD *)a3 = v33;
      *(_QWORD *)(a3 + 8) = v27;
      *(_QWORD *)(a3 + 16) = v28;
      *(_OWORD *)(a3 + 24) = v36;
      *(_OWORD *)(a3 + 40) = v37;
      *(_BYTE *)(a3 + 58) = v31;
      *(_WORD *)(a3 + 56) = v30;
    }
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_OWORD *)(a3 + 43) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t sub_24A1541B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = sub_24A215DB0();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    do
    {
      v6 = sub_24A215DB0();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v2 == v6 && v3 == v7)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v4 = sub_24A21659C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v2 = sub_24A215DB0();
      v3 = v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  sub_24A215DB0();
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = v9 == 0;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24A154314()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[132] = v0;
  v2 = sub_24A215A8C();
  v1[133] = v2;
  v1[134] = *(_QWORD *)(v2 - 8);
  v1[135] = swift_task_alloc();
  v1[136] = swift_task_alloc();
  v1[137] = swift_task_alloc();
  return swift_task_switch();
}

void sub_24A154390()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  _QWORD *v15;
  void (*v16)(void);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t (*v30)(void);
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  _QWORD *v53;
  void (*v54)(void);
  _QWORD *v55;
  void (*v56)(void);

  v1 = v0[137];
  v2 = v0[134];
  v3 = v0[133];
  v4 = sub_24A1B9D90();
  v0[138] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[139] = v5;
  v5(v1, v4, v3);
  v6 = sub_24A215A74();
  v7 = sub_24A2160F8();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_24A12D000, v6, v7, "Entering StartProcessingAudio()", v8, 2u);
    MEMORY[0x24BD0AAAC](v8, -1, -1);
  }
  v9 = v0[137];
  v10 = v0[134];
  v11 = v0[133];
  v12 = (_QWORD *)v0[132];

  v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v0[140] = v13;
  v13(v9, v11);
  *((_BYTE *)v12 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) = 0;
  *((_BYTE *)v12 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal) = 0;
  v14 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v12) + 0x180))(0);
  (*(void (**)(_QWORD))((*v14 & *v12) + 0x198))(0);
  v15 = *(_QWORD **)((char *)v12 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
  if (v15)
  {
    v16 = *(void (**)(void))((*v14 & *v15) + 0x268);
    v17 = v15;
    v16();

  }
  v18 = v0[132];
  v19 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel;
  v0[141] = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel;
  v20 = *(void (**)(uint64_t))(**(_QWORD **)(v18 + v19) + 888);
  v21 = swift_retain();
  v20(v21);
  v0[142] = 0;
  swift_release();
  v22 = (_QWORD *)v0[132];
  type metadata accessor for VACircularMatrixBuffer();
  v23 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + v19) + 168) + 248);
  v24 = swift_retain();
  v25 = v23(v24);
  swift_release();
  v26 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + v19) + 168) + 440);
  v27 = swift_retain();
  v28 = v26(v27);
  swift_release();
  v0[143] = sub_24A1D3E00(v25, v28);
  type metadata accessor for VATinyASRFeatureExtract();
  v29 = (void *)VATinyASRFeatureExtract.__allocating_init()();
  v0[144] = v29;
  v30 = *(uint64_t (**)(void))((*v14 & *v22) + 0x78);
  v0[145] = v30;
  v31 = (_QWORD *)v30();
  v32 = (_QWORD *)(*(uint64_t (**)(void))((*v14 & *v31) + 0x80))();

  v33 = (*(uint64_t (**)(void))((*v14 & *v32) + 0x148))();
  v0[146] = sub_24A1D3E00(66, v33);
  type metadata accessor for VAFeatureExtract();
  v34 = VAFeatureExtract.__allocating_init()();
  v0[147] = v34;
  v35 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + v19) + 168) + 248);
  v36 = swift_retain();
  v37 = v35(v36);
  swift_release();
  v38 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + v19) + 168) + 296);
  v39 = swift_retain();
  v40 = v38(v39);
  v41 = swift_release();
  v42 = __OFSUB__(v37, v40);
  v43 = v37 - v40;
  v0[148] = v43;
  if (v42)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v43 < 0)
  {
LABEL_14:
    sub_24A2163E0();
    return;
  }
  v44 = (_QWORD *)((uint64_t (*)(uint64_t))v30)(v41);
  v45 = (_QWORD *)(*(uint64_t (**)(void))((*v14 & *v44) + 0x80))();

  v46 = (*(uint64_t (**)(void))((*v14 & *v45) + 0xD0))();
  v47 = v43 * v46;
  if ((unsigned __int128)(v43 * (__int128)v46) >> 64 != (v43 * v46) >> 63)
  {
    __break(1u);
    goto LABEL_16;
  }
  v0[149] = v47;
  if (v47 + 0x4000000000000000 < 0)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v48 = (_QWORD *)v0[132];
  v49 = mach_absolute_time();
  v50 = (*(uint64_t (**)(uint64_t))((*v14 & *v48) + 0x3A8))(v49);
  v51 = (*(uint64_t (**)(uint64_t))((*v14 & *v48) + 0x118))(v50);
  v0[150] = v51;
  if (v51)
  {
    v52 = *(int **)(*(_QWORD *)v51 + 336);
    v0[151] = v52;
    v56 = (void (*)(void))((char *)v52 + *v52);
    v53 = (_QWORD *)swift_task_alloc();
    v0[152] = v53;
    *v53 = v0;
    v53[1] = sub_24A1548A4;
    v54 = v56;
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v55 = 0xD000000000000022;
    v55[1] = 0x800000024A2216B0;
    swift_willThrow();

    swift_release();
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v54 = (void (*)(void))v0[1];
  }
  v54();
}

uint64_t sub_24A1548A4(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 103) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A154900()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  float v15;
  void *v16;
  uint64_t (*v17)(void);
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  unint64_t v23;
  float v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD *v34;
  uint64_t (*v35)(void);
  _QWORD v36[7];
  unsigned __int8 v37;

  if (*(_BYTE *)(v0 + 103) == 1)
  {
    v1 = *(_QWORD *)(v0 + 1136);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1112))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1064));
    v2 = sub_24A215A74();
    v3 = sub_24A2160F8();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_24A12D000, v2, v3, "Processing loop done, reset tasr model", v4, 2u);
      MEMORY[0x24BD0AAAC](v4, -1, -1);
    }
    v5 = *(_QWORD *)(v0 + 1128);
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
    v7 = *(_QWORD *)(v0 + 1080);
    v8 = *(_QWORD *)(v0 + 1064);
    v9 = *(_QWORD *)(v0 + 1056);

    v6(v7, v8);
    v10 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v9 + v5) + 904);
    v11 = swift_retain();
    v12 = v10(v11);
    if (v1)
    {
      v16 = *(void **)(v0 + 1152);

      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v17 = *(uint64_t (**)(void))(v0 + 8);
    }
    else
    {
      v22 = v12;
      v23 = v13;
      v24 = v15;
      v25 = v14;
      v26 = swift_release();
      v27 = HIBYTE(v23) & 0xF;
      if ((v23 & 0x2000000000000000) == 0)
        v27 = v22 & 0xFFFFFFFFFFFFLL;
      v28 = (_QWORD *)MEMORY[0x24BEE4EA0];
      if (v27)
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v0 + 1200) + 280))(v36, v26);
        v29 = v37;
        swift_bridgeObjectRelease();
        v30 = swift_bridgeObjectRelease();
        if (v29 == 1)
          v31 = (*(uint64_t (**)(uint64_t))((*v28 & **(_QWORD **)(v0 + 1056)) + 0x370))(v30);
        else
          v31 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1200) + 360))(v30);
        (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, float))((*v28 & **(_QWORD **)(v0 + 1056)) + 0x410))(v22, v23, v25 & 1, 0, 0, v31, 0, v24);
        swift_bridgeObjectRelease();
      }
      v32 = *(void **)(v0 + 1176);
      v33 = *(void **)(v0 + 1152);
      v34 = *(_QWORD **)(v0 + 1056);
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD))((*v28 & *v34) + 0x200))(0);

      swift_release();
      swift_release();

      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v17 = *(uint64_t (**)(void))(v0 + 8);
    }
  }
  else
  {
    v18 = *(int **)(**(_QWORD **)(v0 + 1200) + 352);
    *(_QWORD *)(v0 + 1224) = v18;
    *(_QWORD *)(v0 + 1232) = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrConfig;
    *(_QWORD *)(v0 + 1240) = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_vadModel;
    v19 = *(_QWORD *)(v0 + 1136);
    *(_QWORD *)(v0 + 1256) = 0;
    *(_QWORD *)(v0 + 1248) = v19;
    *(_QWORD *)(v0 + 1264) = 1;
    v35 = (uint64_t (*)(void))((char *)v18 + *v18);
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1272) = v20;
    *v20 = v0;
    v20[1] = sub_24A154C9C;
    v17 = v35;
  }
  return v17();
}

uint64_t sub_24A154C9C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[127] = v2;
  v3[128] = a1;
  v3[129] = a2;
  v3[160] = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_24A154D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(void);
  int v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  uint64_t (*v41)(void);
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  float v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void (*v79)(void);
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;
  char v98;
  char v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  unint64_t v117;
  float v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  _QWORD *v127;
  void *v128;
  void *v129;
  _QWORD *v130;
  uint64_t (*v131)(uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  void *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  int v151;
  char v152;
  char v153;
  char v154;
  uint64_t v155;
  char v156;
  char v157;
  int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  _QWORD *v168;
  void *v169;
  void *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  BOOL v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  float v183;
  uint64_t v184;
  _QWORD *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  void *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(void);
  uint64_t v203[7];
  unsigned __int8 v204;

  v1 = *(_QWORD *)(v0 + 1280);
  v2 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 1288) = v2;
  if (v1)
    v3 = v2;
  else
    v3 = 0;
  if (v1)
    v4 = v1;
  else
    v4 = MEMORY[0x24BEE4AF8];
  if (!*(_QWORD *)(v4 + 16))
  {
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
    v48 = *(_QWORD *)(v0 + 1104);
    v49 = *(_QWORD *)(v0 + 1088);
    v50 = *(_QWORD *)(v0 + 1064);
    swift_bridgeObjectRelease();
    v47(v49, v48, v50);
    v51 = sub_24A215A74();
    v52 = sub_24A2160F8();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_24A12D000, v51, v52, "processing was stopped, stop predictions", v53, 2u);
      MEMORY[0x24BD0AAAC](v53, -1, -1);
    }
    v54 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
    v55 = *(_QWORD *)(v0 + 1088);
    v56 = *(_QWORD *)(v0 + 1064);

    v54(v55, v56);
    v57 = *(_QWORD *)(v0 + 1264);
    v58 = *(_QWORD *)(v0 + 1256);
    v59 = *(_QWORD *)(v0 + 1248);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1112))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1064));
    v60 = sub_24A215A74();
    v61 = sub_24A2160F8();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_24A12D000, v60, v61, "Processing loop done, reset tasr model", v62, 2u);
      MEMORY[0x24BD0AAAC](v62, -1, -1);
    }
    v63 = *(_QWORD *)(v0 + 1128);
    v64 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
    v65 = *(_QWORD *)(v0 + 1080);
    v66 = *(_QWORD *)(v0 + 1064);
    v67 = *(_QWORD *)(v0 + 1056);

    v64(v65, v66);
    v68 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v67 + v63) + 904);
    v69 = swift_retain();
    v70 = v68(v69);
    if (!v59)
    {
      v116 = v70;
      v117 = v71;
      v118 = v73;
      v119 = v72;
      v120 = swift_release();
      v121 = HIBYTE(v117) & 0xF;
      if ((v117 & 0x2000000000000000) == 0)
        v121 = v116 & 0xFFFFFFFFFFFFLL;
      if (v121)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v0 + 1200) + 280))(v203, v120);
        v122 = v204;
        swift_bridgeObjectRelease();
        v123 = swift_bridgeObjectRelease();
        if (v122 == 1)
          v124 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 1056)) + 0x370))(v123);
        else
          v124 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1200) + 360))(v123);
        (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, float))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 1056)) + 0x410))(v116, v117, v119 & 1, 0, v57, v124, v58, v118);
        swift_bridgeObjectRelease();
      }
      v144 = *(void **)(v0 + 1176);
      v145 = *(void **)(v0 + 1152);
      v146 = *(_QWORD **)(v0 + 1056);
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v146) + 0x200))(0);

      swift_release();
      swift_release();

      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v79 = *(void (**)(void))(v0 + 8);
      goto LABEL_81;
    }
    v74 = *(void **)(v0 + 1152);

    swift_release();
    swift_release();

    swift_release();
    swift_release();
    goto LABEL_80;
  }
  v201 = v3;
  v5 = *(_QWORD *)(v0 + 1200);
  v6 = *(_QWORD *)(v0 + 1144);
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 1152)) + 0x170))(v4);
  v8 = *(void (**)(void))(*(_QWORD *)v6 + 168);
  v9 = v7;
  v8();
  v10 = swift_bridgeObjectRelease();
  v11 = *(void (**)(void))(*(_QWORD *)v5 + 280);
  ((void (*)(uint64_t))v11)(v10);
  v12 = *(unsigned __int8 *)(v0 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 == 1
    || (v13 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v0 + 1056) + *(_QWORD *)(v0 + 1232)) + 408),
        v14 = swift_retain(),
        LOBYTE(v13) = v13(v14),
        v15 = swift_release(),
        (v13 & 1) != 0))
  {
    v16 = *(_QWORD *)(v0 + 1168);
    (*(void (**)(uint64_t))((*v9 & **(_QWORD **)(v0 + 1176)) + 0x170))(v4);
    (*(void (**)(void))(*(_QWORD *)v16 + 168))();
    v15 = swift_bridgeObjectRelease();
  }
  ((void (*)(uint64_t))v11)(v15);
  v17 = *(_DWORD *)(v0 + 112);
  v18 = *(_BYTE *)(v0 + 116);
  v19 = *(_BYTE *)(v0 + 117);
  v20 = *(_BYTE *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_BYTE *)(v0 + 152);
  v23 = *(_BYTE *)(v0 + 153);
  v24 = *(_DWORD *)(v0 + 156);
  v25 = *(_BYTE *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 176);
  v28 = *(_WORD *)(v0 + 184);
  v29 = *(_BYTE *)(v0 + 186);
  v30 = *(_BYTE *)(v0 + 187);
  v31 = *(_BYTE *)(v0 + 188);
  v32 = *(_BYTE *)(v0 + 189);
  v33 = *(_BYTE *)(v0 + 190);
  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 104);
  *(_DWORD *)(v0 + 200) = v17;
  *(_BYTE *)(v0 + 204) = v18;
  *(_BYTE *)(v0 + 205) = v19;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 120);
  *(_BYTE *)(v0 + 224) = v20;
  *(_QWORD *)(v0 + 232) = v21;
  *(_BYTE *)(v0 + 240) = v22;
  *(_BYTE *)(v0 + 241) = v23;
  *(_DWORD *)(v0 + 244) = v24;
  *(_BYTE *)(v0 + 248) = v25;
  *(_QWORD *)(v0 + 256) = v26;
  *(_QWORD *)(v0 + 264) = v27;
  *(_WORD *)(v0 + 272) = v28;
  *(_BYTE *)(v0 + 274) = v29;
  *(_BYTE *)(v0 + 275) = v30;
  *(_BYTE *)(v0 + 276) = v31;
  *(_BYTE *)(v0 + 277) = v32;
  *(_BYTE *)(v0 + 278) = v33;
  v34 = sub_24A1FA788();
  swift_bridgeObjectRelease();
  v35 = swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
    goto LABEL_26;
  v36 = (*(uint64_t (**)(uint64_t))((*v9 & **(_QWORD **)(v0 + 1056)) + 0x358))(v35);
  if (!v36)
  {
    v125 = *(void **)(v0 + 1176);
    v126 = *(void **)(v0 + 1152);
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v127 = 0xD00000000000002BLL;
    v127[1] = 0x800000024A221730;
    swift_willThrow();

    swift_release();
    swift_release();

    swift_release();
LABEL_80:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v79 = *(void (**)(void))(v0 + 8);
    goto LABEL_81;
  }
  v37 = *(_QWORD **)(v0 + 1056);
  *(_QWORD *)(v0 + 1040) = v36;
  v38 = (*(uint64_t (**)(void))((*v9 & *v37) + 0x370))();
  if (!v38)
  {
    v128 = *(void **)(v0 + 1176);
    v129 = *(void **)(v0 + 1152);
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v130 = 0xD00000000000002BLL;
    v130[1] = 0x800000024A221760;
    swift_willThrow();
    swift_release();

    swift_release();
    swift_release();

    goto LABEL_79;
  }
  v39 = *(_QWORD **)(v0 + 1056);
  *(_QWORD *)(v0 + 1048) = v38;
  v40 = (*(uint64_t (**)(void))((*v9 & *v39) + 0x178))();
  v41 = *(uint64_t (**)(void))(v0 + 1160);
  if ((v40 & 1) != 0)
  {
    v42 = (_QWORD *)v41();
    v43 = (_QWORD *)(*(uint64_t (**)(void))((*v9 & *v42) + 0x80))();

    v44 = (*(uint64_t (**)(void))((*v9 & *v43) + 0xD0))();
    if ((v44 & 0x8000000000000000) != 0)
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v45 = *(_QWORD *)(v4 + 16);
    if (v45 >= v44)
      v46 = v45 - v44;
    else
      v46 = 0;
    sub_24A158E44(v4, v4 + 32, v46, (2 * v45) | 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    v75 = swift_bridgeObjectRelease();
    v76 = *(_QWORD *)(v0 + 1184);
    if (v76)
    {
      if (*(_QWORD *)(v0 + 1264) % v76
        || (((void (*)(uint64_t))v11)(v75),
            v80 = *(unsigned __int8 *)(v0 + 366),
            swift_bridgeObjectRelease(),
            v81 = swift_bridgeObjectRelease(),
            v80 == 1)
        && ((*(uint64_t (**)(uint64_t))((*v9 & **(_QWORD **)(v0 + 1056)) + 0x3B8))(v81) & 1) == 0)
      {
        v77 = *(_QWORD *)(v0 + 1248);
      }
      else
      {
        v82 = *(_QWORD *)(v0 + 1240);
        v83 = *(_QWORD *)(v0 + 1056);
        v11();
        v84 = *(unsigned __int8 *)(v0 + 424);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v85 = *(_QWORD *)(v83 + v82);
        v200 = v85;
        if (v84 != 1)
        {
          v131 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v0 + 1056) + *(_QWORD *)(v0 + 1232))
                                                   + 408);
          swift_retain();
          v132 = swift_retain();
          LOBYTE(v131) = v131(v132);
          v133 = swift_release();
          if ((v131 & 1) != 0)
            v199 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1168) + 176))(v133);
          else
            v199 = 0;
          v147 = *(_QWORD *)(v0 + 1264);
          v148 = *(_QWORD *)(v0 + 1248);
          v149 = *(_QWORD **)(v0 + 1056);
          v150 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 1144) + 176))();
          v11();
          v151 = *(_DWORD *)(v0 + 464);
          v152 = *(_BYTE *)(v0 + 468);
          v153 = *(_BYTE *)(v0 + 469);
          v154 = *(_BYTE *)(v0 + 488);
          v155 = *(_QWORD *)(v0 + 496);
          v156 = *(_BYTE *)(v0 + 504);
          v157 = *(_BYTE *)(v0 + 505);
          v158 = *(_DWORD *)(v0 + 508);
          v159 = *(_BYTE *)(v0 + 512);
          v160 = *(_QWORD *)(v0 + 520);
          v161 = *(_QWORD *)(v0 + 528);
          v162 = *(_WORD *)(v0 + 536);
          v163 = *(_BYTE *)(v0 + 538);
          v164 = *(_BYTE *)(v0 + 539);
          v165 = *(_BYTE *)(v0 + 540);
          v166 = *(_BYTE *)(v0 + 541);
          v167 = *(_BYTE *)(v0 + 542);
          *(_QWORD *)(v0 + 544) = *(_QWORD *)(v0 + 456);
          *(_DWORD *)(v0 + 552) = v151;
          *(_BYTE *)(v0 + 556) = v152;
          *(_BYTE *)(v0 + 557) = v153;
          *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 472);
          *(_BYTE *)(v0 + 576) = v154;
          *(_QWORD *)(v0 + 584) = v155;
          *(_BYTE *)(v0 + 592) = v156;
          *(_BYTE *)(v0 + 593) = v157;
          *(_DWORD *)(v0 + 596) = v158;
          *(_BYTE *)(v0 + 600) = v159;
          *(_QWORD *)(v0 + 608) = v160;
          *(_QWORD *)(v0 + 616) = v161;
          *(_WORD *)(v0 + 624) = v162;
          *(_BYTE *)(v0 + 626) = v163;
          *(_BYTE *)(v0 + 627) = v164;
          *(_BYTE *)(v0 + 628) = v165;
          *(_BYTE *)(v0 + 629) = v166;
          *(_BYTE *)(v0 + 630) = v167;
          v168 = (_QWORD *)MEMORY[0x24BEE4EA0];
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v149) + 0x408))(v147, v200, v199, v150, v0 + 544);
          if (v148)
          {
            v169 = *(void **)(v0 + 1176);
            v170 = *(void **)(v0 + 1152);
            swift_bridgeObjectRelease();

            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();

            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_79;
          }
          v185 = v168;
          v197 = *(_QWORD *)(v0 + 984);
          v175 = *(_QWORD *)(v0 + 992);
          v183 = *(float *)(v0 + 1000);
          v186 = *(unsigned __int8 *)(v0 + 1004);
          v187 = *(_QWORD *)(v0 + 1008);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          v188 = swift_bridgeObjectRelease();
          if (v186)
          {
            ((void (*)(uint64_t))v11)(v188);
            v189 = *(unsigned __int8 *)(v0 + 804);
            swift_bridgeObjectRelease();
            v190 = swift_bridgeObjectRelease();
            v179 = v189 == 1;
            v180 = v185;
            if (v179)
              v182 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1200) + 360))(v190);
            else
              v182 = 0;
            v184 = 1;
            v191 = v201;
          }
          else
          {
            v184 = 0;
            v182 = 0;
            v191 = v201;
            v180 = v185;
          }
          v192 = v187;
          v174 = v197;
          goto LABEL_78;
        }
        v196 = *(_QWORD *)(v0 + 1264);
        v198 = *(_QWORD *)(v0 + 1248);
        v86 = *(_QWORD *)(v0 + 1144);
        v87 = *(_QWORD **)(v0 + 1056);
        v88 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1168) + 176);
        v89 = v85;
        v90 = swift_retain();
        v91 = v88(v90);
        v92 = (*(uint64_t (**)(void))(*(_QWORD *)v86 + 176))();
        v11();
        v93 = *(_DWORD *)(v0 + 816);
        v94 = *(_BYTE *)(v0 + 820);
        v95 = *(_BYTE *)(v0 + 821);
        v96 = *(_BYTE *)(v0 + 840);
        v97 = *(_QWORD *)(v0 + 848);
        v98 = *(_BYTE *)(v0 + 856);
        v99 = *(_BYTE *)(v0 + 857);
        v100 = *(_DWORD *)(v0 + 860);
        v101 = *(_BYTE *)(v0 + 864);
        v102 = *(_QWORD *)(v0 + 872);
        v103 = *(_QWORD *)(v0 + 880);
        v104 = *(_WORD *)(v0 + 888);
        v105 = *(_BYTE *)(v0 + 890);
        v106 = *(_BYTE *)(v0 + 891);
        v107 = *(_BYTE *)(v0 + 892);
        v108 = *(_BYTE *)(v0 + 893);
        v109 = *(_BYTE *)(v0 + 894);
        *(_QWORD *)(v0 + 896) = *(_QWORD *)(v0 + 808);
        *(_DWORD *)(v0 + 904) = v93;
        *(_BYTE *)(v0 + 908) = v94;
        *(_BYTE *)(v0 + 909) = v95;
        *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 824);
        *(_BYTE *)(v0 + 928) = v96;
        *(_QWORD *)(v0 + 936) = v97;
        *(_BYTE *)(v0 + 944) = v98;
        *(_BYTE *)(v0 + 945) = v99;
        *(_DWORD *)(v0 + 948) = v100;
        *(_BYTE *)(v0 + 952) = v101;
        *(_QWORD *)(v0 + 960) = v102;
        *(_QWORD *)(v0 + 968) = v103;
        *(_WORD *)(v0 + 976) = v104;
        *(_BYTE *)(v0 + 978) = v105;
        *(_BYTE *)(v0 + 979) = v106;
        *(_BYTE *)(v0 + 980) = v107;
        *(_BYTE *)(v0 + 981) = v108;
        *(_BYTE *)(v0 + 982) = v109;
        v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v87)
                                                                                               + 0x400))(v196, v201, v89, v91, v92, v0 + 896);
        if (v198)
        {
          v114 = *(void **)(v0 + 1176);
          v115 = *(void **)(v0 + 1152);
          swift_bridgeObjectRelease();

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          swift_release();
LABEL_79:
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
        v171 = v111;
        v172 = v112;
        v173 = v113;
        v174 = v110;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        if (v171)
        {
          v175 = v171;
          if ((v172 & 0x100000000) != 0)
          {
            v176 = swift_bridgeObjectRetain();
            ((void (*)(uint64_t))v11)(v176);
            swift_bridgeObjectRelease();
            v177 = *(unsigned __int8 *)(v0 + 716);
            swift_bridgeObjectRelease();
            v178 = swift_bridgeObjectRelease();
            v179 = v177 == 1;
            v180 = (_QWORD *)MEMORY[0x24BEE4EA0];
            if (v179)
            {
              v181 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 1056)) + 0x370))(v178);
              if (!v181)
              {
                v193 = *(void **)(v0 + 1176);
                v194 = *(void **)(v0 + 1152);
                swift_bridgeObjectRelease();
                sub_24A14C404();
                swift_allocError();
                *v195 = 0xD000000000000046;
                v195[1] = 0x800000024A2216E0;
                swift_willThrow();
                swift_release();

                swift_release();
                swift_release();

                goto LABEL_80;
              }
              v182 = v181;
              v183 = *(float *)&v172;
              v184 = 1;
              goto LABEL_75;
            }
          }
          else
          {
            v180 = (_QWORD *)MEMORY[0x24BEE4EA0];
          }
          v182 = 0;
          v184 = HIDWORD(v172) & 1;
          v183 = *(float *)&v172;
LABEL_75:
          v191 = v201;
          v192 = v173;
LABEL_78:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float))((*v180 & **(_QWORD **)(v0 + 1056)) + 0x410))(v174, v175, v184, v192, *(_QWORD *)(v0 + 1264), v182, v191, v183);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = 0;
          goto LABEL_29;
        }
        v77 = 0;
      }
LABEL_29:
      *(_QWORD *)(v0 + 1296) = v77;
      v202 = (void (*)(void))(**(int **)(v0 + 1208) + *(_QWORD *)(v0 + 1208));
      v78 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1304) = v78;
      *v78 = v0;
      v78[1] = sub_24A155CC4;
      v79 = v202;
LABEL_81:
      v79();
      return;
    }
    __break(1u);
    goto LABEL_84;
  }
  v134 = swift_bridgeObjectRelease();
  v135 = (_QWORD *)((uint64_t (*)(uint64_t))v41)(v134);
  v136 = (_QWORD *)(*(uint64_t (**)(void))((*v9 & *v135) + 0x80))();

  v137 = (*(uint64_t (**)(void))((*v9 & *v136) + 0xD0))();
  if ((v137 & 0x8000000000000000) != 0)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v138 = *(_QWORD *)(v4 + 16);
  if (v138 >= v137)
    v139 = v138 - v137;
  else
    v139 = 0;
  v140 = *(_QWORD *)(v0 + 1192);
  sub_24A158E44(v4, v4 + 32, v139, (2 * v138) | 1);
  swift_bridgeObjectRelease();
  v141 = *(_QWORD *)(*(_QWORD *)(v0 + 1040) + 16);
  if (v141 <= 2 * v140)
    goto LABEL_26;
  v142 = *(_QWORD *)(v0 + 1192);
  v143 = v141 - 2 * v142;
  if (__OFSUB__(v141, 2 * v142))
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (!v143)
    goto LABEL_26;
  if ((v143 & 0x8000000000000000) != 0)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v141 >= v143)
  {
    sub_24A158FD8(0, v143);
    goto LABEL_26;
  }
LABEL_88:
  __break(1u);
}

uint64_t sub_24A155CC4(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 191) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_24A155D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  float v17;
  void *v18;
  void (*v19)(void);
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void (*v34)(void);
  _QWORD v35[7];
  unsigned __int8 v36;

  v1 = *(_QWORD *)(v0 + 1296);
  v2 = *(_QWORD *)(v0 + 1264);
  if (*(_QWORD *)(v0 + 1280))
    v3 = *(_QWORD *)(v0 + 1288);
  else
    v3 = 0;
  if ((*(_BYTE *)(v0 + 191) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1112))(*(_QWORD *)(v0 + 1080), *(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1064));
    v4 = sub_24A215A74();
    v5 = sub_24A2160F8();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_24A12D000, v4, v5, "Processing loop done, reset tasr model", v6, 2u);
      MEMORY[0x24BD0AAAC](v6, -1, -1);
    }
    v7 = *(_QWORD *)(v0 + 1128);
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1120);
    v9 = *(_QWORD *)(v0 + 1080);
    v10 = *(_QWORD *)(v0 + 1064);
    v11 = *(_QWORD *)(v0 + 1056);

    v8(v9, v10);
    v12 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v11 + v7) + 904);
    v13 = swift_retain();
    v14 = v12(v13);
    if (v1)
    {
      v18 = *(void **)(v0 + 1152);

      swift_release();
      swift_release();

      swift_release();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v19 = *(void (**)(void))(v0 + 8);
    }
    else
    {
      v21 = v14;
      v22 = v15;
      v23 = v17;
      v24 = v16;
      v25 = swift_release();
      v26 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000) == 0)
        v26 = v21 & 0xFFFFFFFFFFFFLL;
      v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
      if (v26)
      {
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)(v0 + 1200) + 280))(v35, v25);
        v28 = v36;
        swift_bridgeObjectRelease();
        v29 = swift_bridgeObjectRelease();
        if (v28 == 1)
          v30 = (*(uint64_t (**)(uint64_t))((*v27 & **(_QWORD **)(v0 + 1056)) + 0x370))(v29);
        else
          v30 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 1200) + 360))(v29);
        (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, float))((*v27 & **(_QWORD **)(v0 + 1056)) + 0x410))(v21, v22, v24 & 1, 0, v2, v30, v3, v23);
        swift_bridgeObjectRelease();
      }
      v31 = *(void **)(v0 + 1176);
      v32 = *(void **)(v0 + 1152);
      v33 = *(_QWORD **)(v0 + 1056);
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD))((*v27 & *v33) + 0x200))(0);

      swift_release();
      swift_release();

      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v19 = *(void (**)(void))(v0 + 8);
    }
    goto LABEL_11;
  }
  *(_QWORD *)(v0 + 1256) = v3;
  *(_QWORD *)(v0 + 1248) = v1;
  *(_QWORD *)(v0 + 1264) = v2 + 1;
  if (v2 != -1)
  {
    v34 = (void (*)(void))(**(int **)(v0 + 1224) + *(_QWORD *)(v0 + 1224));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1272) = v20;
    *v20 = v0;
    v20[1] = sub_24A154C9C;
    v19 = v34;
LABEL_11:
    v19();
    return;
  }
  __break(1u);
}

_QWORD *sub_24A1560B0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void (*v30)(uint64_t);
  _QWORD *v31;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  void (*v42)(void);
  _QWORD *v43;
  uint64_t v44;
  id v45;
  void *v46;
  _QWORD *v47;
  char v48;
  char v49;
  _QWORD *v50;
  char v51;
  char v52;
  void (*v53)(uint64_t);
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  void (*v61)(uint64_t);
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  void (*v67)(_QWORD **__return_ptr, uint64_t);
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  void (*v83)(_QWORD **__return_ptr, uint64_t);
  uint64_t v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  const char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  _QWORD *v100;
  int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  _QWORD *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  _QWORD *v115;
  int v116;
  int v117;
  __int128 v118;
  __int128 v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __int128 v125;
  char v126;
  _QWORD *v127;
  char v128;
  char v129;
  float v130;
  char v131;
  __int128 v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  _QWORD *v140;

  v8 = v7;
  v122 = a1;
  v14 = sub_24A215A8C();
  v15 = a3;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  if (!a3)
  {
    sub_24A14C404();
    swift_allocError();
    *v31 = 0xD000000000000029;
    v31[1] = 0x800000024A2213F0;
    swift_willThrow();
    return v6;
  }
  v120 = v6;
  v105 = v22;
  v104 = v21;
  v103 = a2;
  v102 = (char *)&v95 - v19;
  v121 = a5;
  v106 = v20;
  v107 = v18;
  v109 = *(_QWORD **)a6;
  v23 = *((_DWORD *)a6 + 2);
  v108 = a6[12];
  v117 = a6[13];
  v119 = *((_OWORD *)a6 + 1);
  v116 = a6[32];
  v115 = (_QWORD *)*((_QWORD *)a6 + 5);
  v114 = a6[48];
  v113 = a6[49];
  v24 = *((float *)a6 + 13);
  v112 = a6[56];
  v118 = *((_OWORD *)a6 + 4);
  v111 = a6[80];
  v110 = a6[81];
  v25 = a6[82];
  v26 = a6[83];
  v27 = a6[84];
  v28 = a6[85];
  v29 = a6[86];
  v30 = *(void (**)(uint64_t))(*v15 + 128);
  swift_retain();
  v6 = v15;
  v30(a4);
  v140 = v8;
  if (v8)
  {
    swift_release();
    return v6;
  }
  v96 = v29;
  v97 = v28;
  v98 = v26;
  v99 = v25;
  v100 = v15;
  v101 = v27;
  v33 = v120;
  v34 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v35 = (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & *v120) + 0x208))(v24);
  v36 = swift_bridgeObjectRelease();
  if ((v35 & 1) == 0)
  {
    v37 = v121;
    v38 = v101;
    if ((v35 & 0x100) == 0)
    {
      if ((v35 & 0x10000) != 0)
      {
        v59 = *(_QWORD **)((char *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
        if (v59)
        {
          v60 = v34;
          v61 = *(void (**)(uint64_t))((*v34 & *v59) + 0x220);
          v62 = v59;
          v61(v122);
          v34 = v60;

        }
      }
      else
      {
        v36 = (*(uint64_t (**)(uint64_t))((*v34 & *v33) + 0x178))(v36);
        if ((v36 & 1) == 0)
        {
          *(_QWORD *)((char *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_lastModelInputBeforeStartOfSpeech) = v37;
          swift_bridgeObjectRetain();
          v36 = swift_bridgeObjectRelease();
        }
      }
    }
    goto LABEL_21;
  }
  v39 = v34;
  v40 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo;
  v41 = *(_QWORD **)((char *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
  if (v41)
  {
    v42 = *(void (**)(void))((*v39 & *v41) + 0x268);
    v43 = v41;
    v42();

  }
  type metadata accessor for VATimingInfo();
  v44 = (*(uint64_t (**)(void))((*v39 & *v33) + 0x298))();
  v45 = sub_24A1F508C(v44);
  v46 = *(void **)((char *)v33 + v40);
  *(_QWORD *)((char *)v33 + v40) = v45;

  v47 = *(_QWORD **)((char *)v33 + v40);
  v48 = v117;
  v49 = v116;
  v50 = v115;
  v51 = v114;
  v52 = v113;
  if (v47)
  {
    v53 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v47) + 0x200);
    v54 = v47;
    v53(v122);

  }
  v123 = v109;
  LODWORD(v124) = v23;
  BYTE4(v124) = v108;
  BYTE5(v124) = v48;
  v125 = v119;
  v126 = v49;
  v127 = v50;
  v128 = v51;
  v129 = v52;
  v130 = v24;
  v131 = v112;
  v132 = v118;
  v133 = v111;
  v134 = v110;
  v135 = v99;
  v136 = v98;
  v38 = v101;
  v137 = v101;
  v138 = v97;
  v139 = v96;
  v36 = sub_24A1FA788();
  v37 = v121;
  v34 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if ((v36 & 1) == 0)
    goto LABEL_21;
  v6 = v33;
  v55 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v33) + 0x358))();
  if (!v55)
  {
    sub_24A14C404();
    swift_allocError();
    v90 = "Expected audioDebugBytesBeforeSpeech to be non-nil";
LABEL_40:
    *v89 = 0xD000000000000032;
    v89[1] = (unint64_t)(v90 - 32) | 0x8000000000000000;
    swift_willThrow();
    swift_release();
    return v6;
  }
  v56 = v55;
  v57 = *(uint64_t (**)(uint64_t))((*v34 & *v33) + 0x370);
  v58 = swift_bridgeObjectRetain();
  v6 = v33;
  if (!v57(v58))
  {
    swift_bridgeObjectRelease_n();
    sub_24A14C404();
    swift_allocError();
    v90 = "Expected audioDebugBytesDuringSpeech to be non-nil";
    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  v123 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24A1472A0(v56);
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRelease();
  v38 = v101;
LABEL_21:
  if (((*(uint64_t (**)(uint64_t))((*v34 & *v33) + 0x418))(v36) & 1) != 0)
  {
    v63 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_lastModelInputBeforeStartOfSpeech;
    v64 = *(_QWORD *)((char *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_lastModelInputBeforeStartOfSpeech);
    v65 = &unk_25790A000;
    if (v64)
    {
      v66 = v34;
      v6 = *(_QWORD **)((char *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel);
      v67 = *(void (**)(_QWORD **__return_ptr, uint64_t))(*v6 + 896);
      swift_bridgeObjectRetain();
      swift_retain();
      v68 = v140;
      v67(&v123, v64);
      if (v68)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return v6;
      }
      v84 = v124;
      v140 = v123;
      v85 = *(float *)&v125;
      v86 = BYTE4(v125);
      *(_QWORD *)&v119 = *((_QWORD *)&v125 + 1);
      swift_release();
      v87 = swift_bridgeObjectRelease();
      if ((v86 & v38) == 1)
        v88 = (*(uint64_t (**)(uint64_t))((*v66 & *v33) + 0x370))(v87);
      else
        v88 = 0;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, float))((*v66 & *v33) + 0x410))(v140, v84, v86, v119, v122, v88, v103, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v91 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v102, v91, v107);
      v92 = sub_24A215A74();
      v93 = sub_24A2160F8();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v94 = 0;
        _os_log_impl(&dword_24A12D000, v92, v93, "reset model input from before start of speech after using it", v94, 2u);
        MEMORY[0x24BD0AAAC](v94, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v106 + 8))(v102, v107);
      *(_QWORD *)((char *)v33 + v63) = 0;
      swift_bridgeObjectRelease();
      v37 = v121;
      v65 = (_QWORD *)&unk_25790A000;
    }
    v83 = *(void (**)(_QWORD **__return_ptr, uint64_t))(**(_QWORD **)((char *)v33 + v65[247]) + 896);
    swift_retain();
    v83(&v123, v37);
    v6 = v123;
    swift_release();
    swift_release();
    return v6;
  }
  if (((*(uint64_t (**)(void))((*v34 & *v33) + 0x178))() & 1) != 0)
  {
    v69 = sub_24A1B9D90();
    v70 = v106;
    v71 = v105;
    v72 = v107;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v105, v69, v107);
    v73 = sub_24A215A74();
    v74 = sub_24A2160F8();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v75 = 0;
      _os_log_impl(&dword_24A12D000, v73, v74, "got final result before end of speech, waiting for end of speech", v75, 2u);
      MEMORY[0x24BD0AAAC](v75, -1, -1);
    }

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
  }
  else if (*((_BYTE *)v33 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) == 1)
  {
    v76 = sub_24A1B9D90();
    v77 = v106;
    v78 = v104;
    v79 = v107;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v104, v76, v107);
    v80 = sub_24A215A74();
    v81 = sub_24A2160F8();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v82 = 0;
      _os_log_impl(&dword_24A12D000, v80, v81, "speech ended, but waiting for final result", v82, 2u);
      MEMORY[0x24BD0AAAC](v82, -1, -1);
    }

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v79);
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t sub_24A156AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  float v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  void (*v19)(uint64_t);
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(void);
  _QWORD *v25;
  uint64_t v26;
  id v27;
  void *v28;
  _QWORD *v29;
  void (*v30)(uint64_t);
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  void (*v36)(_QWORD *__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  _QWORD v43[2];
  int v44;
  char v45;
  uint64_t v46;

  v8 = v7;
  v9 = v6;
  if (a2 && a3)
  {
    v14 = *(float *)(a5 + 52);
    v15 = *(void (**)(uint64_t))(*(_QWORD *)a2 + 128);
    swift_retain();
    v15(a3);
    if (v8)
      return swift_release();
    v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v17 = (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & *v6) + 0x208))(v14);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      v21 = v16;
      v22 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo;
      v23 = *(_QWORD **)((char *)v9 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
      if (v23)
      {
        v24 = *(void (**)(void))((*v21 & *v23) + 0x268);
        v25 = v23;
        v24();

        v21 = (_QWORD *)MEMORY[0x24BEE4EA0];
      }
      type metadata accessor for VATimingInfo();
      v26 = (*(uint64_t (**)(void))((*v21 & *v9) + 0x298))();
      v27 = sub_24A1F508C(v26);
      v28 = *(void **)((char *)v9 + v22);
      *(_QWORD *)((char *)v9 + v22) = v27;

      v29 = *(_QWORD **)((char *)v9 + v22);
      if (!v29)
        goto LABEL_14;
      v30 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v29) + 0x200);
      v31 = v29;
      v30(a1);

      v32 = *(void **)((char *)v9 + v22);
      if (!v32)
        goto LABEL_14;
      v33 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v34 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v9) + 0x3A0);
      v20 = v32;
      v35 = v34();
      (*(void (**)(uint64_t))((*v33 & *v20) + 0x1E0))(v35);
    }
    else
    {
      if ((v17 & 0x10100) != 0x10000)
        goto LABEL_14;
      v18 = *(_QWORD **)((char *)v9 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
      if (!v18)
        goto LABEL_14;
      v19 = *(void (**)(uint64_t))((*v16 & *v18) + 0x220);
      v20 = v18;
      v19(a1);
    }

LABEL_14:
    swift_release();
  }
  v36 = *(void (**)(_QWORD *__return_ptr, uint64_t))(**(_QWORD **)((char *)v9
                                                                           + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrModel)
                                                             + 896);
  swift_retain();
  v36(v43, a4);
  if (v8)
    return swift_release();
  v38 = v43[0];
  v39 = v43[1];
  v40 = v44;
  v41 = v45;
  v42 = v46;
  result = swift_release();
  *(_QWORD *)a6 = v38;
  *(_QWORD *)(a6 + 8) = v39;
  *(_DWORD *)(a6 + 16) = v40;
  *(_BYTE *)(a6 + 20) = v41;
  *(_QWORD *)(a6 + 24) = v42;
  return result;
}

void sub_24A156D78(uint64_t a1, unint64_t a2, char a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t, uint64_t);
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(uint64_t, unint64_t, uint64_t);
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void (*v46)(uint64_t, unint64_t, _QWORD);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _QWORD *v70;
  uint64_t (*v71)(void);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  char v83;
  id v84;
  char v85;
  id v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void (*v90)(uint64_t *__return_ptr, uint64_t);
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(uint64_t, unint64_t);
  _QWORD *v98;
  _BYTE v99[4];
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  __int128 v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint8_t *v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int16 v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  uint64_t v141;

  v8 = v7;
  v120 = (uint8_t *)a6;
  v14 = sub_24A215A8C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = &v99[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v99[-v19];
  v21 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v21 = a1 & 0xFFFFFFFFFFFFLL;
  if (v21)
  {
    v123 = a1;
    v121 = a7;
    v22 = sub_24A1B9D90();
    v23 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
    if ((a3 & 1) != 0)
    {
      v23(v20, v22, v14);
      swift_bridgeObjectRetain_n();
      v24 = sub_24A215A74();
      v25 = sub_24A2160F8();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc();
        v119 = v7;
        v27 = (uint8_t *)v26;
        v28 = swift_slowAlloc();
        v124 = v28;
        *(_DWORD *)v27 = 136315138;
        v120 = v27 + 4;
        swift_bridgeObjectRetain();
        v141 = sub_24A148270(v123, a2, &v124);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v24, v25, "Got tasr final: \"%s\"", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v28, -1, -1);
        v29 = v27;
        v8 = v119;
        MEMORY[0x24BD0AAAC](v29, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v20, v14);
      v35 = v121;
      v36 = v122;
      v37 = *(_QWORD **)((char *)v122 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
      v38 = v123;
      if (v37)
      {
        v39 = *(void (**)(uint64_t, unint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v37) + 0x1F8);
        v40 = v37;
        v39(v38, a2, 1);

      }
      v41 = sub_24A159384(v38, a2, v35, a4);
      if (v8)
        return;
      v42 = (uint64_t)v41;
    }
    else
    {
      v23(v18, v22, v14);
      swift_bridgeObjectRetain_n();
      v30 = sub_24A215A74();
      v31 = sub_24A2160F8();
      v32 = os_log_type_enabled(v30, v31);
      v119 = v7;
      if (v32)
      {
        v33 = (uint8_t *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        v124 = v34;
        *(_DWORD *)v33 = 136315138;
        v118 = v33 + 4;
        swift_bridgeObjectRetain();
        v141 = sub_24A148270(v123, a2, &v124);
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v30, v31, "Got tasr partial: \"%s\"", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v34, -1, -1);
        MEMORY[0x24BD0AAAC](v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v43 = (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
      v36 = v122;
      v42 = v123;
      v44 = *(_QWORD **)((char *)v122 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
      v45 = (_QWORD *)MEMORY[0x24BEE4EA0];
      if (v44)
      {
        v46 = *(void (**)(uint64_t, unint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v44) + 0x1F8);
        v47 = v44;
        v46(v42, a2, 0);

      }
      v48 = (*(uint64_t (**)(uint64_t))((*v45 & *v36) + 0x118))(v43);
      if (v48)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v48 + 280))(&v124);
        swift_release();
        v49 = v124;
        v50 = v133;
        v51 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal;
        if (*((_BYTE *)v36 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal) == 1)
          goto LABEL_29;
        v52 = v125;
        v53 = BYTE4(v125);
        v54 = BYTE5(v125);
        v55 = v126;
        v56 = v127;
        v57 = v128;
        v58 = v129;
        v59 = BYTE1(v129);
        v60 = HIDWORD(v129);
        v61 = v130;
        v62 = v132;
        v63 = v134;
        v64 = v135;
        v65 = v136;
        v66 = v137;
        v67 = v138;
        v68 = v139;
        v69 = v140;
        *((_BYTE *)v36 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) = 1;
        if (!v68)
          goto LABEL_29;
        v105 = v62;
        v106 = v61;
        v107 = v59;
        v108 = v58;
        v109 = v57;
        v110 = v56;
        v111 = v53;
        v112 = v55;
        v113 = v67;
        v114 = v66;
        v115 = v65;
        v116 = v64;
        v117 = v63;
        LODWORD(v118) = v69;
        v104 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo;
        v70 = *(_QWORD **)((char *)v36 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
        if (v70)
        {
          v71 = *(uint64_t (**)(void))((*v45 & *v70) + 0x148);
          v72 = v70;
          v73 = v71();
          v36 = v122;
          v74 = v73;

        }
        else
        {
          v74 = 0;
        }
        sub_24A153EDC(v74, (uint64_t)v120, (uint64_t)&v124, a4);
        if (v125)
        {
          v120 = (uint8_t *)v125;
          v101 = v124;
          v103 = v128;
          v102 = v129;
          v77 = v130 | (v131 << 16);
          v79 = *((_QWORD *)&v126 + 1);
          v78 = v127;
          v100 = v126;
          v124 = v49;
          LODWORD(v125) = v52;
          BYTE4(v125) = v111;
          BYTE5(v125) = v54;
          v126 = v112;
          LOBYTE(v127) = v110;
          v128 = v109;
          LOBYTE(v129) = v108;
          BYTE1(v129) = v107;
          HIDWORD(v129) = v60;
          LOBYTE(v130) = v106;
          v132 = v105;
          v133 = v50;
          v134 = v117;
          v135 = v116;
          v136 = v115;
          v137 = v114;
          v138 = v113;
          v139 = 1;
          v140 = v118;
          v80 = sub_24A1FA788();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v81 = 0;
          if ((v80 & 1) != 0)
          {
            v82 = v104;
            if (v121)
              v81 = (void *)sub_24A159130(v121);
          }
          else
          {
            v82 = v104;
          }
          type metadata accessor for VAKeywordResult();
          sub_24A135F88(&qword_25790A810);
          v93 = swift_allocObject();
          *(_OWORD *)(v93 + 16) = xmmword_24A218650;
          v94 = (uint64_t)v120;
          *(_QWORD *)(v93 + 32) = v101;
          *(_QWORD *)(v93 + 40) = v94;
          *(_DWORD *)(v93 + 48) = v100;
          *(_QWORD *)(v93 + 56) = v79;
          *(_QWORD *)(v93 + 64) = v78;
          v95 = v102;
          *(_QWORD *)(v93 + 72) = v103;
          *(_QWORD *)(v93 + 80) = v95;
          *(_BYTE *)(v93 + 88) = v77 & 1;
          *(_BYTE *)(v93 + 89) = BYTE1(v77) & 1;
          *(_BYTE *)(v93 + 90) = BYTE2(v77) & 1;
          v42 = VAKeywordResult.__allocating_init(detections:)(v93);
          v36 = v122;
          *((_BYTE *)v122 + v51) = 1;
          v96 = *(_QWORD **)((char *)v36 + v82);
          if (v96)
          {
            v97 = *(void (**)(uint64_t, unint64_t))((*v45 & *v96) + 0x1F0);
            v98 = v96;
            v97(v123, a2);

          }
        }
        else
        {
LABEL_29:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v81 = 0;
          v42 = 0;
        }
        type metadata accessor for VAASRResult();
        v83 = *((_BYTE *)v36 + v51);
        v84 = v81;
        swift_bridgeObjectRetain();
        v85 = sub_24A1516F0();
        v86 = sub_24A1CDF38(v123, a2, 0, v85 & 1, v83, v83, (uint64_t)v81);
        v87 = (void *)(*(uint64_t (**)(void))((*v45 & *v36) + 0x298))();
        if (v87)
        {
          objc_msgSend(v87, sel_speechResultsWithResult_, v86);

          swift_unknownObjectRelease();
        }
        else
        {

        }
        v88 = v119;

        if (v88)
          return;
      }
      else
      {
        sub_24A14C404();
        v75 = swift_allocError();
        *v76 = 0xD000000000000016;
        v76[1] = 0x800000024A2217E0;
        swift_willThrow();
        if (v75)
          return;
      }
    }
    if (v42)
    {
      v89 = *(void **)((char *)v36 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
      if (v89)
      {
        v90 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v42 + 144);
        v91 = v89;
        v92 = swift_retain();
        v90(&v124, v92);
        if (!v125)
        {
          swift_release();
          __break(1u);
          return;
        }
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v91) + 0x1E8))(v124, v125);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_retain();
      }
      (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v36) + 0x420))(v42, v121);
      swift_release_n();
    }
  }
}

uint64_t sub_24A157710()
{
  _QWORD *v0;

  if (((*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x178))() & 1) != 0)
    return 1;
  else
    return *((unsigned __int8 *)v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference);
}

uint64_t sub_24A157758(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t result;
  float *v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[8];
  uint64_t v39;

  v6 = sub_24A2157A4();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v2) + 0x118))(v8);
  if (!v12)
  {
    sub_24A14C404();
    swift_allocError();
    *v27 = 0x75716552206C694ELL;
    v27[1] = 0xEF6F666E49747365;
    return swift_willThrow();
  }
  v13 = v12;
  v14 = (*(uint64_t (**)(void))((*v11 & *v2) + 0x148))();
  if (!v14)
  {
    sub_24A14C404();
    swift_allocError();
    *v28 = 0xD000000000000011;
    v28[1] = 0x800000024A2214A0;
    swift_willThrow();
    return swift_release();
  }
  v15 = v14;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 144))(v38);
  v16 = v38[1];
  swift_bridgeObjectRelease();
  if (!v16)
  {
    sub_24A14C404();
    swift_allocError();
    *v29 = 0xD000000000000014;
    v29[1] = 0x800000024A2214C0;
    swift_willThrow();
    goto LABEL_21;
  }
  v39 = v3;
  v37 = v7;
  type metadata accessor for VAInstrumentedKeywordResult();
  v17 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 88))();
  v18 = VAInstrumentedKeywordResult.__allocating_init(detections:)(v17);
  if (!a2)
  {
LABEL_18:
    v30 = v39;
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 384))(v18);
    if (v30)
    {
      swift_release();
      swift_release();
      return swift_release();
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 136))(v31);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v15 + 80))(v18, v10);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v6);
    swift_release();
LABEL_21:
    swift_release();
    return swift_release();
  }
  v19 = *(_QWORD *)(a2 + 16);
  v20 = sub_24A157AF8(0, v19);
  v21 = *(void (**)(uint64_t))(*(_QWORD *)v18 + 320);
  v21(v20);
  if (!v19)
  {
    v21(MEMORY[0x24BEE4AF8]);
    goto LABEL_18;
  }
  v33 = v21;
  v34 = v18;
  v35 = v6;
  v36 = v15;
  v38[0] = MEMORY[0x24BEE4AF8];
  sub_24A1586C4(0, v19, 0);
  result = v38[0];
  v23 = (float *)(a2 + 32);
  while (1)
  {
    v24 = *v23;
    if ((~*(_DWORD *)v23 & 0x7F800000) == 0)
      break;
    if (v24 <= -32769.0)
      goto LABEL_24;
    if (v24 >= 32768.0)
      goto LABEL_25;
    v38[0] = result;
    v26 = *(_QWORD *)(result + 16);
    v25 = *(_QWORD *)(result + 24);
    if (v26 >= v25 >> 1)
    {
      sub_24A1586C4(v25 > 1, v26 + 1, 1);
      result = v38[0];
    }
    *(_QWORD *)(result + 16) = v26 + 1;
    *(_WORD *)(result + 2 * v26 + 32) = (int)v24;
    ++v23;
    if (!--v19)
    {
      v6 = v35;
      v15 = v36;
      v18 = v34;
      v33(result);
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24A157AF8(unsigned int a1, unint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  unint64_t v6;
  int16x8_t v7;
  int16x8_t *v8;
  unint64_t v9;
  unint64_t v10;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  if (!a2)
    return MEMORY[0x24BEE4AF8];
  result = sub_24A215EF4();
  *(_QWORD *)(result + 16) = a2;
  v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    v6 = 0;
LABEL_9:
    v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  v7 = vdupq_n_s16(a1);
  v8 = (int16x8_t *)(result + 48);
  v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2)
    goto LABEL_9;
  return result;
}

uint64_t sub_24A157BE0()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  v24 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x388);
  result = v24();
  v2 = result;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 64);
  v25 = 0;
  v26 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v27 = (unint64_t)(v6 + 63) >> 6;
  if ((v7 & v5) != 0)
    goto LABEL_6;
LABEL_7:
  while (2)
  {
    v11 = v4 + 1;
    if (!__OFADD__(v4, 1))
    {
      if (v11 < v27)
      {
        v12 = *(_QWORD *)(v26 + 8 * v11);
        ++v4;
        if (v12)
          goto LABEL_24;
        v4 = v11 + 1;
        if (v11 + 1 >= v27)
          goto LABEL_35;
        v12 = *(_QWORD *)(v26 + 8 * v4);
        if (v12)
          goto LABEL_24;
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          goto LABEL_35;
        v12 = *(_QWORD *)(v26 + 8 * v4);
        if (v12)
          goto LABEL_24;
        v4 = v11 + 3;
        if (v11 + 3 >= v27)
          goto LABEL_35;
        v12 = *(_QWORD *)(v26 + 8 * v4);
        if (v12)
          goto LABEL_24;
        v4 = v11 + 4;
        if (v11 + 4 >= v27)
          goto LABEL_35;
        v12 = *(_QWORD *)(v26 + 8 * v4);
        if (v12)
        {
LABEL_24:
          v8 = (v12 - 1) & v12;
          for (i = __clz(__rbit64(v12)) + (v4 << 6); ; i = v9 | (v4 << 6))
          {
            v14 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
            v16 = *v14;
            v15 = v14[1];
            sub_24A14C688();
            swift_bridgeObjectRetain();
            v17 = sub_24A2162C0();
            if ((v17 & 1) == 0)
              break;
            if (v3)
            {
              swift_bridgeObjectRetain();
              v18 = sub_24A215D5C();
              v19 = sub_24A215D5C();
              swift_bridgeObjectRelease();
              if (v19 >= v18)
                break;
              v17 = swift_bridgeObjectRelease();
            }
            v20 = ((uint64_t (*)(uint64_t))v24)(v17);
            if (*(_QWORD *)(v20 + 16) && (v21 = sub_24A148970(v16, v15), (v22 & 1) != 0))
            {
              v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v21);
              v3 = v23[1];
              v25 = *v23;
              swift_bridgeObjectRetain();
            }
            else
            {
              v25 = 0;
              v3 = 0;
            }
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            if (!v8)
              goto LABEL_7;
LABEL_6:
            v9 = __clz(__rbit64(v8));
            v8 &= v8 - 1;
          }
          result = swift_bridgeObjectRelease();
          if (!v8)
            continue;
          goto LABEL_6;
        }
        v13 = v11 + 5;
        if (v13 < v27)
        {
          v12 = *(_QWORD *)(v26 + 8 * v13);
          if (v12)
          {
            v4 = v13;
            goto LABEL_24;
          }
          while (1)
          {
            v4 = v13 + 1;
            if (__OFADD__(v13, 1))
              goto LABEL_37;
            if (v4 >= v27)
              break;
            v12 = *(_QWORD *)(v26 + 8 * v4);
            ++v13;
            if (v12)
              goto LABEL_24;
          }
        }
      }
LABEL_35:
      swift_release();
      return v25;
    }
    break;
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void sub_24A157EB4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A157EE0()
{
  uint64_t v0;

  sub_24A152354(v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_tasrDelegate);
  sub_24A14D184(v0 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_strategyProvider);
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id VATinyASRSpotter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VATinyASRSpotter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A158074(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790A818);
  v42 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A158398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_24A148970(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_24A15850C();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_24A158074(v17, a5 & 1);
  v23 = sub_24A148970(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

void *sub_24A15850C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_24A135F88(&qword_25790A818);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1586C4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24A1586E0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24A1586E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A808);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8])
      memmove(v13, v14, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A158838(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a2[2];
    v16 = a2 + 7;
    while (1)
    {
      v6 = sub_24A215D14();
      v8 = v7;
      if (v5)
      {
        v9 = v6;
        v10 = a2[4] == v6 && a2[5] == v7;
        if (v10 || (result = sub_24A21659C(), (result & 1) != 0))
        {
LABEL_20:
          swift_bridgeObjectRelease();
          return v4;
        }
        if (v5 != 1)
          break;
      }
LABEL_3:
      swift_bridgeObjectRelease();
      if (++v4 == v2)
        return 0;
    }
    v12 = v16;
    v13 = 1;
    while (1)
    {
      v14 = v13 + 1;
      if (__OFADD__(v13, 1))
        break;
      if (*(v12 - 1) == v9 && *v12 == v8)
        goto LABEL_20;
      result = sub_24A21659C();
      if ((result & 1) != 0)
        goto LABEL_20;
      v12 += 2;
      ++v13;
      if (v14 == v5)
        goto LABEL_3;
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_24A158974(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_24A14804C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A158ADC()
{
  uint64_t inited;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  sub_24A135F88(&qword_25790A460);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218630;
  *(_QWORD *)(inited + 32) = 97;
  *(_QWORD *)(inited + 40) = 0xE100000000000000;
  *(_QWORD *)(inited + 48) = 28257;
  *(_QWORD *)(inited + 56) = 0xE200000000000000;
  *(_QWORD *)(inited + 64) = 6645876;
  *(_QWORD *)(inited + 72) = 0xE300000000000000;
  *(_QWORD *)(inited + 80) = 29801;
  *(_QWORD *)(inited + 88) = 0xE200000000000000;
  sub_24A14C688();
  v1 = (_QWORD *)sub_24A216284();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_24A158838(v2, (_QWORD *)inited);
  v5 = v4;
  result = swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    v3 = v1[2];
    v7 = v3;
    goto LABEL_40;
  }
  v7 = v3 + 1;
  if (__OFADD__(v3, 1))
    goto LABEL_45;
  v8 = v1[2];
  if (v7 != v8)
  {
    v9 = *(_QWORD *)(inited + 32);
    v10 = *(_QWORD *)(inited + 40);
    v30 = v3;
    v11 = 2 * v3;
    v12 = v3 + 1;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v12 >= v8)
        goto LABEL_42;
      v13 = &v1[v11];
      v15 = sub_24A215D14();
      v16 = v9 == v15 && v10 == v14;
      if (v16
        || (v17 = v14, (sub_24A21659C() & 1) != 0)
        || (*(_QWORD *)(inited + 48) == v15 ? (v18 = *(_QWORD *)(inited + 56) == v17) : (v18 = 0),
            v18
         || (sub_24A21659C() & 1) != 0
         || *(_QWORD *)(inited + 64) == v15 && *(_QWORD *)(inited + 72) == v17
         || (sub_24A21659C() & 1) != 0
         || *(_QWORD *)(inited + 80) == v15 && *(_QWORD *)(inited + 88) == v17
         || (sub_24A21659C() & 1) != 0))
      {
        result = swift_bridgeObjectRelease();
      }
      else
      {
        result = swift_bridgeObjectRelease();
        if (v12 != v30)
        {
          if ((v30 & 0x8000000000000000) != 0)
            goto LABEL_47;
          v20 = v1[2];
          if (v30 >= v20)
            goto LABEL_48;
          if (v12 >= (uint64_t)v20)
            goto LABEL_49;
          v21 = &v1[2 * v30 + 4];
          v22 = v21[1];
          v23 = v13[7];
          v28 = *v21;
          v29 = v13[6];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v1 = sub_24A1506C0(v1);
          v24 = &v1[2 * v30];
          v24[4] = v29;
          v24[5] = v23;
          result = swift_bridgeObjectRelease();
          if (v12 >= v1[2])
            goto LABEL_50;
          v25 = &v1[v11];
          v25[6] = v28;
          v25[7] = v22;
          result = swift_bridgeObjectRelease();
        }
        if (__OFADD__(v30++, 1))
          goto LABEL_46;
      }
      v19 = v12 + 1;
      if (__OFADD__(v12, 1))
        goto LABEL_43;
      v8 = v1[2];
      ++v12;
      v11 += 2;
      if (v19 == v8)
      {
        v7 = v19;
        v3 = v30;
        goto LABEL_39;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_39:
  if (v7 >= v3)
  {
LABEL_40:
    sub_24A158974(v3, v7);
    swift_bridgeObjectRelease();
    sub_24A135F88(&qword_257909948);
    sub_24A14C9E8();
    v27 = sub_24A215C60();
    swift_bridgeObjectRelease();
    return v27;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

char *sub_24A158E44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v9 > *((_QWORD *)v7 + 3) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_24A147E34(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *((_QWORD *)v7 + 2);
  if ((*((_QWORD *)v7 + 3) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = &v7[4 * v14 + 32];
  v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6])
    goto LABEL_27;
  result = (char *)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *((_QWORD *)v7 + 2);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *((_QWORD *)v7 + 2) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

char *sub_24A158FD8(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = sub_24A147E34(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[4 * a1 + 32];
    v15 = &v4[4 * a2 + 32];
    if (a1 != a2 || result >= &v15[4 * v14])
      result = (char *)memmove(result, v15, 4 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A159130(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  float *v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  unint64_t v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 16);
  sub_24A157AF8(0, v2);
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_24A1586C4(0, v2, 0);
    v3 = (_QWORD *)v15;
    v4 = (float *)(a1 + 32);
    while (1)
    {
      v5 = *v4;
      if ((~*(_DWORD *)v4 & 0x7F800000) == 0)
        break;
      if (v5 <= -32769.0)
        goto LABEL_16;
      if (v5 >= 32768.0)
        goto LABEL_17;
      v15 = (uint64_t)v3;
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_24A1586C4(v6 > 1, v7 + 1, 1);
        v3 = (_QWORD *)v15;
      }
      v3[2] = v7 + 1;
      *((_WORD *)v3 + v7 + 16) = (int)v5;
      ++v4;
      if (!--v2)
        goto LABEL_9;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  v15 = 0x40CF400000000000;
  v16 = xmmword_24A219AE0;
  v17 = xmmword_24A219AF0;
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initWithStreamDescription_, &v15);
  if (!v8)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  v9 = v3[2];
  if (HIDWORD(v9))
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    v10 = v8;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v8, v9);
    if (!v11)
      goto LABEL_19;
    v12 = v11;
    v13 = objc_msgSend(v11, sel_int16ChannelData);
    if (v13)
      v13 = (_QWORD *)*v13;
    memcpy(v13, v3 + 4, 2 * v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setFrameLength_, v9);

    return (uint64_t)v12;
  }
  return result;
}

char *sub_24A159384(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint8_t *v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(void);
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t (*v42)(void);
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  char v55;
  id v56;
  void *v57;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  unsigned __int8 v98;

  v6 = v5;
  v7 = v4;
  v80 = a3;
  v11 = sub_24A215A8C();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v17 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v4) + 0x118))(v13);
  if (!v17)
  {
    sub_24A14C404();
    swift_allocError();
    *v31 = 0xD000000000000016;
    v31[1] = 0x800000024A2217E0;
    swift_willThrow();
    return v15;
  }
  v78 = a2;
  v79 = a1;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 280))(&v81);
  v18 = swift_release();
  v19 = v81;
  v20 = v82;
  v75 = BYTE5(v82);
  LODWORD(v76) = BYTE4(v82);
  v73 = v84;
  v74 = v83;
  v72 = v85;
  v71 = v86;
  v70 = v87;
  v69 = BYTE1(v87);
  v21 = HIDWORD(v87);
  v68 = v88;
  v22 = v91;
  v67 = v90;
  v66 = v92;
  v65 = v93;
  v64 = v94;
  v63 = v95;
  v62 = v96;
  v61 = v97;
  v60 = v98;
  *((_BYTE *)v4 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_mustWaitForFinalToStopInference) = 0;
  if (((*(uint64_t (**)(uint64_t))((*v16 & *v4) + 0x3B8))(v18) & 1) != 0)
  {
    v23 = v19;
    v24 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v24, v11);
    v25 = sub_24A215A74();
    v26 = sub_24A2160F8();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v77 = v5;
      v28 = v27;
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_24A12D000, v25, v26, "block inference pending till final, ublocked now", v27, 2u);
      v29 = v28;
      v6 = v77;
      MEMORY[0x24BD0AAAC](v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v30 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & *v7) + 0x3C0))(0);
    sub_24A153B60();
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    v19 = v23;
  }
  else
  {
    v30 = (_QWORD *)MEMORY[0x24BEE4EA0];
  }
  v81 = v19;
  LODWORD(v82) = v20;
  BYTE4(v82) = v76;
  BYTE5(v82) = v75;
  v83 = v74;
  v84 = v73;
  LOBYTE(v85) = v72;
  v86 = v71;
  LOBYTE(v87) = v70;
  BYTE1(v87) = v69;
  HIDWORD(v87) = v21;
  LOBYTE(v88) = v68;
  v90 = v67;
  v91 = v22;
  v92 = v66;
  v93 = v65;
  v94 = v64;
  v95 = v63;
  v96 = v62;
  v97 = v61;
  v98 = v60;
  v32 = sub_24A1FA788();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = 0;
  v77 = v6;
  if ((v32 & 1) != 0)
  {
    v34 = v78;
    if (v80)
      v33 = (void *)sub_24A159130(v80);
  }
  else
  {
    v34 = v78;
  }
  v35 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal;
  if (*((_BYTE *)v7 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal) == 1)
  {
    v15 = 0;
    *((_BYTE *)v7 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_usedPartialAsFinal) = 0;
    goto LABEL_24;
  }
  v36 = OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo;
  v37 = *(_QWORD **)((char *)v7 + OBJC_IVAR____TtC12VoiceActions16VATinyASRSpotter_timingInfo);
  if (v37)
  {
    v38 = *(uint64_t (**)(void))((*v30 & *v37) + 0x148);
    v39 = v37;
    v40 = v38();

    v41 = *(_QWORD **)((char *)v7 + v36);
    if (v41)
    {
      v42 = *(uint64_t (**)(void))((*v30 & *v41) + 0x160);
      v43 = v41;
      v44 = v42();

      goto LABEL_21;
    }
  }
  else
  {
    v40 = 0;
  }
  v44 = 0;
LABEL_21:
  sub_24A153EDC(v40, v44, (uint64_t)&v81, a4);
  v45 = v82;
  if (v82)
  {
    LODWORD(v80) = v89;
    v46 = v88;
    v47 = v86;
    v76 = v87;
    v49 = v84;
    v48 = v85;
    v50 = v83;
    v51 = v81;
    type metadata accessor for VAKeywordResult();
    sub_24A135F88(&qword_25790A810);
    v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_24A218650;
    *(_QWORD *)(v52 + 32) = v51;
    *(_QWORD *)(v52 + 40) = v45;
    v34 = v78;
    *(_DWORD *)(v52 + 48) = v50;
    *(_QWORD *)(v52 + 56) = v49;
    *(_QWORD *)(v52 + 64) = v48;
    *(_QWORD *)(v52 + 72) = v47;
    v30 = (_QWORD *)MEMORY[0x24BEE4EA0];
    *(_QWORD *)(v52 + 80) = v76;
    *(_BYTE *)(v52 + 88) = v46 & 1;
    *(_BYTE *)(v52 + 89) = HIBYTE(v46) & 1;
    *(_BYTE *)(v52 + 90) = v80 & 1;
    v15 = (char *)VAKeywordResult.__allocating_init(detections:)(v52);
  }
  else
  {
    v15 = 0;
  }
LABEL_24:
  type metadata accessor for VAASRResult();
  v53 = *((_BYTE *)v7 + v35);
  v54 = v33;
  swift_bridgeObjectRetain();
  v55 = sub_24A1516F0();
  v56 = sub_24A1CDF38(v79, v34, 1, v55 & 1, v53, v53, (uint64_t)v33);
  v57 = (void *)(*(uint64_t (**)(void))((*v30 & *v7) + 0x298))();
  if (v57)
  {
    objc_msgSend(v57, sel_speechResultsWithResult_, v56);

    swift_unknownObjectRelease();
  }
  else
  {

  }
  return v15;
}

uint64_t method lookup function for VATinyASRSpotter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VATinyASRSpotter.tasrDelegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VATinyASRSpotter.tasrDelegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VATinyASRSpotter.tasrDelegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VATinyASRSpotter.updateRuntimeParameters(runtimeParams:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x3D8))();
}

uint64_t sub_24A159A10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A135F88(&qword_25790A7C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id VASpeechDetectorInput.buffer.getter()
{
  id *v0;

  return *v0;
}

uint64_t VASpeechDetectorInput.hostTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VASpeechDetectorInput.init(buffer:hostTime:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t VASpeechDetectorInput.description.getter()
{
  void **v0;
  void *v1;
  uint64_t v2;

  v1 = *v0;
  sub_24A216308();
  objc_msgSend(v1, sel_frameLength);
  v2 = sub_24A216584();
  swift_bridgeObjectRelease();
  sub_24A215D98();
  sub_24A216584();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  return v2;
}

id VASpeechDetectorOutput.buffer.getter()
{
  id *v0;

  return *v0;
}

uint64_t VASpeechDetectorOutput.bufferStartTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VASpeechDetectorOutput.startOfSpeechInBuffer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t VASpeechDetectorOutput.endOfSpeechInBuffer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t VASpeechDetectorOutput.startOfSpeechTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t VASpeechDetectorOutput.startOfSpeechTime.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.startOfSpeechTime.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.endOfSpeechTime.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t VASpeechDetectorOutput.startOfSpeechSampleOffsetInBuffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t VASpeechDetectorOutput.startOfSpeechSampleOffsetInBuffer.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = result;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.startOfSpeechSampleOffsetInBuffer.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.startOfSpeechTimeInSecsInBuffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t VASpeechDetectorOutput.startOfSpeechTimeInSecsInBuffer.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = result;
  *(_BYTE *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.startOfSpeechTimeInSecsInBuffer.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.endOfSpeechSampleOffsetInBuffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t VASpeechDetectorOutput.endOfSpeechSampleOffsetInBuffer.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.endOfSpeechSampleOffsetInBuffer.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.endOfSpeechTimeInSecsInBuffer.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t VASpeechDetectorOutput.endOfSpeechTimeInSecsInBuffer.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.endOfSpeechTimeInSecsInBuffer.modify())()
{
  return nullsub_1;
}

unint64_t VASpeechDetectorOutput.averageSilenceProbabilityOver30ms.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 116) | ((unint64_t)*(unsigned __int8 *)(v0 + 120) << 32);
}

uint64_t VASpeechDetectorOutput.averageSilenceProbabilityOver30ms.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 116) = result;
  *(_BYTE *)(v1 + 120) = BYTE4(result) & 1;
  return result;
}

uint64_t (*VASpeechDetectorOutput.averageSilenceProbabilityOver30ms.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.afterEndOfSpeech.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 121);
}

uint64_t VASpeechDetectorOutput.afterEndOfSpeech.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 121) = result;
  return result;
}

uint64_t (*VASpeechDetectorOutput.afterEndOfSpeech.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.lastAudioAfterEndOfSpeech.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 122);
}

uint64_t VASpeechDetectorOutput.lastAudioAfterEndOfSpeech.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 122) = result;
  return result;
}

uint64_t (*VASpeechDetectorOutput.lastAudioAfterEndOfSpeech.modify())()
{
  return nullsub_1;
}

uint64_t VASpeechDetectorOutput.init(buffer:bufferStartTime:startOfSpeechInBuffer:endOfSpeechInBuffer:startOfSpeechTime:endOfSpeechTime:afterEndOfSpeech:lastAudioAfterEndOfSpeech:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_BYTE *)(a9 + 32) = a6 & 1;
  *(_QWORD *)(a9 + 40) = a7;
  *(_BYTE *)(a9 + 48) = a8 & 1;
  *(_QWORD *)(a9 + 56) = 0;
  *(_BYTE *)(a9 + 64) = 1;
  *(_QWORD *)(a9 + 72) = 0;
  *(_BYTE *)(a9 + 80) = 1;
  *(_QWORD *)(a9 + 88) = 0;
  *(_BYTE *)(a9 + 96) = 1;
  *(_QWORD *)(a9 + 104) = 0;
  *(_BYTE *)(a9 + 112) = 1;
  *(_DWORD *)(a9 + 116) = 0;
  *(_BYTE *)(a9 + 120) = 1;
  *(_BYTE *)(a9 + 121) = a10;
  *(_BYTE *)(a9 + 122) = a11;
  return result;
}

uint64_t VASpeechDetectorOutput.description.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v3;

  v1 = *(id *)v0;
  if ((*(_BYTE *)(v0 + 16) != 1
     || (*(_BYTE *)(v0 + 32) & 1) != 0
     || (*(_BYTE *)(v0 + 64) & 1) != 0
     || (*(_BYTE *)(v0 + 80) & 1) != 0)
    && (*(_BYTE *)(v0 + 17) != 1
     || (*(_BYTE *)(v0 + 48) & 1) != 0
     || (*(_BYTE *)(v0 + 96) & 1) != 0
     || (*(_BYTE *)(v0 + 112) & 1) != 0))
  {
    if (!*(_BYTE *)(v0 + 122) && !*(_BYTE *)(v0 + 121))
    {
      objc_msgSend(*(id *)v0, sel_frameLength);
      v3 = sub_24A216584();
      sub_24A215D98();
      sub_24A216584();
      sub_24A215D98();
      swift_bridgeObjectRelease();
      return v3;
    }
    sub_24A216308();
    swift_bridgeObjectRelease();
    v3 = 91;
    objc_msgSend(v1, sel_frameLength);
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
    sub_24A216308();
    sub_24A215D98();
    sub_24A216044();
    sub_24A215D98();
    objc_msgSend(v1, sel_frameLength);
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    sub_24A216584();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    sub_24A216014();
    sub_24A215D98();
    swift_bridgeObjectRelease();
  }
  sub_24A215D98();
  return v3;
}

uint64_t VASpeechDetector.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  VASpeechDetector.init()();
  return v0;
}

uint64_t VASpeechDetector.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStream;
  v3 = sub_24A135F88(&qword_25790A828);
  v18 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
  v5 = sub_24A135F88(&qword_25790A830);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadTask) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionTask) = 0;
  v6 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadModel;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadModel) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_speechInProgress) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_prepareToTurnOffSpeechInProgress) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_floatBuffer) = MEMORY[0x24BEE4AF8];
  v7 = v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStream;
  v8 = sub_24A135F88(&qword_25790A838);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
  v10 = sub_24A135F88(&qword_25790A840);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_DWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_minimumSilenceProbability) = 1050253722;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_numFramesForAveraging) = 3;
  type metadata accessor for VASilenceModel();
  v11 = (uint64_t *)sub_24A1FF1F8();
  v12 = *v11;
  v13 = v11[1];
  swift_bridgeObjectRetain();
  v14 = sub_24A1A446C(v12, v13);
  if (!v19)
  {
    *(_QWORD *)(v1 + v6) = v14;
    swift_release();
    if (*(_QWORD *)(v1 + v6))
    {
      type metadata accessor for StopProcessingActor();
      *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_stopProcessingActor) = sub_24A1655D0();
      type metadata accessor for VAStrideConfiguration();
      v15 = static VAStrideConfiguration.forVAD()();
      *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_strideConfig) = v15;
      type metadata accessor for IngestionAudioBufferActor();
      *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionBufferActor) = sub_24A165908((uint64_t)v15, 0, 0, 1);
      return v1;
    }
    sub_24A216308();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A15A5EC();
    swift_allocError();
    *v17 = 0xD00000000000001ELL;
    v17[1] = 0x800000024A2219C0;
    swift_willThrow();
  }
  sub_24A13DAA8(v18, &qword_25790A848);
  sub_24A13DAA8(v4, &qword_25790A850);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24A13DAA8(v7, &qword_25790A858);
  sub_24A13DAA8(v9, &qword_25790A860);
  type metadata accessor for VASpeechDetector();
  swift_deallocPartialClassInstance();
  return v1;
}

uint64_t type metadata accessor for VASpeechDetector()
{
  uint64_t result;

  result = qword_2579159C0;
  if (!qword_2579159C0)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_24A15A5EC()
{
  unint64_t result;

  result = qword_25790A868;
  if (!qword_25790A868)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASpeechDetectorError, &type metadata for VASpeechDetectorError);
    atomic_store(result, (unint64_t *)&qword_25790A868);
  }
  return result;
}

uint64_t sub_24A15A630@<X0>(int a1@<W0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *);
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD v73[2];
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  LODWORD(v84) = a1;
  v73[0] = a2;
  v4 = sub_24A135F88(&qword_25790A860);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v92 = (uint64_t)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v90 = (char *)v73 - v7;
  v8 = sub_24A135F88(&qword_25790A858);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v93 = (uint64_t)v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v85 = (char *)v73 - v11;
  v12 = sub_24A135F88(&qword_25790A870);
  v82 = *(_QWORD *)(v12 - 8);
  v83 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v81 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_24A135F88(&qword_25790A840);
  v87 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v86 = (char *)v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_24A135F88(&qword_25790A838);
  v88 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v80 = (char *)v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v16);
  v79 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_24A135F88(&qword_25790A850);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v75 = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v76 = (char *)v73 - v21;
  v22 = sub_24A135F88(&qword_25790A848);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_24A135F88(&qword_25790A878);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_24A135F88(&qword_25790A830);
  v29 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v31 = (char *)v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_24A135F88(&qword_25790A828);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)v73 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(void (**)(char *))(v26 + 104);
  v78 = *MEMORY[0x24BEE6A10];
  v36(v28);
  sub_24A215F84();
  v37 = *(void (**)(char *, uint64_t))(v26 + 8);
  v38 = (uint64_t)v75;
  v37(v28, v25);
  v39 = v35;
  v40 = v77;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v24, v39, v32);
  v41 = v32;
  v42 = v31;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v24, 0, 1, v41);
  v43 = (uint64_t)v76;
  v44 = v74;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v76, v31, v74);
  v45 = v44;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v43, 0, 1, v44);
  v46 = v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStream;
  swift_beginAccess();
  sub_24A15BA84((uint64_t)v24, v46, &qword_25790A848);
  swift_endAccess();
  v47 = v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
  swift_beginAccess();
  sub_24A15BA84(v43, v47, &qword_25790A850);
  swift_endAccess();
  sub_24A1360A0(v47, v38, &qword_25790A850);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v38, 1, v45))
  {
    sub_24A13DAA8(v38, &qword_25790A850);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v42, v38, v45);
    sub_24A13DAA8(v38, &qword_25790A850);
    sub_24A215F90();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v42, v45);
  }
  *(float *)(v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_minimumSilenceProbability) = a3;
  v48 = sub_24A215F78();
  v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56);
  v50 = (uint64_t)v79;
  v49(v79, 1, 1, v48);
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = v40;
  swift_retain();
  *(_QWORD *)(v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionTask) = sub_24A15B54C(v50, (uint64_t)&unk_25790A888, (uint64_t)v51);
  swift_release();
  v49((char *)v50, 1, 1, v48);
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = 0;
  *(_QWORD *)(v52 + 24) = 0;
  *(_QWORD *)(v52 + 32) = v40;
  *(_BYTE *)(v52 + 40) = v84 & 1;
  swift_retain();
  *(_QWORD *)(v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadTask) = sub_24A15B54C(v50, (uint64_t)&unk_25790A898, v52);
  swift_release();
  v54 = v81;
  v53 = v82;
  v55 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v82 + 104))(v81, v78, v83);
  v56 = v80;
  v57 = v86;
  sub_24A215F84();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  v58 = v88;
  v59 = (uint64_t)v85;
  v60 = v56;
  v61 = v91;
  v84 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
  v84(v85, v60, v91);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v61);
  v62 = v87;
  v64 = v89;
  v63 = (uint64_t)v90;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v90, v57, v89);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v62 + 56))(v63, 0, 1, v64);
  v65 = v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStream;
  swift_beginAccess();
  sub_24A15BA84(v59, v65, &qword_25790A858);
  swift_endAccess();
  v66 = v40 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
  swift_beginAccess();
  sub_24A15BA84(v63, v66, &qword_25790A860);
  swift_endAccess();
  v67 = v66;
  v68 = v92;
  sub_24A1360A0(v67, v92, &qword_25790A860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v68, 1, v64))
  {
    sub_24A13DAA8(v68, &qword_25790A860);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v57, v68, v64);
    sub_24A13DAA8(v68, &qword_25790A860);
    sub_24A215F90();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v57, v64);
  }
  v69 = v65;
  v70 = v93;
  sub_24A1360A0(v69, v93, &qword_25790A858);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v70, 1, v61) != 1)
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v84)(v73[0], v70, v61);
  sub_24A13DAA8(v70, &qword_25790A858);
  sub_24A15A5EC();
  swift_allocError();
  *v71 = 0xD00000000000001ELL;
  v71[1] = 0x800000024A2219E0;
  return swift_willThrow();
}

uint64_t sub_24A15AEE8(uint64_t a1)
{
  return sub_24A15BAE4(a1, &qword_25790AB90, "Input stream finished successfully.", "Input stream was cancelled.");
}

uint64_t sub_24A15AF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[10] = a4;
  v5 = sub_24A135F88(&qword_25790ABA0);
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  sub_24A135F88(&qword_25790A848);
  v4[14] = swift_task_alloc();
  v6 = sub_24A135F88(&qword_25790A828);
  v4[15] = v6;
  v4[16] = *(_QWORD *)(v6 - 8);
  v4[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A15AFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStream;
  swift_beginAccess();
  sub_24A1360A0(v4, v3, &qword_25790A848);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_24A13DAA8(*(_QWORD *)(v0 + 112), &qword_25790A848);
    sub_24A15A5EC();
    swift_allocError();
    *v5 = 0xD000000000000013;
    v5[1] = 0x800000024A221C50;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
    sub_24A215FB4();
    v7 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionBufferActor;
    *(_QWORD *)(v0 + 144) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_floatBuffer;
    *(_QWORD *)(v0 + 152) = v7;
    *(_QWORD *)(v0 + 160) = 0;
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v8;
    *v8 = v0;
    v8[1] = sub_24A15B154;
    return sub_24A215FC0();
  }
}

uint64_t sub_24A15B154()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A15B1A8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  AVAudioPCMBuffer v4;
  Class isa;
  Swift::OpaquePointer *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t, uint64_t);

  v1 = (void *)v0[8];
  v0[22] = v1;
  if (!v1)
  {
    v16 = v0[16];
    v15 = v0[17];
    v17 = v0[15];
    (*(void (**)(_QWORD, _QWORD))(v0[12] + 8))(v0[13], v0[11]);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  v2 = v0[9];
  v3 = (void *)(v0[10] + v0[18]);
  swift_beginAccess();
  v4.super.super.isa = (Class)v1;
  isa = v4.super.super.isa;
  v4.super._impl = v3;
  VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(v4, v6);
  if (v7)
  {
    v9 = v0[16];
    v8 = v0[17];
    v10 = v0[15];
    v12 = v0[12];
    v11 = v0[13];
    v13 = v0[11];
    swift_endAccess();

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  v20 = v0[18];
  v19 = v0[19];
  v21 = v0[10];
  swift_endAccess();

  v22 = *(_QWORD *)(v21 + v19);
  v0[23] = v22;
  v23 = *(_QWORD *)(v21 + v20);
  v0[24] = v23;
  v25 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v22 + 376)
                                                 + *(_QWORD *)(*(_QWORD *)v22 + 376));
  swift_retain();
  swift_bridgeObjectRetain();
  v24 = (_QWORD *)swift_task_alloc();
  v0[25] = v24;
  *v24 = v0;
  v24[1] = sub_24A15B380;
  return v25(v23, v2);
}

uint64_t sub_24A15B380()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A15B3F4()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 208);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_24A15B154;
  return sub_24A215FC0();
}

uint64_t sub_24A15B468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A15B4F8()
{
  return sub_24A15B9F8();
}

uint64_t sub_24A15B500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A15FEEC;
  return sub_24A15AF04((uint64_t)v3, v4, v5, v2);
}

uint64_t sub_24A15B54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_24A215F78();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_24A215F6C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_24A13DAA8(a1, &qword_25790A7C0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_24A215F54();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_24A15B680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_BYTE *)(v5 + 144) = a5;
  *(_QWORD *)(v5 + 64) = a4;
  v7 = sub_24A135F88(&qword_25790A840);
  *(_QWORD *)(v5 + 72) = v7;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  sub_24A135F88(&qword_25790A860);
  *(_QWORD *)(v5 + 96) = swift_task_alloc();
  v8 = sub_24A135F88(&qword_25790A830);
  *(_QWORD *)(v5 + 104) = v8;
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 120) = swift_task_alloc();
  sub_24A135F88(&qword_25790A850);
  *(_QWORD *)(v5 + 128) = swift_task_alloc();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 136) = v9;
  *v9 = v5;
  v9[1] = sub_24A15B778;
  return sub_24A15CBC4(a5);
}

uint64_t sub_24A15B778()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A15B810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(v0 + 144) == 1)
  {
    v1 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
    swift_beginAccess();
    sub_24A1360A0(v4, v1, &qword_25790A850);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
    v6 = *(_QWORD *)(v0 + 128);
    if (v5)
    {
      sub_24A13DAA8(*(_QWORD *)(v0 + 128), &qword_25790A850);
    }
    else
    {
      v8 = *(_QWORD *)(v0 + 112);
      v7 = *(_QWORD *)(v0 + 120);
      v9 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v7, *(_QWORD *)(v0 + 128), v9);
      sub_24A13DAA8(v6, &qword_25790A850);
      sub_24A215FA8();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 72);
    v12 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
    swift_beginAccess();
    sub_24A1360A0(v13, v10, &qword_25790A860);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
    v15 = *(_QWORD *)(v0 + 96);
    if (v14)
    {
      sub_24A13DAA8(*(_QWORD *)(v0 + 96), &qword_25790A860);
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 80);
      v16 = *(_QWORD *)(v0 + 88);
      v18 = *(_QWORD *)(v0 + 72);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 16))(v16, *(_QWORD *)(v0 + 96), v18);
      sub_24A13DAA8(v15, &qword_25790A860);
      sub_24A215FA8();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A15B9F0()
{
  return sub_24A15B9F8();
}

uint64_t sub_24A15B9F8()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A15BA30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_24A15FEEC;
  return sub_24A15B680((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_24A15BA84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_24A135F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A15BAC8(uint64_t a1)
{
  return sub_24A15BAE4(a1, &qword_25790AB98, "Output stream finished successfully.", "Output stream was cancelled.");
}

uint64_t sub_24A15BAE4(uint64_t a1, uint64_t *a2, const char *a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  int v27;
  int v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  const char *v38;

  v38 = a4;
  v7 = sub_24A215A8C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v37 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v37 - v15;
  v17 = sub_24A135F88(a2);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == *MEMORY[0x24BEE69B0])
  {
    v22 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v22, v7);
    v23 = sub_24A215A74();
    v24 = sub_24A2160F8();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_24A12D000, v23, v24, a3, v25, 2u);
      MEMORY[0x24BD0AAAC](v25, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }
  else
  {
    v27 = v21;
    v28 = *MEMORY[0x24BEE69B8];
    v29 = sub_24A1B9D90();
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    if (v27 == v28)
    {
      v30(v14, v29, v7);
      v31 = sub_24A215A74();
      v32 = sub_24A2160F8();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_24A12D000, v31, v32, v38, v33, 2u);
        MEMORY[0x24BD0AAAC](v33, -1, -1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
    }
    else
    {
      v30(v11, v29, v7);
      v34 = sub_24A215A74();
      v35 = sub_24A2160F8();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_24A12D000, v34, v35, "Unknown termination reason.", v36, 2u);
        MEMORY[0x24BD0AAAC](v36, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
  }
}

uint64_t sub_24A15BDEC(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t (*v28)(char *, uint64_t);
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  char *v47;
  uint8_t *v48;
  uint8_t *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  uint8_t *v55;
  uint8_t *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a1;
  v65 = a2;
  v3 = sub_24A215A8C();
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v61 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v60 = (char *)&v59 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v59 - v8;
  v69 = sub_24A135F88(&qword_25790A8A0);
  v9 = *(char **)(v69 - 8);
  v10 = MEMORY[0x24BDAC7A8](v69);
  v12 = (id *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v59 - v13;
  v15 = sub_24A135F88(&qword_25790A850);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_24A135F88(&qword_25790A830);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v2 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
  swift_beginAccess();
  sub_24A1360A0(v22, (uint64_t)v17, &qword_25790A850);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_24A13DAA8((uint64_t)v17, &qword_25790A850);
    sub_24A15A5EC();
    swift_allocError();
    *v23 = 0xD000000000000022;
    v23[1] = 0x800000024A221A00;
    return swift_willThrow();
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  v67 = v66;
  v68 = v65;
  v25 = v66;
  sub_24A215F9C();
  v26 = v69;
  (*((void (**)(id *, char *, uint64_t))v9 + 2))(v12, v14, v69);
  v27 = (*((uint64_t (**)(id *, uint64_t))v9 + 11))(v12, v26);
  if (v27 == *MEMORY[0x24BEE69E0])
  {

    (*((void (**)(char *, uint64_t))v9 + 1))(v14, v26);
    v28 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
    return v28(v21, v18);
  }
  v29 = v27;
  v59 = v25;
  v65 = v19;
  v66 = v14;
  if (v27 == *MEMORY[0x24BEE69D8])
  {
    (*((void (**)(id *, uint64_t))v9 + 12))(v12, v26);

    v30 = sub_24A1B9D90();
    v31 = v62;
    v32 = v63;
    v33 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v30, v64);
    v34 = sub_24A215A74();
    v35 = sub_24A216104();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_24A12D000, v34, v35, "Failed to enqueue audio", v36, 2u);
      MEMORY[0x24BD0AAAC](v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
    (*((void (**)(char *, uint64_t))v9 + 1))(v66, v69);
    v28 = *(uint64_t (**)(char *, uint64_t))(v65 + 8);
    return v28(v21, v18);
  }
  v37 = *MEMORY[0x24BEE69D0];
  v38 = sub_24A1B9D90();
  v40 = v63;
  v39 = v64;
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v42 = v21;
  if (v29 == v37)
  {
    v43 = v60;
    v41(v60, v38, v64);
    v44 = sub_24A215A74();
    v45 = sub_24A216104();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = v9;
      v47 = v42;
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_24A12D000, v44, v45, "Stream was terminated, failed to enqueue audio", v48, 2u);
      v49 = v48;
      v42 = v47;
      v9 = v46;
      MEMORY[0x24BD0AAAC](v49, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
    (*((void (**)(char *, uint64_t))v9 + 1))(v66, v69);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v42, v18);
  }
  else
  {
    v50 = v61;
    v41(v61, v38, v64);
    v51 = sub_24A215A74();
    v52 = sub_24A216104();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v62 = v9;
      v54 = v42;
      v55 = v53;
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_24A12D000, v51, v52, "Unknown yield result", v53, 2u);
      v56 = v55;
      v42 = v54;
      v9 = v62;
      MEMORY[0x24BD0AAAC](v56, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v40 + 8))(v50, v39);
    v57 = (void (*)(char *, uint64_t))*((_QWORD *)v9 + 1);
    v58 = v69;
    v57(v66, v69);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v18);
    return ((uint64_t (*)(id *, uint64_t))v57)(v12, v58);
  }
}

void sub_24A15C394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  dispatch_semaphore_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[6];

  v2 = v0;
  v3 = sub_24A135F88(&qword_25790A850);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790A848);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadTask;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadTask))
  {
    v22[5] = v1;
    v13 = dispatch_semaphore_create(0);
    v14 = sub_24A215F78();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    v15[4] = v13;
    v15[5] = v2;
    v16 = v13;
    swift_retain();
    sub_24A15B54C((uint64_t)v11, (uint64_t)&unk_25790A8B0, (uint64_t)v15);
    swift_release();
    sub_24A21617C();
    v17 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionTask;
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionTask))
    {
      swift_retain();
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      *(_QWORD *)(v2 + v17) = 0;
      swift_release();
      swift_release();
    }
    if (*(_QWORD *)(v2 + v12))
    {
      swift_retain();
      sub_24A135F88(&qword_25790A8B8);
      sub_24A215FCC();
      *(_QWORD *)(v2 + v12) = 0;
      swift_release();
      swift_release();
    }
    v18 = sub_24A135F88(&qword_25790A828);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
    v19 = v2 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStream;
    swift_beginAccess();
    sub_24A15BA84((uint64_t)v8, v19, &qword_25790A848);
    swift_endAccess();
    v20 = sub_24A135F88(&qword_25790A830);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
    v21 = v2 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
    swift_beginAccess();
    sub_24A15BA84((uint64_t)v5, v21, &qword_25790A850);
    swift_endAccess();

  }
}

uint64_t sub_24A15C690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[8] = a4;
  v5[9] = a5;
  sub_24A135F88(&qword_25790A860);
  v5[10] = swift_task_alloc();
  v6 = sub_24A135F88(&qword_25790A840);
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  sub_24A135F88(&qword_25790A850);
  v5[14] = swift_task_alloc();
  v7 = sub_24A135F88(&qword_25790A830);
  v5[15] = v7;
  v5[16] = *(_QWORD *)(v7 - 8);
  v5[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A15C768()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(v0[9] + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_stopProcessingActor);
  v0[18] = v1;
  v4 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 120) + *(_QWORD *)(*(_QWORD *)v1 + 120));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[19] = v2;
  *v2 = v0;
  v2[1] = sub_24A15C7E8;
  return v4(1);
}

uint64_t sub_24A15C7E8()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A15C844()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0[9] + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionBufferActor);
  v0[20] = v1;
  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v1 + 384) + *(_QWORD *)(*(_QWORD *)v1 + 384));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[21] = v2;
  *v2 = v0;
  v2[1] = sub_24A15C8C0;
  return v4();
}

uint64_t sub_24A15C8C0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A15C91C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[15];
  v2 = v0[16];
  v3 = v0[14];
  v4 = v0[9] + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder;
  swift_beginAccess();
  sub_24A1360A0(v4, v3, &qword_25790A850);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_24A13DAA8(v0[14], &qword_25790A850);
    sub_24A15A5EC();
    swift_allocError();
    *v5 = 0xD00000000000001ELL;
    v5[1] = 0x800000024A221C00;
    swift_willThrow();
  }
  else
  {
    v6 = v0[11];
    v7 = v0[12];
    v9 = v0[9];
    v8 = v0[10];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[16] + 32))(v0[17], v0[14], v0[15]);
    sub_24A215FA8();
    v10 = v9 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
    swift_beginAccess();
    sub_24A1360A0(v10, v8, &qword_25790A860);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
    v13 = v0[16];
    v12 = v0[17];
    v14 = v0[15];
    if (v11 != 1)
    {
      v17 = v0[13];
      v19 = v0[11];
      v18 = v0[12];
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 32))(v17, v0[10], v19);
      sub_24A215FA8();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      sub_24A216188();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v16 = (uint64_t (*)(void))v0[1];
      return v16();
    }
    sub_24A13DAA8(v0[10], &qword_25790A860);
    sub_24A15A5EC();
    swift_allocError();
    *v15 = 0xD000000000000024;
    v15[1] = 0x800000024A221C20;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  sub_24A216188();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_24A15CBC4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 1992) = v1;
  *(_BYTE *)(v2 + 139) = a1;
  sub_24A135F88(&qword_25790AB78);
  *(_QWORD *)(v2 + 2000) = swift_task_alloc();
  v3 = sub_24A135F88(&qword_25790AB80);
  *(_QWORD *)(v2 + 2008) = v3;
  *(_QWORD *)(v2 + 2016) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 2024) = swift_task_alloc();
  v4 = sub_24A215A8C();
  *(_QWORD *)(v2 + 2032) = v4;
  *(_QWORD *)(v2 + 2040) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 2048) = swift_task_alloc();
  *(_QWORD *)(v2 + 2056) = swift_task_alloc();
  sub_24A135F88(&qword_25790A860);
  *(_QWORD *)(v2 + 2064) = swift_task_alloc();
  *(_QWORD *)(v2 + 2072) = swift_task_alloc();
  *(_QWORD *)(v2 + 2080) = swift_task_alloc();
  v5 = sub_24A135F88(&qword_25790A840);
  *(_QWORD *)(v2 + 2088) = v5;
  *(_QWORD *)(v2 + 2096) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 2104) = swift_task_alloc();
  *(_QWORD *)(v2 + 2112) = swift_task_alloc();
  return swift_task_switch();
}

void sub_24A15CD04()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(void);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 1992);
  type metadata accessor for VACircularMatrixBuffer();
  *(_QWORD *)(v0 + 2120) = sub_24A1D3E00(66, 40);
  type metadata accessor for VAFeatureExtract();
  v2 = VAFeatureExtract.__allocating_init()();
  *(_QWORD *)(v0 + 2128) = v2;
  *(_QWORD *)(v0 + 1984) = MEMORY[0x24BEE4AF8];
  sub_24A15FCB0((_OWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_vadModel);
  *(_QWORD *)(v0 + 2136) = v3;
  if (!v3)
  {
    sub_24A15A5EC();
    swift_allocError();
    *v13 = 0xD000000000000010;
    v13[1] = 0x800000024A221BC0;
    swift_willThrow();
    goto LABEL_5;
  }
  v4 = *(_QWORD *)(v0 + 2096);
  v5 = *(_QWORD *)(v0 + 2088);
  v6 = *(_QWORD *)(v0 + 2080);
  v7 = *(_QWORD *)(v0 + 1992);
  v8 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
  *(_QWORD *)(v0 + 2144) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder;
  v9 = v7 + v8;
  swift_beginAccess();
  sub_24A1360A0(v9, v6, &qword_25790A860);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  *(_QWORD *)(v0 + 2152) = v10;
  if (v10(v6, 1, v5) == 1)
  {
    v11 = *(_QWORD *)(v0 + 2080);
    swift_retain();
    sub_24A13DAA8(v11, &qword_25790A860);
    sub_24A15A5EC();
    swift_allocError();
    *v12 = 0xD00000000000001CLL;
    v12[1] = 0x800000024A221BE0;
    swift_willThrow();
    swift_release();
LABEL_5:

    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v14 = *(_QWORD *)(v0 + 1992);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 2096) + 32))(*(_QWORD *)(v0 + 2112), *(_QWORD *)(v0 + 2080), *(_QWORD *)(v0 + 2088));
  v15 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_strideConfig;
  *(_QWORD *)(v0 + 2160) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_strideConfig;
  v16 = *(_QWORD **)(v14 + v15);
  v17 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v16) + 0xD0);
  swift_retain();
  v18 = v16;
  v19 = v17();

  *(_QWORD *)(v0 + 2168) = 24 * v19;
  if ((unsigned __int128)(v19 * (__int128)24) >> 64 == (24 * v19) >> 63)
  {
    if (24 * v19 + 0x4000000000000000 >= 0)
    {
      v20 = *(_QWORD *)(v0 + 1992);
      v21 = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_stopProcessingActor;
      *(_QWORD *)(v0 + 2176) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_stopProcessingActor;
      *(_QWORD *)(v0 + 2184) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_ingestionBufferActor;
      *(_QWORD *)(v0 + 2192) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_speechInProgress;
      *(_QWORD *)(v0 + 2200) = OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_minimumSilenceProbability;
      sub_24A15FCCC(v0 + 16, v0 + 400);
      v22 = *(_QWORD *)(v20 + v21);
      *(_QWORD *)(v0 + 2208) = v22;
      *(_QWORD *)(v0 + 2216) = *(_QWORD *)(*(_QWORD *)v22 + 96);
      swift_retain();
      swift_task_switch();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_24A15D06C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 267) = (*(uint64_t (**)(void))(v0 + 2216))() & 1;
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A15D0BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);

  if ((*(_BYTE *)(v0 + 267) & 1) != 0)
  {
    v1 = *(void **)(v0 + 2128);
    v2 = *(_QWORD *)(v0 + 2112);
    v3 = *(_QWORD *)(v0 + 2096);
    v4 = *(_QWORD *)(v0 + 2088);
    sub_24A15FD14((id *)(v0 + 400));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  else
  {
    *(_DWORD *)(v0 + 140) = 0;
    *(_BYTE *)(v0 + 395) = 0;
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2232) = 1;
    v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2152);
    v6 = *(_QWORD *)(v0 + 2088);
    v7 = *(_QWORD *)(v0 + 2072);
    sub_24A1360A0(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2144), v7, &qword_25790A860);
    if (v5(v7, 1, v6) != 1)
    {
      v20 = *(_QWORD *)(v0 + 2184);
      v21 = *(_QWORD *)(v0 + 1992);
      sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
      v22 = *(_QWORD *)(v21 + v20);
      *(_QWORD *)(v0 + 2240) = v22;
      v29 = (uint64_t (*)(_QWORD))(**(int **)(*(_QWORD *)v22 + 392) + *(_QWORD *)(*(_QWORD *)v22 + 392));
      swift_retain();
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 2248) = v23;
      *v23 = v0;
      v23[1] = sub_24A15D3F8;
      return v29(*(unsigned __int8 *)(v0 + 139));
    }
    v8 = *(_QWORD *)(v0 + 2048);
    v9 = *(_QWORD *)(v0 + 2040);
    v10 = *(_QWORD *)(v0 + 2032);
    sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
    v11 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
    v12 = sub_24A215A74();
    v13 = sub_24A2160F8();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void **)(v0 + 2128);
    v16 = *(_QWORD *)(v0 + 2112);
    v27 = *(_QWORD *)(v0 + 2096);
    v28 = *(_QWORD *)(v0 + 2088);
    v26 = *(_QWORD *)(v0 + 2048);
    v17 = *(_QWORD *)(v0 + 2040);
    v18 = *(_QWORD *)(v0 + 2032);
    if (v14)
    {
      v25 = *(_QWORD *)(v0 + 2112);
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_24A12D000, v12, v13, "output stream doesn't exist, stop predictions", v19, 2u);
      MEMORY[0x24BD0AAAC](v19, -1, -1);
      swift_release();

      swift_release();
      sub_24A15FD14((id *)(v0 + 400));
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v18);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v28);
    }
    else
    {

      swift_release();
      swift_release();
      sub_24A15FD14((id *)(v0 + 400));
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v18);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v16, v28);
    }
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A15D3F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[245] = v2;
  v3[246] = a1;
  v3[247] = a2;
  v3[282] = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

void sub_24A15D46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  id v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t (*v50)(void);
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  _QWORD *v63;
  uint64_t (*v64)(void);
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  _QWORD *v121;
  _QWORD *v122;
  double (*v123)(void);
  _QWORD *v124;
  double v125;
  _QWORD *v126;
  uint64_t (*v127)(void);
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t (*v134)(void);
  id v135;
  _QWORD *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t (*v143)(void);
  _QWORD *v144;
  uint64_t v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t (*v150)(void);
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  double (*v156)(void);
  _QWORD *v157;
  double v158;
  _QWORD *v159;
  uint64_t (*v160)(void);
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  void *v182;
  char v183;
  char v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  id *v192;
  uint64_t v193;
  id *v194;

  v1 = *(_QWORD *)(v0 + 2256);
  if (v1)
    v2 = *(_QWORD *)(v0 + 1976);
  else
    v2 = 0;
  if (v1)
    v3 = *(_QWORD *)(v0 + 2256);
  else
    v3 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v3 + 16);
  v194 = (id *)(v0 + 400);
  if (!v4)
  {
    v23 = *(_QWORD *)(v0 + 2056);
    v24 = *(_QWORD *)(v0 + 2040);
    v25 = *(_QWORD *)(v0 + 2032);
    swift_bridgeObjectRelease();
    v26 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v26, v25);
    v27 = sub_24A215A74();
    v28 = sub_24A2160F8();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(void **)(v0 + 2128);
    v31 = *(_QWORD *)(v0 + 2112);
    v32 = *(_QWORD *)(v0 + 2096);
    v33 = *(_QWORD *)(v0 + 2088);
    v34 = *(_QWORD *)(v0 + 2056);
    v35 = *(_QWORD *)(v0 + 2040);
    v36 = *(_QWORD *)(v0 + 2032);
    if (v29)
    {
      v189 = *(_QWORD *)(v0 + 2040);
      v37 = *(_QWORD *)(v0 + 2032);
      v38 = *(_QWORD *)(v0 + 2056);
      v39 = *(_QWORD *)(v0 + 2096);
      v40 = *(_QWORD *)(v0 + 2088);
      v41 = *(_QWORD *)(v0 + 2112);
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_24A12D000, v27, v28, "processing was stopped, stop predictions", v42, 2u);
      v43 = v42;
      v31 = v41;
      v33 = v40;
      v32 = v39;
      v34 = v38;
      v36 = v37;
      v35 = v189;
      MEMORY[0x24BD0AAAC](v43, -1, -1);
      swift_release();

      swift_release();
    }
    else
    {

      swift_release();
      swift_release();
    }
    sub_24A15FD14(v194);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v62 = *(void (**)(void))(v0 + 8);
    goto LABEL_20;
  }
  v5 = v0 + 395;
  v193 = v2;
  if (*(_BYTE *)(v0 + 395) == 1)
  {
    v6 = v3;
    v191 = *(_DWORD *)(v0 + 140);
    v7 = *(_QWORD **)(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2160));
    v8 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v7) + 0xD0);
    v9 = v7;
    v10 = v8();

    v11 = sub_24A15EE50(v10, v6);
    v12 = (void *)sub_24A159130(v11);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v0 + 2448) = 1;
    *(_BYTE *)(v0 + 2456) = 1;
    *(_BYTE *)(v0 + 2464) = 1;
    *(_BYTE *)(v0 + 2472) = 1;
    *(_BYTE *)(v0 + 2480) = 1;
    *(_BYTE *)(v0 + 2488) = 1;
    *(_BYTE *)(v0 + 2496) = 1;
    v185 = *(_BYTE *)(v0 + 2448);
    v188 = *(_BYTE *)(v0 + 2456);
    v13 = *(_BYTE *)(v0 + 2464);
    v14 = *(_BYTE *)(v0 + 2472);
    v15 = *(_BYTE *)(v0 + 2480);
    v16 = *(_BYTE *)(v0 + 2488);
    v17 = *(_BYTE *)(v0 + 2496);
    v18 = v12;
    v19 = objc_msgSend(v18, sel_frameLength);
    v20 = v191 + v19;
    if (!__CFADD__(v191, v19))
    {
      v181 = v13;
      v21 = *(_QWORD *)(v0 + 2168);
      *(_DWORD *)(v0 + 268) = v20;
      v184 = v17;
      v183 = v15;
      if (v21 <= v20)
      {
        v22 = 0;
        v176 = 1;
LABEL_39:
        *(_DWORD *)(v0 + 396) = v22;
        v77 = v21 <= v20;
        v179 = *(_QWORD *)(v0 + 2176);
        v78 = *(_QWORD *)(v0 + 2024);
        v79 = *(_QWORD *)(v0 + 2016);
        v80 = *(_QWORD *)(v0 + 2008);
        v81 = *(_QWORD *)(v0 + 1992);
        *(_QWORD *)(v0 + 1680) = v18;
        *(_QWORD *)(v0 + 1688) = v193;
        *(_WORD *)(v0 + 1696) = 0;
        *(_QWORD *)(v0 + 1704) = 0;
        *(_BYTE *)(v0 + 1712) = 1;
        *(_QWORD *)(v0 + 1720) = 0;
        *(_BYTE *)(v0 + 1728) = 1;
        *(_QWORD *)(v0 + 1736) = 0;
        *(_BYTE *)(v0 + 1744) = 1;
        *(_QWORD *)(v0 + 1752) = 0;
        *(_BYTE *)(v0 + 1760) = 1;
        *(_QWORD *)(v0 + 1768) = 0;
        *(_BYTE *)(v0 + 1776) = 1;
        *(_QWORD *)(v0 + 1784) = 0;
        *(_BYTE *)(v0 + 1792) = 1;
        *(_DWORD *)(v0 + 1796) = 0;
        *(_BYTE *)(v0 + 1800) = 1;
        *(_BYTE *)(v0 + 1801) = 1;
        *(_BYTE *)(v0 + 1802) = v77;
        sub_24A215F9C();
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
        *(_QWORD *)(v0 + 144) = v18;
        *(_QWORD *)(v0 + 152) = v193;
        *(_WORD *)(v0 + 160) = 0;
        *(_QWORD *)(v0 + 168) = 0;
        *(_BYTE *)(v0 + 176) = v185;
        *(_QWORD *)(v0 + 184) = 0;
        *(_BYTE *)(v0 + 192) = v188;
        *(_QWORD *)(v0 + 200) = 0;
        *(_BYTE *)(v0 + 208) = v181;
        *(_QWORD *)(v0 + 216) = 0;
        *(_BYTE *)(v0 + 224) = v14;
        *(_QWORD *)(v0 + 232) = 0;
        *(_BYTE *)(v0 + 240) = v183;
        *(_QWORD *)(v0 + 248) = 0;
        *(_BYTE *)(v0 + 256) = v16;
        *(_DWORD *)(v0 + 260) = 0;
        *(_BYTE *)(v0 + 264) = v184;
        *(_BYTE *)(v0 + 265) = 1;
        *(_BYTE *)(v0 + 266) = v176;
        sub_24A15FD14((id *)(v0 + 144));
        sub_24A15FCCC((uint64_t)v194, v0 + 272);
        sub_24A15FCCC(v0 + 272, (uint64_t)v194);
        v82 = *(_QWORD *)(v81 + v179);
        *(_QWORD *)(v0 + 2264) = v82;
        *(_QWORD *)(v0 + 2272) = *(_QWORD *)(*(_QWORD *)v82 + 96);
        swift_retain();
LABEL_47:
        swift_task_switch();
        return;
      }
      v75 = *(_DWORD *)(v0 + 140);
      v76 = objc_msgSend(v18, sel_frameLength);
      v22 = v75 + v76;
      if (!__CFADD__(v75, v76))
      {
        v176 = 0;
        goto LABEL_39;
      }
      goto LABEL_70;
    }
    __break(1u);
    goto LABEL_68;
  }
  v192 = (id *)(v0 + 528);
  v44 = *(_QWORD *)(v0 + 2192);
  v45 = *(_QWORD *)(v0 + 2120);
  v46 = *(_QWORD *)(v0 + 1992);
  v47 = v3;
  v48 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 2128)) + 0x170))();
  (*(void (**)(void))(*(_QWORD *)v45 + 168))();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v46 + v44) == 1)
  {
    v186 = *(_QWORD *)(v0 + 2232);
    v49 = *(_QWORD **)(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2160));
    v50 = *(uint64_t (**)(void))((*v48 & *v49) + 0xD0);
    swift_bridgeObjectRetain();
    v51 = v49;
    v52 = v50();

    v53 = sub_24A15EE50(v52, v47);
    v54 = (void *)sub_24A159130(v53);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v0 + 2376) = 1;
    *(_BYTE *)(v0 + 2384) = 1;
    *(_BYTE *)(v0 + 2392) = 1;
    *(_BYTE *)(v0 + 2400) = 1;
    *(_BYTE *)(v0 + 2408) = 1;
    *(_BYTE *)(v0 + 2416) = 1;
    *(_BYTE *)(v0 + 2424) = 1;
    if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v186, 3) < 0xAAAAAAAAAAAAAABuLL)
    {
      v58 = v0 + 400;
      sub_24A15FD14(v194);
      *(_QWORD *)(v0 + 1296) = v54;
      *(_QWORD *)(v0 + 1304) = v193;
      *(_WORD *)(v0 + 1312) = 0;
      *(_QWORD *)(v0 + 1320) = 0;
      *(_BYTE *)(v0 + 1328) = *(_BYTE *)(v0 + 2376);
      *(_QWORD *)(v0 + 1336) = 0;
      *(_BYTE *)(v0 + 1344) = *(_BYTE *)(v0 + 2384);
      *(_QWORD *)(v0 + 1352) = 0;
      *(_BYTE *)(v0 + 1360) = *(_BYTE *)(v0 + 2392);
      *(_QWORD *)(v0 + 1368) = 0;
      *(_BYTE *)(v0 + 1376) = *(_BYTE *)(v0 + 2400);
      *(_QWORD *)(v0 + 1384) = 0;
      *(_BYTE *)(v0 + 1392) = *(_BYTE *)(v0 + 2408);
      *(_QWORD *)(v0 + 1400) = 0;
      *(_BYTE *)(v0 + 1408) = *(_BYTE *)(v0 + 2416);
      *(_DWORD *)(v0 + 1412) = 0;
      *(_BYTE *)(v0 + 1416) = *(_BYTE *)(v0 + 2424);
      *(_WORD *)(v0 + 1417) = 0;
      nullsub_1(v0 + 1296);
      v83 = v0 + 1296;
      v59 = (id *)(v0 + 528);
    }
    else
    {
      v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2152);
      v56 = *(_QWORD *)(v0 + 2088);
      v57 = *(_QWORD *)(v0 + 2064);
      sub_24A1360A0(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2144), v57, &qword_25790A860);
      v58 = v0 + 400;
      v59 = (id *)(v0 + 528);
      if (v55(v57, 1, v56))
      {
        v60 = *(_QWORD *)(v0 + 2064);

        sub_24A13DAA8(v60, &qword_25790A860);
        v61 = 1;
      }
      else
      {
        v84 = *(_QWORD *)(v0 + 2104);
        v85 = *(_QWORD *)(v0 + 2096);
        v86 = *(_QWORD *)(v0 + 2088);
        v87 = *(_QWORD *)(v0 + 2064);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16))(v84, v87, v86);
        v88 = v54;
        sub_24A13DAA8(v87, &qword_25790A860);
        *(_QWORD *)(v0 + 1424) = v88;
        *(_QWORD *)(v0 + 1432) = v193;
        *(_WORD *)(v0 + 1440) = 0;
        *(_QWORD *)(v0 + 1448) = 0;
        *(_BYTE *)(v0 + 1456) = *(_BYTE *)(v0 + 2376);
        *(_QWORD *)(v0 + 1464) = 0;
        *(_BYTE *)(v0 + 1472) = *(_BYTE *)(v0 + 2384);
        *(_QWORD *)(v0 + 1480) = 0;
        *(_BYTE *)(v0 + 1488) = *(_BYTE *)(v0 + 2392);
        *(_QWORD *)(v0 + 1496) = 0;
        *(_BYTE *)(v0 + 1504) = *(_BYTE *)(v0 + 2400);
        *(_QWORD *)(v0 + 1512) = 0;
        *(_BYTE *)(v0 + 1520) = *(_BYTE *)(v0 + 2408);
        *(_QWORD *)(v0 + 1528) = 0;
        *(_BYTE *)(v0 + 1536) = *(_BYTE *)(v0 + 2416);
        *(_DWORD *)(v0 + 1540) = 0;
        *(_BYTE *)(v0 + 1544) = *(_BYTE *)(v0 + 2424);
        *(_WORD *)(v0 + 1545) = 0;
        v58 = v0 + 400;
        sub_24A215F9C();

        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
        v61 = 0;
      }
      v89 = *(_QWORD *)(v0 + 2000);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 2016) + 56))(v89, v61, 1, *(_QWORD *)(v0 + 2008));
      sub_24A13DAA8(v89, &qword_25790AB78);
      v83 = v58;
    }
    v74 = sub_24A15FCCC(v83, (uint64_t)v59);
    v5 = v0 + 395;
  }
  else
  {
    v63 = *(_QWORD **)(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2160));
    v64 = *(uint64_t (**)(void))((*v48 & *v63) + 0xD0);
    swift_bridgeObjectRetain();
    v65 = v63;
    v66 = v64();

    if ((v66 & 0x8000000000000000) != 0)
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v4 >= v66)
      v67 = v4 - v66;
    else
      v67 = 0;
    v68 = *(_QWORD *)(v47 + 16);
    v69 = v68 >= v67 && v68 >= v4;
    v59 = (id *)(v0 + 528);
    v58 = v0 + 400;
    if (!v69)
      goto LABEL_69;
    v70 = *(_QWORD *)(v0 + 2168);
    sub_24A158E44(v47, v47 + 32, v67, (2 * v4) | 1);
    swift_bridgeObjectRelease();
    v71 = *(_QWORD *)(*(_QWORD *)(v0 + 1984) + 16);
    if (v71 > 2 * v70)
    {
      v72 = *(_QWORD *)(v0 + 2168);
      v73 = v71 - 2 * v72;
      if (__OFSUB__(v71, 2 * v72))
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if (v73)
      {
        if ((v73 & 0x8000000000000000) != 0)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        if (v71 < v73)
        {
LABEL_73:
          __break(1u);
LABEL_74:
          sub_24A2163E0();
          return;
        }
        sub_24A158FD8(0, v73);
      }
    }
    v74 = sub_24A15FCCC((uint64_t)v194, (uint64_t)v192);
  }
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v0 + 2232), 3) >= 0xAAAAAAAAAAAAAABuLL)
  {
    swift_bridgeObjectRelease();
    sub_24A15FCCC((uint64_t)v59, v58);
    v90 = 0;
    v91 = *(_QWORD *)(v0 + 2224);
LABEL_46:
    *(_BYTE *)(v5 + 129) = v90;
    *(_QWORD *)(v0 + 2280) = v91;
    v92 = *(_QWORD *)(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2176));
    *(_QWORD *)(v0 + 2288) = v92;
    *(_QWORD *)(v0 + 2296) = *(_QWORD *)(*(_QWORD *)v92 + 96);
    swift_retain();
    goto LABEL_47;
  }
  v190 = v5;
  v93 = *(_QWORD *)(v0 + 2224);
  v94 = *(_QWORD *)(v0 + 2136);
  (*(void (**)(uint64_t))(**(_QWORD **)(v0 + 2120) + 176))(v74);
  v95 = (*(uint64_t (**)(void))(*(_QWORD *)v94 + 128))();
  if (v93)
  {
    v96 = *(_QWORD *)(v0 + 2112);
    v97 = *(_QWORD *)(v0 + 2096);
    v98 = *(_QWORD *)(v0 + 2088);

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_24A15FD14(v59);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v96, v98);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v62 = *(void (**)(void))(v0 + 8);
LABEL_20:
    v62();
    return;
  }
  v99 = v95;
  v100 = v47;
  v101 = v0 + 656;
  v102 = *(_QWORD *)(v0 + 2200);
  v103 = *(_QWORD *)(v0 + 1992);
  swift_bridgeObjectRelease();
  v104 = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v103 + 576))(v99, *(float *)(v103 + v102));
  v106 = v105;
  v108 = v107;
  swift_bridgeObjectRelease();
  v187 = v106;
  if ((v104 & 1) == 0)
  {
    v109 = (_QWORD *)MEMORY[0x24BEE4EA0];
    if ((v104 & 0x100) != 0)
    {
      v147 = *(_QWORD *)(v0 + 2160);
      v174 = *(_QWORD *)(v0 + 2024);
      v178 = *(_QWORD *)(v0 + 2016);
      v180 = *(_QWORD *)(v0 + 2008);
      v148 = *(_QWORD *)(v0 + 1992);
      *(_BYTE *)(v148 + *(_QWORD *)(v0 + 2192)) = 0;
      v149 = *(_QWORD **)(v148 + v147);
      v150 = *(uint64_t (**)(void))((*v109 & *v149) + 0xD0);
      v151 = v149;
      v152 = v150();

      v153 = sub_24A15EE50(v152, v100);
      v154 = sub_24A159130(v153);
      swift_bridgeObjectRelease();
      type metadata accessor for VARequestContext();
      v155 = *(_QWORD **)(v148 + v147);
      v156 = *(double (**)(void))((*v109 & *v155) + 0x1B0);
      v157 = v155;
      v158 = v156();

      v159 = *(_QWORD **)(v148 + v147);
      v160 = *(uint64_t (**)(void))((*v109 & *v159) + 0xA0);
      v161 = v159;
      v162 = v160();

      v163 = sub_24A167414(v193, v158 * (double)v187 / (double)v162);
      v90 = 1;
      v164 = (void *)v154;
      *(_QWORD *)(v0 + 1168) = v154;
      *(_QWORD *)(v0 + 1176) = v193;
      *(_WORD *)(v0 + 1184) = 256;
      *(_QWORD *)(v0 + 1192) = 0;
      *(_BYTE *)(v0 + 1200) = 1;
      *(_QWORD *)(v0 + 1208) = v163;
      *(_BYTE *)(v0 + 1216) = 0;
      *(_QWORD *)(v0 + 1224) = 0;
      *(_BYTE *)(v0 + 1232) = 1;
      *(_QWORD *)(v0 + 1240) = 0;
      *(_BYTE *)(v0 + 1248) = 1;
      *(_QWORD *)(v0 + 1256) = 0;
      *(_BYTE *)(v0 + 1264) = 1;
      *(_QWORD *)(v0 + 1272) = 0;
      *(_BYTE *)(v0 + 1280) = 1;
      *(_DWORD *)(v0 + 1284) = v108;
      *(_BYTE *)(v0 + 1288) = 0;
      *(_WORD *)(v0 + 1289) = 0;
      v101 = v0 + 656;
      v165 = v164;
      sub_24A215F9C();
      sub_24A15FD14(v192);
      (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v174, v180);
      *(_QWORD *)(v0 + 1040) = v165;
      *(_QWORD *)(v0 + 1048) = v193;
      *(_WORD *)(v0 + 1056) = 256;
      v58 = v0 + 400;
      *(_QWORD *)(v0 + 1064) = 0;
      *(_BYTE *)(v0 + 1072) = 1;
      *(_QWORD *)(v0 + 1080) = v163;
      *(_BYTE *)(v0 + 1088) = 0;
      *(_QWORD *)(v0 + 1096) = 0;
      *(_BYTE *)(v0 + 1104) = 1;
      *(_QWORD *)(v0 + 1112) = 0;
      *(_BYTE *)(v0 + 1120) = 1;
      *(_QWORD *)(v0 + 1128) = 0;
      *(_BYTE *)(v0 + 1136) = 1;
      *(_QWORD *)(v0 + 1144) = 0;
      *(_BYTE *)(v0 + 1152) = 1;
      *(_DWORD *)(v0 + 1156) = v108;
      *(_BYTE *)(v0 + 1160) = 0;
      *(_WORD *)(v0 + 1161) = 0;
      sub_24A15FD14((id *)(v0 + 1040));
      sub_24A15FCCC(v0 + 16, v0 + 656);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_24A15FCCC((uint64_t)v59, v0 + 784);
      if (sub_24A15FED0((uint64_t *)(v0 + 784)) == 1)
      {
        v110 = (uint64_t)v59;
      }
      else
      {
        v166 = *(_QWORD *)(v0 + 2024);
        v167 = v58;
        v168 = *(_QWORD *)(v0 + 2016);
        v169 = *(_QWORD *)(v0 + 2008);
        v170 = *(_OWORD *)(v0 + 864);
        *(_OWORD *)(v0 + 976) = *(_OWORD *)(v0 + 848);
        *(_OWORD *)(v0 + 992) = v170;
        *(_OWORD *)(v0 + 1008) = *(_OWORD *)(v0 + 880);
        *(_OWORD *)(v0 + 1019) = *(_OWORD *)(v0 + 891);
        v171 = *(_OWORD *)(v0 + 800);
        *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 784);
        *(_OWORD *)(v0 + 928) = v171;
        v172 = *(_OWORD *)(v0 + 832);
        *(_OWORD *)(v0 + 944) = *(_OWORD *)(v0 + 816);
        *(_OWORD *)(v0 + 960) = v172;
        sub_24A215F9C();
        v173 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
        v58 = v167;
        v173(v166, v169);
        v110 = v0 + 16;
      }
      sub_24A15FCCC(v110, v0 + 656);
      v90 = 0;
    }
    goto LABEL_66;
  }
  v111 = *(_QWORD *)(v0 + 2192);
  v112 = *(_QWORD *)(v0 + 2168);
  v113 = *(_QWORD *)(v0 + 1992);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v113 + v111) = 1;
  v114 = swift_bridgeObjectRetain();
  v115 = (void *)sub_24A159130(v114);
  swift_bridgeObjectRelease_n();
  *(_QWORD *)(v0 + 1984) = MEMORY[0x24BEE4AF8];
  v182 = v115;
  if (objc_msgSend(v115, sel_frameLength) == 2 * v112)
    v116 = 24;
  else
    v116 = 0;
  type metadata accessor for VARequestContext();
  v117 = v116 + v106;
  if (__OFADD__(v116, v106))
  {
    __break(1u);
    goto LABEL_76;
  }
  v118 = *(_QWORD *)(v0 + 2160);
  v119 = *(_QWORD *)(v0 + 1992);
  v120 = (double)v117;
  v121 = *(_QWORD **)(v119 + v118);
  v122 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v123 = *(double (**)(void))((*MEMORY[0x24BEE4EA0] & *v121) + 0x1B0);
  v124 = v121;
  v125 = v123();

  v126 = *(_QWORD **)(v119 + v118);
  v127 = *(uint64_t (**)(void))((*v122 & *v126) + 0xA0);
  v128 = v126;
  v129 = v127();

  v130 = sub_24A167414(v193, v125 * v120 / (double)v129);
  *(_BYTE *)(v0 + 2440) = 0;
  *(_BYTE *)(v0 + 2432) = 1;
  *(_BYTE *)(v0 + 2304) = 1;
  *(_BYTE *)(v0 + 2512) = 1;
  v131 = v116 + 24 - v187;
  if (__OFSUB__(v116 + 24, v187))
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if ((v131 & 0x8000000000000000) != 0)
    goto LABEL_74;
  v132 = v130;
  v133 = *(_QWORD **)(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2160));
  v134 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v133) + 0xD0);
  v135 = v182;
  v136 = v133;
  v137 = v134();

  if ((v137 & 0x8000000000000000) != 0)
    goto LABEL_74;
  if (is_mul_ok(v131, v137))
  {
    v138 = v131 * v137;
    v139 = *(_QWORD *)(v0 + 2160);
    v140 = *(_QWORD *)(v0 + 2024);
    v175 = *(_QWORD *)(v0 + 2016);
    v177 = *(_QWORD *)(v0 + 2008);
    v141 = *(_QWORD *)(v0 + 1992);
    *(_BYTE *)(v0 + 2368) = 0;
    v142 = *(_QWORD **)(v141 + v139);
    v143 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v142) + 0xA0);
    v144 = v142;
    v145 = v143();

    *(_BYTE *)(v0 + 2344) = 0;
    *(_BYTE *)(v0 + 2504) = 0;
    *(_BYTE *)(v0 + 2312) = 0;
    *(_BYTE *)(v0 + 2320) = 1;
    *(_BYTE *)(v0 + 2328) = 0;
    *(_BYTE *)(v0 + 2336) = 0;
    *(_BYTE *)(v0 + 2520) = 1;
    *(_BYTE *)(v0 + 2352) = 1;
    *(_BYTE *)(v0 + 2360) = 0;
    *(_QWORD *)(v0 + 1552) = v135;
    *(_QWORD *)(v0 + 1560) = v193;
    *(_WORD *)(v0 + 1568) = 1;
    *(_QWORD *)(v0 + 1576) = v132;
    *(_BYTE *)(v0 + 1584) = *(_BYTE *)(v0 + 2312);
    *(_QWORD *)(v0 + 1592) = 0;
    v146 = (double)v138 / (double)v145;
    *(_BYTE *)(v0 + 1600) = *(_BYTE *)(v0 + 2320);
    *(_QWORD *)(v0 + 1608) = v138;
    *(_BYTE *)(v0 + 1616) = *(_BYTE *)(v0 + 2328);
    *(double *)(v0 + 1624) = v146;
    *(_BYTE *)(v0 + 1632) = *(_BYTE *)(v0 + 2336);
    *(_QWORD *)(v0 + 1640) = 0;
    *(_BYTE *)(v0 + 1648) = *(_BYTE *)(v0 + 2520);
    *(_QWORD *)(v0 + 1656) = 0;
    *(_BYTE *)(v0 + 1664) = *(_BYTE *)(v0 + 2352);
    *(_DWORD *)(v0 + 1668) = v108;
    *(_BYTE *)(v0 + 1672) = *(_BYTE *)(v0 + 2360);
    *(_WORD *)(v0 + 1673) = 0;
    sub_24A215F9C();
    (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v140, v177);
    *(_QWORD *)(v0 + 1808) = v135;
    *(_QWORD *)(v0 + 1816) = v193;
    *(_WORD *)(v0 + 1824) = 1;
    *(_QWORD *)(v0 + 1832) = v132;
    *(_BYTE *)(v0 + 1840) = *(_BYTE *)(v0 + 2440);
    *(_QWORD *)(v0 + 1848) = 0;
    *(_BYTE *)(v0 + 1856) = *(_BYTE *)(v0 + 2432);
    *(_QWORD *)(v0 + 1864) = v138;
    *(_BYTE *)(v0 + 1872) = *(_BYTE *)(v0 + 2368);
    *(double *)(v0 + 1880) = v146;
    *(_BYTE *)(v0 + 1888) = *(_BYTE *)(v0 + 2344);
    *(_QWORD *)(v0 + 1896) = 0;
    *(_BYTE *)(v0 + 1904) = *(_BYTE *)(v0 + 2304);
    *(_QWORD *)(v0 + 1912) = 0;
    *(_BYTE *)(v0 + 1920) = *(_BYTE *)(v0 + 2512);
    *(_DWORD *)(v0 + 1924) = v108;
    *(_BYTE *)(v0 + 1928) = *(_BYTE *)(v0 + 2504);
    *(_WORD *)(v0 + 1929) = 0;
    sub_24A15FD14((id *)(v0 + 1808));
    v101 = v0 + 656;
    sub_24A15FCCC((uint64_t)v192, v0 + 656);
    v90 = 0;
    v58 = v0 + 400;
LABEL_66:
    v5 = v190;
    sub_24A15FCCC(v101, v58);
    v91 = 0;
    goto LABEL_46;
  }
LABEL_77:
  __break(1u);
}

uint64_t sub_24A15E70C()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 523) = (*(uint64_t (**)(void))(v0 + 2272))() & 1;
  swift_release();
  return swift_task_switch();
}

void sub_24A15E75C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);

  if ((*(_BYTE *)(v0 + 523) & 1) != 0)
  {
    v1 = *(void **)(v0 + 2128);
    v2 = *(_QWORD *)(v0 + 2112);
    v3 = *(_QWORD *)(v0 + 2096);
    v4 = *(_QWORD *)(v0 + 2088);
    sub_24A15FD14((id *)(v0 + 400));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
LABEL_3:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v5 = *(_QWORD *)(v0 + 2232);
  v6 = *(_QWORD *)(v0 + 2168) > (uint64_t)*(unsigned int *)(v0 + 268);
  *(_DWORD *)(v0 + 140) = *(_DWORD *)(v0 + 396);
  *(_BYTE *)(v0 + 395) = v6;
  *(_QWORD *)(v0 + 2232) = v5 + 1;
  if (v5 == -1)
  {
    __break(1u);
  }
  else
  {
    v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2152);
    v8 = *(_QWORD *)(v0 + 2088);
    v9 = *(_QWORD *)(v0 + 2072);
    sub_24A1360A0(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2144), v9, &qword_25790A860);
    if (v7(v9, 1, v8) == 1)
    {
      v10 = *(_QWORD *)(v0 + 2048);
      v11 = *(_QWORD *)(v0 + 2040);
      v12 = *(_QWORD *)(v0 + 2032);
      sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
      v13 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
      v14 = sub_24A215A74();
      v15 = sub_24A2160F8();
      v16 = os_log_type_enabled(v14, v15);
      v17 = *(void **)(v0 + 2128);
      v18 = *(_QWORD *)(v0 + 2112);
      v28 = *(_QWORD *)(v0 + 2096);
      v29 = *(_QWORD *)(v0 + 2088);
      v27 = *(_QWORD *)(v0 + 2048);
      v19 = *(_QWORD *)(v0 + 2040);
      v20 = *(_QWORD *)(v0 + 2032);
      if (v16)
      {
        v26 = *(_QWORD *)(v0 + 2112);
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_24A12D000, v14, v15, "output stream doesn't exist, stop predictions", v21, 2u);
        MEMORY[0x24BD0AAAC](v21, -1, -1);
        swift_release();

        swift_release();
        sub_24A15FD14((id *)(v0 + 400));
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v20);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v29);
      }
      else
      {

        swift_release();
        swift_release();
        sub_24A15FD14((id *)(v0 + 400));
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v20);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v18, v29);
      }
      goto LABEL_3;
    }
    v22 = *(_QWORD *)(v0 + 2184);
    v23 = *(_QWORD *)(v0 + 1992);
    sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
    v24 = *(_QWORD *)(v23 + v22);
    *(_QWORD *)(v0 + 2240) = v24;
    v30 = (void (*)(_QWORD))(**(int **)(*(_QWORD *)v24 + 392) + *(_QWORD *)(*(_QWORD *)v24 + 392));
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 2248) = v25;
    *v25 = v0;
    v25[1] = sub_24A15D3F8;
    v30(*(unsigned __int8 *)(v0 + 139));
  }
}

uint64_t sub_24A15EAB4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 525) = (*(uint64_t (**)(void))(v0 + 2296))() & 1;
  swift_release();
  return swift_task_switch();
}

void sub_24A15EB04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);

  if ((*(_BYTE *)(v0 + 525) & 1) != 0)
  {
    v1 = *(void **)(v0 + 2128);
    v2 = *(_QWORD *)(v0 + 2112);
    v3 = *(_QWORD *)(v0 + 2096);
    v4 = *(_QWORD *)(v0 + 2088);
    sub_24A15FD14((id *)(v0 + 400));
    swift_release();

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
LABEL_3:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v5 = *(_QWORD *)(v0 + 2280);
  v6 = *(_QWORD *)(v0 + 2232);
  *(_BYTE *)(v0 + 395) = *(_BYTE *)(v0 + 524);
  *(_QWORD *)(v0 + 2224) = v5;
  *(_QWORD *)(v0 + 2232) = v6 + 1;
  if (v6 == -1)
  {
    __break(1u);
  }
  else
  {
    v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2152);
    v8 = *(_QWORD *)(v0 + 2088);
    v9 = *(_QWORD *)(v0 + 2072);
    sub_24A1360A0(*(_QWORD *)(v0 + 1992) + *(_QWORD *)(v0 + 2144), v9, &qword_25790A860);
    if (v7(v9, 1, v8) == 1)
    {
      v10 = *(_QWORD *)(v0 + 2048);
      v11 = *(_QWORD *)(v0 + 2040);
      v12 = *(_QWORD *)(v0 + 2032);
      sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
      v13 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
      v14 = sub_24A215A74();
      v15 = sub_24A2160F8();
      v16 = os_log_type_enabled(v14, v15);
      v17 = *(void **)(v0 + 2128);
      v18 = *(_QWORD *)(v0 + 2112);
      v28 = *(_QWORD *)(v0 + 2096);
      v29 = *(_QWORD *)(v0 + 2088);
      v27 = *(_QWORD *)(v0 + 2048);
      v19 = *(_QWORD *)(v0 + 2040);
      v20 = *(_QWORD *)(v0 + 2032);
      if (v16)
      {
        v26 = *(_QWORD *)(v0 + 2112);
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_24A12D000, v14, v15, "output stream doesn't exist, stop predictions", v21, 2u);
        MEMORY[0x24BD0AAAC](v21, -1, -1);
        swift_release();

        swift_release();
        sub_24A15FD14((id *)(v0 + 400));
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v20);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v29);
      }
      else
      {

        swift_release();
        swift_release();
        sub_24A15FD14((id *)(v0 + 400));
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v20);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v18, v29);
      }
      goto LABEL_3;
    }
    v22 = *(_QWORD *)(v0 + 2184);
    v23 = *(_QWORD *)(v0 + 1992);
    sub_24A13DAA8(*(_QWORD *)(v0 + 2072), &qword_25790A860);
    v24 = *(_QWORD *)(v23 + v22);
    *(_QWORD *)(v0 + 2240) = v24;
    v30 = (void (*)(_QWORD))(**(int **)(*(_QWORD *)v24 + 392) + *(_QWORD *)(*(_QWORD *)v24 + 392));
    swift_retain();
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 2248) = v25;
    *v25 = v0;
    v25[1] = sub_24A15D3F8;
    v30(*(unsigned __int8 *)(v0 + 139));
  }
}

uint64_t sub_24A15EE50(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (result < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v3 = result;
  if (!result)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  if (*(_QWORD *)(a2 + 16) >= result)
    v4 = result;
  else
    v4 = *(_QWORD *)(a2 + 16);
  v22 = MEMORY[0x24BEE4AF8];
  sub_24A148BB8(0, v4, 0);
  v5 = v22;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    goto LABEL_30;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  v9 = v6 - 2;
  do
  {
    v10 = (_DWORD *)(v22 + 32);
    v11 = v8;
LABEL_9:
    if (v11 >= *(_QWORD *)(a2 + 16))
      goto LABEL_38;
    v12 = *(_DWORD *)(a2 + 32 + 4 * v11);
    v8 = v11 + 1;
    v13 = *(_QWORD *)(v22 + 16);
    if ((uint64_t)v13 < v3)
    {
LABEL_23:
      v15 = *(_QWORD *)(v22 + 24);
      v16 = v13 + 1;
      if (v13 >= v15 >> 1)
      {
        v20 = v9;
        result = sub_24A148BB8(v15 > 1, v13 + 1, 1);
        v16 = v13 + 1;
        v9 = v20;
      }
      *(_QWORD *)(v22 + 16) = v16;
      *(_DWORD *)(v22 + 4 * v13 + 32) = v12;
    }
    else
    {
      if (v7 >= v13)
        goto LABEL_39;
      v10[v7++] = v12;
      if (v7 >= v3)
      {
        if (v8 == v6)
        {
LABEL_29:
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        while (v11 + 1 < *(_QWORD *)(a2 + 16))
        {
          v12 = *(_DWORD *)(a2 + 36 + 4 * v11);
          v13 = *(_QWORD *)(v22 + 16);
          if ((uint64_t)v13 < v3)
          {
            v7 = 0;
            v8 = v11 + 2;
            goto LABEL_23;
          }
          *v10 = v12;
          if (v3 > 1)
          {
            v7 = 1;
            v14 = v9 == v11;
            v11 += 2;
            if (!v14)
              goto LABEL_9;
            swift_bridgeObjectRelease();
            v7 = 1;
            goto LABEL_33;
          }
          if (v6 - 1 == ++v11)
            goto LABEL_29;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
  }
  while (v8 != v6);
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    return v5;
  }
LABEL_33:
  v17 = *(_QWORD *)(v22 + 16);
  v21 = MEMORY[0x24BEE4AF8];
  result = sub_24A148BB8(0, v17, 0);
  if (v17 < v7)
    goto LABEL_41;
  if ((v7 & 0x8000000000000000) == 0)
  {
    v18 = *(_QWORD *)(v22 + 16);
    if (v18 >= v7 && v18 >= v17)
    {
      v19 = swift_retain();
      sub_24A15FD3C(v19, v22 + 32, v7, (2 * v17) | 1);
      swift_bridgeObjectRelease();
      swift_release();
      sub_24A15FD3C(v22, v22 + 32, 0, (2 * v7) | 1);
      swift_release();
      return v21;
    }
    goto LABEL_43;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_24A15F0FC(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  double v27;

  v5 = sub_24A215A8C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v14 = 0;
    while (1)
    {
      v15 = v14 + 3;
      if (__OFADD__(v14, 3))
        v15 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0)
        break;
      if (v14 + 1 >= v13)
        goto LABEL_23;
      if (v14 + 2 >= v13)
        goto LABEL_24;
      v16 = (float)((float)((float)(*(float *)(a1 + 32 + 4 * v14) + 0.0) + *(float *)(a1 + 32 + 4 * (v14 + 1)))
                  + *(float *)(a1 + 32 + 4 * (v14 + 2)))
          / 3.0;
      v17 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_speechInProgress);
      if (v17 == 1)
      {
        if (v16 > a2)
        {
          v24 = sub_24A1B9D90();
          (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v24, v5);
          v19 = sub_24A215A74();
          v25 = sub_24A2160F8();
          if (os_log_type_enabled(v19, v25))
          {
            v21 = swift_slowAlloc();
            *(_DWORD *)v21 = 134218240;
            v27 = v16;
            sub_24A216260();
            *(_WORD *)(v21 + 12) = 2048;
            v27 = a2;
            sub_24A216260();
            _os_log_impl(&dword_24A12D000, v19, v25, "SpeechDetector: Pending Speech stopped, silence probability %f > %f", (uint8_t *)v21, 0x16u);
            v22 = 256;
LABEL_17:
            v23 = v17 ^ 1;
            MEMORY[0x24BD0AAAC](v21, -1, -1);
          }
          else
          {
            v23 = 0;
            v22 = 256;
          }
          goto LABEL_20;
        }
      }
      else if (v16 < a2)
      {
        v18 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v18, v5);
        v19 = sub_24A215A74();
        v20 = sub_24A2160F8();
        if (os_log_type_enabled(v19, v20))
        {
          v21 = swift_slowAlloc();
          *(_DWORD *)v21 = 134218240;
          v27 = v16;
          sub_24A216260();
          *(_WORD *)(v21 + 12) = 2048;
          v27 = a2;
          sub_24A216260();
          _os_log_impl(&dword_24A12D000, v19, v20, "SpeechDetector: Speech started, silence probability %f < %f", (uint8_t *)v21, 0x16u);
          v22 = 0;
          v12 = v9;
          goto LABEL_17;
        }
        v22 = 0;
        v23 = 1;
        v12 = v9;
LABEL_20:

        (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
        return v22 | v23;
      }
      v14 = v15;
      if (v15 >= v13)
        goto LABEL_14;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
LABEL_14:
    v23 = 0;
    v22 = 0;
    return v22 | v23;
  }
  return result;
}

uint64_t VASpeechDetector.deinit()
{
  uint64_t v0;

  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStream, &qword_25790A848);
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_inputStreamBuilder, &qword_25790A850);

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStream, &qword_25790A858);
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions16VASpeechDetector_outputAudioStreamBuilder, &qword_25790A860);
  return v0;
}

uint64_t VASpeechDetector.__deallocating_deinit()
{
  VASpeechDetector.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A15F540()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A15F574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_24A152AD0;
  return sub_24A15C690((uint64_t)v4, v5, v6, v2, v3);
}

ValueMetadata *type metadata accessor for VASpeechDetectorError()
{
  return &type metadata for VASpeechDetectorError;
}

_QWORD *initializeBufferWithCopyOfBuffer for VASpeechDetectorInput(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  return a1;
}

void destroy for VASpeechDetectorInput(id *a1)
{

}

uint64_t assignWithCopy for VASpeechDetectorInput(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for VASpeechDetectorInput(uint64_t a1, _QWORD *a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for VASpeechDetectorInput(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VASpeechDetectorInput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VASpeechDetectorInput()
{
  return &type metadata for VASpeechDetectorInput;
}

uint64_t initializeBufferWithCopyOfBuffer for VAEspressoModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for VASpeechDetectorOutput(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for VASpeechDetectorOutput(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = v12;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return a1;
}

__n128 initializeWithTake for VASpeechDetectorOutput(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 107) = *(__int128 *)((char *)a2 + 107);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for VASpeechDetectorOutput(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  return a1;
}

uint64_t getEnumTagSinglePayload for VASpeechDetectorOutput(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 123))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VASpeechDetectorOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 122) = 0;
    *(_WORD *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 123) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 123) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VASpeechDetectorOutput()
{
  return &type metadata for VASpeechDetectorOutput;
}

uint64_t sub_24A15FA88()
{
  return type metadata accessor for VASpeechDetector();
}

void sub_24A15FA90()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_24A15FC64(319, &qword_25790A8F0, &qword_25790A828);
  if (v0 <= 0x3F)
  {
    sub_24A15FC64(319, &qword_25790A8F8, &qword_25790A830);
    if (v1 <= 0x3F)
    {
      sub_24A15FC64(319, &qword_25790A900, &qword_25790A838);
      if (v2 <= 0x3F)
      {
        sub_24A15FC64(319, qword_25790A908, &qword_25790A840);
        if (v3 <= 0x3F)
          swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for VASpeechDetector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VASpeechDetector.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t dispatch thunk of VASpeechDetector.start(minimumSilenceProbability:batchMode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of VASpeechDetector.addAudio(buffer:hostTime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of VASpeechDetector.stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

void sub_24A15FC64(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_24A139148(a3);
    v4 = sub_24A216200();
    if (!v5)
      atomic_store(v4, a2);
  }
}

double sub_24A15FCB0(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 107) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_24A15FCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790AB88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id *sub_24A15FD14(id *a1)
{

  return a1;
}

uint64_t sub_24A15FD3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v7;
  if (!(_DWORD)result || v9 > *(_QWORD *)(v7 + 24) >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_24A148BB8(result, v13, 1);
      v7 = *v4;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = *(_QWORD *)(v7 + 16);
  if ((*(_QWORD *)(v7 + 24) >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
    goto LABEL_27;
  v15 = (char *)(v7 + 4 * v14 + 32);
  v16 = (char *)(a2 + 4 * a3);
  if (v16 < &v15[4 * v6] && v15 < &v16[4 * v6])
    goto LABEL_27;
  result = (uint64_t)memcpy(v15, v16, 4 * v6);
  if (!v6)
  {
LABEL_22:
    *v4 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v7 + 16);
  v19 = __OFADD__(v18, v6);
  v20 = v18 + v6;
  if (!v19)
  {
    *(_QWORD *)(v7 + 16) = v20;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
LABEL_27:
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A15FED0(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_24A15FEF4()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A15FF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A15FF8C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_24A15FFBC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 48) = a1;
  return result;
}

uint64_t sub_24A15FFF8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_24A160028(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t sub_24A160064@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 89);
  return result;
}

uint64_t sub_24A1600A4(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 89) = v2;
  return result;
}

uint64_t sub_24A1600E0()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A160128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A160178()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1601C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A160210()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t sub_24A160240(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 144) = a1;
  return result;
}

uint64_t VATasrConfiguration.__allocating_init(tasrModelPath:labelModelPath:joinerModelPath:contextEncoderModelPath:vadModelFilename:useContext:vocabFilename:useEspressoV2:computeUnits:espressoV1ModelPrefix:timingEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19;

  swift_allocObject();
  v19 = sub_24A1618C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t VATasrConfiguration.init(tasrModelPath:labelModelPath:joinerModelPath:contextEncoderModelPath:vadModelFilename:useContext:vocabFilename:useEspressoV2:computeUnits:espressoV1ModelPrefix:timingEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  v18 = sub_24A1618C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t static VATasrConfiguration.buildE23BSmallNoContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD00000000000001ELL, 0x800000024A221C70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE23BSmallContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD00000000000001CLL, 0x800000024A221C90, 0, 0, 0, 0, 0xD000000000000023, 0x800000024A221CB0, 0, 0, 1, 0, 0, 1, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE13BSmallNoContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000011, 0x800000024A221CE0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE13BNoContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0x646F6D6C6D2E6233, 0xEB00000000636C65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE13BSmallContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000019, 0x800000024A221D00, 0, 0, 0, 0, 0xD00000000000001DLL, 0x800000024A221D20, 0, 0, 1, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE13BContext(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000013, 0x800000024A221D40, 0, 0, 0, 0, 0xD000000000000017, 0x800000024A221D60, 0, 0, 1, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE1Transducer(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000010, 0x800000024A221D80, 0xD000000000000016, 0x800000024A221DA0, 0x6D2E72656E696F6ALL, 0xEF636C65646F6D6CLL, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x6C65646F6DLL, 0xE500000000000000, a1);
}

uint64_t static VATasrConfiguration.buildE1SmallTransducer(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000016, 0x800000024A221DC0, 0xD00000000000001CLL, 0x800000024A221DE0, 0xD000000000000015, 0x800000024A221E00, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE1SmallFastTransducer(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD00000000000001BLL, 0x800000024A221E20, 0xD000000000000021, 0x800000024A221E40, 0xD00000000000001ALL, 0x800000024A221E70, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE1SmallFast1000Transducer(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD000000000000020, 0x800000024A221E90, 0xD000000000000026, 0x800000024A221EC0, 0xD00000000000001FLL, 0x800000024A221EF0, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t static VATasrConfiguration.buildE1SmallFast500Transducer(timingEnabled:)(char a1)
{
  char v3;

  type metadata accessor for VATasrConfiguration();
  swift_allocObject();
  return sub_24A1618C8(0xD00000000000001FLL, 0x800000024A221F10, 0xD000000000000025, 0x800000024A221F30, 0xD00000000000001ELL, 0x800000024A221F60, 0, 0, 0, 0, 0, 0, 0, 0, &v3, 0x62382D6C65646F6DLL, 0xEA00000000007469, a1);
}

uint64_t sub_24A160C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  if (v2)
  {
    v5 = v1;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v4 = 0xD000000000000038;
    v4[1] = 0x800000024A221F80;
    return swift_willThrow();
  }
}

uint64_t sub_24A160D18()
{
  uint64_t v0;
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24A160D84(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A160DC4 + 4 * byte_24A219CD0[a1]))(0x65646F4D72736174, 0xED0000687461506CLL);
}

unint64_t sub_24A160DC4()
{
  return 0xD000000000000017;
}

uint64_t sub_24A160EA0()
{
  return 0x6F4D72656E696F6ALL;
}

uint64_t sub_24A160EC4()
{
  return 0x6E45676E696D6974;
}

uint64_t sub_24A160EE8()
{
  return 0x646F4D6C6562616CLL;
}

uint64_t sub_24A160F0C()
{
  unsigned __int8 *v0;

  return sub_24A160D84(*v0);
}

uint64_t sub_24A160F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A161E8C(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A160F38(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_24A160F44()
{
  sub_24A161AD8();
  return sub_24A2166A4();
}

uint64_t sub_24A160F6C()
{
  sub_24A161AD8();
  return sub_24A2166B0();
}

uint64_t VATasrConfiguration.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VATasrConfiguration.__deallocating_deinit()
{
  VATasrConfiguration.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A161000(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[9];
  uint64_t v22;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790ABA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A161AD8();
  v9 = sub_24A21668C();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 168))(v9);
  BYTE6(v22) = 0;
  sub_24A216530();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 192))(v10);
    BYTE5(v22) = 1;
    sub_24A216518();
    v11 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 216))(v11);
    BYTE4(v22) = 2;
    v12 = sub_24A21653C();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 240))(v12);
    BYTE3(v22) = 3;
    sub_24A216530();
    v14 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 264))(v14);
    BYTE2(v22) = 4;
    sub_24A216530();
    v15 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 288))(v15);
    BYTE1(v22) = 5;
    v16 = sub_24A21653C();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 312))(&v22, v16);
    v21[8] = v22;
    v21[7] = 6;
    sub_24A161B1C();
    v17 = sub_24A216560();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v17);
    v21[6] = 7;
    sub_24A216530();
    v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 360))(v18);
    v21[5] = 8;
    sub_24A216518();
    v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 384))(v19);
    v21[4] = 9;
    sub_24A216518();
    v20 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 408))(v20);
    v21[3] = 10;
    sub_24A21653C();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t VATasrConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  VATasrConfiguration.init(from:)(a1);
  return v2;
}

uint64_t VATasrConfiguration.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v3 = v1;
  v32 = sub_24A135F88(&qword_25790ABB8);
  v5 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  v34 = v3;
  *(_OWORD *)(v3 + 128) = 0u;
  v8 = v3 + 128;
  *(_QWORD *)(v8 - 96) = 0;
  *(_OWORD *)(v8 - 16) = 0u;
  *(_QWORD *)(v8 - 88) = 0;
  sub_24A14B668(a1, a1[3]);
  sub_24A161AD8();
  v31 = v7;
  sub_24A216674();
  if (v2)
  {
    v29 = v34;
    v11 = (uint64_t)v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for VATasrConfiguration();
    swift_deallocPartialClassInstance();
    v28 = v11;
  }
  else
  {
    v30[2] = v8 - 16;
    v9 = v5;
    v37 = 0;
    v10 = sub_24A2164D0();
    v13 = v34;
    *(_QWORD *)(v34 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v14;
    v37 = 1;
    v15 = sub_24A216488();
    v30[1] = v9;
    v17 = v16;
    swift_beginAccess();
    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v17;
    swift_bridgeObjectRelease();
    v36 = 2;
    *(_BYTE *)(v13 + 48) = sub_24A2164DC() & 1;
    v36 = 3;
    *(_QWORD *)(v13 + 56) = sub_24A2164D0();
    *(_QWORD *)(v13 + 64) = v18;
    v36 = 4;
    *(_QWORD *)(v13 + 72) = sub_24A2164D0();
    *(_QWORD *)(v13 + 80) = v19;
    v36 = 5;
    *(_BYTE *)(v13 + 88) = sub_24A2164DC() & 1;
    v35 = 6;
    sub_24A161B60();
    sub_24A2164F4();
    *(_BYTE *)(v13 + 89) = v36;
    v36 = 7;
    *(_QWORD *)(v13 + 96) = sub_24A2164D0();
    *(_QWORD *)(v13 + 104) = v20;
    v36 = 8;
    v21 = sub_24A216488();
    v23 = v22;
    swift_beginAccess();
    *(_QWORD *)(v13 + 112) = v21;
    *(_QWORD *)(v13 + 120) = v23;
    swift_bridgeObjectRelease();
    v35 = 9;
    v24 = sub_24A216488();
    v26 = v25;
    swift_beginAccess();
    v27 = v34;
    *(_QWORD *)(v34 + 128) = v24;
    *(_QWORD *)(v27 + 136) = v26;
    swift_bridgeObjectRelease();
    v38 = 10;
    LOBYTE(v24) = sub_24A2164DC();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v32);
    v28 = (uint64_t)v33;
    v29 = v34;
    *(_BYTE *)(v34 + 144) = v24 & 1;
  }
  sub_24A14D184(v28);
  return v29;
}

uint64_t sub_24A161874@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 464))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A1618A0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 456))();
}

uint64_t sub_24A1618C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v31;

  v19 = v18;
  v23 = a13;
  v31 = *a15;
  *(_QWORD *)(v19 + 32) = 0;
  *(_OWORD *)(v19 + 128) = 0u;
  *(_QWORD *)(v19 + 40) = 0;
  *(_OWORD *)(v19 + 112) = 0u;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  swift_beginAccess();
  *(_QWORD *)(v19 + 112) = a3;
  *(_QWORD *)(v19 + 120) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v19 + 128) = a5;
  *(_QWORD *)(v19 + 136) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v19 + 32) = a7;
  *(_QWORD *)(v19 + 40) = a8;
  swift_bridgeObjectRelease();
  v24 = 0x2E454E415F444156;
  if (a10)
    v24 = a9;
  v25 = 0xEA00000000003565;
  if (a10)
    v25 = a10;
  *(_QWORD *)(v19 + 56) = v24;
  *(_QWORD *)(v19 + 64) = v25;
  *(_BYTE *)(v19 + 48) = a11;
  *(_BYTE *)(v19 + 88) = a14;
  *(_BYTE *)(v19 + 89) = v31;
  *(_QWORD *)(v19 + 96) = a16;
  *(_QWORD *)(v19 + 104) = a17;
  if (!a13)
  {
    swift_bridgeObjectRetain();
    sub_24A215D98();
    a12 = a1;
    v23 = a2;
  }
  *(_QWORD *)(v19 + 72) = a12;
  *(_QWORD *)(v19 + 80) = v23;
  *(_BYTE *)(v19 + 144) = a18 & 1;
  return v19;
}

uint64_t type metadata accessor for VATasrConfiguration()
{
  return objc_opt_self();
}

unint64_t sub_24A161AD8()
{
  unint64_t result;

  result = qword_2579159D0[0];
  if (!qword_2579159D0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219E8C, &type metadata for VATasrConfiguration.CodingKeys);
    atomic_store(result, qword_2579159D0);
  }
  return result;
}

unint64_t sub_24A161B1C()
{
  unint64_t result;

  result = qword_25790ABB0;
  if (!qword_25790ABB0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAComputeUnits, &type metadata for VAComputeUnits);
    atomic_store(result, (unint64_t *)&qword_25790ABB0);
  }
  return result;
}

unint64_t sub_24A161B60()
{
  unint64_t result;

  result = qword_25790ABC0;
  if (!qword_25790ABC0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAComputeUnits, &type metadata for VAComputeUnits);
    atomic_store(result, (unint64_t *)&qword_25790ABC0);
  }
  return result;
}

uint64_t method lookup function for VATasrConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VATasrConfiguration.__allocating_init(tasrModelPath:labelModelPath:joinerModelPath:contextEncoderModelPath:vadModelFilename:useContext:vocabFilename:useEspressoV2:computeUnits:espressoV1ModelPrefix:timingEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 432))();
}

uint64_t dispatch thunk of VATasrConfiguration.tokenizerPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of VATasrConfiguration.configPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of VATasrConfiguration.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of VATasrConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 464))();
}

uint64_t getEnumTagSinglePayload for VATasrConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VATasrConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_24A161D34 + 4 * byte_24A219CE0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_24A161D68 + 4 * byte_24A219CDB[v4]))();
}

uint64_t sub_24A161D68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A161D70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A161D78);
  return result;
}

uint64_t sub_24A161D84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A161D8CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_24A161D90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A161D98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VATasrConfiguration.CodingKeys()
{
  return &type metadata for VATasrConfiguration.CodingKeys;
}

unint64_t sub_24A161DB8()
{
  unint64_t result;

  result = qword_257915BE0[0];
  if (!qword_257915BE0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219E64, &type metadata for VATasrConfiguration.CodingKeys);
    atomic_store(result, qword_257915BE0);
  }
  return result;
}

unint64_t sub_24A161E00()
{
  unint64_t result;

  result = qword_257915CF0;
  if (!qword_257915CF0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219DD4, &type metadata for VATasrConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257915CF0);
  }
  return result;
}

unint64_t sub_24A161E48()
{
  unint64_t result;

  result = qword_257915CF8[0];
  if (!qword_257915CF8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219DFC, &type metadata for VATasrConfiguration.CodingKeys);
    atomic_store(result, qword_257915CF8);
  }
  return result;
}

uint64_t sub_24A161E8C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65646F4D72736174 && a2 == 0xED0000687461506CLL;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A222020 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65746E6F43657375 && a2 == 0xEA00000000007478 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A222050 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C69466261636F76 && a2 == 0xED0000656D616E65 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6572707345657375 && a2 == 0xED000032566F7373 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x55657475706D6F63 && a2 == 0xEC0000007374696ELL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A222090 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x646F4D6C6562616CLL && a2 == 0xEE00687461506C65 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F4D72656E696F6ALL && a2 == 0xEF687461506C6564 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E45676E696D6974 && a2 == 0xED000064656C6261)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_24A1623E0()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A162424(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A16246C()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1624B0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1624F8()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A16253C(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162584()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1625C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162610()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A162654(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A16269C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1626E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162728()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A16276C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1627B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1627F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162840()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A162884(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

float sub_24A1628CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A162910(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

float sub_24A162960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A1629A4(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

float sub_24A1629F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A162A38(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162A88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceLookforward;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A162ACC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceLookforward);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162B14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A162B58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

float sub_24A162BA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A162BE4(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162C34()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A162C78(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162CC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A162D04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A162D4C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A162D84 + 4 * byte_24A219EE0[a1]))(0xD000000000000016, 0x800000024A2221A0);
}

uint64_t sub_24A162D84(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_24A162E64()
{
  return 0x5378614D656B6174;
}

uint64_t sub_24A162E84()
{
  return 0x6D61724674696177;
}

uint64_t sub_24A162EA0()
{
  unsigned __int8 *v0;

  return sub_24A162D4C(*v0);
}

uint64_t sub_24A162EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A164E30(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A162ECC(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_24A162ED8()
{
  sub_24A164164();
  return sub_24A2166A4();
}

uint64_t sub_24A162F00()
{
  sub_24A164164();
  return sub_24A2166B0();
}

uint64_t sub_24A162F28()
{
  return 1;
}

id static VAResultGeneratorConfiguration.buildForFixedSpotter(fixedConfig:waitFrames:)(_QWORD *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4 = *(_BYTE *)sub_24A187BD4();
  v5 = *(_BYTE *)sub_24A187BE8();
  v6 = *(_BYTE *)sub_24A187BFC();
  v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v8 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0xF8))();
  v9 = (*(uint64_t (**)(void))((*v7 & *a1) + 0x110))();
  v10 = objc_allocWithZone((Class)type metadata accessor for VAResultGeneratorConfiguration());
  return sub_24A163300(v4, v5, v6, v8, v9, 0, 5, 50, 0.5, 0.5, 0.5, 0.5, 25, 25, 10, 1, a2);
}

id sub_24A163020(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, __int128 a13, uint64_t a14, char a15, uint64_t a16)
{
  objc_class *v16;
  id v27;

  v27 = objc_allocWithZone(v16);
  return sub_24A163300(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *((uint64_t *)&a13 + 1), a14, a15, a16);
}

uint64_t type metadata accessor for VAResultGeneratorConfiguration()
{
  return objc_opt_self();
}

id _s12VoiceActions30VAResultGeneratorConfigurationC23buildForFlexibleSpotterACyFZ_0()
{
  char v0;
  char v1;
  char v2;
  id v3;

  v0 = *(_BYTE *)sub_24A1C9C3C();
  v1 = *(_BYTE *)sub_24A1C9C50();
  v2 = *(_BYTE *)sub_24A1C9C64();
  v3 = objc_allocWithZone((Class)type metadata accessor for VAResultGeneratorConfiguration());
  return sub_24A163300(v0, v1, v2, 126, 8, 5, 5, 6, 0.5, 0.5, 0.8, 0.5, 3, 6, 3, 1, 1);
}

unint64_t static VAResultGeneratorConfiguration.buildFromConfigFile(jsonFile:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v6;
  char v7;

  type metadata accessor for VAResultGeneratorConfiguration();
  v1 = sub_24A164A60(&qword_25790AE68, v0, (uint64_t (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration, (uint64_t)&protocol conformance descriptor for VAResultGeneratorConfiguration);
  sub_24A17D140(v1, &v6);
  v2 = v6;
  if ((v7 & 1) != 0)
  {
    if (v6 == 0x8000000000000000)
    {
      sub_24A216308();
      swift_bridgeObjectRelease();
      sub_24A215D98();
      v2 = 0x800000024A2220E0;
      sub_24A14C404();
      swift_allocError();
      *v3 = 0xD000000000000023;
      v3[1] = 0x800000024A2220E0;
    }
    else
    {
      sub_24A14D2EC();
      swift_allocError();
      *v4 = v2;
    }
    swift_willThrow();
  }
  return v2;
}

id sub_24A163300(char a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  _BYTE *v17;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  float *v35;
  float *v36;
  float *v38;
  _QWORD *v39;
  _QWORD *v40;
  float *v42;
  _BYTE *v44;
  _QWORD *v45;
  objc_super v49;

  v22 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled];
  v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled] = 0;
  v23 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled];
  v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled] = 0;
  v24 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled];
  v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled] = 0;
  v25 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength] = 197;
  v26 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride] = 1;
  v27 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold] = 0;
  v28 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize] = 1;
  v29 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback] = 30;
  v30 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected] = 20;
  v35 = (float *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability];
  *(_DWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability] = 1056964608;
  v36 = (float *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio];
  *(_DWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio] = 1056964608;
  v38 = (float *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability];
  *(_DWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability] = 1061997773;
  v31 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceLookforward];
  *v31 = 50;
  v39 = v31;
  v40 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected] = 20;
  v42 = (float *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability];
  *(_DWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability] = 1056964608;
  v44 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore];
  v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore] = 0;
  v45 = &v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames];
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames] = 1;
  swift_beginAccess();
  *v22 = a1;
  swift_beginAccess();
  *v23 = a2;
  swift_beginAccess();
  *v24 = a3;
  swift_beginAccess();
  *v25 = a4;
  swift_beginAccess();
  *v26 = a5;
  swift_beginAccess();
  *v27 = a6;
  swift_beginAccess();
  *v28 = a7;
  swift_beginAccess();
  *v29 = a8;
  swift_beginAccess();
  *v30 = a13;
  swift_beginAccess();
  *v35 = a9;
  swift_beginAccess();
  *v36 = a10;
  swift_beginAccess();
  *v38 = a11;
  swift_beginAccess();
  *v39 = a14;
  swift_beginAccess();
  *v40 = a15;
  swift_beginAccess();
  *v42 = a12;
  swift_beginAccess();
  *v44 = a16;
  swift_beginAccess();
  *v45 = a17;
  v49.receiver = v17;
  v49.super_class = (Class)type metadata accessor for VAResultGeneratorConfiguration();
  return objc_msgSendSuper2(&v49, sel_init);
}

id VAResultGeneratorConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VAResultGeneratorConfiguration.init(from:)(a1);
}

id VAResultGeneratorConfiguration.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  id v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  char v18;
  _BYTE *v19;
  char v20;
  char v21;
  char v23;
  char v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  int *v56;
  int *v57;
  uint64_t v58;
  int v59;
  int *v60;
  int *v61;
  uint64_t v62;
  int v63;
  int *v64;
  int *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  int *v78;
  int *v79;
  char v80;
  char *v81;
  char v82;
  char *v83;
  uint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t *v87;
  id v88;
  objc_class *v89;
  uint64_t *v90;
  char *v91;
  int *v92;
  uint64_t *v93;
  uint64_t *v94;
  int *v95;
  int *v96;
  int *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  _BYTE *v104;
  char *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  id v110;
  objc_super v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char *v129;

  v3 = sub_24A135F88(&qword_25790AE70);
  v4 = *(_QWORD *)(v3 - 8);
  v107 = v3;
  v108 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v129 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = &v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled];
  v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceCheckEnabled] = 0;
  v105 = &v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled];
  v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceCheckEnabled] = 0;
  v104 = &v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled];
  v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringSpeechCheckEnabled] = 0;
  v103 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldLength] = 197;
  v102 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_receptiveFieldStride] = 1;
  v101 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_overlapThreshold] = 0;
  v100 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_averagingWindowSize] = 1;
  v99 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceLookback] = 30;
  v98 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceExpected] = 20;
  v95 = (int *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability];
  *(_DWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_preSilenceProbability] = 1056964608;
  v97 = (int *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio];
  *(_DWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandExpectedSpeechRatio] = 1056964608;
  v96 = (int *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability];
  *(_DWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_duringCommandSpeechProbability] = 1061997773;
  v6 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceLookforward];
  *v6 = 50;
  v93 = (uint64_t *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected];
  v94 = v6;
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceExpected] = 20;
  v92 = (int *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability];
  *(_DWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_postSilenceProbability] = 1056964608;
  v7 = &v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore];
  v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_takeMaxScore] = 0;
  v8 = &v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames];
  *(_QWORD *)&v1[OBJC_IVAR____TtC12VoiceActions30VAResultGeneratorConfiguration_waitFrames] = 1;
  v9 = a1[3];
  v109 = a1;
  sub_24A14B668(a1, v9);
  sub_24A164164();
  v10 = v1;
  v11 = v110;
  sub_24A216674();
  if (v11)
  {

    v12 = v10;
    sub_24A14D184((uint64_t)v109);
    type metadata accessor for VAResultGeneratorConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v14 = v105;
    v13 = v106;
    v15 = v104;
    v90 = (uint64_t *)v8;
    v91 = v7;
    v110 = v10;
    v128 = 0;
    v16 = v107;
    v17 = v129;
    v18 = sub_24A216494();
    if (v18 == 2)
    {
      v19 = v13;
      swift_beginAccess();
      v20 = *v13;
    }
    else
    {
      v20 = v18 & 1;
      v19 = v13;
    }
    swift_beginAccess();
    *v19 = v20;
    v127 = 1;
    v21 = sub_24A216494();
    if (v21 == 2)
    {
      swift_beginAccess();
      v23 = *v14;
    }
    else
    {
      v23 = v21 & 1;
    }
    swift_beginAccess();
    *v14 = v23;
    v126 = 2;
    v24 = sub_24A216494();
    if (v24 == 2)
    {
      swift_beginAccess();
      v25 = v15;
      v26 = *v15;
    }
    else
    {
      v26 = v24 & 1;
      v25 = v15;
    }
    swift_beginAccess();
    *v25 = v26;
    v125 = 3;
    v27 = sub_24A2164AC();
    if ((v28 & 1) != 0)
    {
      v30 = v103;
      swift_beginAccess();
      v29 = *v30;
    }
    else
    {
      v29 = v27;
      v30 = v103;
    }
    swift_beginAccess();
    *v30 = v29;
    v124 = 4;
    v31 = sub_24A2164AC();
    if ((v32 & 1) != 0)
    {
      v34 = v102;
      swift_beginAccess();
      v33 = *v34;
    }
    else
    {
      v33 = v31;
      v34 = v102;
    }
    swift_beginAccess();
    *v34 = v33;
    v123 = 5;
    v35 = sub_24A2164AC();
    if ((v36 & 1) != 0)
    {
      v38 = v101;
      swift_beginAccess();
      v37 = *v38;
    }
    else
    {
      v37 = v35;
      v38 = v101;
    }
    swift_beginAccess();
    *v38 = v37;
    v122 = 6;
    v39 = sub_24A2164AC();
    if ((v40 & 1) != 0)
    {
      v42 = v100;
      swift_beginAccess();
      v41 = *v42;
    }
    else
    {
      v41 = v39;
      v42 = v100;
    }
    swift_beginAccess();
    *v42 = v41;
    v121 = 7;
    v43 = sub_24A2164AC();
    if ((v44 & 1) != 0)
    {
      v46 = v99;
      swift_beginAccess();
      v45 = *v46;
    }
    else
    {
      v45 = v43;
      v46 = v99;
    }
    swift_beginAccess();
    *v46 = v45;
    v120 = 8;
    v47 = sub_24A2164AC();
    v48 = v17;
    v49 = v16;
    if ((v50 & 1) != 0)
    {
      v52 = v98;
      swift_beginAccess();
      v51 = *v52;
    }
    else
    {
      v51 = v47;
    }
    v53 = v98;
    swift_beginAccess();
    *v53 = v51;
    v119 = 10;
    v54 = sub_24A2164A0();
    v55 = v54;
    if ((v54 & 0x100000000) != 0)
    {
      v56 = v97;
      swift_beginAccess();
      v55 = *v56;
    }
    v57 = v97;
    swift_beginAccess();
    *v57 = v55;
    v118 = 11;
    v58 = sub_24A2164A0();
    v59 = v58;
    if ((v58 & 0x100000000) != 0)
    {
      v60 = v96;
      swift_beginAccess();
      v59 = *v60;
    }
    v61 = v96;
    swift_beginAccess();
    *v61 = v59;
    v117 = 9;
    v62 = sub_24A2164A0();
    v63 = v62;
    if ((v62 & 0x100000000) != 0)
    {
      v64 = v95;
      swift_beginAccess();
      v63 = *v64;
    }
    v65 = v95;
    swift_beginAccess();
    *v65 = v63;
    v116 = 12;
    v66 = sub_24A2164AC();
    if ((v67 & 1) != 0)
    {
      v69 = v94;
      swift_beginAccess();
      v68 = *v69;
    }
    else
    {
      v68 = v66;
    }
    v70 = v94;
    swift_beginAccess();
    *v70 = v68;
    v115 = 13;
    v71 = sub_24A2164AC();
    if ((v72 & 1) != 0)
    {
      v74 = v93;
      swift_beginAccess();
      v73 = *v74;
    }
    else
    {
      v73 = v71;
    }
    v75 = v93;
    swift_beginAccess();
    *v75 = v73;
    v114 = 14;
    v76 = sub_24A2164A0();
    v77 = v76;
    if ((v76 & 0x100000000) != 0)
    {
      v78 = v92;
      swift_beginAccess();
      v77 = *v78;
    }
    v79 = v92;
    swift_beginAccess();
    *v79 = v77;
    v113 = 15;
    v80 = sub_24A216494();
    if (v80 == 2)
    {
      v81 = v91;
      swift_beginAccess();
      v82 = *v81;
    }
    else
    {
      v82 = v80 & 1;
    }
    v83 = v91;
    swift_beginAccess();
    *v83 = v82;
    v112 = 16;
    v84 = sub_24A2164C4();
    LOBYTE(v83) = v85;
    (*(void (**)(char *, uint64_t))(v108 + 8))(v48, v49);
    if ((v83 & 1) != 0)
    {
      v86 = v90;
      swift_beginAccess();
      v84 = *v86;
    }
    v87 = v90;
    swift_beginAccess();
    *v87 = v84;
    v88 = v110;

    v89 = (objc_class *)type metadata accessor for VAResultGeneratorConfiguration();
    v111.receiver = v88;
    v111.super_class = v89;
    v12 = objc_msgSendSuper2(&v111, sel_init);
    sub_24A14D184((uint64_t)v109);
  }
  return v12;
}

unint64_t sub_24A164164()
{
  unint64_t result;

  result = qword_257915D80[0];
  if (!qword_257915D80[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A044, &type metadata for VAResultGeneratorConfiguration.CodingKeys);
    atomic_store(result, qword_257915D80);
  }
  return result;
}

uint64_t sub_24A1641A8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790AE78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A164164();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0xD8))(v9);
  v29 = 0;
  v11 = sub_24A21653C();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xF0))(v11);
    v29 = 1;
    v12 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x108))(v12);
    v29 = 2;
    v13 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x120))(v13);
    v29 = 3;
    v14 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x138))(v14);
    v29 = 4;
    v15 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x150))(v15);
    v29 = 5;
    v16 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x168))(v16);
    v29 = 6;
    v17 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x180))(v17);
    v29 = 7;
    v18 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x198))(v18);
    v29 = 8;
    v19 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x1B0))(v19);
    v29 = 9;
    v20 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x1C8))(v20);
    v29 = 10;
    v21 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x1E0))(v21);
    v29 = 11;
    v22 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x210))(v22);
    v29 = 13;
    v23 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x228))(v23);
    v29 = 14;
    v24 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x240))(v24);
    v29 = 15;
    v25 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x258))(v25);
    v29 = 16;
    v26 = sub_24A21656C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x1F8))(v26);
    v29 = 12;
    sub_24A216554();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24A1646D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  sub_24A164A60(&qword_25790AE68, a2, (uint64_t (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration, (uint64_t)&protocol conformance descriptor for VAResultGeneratorConfiguration);
  v2 = sub_24A164798();
  v3 = v2;
  v5 = v4;
  if ((v6 & 1) != 0)
  {
    if (v2 == 0x8000000000000000)
    {
      return 0xD00000000000001FLL;
    }
    else
    {
      sub_24A2163D4();
      sub_24A1649E8(v3, v5, 1);
      return 0;
    }
  }
  return v3;
}

uint64_t sub_24A164798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v0 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_24A2155F4();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8];
  MEMORY[0x24BDAC7A8](v1);
  sub_24A215624();
  swift_allocObject();
  sub_24A215618();
  sub_24A135F88(&qword_25790AE80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_24A218660;
  sub_24A2155E8();
  sub_24A2155DC();
  sub_24A164A60(&qword_25790AE88, 255, v2, MEMORY[0x24BDCB2C8]);
  sub_24A135F88(&qword_25790AE90);
  sub_24A164A14();
  sub_24A2162D8();
  sub_24A215600();
  type metadata accessor for VAResultGeneratorConfiguration();
  sub_24A164A60(&qword_25790AEA0, v3, (uint64_t (*)(uint64_t))type metadata accessor for VAResultGeneratorConfiguration, (uint64_t)&protocol conformance descriptor for VAResultGeneratorConfiguration);
  v4 = sub_24A21560C();
  v6 = v5;
  sub_24A215CF0();
  v7 = sub_24A215CCC();
  if (v8)
  {
    v9 = v7;
    sub_24A135F1C(v4, v6);
    swift_release();
  }
  else
  {
    sub_24A135F1C(v4, v6);
    swift_release();
    return 0;
  }
  return v9;
}

void sub_24A1649E8(unint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    sub_24A1649F8(a1);
  else
    swift_bridgeObjectRelease();
}

void sub_24A1649F8(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1)
      return;
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }

}

unint64_t sub_24A164A14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790AE98;
  if (!qword_25790AE98)
  {
    v1 = sub_24A139148(&qword_25790AE90);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25790AE98);
  }
  return result;
}

uint64_t sub_24A164A60(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x24BD0A9EC](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

id VAResultGeneratorConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VAResultGeneratorConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VAResultGeneratorConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAResultGeneratorConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A164B48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 632))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A164B74()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x280))();
}

uint64_t method lookup function for VAResultGeneratorConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAResultGeneratorConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 632))();
}

uint64_t dispatch thunk of VAResultGeneratorConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x280))();
}

uint64_t getEnumTagSinglePayload for VAResultGeneratorConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VAResultGeneratorConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_24A164CD8 + 4 * byte_24A219EF6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_24A164D0C + 4 * byte_24A219EF1[v4]))();
}

uint64_t sub_24A164D0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A164D14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A164D1CLL);
  return result;
}

uint64_t sub_24A164D28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A164D30);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_24A164D34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A164D3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VAResultGeneratorConfiguration.CodingKeys()
{
  return &type metadata for VAResultGeneratorConfiguration.CodingKeys;
}

unint64_t sub_24A164D5C()
{
  unint64_t result;

  result = qword_257915F90[0];
  if (!qword_257915F90[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A01C, &type metadata for VAResultGeneratorConfiguration.CodingKeys);
    atomic_store(result, qword_257915F90);
  }
  return result;
}

unint64_t sub_24A164DA4()
{
  unint64_t result;

  result = qword_2579160A0;
  if (!qword_2579160A0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219F8C, &type metadata for VAResultGeneratorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579160A0);
  }
  return result;
}

unint64_t sub_24A164DEC()
{
  unint64_t result;

  result = qword_2579160A8[0];
  if (!qword_2579160A8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A219FB4, &type metadata for VAResultGeneratorConfiguration.CodingKeys);
    atomic_store(result, qword_2579160A8);
  }
  return result;
}

uint64_t sub_24A164E30(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x800000024A2221A0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A2221C0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000024A2221E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A222200 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A222220 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A222240 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A222260 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A222280 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A2222A0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A2222C0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x800000024A2222E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000024A222310 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A222330 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A222350 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000024A222370 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x5378614D656B6174 && a2 == 0xEC00000065726F63 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6D61724674696177 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t sub_24A165460()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_24A165490(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 112) = a1;
  return result;
}

uint64_t (*sub_24A1654CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A165508(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A165524()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 16) + 104))(*(unsigned __int8 *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A165560()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_24A165578()
{
  uint64_t v0;
  char v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 96))();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t sub_24A1655B4()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_24A1655D0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_BYTE *)(v0 + 112) = 0;
  return v0;
}

uint64_t sub_24A165608()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_24A165614()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A165648(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = a1;
  return swift_release();
}

uint64_t sub_24A16568C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 128);
}

uint64_t sub_24A1656BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t sub_24A1656F8()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t sub_24A165728(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 136) = a1;
  return result;
}

uint64_t (*sub_24A165764())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1657A0()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 152);
}

uint64_t sub_24A1657D4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 152) = a1;
  *(_BYTE *)(v2 + 160) = a2 & 1;
  return result;
}

uint64_t (*sub_24A165824())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A165860()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 178);
}

uint64_t sub_24A165890(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 178) = a1;
  return result;
}

uint64_t (*sub_24A1658CC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A165908(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v7;
  uint64_t v8;

  v7 = a4 & 1;
  v8 = swift_allocObject();
  sub_24A16596C(a1, a2, a3, v7);
  return v8;
}

uint64_t sub_24A16596C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;

  swift_defaultActor_initialize();
  v9 = *(_QWORD *)sub_24A2157C8();
  *(_BYTE *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 112) = v9;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  *(_BYTE *)(v4 + 160) = 1;
  *(_BYTE *)(v4 + 178) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_QWORD *)(v4 + 192) = 0;
  *(_QWORD *)(v4 + 144) = a1;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 168) = a3;
  *(_BYTE *)(v4 + 176) = a4 & 1;
  *(_BYTE *)(v4 + 177) = a2;
  swift_retain();
  return v4;
}

uint64_t sub_24A1659EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  return swift_task_switch();
}

uint64_t sub_24A165A08()
{
  _QWORD *v0;
  double v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)(void);
  unint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (*v18)(_QWORD *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v2 = (uint64_t *)v0[8];
  v3 = (*(uint64_t (**)(void))(*v2 + 200))();
  v4 = *v2;
  if (v3)
  {
    v6 = *(uint64_t (**)(void))(v4 + 224);
    v5 = v0[7];
    if (v6() > v5)
    {
      v7 = v0[7];
      v8 = v6();
      if (v8 >= v7)
      {
        v1 = (double)(v8 - v7);
        if (qword_257916130 == -1)
        {
LABEL_5:
          swift_beginAccess();
          v9 = v1 / *(double *)&qword_25791D748 / 1000000000.0 * 1000.0;
          sub_24A216308();
          sub_24A215D98();
          sub_24A135F88(qword_25790AEF0);
          v10 = swift_allocObject();
          v11 = MEMORY[0x24BEE13C8];
          *(_OWORD *)(v10 + 16) = xmmword_24A218650;
          v12 = MEMORY[0x24BEE1448];
          *(_QWORD *)(v10 + 56) = v11;
          *(_QWORD *)(v10 + 64) = v12;
          *(double *)(v10 + 32) = v9;
          sub_24A215CE4();
          sub_24A215D98();
          swift_bridgeObjectRelease();
          sub_24A215D98();
          sub_24A14C404();
LABEL_6:
          swift_allocError();
          *v13 = 0;
          v13[1] = 0xE000000000000000;
          swift_willThrow();
          v14 = (uint64_t (*)(void))v0[1];
          return v14();
        }
LABEL_24:
        swift_once();
        goto LABEL_5;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
  }
  else
  {
    (*(void (**)(_QWORD))(v4 + 208))(v0[7]);
  }
  v15 = v0[8];
  v16 = v0[6];
  (*(void (**)(_QWORD))(*(_QWORD *)v15 + 232))(v0[7]);
  v18 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v15 + 192))(v0 + 2);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = *(_QWORD *)(*v17 + 24);
  v21 = v20 + v19;
  if (__OFADD__(v20, v19))
  {
    __break(1u);
    goto LABEL_23;
  }
  v22 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v24 = *v22;
  if (*(_QWORD *)(*v22 + 16) < v21 || (isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_24A16A73C(v21);
    v24 = *v22;
  }
  sub_24A16A908((uint64_t *)(v24 + 16), v24 + 40, (char *)(v0[6] + 32), v19);
  v25 = v0[8];
  v26 = v18(v0 + 2, 0);
  if ((*(_BYTE *)(v25 + 176) & 1) == 0)
  {
    v27 = *(_QWORD *)(v25 + 168);
    v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0[8] + 176);
    v29 = *(_QWORD *)(v28(v26) + 24);
    v26 = swift_release();
    if (v27 < v29)
    {
      sub_24A216308();
      v30 = sub_24A215D98();
      v31 = *(_QWORD *)(v28(v30) + 24);
      swift_release();
      v0[2] = v31;
      sub_24A216584();
      sub_24A215D98();
      swift_bridgeObjectRelease();
      sub_24A215D98();
      v0[2] = v27;
      sub_24A216584();
      sub_24A215D98();
      swift_bridgeObjectRelease();
      sub_24A16A9EC();
      goto LABEL_6;
    }
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0[8] + 272))(v26);
  if ((v33 & 1) == 0)
  {
    v34 = v32;
    v35 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v0[8] + 176))() + 24);
    swift_release();
    if (v35 >= v34)
    {
      v36 = (_QWORD *)v0[8];
      if (v36[23])
      {
        swift_retain();
        sub_24A215FCC();
        swift_release();
        v36 = (_QWORD *)v0[8];
      }
      (*(void (**)(_QWORD, uint64_t))(*v36 + 280))(0, 1);
    }
  }
  v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

double sub_24A165E68(unint64_t a1)
{
  if (qword_257916130 != -1)
    swift_once();
  swift_beginAccess();
  return (double)a1 / *(double *)&qword_25791D748 / 1000000000.0;
}

uint64_t sub_24A165EF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_24A215A8C();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A165F64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD **)(v0 + 16);
  (*(void (**)(uint64_t))(*v1 + 256))(1);
  v2 = v1[23];
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  if (v2)
  {
    v5 = *(_QWORD *)(v0 + 48);
    swift_retain();
    v6 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v6, v3);
    v7 = sub_24A215A74();
    v8 = sub_24A2160F8();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24A12D000, v7, v8, "stop ingestion buffer", v9, 2u);
      MEMORY[0x24BD0AAAC](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 24);
    v12 = *(_QWORD *)(v0 + 32);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    sub_24A215FCC();
    swift_release();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 40);
    v14 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v13, v14, v3);
    v15 = sub_24A215A74();
    v16 = sub_24A2160F8();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_24A12D000, v15, v16, "No wait task", v17, 2u);
      MEMORY[0x24BD0AAAC](v17, -1, -1);
    }
    v19 = *(_QWORD *)(v0 + 32);
    v18 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A16614C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 80) = v1;
  *(_BYTE *)(v2 + 200) = a1;
  sub_24A135F88(&qword_25790A7C0);
  *(_QWORD *)(v2 + 88) = swift_task_alloc();
  v3 = sub_24A215A8C();
  *(_QWORD *)(v2 + 96) = v3;
  *(_QWORD *)(v2 + 104) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 112) = swift_task_alloc();
  return swift_task_switch();
}

_QWORD *sub_24A1661D4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  _QWORD *result;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, _QWORD);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;

  v1 = *(_QWORD **)(v0 + 80);
  v2 = (_QWORD *)v1[18];
  *(_QWORD *)(v0 + 120) = v2;
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0xB8))();
  *(_QWORD *)(v0 + 128) = v4;
  *(_QWORD *)(v0 + 136) = (*(uint64_t (**)(void))((*v3 & *v2) + 0xD0))();
  v5 = *(uint64_t (**)(void))(*v1 + 176);
  *(_QWORD *)(v0 + 144) = v5;
  v6 = *(_QWORD *)(v5() + 24);
  result = (_QWORD *)swift_release();
  if (v6 < v4)
  {
    v8 = (*(uint64_t (**)(_QWORD *))(**(_QWORD **)(v0 + 80) + 296))(result);
    v9 = *(_BYTE **)(v0 + 80);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      mach_absolute_time();
      *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)v9 + 248);
      v12 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 160) = v12;
      *v12 = v0;
      v12[1] = sub_24A166480;
      return (_QWORD *)sub_24A167418(v4);
    }
    v10 = 0;
    if ((v9[177] & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      v11 = 0;
      if ((*(_BYTE *)(v0 + 200) & 1) == 0)
        goto LABEL_5;
    }
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v0 + 128);
  if (v13 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 144))(result);
  if (result[3] < v13)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v14 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 80);
  v10 = sub_24A16B218(0, *(_QWORD *)(v0 + 128), result);
  v16 = swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 248))(v16);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 192))(v0 + 16);
  if (v14 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v18 = (uint64_t (*)(uint64_t, _QWORD))result;
  v19 = v17;
  result = *(_QWORD **)v17;
  if (*(_QWORD *)(*(_QWORD *)v17 + 24) >= *(_QWORD *)(v0 + 136))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      sub_24A16B0EC();
    sub_24A16B180((uint64_t *)(*(_QWORD *)v19 + 16), *(_QWORD *)v19 + 40, *(_QWORD *)(v0 + 136));
    v20 = *(_QWORD **)(v0 + 120);
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 136);
    v23 = v18(v0 + 16, 0);
    v24 = (double)v22 / (double)(*(uint64_t (**)(uint64_t))((*v3 & *v20) + 0xA0))(v23);
    v25 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 200))();
    v11 = sub_24A16B63C(v25, v24);
    (*(void (**)(void))(*(_QWORD *)v21 + 208))();
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 304))(1);
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v11);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_24A166480()
{
  swift_task_dealloc();
  return swift_task_switch();
}

_QWORD *sub_24A1664D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;

  if (((*(uint64_t (**)(void))(v0 + 152))() & 1) != 0)
  {
    v1 = 0;
    v2 = 0;
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  }
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)((*(uint64_t (**)(void))(v0 + 144))() + 24);
  result = (_QWORD *)swift_release();
  if (v5 < v4)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v6 + 184);
    *(_QWORD *)(v0 + 168) = v7;
    if (v7)
    {
      v9 = *(_QWORD *)(v0 + 104);
      v8 = *(_QWORD *)(v0 + 112);
      v10 = *(_QWORD *)(v0 + 96);
      swift_retain();
      v11 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
      v12 = sub_24A215A74();
      v13 = sub_24A216104();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_24A12D000, v12, v13, "Multiple readers waiting for ingestion buffer", v14, 2u);
        MEMORY[0x24BD0AAAC](v14, -1, -1);
      }
      v16 = *(_QWORD *)(v0 + 104);
      v15 = *(_QWORD *)(v0 + 112);
      v17 = *(_QWORD *)(v0 + 96);

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      v18 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v18;
      *v18 = v0;
      v18[1] = sub_24A166EE0;
      return (_QWORD *)sub_24A215FE4();
    }
    v26 = *(_QWORD *)(v0 + 88);
    v27 = sub_24A215F78();
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v26, 1, 1, v27);
    v30 = sub_24A164A60(&qword_25790AF18, v29, (uint64_t (*)(uint64_t))type metadata accessor for IngestionAudioBufferActor, (uint64_t)&unk_24A21A14C);
    v31 = (_QWORD *)swift_allocObject();
    v31[2] = v6;
    v31[3] = v30;
    v31[4] = v6;
    LODWORD(v30) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27);
    swift_retain_n();
    v32 = *(_QWORD *)(v0 + 88);
    if ((_DWORD)v30 == 1)
    {
      sub_24A159A10(*(_QWORD *)(v0 + 88));
      if (v6)
      {
LABEL_18:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v33 = sub_24A215F54();
        v35 = v34;
        swift_unknownObjectRelease();
LABEL_21:
        v42 = swift_allocObject();
        *(_QWORD *)(v42 + 16) = &unk_25790AF20;
        *(_QWORD *)(v42 + 24) = v31;
        if (v35 | v33)
        {
          *(_QWORD *)(v0 + 48) = 0;
          *(_QWORD *)(v0 + 56) = 0;
          *(_QWORD *)(v0 + 64) = v33;
          *(_QWORD *)(v0 + 72) = v35;
        }
        v43 = *(_QWORD *)(v0 + 128);
        v44 = *(_QWORD **)(v0 + 80);
        v45 = swift_task_create();
        *(_QWORD *)(v0 + 176) = v45;
        v44[23] = v45;
        swift_retain();
        swift_release();
        (*(void (**)(uint64_t, _QWORD))(*v44 + 280))(v43, 0);
        v46 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 184) = v46;
        *v46 = v0;
        v46[1] = sub_24A1669AC;
        return (_QWORD *)sub_24A215FE4();
      }
    }
    else
    {
      sub_24A215F6C();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v27);
      if (v31[2])
        goto LABEL_18;
    }
    v33 = 0;
    v35 = 0;
    goto LABEL_21;
  }
  v19 = *(_QWORD *)(v0 + 128);
  if (v19 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 144))(result);
  if (result[3] < v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 80);
  v1 = sub_24A16B218(0, *(_QWORD *)(v0 + 128), result);
  v22 = swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 248))(v22);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 192))(v0 + 16);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v24 = (uint64_t (*)(uint64_t, _QWORD))result;
    v25 = v23;
    result = *(_QWORD **)v23;
    if (*(_QWORD *)(*(_QWORD *)v23 + 24) >= *(_QWORD *)(v0 + 136))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_24A16B0EC();
      sub_24A16B180((uint64_t *)(*(_QWORD *)v25 + 16), *(_QWORD *)v25 + 40, *(_QWORD *)(v0 + 136));
      v36 = *(_QWORD **)(v0 + 120);
      v37 = *(_QWORD *)(v0 + 80);
      v38 = *(_QWORD *)(v0 + 136);
      v39 = v24(v0 + 16, 0);
      v40 = (double)v38 / (double)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v36) + 0xA0))(v39);
      v41 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 200))();
      v2 = sub_24A16B63C(v41, v40);
      (*(void (**)(void))(*(_QWORD *)v37 + 208))();
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 304))(1);
      goto LABEL_3;
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A1669AC()
{
  swift_task_dealloc();
  return swift_task_switch();
}

_QWORD *sub_24A166A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;

  v1 = swift_release();
  if (((*(uint64_t (**)(uint64_t))(v0 + 152))(v1) & 1) != 0)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)((*(uint64_t (**)(void))(v0 + 144))() + 24);
  result = (_QWORD *)swift_release();
  if (v6 < v5)
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v7 + 184);
    *(_QWORD *)(v0 + 168) = v8;
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 104);
      v9 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 96);
      swift_retain();
      v12 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
      v13 = sub_24A215A74();
      v14 = sub_24A216104();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_24A12D000, v13, v14, "Multiple readers waiting for ingestion buffer", v15, 2u);
        MEMORY[0x24BD0AAAC](v15, -1, -1);
      }
      v17 = *(_QWORD *)(v0 + 104);
      v16 = *(_QWORD *)(v0 + 112);
      v18 = *(_QWORD *)(v0 + 96);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v19;
      *v19 = v0;
      v19[1] = sub_24A166EE0;
      return (_QWORD *)sub_24A215FE4();
    }
    v27 = *(_QWORD *)(v0 + 88);
    v28 = sub_24A215F78();
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    v31 = sub_24A164A60(&qword_25790AF18, v30, (uint64_t (*)(uint64_t))type metadata accessor for IngestionAudioBufferActor, (uint64_t)&unk_24A21A14C);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v7;
    v32[3] = v31;
    v32[4] = v7;
    LODWORD(v31) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
    swift_retain_n();
    v33 = *(_QWORD *)(v0 + 88);
    if ((_DWORD)v31 == 1)
    {
      sub_24A159A10(*(_QWORD *)(v0 + 88));
      if (v7)
      {
LABEL_18:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v34 = sub_24A215F54();
        v36 = v35;
        swift_unknownObjectRelease();
LABEL_21:
        v43 = swift_allocObject();
        *(_QWORD *)(v43 + 16) = &unk_25790AF20;
        *(_QWORD *)(v43 + 24) = v32;
        if (v36 | v34)
        {
          *(_QWORD *)(v0 + 48) = 0;
          *(_QWORD *)(v0 + 56) = 0;
          *(_QWORD *)(v0 + 64) = v34;
          *(_QWORD *)(v0 + 72) = v36;
        }
        v44 = *(_QWORD *)(v0 + 128);
        v45 = *(_QWORD **)(v0 + 80);
        v46 = swift_task_create();
        *(_QWORD *)(v0 + 176) = v46;
        v45[23] = v46;
        swift_retain();
        swift_release();
        (*(void (**)(uint64_t, _QWORD))(*v45 + 280))(v44, 0);
        v47 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 184) = v47;
        *v47 = v0;
        v47[1] = sub_24A1669AC;
        return (_QWORD *)sub_24A215FE4();
      }
    }
    else
    {
      sub_24A215F6C();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v33, v28);
      if (v32[2])
        goto LABEL_18;
    }
    v34 = 0;
    v36 = 0;
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(v0 + 128);
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 144))(result);
  if (result[3] < v20)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 80);
  v2 = sub_24A16B218(0, *(_QWORD *)(v0 + 128), result);
  v23 = swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 248))(v23);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 192))(v0 + 16);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v25 = (uint64_t (*)(uint64_t, _QWORD))result;
    v26 = v24;
    result = *(_QWORD **)v24;
    if (*(_QWORD *)(*(_QWORD *)v24 + 24) >= *(_QWORD *)(v0 + 136))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_24A16B0EC();
      sub_24A16B180((uint64_t *)(*(_QWORD *)v26 + 16), *(_QWORD *)v26 + 40, *(_QWORD *)(v0 + 136));
      v37 = *(_QWORD **)(v0 + 120);
      v38 = *(_QWORD *)(v0 + 80);
      v39 = *(_QWORD *)(v0 + 136);
      v40 = v25(v0 + 16, 0);
      v41 = (double)v39 / (double)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v37) + 0xA0))(v40);
      v42 = (*(uint64_t (**)(void))(*(_QWORD *)v38 + 200))();
      v3 = sub_24A16B63C(v42, v41);
      (*(void (**)(void))(*(_QWORD *)v38 + 208))();
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 304))(1);
      goto LABEL_3;
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A166EE0()
{
  swift_task_dealloc();
  return swift_task_switch();
}

_QWORD *sub_24A166F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;

  v1 = swift_release();
  if (((*(uint64_t (**)(uint64_t))(v0 + 152))(v1) & 1) != 0)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  }
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)((*(uint64_t (**)(void))(v0 + 144))() + 24);
  result = (_QWORD *)swift_release();
  if (v6 < v5)
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v7 + 184);
    *(_QWORD *)(v0 + 168) = v8;
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 104);
      v9 = *(_QWORD *)(v0 + 112);
      v11 = *(_QWORD *)(v0 + 96);
      swift_retain();
      v12 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
      v13 = sub_24A215A74();
      v14 = sub_24A216104();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_24A12D000, v13, v14, "Multiple readers waiting for ingestion buffer", v15, 2u);
        MEMORY[0x24BD0AAAC](v15, -1, -1);
      }
      v17 = *(_QWORD *)(v0 + 104);
      v16 = *(_QWORD *)(v0 + 112);
      v18 = *(_QWORD *)(v0 + 96);

      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v19;
      *v19 = v0;
      v19[1] = sub_24A166EE0;
      return (_QWORD *)sub_24A215FE4();
    }
    v27 = *(_QWORD *)(v0 + 88);
    v28 = sub_24A215F78();
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    v31 = sub_24A164A60(&qword_25790AF18, v30, (uint64_t (*)(uint64_t))type metadata accessor for IngestionAudioBufferActor, (uint64_t)&unk_24A21A14C);
    v32 = (_QWORD *)swift_allocObject();
    v32[2] = v7;
    v32[3] = v31;
    v32[4] = v7;
    LODWORD(v31) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
    swift_retain_n();
    v33 = *(_QWORD *)(v0 + 88);
    if ((_DWORD)v31 == 1)
    {
      sub_24A159A10(*(_QWORD *)(v0 + 88));
      if (v7)
      {
LABEL_18:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v34 = sub_24A215F54();
        v36 = v35;
        swift_unknownObjectRelease();
LABEL_21:
        v43 = swift_allocObject();
        *(_QWORD *)(v43 + 16) = &unk_25790AF20;
        *(_QWORD *)(v43 + 24) = v32;
        if (v36 | v34)
        {
          *(_QWORD *)(v0 + 48) = 0;
          *(_QWORD *)(v0 + 56) = 0;
          *(_QWORD *)(v0 + 64) = v34;
          *(_QWORD *)(v0 + 72) = v36;
        }
        v44 = *(_QWORD *)(v0 + 128);
        v45 = *(_QWORD **)(v0 + 80);
        v46 = swift_task_create();
        *(_QWORD *)(v0 + 176) = v46;
        v45[23] = v46;
        swift_retain();
        swift_release();
        (*(void (**)(uint64_t, _QWORD))(*v45 + 280))(v44, 0);
        v47 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 184) = v47;
        *v47 = v0;
        v47[1] = sub_24A1669AC;
        return (_QWORD *)sub_24A215FE4();
      }
    }
    else
    {
      sub_24A215F6C();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v33, v28);
      if (v32[2])
        goto LABEL_18;
    }
    v34 = 0;
    v36 = 0;
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(v0 + 128);
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v0 + 144))(result);
  if (result[3] < v20)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v21 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 80);
  v2 = sub_24A16B218(0, *(_QWORD *)(v0 + 128), result);
  v23 = swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 248))(v23);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 192))(v0 + 16);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v25 = (uint64_t (*)(uint64_t, _QWORD))result;
    v26 = v24;
    result = *(_QWORD **)v24;
    if (*(_QWORD *)(*(_QWORD *)v24 + 24) >= *(_QWORD *)(v0 + 136))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_24A16B0EC();
      sub_24A16B180((uint64_t *)(*(_QWORD *)v26 + 16), *(_QWORD *)v26 + 40, *(_QWORD *)(v0 + 136));
      v37 = *(_QWORD **)(v0 + 120);
      v38 = *(_QWORD *)(v0 + 80);
      v39 = *(_QWORD *)(v0 + 136);
      v40 = v25(v0 + 16, 0);
      v41 = (double)v39 / (double)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v37) + 0xA0))(v40);
      v42 = (*(uint64_t (**)(void))(*(_QWORD *)v38 + 200))();
      v3 = sub_24A16B63C(v42, v41);
      (*(void (**)(void))(*(_QWORD *)v38 + 208))();
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 304))(1);
      goto LABEL_3;
    }
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A167418(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  sub_24A135F88(&qword_25790A7C0);
  v2[4] = swift_task_alloc();
  v3 = sub_24A215A8C();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A16749C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = (_QWORD *)v0[3];
  v2 = v1[23];
  v0[8] = v2;
  if (v2)
  {
    v4 = v0[6];
    v3 = v0[7];
    v5 = v0[5];
    swift_retain();
    v6 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    v7 = sub_24A215A74();
    v8 = sub_24A216104();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_24A12D000, v7, v8, "Multiple readers waiting for ingestion buffer", v9, 2u);
      MEMORY[0x24BD0AAAC](v9, -1, -1);
    }
    v11 = v0[6];
    v10 = v0[7];
    v12 = v0[5];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    v13 = (_QWORD *)swift_task_alloc();
    v0[9] = v13;
    *v13 = v0;
    v13[1] = sub_24A1676B4;
  }
  else
  {
    v14 = v0[4];
    v15 = v0[2];
    v16 = sub_24A215F78();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
    v18 = sub_24A164A60(&qword_25790AF18, v17, (uint64_t (*)(uint64_t))type metadata accessor for IngestionAudioBufferActor, (uint64_t)&unk_24A21A14C);
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v1;
    v19[3] = v18;
    v19[4] = v1;
    swift_retain_n();
    v20 = sub_24A167948(v14, (uint64_t)&unk_25790B480, (uint64_t)v19);
    v0[10] = v20;
    v1[23] = v20;
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, _QWORD))(*v1 + 280))(v15, 0);
    v21 = (_QWORD *)swift_task_alloc();
    v0[11] = v21;
    *v21 = v0;
    v21[1] = sub_24A167750;
  }
  return sub_24A215FE4();
}

uint64_t sub_24A1676B4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A16770C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A167750()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1677A8()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1677EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_24A167804()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  if ((sub_24A215FF0() & 1) != 0)
  {
    v1 = *(_QWORD **)(v0 + 16);
    v1[23] = 0;
    swift_release();
    (*(void (**)(_QWORD, uint64_t))(*v1 + 280))(0, 1);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 24) = v3;
    *v3 = v0;
    v3[1] = sub_24A167890;
    return sub_24A215FFC();
  }
}

uint64_t sub_24A167890()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t sub_24A1678FC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  v1[23] = 0;
  swift_release();
  (*(void (**)(_QWORD, uint64_t))(*v1 + 280))(0, 1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A167948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_24A215F78();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_24A215F6C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_24A159A10(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_24A215F54();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_24A167A8C()
{
  uint64_t v0;

  swift_release();

  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_24A167AC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_uuid;
  swift_beginAccess();
  v4 = sub_24A2157A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_24A167B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_uuid;
  swift_beginAccess();
  v4 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_24A167B90())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A167BD4()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A167C1C(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions16VARequestContext_results, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t (*sub_24A167C30())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A167C74()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A167CBC(uint64_t a1)
{
  return sub_24A167CD0(a1, &OBJC_IVAR____TtC12VoiceActions16VARequestContext_predictionWindow, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

uint64_t sub_24A167CD0(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  v7 = *v6;
  *v6 = a1;
  return a3(v7);
}

uint64_t (*sub_24A167D28())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A167D6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_runtimeParameters;
  swift_beginAccess();
  v4 = *(_DWORD *)(v3 + 8);
  v5 = *(_BYTE *)(v3 + 12);
  v6 = *(_BYTE *)(v3 + 13);
  v7 = *(_BYTE *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_BYTE *)(v3 + 48);
  v10 = *(_BYTE *)(v3 + 49);
  v11 = *(_DWORD *)(v3 + 52);
  v12 = *(_BYTE *)(v3 + 56);
  v14 = *(_QWORD *)(v3 + 64);
  v13 = *(_QWORD *)(v3 + 72);
  v15 = *(_WORD *)(v3 + 80);
  v16 = *(_BYTE *)(v3 + 82);
  v17 = *(_BYTE *)(v3 + 83);
  v18 = *(_BYTE *)(v3 + 84);
  v19 = *(_BYTE *)(v3 + 85);
  v20 = *(_BYTE *)(v3 + 86);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v5;
  *(_BYTE *)(a1 + 13) = v6;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v3 + 16);
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 49) = v10;
  *(_DWORD *)(a1 + 52) = v11;
  *(_BYTE *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v13;
  *(_WORD *)(a1 + 80) = v15;
  *(_BYTE *)(a1 + 82) = v16;
  *(_BYTE *)(a1 + 83) = v17;
  *(_BYTE *)(a1 + 84) = v18;
  *(_BYTE *)(a1 + 85) = v19;
  *(_BYTE *)(a1 + 86) = v20;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A167E54(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  char v12;
  char v14;
  char v15;
  char v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v23 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_BYTE *)a1 + 12);
  v4 = *((_BYTE *)a1 + 13);
  v5 = a1[2];
  v6 = a1[3];
  v7 = *((_BYTE *)a1 + 32);
  v8 = a1[5];
  v9 = *((_BYTE *)a1 + 48);
  v10 = *((_DWORD *)a1 + 13);
  v21 = *((_BYTE *)a1 + 56);
  v22 = *((_BYTE *)a1 + 49);
  v19 = a1[9];
  v20 = a1[8];
  v17 = *((_BYTE *)a1 + 82);
  v18 = *((_WORD *)a1 + 40);
  v15 = *((_BYTE *)a1 + 84);
  v16 = *((_BYTE *)a1 + 83);
  v14 = *((_BYTE *)a1 + 85);
  v11 = v1 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_runtimeParameters;
  v12 = *((_BYTE *)a1 + 86);
  swift_beginAccess();
  *(_QWORD *)v11 = v23;
  *(_DWORD *)(v11 + 8) = v2;
  *(_BYTE *)(v11 + 12) = v3;
  *(_BYTE *)(v11 + 13) = v4;
  *(_QWORD *)(v11 + 16) = v5;
  *(_QWORD *)(v11 + 24) = v6;
  *(_BYTE *)(v11 + 32) = v7;
  *(_QWORD *)(v11 + 40) = v8;
  *(_BYTE *)(v11 + 48) = v9;
  *(_BYTE *)(v11 + 49) = v22;
  *(_DWORD *)(v11 + 52) = v10;
  *(_BYTE *)(v11 + 56) = v21;
  *(_QWORD *)(v11 + 64) = v20;
  *(_QWORD *)(v11 + 72) = v19;
  *(_WORD *)(v11 + 80) = v18;
  *(_BYTE *)(v11 + 82) = v17;
  *(_BYTE *)(v11 + 83) = v16;
  *(_BYTE *)(v11 + 84) = v15;
  *(_BYTE *)(v11 + 85) = v14;
  *(_BYTE *)(v11 + 86) = v12;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A167FA4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A167FE8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = sub_24A16B860(a1, a2);

  return v4;
}

uint64_t sub_24A16803C(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t (*v19)(uint64_t *);
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_BYTE *)a1 + 12);
  v4 = *((_BYTE *)a1 + 13);
  v5 = *((_BYTE *)a1 + 32);
  v6 = a1[5];
  v7 = *((_BYTE *)a1 + 48);
  v8 = *((_BYTE *)a1 + 49);
  v9 = *((_DWORD *)a1 + 13);
  v10 = *((_BYTE *)a1 + 56);
  v12 = a1[8];
  v11 = a1[9];
  v13 = *((_WORD *)a1 + 40);
  v14 = *((_BYTE *)a1 + 82);
  v15 = *((_BYTE *)a1 + 83);
  v16 = *((_BYTE *)a1 + 84);
  v17 = *((_BYTE *)a1 + 85);
  v18 = *((_BYTE *)a1 + 86);
  v21 = *a1;
  v22 = v2;
  v23 = v3;
  v24 = v4;
  v25 = *((_OWORD *)a1 + 1);
  v26 = v5;
  v27 = v6;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v10;
  v32 = v12;
  v33 = v11;
  v34 = v13;
  v35 = v14;
  v36 = v15;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v19 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v19(&v21);
}

uint64_t sub_24A168114(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A16813C + 4 * byte_24A21A0A0[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_24A16813C()
{
  return 0xD000000000000011;
}

uint64_t sub_24A168210(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A168238 + 4 * byte_24A21A0A9[a1]))(25705, 0xE200000000000000);
}

unint64_t sub_24A168238()
{
  return 0xD000000000000011;
}

void sub_24A16830C(char *a1)
{
  sub_24A168318(*a1);
}

void sub_24A168318(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24A168350(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24A168444 + 4 * byte_24A21A0BB[a2]))(0xD000000000000011);
}

uint64_t sub_24A168444(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x800000024A2223D0)
    v2 = 1;
  else
    v2 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24A16858C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_24A216638();
  sub_24A1685D8((uint64_t)v3, v1);
  return sub_24A21665C();
}

void sub_24A1685D0(uint64_t a1)
{
  char *v1;

  sub_24A1685D8(a1, *v1);
}

void sub_24A1685D8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24A16860C()
{
  sub_24A215D50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1686F4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_24A216638();
  sub_24A1685D8((uint64_t)v3, v1);
  return sub_24A21665C();
}

uint64_t sub_24A168734@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24A16BB0C();
  *a1 = result;
  return result;
}

uint64_t sub_24A168760@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_24A168114(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24A168788()
{
  unsigned __int8 *v0;

  return sub_24A168210(*v0);
}

uint64_t sub_24A168790@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24A16BB0C();
  *a1 = result;
  return result;
}

void sub_24A1687B4(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_24A1687C0()
{
  sub_24A16BB54();
  return sub_24A2166A4();
}

uint64_t sub_24A1687E8()
{
  sub_24A16BB54();
  return sub_24A2166B0();
}

uint64_t sub_24A168810()
{
  sub_24A216638();
  sub_24A215D50();
  return sub_24A21665C();
}

uint64_t sub_24A168864()
{
  return sub_24A215D50();
}

uint64_t sub_24A168880()
{
  sub_24A216638();
  sub_24A215D50();
  return sub_24A21665C();
}

uint64_t sub_24A1688D0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_24A216464();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_24A168920(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000024A222400;
}

unint64_t sub_24A168940()
{
  return 0xD000000000000016;
}

uint64_t sub_24A16895C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_24A216464();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_24A1689B0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_24A1689BC()
{
  sub_24A16C218();
  return sub_24A2166A4();
}

uint64_t sub_24A1689E4()
{
  sub_24A16C218();
  return sub_24A2166B0();
}

uint64_t sub_24A168A0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v25)(void);
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  __int16 v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  double v79;
  uint64_t v80;
  __int128 v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;

  v2 = v1;
  v56 = sub_24A135F88(&qword_25790AF38);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v57 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_24A2157A4();
  v59 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_24A135F88(&qword_25790AF40);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A16BB54();
  v12 = sub_24A21668C();
  v13 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 136);
  v58 = v2;
  v13(v12);
  LOBYTE(v79) = 0;
  sub_24A164A60(&qword_25790AF50, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  v14 = v60;
  sub_24A216560();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v60 = v9;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v7, v5);
  v15 = OBJC_IVAR____TtC12VoiceActions16VARequestContext_configuration;
  v16 = *(_QWORD **)(v58 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_configuration);
  v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v18 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v16) + 0x80);
  v19 = v16;
  v20 = (_QWORD *)v18();

  (*(void (**)(void))((*v17 & *v20) + 0x1A8))();
  v79 = nullsub_1(v21);
  LOBYTE(v61) = 6;
  sub_24A16BB98();
  sub_24A216560();
  v22 = v11;
  v23 = v58;
  v24 = *(_QWORD **)(v58 + v15);
  v25 = *(uint64_t (**)(void))((*v17 & *v24) + 0x80);
  v26 = v24;
  v27 = (_QWORD *)v25();

  (*(void (**)(void))((*v17 & *v27) + 0x1B0))();
  v79 = nullsub_1(v28);
  LOBYTE(v61) = 7;
  sub_24A216560();
  LOBYTE(v79) = 5;
  sub_24A16BBDC();
  v54 = v8;
  v53 = v22;
  v30 = sub_24A21650C();
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)v23 + 280))(&v79, v30);
  v61 = v79;
  v62 = v80;
  v63 = WORD2(v80);
  v64 = v81;
  v65 = v82;
  v66 = v83;
  v67 = v84;
  v68 = v85;
  v69 = v86;
  v70 = v87;
  v71 = v88;
  v72 = v89;
  v73 = v90;
  v74 = v91;
  v75 = v92;
  v76 = v93;
  v77 = v94;
  v78 = v95;
  v31 = VARuntimeParameters.keywordsToThresholds.getter();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v32 = 0;
  v33 = v31 + 64;
  v34 = 1 << *(_BYTE *)(v31 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & *(_QWORD *)(v31 + 64);
  v59 = (unint64_t)(v34 + 63) >> 6;
  v37 = v56;
  if (!v36)
    goto LABEL_7;
LABEL_6:
  for (v36 &= v36 - 1; ; v36 = (v39 - 1) & v39)
  {
    v42 = swift_bridgeObjectRetain();
    v43 = nullsub_1(v42);
    LODWORD(v61) = LODWORD(v43);
    sub_24A18016C();
    v79 = v44;
    v80 = v45;
    *(_QWORD *)&v81 = v46;
    BYTE8(v81) = v47 & 1;
    sub_24A16BC20();
    sub_24A216560();
    result = swift_bridgeObjectRelease();
    if (v36)
      goto LABEL_6;
LABEL_7:
    if (__OFADD__(v32++, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v32 >= v59)
    {
      v40 = v54;
LABEL_25:
      v48 = v55;
      v49 = v53;
      v50 = v60;
      v51 = swift_release();
      v79 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 232))(v51));
      LOBYTE(v61) = 4;
      sub_24A135F88(&qword_25790AF70);
      sub_24A16BC64();
      sub_24A216560();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v57, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v49, v40);
    }
    v39 = *(_QWORD *)(v33 + 8 * v32);
    v40 = v54;
    if (!v39)
      break;
LABEL_17:
    ;
  }
  v41 = v32 + 1;
  if (v32 + 1 >= v59)
    goto LABEL_25;
  v39 = *(_QWORD *)(v33 + 8 * v41);
  if (v39)
    goto LABEL_16;
  v41 = v32 + 2;
  if (v32 + 2 >= v59)
    goto LABEL_25;
  v39 = *(_QWORD *)(v33 + 8 * v41);
  if (v39)
    goto LABEL_16;
  v41 = v32 + 3;
  if (v32 + 3 >= v59)
    goto LABEL_25;
  v39 = *(_QWORD *)(v33 + 8 * v41);
  if (v39)
  {
LABEL_16:
    v32 = v41;
    goto LABEL_17;
  }
  while (1)
  {
    v32 = v41 + 1;
    if (__OFADD__(v41, 1))
      break;
    if (v32 >= v59)
      goto LABEL_25;
    v39 = *(_QWORD *)(v33 + 8 * v32);
    ++v41;
    if (v39)
      goto LABEL_17;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_24A169138()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_24A169150()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC12VoiceActions16VARequestContext_stopProcessingActor);
  v0[3] = v1;
  v4 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 120) + *(_QWORD *)(*(_QWORD *)v1 + 120));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_24A1691D0;
  return v4(1);
}

uint64_t sub_24A1691D0()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A16922C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC12VoiceActions16VARequestContext_ingestionBufferActor);
  v0[5] = v1;
  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v1 + 384) + *(_QWORD *)(*(_QWORD *)v1 + 384));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_24A1692A8;
  return v4();
}

uint64_t sub_24A1692A8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A1692F8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_24A169310()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0[2] + OBJC_IVAR____TtC12VoiceActions16VARequestContext_stopProcessingActor);
  v0[3] = v1;
  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v1 + 128) + *(_QWORD *)(*(_QWORD *)v1 + 128));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_24A16938C;
  return v4();
}

uint64_t sub_24A16938C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_24A1693E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A169400()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(v0[4] + OBJC_IVAR____TtC12VoiceActions16VARequestContext_ingestionBufferActor);
  v0[5] = v1;
  v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(*(_QWORD *)v1 + 376) + *(_QWORD *)(*(_QWORD *)v1 + 376));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_24A169484;
  return v4(v0[2], v0[3]);
}

uint64_t sub_24A169484()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A1694F8()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A16952C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  return swift_task_switch();
}

uint64_t sub_24A169544()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12VoiceActions16VARequestContext_ingestionBufferActor);
  v0[6] = v1;
  v4 = (uint64_t (*)(_QWORD))(**(int **)(*(_QWORD *)v1 + 392) + *(_QWORD *)(*(_QWORD *)v1 + 392));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_24A1695C4;
  return v4(0);
}

uint64_t sub_24A1695C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[8] = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_24A169630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t *__return_ptr, uint64_t);
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(void);
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  __int128 v45;
  char v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
    v2 = *(_QWORD *)(v0 + 64);
  else
    v2 = MEMORY[0x24BEE4AF8];
  v3 = *(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(v0 + 40) + 280);
  v4 = swift_bridgeObjectRetain();
  v3(&v22, v4);
  v41 = v22;
  v42 = v23;
  v43 = v24;
  v44 = v25;
  v45 = v26;
  v46 = v27;
  v47 = v28;
  v48 = v29;
  v49 = v30;
  v50 = v31;
  v51 = v32;
  v52 = v33;
  v53 = v34;
  v54 = v35;
  v55 = v36;
  v56 = v37;
  v57 = v38;
  v58 = v39;
  v59 = v40;
  v5 = sub_24A1FA788();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) == 0)
    goto LABEL_7;
  v6 = *(_QWORD *)(v0 + 40);
  v7 = OBJC_IVAR____TtC12VoiceActions16VARequestContext_configuration;
  v8 = *(_QWORD **)(v6 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_configuration);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v8) + 0x80);
  v11 = v8;
  v12 = (_QWORD *)v10();

  v13 = (*(uint64_t (**)(void))((*v9 & *v12) + 0x100))();
  if (v13 > 0)
  {
    v14 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 40) + 256))();
    v15 = *(_QWORD **)(v6 + v7);
    v16 = *(uint64_t (**)(void))((*v9 & *v15) + 0x80);
    v17 = v15;
    v18 = (_QWORD *)v16();

    v19 = (*(uint64_t (**)(void))((*v9 & *v18) + 0xD0))();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 152))(v2, v19);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  if (v1)
    v20 = *(_QWORD *)(v0 + 32);
  else
    v20 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v20);
}

uint64_t sub_24A169854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v1 = v0;
  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v0 + 280))(&v35, v4);
  v16 = v35;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  v20 = v39;
  v21 = v40;
  v22 = v41;
  v23 = v42;
  v24 = v43;
  v25 = v44;
  v26 = v45;
  v27 = v46;
  v28 = v47;
  v29 = v48;
  v30 = v49;
  v31 = v50;
  v32 = v51;
  v33 = v52;
  v34 = v53;
  v7 = sub_24A1FA788();
  swift_bridgeObjectRelease();
  v8 = swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    v9 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    v10 = sub_24A215A74();
    v11 = sub_24A216104();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_24A12D000, v10, v11, "Attempted to look at prediction window. This is not maintained unless returnKeywordAudio is true.", v12, 2u);
      MEMORY[0x24BD0AAAC](v12, -1, -1);
    }

    v8 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 256))(v8);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 168))(v13);
  swift_release();
  return v14;
}

uint64_t sub_24A169A50(uint64_t a1)
{
  uint64_t (*v1)(uint64_t *, _QWORD);
  uint64_t v2;
  uint64_t (*v3)(uint64_t *, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void (*v13)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  float v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *);
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;
  int v38;
  __int16 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;
  char v60;
  char v61;
  int v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  uint64_t v72;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790AFA8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v36[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 144))(&v55, v6);
  v10 = v56;
  if (!v56)
  {
    sub_24A14C404();
    swift_allocError();
    *v30 = 0xD000000000000029;
    v31 = 0x800000024A222530;
LABEL_15:
    v30[1] = v31;
    return swift_willThrow();
  }
  v72 = v2;
  v11 = v55;
  v12 = *(float *)&v57;
  v13 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(*(_QWORD *)v1 + 280);
  v13(&v55, v9);
  v37 = v55;
  v38 = v56;
  v39 = WORD2(v56);
  v40 = v57;
  v41 = v58;
  v42 = v59;
  v43 = v60;
  v44 = v61;
  v45 = v62;
  v46 = v63;
  v47 = v64;
  v48 = v65;
  v49 = v66;
  v50 = v67;
  v51 = v68;
  v52 = v69;
  v53 = v70;
  v54 = v71;
  v14 = VARuntimeParameters.keywordsToThresholds.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  sub_24A148970(v11, v10);
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_14:
    v55 = 0;
    v56 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "missing key ");
    BYTE5(v36[1]) = 0;
    HIWORD(v36[1]) = -5120;
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v32 = sub_24A215D98();
    v13(&v55, (_QWORD *)v32);
    v37 = v55;
    v38 = v56;
    v39 = WORD2(v56);
    v40 = v57;
    v41 = v58;
    v42 = v59;
    v43 = v60;
    v44 = v61;
    v45 = v62;
    v46 = v63;
    v47 = v64;
    v48 = v65;
    v49 = v66;
    v50 = v67;
    v51 = v68;
    v52 = v69;
    v53 = v70;
    v54 = v71;
    v33 = VARuntimeParameters.keywordsToThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = v33;
    sub_24A135F88(&qword_25790AFB0);
    sub_24A16BCE4(&qword_25790AFB8, &qword_25790AFB0, MEMORY[0x24BEE0310]);
    sub_24A14C688();
    sub_24A215E58();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v34 = v36[0];
    v31 = v36[1];
    sub_24A14C404();
    swift_allocError();
    *v30 = v34;
    goto LABEL_15;
  }
  v13(&v55, (_QWORD *)v17);
  v37 = v55;
  v38 = v56;
  v39 = WORD2(v56);
  v40 = v57;
  v41 = v58;
  v42 = v59;
  v43 = v60;
  v44 = v61;
  v45 = v62;
  v46 = v63;
  v47 = v64;
  v48 = v65;
  v49 = v66;
  v50 = v67;
  v51 = v68;
  v52 = v69;
  v53 = v70;
  v54 = v71;
  v18 = VARuntimeParameters.keywordsToThresholds.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v18 + 16))
  {
LABEL_21:
    result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v19 = sub_24A148970(v11, v10);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v21 = *(float *)(*(_QWORD *)(v18 + 56) + 4 * v19);
  swift_bridgeObjectRelease_n();
  result = swift_bridgeObjectRelease();
  if (v21 < v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 136))(result);
    v23 = sub_24A2157A4();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 0, 1, v23);
    v24 = (*(uint64_t (**)(char *))(*(_QWORD *)a1 + 248))(v8);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 232))(v24);
    if (v25 >> 62)
      v26 = sub_24A216410();
    else
      v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    if (__OFADD__(v26, 1))
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 344))(v26 + 1);
      v27 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v3 + 248);
      swift_retain();
      v3 = (uint64_t (*)(uint64_t *, _QWORD))v27(&v55);
      v29 = v28;
      MEMORY[0x24BD09750]();
      if (*(_QWORD *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_11:
        sub_24A215F0C();
        sub_24A215EB8();
        return v3(&v55, 0);
      }
    }
    sub_24A215ED0();
    goto LABEL_11;
  }
  return result;
}

char *sub_24A16A098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v0;
  v3 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A2155F4();
  MEMORY[0x24BDAC7A8](v6);
  sub_24A215624();
  swift_allocObject();
  sub_24A215618();
  sub_24A135F88(&qword_25790AE80);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_24A218660;
  sub_24A2155E8();
  sub_24A2155DC();
  v17 = v7;
  sub_24A164A60(&qword_25790AE88, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB2A8], MEMORY[0x24BDCB2C8]);
  sub_24A135F88(&qword_25790AE90);
  sub_24A16BCE4((unint64_t *)&qword_25790AE98, &qword_25790AE90, MEMORY[0x24BEE12C8]);
  sub_24A2162D8();
  sub_24A215600();
  v17 = v2;
  type metadata accessor for VARequestContext();
  sub_24A164A60(&qword_25790AFC0, 255, (uint64_t (*)(uint64_t))type metadata accessor for VARequestContext, (uint64_t)&unk_24A21A3F4);
  v8 = sub_24A21560C();
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    sub_24A215CF0();
    v12 = sub_24A215CCC();
    if (v13)
    {
      v5 = (char *)v12;
      sub_24A135F1C(v10, v11);
      swift_release();
      return v5;
    }
    sub_24A14C404();
    swift_allocError();
    *v15 = 0xD00000000000001CLL;
    v15[1] = 0x800000024A222560;
    swift_willThrow();
    sub_24A135F1C(v10, v11);
  }
  swift_release();
  return v5;
}

uint64_t sub_24A16A330(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 280))(&v23);
  v4 = v23;
  v5 = v24;
  v6 = v25;
  v7 = v26;
  v8 = v27;
  v9 = v28;
  v10 = v29;
  v11 = v30;
  v12 = v31;
  v13 = v32;
  v14 = v33;
  v15 = v34;
  v16 = v35;
  v17 = v36;
  v18 = v37;
  v19 = v38;
  v20 = v39;
  v21 = v40;
  v22 = v41;
  (*(void (**)(uint64_t *))(*(_QWORD *)a1 + 152))(&v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A16A438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = sub_24A215A74();
  v8 = sub_24A2160F8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_24A12D000, v7, v8, "deinit VARequestContext", v9, 2u);
    MEMORY[0x24BD0AAAC](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = v1 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_uuid;
  v11 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A16A5D8()
{
  sub_24A16A438();
  return swift_deallocClassInstance();
}

double sub_24A16A5FC()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info v3[2];

  v3[1] = *(mach_timebase_info *)MEMORY[0x24BDAC8D0];
  v3[0] = 0;
  mach_timebase_info(v3);
  LODWORD(v0) = v3[0].denom;
  LODWORD(v1) = v3[0].numer;
  result = (double)v0 / (double)v1;
  qword_25791D748 = *(_QWORD *)&result;
  return result;
}

uint64_t sub_24A16A664()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 320))();
}

uint64_t sub_24A16A68C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24A16A6F0;
  return v6(a1);
}

uint64_t sub_24A16A6F0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A16A73C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  __int128 v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v2 = *v1;
  v3 = (uint64_t *)(*v1 + 16);
  v4 = *v3;
  if (*v3 >= a1)
  {
    sub_24A135F88(&qword_25790B470);
    v8 = swift_allocObject();
    v11 = *(_OWORD *)(v2 + 24);
    *(_QWORD *)(v8 + 16) = v4;
    *(_OWORD *)(v8 + 24) = v11;
    if ((uint64_t)v11 >= 1)
      sub_24A16AF20(v8 + 16, (char *)(v8 + 40), v3, (char *)(v2 + 40));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v1;
    sub_24A2157D4();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v7 = *(_QWORD *)(v6 + 24);
      sub_24A135F88(&qword_25790B470);
      v8 = swift_allocObject();
      v9 = j__malloc_size((const void *)v8);
      v10 = v9 - 40;
      if (v9 < 40)
        v10 = v9 - 37;
      *(_QWORD *)(v8 + 16) = v10 >> 2;
      *(_QWORD *)(v8 + 24) = v7;
      *(_QWORD *)(v8 + 32) = 0;
      if (v7 >= 1)
      {
        swift_retain();
        sub_24A16ACA0(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
        *(_QWORD *)(v6 + 24) = 0;
        swift_release();
      }
    }
    else
    {
      sub_24A135F88(&qword_25790B470);
      v8 = swift_allocObject();
      v12 = j__malloc_size((const void *)v8);
      v13 = v12 - 40;
      if (v12 < 40)
        v13 = v12 - 37;
      v14 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v8 + 16) = v13 >> 2;
      *(_QWORD *)(v8 + 24) = v14;
      *(_QWORD *)(v8 + 32) = 0;
      if (v14 >= 1)
        sub_24A16ADBC(v8 + 16, (char *)(v8 + 40), (_QWORD *)(v6 + 16), (char *)(v6 + 40));
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t *sub_24A16A908(uint64_t *result, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  if (a4 < 1)
    return result;
  v7 = result;
  result = (uint64_t *)result[1];
  v8 = (uint64_t)result + a4;
  if (__OFADD__(result, a4))
  {
    __break(1u);
    goto LABEL_9;
  }
  v7[1] = v8;
  if (v8 < (uint64_t)result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  sub_24A16B074((uint64_t)result, v8, v7, a2, (uint64_t)&v11);
  v15 = v11;
  sub_24A16C3B0((uint64_t)&v15, (uint64_t)v16, &qword_25790B498);
  sub_24A16C3B0((uint64_t)v16, (uint64_t)&v22, &qword_25790B498);
  v9 = v12;
  v10 = v13;
  if (v14 & 1 | (v13 == 0))
  {
    v9 = 0;
    v10 = 0;
  }
  v17 = v22;
  v18 = *((_QWORD *)&v15 + 1);
  v19 = v9;
  v20 = v10;
  v21 = v14 & 1 | (v13 == 0);
  return (uint64_t *)sub_24A16AA30(a3, a4);
}

unint64_t sub_24A16A9EC()
{
  unint64_t result;

  result = qword_25790AEE8;
  if (!qword_25790AEE8)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VABufferLimitExceededError, &type metadata for VABufferLimitExceededError);
    atomic_store(result, (unint64_t *)&qword_25790AEE8);
  }
  return result;
}

void *sub_24A16AA30(char *a1, uint64_t a2)
{
  __int128 *v2;
  void *result;
  size_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13[8];
  _BYTE v14[24];
  __int128 v15;
  char v16;
  __int128 v17;
  char *v18;
  char v19[8];
  unint64_t v20;

  sub_24A16C3B0((uint64_t)(v2 + 1), (uint64_t)v14, &qword_25790B488);
  result = (void *)sub_24A16C3B0((uint64_t)v14, (uint64_t)&v15, &qword_25790B488);
  if ((v16 & 1) == 0)
  {
    v17 = v15;
    v12 = *v2;
    v8 = *((_QWORD *)&v12 + 1);
    if ((*((_QWORD *)&v12 + 1) & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      if (a1)
      {
        if (*((_QWORD *)&v12 + 1))
        {
          sub_24A16C3B0((uint64_t)&v12, (uint64_t)v13, &qword_25790B490);
          sub_24A16C3B0((uint64_t)v13, (uint64_t)&v18, &qword_25790B490);
          result = v18;
          if (v18)
          {
            v9 = 4 * v8;
            if (&v18[4 * v8] > a1 && &a1[v9] > v18)
              goto LABEL_33;
            result = memcpy(v18, a1, v9);
          }
        }
      }
      v10 = a2;
      if (!__OFADD__(v8, a2 - v8))
      {
        if (a2 >= v8)
        {
          if (a1)
          {
            v11 = a2 - v8;
            if (v10 != v8)
            {
              if (*((uint64_t *)&v17 + 1) >= v11)
              {
                sub_24A16C3B0((uint64_t)&v17, (uint64_t)v19, &qword_25790B490);
                sub_24A16C3B0((uint64_t)v19, (uint64_t)&v20, &qword_25790B490);
                result = (void *)v20;
                if (!v20)
                  return result;
                v7 = &a1[4 * v8];
                if ((unint64_t)v7 >= v20 + 4 * v11 || (unint64_t)&a1[4 * v10] <= v20)
                {
                  v6 = 4 * v11;
                  return memcpy(result, v7, v6);
                }
LABEL_33:
                result = (void *)sub_24A21644C();
                __break(1u);
                return result;
              }
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
          }
          return result;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
  if (a1 && a2)
  {
    v17 = *v2;
    if (*((uint64_t *)&v17 + 1) >= a2)
    {
      sub_24A16C3B0((uint64_t)&v17, (uint64_t)&v20, &qword_25790B490);
      sub_24A16C3B0((uint64_t)&v20, (uint64_t)&v12, &qword_25790B490);
      result = (void *)v12;
      if (!(_QWORD)v12)
        return result;
      if ((a2 & 0x8000000000000000) == 0)
      {
        v6 = 4 * a2;
        if ((uint64_t)v12 + 4 * a2 <= (unint64_t)a1 || (unint64_t)&a1[v6] <= (unint64_t)v12)
        {
          v7 = a1;
          return memcpy(result, v7, v6);
        }
      }
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  return result;
}

void sub_24A16ACA0(int a1, char *__dst, _QWORD *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_28;
  }
  v7 = a3[1];
  if (v5 < v7)
  {
    v8 = v7 - v5;
    if (!__OFSUB__(v7, v5))
    {
      v9 = *a3 - v4;
      v10 = a4;
      goto LABEL_6;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v10 = 0;
  v8 = 0;
  v9 = a3[1];
LABEL_6:
  v11 = v5 < v7;
  v12 = v8 != 0;
  v13 = v11 && v12;
  if (v11 && v12)
    v14 = v10;
  else
    v14 = 0;
  if (v11 && v12)
    v15 = v8;
  else
    v15 = 0;
  if (v9 < 1)
  {
    v9 = 0;
    goto LABEL_18;
  }
  if (!a4)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v16 = &a4[4 * v4];
  if (v16 != __dst || &v16[4 * v9] <= __dst)
    memmove(__dst, v16, 4 * v9);
LABEL_18:
  if (!v13 || v15 <= 0)
    return;
  if (!v14)
  {
LABEL_30:
    __break(1u);
    return;
  }
  v17 = &__dst[4 * v9];
  if (v17 != v14 || v17 >= &v14[4 * v15])
    memmove(v17, v14, 4 * v15);
}

void sub_24A16ADBC(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v14;
  size_t v15;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_5;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_13;
  }
LABEL_7:
  if (!__src)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    sub_24A21644C();
    __break(1u);
    return;
  }
  v11 = &__src[4 * v4];
  if (v11 < &__dst[4 * v9] && &v11[4 * v9] > __dst)
    goto LABEL_27;
  memcpy(__dst, v11, 4 * v9);
LABEL_13:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v14 = &__dst[4 * v9];
      v15 = 4 * v8;
      if (&v14[4 * v8] <= v10 || v14 >= &v10[v15])
      {
        memcpy(v14, v10, v15);
        return;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
}

void sub_24A16AF20(int a1, char *__dst, _QWORD *a3, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v18;

  v4 = a3[2];
  v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_25;
  }
  v7 = a3[1];
  if (v5 >= v7)
  {
    v10 = 0;
    v8 = 0;
    v9 = a3[1];
    if (v7 < 1)
      goto LABEL_14;
    goto LABEL_7;
  }
  v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *a3 - v4;
  v10 = __src;
  if (v5 < 1)
    goto LABEL_14;
LABEL_7:
  if (!__src)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    sub_24A21644C();
    __break(1u);
    return;
  }
  v11 = &__src[4 * v4];
  v12 = &__dst[4 * v4];
  v13 = 4 * v9;
  v14 = &v12[4 * v9];
  v15 = &v11[4 * v9];
  if (v11 < v14 && v12 < v15)
    goto LABEL_28;
  memcpy(v12, v11, v13);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      v18 = 4 * v8;
      if (&__dst[4 * v8] <= v10 || &v10[v18] <= __dst)
      {
        memcpy(__dst, v10, v18);
        return;
      }
      goto LABEL_28;
    }
    goto LABEL_27;
  }
}

uint64_t sub_24A16B074@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;

  v5 = a3[2];
  v6 = v5 + result;
  v7 = *a3;
  if (v5 + result >= *a3)
    v8 = *a3;
  else
    v8 = 0;
  v9 = v5 + a2;
  if (v5 + a2 >= v7)
    v10 = *a3;
  else
    v10 = 0;
  v11 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    v12 = v6 - v8;
    v13 = v9 - v10;
    if (v11)
      v14 = v12 < v13;
    else
      v14 = 1;
    v15 = v14;
    if (v15 == 1)
    {
      v16 = 0;
      v13 = 0;
LABEL_18:
      *(_QWORD *)a5 = a4 + 4 * v12;
      *(_QWORD *)(a5 + 8) = v11;
      *(_QWORD *)(a5 + 16) = v16;
      *(_QWORD *)(a5 + 24) = v13;
      *(_BYTE *)(a5 + 32) = v15;
      return result;
    }
    v11 = v7 - v12;
    if (!__OFSUB__(v7, v12))
    {
      v16 = a4;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A16B0EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;

  v1 = *v0;
  v2 = (uint64_t *)(*v0 + 16);
  v3 = *v2;
  sub_24A135F88(&qword_25790B470);
  v4 = swift_allocObject();
  v5 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  if ((uint64_t)v5 >= 1)
    sub_24A16AF20(v4 + 16, (char *)(v4 + 40), v2, (char *)(v1 + 40));
  result = swift_release();
  *v0 = v4;
  return result;
}

uint64_t *sub_24A16B180(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10[40];

  if (a3 >= 1)
  {
    v4 = result;
    result = (uint64_t *)sub_24A16B074(0, a3, result, a2, (uint64_t)v10);
    v5 = v4[2];
    v7 = __OFADD__(v5, a3);
    v6 = v5 + a3;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      v7 = __OFSUB__(v6, *v4);
      if (v6 >= *v4)
      {
        v6 -= *v4;
        if (v7)
          goto LABEL_10;
      }
      v4[2] = v6;
      v8 = v4[1];
      v7 = __OFSUB__(v8, a3);
      v9 = v8 - a3;
      if (!v7)
      {
        v4[1] = v9;
        return result;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_24A16B218(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v3)
      return MEMORY[0x24BEE4AF8];
    v6 = result;
    if (v3 <= 0)
    {
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      sub_24A135F88(&qword_257909960);
      v7 = (_QWORD *)swift_allocObject();
      v8 = j__malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 29;
      v7[2] = v3;
      v7[3] = 2 * (v9 >> 2);
    }
    swift_retain();
    v10 = sub_24A16B304(&v11, (uint64_t)(v7 + 4), v3, v6, a2, a3);
    result = swift_release();
    if (v10 == v3)
      return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A16B304(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28[16];
  uint64_t v29;

  v25 = a4;
  v26 = a5;
  v27 = a6;
  result = swift_retain();
  v11 = a6[4];
  v12 = a6[3] + v11;
  if (a6[2] >= v12)
  {
    if (v12 >= v11)
    {
      if (!__OFSUB__(v12, v11))
      {
        sub_24A16B5C4((_QWORD *)((char *)a6 + 4 * v11 + 40), &v25, (_QWORD *(*)(__int128 *__return_ptr, char *, uint64_t))sub_24A16C25C, (uint64_t)v28);
        a3 = v29;
        result = swift_release();
        v13 = v25;
        v16 = v25 + a3;
        if (!__OFADD__(v25, a3))
        {
          v14 = v26;
          v15 = v27;
          goto LABEL_12;
        }
        goto LABEL_32;
      }
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = swift_release();
  v13 = v25;
  v14 = v26;
  v15 = v27;
  if (!a2)
  {
LABEL_6:
    a3 = 0;
    goto LABEL_7;
  }
  if (!a3)
  {
LABEL_7:
    v16 = v25;
LABEL_12:
    *a1 = v13;
    a1[1] = v14;
    a1[2] = (uint64_t)v15;
    a1[3] = v16;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v26 == v25)
      goto LABEL_6;
    if (v26 <= v25)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      v16 = v14;
      a3 = v14 - v13;
      goto LABEL_12;
    }
    v17 = 0;
    v19 = v27[3];
    v18 = v27[4];
    v20 = v27[2];
    if (v19 <= v25)
      v19 = v25;
    v21 = v19 - v25;
    v22 = v18 + v25;
    result = (uint64_t)v27 + 4 * v18 + 4 * v25 + 40;
    v23 = v25 - v26 + 1;
    while ((v13 & 0x8000000000000000) == 0)
    {
      if (v21 == v17)
        goto LABEL_29;
      v16 = v13 + v17 + 1;
      if (v22 + v17 >= v20)
        v24 = v20;
      else
        v24 = 0;
      *(_DWORD *)(a2 + 4 * v17) = *(_DWORD *)(result - 4 * v24 + 4 * v17);
      if (a3 - 1 == v17)
        goto LABEL_12;
      if (!(v23 + v17))
        goto LABEL_27;
      if (v16 >= v13)
      {
        ++v17;
        if (v16 < v14)
          continue;
      }
      goto LABEL_26;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_33:
  __break(1u);
  return result;
}

char *sub_24A16B4A0(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  char *result;

  v4 = __src;
  if (!a2 || !a4)
    return v4;
  if (a2 >= a4)
    v5 = a4;
  else
    v5 = a2;
  if ((v5 & 0x8000000000000000) == 0 && (&__dst[4 * v5] <= __src || &__src[4 * v5] <= __dst))
  {
    memcpy(__dst, __src, 4 * v5);
    v4 += 4 * v5;
    return v4;
  }
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

_QWORD *sub_24A16B5C4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X2>, _QWORD *(*a3)(__int128 *__return_ptr, char *, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  v8 = __OFSUB__(v7, *a2);
  v9 = v7 - *a2;
  if (v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = __OFADD__(v6, v9);
  v10 = v6 + v9;
  if (v8)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v11 = v10 - v6;
  if (v10 < v6)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = (char *)result + 4 * v6;
  if (result)
    v13 = v12;
  else
    v13 = 0;
  result = a3(&v15, v13, v11);
  if (!v4)
  {
    v14 = v16;
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 16) = v14;
  }
  return result;
}

uint64_t sub_24A16B63C(uint64_t a1, double a2)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t result;
  double v6;

  v4 = a2 * 1000000000.0;
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v4 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v4 < 1.84467441e19)
  {
    v2 = a1;
    v3 = (double)(unint64_t)v4;
    if (qword_257916130 == -1)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  swift_once();
LABEL_5:
  result = swift_beginAccess();
  v6 = *(double *)&qword_25791D748 * v3;
  if ((~COERCE__INT64(*(double *)&qword_25791D748 * v3) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v6 <= -1.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6 >= 1.84467441e19)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  result = v2 + (unint64_t)v6;
  if (__CFADD__(v2, (unint64_t)v6))
LABEL_17:
    __break(1u);
  return result;
}

uint64_t type metadata accessor for IngestionAudioBufferActor()
{
  return objc_opt_self();
}

uint64_t sub_24A16B770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A15FEEC;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_24A16B7D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24A15FEEC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25790AF28 + dword_25790AF28))(a1, v4);
}

uint64_t type metadata accessor for StopProcessingActor()
{
  return objc_opt_self();
}

uint64_t sub_24A16B860(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;

  v3 = v2;
  v6 = sub_24A2157A4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *a2;
  v10 = *((_DWORD *)a2 + 2);
  v11 = *((unsigned __int8 *)a2 + 12);
  v42 = *((unsigned __int8 *)a2 + 13);
  v43 = v11;
  v12 = a2[2];
  v40 = a2[3];
  v41 = v12;
  LODWORD(v12) = *((unsigned __int8 *)a2 + 32);
  v13 = a2[5];
  v14 = *((_BYTE *)a2 + 48);
  v15 = *((_BYTE *)a2 + 49);
  v16 = *((_DWORD *)a2 + 13);
  v38 = *((unsigned __int8 *)a2 + 56);
  v39 = v12;
  v17 = a2[8];
  v36 = a2[9];
  v37 = v17;
  LODWORD(v17) = *((unsigned __int16 *)a2 + 40);
  v34 = *((unsigned __int8 *)a2 + 82);
  v35 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a2 + 83);
  v32 = *((unsigned __int8 *)a2 + 84);
  v33 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a2 + 85);
  v30 = *((unsigned __int8 *)a2 + 86);
  v31 = v17;
  v18 = OBJC_IVAR____TtC12VoiceActions16VARequestContext_stopProcessingActor;
  type metadata accessor for StopProcessingActor();
  v19 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_BYTE *)(v19 + 112) = 0;
  *(_QWORD *)(v3 + v18) = v19;
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_uuid, v9, v6);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_results) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_configuration) = a1;
  v20 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v21 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x80);
  a1;
  v22 = v21();
  type metadata accessor for IngestionAudioBufferActor();
  v23 = swift_allocObject();
  sub_24A16596C(v22, v15, v13, v14);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_ingestionBufferActor) = v23;
  v24 = v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_runtimeParameters;
  *(_QWORD *)v24 = v44;
  *(_DWORD *)(v24 + 8) = v10;
  *(_BYTE *)(v24 + 12) = v43;
  *(_BYTE *)(v24 + 13) = v42;
  v25 = v40;
  *(_QWORD *)(v24 + 16) = v41;
  *(_QWORD *)(v24 + 24) = v25;
  *(_BYTE *)(v24 + 32) = v39;
  *(_QWORD *)(v24 + 40) = v13;
  *(_BYTE *)(v24 + 48) = v14;
  *(_BYTE *)(v24 + 49) = v15;
  *(_DWORD *)(v24 + 52) = v16;
  *(_BYTE *)(v24 + 56) = v38;
  v26 = v36;
  *(_QWORD *)(v24 + 64) = v37;
  *(_QWORD *)(v24 + 72) = v26;
  *(_WORD *)(v24 + 80) = v35;
  *(_BYTE *)(v24 + 82) = v34;
  *(_BYTE *)(v24 + 83) = v33;
  *(_BYTE *)(v24 + 84) = v32;
  *(_BYTE *)(v24 + 85) = v31;
  *(_BYTE *)(v24 + 86) = v30;
  type metadata accessor for VAFixedLengthQueue();
  v27 = (_QWORD *)v21();
  v28 = (*(uint64_t (**)(void))((*v20 & *v27) + 0x100))();

  *(_QWORD *)(v3 + OBJC_IVAR____TtC12VoiceActions16VARequestContext_predictionWindow) = sub_24A17D958(v28);
  return v3;
}

uint64_t sub_24A16BB0C()
{
  unint64_t v0;

  v0 = sub_24A216464();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

unint64_t sub_24A16BB54()
{
  unint64_t result;

  result = qword_25790AF48;
  if (!qword_25790AF48)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A214, &type metadata for VARequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AF48);
  }
  return result;
}

unint64_t sub_24A16BB98()
{
  unint64_t result;

  result = qword_25790AF58;
  if (!qword_25790AF58)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AA70, &type metadata for CustomDouble);
    atomic_store(result, (unint64_t *)&qword_25790AF58);
  }
  return result;
}

unint64_t sub_24A16BBDC()
{
  unint64_t result;

  result = qword_25790AF60;
  if (!qword_25790AF60)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AAC0, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790AF60);
  }
  return result;
}

unint64_t sub_24A16BC20()
{
  unint64_t result;

  result = qword_25790AF68;
  if (!qword_25790AF68)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AA98, &type metadata for CustomFloat);
    atomic_store(result, (unint64_t *)&qword_25790AF68);
  }
  return result;
}

unint64_t sub_24A16BC64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25790AF78;
  if (!qword_25790AF78)
  {
    v1 = sub_24A139148(&qword_25790AF70);
    v2 = sub_24A164A60(qword_25790AF80, 255, (uint64_t (*)(uint64_t))type metadata accessor for VAInstrumentedKeywordResult, (uint64_t)&protocol conformance descriptor for VAKeywordResult);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25790AF78);
  }
  return result;
}

uint64_t sub_24A16BCE4(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_24A139148(a2);
    result = MEMORY[0x24BD0A9EC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for VARequestContext()
{
  uint64_t result;

  result = qword_257916950;
  if (!qword_257916950)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_24A16BD64()
{
  unint64_t result;

  result = qword_25790AFC8;
  if (!qword_25790AFC8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A174, &type metadata for VARequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFC8);
  }
  return result;
}

unint64_t sub_24A16BDAC()
{
  unint64_t result;

  result = qword_25790AFD0;
  if (!qword_25790AFD0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A28C, &type metadata for VARequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFD0);
  }
  return result;
}

unint64_t sub_24A16BDF4()
{
  unint64_t result;

  result = qword_25790AFD8;
  if (!qword_25790AFD8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A264, &type metadata for VARequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFD8);
  }
  return result;
}

unint64_t sub_24A16BE3C()
{
  unint64_t result;

  result = qword_25790AFE0;
  if (!qword_25790AFE0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A2B4, &type metadata for VARequestContext.KeywordsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFE0);
  }
  return result;
}

unint64_t sub_24A16BE84()
{
  unint64_t result;

  result = qword_25790AFE8;
  if (!qword_25790AFE8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A3CC, &type metadata for VARequestContext.KeywordsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFE8);
  }
  return result;
}

unint64_t sub_24A16BECC()
{
  unint64_t result;

  result = qword_25790AFF0;
  if (!qword_25790AFF0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A3A4, &type metadata for VARequestContext.KeywordsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790AFF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for RequestContextError()
{
  return &type metadata for RequestContextError;
}

uint64_t sub_24A16BF20()
{
  return type metadata accessor for VARequestContext();
}

uint64_t sub_24A16BF28()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for VARequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VARequestContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_24A16C0A8 + 4 * byte_24A21A0D2[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_24A16C0DC + 4 * byte_24A21A0CD[v4]))();
}

uint64_t sub_24A16C0DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A16C0E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A16C0ECLL);
  return result;
}

uint64_t sub_24A16C0F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A16C100);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_24A16C104(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A16C10C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VARequestContext.CodingKeys()
{
  return &type metadata for VARequestContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VARequestContext.KeywordsCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for VARequestContext.KeywordsCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A16C1BC + 4 * byte_24A21A0D7[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A16C1DC + 4 * byte_24A21A0DC[v4]))();
}

_BYTE *sub_24A16C1BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A16C1DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A16C1E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A16C1EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A16C1F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A16C1FC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for VARequestContext.KeywordsCodingKeys()
{
  return &type metadata for VARequestContext.KeywordsCodingKeys;
}

unint64_t sub_24A16C218()
{
  unint64_t result;

  result = qword_25790B468;
  if (!qword_25790B468)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21A354, &type metadata for VARequestContext.KeywordsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25790B468);
  }
  return result;
}

char *sub_24A16C25C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *result;
  char *v7;
  char *v8;

  result = sub_24A16B4A0(a1, a2, *(char **)(v3 + 16), *(_QWORD *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t sub_24A16C28C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A16C2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24A152AD0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_25790AF28 + dword_25790AF28))(a1, v4);
}

uint64_t sub_24A16C324()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A16C350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A152AD0;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_24A16C3B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_24A135F88(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t (*sub_24A16C400())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

_QWORD *VASymbolTable.__allocating_init()()
{
  _QWORD *result;
  uint64_t v1;

  result = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x24BEE4B00];
  result[2] = MEMORY[0x24BEE4B00];
  result[3] = v1;
  result[4] = v1;
  return result;
}

_QWORD *VASymbolTable.init()()
{
  _QWORD *v0;
  _QWORD *result;
  uint64_t v2;

  result = v0;
  v2 = MEMORY[0x24BEE4B00];
  v0[2] = MEMORY[0x24BEE4B00];
  v0[3] = v2;
  v0[4] = v2;
  return result;
}

uint64_t sub_24A16C484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t *);
  void (*v80)(uint64_t *, _QWORD);
  uint64_t *v81;
  uint64_t *v82;
  char isUniquelyReferenced_nonNull_native;
  void (*v84)(uint64_t *, _QWORD);
  uint64_t *v85;
  uint64_t *v86;
  char v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  char v106[8];
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_24A215C84();
  if (v1)
    return result;
  v8 = result;
  v9 = v7;
  v120 = v0;
  v112 = v5;
  v113 = v3;
  v114 = v2;
  v125 = 10;
  v126 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](result);
  v108 = &v125;
  swift_bridgeObjectRetain();
  v10 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A14D1E0, (uint64_t)v106, v8, v9);
  v119 = 0;
  swift_bridgeObjectRelease();
  v118 = *(_QWORD *)(v10 + 16);
  if (!v118)
    goto LABEL_92;
  v11 = 0;
  v116 = v10;
  v117 = v10 + 32;
  v110 = (char *)&v125 + 2;
  v111 = (char *)&v125 + 3;
  do
  {
    if (v11 >= *(_QWORD *)(v10 + 16))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    v12 = (unint64_t *)(v117 + 32 * v11);
    v13 = *v12;
    v14 = v12[1] >> 14;
    if (v14 == *v12 >> 14)
    {
      v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
      goto LABEL_30;
    }
    v115 = v11;
    v16 = v12[3];
    swift_bridgeObjectRetain_n();
    v17 = v13;
    v18 = v13;
    v19 = v13;
    v123 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v124 = v16;
    do
    {
      while (1)
      {
        if (sub_24A21623C() == 9 && v23 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          break;
        }
        v24 = sub_24A21659C();
        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
          break;
        v17 = sub_24A216218();
        if (v14 == v17 >> 14)
          goto LABEL_21;
      }
      if (v18 >> 14 != v17 >> 14)
      {
        v25 = v123;
        if (v17 >> 14 < v18 >> 14)
          goto LABEL_103;
        v26 = sub_24A216248();
        v121 = v28;
        v122 = v27;
        v30 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = sub_24A147F40(0, v25[2] + 1, 1, v25);
        v31 = v25;
        v32 = v25[2];
        v33 = v31;
        v34 = v31[3];
        if (v32 >= v34 >> 1)
          v33 = sub_24A147F40((_QWORD *)(v34 > 1), v32 + 1, 1, v33);
        v33[2] = v32 + 1;
        v123 = v33;
        v20 = &v33[4 * v32];
        v21 = v122;
        v20[4] = v26;
        v20[5] = v21;
        v22 = v121;
        v20[6] = v30;
        v20[7] = v22;
      }
      v17 = sub_24A216218();
      v18 = v17;
      v19 = v17;
    }
    while (v14 != v17 >> 14);
LABEL_21:
    if (v14 == v18 >> 14)
    {
      swift_bridgeObjectRelease();
      v11 = v115;
      goto LABEL_29;
    }
    v11 = v115;
    if (v14 < v19 >> 14)
      goto LABEL_103;
    v35 = sub_24A216248();
    v37 = v36;
    v39 = v38;
    v41 = v40;
    swift_bridgeObjectRelease();
    v42 = v123;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = sub_24A147F40(0, v42[2] + 1, 1, v42);
    v44 = v42[2];
    v43 = v42[3];
    v123 = v42;
    if (v44 >= v43 >> 1)
      v123 = sub_24A147F40((_QWORD *)(v43 > 1), v44 + 1, 1, v123);
    v45 = v123;
    v123[2] = v44 + 1;
    v46 = &v45[4 * v44];
    v46[4] = v35;
    v46[5] = v37;
    v46[6] = v39;
    v46[7] = v41;
LABEL_29:
    swift_bridgeObjectRelease();
    v15 = v123;
LABEL_30:
    if (v15[2] < 2uLL)
      goto LABEL_98;
    v48 = v15[8];
    v47 = v15[9];
    v49 = v15[10];
    v50 = v15[11];
    v51 = v15;
    swift_bridgeObjectRetain();
    v52 = MEMORY[0x24BD095F4](v48, v47, v49, v50);
    v54 = v53;
    swift_bridgeObjectRelease();
    v55 = HIBYTE(v54) & 0xF;
    v56 = v52 & 0xFFFFFFFFFFFFLL;
    if ((v54 & 0x2000000000000000) != 0)
      v57 = HIBYTE(v54) & 0xF;
    else
      v57 = v52 & 0xFFFFFFFFFFFFLL;
    if (!v57)
    {
      swift_bridgeObjectRelease();
      v69 = 0;
      v68 = 1;
      goto LABEL_69;
    }
    if ((v54 & 0x1000000000000000) != 0)
    {
      v58 = v11;
      v61 = (uint64_t)sub_24A149198(v52, v54, 10);
      v63 = v96;
      goto LABEL_65;
    }
    if ((v54 & 0x2000000000000000) != 0)
    {
      v125 = v52;
      v126 = v54 & 0xFFFFFFFFFFFFFFLL;
      if (v52 == 43)
      {
        if (!v55)
          goto LABEL_101;
        if (v55 == 1)
          goto LABEL_45;
        v58 = v11;
        if ((BYTE1(v52) - 48) > 9u)
          goto LABEL_60;
        v61 = (BYTE1(v52) - 48);
        if (v55 != 2)
        {
          if ((BYTE2(v52) - 48) > 9u)
            goto LABEL_60;
          v61 = 10 * (BYTE1(v52) - 48) + (BYTE2(v52) - 48);
          v64 = v55 - 3;
          if (v64)
          {
            v65 = (unsigned __int8 *)v111;
            while (1)
            {
              v66 = *v65 - 48;
              if (v66 > 9)
                goto LABEL_60;
              v67 = 10 * v61;
              if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
                goto LABEL_60;
              v61 = v67 + v66;
              if (__OFADD__(v67, v66))
                goto LABEL_60;
              v63 = 0;
              ++v65;
              if (!--v64)
                goto LABEL_65;
            }
          }
        }
      }
      else
      {
        if (v52 == 45)
        {
          if (v55)
          {
            if (v55 == 1 || (BYTE1(v52) - 48) > 9u)
            {
LABEL_45:
              v58 = v11;
              goto LABEL_60;
            }
            v58 = v11;
            if (v55 == 2)
            {
              v63 = 0;
              v61 = -(uint64_t)(BYTE1(v52) - 48);
              goto LABEL_65;
            }
            if ((BYTE2(v52) - 48) <= 9u)
            {
              v61 = -10 * (BYTE1(v52) - 48) - (BYTE2(v52) - 48);
              v92 = v55 - 3;
              if (v92)
              {
                v93 = (unsigned __int8 *)v111;
                while (1)
                {
                  v94 = *v93 - 48;
                  if (v94 > 9)
                    goto LABEL_60;
                  v95 = 10 * v61;
                  if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
                    goto LABEL_60;
                  v61 = v95 - v94;
                  if (__OFSUB__(v95, v94))
                    goto LABEL_60;
                  v63 = 0;
                  ++v93;
                  if (!--v92)
                    goto LABEL_65;
                }
              }
              goto LABEL_62;
            }
LABEL_60:
            v61 = 0;
            v63 = 1;
            goto LABEL_65;
          }
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
LABEL_103:
          LODWORD(v108) = 0;
          v107 = 754;
          v106[0] = 2;
          result = sub_24A2163E0();
          __break(1u);
          return result;
        }
        if (!v55)
          goto LABEL_45;
        v58 = v11;
        if ((v52 - 48) > 9u)
          goto LABEL_60;
        v61 = (v52 - 48);
        if (v55 != 1)
        {
          if ((BYTE1(v52) - 48) > 9u)
            goto LABEL_60;
          v61 = 10 * (v52 - 48) + (BYTE1(v52) - 48);
          v88 = v55 - 2;
          if (v88)
          {
            v89 = (unsigned __int8 *)v110;
            while (1)
            {
              v90 = *v89 - 48;
              if (v90 > 9)
                goto LABEL_60;
              v91 = 10 * v61;
              if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
                goto LABEL_60;
              v61 = v91 + v90;
              if (__OFADD__(v91, v90))
                goto LABEL_60;
              v63 = 0;
              ++v89;
              if (!--v88)
                goto LABEL_65;
            }
          }
        }
      }
LABEL_62:
      v63 = 0;
      goto LABEL_65;
    }
    v58 = v11;
    if ((v52 & 0x1000000000000000) != 0)
      v59 = (unsigned __int8 *)((v54 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v59 = (unsigned __int8 *)sub_24A216350();
    v60 = v119;
    v61 = (uint64_t)sub_24A14927C(v59, v56, 10);
    v119 = v60;
    v63 = v62 & 1;
LABEL_65:
    swift_bridgeObjectRelease();
    v68 = v63 & 1;
    if ((v63 & 1) != 0)
      v69 = 0;
    else
      v69 = v61;
    v11 = v58;
LABEL_69:
    v70 = v51;
    if (!v51[2])
      goto LABEL_99;
    v71 = v51[4];
    v72 = v51[5];
    v73 = v51[6];
    v74 = v70[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v75 = MEMORY[0x24BD095F4](v71, v72, v73, v74);
    v77 = v76;
    swift_bridgeObjectRelease();
    if ((v68 & 1) != 0)
      goto LABEL_102;
    ++v11;
    v78 = v120;
    v79 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v120 + 120);
    swift_bridgeObjectRetain();
    v80 = (void (*)(uint64_t *, _QWORD))v79(&v125);
    v82 = v81;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v127 = *v82;
    *v82 = 0x8000000000000000;
    sub_24A1499B4(v75, v77, v69, isUniquelyReferenced_nonNull_native);
    *v82 = v127;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v80(&v125, 0);
    v84 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v78 + 144))(&v125);
    v86 = v85;
    v87 = swift_isUniquelyReferenced_nonNull_native();
    v127 = *v86;
    *v86 = 0x8000000000000000;
    sub_24A149AF4(v69, v75, v77, v87);
    *v86 = v127;
    swift_bridgeObjectRelease();
    v84(&v125, 0);
    swift_bridgeObjectRelease();
    v10 = v116;
  }
  while (v11 != v118);
LABEL_92:
  swift_bridgeObjectRelease();
  v98 = v113;
  v97 = v114;
  v99 = v112;
  v100 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v99, v100, v97);
  v101 = v120;
  swift_retain_n();
  v102 = sub_24A215A74();
  v103 = sub_24A2160F8();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v104 = 134217984;
    v105 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v101 + 104))() + 16);
    swift_release();
    swift_bridgeObjectRelease();
    v125 = v105;
    sub_24A216260();
    swift_release();
    _os_log_impl(&dword_24A12D000, v102, v103, "Loaded %ld symbols", v104, 0xCu);
    MEMORY[0x24BD0AAAC](v104, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v112, v114);
}

uint64_t sub_24A16CE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(_QWORD *, _QWORD);
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD *);
  void (*v13)(_QWORD *, _QWORD);
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(_QWORD *);
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD);
  _QWORD *v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD *);
  uint64_t v69;
  uint64_t v70;
  void *v71;
  _QWORD v72[4];
  _QWORD *v73;

  v70 = a2;
  v3 = v2;
  v4 = sub_24A215750();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 120))(v72);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = MEMORY[0x24BEE4B00];
  *v10 = MEMORY[0x24BEE4B00];
  v8(v72, 0);
  v12 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v3 + 144);
  v13 = (void (*)(_QWORD *, _QWORD))v12(v72);
  v15 = v14;
  swift_bridgeObjectRelease();
  *v15 = v11;
  v13(v72, 0);
  sub_24A215714();
  v16 = v71;
  v17 = sub_24A21575C();
  if (v16)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v68 = v12;
  v69 = v3;
  v20 = v17;
  v21 = v7;
  v22 = v18;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v21, v4);
  sub_24A16D544(0, &qword_25790B4A0);
  sub_24A16D544(0, &qword_25790B4A8);
  v23 = (void *)sub_24A216110();
  v62 = v20;
  v63 = v22;
  v64 = 0;
  if (!v23)
    return sub_24A135F1C(v62, v63);
  v72[0] = 0;
  sub_24A215C18();

  if (!v72[0])
    return sub_24A135F1C(v62, v63);
  v26 = v69;
  v27 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v69 + 112))(v72[0], v24, v25);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 104))(v27);
  v29 = 0;
  v30 = 1 << *(_BYTE *)(v28 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = *(_QWORD *)(v28 + 64);
  v65 = v28 + 64;
  v33 = v31 & v32;
  v66 = (unint64_t)(v30 + 63) >> 6;
  v67 = v28;
  while (1)
  {
    v34 = v68;
    if (v33)
    {
      v70 = (v33 - 1) & v33;
      v71 = v29;
      v35 = __clz(__rbit64(v33)) | ((_QWORD)v29 << 6);
    }
    else
    {
      v36 = (int64_t)v29 + 1;
      if (__OFADD__(v29, 1))
        goto LABEL_41;
      if (v36 >= v66)
      {
LABEL_37:
        swift_release();
        return sub_24A135F1C(v62, v63);
      }
      v37 = *(_QWORD *)(v65 + 8 * v36);
      v38 = (int64_t)v29 + 1;
      if (!v37)
      {
        v38 = (int64_t)v29 + 2;
        if ((uint64_t)v29 + 2 >= v66)
          goto LABEL_37;
        v37 = *(_QWORD *)(v65 + 8 * v38);
        if (!v37)
        {
          v38 = (int64_t)v29 + 3;
          if ((uint64_t)v29 + 3 >= v66)
            goto LABEL_37;
          v37 = *(_QWORD *)(v65 + 8 * v38);
          if (!v37)
          {
            v39 = (uint64_t)v29 + 4;
            if ((uint64_t)v29 + 4 >= v66)
              goto LABEL_37;
            v37 = *(_QWORD *)(v65 + 8 * v39);
            if (!v37)
            {
              while (1)
              {
                v38 = v39 + 1;
                if (__OFADD__(v39, 1))
                  goto LABEL_42;
                if (v38 >= v66)
                  goto LABEL_37;
                v37 = *(_QWORD *)(v65 + 8 * v38);
                ++v39;
                if (v37)
                  goto LABEL_25;
              }
            }
            v38 = (int64_t)v29 + 4;
          }
        }
      }
LABEL_25:
      v70 = (v37 - 1) & v37;
      v71 = (void *)v38;
      v35 = __clz(__rbit64(v37)) + (v38 << 6);
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v67 + 48) + 8 * v35);
    v41 = (uint64_t *)(*(_QWORD *)(v67 + 56) + 16 * v35);
    v42 = *v41;
    v43 = v41[1];
    swift_bridgeObjectRetain();
    v44 = (void (*)(_QWORD *, _QWORD))v34(v72);
    v46 = v45;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v73 = (_QWORD *)*v46;
    v48 = v73;
    *v46 = 0x8000000000000000;
    v50 = sub_24A148970(v42, v43);
    v51 = v48[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      break;
    v54 = v49;
    if (v48[3] >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v57 = v73;
        if ((v49 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        sub_24A14A3B4();
        v57 = v73;
        if ((v54 & 1) != 0)
          goto LABEL_8;
      }
    }
    else
    {
      sub_24A149F00(v53, isUniquelyReferenced_nonNull_native);
      v55 = sub_24A148970(v42, v43);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_43;
      v50 = v55;
      v57 = v73;
      if ((v54 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v57[7] + 8 * v50) = v40;
        goto LABEL_9;
      }
    }
    v57[(v50 >> 6) + 8] |= 1 << v50;
    v58 = (uint64_t *)(v57[6] + 16 * v50);
    *v58 = v42;
    v58[1] = v43;
    *(_QWORD *)(v57[7] + 8 * v50) = v40;
    v59 = v57[2];
    v60 = __OFADD__(v59, 1);
    v61 = v59 + 1;
    if (v60)
      goto LABEL_40;
    v57[2] = v61;
    swift_bridgeObjectRetain();
LABEL_9:
    *v46 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44(v72, 0);
    v33 = v70;
    v29 = v71;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

void sub_24A16D328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_24A215750();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self();
  (*(void (**)(void))(*(_QWORD *)v0 + 104))();
  v6 = (void *)sub_24A215C0C();
  swift_bridgeObjectRelease();
  v15[0] = 0;
  v7 = objc_msgSend(v5, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v6, 0, v15);

  v8 = v15[0];
  if (v7)
  {
    v9 = sub_24A215774();
    v11 = v10;

    sub_24A215714();
    sub_24A215780();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_24A135F1C(v9, v11);
  }
  else
  {
    v12 = v8;
    v13 = (void *)sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t VASymbolTable.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VASymbolTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A16D544(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for VASymbolTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for VASymbolTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VASymbolTable.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of VASymbolTable.readText(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of VASymbolTable.readBinary(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of VASymbolTable.writeBinary(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t sub_24A16D60C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_24A16D64C(MEMORY[0x24BEE4AF8]);
  return v0;
}

unint64_t sub_24A16D64C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_25790B7B8);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_24A148970(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A16D764()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t sub_24A16D790()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 96);
  v2 = swift_bridgeObjectRetain();
  return v1(v2);
}

uint64_t sub_24A16D7C0()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A16D7E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t sub_24A16D80C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_24A16D834()
{
  Swift::String v0;
  NSString *v1;
  uint64_t result;

  v0 = VATempDir()();
  v1 = NSUserName();
  sub_24A215CB4();

  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24A215D98();
  result = swift_bridgeObjectRelease();
  xmmword_257916968 = (__int128)v0;
  return result;
}

uint64_t sub_24A16D908()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A16D950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A16D9A0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A16D9DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions19VAFileBackedLexicon_uuid;
  swift_beginAccess();
  v4 = sub_24A2157A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_24A16DA40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions19VAFileBackedLexicon_uuid;
  swift_beginAccess();
  v4 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_24A16DAAC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

_QWORD *sub_24A16DAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_24A2157A4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_allocObject();
  sub_24A215798();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))((uint64_t)v9 + OBJC_IVAR____TtC12VoiceActions19VAFileBackedLexicon_uuid, v8, v5);
  v9[2] = sub_24A16D64C(MEMORY[0x24BEE4AF8]);
  v9[3] = a1;
  v9[4] = a2;
  v10 = sub_24A16DC04();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v11 = v10;
    swift_beginAccess();
    v9[2] = v11;
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_24A16DC04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unint64_t v38;
  unint64_t i;
  char v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t result;
  _QWORD v64[2];
  uint64_t *v65;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;

  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v64 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 128))(v11);
  v12 = sub_24A16F7E4();
  if (v1)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v2 = (_QWORD *)v12;
  swift_bridgeObjectRelease();
  v13 = sub_24A16FF60();
  if (!v13)
  {
    v25 = sub_24A1B9D90();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v25, v3);
    v26 = sub_24A215A74();
    v27 = sub_24A2160EC();
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_24A12D000, v26, (os_log_type_t)v27, "No custom lexicon", v28, 2u);
      MEMORY[0x24BD0AAAC](v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return (uint64_t)v2;
  }
  v14 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v10, v14, v3);
  swift_bridgeObjectRetain_n();
  v15 = sub_24A215A74();
  v16 = sub_24A2160EC();
  v17 = v16;
  v18 = os_log_type_enabled(v15, v16);
  v64[1] = 0;
  if (v18)
  {
    v19 = swift_slowAlloc();
    isUniquelyReferenced_nonNull_native = v17;
    v20 = v19;
    v67 = swift_slowAlloc();
    v70 = (_QWORD *)v67;
    *(_DWORD *)v20 = 134218242;
    v68 = *(_QWORD *)(v13 + 16);
    v65 = &v69;
    sub_24A216260();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    v64[0] = v20 + 14;
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_257909940);
    v21 = sub_24A215C3C();
    v23 = v22;
    swift_bridgeObjectRelease();
    v68 = sub_24A148270(v21, v23, (uint64_t *)&v70);
    sub_24A216260();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A12D000, v15, (os_log_type_t)isUniquelyReferenced_nonNull_native, "Merged %ld words from custom lexicon: %s", (uint8_t *)v20, 0x16u);
    v24 = v67;
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v24, -1, -1);
    MEMORY[0x24BD0AAAC](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  v29 = v13 + 64;
  v30 = 1 << *(_BYTE *)(v13 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & *(_QWORD *)(v13 + 64);
  v33 = (unint64_t)(v30 + 63) >> 6;
  swift_bridgeObjectRetain();
  v34 = 0;
  v65 = (uint64_t *)v33;
  if (v32)
    goto LABEL_17;
LABEL_21:
  v41 = v34 + 1;
  if (__OFADD__(v34, 1))
  {
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v41 >= v33)
    goto LABEL_55;
  v42 = *(_QWORD *)(v29 + 8 * v41);
  ++v34;
  if (v42)
  {
LABEL_38:
    v32 = (v42 - 1) & v42;
    for (i = __clz(__rbit64(v42)) + (v34 << 6); ; i = v38 | (v34 << 6))
    {
      v44 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * i);
      v46 = *v44;
      v45 = v44[1];
      v47 = *(_QWORD *)(v13 + 16);
      swift_bridgeObjectRetain();
      if (v47)
      {
        swift_bridgeObjectRetain();
        v48 = sub_24A148970(v46, v45);
        if ((v49 & 1) != 0)
        {
          v67 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v48);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v70 = v2;
          v51 = sub_24A148970(v46, v45);
          v52 = v2[2];
          v53 = (v50 & 1) == 0;
          v54 = v52 + v53;
          if (__OFADD__(v52, v53))
            goto LABEL_58;
          if (v2[3] >= v54)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v55 = v50;
              sub_24A16F46C();
              goto LABEL_45;
            }
          }
          else
          {
            v55 = v50;
            sub_24A16EAC8(v54, isUniquelyReferenced_nonNull_native);
            v56 = sub_24A148970(v46, v45);
            if ((v55 & 1) != (v57 & 1))
              goto LABEL_61;
            v51 = v56;
LABEL_45:
            v50 = v55;
          }
          v2 = v70;
          if ((v50 & 1) != 0)
          {
            v58 = v70[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v58 + 8 * v51) = v67;
          }
          else
          {
            v70[(v51 >> 6) + 8] |= 1 << v51;
            v59 = (uint64_t *)(v2[6] + 16 * v51);
            *v59 = v46;
            v59[1] = v45;
            *(_QWORD *)(v2[7] + 8 * v51) = v67;
            v60 = v2[2];
            v61 = __OFADD__(v60, 1);
            v62 = v60 + 1;
            if (v61)
              goto LABEL_60;
            v2[2] = v62;
            swift_bridgeObjectRetain();
          }
          v33 = (int64_t)v65;
          goto LABEL_52;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v35 = sub_24A148970(v46, v45);
      v37 = v36;
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        if (!v32)
          goto LABEL_21;
        goto LABEL_17;
      }
      v40 = swift_isUniquelyReferenced_nonNull_native();
      v70 = v2;
      if ((v40 & 1) == 0)
      {
        sub_24A16F46C();
        v2 = v70;
      }
      swift_bridgeObjectRelease();
      sub_24A16F114(v35, (uint64_t)v2);
      swift_bridgeObjectRelease();
LABEL_52:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v32)
        goto LABEL_21;
LABEL_17:
      v38 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
    }
  }
  v34 = v41 + 1;
  if (v41 + 1 >= v33)
  {
LABEL_55:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v42 = *(_QWORD *)(v29 + 8 * v34);
  if (v42)
    goto LABEL_38;
  v34 = v41 + 2;
  if (v41 + 2 >= v33)
    goto LABEL_55;
  v42 = *(_QWORD *)(v29 + 8 * v34);
  if (v42)
    goto LABEL_38;
  v34 = v41 + 3;
  if (v41 + 3 >= v33)
    goto LABEL_55;
  v42 = *(_QWORD *)(v29 + 8 * v34);
  if (v42)
    goto LABEL_38;
  v34 = v41 + 4;
  if (v41 + 4 >= v33)
    goto LABEL_55;
  v42 = *(_QWORD *)(v29 + 8 * v34);
  if (v42)
    goto LABEL_38;
  v43 = v41 + 5;
  if (v43 >= v33)
    goto LABEL_55;
  v42 = *(_QWORD *)(v29 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_38;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v33)
      goto LABEL_55;
    v42 = *(_QWORD *)(v29 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_38;
  }
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A16E364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = sub_24A215A74();
  v8 = sub_24A2160F8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_24A12D000, v7, v8, "deinit VALexicon", v9, 2u);
    MEMORY[0x24BD0AAAC](v9, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v1 + OBJC_IVAR____TtC12VoiceActions19VAFileBackedLexicon_uuid;
  v11 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return v1;
}

uint64_t sub_24A16E4A4()
{
  sub_24A16E364();
  return swift_deallocClassInstance();
}

uint64_t sub_24A16E4C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

void sub_24A16E4F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v0;
  sub_24A170530();
  if (!v1)
  {
    v3 = sub_24A16DC04();
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v3);
  }
}

uint64_t sub_24A16E540(uint64_t a1, uint64_t a2)
{
  return sub_24A16E608(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_24A16E54C()
{
  sub_24A215CB4();
  sub_24A215D50();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A16E58C()
{
  uint64_t v0;

  sub_24A215CB4();
  sub_24A216638();
  sub_24A215D50();
  v0 = sub_24A21665C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A16E5FC(uint64_t a1, uint64_t a2)
{
  return sub_24A16E608(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_24A16E608(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_24A215CB4();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_24A16E644(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_24A215C9C();
  *a2 = 0;
  return result;
}

uint64_t sub_24A16E6B8(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_24A215CA8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_24A16E734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_24A215CB4();
  v2 = sub_24A215C90();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24A16E774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_24A215CB4();
  v2 = v1;
  if (v0 == sub_24A215CB4() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_24A21659C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_24A16E7FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_24A215C90();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24A16E840@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_24A215CB4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24A16E868()
{
  sub_24A171040(&qword_25790B7A0, (uint64_t)&unk_24A21A768);
  sub_24A171040(&qword_25790B7F0, (uint64_t)&unk_24A21A6BC);
  return sub_24A216458();
}

unint64_t sub_24A16E8D4(uint64_t a1)
{
  uint64_t v2;

  sub_24A215CB4();
  sub_24A216638();
  sub_24A215D50();
  v2 = sub_24A21665C();
  swift_bridgeObjectRelease();
  return sub_24A16E954(a1, v2);
}

unint64_t sub_24A16E954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_24A215CB4();
    v8 = v7;
    if (v6 == sub_24A215CB4() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_24A215CB4();
          v15 = v14;
          if (v13 == sub_24A215CB4() && v15 == v16)
            break;
          v18 = sub_24A21659C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_24A16EAC8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790B7B8);
  v36 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_24A216638();
    sub_24A215D50();
    result = sub_24A21665C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24A16EDDC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790B7B0);
  v35 = a2;
  v6 = sub_24A216434();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      sub_24A170EFC(v22, v36);
    }
    else
    {
      sub_24A14D1A4((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    sub_24A215CB4();
    sub_24A216638();
    sub_24A215D50();
    v24 = sub_24A21665C();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)sub_24A170EFC(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_24A16F114(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_24A2162E4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_24A216638();
        swift_bridgeObjectRetain();
        sub_24A215D50();
        v9 = sub_24A21665C();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_24A16F2E8(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_24A16E8D4((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        sub_24A14D184((uint64_t)v16);
        return sub_24A170EFC(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_24A16F620();
      goto LABEL_7;
    }
    sub_24A16EDDC(v12, a3 & 1);
    v18 = sub_24A16E8D4((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24A16F408(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for FileAttributeKey();
  result = (_OWORD *)sub_24A2165CC();
  __break(1u);
  return result;
}

_OWORD *sub_24A16F408(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_24A170EFC(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_24A16F46C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_24A135F88(&qword_25790B7B8);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_24A16F620()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_24A135F88(&qword_25790B7B0);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_24A170EFC(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A16F7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint8_t *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint8_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;

  v0 = sub_24A215CFC();
  v54 = *(uint8_t **)(v0 - 8);
  v55 = v0;
  v1 = MEMORY[0x24BDAC7A8](v0);
  v53 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = sub_24A215A8C();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v52 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v49 - v7;
  v9 = (void *)sub_24A215C90();
  v10 = objc_msgSend(v9, sel_stringByDeletingPathExtension);

  sub_24A215CB4();
  v11 = (void *)sub_24A215C90();
  v12 = objc_msgSend(v11, sel_pathExtension);

  sub_24A215CB4();
  v13 = sub_24A17E2D0();
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    v16 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v17 = (void *)sub_24A215C90();
    v18 = objc_msgSend(v16, sel_fileExistsAtPath_, v17);

    v51 = v4;
    if ((v18 & 1) == 0)
    {
      v19 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, v19, v3);
      swift_bridgeObjectRetain_n();
      v20 = sub_24A215A74();
      v21 = sub_24A216104();
      if (os_log_type_enabled(v20, v21))
      {
        v49 = v3;
        v22 = swift_slowAlloc();
        v50 = v13;
        v23 = (uint8_t *)v22;
        v24 = swift_slowAlloc();
        v57 = v24;
        *(_DWORD *)v23 = 136315138;
        swift_bridgeObjectRetain();
        v59 = sub_24A148270(v50, v15, &v57);
        v3 = v49;
        sub_24A216260();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A12D000, v20, v21, "Invalid lexicon file, doesn't exist: %s", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v24, -1, -1);
        v25 = v23;
        v13 = v50;
        MEMORY[0x24BD0AAAC](v25, -1, -1);

        (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v3);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
      }
    }
    sub_24A215CF0();
    v27 = (void *)v56;
    sub_24A215C78();
    v28 = v27;
    if (v27)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      v57 = 0;
      v58 = 0xE000000000000000;
      sub_24A216308();
      sub_24A215D98();
      v59 = (uint64_t)v28;
      sub_24A135F88(&qword_25790A8B8);
      sub_24A2163D4();
      v38 = v57;
      v39 = v58;
      sub_24A14C404();
      swift_allocError();
      *v40 = v38;
      v40[1] = v39;
      swift_willThrow();

      return v3;
    }
    v29 = v53;
    sub_24A215CF0();
    v30 = sub_24A215CC0();
    v32 = v31;
    swift_bridgeObjectRelease();
    (*((void (**)(char *, unint64_t))v54 + 1))(v29, v55);
    if (v32 >> 60 == 15)
    {
      v57 = 0;
      v58 = 0xE000000000000000;
      sub_24A216308();
      swift_bridgeObjectRelease();
      v57 = 0xD00000000000001DLL;
      v58 = 0x800000024A2228F0;
      sub_24A215D98();
      swift_bridgeObjectRelease();
      v33 = v57;
      v34 = v58;
      sub_24A14C404();
      v28 = (void *)swift_allocError();
      *v35 = v33;
      v35[1] = v34;
      swift_willThrow();
      goto LABEL_12;
    }
    sub_24A2155D0();
    swift_allocObject();
    v36 = v30;
    v37 = sub_24A2155C4();
    sub_24A135F88(&qword_25790B7C0);
    sub_24A170F0C();
    sub_24A2155B8();
    v55 = v32;
    v56 = v37;
    v50 = v13;
    v42 = v3;
    v3 = v57;
    v43 = sub_24A1B9D90();
    v44 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v52, v43, v42);
    swift_bridgeObjectRetain();
    v45 = sub_24A215A74();
    v46 = sub_24A2160F8();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      v57 = v48;
      v49 = v42;
      *(_DWORD *)v47 = 136315138;
      v54 = v47 + 4;
      swift_bridgeObjectRetain();
      v59 = sub_24A148270(v50, v15, &v57);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v45, v46, "Loaded lexicon from %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v48, -1, -1);
      MEMORY[0x24BD0AAAC](v47, -1, -1);
      swift_release();
      sub_24A135F08(v36, v55);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v49);
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      sub_24A135F08(v36, v55);

      (*(void (**)(char *, uint64_t))(v51 + 8))(v44, v42);
    }
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v26 = 0xD00000000000001ELL;
    v26[1] = 0x800000024A2228B0;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A16FF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  __int128 v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v0 = sub_24A215A8C();
  v1 = *(_QWORD *)(v0 - 8);
  v36 = v0;
  v37 = v1;
  MEMORY[0x24BDAC7A8](v0);
  v35 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_24A215CFC();
  v38 = *(uint8_t **)(v3 - 8);
  v39 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (void *)objc_opt_self();
  v8 = objc_msgSend(v7, sel_defaultManager);
  if (qword_257916960 != -1)
    swift_once();
  v9 = (void *)sub_24A215C90();
  v10 = objc_msgSend(v8, sel_fileExistsAtPath_, v9);

  if (!v10)
    return 0;
  v11 = objc_msgSend(v7, sel_defaultManager);
  v12 = (void *)sub_24A215C90();
  v13 = (uint64_t)objc_msgSend(v11, sel_isReadableFileAtPath_, v12);

  if ((v13 & 1) != 0)
  {
    sub_24A215CF0();
    v14 = v40;
    sub_24A215C78();
    v13 = (uint64_t)v14;
    if (v14)
    {
LABEL_11:
      v41 = 0;
      v42 = 0xE000000000000000;
      sub_24A216308();
      sub_24A215D98();
      v43 = v13;
      sub_24A135F88(&qword_25790A8B8);
      sub_24A2163D4();
      v22 = v41;
      v23 = v42;
      sub_24A14C404();
      swift_allocError();
      *v24 = v22;
      v24[1] = v23;
      swift_willThrow();

      return v13;
    }
    sub_24A215CF0();
    v15 = sub_24A215CC0();
    v17 = v16;
    swift_bridgeObjectRelease();
    (*((void (**)(char *, uint64_t))v38 + 1))(v6, v39);
    if (v17 >> 60 == 15)
    {
      sub_24A14C404();
      v13 = swift_allocError();
      *v18 = 0xD000000000000023;
      v18[1] = 0x800000024A222880;
      swift_willThrow();
      goto LABEL_11;
    }
    sub_24A2155D0();
    swift_allocObject();
    sub_24A2155C4();
    sub_24A135F88(&qword_25790B7C0);
    sub_24A170F0C();
    sub_24A2155B8();
    v13 = v41;
    v26 = sub_24A1B9D90();
    v27 = v36;
    v28 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v35, v26, v36);
    v29 = sub_24A215A74();
    v30 = sub_24A2160F8();
    v40 = v29;
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v41 = v39;
      *(_DWORD *)v31 = 136315138;
      v38 = v31 + 4;
      v32 = xmmword_257916968;
      swift_bridgeObjectRetain();
      v43 = sub_24A148270(v32, *((unint64_t *)&v32 + 1), &v41);
      sub_24A216260();
      swift_bridgeObjectRelease();
      v33 = v40;
      _os_log_impl(&dword_24A12D000, v40, v30, "Loaded custom lexicon from %s", v31, 0xCu);
      v34 = v39;
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v34, -1, -1);
      MEMORY[0x24BD0AAAC](v31, -1, -1);
      swift_release();
      sub_24A135F08(v15, v17);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v35, v36);
    }
    else
    {
      swift_release();
      sub_24A135F08(v15, v17);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v27);
    }
  }
  else
  {
    v41 = 0;
    v42 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v41 = 0xD000000000000026;
    v42 = 0x800000024A222830;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v19 = v41;
    v20 = v42;
    sub_24A14C404();
    swift_allocError();
    *v21 = v19;
    v21[1] = v20;
    swift_willThrow();
  }
  return v13;
}

void sub_24A170530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  unsigned int v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  __int128 v23;
  _OWORD *v24;
  void *v25;
  void *v26;
  __int128 v27;
  _OWORD *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  id v42;
  void *v43;
  void *v44;
  unsigned int v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  __int128 v55;
  id v56;
  id v57;
  _QWORD v58[2];
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  _OWORD v66[2];
  __int128 v67;
  unint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v0 = sub_24A215A8C();
  v60 = *(_QWORD *)(v0 - 8);
  v61 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v59 = (char *)v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_24A215CFC();
  v2 = *(_QWORD *)(v62 - 8);
  v3 = MEMORY[0x24BDAC7A8](v62);
  v5 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v63 = (id)objc_opt_self();
  v6 = objc_msgSend(v63, sel_defaultManager);
  if (qword_257916960 != -1)
    swift_once();
  v7 = (void *)sub_24A215C90();
  v8 = objc_msgSend(v6, sel_fileExistsAtPath_, v7);

  if (v8
    && (v9 = objc_msgSend(v63, sel_defaultManager),
        v10 = (void *)sub_24A215C90(),
        v11 = objc_msgSend(v9, sel_isWritableFileAtPath_, v10),
        v9,
        v10,
        (v11 & 1) == 0))
  {
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v67 = 0xD000000000000025;
    *((_QWORD *)&v67 + 1) = 0x800000024A2227E0;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v27 = v67;
    sub_24A14C404();
    swift_allocError();
    *v28 = v27;
    swift_willThrow();
  }
  else
  {
    v12 = (void *)objc_opt_self();
    sub_24A135F88(&qword_257909940);
    v13 = (void *)sub_24A215C0C();
    *(_QWORD *)&v67 = 0;
    v14 = objc_msgSend(v12, sel_dataWithJSONObject_options_error_, v13, 0, &v67);

    v15 = (id)v67;
    if (v14)
    {
      v16 = sub_24A215774();
      v18 = v17;

      sub_24A215CF0();
      v19 = sub_24A215CCC();
      if (v20)
      {
        *(_QWORD *)&v67 = v19;
        *((_QWORD *)&v67 + 1) = v20;
        v66[0] = xmmword_257916968;
        swift_bridgeObjectRetain();
        sub_24A215CF0();
        sub_24A14C688();
        v21 = v64;
        sub_24A2162B4();
        v22 = v21;
        if (v21)
        {
          sub_24A135F1C(v16, v18);
          (*(void (**)(char *, unint64_t))(v2 + 8))(v5, v62);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_9:
          *(_QWORD *)&v67 = 0;
          *((_QWORD *)&v67 + 1) = 0xE000000000000000;
          sub_24A216308();
          sub_24A215D98();
          *(_QWORD *)&v66[0] = v22;
          sub_24A135F88(&qword_25790A8B8);
          sub_24A2163D4();
          v23 = v67;
          sub_24A14C404();
          swift_allocError();
          *v24 = v23;
          swift_willThrow();

          return;
        }
        v64 = 0;
        (*(void (**)(char *, unint64_t))(v2 + 8))(v5, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = v63;
        v30 = objc_msgSend(v63, sel_defaultManager);
        v31 = (void *)sub_24A215C90();
        *(_QWORD *)&v67 = 0;
        v32 = objc_msgSend(v30, sel_attributesOfItemAtPath_error_, v31, &v67);

        v33 = (void *)v67;
        if (!v32)
        {
          v56 = (id)v67;
          v22 = (void *)sub_24A2156F0();

          swift_willThrow();
          sub_24A135F1C(v16, v18);
          goto LABEL_9;
        }
        v62 = v18;
        type metadata accessor for FileAttributeKey();
        v58[1] = v34;
        sub_24A171040(&qword_25790B7A0, (uint64_t)&unk_24A21A768);
        v35 = sub_24A215C24();
        v36 = v33;

        v37 = (void *)*MEMORY[0x24BDD0CC8];
        v38 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        v39 = v37;
        v40 = objc_msgSend(v38, sel_initWithInteger_, 432);
        v68 = sub_24A170EC0();
        *(_QWORD *)&v67 = v40;
        sub_24A170EFC(&v67, v66);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v65 = v35;
        sub_24A16F2E8(v66, v39, isUniquelyReferenced_nonNull_native);

        swift_bridgeObjectRelease();
        v42 = objc_msgSend(v29, sel_defaultManager);
        v43 = (void *)sub_24A215C0C();
        swift_bridgeObjectRelease();
        v44 = (void *)sub_24A215C90();
        *(_QWORD *)&v67 = 0;
        v45 = objc_msgSend(v42, sel_setAttributes_ofItemAtPath_error_, v43, v44, &v67);

        if (!v45)
        {
          v57 = (id)v67;
          v22 = (void *)sub_24A2156F0();

          swift_willThrow();
          sub_24A135F1C(v16, v62);
          goto LABEL_9;
        }
        v46 = (id)v67;
        v47 = sub_24A1B9D90();
        v49 = v59;
        v48 = v60;
        v50 = v61;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v47, v61);
        v51 = sub_24A215A74();
        v52 = sub_24A2160F8();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          v54 = swift_slowAlloc();
          *(_QWORD *)&v67 = v54;
          *(_DWORD *)v53 = 136315138;
          v55 = xmmword_257916968;
          swift_bridgeObjectRetain();
          *(_QWORD *)&v66[0] = sub_24A148270(v55, *((unint64_t *)&v55 + 1), (uint64_t *)&v67);
          sub_24A216260();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24A12D000, v51, v52, "Updated lexicon at %s.", v53, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v54, -1, -1);
          MEMORY[0x24BD0AAAC](v53, -1, -1);
          sub_24A135F1C(v16, v62);

          (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
        }
        else
        {
          sub_24A135F1C(v16, v62);

          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
        }
      }
      else
      {
        sub_24A135F1C(v16, v18);
      }
    }
    else
    {
      v25 = v15;
      v26 = (void *)sub_24A2156F0();

      swift_willThrow();
    }
  }
}

uint64_t type metadata accessor for VAMemoryBackedLexicon()
{
  return objc_opt_self();
}

uint64_t sub_24A170DA4()
{
  return type metadata accessor for VAFileBackedLexicon();
}

uint64_t type metadata accessor for VAFileBackedLexicon()
{
  uint64_t result;

  result = qword_257916978;
  if (!qword_257916978)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A170DE8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for FileAttributeKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_25790B7D0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_25790B7D0);
  }
}

unint64_t sub_24A170EC0()
{
  unint64_t result;

  result = qword_25790B7A8;
  if (!qword_25790B7A8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25790B7A8);
  }
  return result;
}

_OWORD *sub_24A170EFC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_24A170F0C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_25790B7C8;
  if (!qword_25790B7C8)
  {
    v1 = sub_24A139148(&qword_25790B7C0);
    v2 = sub_24A170F78();
    v3[0] = MEMORY[0x24BEE0D38];
    v3[1] = v2;
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE04E0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_25790B7C8);
  }
  return result;
}

unint64_t sub_24A170F78()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257909938;
  if (!qword_257909938)
  {
    v1 = sub_24A139148(&qword_257909940);
    v2 = MEMORY[0x24BEE1798];
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257909938);
  }
  return result;
}

uint64_t sub_24A170FD4()
{
  return sub_24A171040(&qword_25790B7D8, (uint64_t)&unk_24A21A680);
}

uint64_t sub_24A170FF8()
{
  return sub_24A171040(&qword_25790B7E0, (uint64_t)&unk_24A21A654);
}

uint64_t sub_24A17101C()
{
  return sub_24A171040(&qword_25790B7E8, (uint64_t)&unk_24A21A6F0);
}

uint64_t sub_24A171040(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for FileAttributeKey();
    result = MEMORY[0x24BD0A9EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A171080()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_24A1710B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t sub_24A1710EC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_24A17111C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_24A171158()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A17118C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t sub_24A1711D0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A171204(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A171248()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A17127C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1712C0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1712F4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A171338()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A17136C(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1713B0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1713EC()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A171420(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 72) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A171464()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A171498(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1714DC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A171518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_24A171564(a1, a2);
  return v4;
}

void sub_24A171564(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v3 = v2;
  v6 = sub_24A215540();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3[4] = 0;
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v3[2] = a1;
  v10 = v3 + 2;
  if (a2 + 0x4000000000000000 < 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v11 = ceilf(log2f((float)(2 * a2)));
  if ((~LODWORD(v11) & 0x7F800000) == 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v11 <= -1.0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v11 >= 1.8447e19)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v3[3] = (unint64_t)v11;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEDFB60], v6);
  type metadata accessor for DSPSplitComplex();
  sub_24A135F88(&qword_25790B7F8);
  swift_allocObject();
  v12 = sub_24A215528();
  if (v12)
  {
    v13 = v12;
    swift_beginAccess();
    v3[4] = v13;
    swift_release();
    swift_beginAccess();
    v14 = *v10;
    if ((*v10 & 0x8000000000000000) == 0)
    {
      if (!v14)
      {
        v3[5] = MEMORY[0x24BEE4AF8];
        goto LABEL_21;
      }
      v15 = sub_24A215EF4();
      *(_QWORD *)(v15 + 16) = v14;
      bzero((void *)(v15 + 32), 4 * v14);
      v16 = v3[2];
      v3[5] = v15;
      if ((v16 & 0x8000000000000000) == 0)
      {
        if (v16)
        {
          v17 = sub_24A215EF4();
          *(_QWORD *)(v17 + 16) = v16;
          bzero((void *)(v17 + 32), 4 * v16);
          v18 = v3[2];
          v3[6] = v17;
          if ((v18 & 0x8000000000000000) == 0)
          {
            if (v18)
            {
              v19 = sub_24A215EF4();
              *(_QWORD *)(v19 + 16) = v18;
              bzero((void *)(v19 + 32), 4 * v18);
              v20 = v3[2];
              v3[7] = v19;
              if ((v20 & 0x8000000000000000) == 0)
              {
                if (v20)
                {
                  v21 = sub_24A215EF4();
                  *(_QWORD *)(v21 + 16) = v20;
                  bzero((void *)(v21 + 32), 4 * v20);
                  v22 = v3[2];
                  v3[8] = v21;
                  if ((v22 & 0x8000000000000000) == 0)
                  {
                    if (v22)
                    {
                      v23 = sub_24A215EF4();
                      *(_QWORD *)(v23 + 16) = v22;
                      bzero((void *)(v23 + 32), 4 * v22);
                      v24 = v3[2];
                      v3[9] = v23;
                      if ((v24 & 0x8000000000000000) == 0)
                      {
                        if (v24)
                        {
                          v25 = sub_24A215EF4();
                          *(_QWORD *)(v25 + 16) = v24;
                          bzero((void *)(v25 + 32), 4 * v24);
                        }
                        else
                        {
                          v25 = MEMORY[0x24BEE4AF8];
                        }
                        goto LABEL_25;
                      }
                      goto LABEL_37;
                    }
LABEL_24:
                    v25 = MEMORY[0x24BEE4AF8];
                    v3[9] = MEMORY[0x24BEE4AF8];
LABEL_25:
                    v3[10] = v25;
                    return;
                  }
LABEL_36:
                  __break(1u);
LABEL_37:
                  __break(1u);
                  goto LABEL_38;
                }
LABEL_23:
                v3[8] = MEMORY[0x24BEE4AF8];
                goto LABEL_24;
              }
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
LABEL_22:
            v3[7] = MEMORY[0x24BEE4AF8];
            goto LABEL_23;
          }
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
LABEL_21:
        v3[6] = MEMORY[0x24BEE4AF8];
        goto LABEL_22;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_38:
  __break(1u);
}

void type metadata accessor for DSPSplitComplex()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_25790BA68)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_25790BA68);
  }
}

uint64_t sub_24A1718E4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t (*v4)(void);
  vDSP_Length v5;
  unint64_t v6;
  void (*v7)(_QWORD *, _QWORD);
  char **v8;
  char **v9;
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  vDSP_Length v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  char *v16;
  char v17;
  char **v18;
  char v19;
  char **v20;
  char **v21;
  char *v22;
  char v23;
  char **v24;
  char **v25;
  char *v26;
  char v27;
  char **v28;
  char **v29;
  char *v30;
  char v31;
  uint64_t result;
  void (*v33)(_QWORD *, _QWORD);
  char **v34;
  char **v35;
  char *v36;
  vDSP_Length v37;
  char v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  char **v43;
  char **v44;
  char *v45;
  char v46;
  uint64_t v47;
  float v48;
  unint64_t v49;
  float v50;
  DSPSplitComplex v51;
  char *v52;
  void (*v53)(_BYTE *, _QWORD);
  void (*v54)(_BYTE *, _QWORD);
  char **v55;
  void (*v56)(_BYTE *, _QWORD);
  char **v57;
  uint64_t (*v58)(_BYTE *, _QWORD);
  uint64_t (*v59)(void);
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];
  _BYTE v63[32];
  DSPSplitComplex __A;
  _QWORD v65[4];
  DSPSplitComplex v66;

  v2 = v1;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 152);
  v5 = v4();
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v7 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *))v6)(v65);
  v9 = v8;
  v10 = *v8;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v9 = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_24A147E34(0, *((_QWORD *)v10 + 2), 0, v10);
  *v9 = v10;
  swift_bridgeObjectRetain();
  vDSP_vclr((float *)v10 + 8, 1, v5);
  v7(v65, 0);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (_QWORD *)((uint64_t (*)(_QWORD *))v6)(v65);
  v15 = (uint64_t)v14;
  v16 = *v14;
  v17 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v15 = v16;
  if ((v17 & 1) == 0)
    goto LABEL_28;
  if (!*((_QWORD *)v16 + 2))
    goto LABEL_29;
LABEL_5:
  vDSP_mmov((const float *)(a1 + 32), (float *)v16 + 8, v12, 1uLL, 1uLL, 1uLL);
  ((void (*)(_QWORD *, _QWORD))v13)(v65, 0);
  v58 = (uint64_t (*)(_BYTE *, _QWORD))((uint64_t (*)(_BYTE *))v6)(v63);
  v13 = v18;
  v16 = *v18;
  v19 = swift_isUniquelyReferenced_nonNull_native();
  *v13 = v16;
  v59 = v4;
  v57 = (char **)v13;
  if ((v19 & 1) == 0)
    goto LABEL_30;
  while (1)
  {
    v56 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 240))(v62);
    v21 = v20;
    v22 = *v20;
    v23 = swift_isUniquelyReferenced_nonNull_native();
    *v21 = v22;
    v55 = v21;
    if ((v23 & 1) == 0)
    {
      v22 = sub_24A148928((uint64_t)v22);
      *v21 = v22;
    }
    v54 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 264))(v61);
    v25 = v24;
    v26 = *v24;
    v27 = swift_isUniquelyReferenced_nonNull_native();
    *v25 = v26;
    if ((v27 & 1) == 0)
    {
      v26 = sub_24A148928((uint64_t)v26);
      *v25 = v26;
    }
    v53 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 288))(v60);
    v29 = v28;
    v30 = *v28;
    v31 = swift_isUniquelyReferenced_nonNull_native();
    *v29 = v30;
    if ((v31 & 1) == 0)
    {
      v30 = sub_24A148928((uint64_t)v30);
      *v29 = v30;
    }
    v66.realp = (float *)(v26 + 32);
    v66.imagp = (float *)(v30 + 32);
    result = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 200))();
    if (!result)
    {
      __break(1u);
      return result;
    }
    v52 = v16;
    sub_24A215534();
    swift_release();
    v51 = v66;
    v33 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 312))(v65);
    v35 = v34;
    v36 = *v34;
    v37 = *((_QWORD *)*v34 + 2);
    v38 = swift_isUniquelyReferenced_nonNull_native();
    *v35 = v36;
    if ((v38 & 1) == 0)
    {
      v36 = sub_24A148928((uint64_t)v36);
      *v35 = v36;
    }
    __A = v51;
    vDSP_zvabs(&__A, 1, (float *)v36 + 8, 1, v37);
    *v35 = v36;
    v33(v65, 0);
    *v29 = v30;
    v53(v60, 0);
    *v25 = v26;
    v54(v61, 0);
    *v55 = v22;
    v56(v62, 0);
    *v57 = v52;
    v39 = v58(v63, 0);
    v40 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 296);
    v41 = ((uint64_t (*)(uint64_t))v40)(v39);
    v42 = v40();
    v16 = (char *)v59();
    v6 = v41 + 32;
    v4 = (uint64_t (*)(void))(v42 + 32);
    v15 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v2 + 360))(v65);
    v44 = v43;
    v45 = *v43;
    v46 = swift_isUniquelyReferenced_nonNull_native();
    *v44 = v45;
    if ((v46 & 1) == 0)
      v45 = sub_24A147E34(0, *((_QWORD *)v45 + 2), 0, v45);
    *v44 = v45;
    swift_bridgeObjectRetain();
    vDSP_vmul((const float *)(v41 + 32), 1, (const float *)(v42 + 32), 1, (float *)v45 + 8, 1, (vDSP_Length)v16);
    ((void (*)(_QWORD *, _QWORD))v15)(v65, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = swift_bridgeObjectRelease();
    v13 = v2;
    a1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v47);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      break;
    swift_bridgeObjectRelease();
    v2 = (char *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_23;
LABEL_27:
    __break(1u);
LABEL_28:
    v16 = sub_24A148928((uint64_t)v16);
    *(_QWORD *)v15 = v16;
    if (*((_QWORD *)v16 + 2))
      goto LABEL_5;
LABEL_29:
    __break(1u);
LABEL_30:
    v16 = sub_24A148928((uint64_t)v16);
    *v13 = v16;
  }
  v65[0] = MEMORY[0x24BEE4AF8];
  v13 = v65;
  sub_24A148BB8(0, v12, 0);
  v15 = 0;
  v2 = (char *)v65[0];
  v6 = *(_QWORD *)(v65[0] + 16);
  do
  {
    v48 = *(float *)(a1 + 4 * v15 + 32);
    v65[0] = v2;
    v49 = *((_QWORD *)v2 + 3);
    v16 = (char *)(v6 + 1);
    if (v6 >= v49 >> 1)
    {
      v13 = v65;
      sub_24A148BB8(v49 > 1, v6 + 1, 1);
      v2 = (char *)v65[0];
    }
    ++v15;
    *((_QWORD *)v2 + 2) = v16;
    *(float *)&v2[4 * v6++ + 32] = v48 * 0.25;
  }
  while (v12 != v15);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)v2 + 2))
    goto LABEL_27;
LABEL_23:
  v50 = *((float *)v2 + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24A148928((uint64_t)v2);
  *((float *)v2 + 8) = v50 * 0.5;
  return (uint64_t)v2;
}

uint64_t sub_24A171E38()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A171E84()
{
  sub_24A171E38();
  return swift_deallocClassInstance();
}

float sub_24A171EA4()
{
  return 16000.0;
}

uint64_t sub_24A171EB0()
{
  return 80;
}

float sub_24A171EB8()
{
  return 0.97;
}

float sub_24A171EC8()
{
  return 64.0;
}

float sub_24A171ED4()
{
  return 8000.0;
}

id VATinyASRFeatureExtract.init()()
{
  return sub_24A1734E4(type metadata accessor for VATinyASRFeatureExtract);
}

id VATinyASRFeatureExtract.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for VATinyASRFeatureExtract);
}

uint64_t sub_24A171F04()
{
  return 160;
}

uint64_t sub_24A171F0C()
{
  return 400;
}

uint64_t sub_24A171F14()
{
  return sub_24A151B30();
}

uint64_t sub_24A171F20(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract_windowAppliedFrame);
}

uint64_t (*sub_24A171F2C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A171F70()
{
  return sub_24A151B30();
}

uint64_t sub_24A171F7C(uint64_t a1)
{
  return sub_24A151B80(a1, &OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract_frameFeatureVec);
}

uint64_t (*sub_24A171F88())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_24A171FCC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  float v3;
  float v4;

  v1 = (char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___nfft;
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___nfft + 8) == 1)
  {
    v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
    v3 = log2f((float)v2);
    v4 = exp2f(ceilf(v3));
    if ((~LODWORD(v4) & 0x7F800000) != 0)
    {
      if (v4 > -9.2234e18)
      {
        if (v4 < 9.2234e18)
        {
          *(_QWORD *)v1 = (uint64_t)v4;
          v1[8] = 0;
          return;
        }
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_9:
    __break(1u);
  }
}

uint64_t sub_24A172078(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___nfft;
  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

_QWORD *(*sub_24A172090(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  sub_24A171FCC();
  *a1 = v3;
  return sub_24A1720C4;
}

_QWORD *sub_24A1720C4(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1] + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___nfft;
  *(_QWORD *)v1 = *result;
  *(_BYTE *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_24A1720E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator;
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator))
  {
    v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator);
  }
  else
  {
    v3 = v0;
    v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
    v6 = (*(uint64_t (**)(void))((*v4 & *v0) + 0x88))();
    type metadata accessor for VAFFTCalculator();
    v2 = swift_allocObject();
    sub_24A171564(v5, v6);
    *(_QWORD *)((char *)v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_24A1721A0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator) = a1;
  return swift_release();
}

uint64_t (*sub_24A1721B8(uint64_t *a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A1720E0();
  return sub_24A1721EC;
}

uint64_t sub_24A1721EC(uint64_t *a1, uint64_t a2)
{
  return sub_24A1729E8(a1, a2, &OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4EF8]);
}

void sub_24A172200()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  float v3;
  float v4;
  float v5;
  float v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  char isUniquelyReferenced_nonNull_native;
  char *v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  char *v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t (*v62)(void);
  unint64_t v63;

  v1 = OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fbankTFlattened;
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fbankTFlattened))
  {
LABEL_69:
    swift_bridgeObjectRetain();
    return;
  }
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
  v4 = logf((float)(v3 / 700.0) + 1.0);
  v5 = (*(float (**)(void))((*v2 & *v0) + 0xB0))();
  v6 = logf((float)(v5 / 700.0) + 1.0);
  v7 = *(uint64_t (**)(void))((*v2 & *v0) + 0x98);
  v8 = v7();
  v62 = *(uint64_t (**)(void))((*v2 & *v0) + 0xF0);
  v9 = v62();
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 1;
  if (v9 < -3)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  v11 = v9;
  v57 = v1;
  v12 = v10 >> 1;
  v13 = (v10 >> 1) + 1;
  if (v9 < -1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    if (v10 >> 1 == -1)
      goto LABEL_12;
  }
  else
  {
    v14 = sub_24A215EF4();
    *(_QWORD *)(v14 + 16) = v13;
    if (!v13)
      goto LABEL_12;
  }
  *(_DWORD *)(v14 + 32) = 0;
  if ((unint64_t)(v11 + 1) >= 3)
    bzero((void *)(v14 + 36), 4 * v12);
LABEL_12:
  v15 = v7();
  v16 = (_QWORD *)sub_24A1421D4(v14, v15);
  v17 = (*(float (**)(void))((*v2 & *v0) + 0x90))();
  v18 = v62();
  v19 = v7();
  if ((v19 & 0x8000000000000000) == 0)
  {
    v61 = v0;
    if (!v19)
      goto LABEL_50;
    v20 = 0;
    v58 = (float)((float)((float)(v6 / 2.3026) * 2595.0) - (float)((float)(v4 / 2.3026) * 2595.0))
        / (float)((float)v8 + 1.0);
    v59 = (float)(v4 / 2.3026) * 2595.0;
    v21 = v17 / (float)v18;
    v60 = v19;
    while (1)
    {
      if (v20 == 0x7FFFFFFFFFFFFFFELL)
        goto LABEL_77;
      v22 = v62();
      if (v22 >= 0)
        v23 = v22;
      else
        v23 = v22 + 1;
      if (v22 < -3)
      {
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v63 = v20 + 1;
      if ((unint64_t)(v22 + 3) >= 2)
        break;
LABEL_15:
      ++v20;
      if (v63 == v60)
        goto LABEL_50;
    }
    v24 = 0;
    v25 = v59 + (float)(v58 * (float)(uint64_t)v20);
    v26 = v58 * (float)(uint64_t)(v20 + 1);
    v27 = v59 + v26;
    v28 = v58 * (float)(uint64_t)(v20 + 2);
    v29 = v59 + v28;
    v30 = (float)(v59 + v26) - v25;
    v31 = (float)(v59 + v28) - (float)(v59 + v26);
    v32 = (v23 >> 1) + 1;
    while (2)
    {
      v34 = (float)(logf((float)((float)(v21 * (float)(uint64_t)v24) / 700.0) + 1.0) / 2.3026) * 2595.0;
      if (v25 >= v34 || v34 >= v29)
        goto LABEL_25;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (v34 > v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v16 = sub_24A14893C(v16);
        if (v20 >= v16[2])
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
        v37 = (char *)v16[v20 + 4];
        v38 = swift_isUniquelyReferenced_nonNull_native();
        v16[v20 + 4] = v37;
        if ((v38 & 1) != 0)
        {
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_74;
        }
        else
        {
          v37 = sub_24A148928((uint64_t)v37);
          v16[v20 + 4] = v37;
          if ((v24 & 0x8000000000000000) != 0)
            goto LABEL_74;
        }
        if (v24 >= *((_QWORD *)v37 + 2))
          goto LABEL_72;
        v33 = (float)(v29 - v34) / v31;
LABEL_24:
        *(float *)&v37[4 * v24 + 32] = v33;
LABEL_25:
        if (v32 == ++v24)
          goto LABEL_15;
        continue;
      }
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v16 = sub_24A14893C(v16);
    if (v20 >= v16[2])
      goto LABEL_71;
    v37 = (char *)v16[v20 + 4];
    v39 = swift_isUniquelyReferenced_nonNull_native();
    v16[v20 + 4] = v37;
    if ((v39 & 1) != 0)
    {
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_49;
      goto LABEL_44;
    }
    v37 = sub_24A148928((uint64_t)v37);
    v16[v20 + 4] = v37;
    if ((v24 & 0x8000000000000000) == 0)
    {
LABEL_44:
      if (v24 >= *((_QWORD *)v37 + 2))
        goto LABEL_73;
      v33 = (float)(v34 - v25) / v30;
      goto LABEL_24;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    v40 = sub_24A135F88(&qword_25790BA70);
    v41 = sub_24A16BCE4(&qword_25790BA78, &qword_25790BA70, MEMORY[0x24BEE12E0]);
    v42 = sub_24A16BCE4(&qword_25790BA80, &qword_25790A458, MEMORY[0x24BEE12D8]);
    v43 = sub_24A1B7818(v40, v41, v42);
    v44 = *(_QWORD *)(v43 + 16);
    if (v44)
    {
      v45 = v43 + 32;
      v46 = (char *)MEMORY[0x24BEE4AF8];
      while (1)
      {
        v47 = *(_QWORD *)v45;
        v48 = *(_QWORD *)(*(_QWORD *)v45 + 16);
        v49 = *((_QWORD *)v46 + 2);
        v50 = v49 + v48;
        if (__OFADD__(v49, v48))
          goto LABEL_76;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if ((_DWORD)v51 && v50 <= *((_QWORD *)v46 + 3) >> 1)
        {
          if (!*(_QWORD *)(v47 + 16))
            goto LABEL_52;
        }
        else
        {
          if (v49 <= v50)
            v52 = v49 + v48;
          else
            v52 = v49;
          v46 = sub_24A147E34(v51, v52, 1, v46);
          if (!*(_QWORD *)(v47 + 16))
          {
LABEL_52:
            if (v48)
              goto LABEL_75;
            goto LABEL_53;
          }
        }
        v53 = *((_QWORD *)v46 + 2);
        if ((*((_QWORD *)v46 + 3) >> 1) - v53 < v48)
          goto LABEL_79;
        memcpy(&v46[4 * v53 + 32], (const void *)(v47 + 32), 4 * v48);
        if (v48)
        {
          v54 = *((_QWORD *)v46 + 2);
          v55 = __OFADD__(v54, v48);
          v56 = v54 + v48;
          if (v55)
            goto LABEL_80;
          *((_QWORD *)v46 + 2) = v56;
        }
LABEL_53:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 += 8;
        if (!--v44)
          goto LABEL_68;
      }
    }
    v46 = (char *)MEMORY[0x24BEE4AF8];
LABEL_68:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)((char *)v61 + v57) = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_69;
  }
LABEL_82:
  __break(1u);
}

uint64_t sub_24A1727B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fbankTFlattened) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1727C8(_QWORD *a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  sub_24A172200();
  *a1 = v3;
  return sub_24A1727FC;
}

uint64_t sub_24A1727FC(uint64_t *a1, uint64_t a2)
{
  return sub_24A1729E8(a1, a2, &OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fbankTFlattened, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_24A172810()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow;
  if (*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow))
  {
    v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow);
LABEL_12:
    swift_bridgeObjectRetain();
    return v2;
  }
  v3 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88);
  result = v3();
  if ((result & 0x8000000000000000) == 0)
  {
    v5 = result;
    v8 = v1;
    if (result)
    {
      v2 = sub_24A215EF4();
      *(_QWORD *)(v2 + 16) = v5;
      bzero((void *)(v2 + 32), 4 * v5);
      result = v3();
      if ((result & 0x8000000000000000) == 0)
      {
LABEL_6:
        v6 = result;
        if (!result)
        {
LABEL_11:
          *(_QWORD *)((char *)v0 + v8) = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        v7 = 0;
        while (1)
        {
          result = v3();
          if (__OFSUB__(result, 1))
            goto LABEL_15;
          if ((unint64_t)v7 >= *(_QWORD *)(v2 + 16))
            goto LABEL_16;
          *(float *)(v2 + 32 + 4 * v7) = (float)(cosf((float)((float)((float)v7 + (float)v7) * 3.1416)/ (float)(result - 1))* -0.46)+ 0.54;
          if (v6 == ++v7)
            goto LABEL_11;
        }
      }
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      result = v3();
      if ((result & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A172988(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24A1729A0(uint64_t *a1))(uint64_t *a1, uint64_t a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_24A172810();
  return sub_24A1729D4;
}

uint64_t sub_24A1729D4(uint64_t *a1, uint64_t a2)
{
  return sub_24A1729E8(a1, a2, &OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow, (uint64_t (*)(uint64_t))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_24A1729E8(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(v4 + *a3);
  *(_QWORD *)(v4 + *a3) = v5;
  return a4(v6);
}

char *sub_24A1729FC(uint64_t a1)
{
  char *v1;
  vDSP_Length v2;
  const float *v3;
  float v5;
  float __C;
  uint64_t v7;

  v1 = (char *)a1;
  v7 = *MEMORY[0x24BDAC8D0];
  __C = 0.0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (const float *)(a1 + 32);
  vDSP_meanv((const float *)(a1 + 32), 1, &__C, v2);
  v5 = 0.0 - __C;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = sub_24A147E34(0, *((_QWORD *)v1 + 2), 0, v1);
  vDSP_vsadd(v3, 1, &v5, (float *)v1 + 8, 1, v2);
  return v1;
}

float sub_24A172ACC(float a1)
{
  if (a1 <= 1.2e-38)
    a1 = 1.2e-38;
  return logf(a1);
}

uint64_t sub_24A172AE4(uint64_t *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  float (*v6)(void);
  BOOL v7;
  vDSP_Length v8;
  char isUniquelyReferenced_nonNull_native;
  char *v10;
  uint64_t v11;
  uint64_t result;
  float v13[2];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 16);
  v13[0] = 1.0;
  v6 = *(float (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v1) + 0xA0);
  v13[1] = -v6();
  v7 = v5 != 0;
  v8 = v5 - 1;
  if (!v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = (char *)v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_24A147E34(0, *(_QWORD *)(v4 + 16), 0, (char *)v4);
  *a1 = (uint64_t)v10;
  vDSP_deq22((const float *)(v4 + 32), 1, v13, (float *)v10 + 8, 1, v8);
  v11 = swift_bridgeObjectRelease();
  v2 = ((float (*)(uint64_t))v6)(v11);
  v1 = *a1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_8:
    result = (uint64_t)sub_24A148928(v1);
    v1 = result;
    if (!*(_QWORD *)(result + 16))
      goto LABEL_9;
LABEL_7:
    *(float *)(v1 + 32) = (float)(1.0 - v2) * *(float *)(v1 + 32);
    *a1 = v1;
    return result;
  }
  if (*(_QWORD *)(v1 + 16))
    goto LABEL_7;
LABEL_9:
  __break(1u);
  return result;
}

void sub_24A172C18(char **a1)
{
  _QWORD *v1;
  float v2;
  float v3;
  char *v4;
  uint64_t (*v6)(void);
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  float v11;
  unint64_t v12;

  v4 = *a1;
  if (*((_QWORD *)*a1 + 2) >= 2uLL)
  {
    v6 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0xA0);
    if (((float (*)(void))v6)() != 1.0)
    {
      v8 = *((_QWORD *)v4 + 2);
      if (v8 < 2)
        goto LABEL_10;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_21;
      while (v8 - 1 < *((_QWORD *)v4 + 2))
      {
        v10 = &v4[4 * v8];
        v2 = *((float *)v10 + 7);
        v7 = v6();
        v12 = *((_QWORD *)v4 + 2);
        if (v8 - 2 >= v12)
          goto LABEL_16;
        v9 = v8 - 1;
        if (v8 - 1 >= v12)
          goto LABEL_17;
        *((float *)v10 + 7) = v2 - (float)(v11 * *(float *)&v4[4 * v8-- + 24]);
        if (v9 <= 1)
        {
          v8 = *((_QWORD *)v4 + 2);
LABEL_10:
          if (!v8)
            goto LABEL_18;
          v3 = *((float *)v4 + 8);
          v2 = ((float (*)(uint64_t))v6)(v7);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            if (*((_QWORD *)v4 + 2))
              goto LABEL_13;
            goto LABEL_20;
          }
LABEL_19:
          v4 = sub_24A148928((uint64_t)v4);
          if (*((_QWORD *)v4 + 2))
          {
LABEL_13:
            *((float *)v4 + 8) = v3 * (float)(1.0 - v2);
            *a1 = v4;
            return;
          }
LABEL_20:
          __break(1u);
LABEL_21:
          v4 = sub_24A148928((uint64_t)v4);
        }
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
}

uint64_t sub_24A172D70(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  _QWORD *v6;
  uint64_t (*v7)(void);
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  vDSP_Length v20;
  uint64_t (*v21)(_BYTE *);
  void (*v22)(_BYTE *, _QWORD);
  char **v23;
  char **v24;
  char *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  vDSP_Length v30;
  void (*v31)(_BYTE *, _QWORD);
  char **v32;
  char **v33;
  char *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  vDSP_Length v53;
  uint64_t (*v54)(_BYTE *);
  void (*v55)(_BYTE *, _QWORD);
  char **v56;
  char **v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  vDSP_Length v62;
  uint64_t v63;
  char **v64;
  char **v65;
  char *v66;
  char v67;
  uint64_t v68;
  vDSP_Length __P;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_BYTE *, _QWORD);
  uint64_t (*v76)(uint64_t);
  _BYTE v77[32];
  uint64_t v78;

  v3 = v1;
  v5 = *(uint64_t (**)(void))(a1 + 16);
  v6 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v7 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x138);
  v8 = *(_QWORD *)(v7() + 16);
  swift_bridgeObjectRelease();
  if (v5 != (uint64_t (*)(void))v8)
  {
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v78 = a1;
  v9 = *(uint64_t (**)(uint64_t))((*v6 & *v3) + 0xB8);
  v10 = swift_bridgeObjectRetain();
  if ((v9(v10) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v78 = (*(uint64_t (**)(uint64_t))((*v6 & *v3) + 0x150))(a1);
  }
  v11 = (*(uint64_t (**)(uint64_t *))((*v6 & *v3) + 0x168))(&v78);
  v12 = *(void (**)(void))((*v6 & *v3) + 0xC0);
  v13 = *(_QWORD *)(((uint64_t (*)(uint64_t))v12)(v11) + 16);
  v14 = swift_bridgeObjectRelease();
  v15 = *(uint64_t (**)(void))((*v6 & *v3) + 0x88);
  v16 = ((uint64_t (*)(uint64_t))v15)(v14);
  if (v13 != v16)
  {
    result = v15();
    if (result < 0)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v18 = result;
    if (result)
    {
      v19 = sub_24A215EF4();
      *(_QWORD *)(v19 + 16) = v18;
      bzero((void *)(v19 + 32), 4 * v18);
    }
    else
    {
      v19 = MEMORY[0x24BEE4AF8];
    }
    v16 = (*(uint64_t (**)(uint64_t))((*v6 & *v3) + 0xC8))(v19);
  }
  v20 = *(_QWORD *)(((uint64_t (*)(uint64_t))v12)(v16) + 16);
  swift_bridgeObjectRelease();
  v21 = *(uint64_t (**)(_BYTE *))((*v6 & *v3) + 0xD0);
  v22 = (void (*)(_BYTE *, _QWORD))v21(v77);
  v24 = v23;
  v25 = *v23;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v24 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v25 = sub_24A147E34(0, *((_QWORD *)v25 + 2), 0, v25);
  *v24 = v25;
  swift_bridgeObjectRetain();
  vDSP_vclr((float *)v25 + 8, 1, v20);
  v22(v77, 0);
  swift_bridgeObjectRelease();
  v27 = v78;
  v28 = swift_bridgeObjectRetain();
  v29 = ((uint64_t (*)(uint64_t))v7)(v28);
  v30 = *(_QWORD *)(v7() + 16);
  swift_bridgeObjectRelease();
  v31 = (void (*)(_BYTE *, _QWORD))v21(v77);
  v33 = v32;
  v34 = *v32;
  v35 = swift_isUniquelyReferenced_nonNull_native();
  *v33 = v34;
  if ((v35 & 1) == 0)
    v34 = sub_24A147E34(0, *((_QWORD *)v34 + 2), 0, v34);
  *v33 = v34;
  swift_bridgeObjectRetain();
  vDSP_vmul((const float *)(v27 + 32), 1, (const float *)(v29 + 32), 1, (float *)v34 + 8, 1, v30);
  v31(v77, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRelease();
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v37 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x108))(v36);
  v12();
  v6 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v37 + 376))();
  swift_release();
  v38 = swift_bridgeObjectRelease();
  v5 = *(uint64_t (**)(void))((*v2 & *v3) + 0xF0);
  v8 = (unint64_t)v3;
  v39 = ((uint64_t (*)(uint64_t))v5)(v38);
  if (v39 >= 0)
    v40 = v39;
  else
    v40 = v39 + 1;
  if (v39 < -3)
    goto LABEL_41;
  v41 = v40 >> 1;
  if (v6[2] <= v41)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    swift_bridgeObjectRelease();
    v44 = sub_24A14A964((uint64_t)v6, (uint64_t)(v6 + 4), 0, v8);
    goto LABEL_24;
  }
  v8 = 2 * v41 + 3;
  sub_24A2165C0();
  swift_unknownObjectRetain_n();
  v42 = swift_dynamicCastClass();
  if (!v42)
  {
    swift_bridgeObjectRelease();
    v42 = MEMORY[0x24BEE4AF8];
  }
  v43 = *(_QWORD *)(v42 + 16);
  swift_release();
  if (v43 != v8 >> 1)
    goto LABEL_43;
  v44 = swift_dynamicCastClass();
  if (!v44)
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
  }
LABEL_24:
  v45 = swift_bridgeObjectRelease();
  v46 = *(uint64_t (**)(uint64_t))((*v2 & *v3) + 0xD8);
  v47 = *(_QWORD *)(v46(v45) + 16);
  v48 = swift_bridgeObjectRelease();
  v49 = *(uint64_t (**)(void))((*v2 & *v3) + 0x98);
  v50 = ((uint64_t (*)(uint64_t))v49)(v48);
  if (v47 != v50)
  {
    result = v49();
    if (result < 0)
    {
LABEL_47:
      __break(1u);
      return result;
    }
    v51 = result;
    if (result)
    {
      v52 = sub_24A215EF4();
      *(_QWORD *)(v52 + 16) = v51;
      bzero((void *)(v52 + 32), 4 * v51);
    }
    else
    {
      v52 = MEMORY[0x24BEE4AF8];
    }
    v50 = (*(uint64_t (**)(uint64_t))((*v2 & *v3) + 0xE0))(v52);
  }
  v53 = *(_QWORD *)(v46(v50) + 16);
  swift_bridgeObjectRelease();
  v54 = *(uint64_t (**)(_BYTE *))((*v2 & *v3) + 0xE8);
  v55 = (void (*)(_BYTE *, _QWORD))v54(v77);
  v57 = v56;
  v58 = *v56;
  v59 = swift_isUniquelyReferenced_nonNull_native();
  *v57 = v58;
  if ((v59 & 1) == 0)
    v58 = sub_24A147E34(0, *((_QWORD *)v58 + 2), 0, v58);
  *v57 = v58;
  swift_bridgeObjectRetain();
  vDSP_vclr((float *)v58 + 8, 1, v53);
  v55(v77, 0);
  v60 = swift_bridgeObjectRelease();
  v61 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x120))(v60);
  result = v49();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  v62 = result;
  result = v5();
  if (result < -3)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v63 = result;
  v75 = (void (*)(_BYTE *, _QWORD))v54(v77);
  v65 = v64;
  v66 = *v64;
  v67 = swift_isUniquelyReferenced_nonNull_native();
  *v65 = v66;
  v76 = v46;
  if ((v67 & 1) == 0)
    v66 = sub_24A147E34(0, *((_QWORD *)v66 + 2), 0, v66);
  if (v63 >= 0)
    v68 = v63;
  else
    v68 = v63 + 1;
  __P = (v68 >> 1) + 1;
  *v65 = v66;
  swift_bridgeObjectRetain();
  vDSP_mmul((const float *)(v44 + 32), 1, (const float *)(v61 + 32), 1, (float *)v66 + 8, 1, 1uLL, v62, __P);
  v75(v77, 0);
  swift_release();
  swift_bridgeObjectRelease();
  v70 = swift_bridgeObjectRelease();
  v71 = v76(v70);
  v72 = v3;
  v73 = sub_24A1738B8(v71, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v74 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v72) + 0xE0))(v73);
  return v76(v74);
}

uint64_t sub_24A173410(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  if ((unsigned __int128)(a2 * (__int128)a3) >> 64 == (a2 * a3) >> 63)
  {
    v3 = result;
    if (a2 * a3 != *(_QWORD *)(result + 16))
      return MEMORY[0x24BEE4AF8];
    if ((a2 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      v6 = sub_24A1739BC(0, a2, v3, a3);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1734AC()
{
  return 64;
}

float sub_24A1734B4()
{
  return 0.0;
}

float sub_24A1734BC()
{
  return 125.0;
}

float sub_24A1734C8()
{
  return 7500.0;
}

id VAAVSFeatureExtract.init()()
{
  return sub_24A1734E4(type metadata accessor for VAAVSFeatureExtract);
}

id sub_24A1734E4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_init);
}

id sub_24A173520(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  objc_super v4;

  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id VAAVSFeatureExtract.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for VAAVSFeatureExtract);
}

uint64_t sub_24A173568()
{
  return 40;
}

id VAFeatureExtract.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VAFeatureExtract.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  objc_super v4;

  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract_windowAppliedFrame] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract_frameFeatureVec] = v1;
  v2 = &v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___nfft];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fftCalculator] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___fbankTFlattened] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC12VoiceActions16VAFeatureExtract____lazy_storage___hammingWindow] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for VAFeatureExtract();
  return objc_msgSendSuper2(&v4, sel_init);
}

id VAFeatureExtract.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for VAFeatureExtract);
}

id sub_24A1736C0(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

_QWORD *sub_24A173758(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790A450);
    v10 = (_QWORD *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4])
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
  }
  else
  {
    sub_24A135F88(&qword_25790A458);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t type metadata accessor for VATinyASRFeatureExtract()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VAFFTCalculator()
{
  return objc_opt_self();
}

uint64_t sub_24A1738B8(uint64_t a1, _QWORD *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  float *v7;
  float (*v8)(uint64_t, float);
  float v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v13 = MEMORY[0x24BEE4AF8];
    v6 = sub_24A148BB8(0, v2, 0);
    v3 = v13;
    v7 = (float *)(a1 + 32);
    v8 = *(float (**)(uint64_t, float))((*MEMORY[0x24BEE4EA0] & *a2) + 0x158);
    do
    {
      v9 = v8(v6, *v7);
      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        v6 = sub_24A148BB8(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(float *)(v13 + 4 * v11 + 32) = v9;
      ++v7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_24A1739BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v8 = a2;
  v9 = result;
  v28 = MEMORY[0x24BEE4AF8];
  result = sub_24A148BD4(0, v4 & ~(v4 >> 63), 0);
  if (v8 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    v5 = v28;
    v10 = *(_QWORD *)(a3 + 16);
    v25 = a3 + 32;
    v26 = v10;
    while (v8 != v9)
    {
      v11 = v9 * a4;
      if ((unsigned __int128)(v9 * (__int128)a4) >> 64 != (v9 * a4) >> 63)
        goto LABEL_31;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_32;
      v12 = a3;
      v13 = ++v9 * a4;
      if ((unsigned __int128)(v9 * (__int128)a4) >> 64 != (v9 * a4) >> 63)
        goto LABEL_33;
      v14 = v13 - v11;
      if (v13 < v11)
        goto LABEL_34;
      if (v10 < v11)
        goto LABEL_35;
      if (v11 < 0)
        goto LABEL_36;
      if (v10 < v13)
        goto LABEL_37;
      v27 = v5;
      v15 = a4;
      v16 = v8;
      sub_24A2165C0();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_bridgeObjectRelease();
        v17 = MEMORY[0x24BEE4AF8];
      }
      v18 = *(_QWORD *)(v17 + 16);
      swift_release();
      if (v18 == v14)
      {
        a3 = v12;
        v19 = (_QWORD *)swift_dynamicCastClass();
        v8 = v16;
        a4 = v15;
        v5 = v27;
        if (!v19)
        {
          swift_bridgeObjectRelease();
          v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v22 = v13 == v11;
        a3 = v12;
        v8 = v16;
        a4 = v15;
        v5 = v27;
        if (!v22)
        {
          if (v14 >= 1)
          {
            sub_24A135F88(&qword_257909960);
            v19 = (_QWORD *)swift_allocObject();
            v23 = j__malloc_size(v19);
            v24 = v23 - 32;
            if (v23 < 32)
              v24 = v23 - 29;
            v19[2] = v14;
            v19[3] = 2 * (v24 >> 2);
          }
          memcpy(v19 + 4, (const void *)(v25 + 4 * v11), 4 * v14);
        }
      }
      result = swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v5 + 16);
      v20 = *(_QWORD *)(v5 + 24);
      if (v21 >= v20 >> 1)
        result = sub_24A148BD4(v20 > 1, v21 + 1, 1);
      *(_QWORD *)(v5 + 16) = v21 + 1;
      *(_QWORD *)(v5 + 8 * v21 + 32) = v19;
      v10 = v26;
      if (v8 == v9)
        return v5;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for VAAVSFeatureExtract()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VAFeatureExtract()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAFeatureExtract()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAFeatureExtract.computeLog(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VAFeatureExtract.preEmphasizeNew(currFrame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VAFeatureExtract.preEmphasize(currFrame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of VAFeatureExtract.forward(currFrame:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x170))();
}

uint64_t sub_24A173D04(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t sub_24A173D48(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

uint64_t sub_24A173D8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(float *)(a5 + 16) = a6;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

float sub_24A173D9C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 32);
}

uint64_t sub_24A173DCC(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_24A173E08()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_24A173E38(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return result;
}

uint64_t sub_24A173E74()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_24A173EA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_24A173EE0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A173F1C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 72);
}

uint64_t sub_24A173F4C(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 72) = a1;
  return result;
}

uint64_t sub_24A173F88()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 80);
}

uint64_t sub_24A173FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t sub_24A173FF4()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 88);
}

uint64_t sub_24A174024(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return result;
}

uint64_t sub_24A174060()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t sub_24A174090(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 96) = a1;
  return result;
}

uint64_t (*sub_24A1740CC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

__n128 AVSEndpointer.__allocating_init(config:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __n128 result;

  v2 = swift_allocObject();
  v3 = *(_DWORD *)(a1 + 16);
  *(int64x2_t *)(v2 + 56) = vdupq_n_s64(0x28uLL);
  *(_DWORD *)(v2 + 72) = 1060320051;
  *(_OWORD *)(v2 + 80) = xmmword_24A21A8C0;
  *(_BYTE *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_DWORD *)(v2 + 32) = v3;
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

uint64_t AVSEndpointer.init(config:)(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(a1 + 16);
  *(int64x2_t *)(v1 + 56) = vdupq_n_s64(0x28uLL);
  *(_DWORD *)(v1 + 72) = 1060320051;
  *(_OWORD *)(v1 + 80) = xmmword_24A21A8C0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)a1;
  *(_DWORD *)(v1 + 32) = v2;
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(a1 + 24);
  return v1;
}

uint64_t sub_24A1741BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t (*v38)(void);

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 408))() & 1) != 0
    || v4 < (*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))())
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v1 + 416))(0);
    return 0;
  }
  v5 = (*(float (**)(void))(*(_QWORD *)v1 + 216))();
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 240))();
  v7 = sub_24A174CA8();
  v8 = sub_24A174CB0();
  v9 = sub_24A174CC0();
  v10 = sub_24A174CC8(a1, v6, v7, v9, v5, v8);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v37 = v10;
  v13 = v12 - 1;
  v14 = v11 + 32;
  v15 = *(_QWORD *)(v11 + 32 + 8 * (v12 - 1));
  v38 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 168);
  result = v38();
  v17 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  result = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 264))();
  if (__OFSUB__(v17, result))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if (v15 < v17 - result)
    goto LABEL_10;
  result = v38();
  if (__OFSUB__(v4, result))
  {
LABEL_44:
    __break(1u);
    return result;
  }
  if (v4 - result < *(_QWORD *)(v14 + 8 * v13))
    goto LABEL_10;
  v36 = a1;
  v18 = 0;
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v20 = v18 + 1;
    if (v13 == v18)
    {
      v21 = *(_QWORD *)(v14 + 8 * v13);
      v22 = v4 - v21;
      if (__OFSUB__(v4, v21))
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      if (v20 >= v37[2])
        goto LABEL_40;
      v23 = v37[v18 + 5];
      v24 = *(_QWORD *)(v14 + 8 * v18);
      v22 = v23 - v24;
      if (__OFSUB__(v23, v24))
        goto LABEL_41;
    }
    result = v38();
    if (result < v22)
    {
      v25 = *(_QWORD *)(v14 + 8 * v18);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_24A15037C(0, v19[2] + 1, 1, v19);
        v19 = (_QWORD *)result;
      }
      v27 = v19[2];
      v26 = v19[3];
      if (v27 >= v26 >> 1)
      {
        result = (uint64_t)sub_24A15037C((_QWORD *)(v26 > 1), v27 + 1, 1, v19);
        v19 = (_QWORD *)result;
      }
      v19[2] = v27 + 1;
      v19[v27 + 4] = v25;
    }
    v18 = v20;
  }
  while (v12 != v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v28 = sub_24A174698(v36, v2);
  swift_release();
  v29 = *(_QWORD *)(v28 + 16);
  if (v29)
  {
    v30 = (_BYTE *)(v28 + 32);
    v31 = MEMORY[0x24BEE4AF8];
    do
    {
      if (*v30 == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_24A174594(0, *(_QWORD *)(v31 + 16) + 1, 1);
        v33 = *(_QWORD *)(v31 + 16);
        v32 = *(_QWORD *)(v31 + 24);
        if (v33 >= v32 >> 1)
          sub_24A174594((char *)(v32 > 1), v33 + 1, 1);
        *(_QWORD *)(v31 + 16) = v33 + 1;
        *(_BYTE *)(v31 + v33 + 32) = 1;
      }
      ++v30;
      --v29;
    }
    while (v29);
  }
  else
  {
    v31 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)(v31 + 16);
  v35 = swift_release();
  return v19[2] && v34 >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 360))(v35);
}

uint64_t AVSEndpointer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AVSEndpointer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

char *sub_24A174594(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_24A1745B0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_24A1745B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790BC88);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_24A174698(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  char *v6;
  float *v7;
  float (*v8)(char *);
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    v6 = sub_24A174594(0, v2, 0);
    v3 = v14;
    v7 = (float *)(a1 + 32);
    v8 = *(float (**)(char *))(*(_QWORD *)a2 + 336);
    do
    {
      v9 = *v7;
      v10 = v8(v6);
      v12 = *(_QWORD *)(v14 + 16);
      v11 = *(_QWORD *)(v14 + 24);
      if (v12 >= v11 >> 1)
        v6 = sub_24A174594((char *)(v11 > 1), v12 + 1, 1);
      *(_QWORD *)(v14 + 16) = v12 + 1;
      *(_BYTE *)(v14 + v12 + 32) = v10 <= v9;
      ++v7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

__n128 initializeWithCopy for AVSEndpointerConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AVSEndpointerConfig(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AVSEndpointerConfig(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AVSEndpointerConfig()
{
  return &type metadata for AVSEndpointerConfig;
}

uint64_t type metadata accessor for AVSEndpointer()
{
  return objc_opt_self();
}

uint64_t method lookup function for AVSEndpointer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AVSEndpointer.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 432))();
}

uint64_t OS_os_log.init(category:)()
{
  return sub_24A2161F4();
}

uint64_t OS_os_log.default(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A174C58(a1, a2, a3, a4, MEMORY[0x24BEE7928]);
}

uint64_t sub_24A174868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  switch(*(_QWORD *)(a5 + 16))
  {
    case 1:
      sub_24A135F88(qword_25790AEF0);
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_24A218650;
      v7 = v6 + 32;
      v8 = a5 + 32;
      goto LABEL_11;
    case 2:
      sub_24A135F88(qword_25790AEF0);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_24A218660;
      sub_24A152310(a5 + 32, v10 + 32);
      v7 = v10 + 72;
      v8 = a5 + 72;
      goto LABEL_11;
    case 3:
      sub_24A135F88(qword_25790AEF0);
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_24A218680;
      sub_24A152310(a5 + 32, v11 + 32);
      sub_24A152310(a5 + 72, v11 + 72);
      v7 = v11 + 112;
      v8 = a5 + 112;
      goto LABEL_11;
    case 4:
      sub_24A135F88(qword_25790AEF0);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_24A218630;
      sub_24A152310(a5 + 32, v12 + 32);
      sub_24A152310(a5 + 72, v12 + 72);
      sub_24A152310(a5 + 112, v12 + 112);
      v7 = v12 + 152;
      v8 = a5 + 152;
      goto LABEL_11;
    case 5:
      sub_24A135F88(qword_25790AEF0);
      v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_24A218670;
      sub_24A152310(a5 + 32, v13 + 32);
      sub_24A152310(a5 + 72, v13 + 72);
      sub_24A152310(a5 + 112, v13 + 112);
      sub_24A152310(a5 + 152, v13 + 152);
      v7 = v13 + 192;
      v8 = a5 + 192;
      goto LABEL_11;
    case 6:
      sub_24A135F88(qword_25790AEF0);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_24A218640;
      sub_24A152310(a5 + 32, v14 + 32);
      sub_24A152310(a5 + 72, v14 + 72);
      sub_24A152310(a5 + 112, v14 + 112);
      sub_24A152310(a5 + 152, v14 + 152);
      sub_24A152310(a5 + 192, v14 + 192);
      v7 = v14 + 232;
      v8 = a5 + 232;
      goto LABEL_11;
    case 7:
      sub_24A135F88(qword_25790AEF0);
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_24A21A960;
      sub_24A152310(a5 + 32, v15 + 32);
      sub_24A152310(a5 + 72, v15 + 72);
      sub_24A152310(a5 + 112, v15 + 112);
      sub_24A152310(a5 + 152, v15 + 152);
      sub_24A152310(a5 + 192, v15 + 192);
      sub_24A152310(a5 + 232, v15 + 232);
      v7 = v15 + 272;
      v8 = a5 + 272;
      goto LABEL_11;
    case 8:
      sub_24A135F88(qword_25790AEF0);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_24A21A970;
      sub_24A152310(a5 + 32, v16 + 32);
      sub_24A152310(a5 + 72, v16 + 72);
      sub_24A152310(a5 + 112, v16 + 112);
      sub_24A152310(a5 + 152, v16 + 152);
      sub_24A152310(a5 + 192, v16 + 192);
      sub_24A152310(a5 + 232, v16 + 232);
      sub_24A152310(a5 + 272, v16 + 272);
      v7 = v16 + 312;
      v8 = a5 + 312;
LABEL_11:
      sub_24A152310(v8, v7);
      sub_24A2159D8();
      result = swift_bridgeObjectRelease();
      break;
    default:
      result = sub_24A2159D8();
      break;
  }
  return result;
}

uint64_t OS_os_log.info(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A174C58(a1, a2, a3, a4, MEMORY[0x24BEE78F0]);
}

uint64_t OS_os_log.debug(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A174C58(a1, a2, a3, a4, MEMORY[0x24BEE7908]);
}

uint64_t OS_os_log.error(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A174C58(a1, a2, a3, a4, MEMORY[0x24BEE7910]);
}

uint64_t OS_os_log.fault(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A174C58(a1, a2, a3, a4, MEMORY[0x24BEE7920]);
}

uint64_t sub_24A174C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v9;

  v9 = a5();
  return sub_24A174868(a1, a2, a3, v9, a4);
}

uint64_t sub_24A174CA8()
{
  return 5;
}

float sub_24A174CB0()
{
  return 0.6;
}

uint64_t sub_24A174CC0()
{
  return 15;
}

_QWORD *sub_24A174CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  int64_t v10;
  _QWORD *v12;
  float *v13;
  unint64_t v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v56[8];

  v56[6] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a1 + 16);
  v54 = v10;
  if (v10)
  {
    v56[0] = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_24A174594(0, v10, 0);
    v12 = v56[0];
    v13 = (float *)(a1 + 32);
    v14 = v56[0][2];
    do
    {
      v15 = *v13;
      v56[0] = v12;
      v16 = v12[3];
      v17 = v14 + 1;
      if (v14 >= v16 >> 1)
      {
        sub_24A174594((char *)(v16 > 1), v14 + 1, 1);
        v12 = v56[0];
      }
      v12[2] = v17;
      *((_BYTE *)v12 + v14 + 32) = v15 >= a5;
      ++v13;
      ++v14;
      --v10;
    }
    while (v10);
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v17 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  }
  v18 = (_QWORD *)sub_24A17624C(0, v17, (uint64_t)v12);
  swift_bridgeObjectRelease();
  v56[0] = v18;
  sub_24A17587C(v56);
  v19 = v56[0];
  v20 = (_QWORD *)v56[0][2];
  if (v20)
  {
    v21 = v56[0] + 4;
    v22 = v56[0][4];
    sub_24A135F88(&qword_25790A4A8);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24A218650;
    *(_QWORD *)(inited + 32) = v22;
    if (v20 == (_QWORD *)1)
    {
      v24 = 0;
      v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v25 = 1;
      v26 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (a2 > 1)
        goto LABEL_59;
    }
    else
    {
      v49 = a4;
      v50 = a2;
      v53 = a1 + 32;
      v27 = 1;
      v51 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v52 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v18 = v19;
LABEL_14:
      v24 = 0;
      if (v27 <= (uint64_t)v20)
        v28 = v20;
      else
        v28 = (_QWORD *)v27;
      v29 = v27;
      v26 = (_QWORD *)inited;
      do
      {
        if (v28 == (_QWORD *)v29)
        {
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        if (v29 >= v19[2])
          goto LABEL_62;
        v30 = v22 + a3;
        if (__OFADD__(v22, a3))
          goto LABEL_63;
        v22 = v21[v29];
        if (v30 < (uint64_t)v22)
        {
          v34 = v26[2];
          if (v34 < v50 || v24 < v49)
            goto LABEL_45;
          if (!v34)
          {
            __break(1u);
LABEL_71:
            __break(1u);
          }
          v35 = v26[4];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v52 = sub_24A15037C(0, v52[2] + 1, 1, v52);
          v37 = v52[2];
          v36 = v52[3];
          if (v37 >= v36 >> 1)
            v52 = sub_24A15037C((_QWORD *)(v36 > 1), v37 + 1, 1, v52);
          v52[2] = v37 + 1;
          v52[v37 + 4] = v35;
          v38 = v26[2];
          if (!v38)
            goto LABEL_71;
          v39 = v26[v38 + 3];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v51 = sub_24A15037C(0, v51[2] + 1, 1, v51);
          v41 = v51[2];
          v40 = v51[3];
          if (v41 >= v40 >> 1)
            v51 = sub_24A15037C((_QWORD *)(v40 > 1), v41 + 1, 1, v51);
          v51[2] = v41 + 1;
          v51[v41 + 4] = v39;
          v19 = v18;
LABEL_45:
          v27 = v29 + 1;
          v42 = swift_allocObject();
          *(_OWORD *)(v42 + 16) = xmmword_24A218650;
          *(_QWORD *)(v42 + 32) = v22;
          swift_bridgeObjectRelease();
          inited = v42;
          if ((_QWORD *)((char *)v20 - 1) == (_QWORD *)v29)
          {
            v24 = 0;
            v25 = *(_QWORD *)(v42 + 16);
            goto LABEL_48;
          }
          goto LABEL_14;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = sub_24A15037C(0, v26[2] + 1, 1, v26);
        v32 = v26[2];
        v31 = v26[3];
        v25 = v32 + 1;
        if (v32 >= v31 >> 1)
          v26 = sub_24A15037C((_QWORD *)(v31 > 1), v32 + 1, 1, v26);
        v26[2] = v25;
        v26[v32 + 4] = v22;
        if (v22 >= v54)
          goto LABEL_64;
        if (*(float *)(v53 + 4 * v22) >= a6 && __OFADD__(v24++, 1))
          goto LABEL_65;
        v19 = v18;
        ++v29;
      }
      while (v20 != (_QWORD *)v29);
      inited = (uint64_t)v26;
LABEL_48:
      a4 = v49;
      v20 = v51;
      v26 = v52;
      if (v25 < v50)
        goto LABEL_59;
    }
    if (v24 < a4)
    {
LABEL_59:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v26;
    }
    if (v25)
    {
      v24 = inited;
      v21 = (_QWORD *)(inited + 32);
      v18 = *(_QWORD **)(inited + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        goto LABEL_52;
    }
    else
    {
LABEL_66:
      __break(1u);
    }
    v26 = sub_24A15037C(0, v26[2] + 1, 1, v26);
LABEL_52:
    v44 = v26[2];
    v43 = v26[3];
    if (v44 >= v43 >> 1)
      v26 = sub_24A15037C((_QWORD *)(v43 > 1), v44 + 1, 1, v26);
    v26[2] = v44 + 1;
    v26[v44 + 4] = v18;
    v45 = *(_QWORD *)(v24 + 16);
    if (v45)
    {
      v21 = (_QWORD *)v21[v45 - 1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_56:
        v47 = v20[2];
        v46 = v20[3];
        if (v47 >= v46 >> 1)
          v20 = sub_24A15037C((_QWORD *)(v46 > 1), v47 + 1, 1, v20);
        v20[2] = v47 + 1;
        v20[v47 + 4] = v21;
        goto LABEL_59;
      }
    }
    else
    {
      __break(1u);
    }
    v20 = sub_24A15037C(0, v20[2] + 1, 1, v20);
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x24BEE4AF8];
}

void sub_24A17526C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  _QWORD *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (float)v2 / (float)a2;
  if (v3 != 0.0)
  {
    sub_24A14A560(0.0, (float)v2, v3);
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
    {
LABEL_14:
      swift_release();
      return;
    }
    v7 = (float *)(v5 + 32);
    v8 = a1 + 32;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v10 = *v7;
      if ((~*(_DWORD *)v7 & 0x7F800000) == 0)
        break;
      if (v10 <= -9.2234e18)
        goto LABEL_16;
      if (v10 >= 9.2234e18)
        goto LABEL_17;
      v11 = (uint64_t)v10;
      if ((uint64_t)v10 < 0)
        goto LABEL_18;
      if (v2 <= v11)
        goto LABEL_19;
      v12 = *(_QWORD *)(v8 + 8 * v11);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_24A173758(0, v9[2] + 1, 1, v9);
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        v9 = sub_24A173758((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
      v9[2] = v14 + 1;
      v9[v14 + 4] = v12;
      ++v7;
      if (!--v6)
        goto LABEL_14;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_24A1753E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;

  v4 = (_QWORD *)result;
  v5 = *(_QWORD *)(result + 16);
  v6 = v5 - 1;
  if (v5 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (uint64_t)v4;
  }
  if (v5)
  {
    if (v5 - 2 < *(_QWORD *)(a2 + 16))
    {
      result = (uint64_t)sub_24A15037C(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v7 = (_QWORD *)result;
      v8 = (uint64_t *)(a2 + 32);
      v9 = v4 + 5;
      do
      {
        v11 = *v9++;
        v10 = v11;
        v12 = *v8++;
        v13 = v10 - v12;
        if (__OFSUB__(v10, v12))
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
        v15 = v7[2];
        v14 = v7[3];
        v16 = v15 + 1;
        if (v15 >= v14 >> 1)
        {
          result = (uint64_t)sub_24A15037C((_QWORD *)(v14 > 1), v15 + 1, 1, v7);
          v7 = (_QWORD *)result;
        }
        v7[2] = v16;
        v7[v15 + 4] = v13;
        --v6;
      }
      while (v6);
      v36 = a2;
      v37 = v5;
      v17 = 0;
      v18 = 0;
      v34 = a2 + 32;
      v35 = v4 + 4;
      v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        v20 = v18 + 1;
        if (v7[v18 + 4] > a3)
        {
          if (v17 >= v37)
            goto LABEL_39;
          v21 = v35[v17];
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A15037C(0, v4[2] + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v23 = v4[2];
          v22 = v4[3];
          if (v23 >= v22 >> 1)
          {
            result = (uint64_t)sub_24A15037C((_QWORD *)(v22 > 1), v23 + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v4[2] = v23 + 1;
          v4[v23 + 4] = v21;
          if (v18 >= *(_QWORD *)(v36 + 16))
            goto LABEL_40;
          v24 = *(_QWORD *)(v34 + 8 * v18);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A15037C(0, v19[2] + 1, 1, v19);
            v19 = (_QWORD *)result;
          }
          v26 = v19[2];
          v25 = v19[3];
          if (v26 >= v25 >> 1)
          {
            result = (uint64_t)sub_24A15037C((_QWORD *)(v25 > 1), v26 + 1, 1, v19);
            v19 = (_QWORD *)result;
          }
          v19[2] = v26 + 1;
          v19[v26 + 4] = v24;
          v17 = v18 + 1;
        }
        if (v15 == v18)
        {
          if (v17 >= v37)
            goto LABEL_41;
          v27 = v35[v17];
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A15037C(0, v4[2] + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v29 = v4[2];
          v28 = v4[3];
          if (v29 >= v28 >> 1)
          {
            result = (uint64_t)sub_24A15037C((_QWORD *)(v28 > 1), v29 + 1, 1, v4);
            v4 = (_QWORD *)result;
          }
          v4[2] = v29 + 1;
          v4[v29 + 4] = v27;
          v30 = *(_QWORD *)(v36 + 16);
          if (!v30)
            goto LABEL_42;
          v31 = *(_QWORD *)(v34 + 8 * v30 - 8);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A15037C(0, v19[2] + 1, 1, v19);
            v19 = (_QWORD *)result;
          }
          v33 = v19[2];
          v32 = v19[3];
          if (v33 >= v32 >> 1)
          {
            result = (uint64_t)sub_24A15037C((_QWORD *)(v32 > 1), v33 + 1, 1, v19);
            v19 = (_QWORD *)result;
          }
          v19[2] = v33 + 1;
          v19[v33 + 4] = v31;
        }
        v18 = v20;
      }
      while (v16 != v20);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  else
  {
LABEL_43:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A175798(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    if (v2 <= *(_QWORD *)(a2 + 16))
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = (uint64_t *)(result + 32);
      v7 = (uint64_t *)(a2 + 32);
      while (1)
      {
        v9 = *v6++;
        v8 = v9;
        v11 = *v7++;
        v10 = v11;
        v12 = v11 - v8;
        if (__OFSUB__(v11, v8))
          break;
        v13 = v3 < v12;
        if (v3 <= v12)
          v3 = v12;
        if (v13)
        {
          v4 = v10;
          v5 = v8;
        }
        if (!--v2)
          goto LABEL_12;
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
    v5 = 0;
LABEL_12:
    sub_24A135F88(&qword_25790A4A8);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_24A218650;
    *(_QWORD *)(v14 + 32) = v5;
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_24A218650;
    *(_QWORD *)(v15 + 32) = v4;
    return v14;
  }
  return result;
}

uint64_t sub_24A17587C(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24A176238(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = sub_24A1758E8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24A1758E8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;

  v2 = a1;
  v3 = a1[1];
  result = sub_24A216578();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v76 = 0;
      v77 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v79 = *(_QWORD *)(v77 + 8 * i);
        v80 = v76;
        do
        {
          v81 = *(_QWORD *)(v77 + v80);
          if (v79 >= v81)
            break;
          if (!v77)
            goto LABEL_142;
          *(_QWORD *)(v77 + v80 + 8) = v81;
          *(_QWORD *)(v77 + v80) = v79;
          v80 -= 8;
        }
        while (v80 != -8);
        v76 += 8;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v93 = result;
    v94 = v3;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_24A215EF4();
      *(_QWORD *)(result + 16) = v6;
      v3 = v94;
      v92 = result;
      v96 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *v2;
      v90 = v2;
      v91 = *v2 - 8;
      v10 = MEMORY[0x24BEE4AF8];
      v95 = *v2;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_QWORD *)(v9 + 8 * v8);
          v14 = *(_QWORD *)(v9 + 8 * v12);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = v13;
            while (1)
            {
              v16 = *(_QWORD *)(v9 + 8 * v8);
              if (v13 < v14 == v16 >= v15)
                break;
              ++v8;
              v15 = v16;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v17 = v8 - 1;
              v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9)
                    goto LABEL_145;
                  v19 = *(_QWORD *)(v9 + 8 * v18);
                  *(_QWORD *)(v9 + 8 * v18) = *(_QWORD *)(v9 + 8 * v17);
                  *(_QWORD *)(v9 + 8 * v17) = v19;
                }
                v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v93)
          {
            v20 = v12 + v93;
            if (__OFADD__(v12, v93))
              goto LABEL_140;
            if (v20 >= v3)
              v20 = v3;
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              v21 = (uint64_t *)(v91 + 8 * v8);
              do
              {
                v22 = *(_QWORD *)(v9 + 8 * v8);
                v23 = v12;
                v24 = v21;
                do
                {
                  v25 = *v24;
                  if (v22 >= *v24)
                    break;
                  if (!v9)
                    goto LABEL_143;
                  *v24 = v22;
                  v24[1] = v25;
                  --v24;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              v8 = v20;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_24A17612C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v27 = *(_QWORD *)(v10 + 16);
        v26 = *(_QWORD *)(v10 + 24);
        v11 = v27 + 1;
        v9 = v95;
        if (v27 >= v26 >> 1)
        {
          result = (uint64_t)sub_24A17612C((char *)(v26 > 1), v27 + 1, 1, (char *)v10);
          v9 = v95;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v28 = v10 + 32;
        v29 = (uint64_t *)(v10 + 32 + 16 * v27);
        *v29 = v12;
        v29[1] = v8;
        if (v27)
        {
          while (1)
          {
            v30 = v11 - 1;
            if (v11 >= 4)
            {
              v35 = v28 + 16 * v11;
              v36 = *(_QWORD *)(v35 - 64);
              v37 = *(_QWORD *)(v35 - 56);
              v41 = __OFSUB__(v37, v36);
              v38 = v37 - v36;
              if (v41)
                goto LABEL_120;
              v40 = *(_QWORD *)(v35 - 48);
              v39 = *(_QWORD *)(v35 - 40);
              v41 = __OFSUB__(v39, v40);
              v33 = v39 - v40;
              v34 = v41;
              if (v41)
                goto LABEL_121;
              v42 = v11 - 2;
              v43 = (uint64_t *)(v28 + 16 * (v11 - 2));
              v45 = *v43;
              v44 = v43[1];
              v41 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              if (v41)
                goto LABEL_122;
              v41 = __OFADD__(v33, v46);
              v47 = v33 + v46;
              if (v41)
                goto LABEL_124;
              if (v47 >= v38)
              {
                v65 = (uint64_t *)(v28 + 16 * v30);
                v67 = *v65;
                v66 = v65[1];
                v41 = __OFSUB__(v66, v67);
                v68 = v66 - v67;
                if (v41)
                  goto LABEL_130;
                v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v59 = *(_QWORD *)(v10 + 32);
                v60 = *(_QWORD *)(v10 + 40);
                v41 = __OFSUB__(v60, v59);
                v52 = v60 - v59;
                v53 = v41;
                goto LABEL_78;
              }
              v32 = *(_QWORD *)(v10 + 32);
              v31 = *(_QWORD *)(v10 + 40);
              v41 = __OFSUB__(v31, v32);
              v33 = v31 - v32;
              v34 = v41;
            }
            if ((v34 & 1) != 0)
              goto LABEL_123;
            v42 = v11 - 2;
            v48 = (uint64_t *)(v28 + 16 * (v11 - 2));
            v50 = *v48;
            v49 = v48[1];
            v51 = __OFSUB__(v49, v50);
            v52 = v49 - v50;
            v53 = v51;
            if (v51)
              goto LABEL_125;
            v54 = (uint64_t *)(v28 + 16 * v30);
            v56 = *v54;
            v55 = v54[1];
            v41 = __OFSUB__(v55, v56);
            v57 = v55 - v56;
            if (v41)
              goto LABEL_127;
            if (__OFADD__(v52, v57))
              goto LABEL_129;
            if (v52 + v57 >= v33)
            {
              v58 = v33 < v57;
LABEL_84:
              if (v58)
                v30 = v42;
              goto LABEL_86;
            }
LABEL_78:
            if ((v53 & 1) != 0)
              goto LABEL_126;
            v61 = (uint64_t *)(v28 + 16 * v30);
            v63 = *v61;
            v62 = v61[1];
            v41 = __OFSUB__(v62, v63);
            v64 = v62 - v63;
            if (v41)
              goto LABEL_128;
            if (v64 < v52)
              goto LABEL_15;
LABEL_86:
            v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v70 = (uint64_t *)(v28 + 16 * v69);
            v71 = *v70;
            v72 = v28;
            v73 = (_QWORD *)(v28 + 16 * v30);
            v74 = v73[1];
            result = sub_24A175F2C((char *)(v9 + 8 * *v70), (char *)(v9 + 8 * *v73), v9 + 8 * v74, v96);
            if (v1)
              goto LABEL_114;
            if (v74 < v71)
              goto LABEL_117;
            if (v30 > *(_QWORD *)(v10 + 16))
              goto LABEL_118;
            *v70 = v71;
            *(_QWORD *)(v72 + 16 * v69 + 8) = v74;
            v75 = *(_QWORD *)(v10 + 16);
            if (v30 >= v75)
              goto LABEL_119;
            v11 = v75 - 1;
            result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            v28 = v72;
            *(_QWORD *)(v10 + 16) = v75 - 1;
            v9 = v95;
            if (v75 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v94;
        if (v8 >= v94)
        {
          v7 = v92;
          v2 = v90;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x24BEE4AF8];
    v96 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v92 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_103:
    v92 = v7;
    if (v11 >= 2)
    {
      v82 = *v2;
      do
      {
        v83 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v82)
          goto LABEL_146;
        v84 = v10;
        v85 = v10 + 32;
        v86 = *(_QWORD *)(v10 + 32 + 16 * v83);
        v87 = *(_QWORD *)(v10 + 32 + 16 * (v11 - 1) + 8);
        result = sub_24A175F2C((char *)(v82 + 8 * v86), (char *)(v82 + 8 * *(_QWORD *)(v85 + 16 * (v11 - 1))), v82 + 8 * v87, v96);
        if (v1)
          break;
        if (v87 < v86)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_24A176224(v84);
          v84 = result;
        }
        if (v83 >= *(_QWORD *)(v84 + 16))
          goto LABEL_134;
        v88 = (_QWORD *)(v84 + 32 + 16 * v83);
        *v88 = v86;
        v88[1] = v87;
        v89 = *(_QWORD *)(v84 + 16);
        if (v11 > v89)
          goto LABEL_135;
        result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        v10 = v84;
        *(_QWORD *)(v84 + 16) = v89 - 1;
        v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v92 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A175F2C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = __src - __dst + 7;
  if (__src - __dst >= 0)
    v9 = __src - __dst;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)__src;
  v12 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v12 = a3 - (_QWORD)__src;
  v13 = v12 >> 3;
  if (v10 >= v12 >> 3)
  {
    if (a4 != __src || &__src[8 * v13] <= a4)
      memmove(a4, __src, 8 * v13);
    v14 = &v4[8 * v13];
    if (v7 >= v6 || v11 < 8)
      goto LABEL_39;
    v17 = (char *)(a3 - 8);
    v18 = v6;
    while (1)
    {
      v19 = v17 + 8;
      v21 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      v20 = v21;
      if (*((_QWORD *)v14 - 1) < v21)
        break;
      v20 = *((_QWORD *)v14 - 1);
      v18 = v6;
      if (v19 != v14)
      {
        v14 -= 8;
LABEL_35:
        *(_QWORD *)v17 = v20;
        goto LABEL_36;
      }
      v22 = v17 >= v14;
      v14 -= 8;
      if (v22)
        goto LABEL_35;
LABEL_36:
      if (v18 > v7)
      {
        v17 -= 8;
        v6 = v18;
        if (v14 > v4)
          continue;
      }
      v6 = v18;
      goto LABEL_39;
    }
    if (v19 == v6 && v17 < v6)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (a4 != __dst || &__dst[8 * v10] <= a4)
    memmove(a4, __dst, 8 * v10);
  v14 = &v4[8 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v15 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        break;
      v16 = v7 == v6;
      v6 += 8;
      if (!v16)
        goto LABEL_16;
LABEL_17:
      v7 += 8;
      if (v4 >= v14 || (unint64_t)v6 >= a3)
        goto LABEL_19;
    }
    v15 = *(_QWORD *)v4;
    v16 = v7 == v4;
    v4 += 8;
    if (v16)
      goto LABEL_17;
LABEL_16:
    *(_QWORD *)v7 = v15;
    goto LABEL_17;
  }
LABEL_19:
  v6 = v7;
LABEL_39:
  v23 = v14 - v4 + (v14 - v4 < 0 ? 7uLL : 0);
  if (v6 != v4 || v6 >= &v4[v23 & 0xFFFFFFFFFFFFFFF8])
    memmove(v6, v4, 8 * (v23 >> 3));
  return 1;
}

char *sub_24A17612C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790BC90);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_24A176224(uint64_t a1)
{
  return sub_24A17612C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_24A176238(_QWORD *a1)
{
  return sub_24A15037C(0, a1[2], 0, a1);
}

uint64_t sub_24A17624C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v5 = result;
  v6 = a3 + 32;
  v7 = MEMORY[0x24BEE4AF8];
  v8 = result;
  v9 = result;
LABEL_2:
  if (v8 <= a2)
    v10 = a2;
  else
    v10 = v8;
  while (1)
  {
    if (a2 == v9)
      return v7;
    if (a2 < v5)
      break;
    if (v8 < v5)
      goto LABEL_19;
    if (v10 == v9)
      goto LABEL_20;
    if (v8 < 0)
      goto LABEL_21;
    if (v9 >= *(_QWORD *)(a3 + 16))
      goto LABEL_22;
    v11 = *(unsigned __int8 *)(v6 + v9++);
    if (v11 == 1)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = sub_24A148B9C(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
        result = sub_24A148B9C(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v7 + 16) = v13 + 1;
      *(_QWORD *)(v7 + 8 * v13 + 32) = v9 - 1;
      v8 = v9;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t VASpeechAPISpotter.__allocating_init(delegate:asrDelegate:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return VASpeechAPISpotter.init(delegate:asrDelegate:configuration:)(a1, a2, a3);
}

uint64_t VASpeechAPISpotter.init(delegate:asrDelegate:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31[8];

  v4 = v3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_transcriber] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAnalyzer] = 0;
  v7 = (uint64_t)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStream];
  v8 = sub_24A135F88(&qword_25790BC98);
  v29 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (uint64_t)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStreamBuilder];
  v10 = sub_24A135F88(&qword_25790BCA0);
  v26 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_analysisContext;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_analysisContext] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask] = 0;
  v12 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector] = 0;
  v24 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_timingInfo;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_timingInfo] = 0;
  v13 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_asrDelegate;
  *(_QWORD *)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_asrDelegate] = 0;
  v14 = (uint64_t)&v3[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetectorOutputStream];
  v15 = sub_24A135F88(&qword_25790A838);
  v25 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = &v4[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_runtimeParameters];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *(_QWORD *)(v16 + 79) = 0;
  v28 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_audioDuringSpeech;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_audioDuringSpeech] = 0;
  v4[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_stopped] = 0;
  v27 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_downloadError;
  *(_QWORD *)&v4[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_downloadError] = 0;
  *(_QWORD *)&v4[v13] = a2;
  v17 = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&v17[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAPISpotterConfiguration] = a3;
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 216);
  v19 = swift_retain();
  if ((v18(v19) & 1) == 0)
  {

LABEL_6:
    type metadata accessor for VAConfiguration();
    v22 = static VAConfiguration.buildForSpeechAPISpotter(speechAPISpotterConfig:)(a3);
    sub_24A1ED7C4(v31);
    v20 = (uint64_t)sub_24A1ED848(a1, (uint64_t)v22, (uint64_t)v31);
    swift_release();
    swift_unknownObjectRelease();
    return v20;
  }
  v20 = type metadata accessor for VASpeechDetector();
  v21 = VASpeechDetector.__allocating_init()();
  if (!v31[7])
  {
    *(_QWORD *)&v4[v12] = v21;

    swift_release();
    goto LABEL_6;
  }
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  sub_24A13DAA8(v29, &qword_25790BCB8);
  sub_24A13DAA8(v26, &qword_25790BCC0);

  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  sub_24A13DAA8(v25, &qword_25790A858);
  sub_24A176794(*(_QWORD *)v16);

  swift_release();
  type metadata accessor for VASpeechAPISpotter();
  swift_deallocPartialClassInstance();
  return v20;
}

uint64_t sub_24A176794(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for VASpeechAPISpotter()
{
  uint64_t result;

  result = qword_257916D00;
  if (!qword_257916D00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static VASpeechAPISpotter.generalASRModelNeedsDownload()()
{
  return swift_task_switch();
}

uint64_t sub_24A176810()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)objc_opt_self();
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_24A1768BC;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_24A176944;
  v3[3] = &unk_251B9A008;
  v3[4] = v2;
  objc_msgSend(v1, sel_installedLanguagesForTaskHint_completion_, 1009, v3);
  return swift_continuation_await();
}

uint64_t sub_24A1768BC()
{
  return swift_task_switch();
}

uint64_t sub_24A176908()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 == 0);
}

uint64_t sub_24A176944(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  **(_QWORD **)(*(_QWORD *)(v1 + 64) + 40) = sub_24A216068();
  return swift_continuation_resume();
}

uint64_t static VASpeechAPISpotter.downloadGeneralASRModel(progress:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_25790BCD8 + dword_25790BCD8);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24A152AD0;
  return v7(a1, a2);
}

uint64_t sub_24A1769F8(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_24A176A34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    sub_24A135F88(&qword_25790A8B8);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = sub_24A215CB4();
    v9 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

uint64_t *sub_24A176ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  void *v90;
  id v91;
  void (*v92)(uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t, uint64_t);
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void (*v105)(unint64_t, _QWORD, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(unint64_t, _QWORD, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *result;
  uint64_t *v129;
  id v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  id v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t);
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void (*v173)(char *, uint64_t *, uint64_t);
  unint64_t v174;
  void (*v175)(uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(char *, uint64_t, uint64_t);
  char *v182;
  uint64_t v183;
  char v184;
  void (*v185)(char *, uint64_t);
  uint64_t v186;
  dispatch_semaphore_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  id v191;
  char *v192;
  void *v193;
  id v194;
  _QWORD *v195;
  char v196;
  int8x16_t v197;
  uint64x2_t v198;
  int32x4_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, uint64_t *, uint64_t);
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  int v224;
  uint64_t v225;
  char *v226;
  uint64_t *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  int v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  int16x8_t v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(char *, uint64_t *, uint64_t);
  __int128 v268;
  _BYTE *v269;
  uint64_t v270;
  unsigned int v271;
  char v272;
  char v273;
  unint64_t v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  char v278;
  char v279;
  float v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  char v290;
  _BYTE v291[7];
  char v292;
  char v293;
  _BYTE v294[7];

  v253 = sub_24A215BB8();
  v252 = *(_QWORD *)(v253 - 8);
  v2 = MEMORY[0x24BDAC7A8](v253);
  v231 = (char *)&v210 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v232 = (char *)&v210 - v4;
  v5 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v210 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_24A135F88(&qword_25790A838);
  v229 = *(_QWORD *)(v230 - 8);
  v8 = MEMORY[0x24BDAC7A8](v230);
  v226 = (char *)&v210 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v228 = (char *)&v210 - v10;
  v11 = sub_24A135F88(&qword_25790A858);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v227 = (uint64_t *)((char *)&v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v233 = (char *)&v210 - v14;
  v15 = sub_24A135F88(&qword_25790BCE0);
  MEMORY[0x24BDAC7A8](v15);
  v234 = (char *)&v210 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_24A215AE0();
  MEMORY[0x24BDAC7A8](v17);
  v255 = (char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_24A135F88(&qword_25790BCC0);
  MEMORY[0x24BDAC7A8](v19);
  v249 = (char *)&v210 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_24A135F88(&qword_25790BCB8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v254 = (uint64_t)&v210 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v247 = (char *)&v210 - v24;
  v244 = sub_24A135F88(&qword_25790BCE8);
  v243 = *(_QWORD *)(v244 - 8);
  MEMORY[0x24BDAC7A8](v244);
  v241 = (char *)&v210 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = sub_24A135F88(&qword_25790BCA0);
  v245 = *(_QWORD *)(v246 - 8);
  MEMORY[0x24BDAC7A8](v246);
  v242 = (char *)&v210 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_24A135F88(&qword_25790BC98);
  v250 = *(_QWORD *)(v248 - 8);
  MEMORY[0x24BDAC7A8](v248);
  v240 = (char *)&v210 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_24A135F88(&qword_25790BCF0);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v238 = (char *)&v210 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v237 = (char *)&v210 - v31;
  v32 = sub_24A135F88(&qword_25790BCF8);
  MEMORY[0x24BDAC7A8](v32);
  v239 = (char *)&v210 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_24A135F88(&qword_25790BD00);
  MEMORY[0x24BDAC7A8](v34);
  v262 = (char *)&v210 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_24A2157BC();
  MEMORY[0x24BDAC7A8](v36);
  v261 = (char *)&v210 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_QWORD *)a1;
  v39 = *(_DWORD *)(a1 + 8);
  v40 = *(unsigned __int8 *)(a1 + 12);
  v41 = *(unsigned __int8 *)(a1 + 13);
  v42 = *(_QWORD *)(a1 + 16);
  v43 = *(_QWORD *)(a1 + 24);
  v44 = *(unsigned __int8 *)(a1 + 32);
  v45 = *(_QWORD *)(a1 + 40);
  v46 = *(unsigned __int8 *)(a1 + 48);
  v47 = *(unsigned __int8 *)(a1 + 49);
  v48 = *(float *)(a1 + 52);
  v49 = *(unsigned __int8 *)(a1 + 56);
  v50 = *(_QWORD *)(a1 + 64);
  v51 = *(_QWORD *)(a1 + 72);
  v52 = *(unsigned __int8 *)(a1 + 80);
  v53 = *(unsigned __int8 *)(a1 + 81);
  v54 = *(unsigned __int8 *)(a1 + 82);
  v55 = *(unsigned __int8 *)(a1 + 83);
  v56 = *(unsigned __int8 *)(a1 + 84);
  v57 = *(unsigned __int8 *)(a1 + 85);
  v58 = *(unsigned __int8 *)(a1 + 86);
  v270 = *(_QWORD *)a1;
  v271 = v39;
  v59 = v40;
  v272 = v40;
  v60 = v41;
  v273 = v41;
  v259 = v42;
  v274 = v42;
  v275 = v43;
  v258.i64[0] = v43;
  v260 = v44;
  v276 = v44;
  v257 = v45;
  v277 = v45;
  *(_QWORD *)&v268 = v46;
  v278 = v46;
  v61 = v47;
  v279 = v47;
  v280 = v48;
  v256 = v49;
  v281 = v49;
  v236 = v50;
  v282 = v50;
  v283 = v51;
  v265 = v52;
  v284 = v52;
  v264 = v53;
  v285 = v53;
  v263 = v54;
  v286 = v54;
  v62 = v55;
  v287 = v55;
  v288 = v56;
  LODWORD(v267) = v57;
  v289 = v57;
  LODWORD(v266) = v58;
  v290 = v58;
  v63 = &v270;
  if ((VARuntimeParameters.allKeywordsAreValid.getter() & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    *v150 = 0xD00000000000006DLL;
    v150[1] = 0x800000024A221340;
    swift_willThrow();
    return v63;
  }
  v211 = v7;
  v64 = v269;
  v269[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_stopped] = 0;
  v235 = v59;
  v65 = 0x100000000;
  if (v59)
    v66 = 0x100000000;
  else
    v66 = 0;
  v223 = v60;
  if (v60)
    v67 = 0x10000000000;
  else
    v67 = 0;
  v68 = &v64[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_runtimeParameters];
  v220 = *(_QWORD *)&v64[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_runtimeParameters];
  v219 = *(_QWORD *)&v64[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_runtimeParameters + 8];
  v69 = v66 | v39 | v67;
  v224 = v61;
  v70 = 256;
  if (!v61)
    v70 = 0;
  v218 = *((_QWORD *)v68 + 6);
  v217 = *((_QWORD *)v68 + 7);
  v71 = v70 | v268 | ((unint64_t)LODWORD(v48) << 32);
  *(_QWORD *)v68 = v38;
  *((_QWORD *)v68 + 1) = v69;
  v222 = v62;
  v72 = 0x1000000;
  if (!v62)
    v72 = 0;
  v221 = v56;
  *((_QWORD *)v68 + 6) = v71;
  if (!v56)
    v65 = 0;
  if ((_DWORD)v267)
    v73 = 0x10000000000;
  else
    v73 = 0;
  v68[86] = (_DWORD)v266 != 0;
  v74 = v265 | (v264 << 8) | (v263 << 16);
  v216 = *((_QWORD *)v68 + 2);
  v215 = *((_QWORD *)v68 + 3);
  *((_DWORD *)v68 + 20) = v74 | v72;
  *((_WORD *)v68 + 42) = (v74 | v65 | (unint64_t)v73) >> 32;
  v214 = *((_QWORD *)v68 + 4);
  v213 = *((_QWORD *)v68 + 5);
  v75 = v259;
  v76 = v258.i64[0];
  *((_QWORD *)v68 + 2) = v259;
  *((_QWORD *)v68 + 3) = v76;
  v77 = v260;
  v78 = v257;
  *((_QWORD *)v68 + 4) = v260;
  *((_QWORD *)v68 + 5) = v78;
  v79 = v256;
  v80 = v236;
  *((_QWORD *)v68 + 7) = v256;
  *((_QWORD *)v68 + 8) = v80;
  v212 = v68;
  *((_QWORD *)v68 + 9) = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A176794(v220);
  v220 = type metadata accessor for VARequestContext();
  v81 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v269) + 0x78))();
  v270 = v38;
  v271 = v39;
  v272 = v235;
  v82 = v223;
  v273 = v223;
  v274 = v75;
  v275 = v76;
  v276 = v77;
  v83 = v257;
  v277 = v257;
  v278 = v268;
  v84 = v224;
  v279 = v224;
  v280 = v48;
  v281 = v79;
  v282 = v80;
  v283 = v51;
  v284 = v265;
  v285 = v264;
  v286 = v263;
  LOBYTE(v76) = v222;
  v287 = v222;
  v85 = v221;
  v288 = v221;
  v289 = (char)v267;
  v290 = v266;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v86 = sub_24A167FE8(v81, &v270);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v269) + 0x120))(v86);
  type metadata accessor for VAStrategyLayerPassthrough();
  v270 = v38;
  v271 = v39;
  v272 = v235;
  v273 = v82;
  v274 = v259;
  v275 = v258.i64[0];
  v276 = v260;
  v277 = v83;
  v278 = v268;
  v279 = v84;
  v280 = v48;
  v281 = v256;
  v282 = v80;
  v283 = v51;
  v284 = v265;
  v285 = v264;
  v286 = v263;
  v287 = v76;
  v288 = v85;
  v289 = (char)v267;
  v290 = v266;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v87 = v269;
  v88 = sub_24A1F4010(v87, (uint64_t)&protocol witness table for VAKeywordSpotterBase, &v270);
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)v87) + 0x150))(v88);
  v89 = objc_allocWithZone(MEMORY[0x24BDBCEA0]);
  v90 = (void *)sub_24A215C90();
  v91 = objc_msgSend(v89, sel_initWithLocaleIdentifier_, v90);

  sub_24A2157B0();
  v269 = (_BYTE *)OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAPISpotterConfiguration;
  v92 = *(void (**)(uint64_t))(**(_QWORD **)(v87
                                                     + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAPISpotterConfiguration)
                                       + 136);
  v93 = swift_retain();
  v94 = v262;
  v92(v93);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v94, 0, 1, v253);
  v95 = sub_24A215750();
  v96 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56);
  v96(v237, 1, 1, v95);
  v96(v238, 1, 1, v95);
  v97 = v239;
  sub_24A215AEC();
  v98 = sub_24A215AF8();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 0, 1, v98);
  sub_24A135F88(&qword_25790BD08);
  v99 = sub_24A215B04();
  v100 = *(_QWORD *)(v99 - 8);
  v101 = *(_QWORD *)(v100 + 72);
  v102 = (*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  v103 = swift_allocObject();
  v268 = xmmword_24A218680;
  *(_OWORD *)(v103 + 16) = xmmword_24A218680;
  v104 = v103 + v102;
  v105 = *(void (**)(unint64_t, _QWORD, uint64_t))(v100 + 104);
  v105(v104, *MEMORY[0x24BDE9C50], v99);
  v105(v104 + v101, *MEMORY[0x24BDE9C58], v99);
  v105(v104 + 2 * v101, *MEMORY[0x24BDE9C48], v99);
  sub_24A17B824(v103);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_24A135F88(&qword_25790BD10);
  v106 = sub_24A215B34();
  v107 = *(_QWORD *)(v106 - 8);
  v108 = *(_QWORD *)(v107 + 72);
  v109 = (*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
  v110 = swift_allocObject();
  *(_OWORD *)(v110 + 16) = v268;
  v111 = v110 + v109;
  v112 = *(void (**)(unint64_t, _QWORD, uint64_t))(v107 + 104);
  v112(v111, *MEMORY[0x24BDE9CA0], v106);
  v112(v111 + v108, *MEMORY[0x24BDE9CA8], v106);
  v112(v111 + 2 * v108, *MEMORY[0x24BDE9CB0], v106);
  sub_24A17BA8C(v110);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_24A215B58();
  swift_allocObject();
  v113 = sub_24A215B4C();
  v114 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_transcriber;
  *(_QWORD *)(v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_transcriber) = v113;
  swift_release();
  sub_24A215B70();
  v115 = v243;
  v116 = v241;
  v117 = v244;
  (*(void (**)(char *, _QWORD, uint64_t))(v243 + 104))(v241, *MEMORY[0x24BEE6A10], v244);
  v118 = v240;
  v119 = v242;
  sub_24A215F84();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
  v120 = v250;
  v121 = (uint64_t)v247;
  v122 = v248;
  (*(void (**)(char *, char *, uint64_t))(v250 + 32))(v247, v118, v248);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v120 + 56))(v121, 0, 1, v122);
  v123 = v245;
  v124 = (uint64_t)v249;
  v125 = v246;
  (*(void (**)(char *, char *, uint64_t))(v245 + 32))(v249, v119, v246);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v123 + 56))(v124, 0, 1, v125);
  v126 = v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStream;
  swift_beginAccess();
  sub_24A15BA84(v121, v126, &qword_25790BCB8);
  swift_endAccess();
  v127 = v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStreamBuilder;
  swift_beginAccess();
  sub_24A15BA84(v124, v127, &qword_25790BCC0);
  swift_endAccess();
  result = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1818]), sel_initWithCommonFormat_sampleRate_channels_interleaved_, 3, 1, 0, 16000.0);
  if (!result)
  {
    __break(1u);
    goto LABEL_39;
  }
  v129 = result;
  v130 = objc_msgSend(objc_allocWithZone((Class)sub_24A215B94()), sel_init);
  v131 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_analysisContext;
  v132 = *(void **)(v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_analysisContext);
  *(_QWORD *)(v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_analysisContext) = v130;

  sub_24A215AD4();
  v133 = v126;
  v134 = v254;
  sub_24A1360A0(v133, v254, &qword_25790BCB8);
  result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v134, 1, v122);
  v135 = v234;
  if ((_DWORD)result == 1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  sub_24A135F88(&qword_25790BD18);
  result = (uint64_t *)swift_allocObject();
  *((_OWORD *)result + 1) = xmmword_24A218650;
  v136 = *(_QWORD *)(v87 + v114);
  if (!v136)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v137 = result;
  v138 = sub_24A137FF0(&qword_25790BD20, (uint64_t (*)(uint64_t))MEMORY[0x24BDE9CF8], MEMORY[0x24BDE9CF0]);
  v137[4] = v136;
  v137[5] = v138;
  v139 = sub_24A215BA0();
  result = (uint64_t *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v135, 1, 1, v139);
  v140 = *(void **)(v87 + v131);
  if (!v140)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v141 = sub_24A215AC8();
  sub_24A17BCF8();
  swift_retain();
  v142 = v140;
  *(_QWORD *)&v268 = v129;
  v63 = (uint64_t *)v141;
  *(_QWORD *)(v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAnalyzer) = sub_24A215ABC();
  swift_release();
  v143 = *(uint64_t **)(v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector);
  v144 = v87;
  if (v143)
  {
    v145 = *(uint64_t (**)(uint64_t))(**(_QWORD **)&v269[v87] + 160);
    swift_retain();
    v146 = swift_retain();
    v147 = v145(v146);
    swift_release();
    v148 = (uint64_t)v233;
    v63 = v143;
    v149 = v251;
    (*(void (**)(_QWORD, float))(*v143 + 544))(v147 & 1, v48);
    if (v149)
    {
      swift_release();
LABEL_33:

      return v63;
    }
    v251 = 0;
    v151 = v229;
    v152 = v230;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v229 + 56))(v148, 0, 1, v230);
    v153 = v87 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetectorOutputStream;
    swift_beginAccess();
    sub_24A15BA84(v148, v153, &qword_25790A858);
    swift_endAccess();
    v154 = v153;
    v63 = v227;
    sub_24A1360A0(v154, (uint64_t)v227, &qword_25790A858);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v151 + 48))(v63, 1, v152) == 1)
    {
      swift_release();
      sub_24A13DAA8((uint64_t)v63, &qword_25790A858);
    }
    else
    {
      v267 = *(void (**)(char *, uint64_t *, uint64_t))(v151 + 32);
      v155 = v228;
      v267(v228, v63, v152);
      v156 = sub_24A215F78();
      v157 = (uint64_t)v211;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v211, 1, 1, v156);
      v158 = v226;
      (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v226, v155, v152);
      v159 = (*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
      v160 = (v225 + v159 + 7) & 0xFFFFFFFFFFFFFFF8;
      v161 = swift_allocObject();
      *(_QWORD *)(v161 + 16) = 0;
      *(_QWORD *)(v161 + 24) = 0;
      v267((char *)(v161 + v159), (uint64_t *)v158, v152);
      *(_QWORD *)(v161 + v160) = v144;
      v162 = (char *)(id)v144;
      v63 = (uint64_t *)sub_24A17AC84(v157, (uint64_t)&unk_25790BD58, v161);
      sub_24A13DAA8(v157, &qword_25790A7C0);
      *(_QWORD *)&v162[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask] = v63;
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v151 + 8))(v228, v152);
    }
  }
  v163 = v232;
  v164 = *(_QWORD *)v212;
  if (!*(_QWORD *)v212)
  {
    sub_24A14C404();
    swift_allocError();
    *v195 = 0xD000000000000012;
    v195[1] = 0x800000024A222C90;
    swift_willThrow();
    goto LABEL_33;
  }
  v165 = *((_QWORD *)v212 + 1);
  v166 = (char *)*((_QWORD *)v212 + 2);
  v167 = *((_QWORD *)v212 + 3);
  v168 = (char *)*((_QWORD *)v212 + 4);
  v169 = *((_QWORD *)v212 + 5);
  v170 = *((_QWORD *)v212 + 6);
  v172 = *((_QWORD *)v212 + 7);
  v171 = *((_QWORD *)v212 + 8);
  v173 = (void (*)(char *, uint64_t *, uint64_t))*((_QWORD *)v212 + 9);
  v174 = *((unsigned int *)v212 + 20) | ((unint64_t)(*((unsigned __int16 *)v212 + 42) | (v212[86] << 16)) << 32);
  v293 = v168 & 1;
  v292 = v170 & 1;
  v175 = *(void (**)(uint64_t))(**(_QWORD **)&v269[v144] + 136);
  v267 = v173;
  v265 = v171;
  v176 = v164;
  v266 = v164;
  v177 = v165;
  v262 = v166;
  v263 = v167;
  v261 = v168;
  v264 = v169;
  sub_24A17BD44(v176);
  v178 = swift_retain();
  v175(v178);
  swift_release();
  v179 = *MEMORY[0x24BDE9DD8];
  v180 = v252;
  v181 = *(void (**)(char *, uint64_t, uint64_t))(v252 + 104);
  v182 = v231;
  v269 = (_BYTE *)v144;
  v183 = v253;
  v181(v231, v179, v253);
  v184 = sub_24A215BAC();
  v185 = *(void (**)(char *, uint64_t))(v180 + 8);
  v185(v182, v183);
  v185(v163, v183);
  if ((v184 & 1) != 0)
  {
    v259 = v170;
    v186 = v266;
    v260 = v172;
    v187 = dispatch_semaphore_create(0);
    v188 = sub_24A215F78();
    v189 = (uint64_t)v211;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v188 - 8) + 56))(v211, 1, 1, v188);
    v190 = (_QWORD *)swift_allocObject();
    v190[2] = 0;
    v190[3] = 0;
    v191 = v269;
    v190[4] = v269;
    v190[5] = v187;
    v192 = (char *)v191;
    v63 = v187;
    sub_24A167948(v189, (uint64_t)&unk_25790BD48, (uint64_t)v190);
    swift_release();
    sub_24A21617C();
    v193 = *(void **)&v192[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_downloadError];
    if (v193)
    {
      v194 = v193;
      sub_24A176794(v186);
      swift_willThrow();

      goto LABEL_33;
    }

    LOBYTE(v172) = v260;
    v170 = v259;
  }
  v259 = HIDWORD(v170);
  v261 = (char *)(v174 >> 8);
  v260 = v174 >> 16;
  v196 = v172 & 1;
  v197.i64[0] = 0xFFFFFFFFFFFFFFLL;
  v197.i64[1] = 0xFFFFFFFFFFFFFFLL;
  v198 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v174), v197);
  v199 = vuzp1q_s32((int32x4_t)vshlq_u64(v198, (uint64x2_t)xmmword_24A21A9B0), (int32x4_t)vshlq_u64(v198, (uint64x2_t)xmmword_24A21A9A0));
  *(int8x8_t *)v199.i8 = vand_s8((int8x8_t)vmovn_s32(v199), (int8x8_t)0x1000100010001);
  v258 = (int16x8_t)v199;
  v200 = sub_24A215F78();
  v201 = (uint64_t)v211;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 56))(v211, 1, 1, v200);
  v202 = swift_allocObject();
  *(_QWORD *)(v202 + 16) = 0;
  *(_QWORD *)(v202 + 24) = 0;
  v203 = v269;
  v204 = v266;
  *(_QWORD *)(v202 + 32) = v269;
  *(_QWORD *)(v202 + 40) = v204;
  *(_DWORD *)(v202 + 48) = v177;
  *(_BYTE *)(v202 + 52) = BYTE4(v177) & 1;
  *(_BYTE *)(v202 + 53) = BYTE5(v177) & 1;
  v205 = v263;
  *(_QWORD *)(v202 + 56) = v262;
  *(_QWORD *)(v202 + 64) = v205;
  *(_BYTE *)(v202 + 72) = v293;
  *(_DWORD *)(v202 + 73) = *(_DWORD *)v294;
  *(_DWORD *)(v202 + 76) = *(_DWORD *)&v294[3];
  *(_QWORD *)(v202 + 80) = v264;
  *(_BYTE *)(v202 + 88) = v292;
  *(_BYTE *)(v202 + 89) = BYTE1(v170) & 1;
  *(_DWORD *)(v202 + 92) = v259;
  *(_BYTE *)(v202 + 96) = v196;
  *(_DWORD *)(v202 + 97) = *(_DWORD *)v291;
  *(_DWORD *)(v202 + 100) = *(_DWORD *)&v291[3];
  v206 = v267;
  *(_QWORD *)(v202 + 104) = v265;
  *(_QWORD *)(v202 + 112) = v206;
  *(_BYTE *)(v202 + 120) = v174;
  *(_BYTE *)(v202 + 121) = (_BYTE)v261;
  *(_BYTE *)(v202 + 122) = v260;
  *(_DWORD *)(v202 + 123) = vmovn_s16(v258).u32[0];
  v207 = (char *)v203;
  v208 = sub_24A179478(v201, (uint64_t)&unk_25790BD38, v202);
  v209 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask;
  *(_QWORD *)&v207[OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask] = v208;
  result = (uint64_t *)swift_release();
  v63 = *(uint64_t **)&v207[v209];
  if (v63)
  {
    swift_retain();

    return v63;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_24A17831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[2] = a4;
  v5[3] = a5;
  v6 = (_QWORD *)swift_task_alloc();
  v5[4] = v6;
  *v6 = v5;
  v6[1] = sub_24A178364;
  return sub_24A17C2CC();
}

uint64_t sub_24A178364()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1783C8()
{
  uint64_t v0;

  sub_24A216188();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1783F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(void **)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v2 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_downloadError);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_downloadError) = v1;
  v4 = v1;

  sub_24A216188();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A17845C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[44] = a4;
  v5[45] = a5;
  v5[43] = a1;
  v6 = sub_24A215A8C();
  v5[46] = v6;
  v5[47] = *(_QWORD *)(v6 - 8);
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = sub_24A2156CC();
  v5[52] = swift_task_alloc();
  v7 = sub_24A2156D8();
  v5[53] = v7;
  v5[54] = *(_QWORD *)(v7 - 8);
  v5[55] = swift_task_alloc();
  v8 = sub_24A215B88();
  v5[56] = v8;
  v5[57] = *(_QWORD *)(v8 - 8);
  v5[58] = swift_task_alloc();
  v5[59] = swift_task_alloc();
  v9 = sub_24A215B28();
  v5[60] = v9;
  v5[61] = *(_QWORD *)(v9 - 8);
  v5[62] = swift_task_alloc();
  sub_24A135F88(&qword_25790BDF0);
  v5[63] = swift_task_alloc();
  v5[64] = sub_24A135F88(&qword_25790BDF8);
  v5[65] = swift_task_alloc();
  v10 = sub_24A135F88(&qword_25790BE00);
  v5[66] = v10;
  v5[67] = *(_QWORD *)(v10 - 8);
  v5[68] = swift_task_alloc();
  return swift_task_switch();
}

void sub_24A178600()
{
  uint64_t v0;
  _DWORD *v1;
  _QWORD *v2;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 352) + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_transcriber))
  {
    swift_retain();
    sub_24A215B40();
    swift_release();
    *(_QWORD *)(v0 + 552) = swift_getOpaqueTypeConformance2();
    sub_24A216008();
    *(_QWORD *)(v0 + 560) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_audioDuringSpeech;
    *(_QWORD *)(v0 + 568) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_stopped;
    *(_QWORD *)(v0 + 576) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_asrDelegate;
    *(_QWORD *)(v0 + 584) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_timingInfo;
    v1 = (_DWORD *)MEMORY[0x24BDE9D20];
    *(_DWORD *)(v0 + 252) = *MEMORY[0x24BDE9D30];
    *(_DWORD *)(v0 + 608) = *v1;
    swift_getAssociatedConformanceWitness();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 592) = v2;
    *v2 = v0;
    v2[1] = sub_24A178754;
    sub_24A215F60();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A178754()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 600) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A1787B8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t (*v8)(void);
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, unint64_t);
  int64_t v16;
  void (*v17)(uint64_t, unint64_t);
  unsigned __int8 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void (*v72)(uint64_t, uint64_t, _QWORD);
  _QWORD *v73;
  int v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  char v79;
  char v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, unint64_t);
  char v97;
  char v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  void (*v118)(uint64_t, _QWORD);
  _QWORD *v119;
  void *v120;
  NSObject *v121;
  uint64_t v122;
  char v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;

  v4 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 480);
  v6 = *(_QWORD *)(v0 + 488);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v7 = *(_BYTE **)(v0 + 344);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 8))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
    *v7 = 1;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  LODWORD(v126) = *(_DWORD *)(v0 + 608);
  v10 = *(unsigned int *)(v0 + 252);
  v12 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 472);
  v13 = *(_QWORD *)(v0 + 448);
  v14 = *(_QWORD *)(v0 + 456);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 32))(*(_QWORD *)(v0 + 496), v4, v5);
  sub_24A215B10();
  v15 = *(void (**)(uint64_t, uint64_t, unint64_t))(v14 + 104);
  v15(v12, v10, v13);
  v16 = sub_24A215B7C();
  v17 = *(void (**)(uint64_t, unint64_t))(v14 + 8);
  v17(v12, v13);
  v17(v11, v13);
  sub_24A215B10();
  v15(v12, v126, v13);
  v18 = sub_24A215B7C();
  v17(v12, v13);
  v17(v11, v13);
  v19 = *(_QWORD *)(sub_24A215B1C() + 16);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    v33 = *(_QWORD *)(v0 + 376);
    v32 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 368);
    v35 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v35, v34);
    v36 = sub_24A215A74();
    v37 = sub_24A216104();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_24A12D000, v36, v37, "No results from speech API", v38, 2u);
      MEMORY[0x24BD0AAAC](v38, -1, -1);
    }
    v40 = *(_QWORD *)(v0 + 376);
    v39 = *(_QWORD *)(v0 + 384);
    v41 = *(_QWORD *)(v0 + 368);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    goto LABEL_19;
  }
  v20 = *(_QWORD **)(v0 + 496);
  v21 = sub_24A215B1C();
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
  {
    __break(1u);
LABEL_44:
    v20 = sub_24A17B434((_QWORD *)(v22 > 1), v16, 1, v20);
LABEL_36:
    v122 = *(_QWORD *)(v0 + 600);
    v103 = *(_QWORD **)(v0 + 352);
    v20[2] = v16;
    v104 = &v20[8 * v13];
    v104[4] = v11;
    v104[5] = v6;
    *((_DWORD *)v104 + 12) = v1;
    v104[7] = v2;
    v104[8] = v3;
    v104[9] = v12;
    v104[10] = v126;
    *((_BYTE *)v104 + 88) = v125;
    *((_BYTE *)v104 + 89) = v124;
    *((_BYTE *)v104 + 90) = v123;
    type metadata accessor for VAKeywordResult();
    v105 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v103) + 0x210))(v105, v106, v107, v108);
    if (v122)
    {
      v109 = *(_QWORD *)(v0 + 544);
      v110 = *(_QWORD *)(v0 + 536);
      v111 = *(_QWORD *)(v0 + 528);
      v113 = *(_QWORD *)(v0 + 488);
      v112 = *(_QWORD *)(v0 + 496);
      v114 = *(_QWORD *)(v0 + 480);
      swift_release();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v114);
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v8 = *(uint64_t (**)(void))(v0 + 8);
      return v8();
    }
    v115 = *(_QWORD *)(v0 + 584);
    v116 = *(_QWORD *)(v0 + 352);
    swift_release();
    v117 = *(_QWORD **)(v116 + v115);
    if (v117)
    {
      v118 = *(void (**)(uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v117) + 0x1E8);
      v119 = v117;
      v118(v10, v17);

    }
    v55 = v121;
LABEL_41:
    v69 = v120;
    goto LABEL_42;
  }
  v24 = *(_QWORD *)(v0 + 432);
  v23 = *(_QWORD *)(v0 + 440);
  v25 = *(_QWORD *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16))(v23, v21 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), v25);
  swift_bridgeObjectRelease();
  sub_24A2156C0();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  sub_24A137FF0(&qword_25790BE08, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC290], MEMORY[0x24BDCC2A8]);
  sub_24A215E28();
  v127 = sub_24A215D14();
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = v16 | v18;
  if (((v16 | v18) & 1) != 0)
  {
    v29 = *(_QWORD *)(v0 + 352);
    v30 = *(void **)(v29 + *(_QWORD *)(v0 + 560));
    v31 = v30;
  }
  else
  {
    v30 = 0;
    v29 = *(_QWORD *)(v0 + 352);
  }
  v42 = *(_QWORD *)(v0 + 568);
  type metadata accessor for VAASRResult();
  swift_bridgeObjectRetain();
  v43 = sub_24A1CDF38(v127, v27, v16 & 1, v18 & 1, 0, 0, (uint64_t)v30);
  v44 = *(_QWORD *)(v0 + 368);
  v45 = *(_QWORD *)(v0 + 376);
  if (*(_BYTE *)(v29 + v42) == 1)
  {
    v46 = *(_QWORD *)(v0 + 400);
    swift_bridgeObjectRelease();
    v47 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v47, v44);
    v48 = v43;
    v49 = sub_24A215A74();
    v50 = sub_24A216104();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc();
      v52 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v51 = 138412290;
      *(_QWORD *)(v51 + 4) = v48;
      *v52 = v48;

      _os_log_impl(&dword_24A12D000, v49, v50, "Ignoring after stop: %@", (uint8_t *)v51, 0xCu);
      sub_24A135F88(&qword_25790A820);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v52, -1, -1);
      MEMORY[0x24BD0AAAC](v51, -1, -1);
    }
    else
    {

    }
    v60 = *(_QWORD *)(v0 + 400);
    v61 = *(_QWORD *)(v0 + 368);
    v62 = *(_QWORD *)(v0 + 376);

    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v60, v61);
    goto LABEL_19;
  }
  v53 = *(_QWORD *)(v0 + 392);
  v54 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v53, v54, v44);
  v55 = v43;
  v56 = sub_24A215A74();
  v57 = sub_24A2160F8();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc();
    v59 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v58 = 138412290;
    *(_QWORD *)(v58 + 4) = v55;
    *v59 = v55;

    _os_log_impl(&dword_24A12D000, v56, v57, "Got %@", (uint8_t *)v58, 0xCu);
    sub_24A135F88(&qword_25790A820);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v59, -1, -1);
    MEMORY[0x24BD0AAAC](v58, -1, -1);
  }
  else
  {

    v56 = v55;
  }
  v64 = *(_QWORD *)(v0 + 576);
  v65 = *(_QWORD *)(v0 + 392);
  v66 = *(_QWORD *)(v0 + 368);
  v67 = *(_QWORD *)(v0 + 376);
  v68 = *(_QWORD *)(v0 + 352);

  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
  v69 = *(void **)(v68 + v64);
  if (!v69)
  {

    swift_bridgeObjectRelease();
LABEL_19:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 488) + 8))(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 480));
    swift_getAssociatedConformanceWitness();
    v63 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 592) = v63;
    *v63 = v0;
    v63[1] = sub_24A178754;
    return sub_24A215F60();
  }
  v70 = *(_QWORD **)(*(_QWORD *)(v0 + 352) + *(_QWORD *)(v0 + 584));
  v71 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (v70)
  {
    v72 = *(void (**)(uint64_t, uint64_t, _QWORD))((*MEMORY[0x24BEE4EA0] & *v70) + 0x1F8);
    swift_unknownObjectRetain();
    v73 = v70;
    v72(v127, v27, v28 & 1);

    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    swift_unknownObjectRetain();
    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 360) + 85) & 1) == 0)
    goto LABEL_42;
LABEL_28:
  result = (*(uint64_t (**)(void))((*v71 & **(_QWORD **)(v0 + 352)) + 0x118))();
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 280))(result);
    swift_release();
    v74 = *(_DWORD *)(v0 + 24);
    v75 = *(_BYTE *)(v0 + 28);
    v76 = *(_BYTE *)(v0 + 29);
    v77 = *(_BYTE *)(v0 + 48);
    v78 = *(_QWORD *)(v0 + 56);
    v79 = *(_BYTE *)(v0 + 64);
    v80 = *(_BYTE *)(v0 + 65);
    v81 = *(_DWORD *)(v0 + 68);
    v82 = *(_BYTE *)(v0 + 72);
    v83 = *(_QWORD *)(v0 + 80);
    v84 = *(_QWORD *)(v0 + 88);
    v85 = *(_WORD *)(v0 + 96);
    v86 = *(_BYTE *)(v0 + 98);
    v87 = *(_BYTE *)(v0 + 99);
    v88 = *(_BYTE *)(v0 + 100);
    v89 = *(_BYTE *)(v0 + 101);
    v90 = *(_BYTE *)(v0 + 102);
    *(_QWORD *)(v0 + 104) = *(_QWORD *)(v0 + 16);
    *(_DWORD *)(v0 + 112) = v74;
    *(_BYTE *)(v0 + 116) = v75;
    *(_BYTE *)(v0 + 117) = v76;
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 32);
    *(_BYTE *)(v0 + 136) = v77;
    *(_QWORD *)(v0 + 144) = v78;
    *(_BYTE *)(v0 + 152) = v79;
    *(_BYTE *)(v0 + 153) = v80;
    *(_DWORD *)(v0 + 156) = v81;
    *(_BYTE *)(v0 + 160) = v82;
    *(_QWORD *)(v0 + 168) = v83;
    *(_QWORD *)(v0 + 176) = v84;
    *(_WORD *)(v0 + 184) = v85;
    *(_BYTE *)(v0 + 186) = v86;
    *(_BYTE *)(v0 + 187) = v87;
    *(_BYTE *)(v0 + 188) = v88;
    *(_BYTE *)(v0 + 189) = v89;
    *(_BYTE *)(v0 + 190) = v90;
    v91 = VARuntimeParameters.keywordsNoThresholds.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = *(_QWORD *)(v91 + 16);
    if (v92)
    {
      v120 = v69;
      v121 = v55;
      sub_24A14C688();
      v93 = (uint64_t *)(v91 + 40);
      while (1)
      {
        v94 = *(v93 - 1);
        v95 = *v93;
        *(_QWORD *)(v0 + 256) = v94;
        *(_QWORD *)(v0 + 264) = v95;
        *(_QWORD *)(v0 + 272) = 95;
        *(_QWORD *)(v0 + 280) = 0xE100000000000000;
        *(_QWORD *)(v0 + 288) = 32;
        *(_QWORD *)(v0 + 296) = 0xE100000000000000;
        swift_bridgeObjectRetain();
        v10 = sub_24A2162A8();
        v17 = v96;
        *(_QWORD *)(v0 + 304) = v127;
        *(_QWORD *)(v0 + 312) = v27;
        *(_QWORD *)(v0 + 320) = v10;
        *(_QWORD *)(v0 + 328) = v96;
        if ((sub_24A2162C0() & 1) != 0)
          break;
        v93 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!--v92)
        {
          swift_bridgeObjectRelease();
          v55 = v121;
          goto LABEL_41;
        }
      }
      swift_bridgeObjectRelease();
      v97 = sub_24A1541B0();
      v98 = sub_24A215E04();
      swift_bridgeObjectRelease();
      v99 = sub_24A1DF918();
      v100 = sub_24A1DF918();
      v101 = sub_24A1DF920();
      v102 = sub_24A1DF920();
      sub_24A1DF928(v94, v95, v101, v102, v97 & 1, v98 & 1, 1, v0 + 192, 1.0, v99, v100);
      v11 = *(_QWORD *)(v0 + 192);
      v6 = *(_QWORD *)(v0 + 200);
      v1 = *(_DWORD *)(v0 + 208);
      v2 = *(_QWORD *)(v0 + 216);
      v3 = *(_QWORD *)(v0 + 224);
      v12 = *(_QWORD *)(v0 + 232);
      v126 = *(_QWORD *)(v0 + 240);
      v125 = *(_BYTE *)(v0 + 248);
      v124 = *(_BYTE *)(v0 + 249);
      v123 = *(_BYTE *)(v0 + 250);
      v20 = sub_24A17B434(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v13 = v20[2];
      v22 = v20[3];
      v16 = v13 + 1;
      if (v13 < v22 >> 1)
        goto LABEL_36;
      goto LABEL_44;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    swift_bridgeObjectRelease();
    objc_msgSend(v69, sel_speechResultsWithResult_, v55);
    swift_unknownObjectRelease();

    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17939C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 536) + 8))(*(_QWORD *)(v0 + 544), *(_QWORD *)(v0 + 528));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A179478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_24A215F78();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_24A215F6C();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_24A13DAA8(a1, &qword_25790A7C0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_24A215F54();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_24A1795A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  sub_24A215B70();
  v3[8] = swift_task_alloc();
  sub_24A135F88(&qword_25790BCC0);
  v3[9] = swift_task_alloc();
  v4 = sub_24A135F88(&qword_25790BD68);
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = swift_task_alloc();
  sub_24A135F88(&qword_25790A7C0);
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A179678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  CMTime v20;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(void **)(v0 + 56);
  v5 = *(void **)(v0 + 40);
  v6 = sub_24A215F78();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v3;
  v7[5] = v5;
  v7[6] = v4;
  v8 = v3;
  v9 = v5;
  sub_24A179478(v1, (uint64_t)&unk_25790BD78, (uint64_t)v7);
  swift_release();
  v10 = (uint64_t)v8 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStreamBuilder;
  swift_beginAccess();
  sub_24A1360A0(v10, v2, &qword_25790BCC0);
  v11 = sub_24A135F88(&qword_25790BCA0);
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v2, 1, v11);
  if ((_DWORD)result != 1)
  {
    v14 = *(_QWORD *)(v0 + 48);
    if ((v14 & 0x8000000000000000) == 0)
    {
      v15 = *(_QWORD *)(v0 + 96);
      v17 = *(_QWORD *)(v0 + 80);
      v16 = *(_QWORD *)(v0 + 88);
      v18 = *(_QWORD *)(v0 + 72);
      v19 = *(id *)(v0 + 40);
      CMTimeMake(&v20, v14, 1);
      sub_24A215B64();
      sub_24A215F9C();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, v11);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17985C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t sub_24A179878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 24);
    v2 = *(_QWORD *)(v0 + 32);
    v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 552);
    swift_retain();
    v4(v3, v2);
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A179904()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[5] = v0;
  sub_24A135F88(&qword_25790BCC0);
  v1[6] = swift_task_alloc();
  v2 = sub_24A215A8C();
  v1[7] = v2;
  v1[8] = *(_QWORD *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A179988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_24A215A74();
  v6 = sub_24A2160F8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_24A12D000, v5, v6, "Stopping speech API spotter", v7, 2u);
    MEMORY[0x24BD0AAAC](v7, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 48);
  v10 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 40);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  *(_BYTE *)(v12 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_stopped) = 1;
  v13 = v12 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStreamBuilder;
  swift_beginAccess();
  sub_24A1360A0(v13, v11, &qword_25790BCC0);
  v14 = sub_24A135F88(&qword_25790BCA0);
  v15 = *(_QWORD *)(v14 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 40);
    v17 = *(_QWORD *)(v0 + 48);
    sub_24A215FA8();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAnalyzer);
    *(_QWORD *)(v0 + 80) = v19;
    if (v19)
    {
      swift_retain();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 88) = v20;
      *v20 = v0;
      v20[1] = sub_24A179CA4;
      return sub_24A215AB0();
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 40);
      v22 = *(_QWORD *)(v21 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector);
      if (v22)
      {
        v23 = *(void (**)(uint64_t))(*(_QWORD *)v22 + 560);
        v24 = swift_retain();
        v23(v24);
        swift_release();
        v21 = *(_QWORD *)(v0 + 40);
      }
      v25 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask;
      if (*(_QWORD *)(v21 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask))
      {
        swift_retain();
        sub_24A135F88(&qword_25790A8B8);
        sub_24A215FCC();
        swift_release();
        v26 = *(_QWORD *)(v0 + 40);
      }
      else
      {
        v26 = v21;
      }
      *(_QWORD *)(v21 + v25) = 0;
      swift_release();
      v27 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask;
      if (*(_QWORD *)(v26 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask))
      {
        swift_retain();
        sub_24A135F88(&qword_25790A8B8);
        sub_24A215FCC();
        swift_release();
      }
      *(_QWORD *)(v26 + v27) = 0;
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  return result;
}

uint64_t sub_24A179CA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_24A179D10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetector);
  if (v2)
  {
    v3 = v0[12];
    v4 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 560);
    v5 = swift_retain();
    v4(v5);
    swift_release();
    if (v3)
    {
      swift_task_dealloc();
      swift_task_dealloc();
      v6 = (uint64_t (*)(void))v0[1];
      return v6();
    }
    v1 = v0[5];
  }
  v7 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_vadTask))
  {
    swift_retain();
    sub_24A135F88(&qword_25790A8B8);
    sub_24A215FCC();
    swift_release();
    v8 = v0[5];
  }
  else
  {
    v8 = v1;
  }
  *(_QWORD *)(v1 + v7) = 0;
  swift_release();
  v9 = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask;
  if (*(_QWORD *)(v8 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_recognizerTask))
  {
    swift_retain();
    sub_24A135F88(&qword_25790A8B8);
    sub_24A215FCC();
    swift_release();
  }
  *(_QWORD *)(v8 + v9) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_24A179E84()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A179ECC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD v11[2];

  v2 = sub_24A215A8C();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A1B9D90();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v7 = sub_24A215A74();
  v8 = sub_24A2160F8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v9 = 134217984;
    v11[1] = a1;
    sub_24A216260();
    _os_log_impl(&dword_24A12D000, v7, v8, "General ASR model loaded %ld%%", v9, 0xCu);
    MEMORY[0x24BD0AAAC](v9, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24A179FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[147] = a5;
  v5[146] = a4;
  sub_24A135F88(&qword_25790A7C0);
  v5[148] = swift_task_alloc();
  v6 = sub_24A215A8C();
  v5[149] = v6;
  v5[150] = *(_QWORD *)(v6 - 8);
  v5[151] = swift_task_alloc();
  v5[152] = swift_task_alloc();
  v7 = sub_24A135F88(&qword_25790BDC8);
  v5[153] = v7;
  v5[154] = *(_QWORD *)(v7 - 8);
  v5[155] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A17A0C0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A135F88(&qword_25790A838);
  sub_24A215FB4();
  *(_QWORD *)(v0 + 1248) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_audioDuringSpeech;
  *(_QWORD *)(v0 + 1256) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_timingInfo;
  *(_QWORD *)(v0 + 1264) = OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_asrDelegate;
  *(_BYTE *)(v0 + 139) = 0;
  *(_OWORD *)(v0 + 1272) = 0u;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1288) = v1;
  *v1 = v0;
  v1[1] = sub_24A17A17C;
  return sub_24A215FC0();
}

uint64_t sub_24A17A17C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_24A17A1D0()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void (*v10)(void);
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  id v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[2];

  v1 = (_OWORD *)(v0 + 16);
  sub_24A15FCCC(v0 + 272, v0 + 144);
  sub_24A15FCCC(v0 + 144, v0 + 16);
  if (sub_24A15FED0((uint64_t *)(v0 + 16)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 1176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1232) + 8))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1224));
    v3 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v2
                                                         + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechAPISpotterConfiguration)
                                           + 160);
    v4 = swift_retain();
    LOBYTE(v3) = v3(v4);
    swift_release();
    if ((v3 & 1) != 0)
    {
      v5 = *(_QWORD *)(v0 + 1184);
      v6 = *(void **)(v0 + 1176);
      v7 = sub_24A215F78();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
      v8 = (_QWORD *)swift_allocObject();
      v8[2] = 0;
      v8[3] = 0;
      v8[4] = v6;
      v9 = v6;
      sub_24A179478(v5, (uint64_t)&unk_25790BDD8, (uint64_t)v8);
      swift_release();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v10 = *(void (**)(void))(v0 + 8);
    goto LABEL_23;
  }
  LODWORD(v11) = *(unsigned __int8 *)(v0 + 32);
  if ((_DWORD)v11 == 1)
  {
    v12 = *(void **)(v0 + 1280);
    v13 = *(_QWORD **)(v0 + 1176);
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 1272);
      v15 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v13) + 0x440);
      sub_24A17C23C((id *)(v0 + 144));
      v16 = v12;
      v17 = v15();
      if (v14)
      {
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1232) + 8))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1224));
        v18 = v16;
LABEL_22:

        sub_24A15FD14((id *)(v0 + 144));
        sub_24A15FD14((id *)(v0 + 144));
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v10 = *(void (**)(void))(v0 + 8);
LABEL_23:
        v10();
        return;
      }
      v56 = v17;
      v57 = *(_QWORD *)(v0 + 1248);
      v58 = *(_QWORD *)(v0 + 1176);
      sub_24A15FD14((id *)(v0 + 144));
      v59 = *(void **)(v58 + v57);
      *(_QWORD *)(v58 + v57) = v56;

      v101 = 0;
    }
    else
    {
      v52 = *(_QWORD *)(v0 + 1248);
      v53 = *(void **)((char *)v13 + v52);
      *(_QWORD *)((char *)v13 + v52) = *(_QWORD *)(v0 + 16);
      sub_24A15FCCC(v0 + 144, v0 + 784);
      sub_24A17C23C((id *)(v0 + 784));

      v101 = *(_QWORD *)(v0 + 1272);
    }
    v60 = *(_QWORD *)(v0 + 1216);
    v61 = *(_QWORD *)(v0 + 1200);
    v62 = *(_QWORD *)(v0 + 1192);
    v63 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v63, v62);
    sub_24A15FCCC(v0 + 144, v0 + 912);
    sub_24A17C23C((id *)(v0 + 144));
    sub_24A17C23C((id *)(v0 + 912));
    v64 = sub_24A215A74();
    v65 = sub_24A2160F8();
    v66 = os_log_type_enabled(v64, v65);
    v67 = *(_QWORD *)(v0 + 1216);
    v68 = *(_QWORD *)(v0 + 1200);
    v69 = *(_QWORD *)(v0 + 1192);
    if (v66)
    {
      v98 = *(_QWORD *)(v0 + 1216);
      v11 = swift_slowAlloc();
      v95 = v69;
      v70 = swift_slowAlloc();
      v102[0] = v70;
      *(_DWORD *)v11 = 136315138;
      v71 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 1104) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 1120) = v71;
      *(_OWORD *)(v0 + 1136) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v0 + 1147) = *(_OWORD *)(v0 + 123);
      v72 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 1040) = *v1;
      *(_OWORD *)(v0 + 1056) = v72;
      v73 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 1072) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 1088) = v73;
      sub_24A17C264();
      v74 = sub_24A216584();
      *(_QWORD *)(v11 + 4) = sub_24A148270(v74, v75, v102);
      swift_bridgeObjectRelease();
      sub_24A15FD14((id *)(v0 + 144));
      sub_24A15FD14((id *)(v0 + 144));
      _os_log_impl(&dword_24A12D000, v64, v65, "Got start-of-speech: %s", (uint8_t *)v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v70, -1, -1);
      v76 = v11;
      LOBYTE(v11) = 1;
      MEMORY[0x24BD0AAAC](v76, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v98, v95);
    }
    else
    {
      sub_24A15FD14((id *)(v0 + 144));
      sub_24A15FD14((id *)(v0 + 144));

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    }
    v77 = *(_QWORD *)(v0 + 1256);
    v78 = *(_QWORD *)(v0 + 1176);
    type metadata accessor for VATimingInfo();
    v79 = swift_unknownObjectRetain();
    v80 = sub_24A1F508C(v79);
    v81 = *(void **)(v78 + v77);
    *(_QWORD *)(v78 + v77) = v80;

    v82 = *(_QWORD **)(v78 + v77);
    if (!v82)
    {
      sub_24A15FD14((id *)(v0 + 144));
      goto LABEL_34;
    }
    if ((*(_BYTE *)(v0 + 48) & 1) == 0)
    {
      v83 = *(_QWORD *)(v0 + 40);
      v84 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v82) + 0x208);
      v85 = v82;
      v84(v83);
      sub_24A15FD14((id *)(v0 + 144));

LABEL_34:
      v55 = v101;
LABEL_38:
      v54 = 0;
      *(_BYTE *)(v0 + 139) = v11;
      goto LABEL_39;
    }
    goto LABEL_41;
  }
  if (*(_BYTE *)(v0 + 33) == 1)
  {
    v19 = *(_QWORD **)(v0 + 1176);
    v20 = *(_QWORD **)((char *)v19 + *(_QWORD *)(v0 + 1256));
    if (v20)
    {
      if (*(_BYTE *)(v0 + 64) == 1)
      {
LABEL_42:
        v92 = *(void **)(v0 + 1280);
        v93 = v20;

        __break(1u);
        goto LABEL_43;
      }
      v21 = *(_QWORD *)(v0 + 56);
      v22 = *(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v20) + 0x210);
      v23 = v20;
      v22(v21);

      v19 = *(_QWORD **)(v0 + 1176);
    }
    v24 = *(void **)((char *)v19 + *(_QWORD *)(v0 + 1248));
    if (!v24)
    {

      __break(1u);
LABEL_41:
      v91 = v82;
      __break(1u);
      goto LABEL_42;
    }
    v25 = *(_QWORD *)(v0 + 1272);
    v26 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v19) + 0x440);
    sub_24A17C23C((id *)(v0 + 144));
    v18 = v24;
    v27 = v26();
    v16 = *(id *)(v0 + 1280);
    if (!v25)
    {
      v28 = v27;
      v99 = v11;
      v29 = *(_QWORD *)(v0 + 1248);
      v30 = *(_QWORD *)(v0 + 1208);
      v94 = *(_QWORD *)(v0 + 1200);
      v96 = *(_QWORD *)(v0 + 1192);
      v31 = *(_QWORD *)(v0 + 1176);
      sub_24A15FD14((id *)(v0 + 144));

      v32 = *(void **)(v31 + v29);
      *(_QWORD *)(v31 + v29) = v28;

      v33 = sub_24A1B9D90();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v30, v33, v96);
      sub_24A15FCCC(v0 + 144, v0 + 400);
      sub_24A17C23C((id *)(v0 + 144));
      sub_24A17C23C((id *)(v0 + 400));
      v34 = sub_24A215A74();
      v35 = sub_24A2160F8();
      v36 = os_log_type_enabled(v34, v35);
      v37 = *(_QWORD *)(v0 + 1208);
      v38 = *(_QWORD *)(v0 + 1200);
      v39 = *(_QWORD *)(v0 + 1192);
      if (v36)
      {
        v100 = *(_QWORD *)(v0 + 1192);
        v40 = swift_slowAlloc();
        v97 = v37;
        v41 = swift_slowAlloc();
        v102[0] = v41;
        *(_DWORD *)v40 = 136315138;
        v42 = *(_OWORD *)(v0 + 96);
        *(_OWORD *)(v0 + 720) = *(_OWORD *)(v0 + 80);
        *(_OWORD *)(v0 + 736) = v42;
        *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 112);
        *(_OWORD *)(v0 + 763) = *(_OWORD *)(v0 + 123);
        v43 = *(_OWORD *)(v0 + 32);
        *(_OWORD *)(v0 + 656) = *v1;
        *(_OWORD *)(v0 + 672) = v43;
        v44 = *(_OWORD *)(v0 + 64);
        *(_OWORD *)(v0 + 688) = *(_OWORD *)(v0 + 48);
        *(_OWORD *)(v0 + 704) = v44;
        sub_24A17C264();
        v45 = sub_24A216584();
        *(_QWORD *)(v40 + 4) = sub_24A148270(v45, v46, v102);
        swift_bridgeObjectRelease();
        sub_24A15FD14((id *)(v0 + 144));
        sub_24A15FD14((id *)(v0 + 144));
        _os_log_impl(&dword_24A12D000, v34, v35, "Got end-of-speech: %s", (uint8_t *)v40, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0AAAC](v41, -1, -1);
        MEMORY[0x24BD0AAAC](v40, -1, -1);

        sub_24A15FD14((id *)(v0 + 144));
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v97, v100);
      }
      else
      {
        sub_24A15FD14((id *)(v0 + 144));
        sub_24A15FD14((id *)(v0 + 144));
        sub_24A15FCCC(v0 + 144, v0 + 528);
        sub_24A15FD14((id *)(v0 + 528));

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      v55 = 0;
      LOBYTE(v11) = v99;
      goto LABEL_38;
    }
LABEL_21:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1232) + 8))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1224));
    goto LABEL_22;
  }
  if (*(_BYTE *)(v0 + 139) != 1)
  {

    v54 = *(_QWORD *)(v0 + 16);
    v55 = *(_QWORD *)(v0 + 1272);
    goto LABEL_39;
  }
  v47 = *(_QWORD **)(v0 + 1176);
  v48 = *(void **)((char *)v47 + *(_QWORD *)(v0 + 1248));
  if (v48)
  {
    v49 = *(_QWORD *)(v0 + 1272);
    v50 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v47) + 0x440);
    sub_24A17C23C((id *)(v0 + 144));
    v18 = v48;
    v51 = v50();
    if (v49)
    {
      v16 = *(id *)(v0 + 1280);
      goto LABEL_21;
    }
    v86 = v51;
    v87 = *(_QWORD *)(v0 + 1248);
    v88 = *(_QWORD *)(v0 + 1176);
    sub_24A15FD14((id *)(v0 + 144));

    v89 = *(void **)(v88 + v87);
    *(_QWORD *)(v88 + v87) = v86;

    sub_24A15FD14((id *)(v0 + 144));
    v55 = 0;
    v54 = *(_QWORD *)(v0 + 1280);
LABEL_39:
    *(_QWORD *)(v0 + 1280) = v54;
    *(_QWORD *)(v0 + 1272) = v55;
    v90 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1288) = v90;
    *v90 = v0;
    v90[1] = sub_24A17A17C;
    sub_24A215FC0();
    return;
  }
LABEL_43:

  __break(1u);
}

uint64_t sub_24A17AAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = sub_24A215A8C();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A17AB14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(void);

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[3];
  v4 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_24A215A74();
  v6 = sub_24A2160F8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_24A12D000, v5, v6, "in batch audio mode, stopping spotter after VAD detector is done", v7, 2u);
    MEMORY[0x24BD0AAAC](v7, -1, -1);
  }
  v9 = v0[4];
  v8 = v0[5];
  v11 = (_QWORD *)v0[2];
  v10 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v12 = *(int **)((*MEMORY[0x24BEE4EA0] & *v11) + 0xB8);
  v15 = (uint64_t (*)(void))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  v0[6] = v13;
  *v13 = v0;
  v13[1] = sub_24A17AC34;
  return v15();
}

uint64_t sub_24A17AC34()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A17AC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1360A0(a1, (uint64_t)v7, &qword_25790A7C0);
  v8 = sub_24A215F78();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_24A13DAA8((uint64_t)v7, &qword_25790A7C0);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    sub_24A215F6C();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v10 = sub_24A215F54();
  v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

void sub_24A17AE04(void *a1, void *a2)
{
  id v4;
  id v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  id v11;
  const void *v12;
  char *v13;
  unsigned int v14;
  id v15;
  unsigned int *v16;
  unint64_t v17;
  const void *v18;
  unsigned int v19;
  id v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  id v24;
  unsigned int *v25;
  unint64_t v26;
  _QWORD *v27;
  const char *v28;

  sub_24A17C050();
  v4 = objc_msgSend(a1, sel_format);
  v5 = objc_msgSend(a2, sel_format);
  v6 = sub_24A2161C4();

  if ((v6 & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    *v27 = 0xD000000000000021;
    v28 = "Buffers must have the same format";
LABEL_13:
    v27[1] = (unint64_t)(v28 - 32) | 0x8000000000000000;
    swift_willThrow();
    return;
  }
  v7 = objc_msgSend(a1, sel_frameCapacity);
  v8 = objc_msgSend(a2, sel_frameCapacity);
  v9 = v7 + v8;
  if (__CFADD__(v7, v8))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v10 = objc_msgSend(a1, sel_format);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB1838]), sel_initWithPCMFormat_frameCapacity_, v10, v9);

  if (!v11)
  {
    sub_24A14C404();
    swift_allocError();
    *v27 = 0xD000000000000024;
    v28 = "Failed to create concatenated buffer";
    goto LABEL_13;
  }
  objc_msgSend(v11, sel_setFrameLength_, v9);
  v12 = (const void *)*((_QWORD *)objc_msgSend(a1, sel_audioBufferList) + 2);
  if (!v12)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v13 = (char *)*((_QWORD *)objc_msgSend(v11, sel_audioBufferList) + 2);
  if (!v13)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = objc_msgSend(a1, sel_frameLength);
  v15 = objc_msgSend(a1, sel_format);
  v16 = (unsigned int *)objc_msgSend(v15, sel_streamDescription);

  v17 = v16[6] * (unint64_t)v14;
  if ((v17 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_15;
  memcpy(v13, v12, v17);
  v18 = (const void *)*((_QWORD *)objc_msgSend(a2, sel_audioBufferList) + 2);
  if (v18)
  {
    v19 = objc_msgSend(a1, sel_frameLength);
    v20 = objc_msgSend(a1, sel_format);
    v21 = (unsigned int *)objc_msgSend(v20, sel_streamDescription);

    v22 = v21[6] * (unint64_t)v19;
    if ((v22 & 0xFFFFFFFF00000000) == 0)
    {
      v23 = objc_msgSend(a2, sel_frameLength);
      v24 = objc_msgSend(a2, sel_format);
      v25 = (unsigned int *)objc_msgSend(v24, sel_streamDescription);

      v26 = v25[6] * (unint64_t)v23;
      if ((v26 & 0xFFFFFFFF00000000) == 0)
      {
        memcpy(&v13[v22 & 0xFFFFFFFE], v18, v26);
        return;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_20:
  __break(1u);
}

void sub_24A17B130()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A17B15C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStream, &qword_25790BCB8);
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_inputStreamBuilder, &qword_25790BCC0);

  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  sub_24A13DAA8(v0 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_speechDetectorOutputStream, &qword_25790A858);
  sub_24A176794(*(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions18VASpeechAPISpotter_runtimeParameters));

  return swift_release();
}

id VASpeechAPISpotter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VASpeechAPISpotter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *sub_24A17B434(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A810);
      v10 = (_QWORD *)swift_allocObject();
      v11 = j__malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A17C7DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17B540(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return swift_task_switch();
}

uint64_t sub_24A17B558()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v2 = v0[18];
  v1 = v0[19];
  v3 = objc_allocWithZone(MEMORY[0x24BDE9E00]);
  v4 = (void *)sub_24A215C90();
  v5 = objc_msgSend(v3, sel_initWithLanguage_assetType_, v4, 7);
  v0[20] = v5;

  v6 = (void *)objc_opt_self();
  v7 = sub_24A215C90();
  v0[21] = v7;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  v0[14] = sub_24A17C8CC;
  v0[15] = v8;
  v9 = MEMORY[0x24BDAC760];
  v0[10] = MEMORY[0x24BDAC760];
  v0[11] = 1107296256;
  v0[12] = sub_24A1769F8;
  v0[13] = &unk_251B9A128;
  v10 = _Block_copy(v0 + 10);
  v0[22] = v10;
  swift_retain();
  swift_release();
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_24A17B714;
  v11 = swift_continuation_init();
  v0[10] = v9;
  v0[11] = 0x40000000;
  v0[12] = sub_24A176A34;
  v0[13] = &unk_251B9A150;
  v0[14] = v11;
  objc_msgSend(v6, sel_fetchAssetWithConfig_clientIdentifier_progress_completion_, v5, v7, v10, v0 + 10);
  return swift_continuation_await();
}

uint64_t sub_24A17B714()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_24A17B774()
{
  uint64_t v0;
  void *v1;
  const void *v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(const void **)(v0 + 176);

  swift_bridgeObjectRelease();
  _Block_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A17B7C0()
{
  uint64_t v0;
  const void *v1;
  void *v2;
  void *v3;

  v1 = *(const void **)(v0 + 176);
  v3 = *(void **)(v0 + 160);
  v2 = *(void **)(v0 + 168);
  swift_willThrow();

  _Block_release(v1);
  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A17B824(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_24A215B04();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_24A135F88(&qword_25790BE28);
    v10 = sub_24A2162F0();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_24A137FF0(&qword_25790BE30, (uint64_t (*)(uint64_t))MEMORY[0x24BDE9C60], MEMORY[0x24BDE9C70]);
      v14 = sub_24A215C48();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_24A137FF0(&qword_25790BE38, (uint64_t (*)(uint64_t))MEMORY[0x24BDE9C60], MEMORY[0x24BDE9C78]);
          v20 = sub_24A215C6C();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_24A17BA8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;

  v2 = sub_24A215B34();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_24A135F88(&qword_25790BE10);
    v10 = sub_24A2162F0();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v29 = v9;
    v30 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v33 = v10 + 56;
    v32(v8, v30, v2);
    while (1)
    {
      sub_24A137FF0(&qword_25790BE18, (uint64_t (*)(uint64_t))MEMORY[0x24BDE9CB8], MEMORY[0x24BDE9CC8]);
      v14 = sub_24A215C48();
      v15 = -1 << *(_BYTE *)(v10 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      v18 = *(_QWORD *)(v33 + 8 * (v16 >> 6));
      v19 = 1 << v16;
      if (((1 << v16) & v18) != 0)
      {
        v31 = v11;
        v20 = ~v15;
        do
        {
          v32(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_24A137FF0(&qword_25790BE20, (uint64_t (*)(uint64_t))MEMORY[0x24BDE9CB8], MEMORY[0x24BDE9CD0]);
          v21 = sub_24A215C6C();
          v22 = v3;
          v23 = *(void (**)(char *, uint64_t))(v3 + 8);
          v23(v6, v2);
          if ((v21 & 1) != 0)
          {
            v23(v8, v2);
            v3 = v22;
            v9 = v29;
            v11 = v31;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v20;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v33 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v22;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v29;
        v11 = v31;
      }
      *(_QWORD *)(v33 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v25 = *(_QWORD *)(v10 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
        break;
      *(_QWORD *)(v10 + 16) = v27;
LABEL_4:
      if (++v11 == v9)
        return v10;
      v32(v8, v30 + v13 * v11, v2);
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

unint64_t sub_24A17BCF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790BD28;
  if (!qword_25790BD28)
  {
    v1 = sub_24A139148(&qword_25790BC98);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE6AA8], v1);
    atomic_store(result, &qword_25790BD28);
  }
  return result;
}

uint64_t sub_24A17BD44(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24A17BD74()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24A17BDB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_24A15FEEC;
  return sub_24A17845C(a1, v6, v7, v4, v1 + 40);
}

uint64_t sub_24A17BE18()
{
  return sub_24A17BFA8();
}

uint64_t sub_24A17BE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_24A152AD0;
  *(_OWORD *)(v2 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = sub_24A178364;
  return sub_24A17C2CC();
}

uint64_t sub_24A17BE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_24A135F88(&qword_25790A838);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_24A17BF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(sub_24A135F88(&qword_25790A838) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_24A152AD0;
  return sub_24A179FFC((uint64_t)v6, v7, v8, v4, v5);
}

uint64_t sub_24A17BFA0()
{
  return sub_24A17BFA8();
}

uint64_t sub_24A17BFA8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A17BFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_24A15FEEC;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch();
}

unint64_t sub_24A17C050()
{
  unint64_t result;

  result = qword_25790BD88;
  if (!qword_25790BD88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25790BD88);
  }
  return result;
}

uint64_t sub_24A17C08C()
{
  return type metadata accessor for VASpeechAPISpotter();
}

void sub_24A17C094()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_24A15FC64(319, &qword_25790BDB8, &qword_25790BC98);
  if (v0 <= 0x3F)
  {
    sub_24A15FC64(319, &qword_25790BDC0, &qword_25790BCA0);
    if (v1 <= 0x3F)
    {
      sub_24A15FC64(319, &qword_25790A900, &qword_25790A838);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for VASpeechAPISpotter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VASpeechAPISpotter.__allocating_init(delegate:asrDelegate:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1064))();
}

uint64_t sub_24A17C1C4()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A17C1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_24A15FEEC;
  return sub_24A17AAB4((uint64_t)v3, v4, v5, v2);
}

id *sub_24A17C23C(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

unint64_t sub_24A17C264()
{
  unint64_t result;

  result = qword_25790BDE0;
  if (!qword_25790BDE0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASpeechDetectorOutput, &type metadata for VASpeechDetectorOutput);
    atomic_store(result, &qword_25790BDE0);
  }
  return result;
}

uint64_t sub_24A17C2A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A17C2CC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_24A215A8C();
  v0[17] = v1;
  v0[18] = *(_QWORD *)(v1 - 8);
  v0[19] = swift_task_alloc();
  v0[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A17C338()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)objc_opt_self();
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_24A17C3E4;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_24A176944;
  v3[3] = &unk_251B9A0E8;
  v3[4] = v2;
  objc_msgSend(v1, sel_installedLanguagesForTaskHint_completion_, 1009, v3);
  return swift_continuation_await();
}

uint64_t sub_24A17C3E4()
{
  return swift_task_switch();
}

uint64_t sub_24A17C430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  char *v14;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 144);
    v2 = *(_QWORD *)(v0 + 152);
    v4 = *(_QWORD *)(v0 + 136);
    v5 = sub_24A1B9D90();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v6 = sub_24A215A74();
    v7 = sub_24A2160EC();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_24A12D000, v6, v7, "General ASR model already exists", v8, 2u);
      MEMORY[0x24BD0AAAC](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 136);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = (char *)&dword_25790BCD8 + dword_25790BCD8;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v13;
    *v13 = v0;
    v13[1] = sub_24A17C588;
    return ((uint64_t (*)(uint64_t (*)(uint64_t), _QWORD))v14)(sub_24A179ECC, 0);
  }
}

uint64_t sub_24A17C588()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_24A17C608()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = sub_24A1B9D90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v5, v1);
  v6 = v2;
  v7 = v2;
  v8 = sub_24A215A74();
  v9 = sub_24A216104();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void **)(v0 + 176);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = v10;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 128) = v14;
    sub_24A216260();
    *v12 = v14;

    _os_log_impl(&dword_24A12D000, v8, v9, "Failed to download general ASR model: %@", v11, 0xCu);
    sub_24A135F88(&qword_25790A820);
    swift_arrayDestroy();
    MEMORY[0x24BD0AAAC](v12, -1, -1);
    MEMORY[0x24BD0AAAC](v11, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 176);

  }
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A17C7DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

uint64_t sub_24A17C8CC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24A17C8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_24A17C8FC()
{
  return swift_release();
}

Swift::String __swiftcall VATempDir()()
{
  void *v0;
  uint64_t v1;
  Swift::String result;

  v0 = (void *)0x800000024A222E70;
  v1 = 0xD000000000000011;
  result._object = v0;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAfp16AVAudioBufferToFP32Array(buffer:floatBuffer:)(AVAudioPCMBuffer buffer, Swift::OpaquePointer *floatBuffer)
{
  uint64_t *impl;
  Class isa;
  const __int16 **v4;
  const __int16 **v5;
  unint64_t v6;
  const __int16 *v7;
  uint64_t v8;
  int32x2_t v9;
  _QWORD *v10;

  impl = (uint64_t *)buffer.super._impl;
  isa = buffer.super.super.isa;
  v4 = (const __int16 **)-[objc_class int16ChannelData](buffer.super.super.isa, sel_int16ChannelData, floatBuffer);
  if (v4)
  {
    v5 = v4;
    v6 = -[objc_class frameLength](isa, sel_frameLength);
    v7 = *v5;
    v8 = *impl;
    if (*(_QWORD *)(*impl + 16) != v6)
    {
      swift_bridgeObjectRelease();
      v9.i32[0] = 0;
      v8 = sub_24A1420E4(v6, v9);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = (uint64_t)sub_24A147E34(0, *(_QWORD *)(v8 + 16), 0, (char *)v8);
    *impl = v8;
    vDSP_vflt16(v7, 1, (float *)(v8 + 32), 1, v6);
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v10 = 0xD000000000000012;
    v10[1] = 0x800000024A222E90;
    swift_willThrow();
  }
}

uint64_t sub_24A17CA38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_24A135F88(a3);
      v5 = (_QWORD *)sub_24A215EF4();
      v6 = v5;
      v5[2] = a2;
      v5[4] = a1;
      if (a2 != 1)
      {
        v5[5] = a1;
        v7 = a2 - 2;
        if (v7)
        {
          v8 = v5 + 6;
          do
          {
            *v8++ = a1;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_24A17CB24(_QWORD *a1, double a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  _BYTE v9[24];
  uint64_t v10;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v4, sel_setNumberStyle_, 1);
  objc_msgSend(v4, sel_setMaximumFractionDigits_, 4);
  objc_msgSend(v4, sel_setMinimumFractionDigits_, 2);
  v5 = (void *)sub_24A215C90();
  objc_msgSend(v4, sel_setDecimalSeparator_, v5);

  sub_24A14B668(a1, a1[3]);
  sub_24A216680();
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, a2);
  v7 = objc_msgSend(v4, sel_stringFromNumber_, v6);

  if (v7)
  {
    sub_24A215CB4();

  }
  sub_24A17F4C4((uint64_t)v9, v10);
  sub_24A2165A8();
  swift_bridgeObjectRelease();

  return sub_24A14D184((uint64_t)v9);
}

uint64_t sub_24A17CCBC(_QWORD *a1)
{
  double *v1;

  return sub_24A17CB24(a1, *v1);
}

uint64_t sub_24A17CCD4(_QWORD *a1, float a2)
{
  id v4;
  void *v5;
  id v6;
  double v7;
  id v8;
  id v9;
  _BYTE v11[24];
  uint64_t v12;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
  objc_msgSend(v4, sel_setNumberStyle_, 1);
  objc_msgSend(v4, sel_setMaximumFractionDigits_, 4);
  objc_msgSend(v4, sel_setMinimumFractionDigits_, 2);
  v5 = (void *)sub_24A215C90();
  objc_msgSend(v4, sel_setDecimalSeparator_, v5);

  sub_24A14B668(a1, a1[3]);
  sub_24A216680();
  v6 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
  *(float *)&v7 = a2;
  v8 = objc_msgSend(v6, sel_initWithFloat_, v7);
  v9 = objc_msgSend(v4, sel_stringFromNumber_, v8);

  if (v9)
  {
    sub_24A215CB4();

  }
  sub_24A17F4C4((uint64_t)v11, v12);
  sub_24A2165A8();
  swift_bridgeObjectRelease();

  return sub_24A14D184((uint64_t)v11);
}

uint64_t sub_24A17CE6C(_QWORD *a1)
{
  float *v1;

  return sub_24A17CCD4(a1, *v1);
}

uint64_t sub_24A17CE90()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A17CEBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_24A17CED0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_24A17CEDC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_24A17CEEC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_24A216638();
  sub_24A215D50();
  sub_24A216650();
  if (v1 != 1)
    sub_24A216644();
  return sub_24A21665C();
}

uint64_t sub_24A17CF74()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_24A215D50();
  if (v1 == 1)
    return sub_24A216650();
  sub_24A216650();
  return sub_24A216644();
}

uint64_t sub_24A17CFD4()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_24A216638();
  sub_24A215D50();
  sub_24A216650();
  if (v1 != 1)
    sub_24A216644();
  return sub_24A21665C();
}

_QWORD *sub_24A17D058@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_24A17D070()
{
  sub_24A16BBDC();
  return sub_24A2166A4();
}

uint64_t sub_24A17D098()
{
  sub_24A16BBDC();
  return sub_24A2166B0();
}

uint64_t sub_24A17D0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  char v7;
  uint64_t result;
  char v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v6 || (v7 = sub_24A21659C(), result = 0, (v7 & 1) != 0))
  {
    if ((v3 & 1) != 0)
    {
      if (v5)
        return 1;
    }
    else
    {
      if (v2 == v4)
        v9 = v5;
      else
        v9 = 1;
      if ((v9 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_24A17D140@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[4];

  v14[2] = a1;
  v3 = sub_24A215750();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v8 = (void *)sub_24A215C90();
  v9 = objc_msgSend(v7, sel_isReadableFileAtPath_, v8);

  if ((v9 & 1) != 0)
  {
    v14[0] = v3;
    sub_24A215714();
    v10 = sub_24A21575C();
    v12 = v11;
    sub_24A2155D0();
    swift_allocObject();
    sub_24A135EC4(v10, v12);
    sub_24A2155C4();
    sub_24A2155B8();
    swift_release();
    sub_24A135F1C(v10, v12);
    sub_24A135F1C(v10, v12);
    (*(void (**)(char *, _QWORD))(v4 + 8))(v6, v14[0]);
  }
  else
  {
    *a2 = 0x8000000000000000;
  }
  sub_24A14D2EC();
  sub_24A216668();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A17D3D0()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  _QWORD v5[6];

  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = sub_24A17F580;
  *(_QWORD *)(v2 + 24) = v0;
  v5[4] = sub_24A17C8CC;
  v5[5] = v2;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = sub_24A17D4D8;
  v5[3] = &unk_251B9A1C8;
  v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_24A17D4D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_24A17D4F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t (*v9)(void);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v1 = sub_24A215A8C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[2];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_24A17F5F4;
  *(_QWORD *)(v6 + 24) = v0;
  aBlock[4] = sub_24A180168;
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24A17D4D8;
  aBlock[3] = &unk_251B9A218;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v5, v7);
  _Block_release(v7);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v9 = *(uint64_t (**)(void))(*v0 + 96);
    if (((uint64_t (*)(uint64_t))v9)(result) >= 2)
    {
      v10 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v10, v1);
      swift_retain();
      v11 = sub_24A215A74();
      v12 = sub_24A216104();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        v15 = v1;
        *(_DWORD *)v13 = 134217984;
        aBlock[0] = v9();
        v1 = v15;
        sub_24A216260();
        swift_release();
        _os_log_impl(&dword_24A12D000, v11, v12, "!!!!! falling behind...LoopCount %ld", v13, 0xCu);
        MEMORY[0x24BD0AAAC](v13, -1, -1);

      }
      else
      {

        swift_release();
      }
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_24A17D75C()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_24A17D780()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_24A17D7B4();
  return v0;
}

uint64_t sub_24A17D7B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v1 = sub_24A216128();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_24A21611C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_24A215BF4();
  MEMORY[0x24BDAC7A8](v6);
  sub_24A16D544(0, &qword_25790BE40);
  sub_24A215BDC();
  v8[1] = MEMORY[0x24BEE4AF8];
  sub_24A17F4EC();
  sub_24A135F88(&qword_25790BE50);
  sub_24A17F534();
  sub_24A2162D8();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  *(_QWORD *)(v0 + 16) = sub_24A216140();
  *(_QWORD *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_24A17D958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = swift_allocObject();
  if (a1 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    v3 = v2;
    if (a1)
    {
      v4 = sub_24A215EF4();
      *(_QWORD *)(v4 + 16) = a1;
      bzero((void *)(v4 + 32), 4 * a1);
    }
    else
    {
      v4 = MEMORY[0x24BEE4AF8];
    }
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = 0;
    return v3;
  }
  return result;
}

uint64_t sub_24A17DA24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(void))(*v2 + 160))();
  v5 = v2[3];
  v6 = __OFADD__(v5, a2);
  v7 = v5 + a2;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    result = swift_beginAccess();
    v8 = *(_QWORD *)(v2[2] + 16);
    if (v8)
    {
      v2[3] = v7 % v8;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17DA94(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(result + 16);
  if (__OFADD__(v2, v3))
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v4 = result;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16) >= (int64_t)(v2 + v3))
    v5 = v2 + v3;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v6 = v5 - v2;
  if (__OFSUB__(v5, v2))
    goto LABEL_14;
  if (v5 < v2 || (v6 & 0x8000000000000000) != 0)
    goto LABEL_15;
  if (v3 < v6)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  swift_beginAccess();
  v7 = (char *)swift_bridgeObjectRetain();
  sub_24A17F810(v7, v4 + 32, 0, (2 * v6) | 1, v2, v5);
  swift_endAccess();
  result = swift_bridgeObjectRelease();
  if (v3 <= v6)
    return result;
  if ((uint64_t)(v3 - v6) < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  v8 = (char *)swift_bridgeObjectRetain();
  sub_24A17F810(v8, v4 + 32, v5 - v2, (2 * v3) | 1, 0, v3 - v6);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A17DBE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (uint64_t *)(v0 + 16);
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 < v1)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v1 < 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRelease();
    v7 = sub_24A14A964(v3, v3 + 32, v1, (2 * v4) | 1);
    goto LABEL_8;
  }
  sub_24A2165C0();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v5 = swift_dynamicCastClass();
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = *(_QWORD *)(v5 + 16);
  swift_release();
  if (v6 != v4 - v1)
    goto LABEL_18;
  v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
  }
LABEL_8:
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v0 + 24);
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  v0 = *v2;
  if (*(_QWORD *)(*v2 + 16) < v8)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRelease();
    v11 = sub_24A14A964(v0, v0 + 32, 0, (2 * v8) | 1);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  swift_release();
  if (v10 != v8)
    goto LABEL_21;
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x24BEE4AF8];
  }
LABEL_15:
  swift_bridgeObjectRelease();
  sub_24A1472A0(v11);
  return v7;
}

uint64_t sub_24A17DDBC()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id sub_24A17DDE0()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  id result;
  id v22;
  void *v23;
  id v24;
  void *v25;
  _QWORD v26[4];
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v0 = (void *)sub_24A215C90();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  if (v1)
    return v1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v3 = objc_msgSend(v2, sel_environment);

  v4 = sub_24A215C24();
  if (!*(_QWORD *)(v4 + 16) || (v5 = sub_24A148970(0xD000000000000013, 0x800000024A222F00), (v6 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v24 = objc_allocWithZone(MEMORY[0x24BDD1488]);
    v25 = (void *)sub_24A215C90();
    v1 = objc_msgSend(v24, sel_initWithPath_, v25);

    return v1;
  }
  v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRelease();
  v28 = 58;
  v29 = 0xE100000000000000;
  MEMORY[0x24BDAC7A8](v10);
  v26[2] = &v28;
  swift_bridgeObjectRetain();
  v11 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A14D1E0, (uint64_t)v26, v8, v9);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  v27 = v11;
  v13 = (uint64_t *)(v11 + 56);
  while (1)
  {
    v14 = *(v13 - 3);
    v15 = *(v13 - 2);
    v17 = *(v13 - 1);
    v16 = *v13;
    v32 = 0;
    v33 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v18 = sub_24A215D5C();
    v19 = sub_24A216230();
    v20 = __OFADD__(v18, v19);
    result = (id)(v18 + v19);
    if (v20)
      break;
    MEMORY[0x24BD09600](result);
    v28 = v14;
    v29 = v15;
    v30 = v17;
    v31 = v16;
    sub_24A17F894();
    sub_24A215D8C();
    v28 = 0xD000000000000020;
    v29 = 0x800000024A222F70;
    sub_24A215D8C();
    swift_bridgeObjectRelease();
    v22 = objc_allocWithZone(MEMORY[0x24BDD1488]);
    v23 = (void *)sub_24A215C90();
    swift_bridgeObjectRelease();
    v1 = objc_msgSend(v22, sel_initWithPath_, v23, v27);

    if (v1)
    {
      swift_bridgeObjectRelease();
      return v1;
    }
    v13 += 4;
    if (!--v12)
      goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A17E11C()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  type metadata accessor for VAKeywordSpotter();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = (void *)sub_24A215C90();
  v3 = (void *)sub_24A215C90();
  v4 = objc_msgSend(v1, sel_pathForResource_ofType_, v2, v3);

  if (v4)
  {
    v5 = sub_24A215CB4();

  }
  else
  {

    return 0;
  }
  return v5;
}

uint64_t sub_24A17E20C()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  v0 = sub_24A17DDE0();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (void *)sub_24A215C90();
  v3 = (void *)sub_24A215C90();
  v4 = objc_msgSend(v1, sel_pathForResource_ofType_, v2, v3);

  if (!v4)
  {

    return 0;
  }
  v5 = sub_24A215CB4();

  return v5;
}

uint64_t sub_24A17E2D0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_24A17E11C();
  if (!v1)
    return sub_24A17E20C();
  return result;
}

uint64_t static VABundleUtil.bundePathFallback(resource:type:)()
{
  uint64_t result;
  uint64_t v1;

  result = sub_24A17E11C();
  if (!v1)
    return sub_24A17E20C();
  return result;
}

uint64_t static VABundleUtil.bundlePathFallback(path:)()
{
  return sub_24A17F8D8();
}

id VABundleUtil.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id VABundleUtil.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VABundleUtil();
  return objc_msgSendSuper2(&v2, sel_init);
}

id VABundleUtil.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VABundleUtil();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_24A17E5C0(unint64_t result, int32x2_t a2)
{
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 16);
  result = v2 * v3;
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 != (v2 * v3) >> 63)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  a2.i32[0] = 0;
  v4 = sub_24A1420E4(result, a2);
  v7 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  for (i = 0; i != v2; ++i)
  {
    v6 = swift_bridgeObjectRetain();
    sub_24A1472A0(v6);
  }
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = (uint64_t)sub_24A147E34(0, *(_QWORD *)(v4 + 16), 0, (char *)v4);
  vDSP_mtrans((const float *)(v7 + 32), 1, (float *)(v4 + 32), 1, v3, v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A17E6B8(uint64_t result, int32x2_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  if (!*(_QWORD *)(result + 16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
    a2.i32[0] = 0;
    v5 = sub_24A1420E4(*(_QWORD *)(v2 + 16), a2);
    result = sub_24A17CA38(v5, v4, &qword_25790A458);
    v6 = (_QWORD *)result;
    v7 = 0;
    while (!v4)
    {
LABEL_4:
      if (++v7 == v3)
        return (uint64_t)v6;
    }
    v8 = 0;
    while (v7 < *(_QWORD *)(v2 + 16))
    {
      v9 = *(_QWORD *)(v2 + 32 + 8 * v7);
      if (v8 >= *(_QWORD *)(v9 + 16))
        goto LABEL_20;
      v10 = *(_QWORD *)(v9 + 8 * v8 + 32);
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_21;
      v11 = *(_DWORD *)(v10 + 32);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_24A14893C(v6);
        v6 = (_QWORD *)result;
      }
      if (v8 >= v6[2])
        goto LABEL_22;
      v12 = &v6[v8];
      v13 = v12[4];
      result = swift_isUniquelyReferenced_nonNull_native();
      v12[4] = v13;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_24A148928(v13);
        v13 = result;
        v12[4] = result;
      }
      if (v7 >= *(_QWORD *)(v13 + 16))
        goto LABEL_23;
      ++v8;
      *(_DWORD *)(v13 + 4 * v7 + 32) = v11;
      if (v4 == v8)
        goto LABEL_4;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_24A17E81C(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  id v14;
  double v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a2;
  if (*a2)
  {
LABEL_2:
    v26 = *(_QWORD *)(a1 + 16);
    if (v26)
    {
      v25 = a1 + 32;
      swift_bridgeObjectRetain();
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(v25 + 8 * v5);
        v29 = *(_QWORD *)(v6 + 16);
        if (v29)
          break;
LABEL_5:
        if (++v5 == v26)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      v28 = v6 + 32;
      v7 = swift_bridgeObjectRetain();
      v8 = 0;
      v27 = v7;
      while (1)
      {
        if (v8 >= *(_QWORD *)(v7 + 16))
        {
          __break(1u);
          goto LABEL_22;
        }
        v9 = *(_QWORD *)(v28 + 8 * v8);
        v10 = *(_QWORD *)(v9 + 16);
        if (v10)
          break;
LABEL_8:
        if (++v8 == v29)
        {
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      swift_bridgeObjectRetain();
      v11 = 0;
      while (v4)
      {
        v12 = *(_DWORD *)(v9 + 4 * v11 + 32);
        sub_24A135F88(&qword_25790BE68);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_24A21AA40;
        *(_QWORD *)(v13 + 32) = sub_24A216074();
        *(_QWORD *)(v13 + 40) = sub_24A216074();
        *(_QWORD *)(v13 + 48) = sub_24A216074();
        sub_24A215EB8();
        v14 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        LODWORD(v15) = v12;
        v16 = objc_msgSend(v14, sel_initWithFloat_, v15);
        sub_24A16D544(0, (unint64_t *)&qword_25790B7A8);
        v17 = v5;
        v18 = (void *)sub_24A215E94();
        swift_bridgeObjectRelease();
        objc_msgSend(v4, sel_setObject_forKeyedSubscript_, v16, v18);

        v5 = v17;
        if (v10 == ++v11)
        {
          swift_bridgeObjectRelease();
          v7 = v27;
          goto LABEL_8;
        }
      }
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    return;
  }
  sub_24A135F88(&qword_25790BE68);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_24A21AA40;
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v20 + 32) = sub_24A216074();
  if (!v21)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v22 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v20 + 40) = sub_24A216074();
  if (!*(_QWORD *)(v22 + 16))
  {
LABEL_24:
    __break(1u);
    return;
  }
  *(_QWORD *)(v20 + 48) = sub_24A216074();
  sub_24A215EB8();
  v23 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v24 = sub_24A17F3CC(v20, 65568);
  if (!v2)
  {
    v4 = v24;
    *a2 = v24;
    goto LABEL_2;
  }
}

void sub_24A17EAF4(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  id v12;
  double v13;
  id v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *a2;
  if (*a2)
  {
LABEL_2:
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
    {
      v21 = a1 + 32;
      swift_bridgeObjectRetain();
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(v21 + 8 * v5);
        v7 = *(_QWORD *)(v6 + 16);
        if (v7)
          break;
LABEL_4:
        if (++v5 == v22)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      swift_bridgeObjectRetain();
      v8 = 0;
      while (v4)
      {
        v9 = v8 + 1;
        v10 = *(_DWORD *)(v6 + 4 * v8 + 32);
        sub_24A135F88(&qword_25790BE68);
        v11 = swift_allocObject();
        *(_OWORD *)(v11 + 16) = xmmword_24A21AA50;
        *(_QWORD *)(v11 + 32) = sub_24A216074();
        *(_QWORD *)(v11 + 40) = sub_24A216074();
        sub_24A215EB8();
        v12 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        LODWORD(v13) = v10;
        v14 = objc_msgSend(v12, sel_initWithFloat_, v13);
        sub_24A16D544(0, (unint64_t *)&qword_25790B7A8);
        v15 = (void *)sub_24A215E94();
        swift_bridgeObjectRelease();
        objc_msgSend(v4, sel_setObject_forKeyedSubscript_, v14, v15);

        v8 = v9;
        if (v7 == v9)
        {
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      __break(1u);
      goto LABEL_16;
    }
    return;
  }
  sub_24A135F88(&qword_25790BE68);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_24A21AA50;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v17 + 32) = sub_24A216074();
  if (!v18)
  {
LABEL_16:
    __break(1u);
    return;
  }
  *(_QWORD *)(v17 + 40) = sub_24A216074();
  sub_24A215EB8();
  v19 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v20 = sub_24A17F3CC(v17, 65568);
  if (!v2)
  {
    v4 = v20;
    *a2 = v20;
    goto LABEL_2;
  }
}

void sub_24A17ED48(uint64_t a1)
{
  sub_24A17ED64(a1, sub_24A17EAF4);
}

void sub_24A17ED64(uint64_t a1, void (*a2)(uint64_t, id *))
{
  uint64_t v2;
  id v3;

  v3 = 0;
  a2(a1, &v3);
  if (v2)
  {

  }
  else if (!v3)
  {
    __break(1u);
  }
}

void sub_24A17EDAC(id a1, uint64_t *a2)
{
  uint64_t v2;
  id v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  id i;
  void *v9;
  id v10;
  int32x2_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  unint64_t v23;
  id v24;
  id v25;
  void *v26;
  unint64_t v27;
  id v28;
  id v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  int v36;
  int v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v4 = a1;
  v5 = &selRef_copy;
  if (*a2)
    goto LABEL_12;
  v6 = (uint64_t)objc_msgSend(a1, sel_shape);
  v7 = sub_24A16D544(0, (unint64_t *)&qword_25790B7A8);
  v2 = sub_24A215EA0();

  if ((v2 & 0xC000000000000001) != 0)
    goto LABEL_64;
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
  {
    __break(1u);
    goto LABEL_66;
  }
  for (i = *(id *)(v2 + 48); ; i = (id)MEMORY[0x24BD09BE8](2, v2))
  {
    v9 = i;
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v9, sel_integerValue);

    v11.i32[0] = 0;
    v2 = sub_24A1420E4((unint64_t)v10, v11);
    v12 = objc_msgSend(v4, v5[292]);
    v6 = sub_24A215EA0();

    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_66:
      v13 = (id)MEMORY[0x24BD09BE8](1, v6);
    }
    else
    {
      if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
      {
        __break(1u);
LABEL_68:
        v17 = (id)MEMORY[0x24BD09BE8](0, v7);
        goto LABEL_11;
      }
      v13 = *(id *)(v6 + 40);
    }
    v14 = v13;
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v14, sel_integerValue);

    v2 = sub_24A17CA38(v2, (uint64_t)v15, &qword_25790A458);
    v16 = objc_msgSend(v4, v5[292]);
    v7 = sub_24A215EA0();

    if ((v7 & 0xC000000000000001) != 0)
      goto LABEL_68;
    if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      break;
    v17 = *(id *)(v7 + 32);
LABEL_11:
    v18 = v17;
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v18, sel_integerValue);

    *a2 = sub_24A17CA38(v2, (uint64_t)v19, &qword_25790BA70);
LABEL_12:
    v20 = objc_msgSend(v4, v5[292], v42);
    sub_24A16D544(0, (unint64_t *)&qword_25790B7A8);
    v7 = sub_24A215EA0();

    if ((v7 & 0xC000000000000001) != 0)
    {
      while (1)
      {
        v21 = (id)MEMORY[0x24BD09BE8](0, v7);
LABEL_15:
        v22 = v21;
        swift_bridgeObjectRelease();
        v7 = (uint64_t)objc_msgSend(v22, sel_integerValue);

        if (v7 < 0)
          break;
        if (!v7)
          return;
        v23 = 0;
        v42 = v7;
        while (v23 != v7)
        {
          v24 = objc_msgSend(v4, v5[292]);
          v7 = sub_24A215EA0();

          if ((v7 & 0xC000000000000001) != 0)
          {
            v25 = (id)MEMORY[0x24BD09BE8](1, v7);
          }
          else
          {
            if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
              goto LABEL_58;
            v25 = *(id *)(v7 + 40);
          }
          v26 = v25;
          swift_bridgeObjectRelease();
          v7 = (uint64_t)objc_msgSend(v26, sel_integerValue);

          if (v7 < 0)
            goto LABEL_59;
          if (v7)
          {
            v27 = 0;
            v43 = v7;
            while (v27 != v7)
            {
              v28 = objc_msgSend(v4, v5[292]);
              v7 = sub_24A215EA0();

              if ((v7 & 0xC000000000000001) != 0)
              {
                v29 = (id)MEMORY[0x24BD09BE8](2, v7);
              }
              else
              {
                if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
                  goto LABEL_55;
                v29 = *(id *)(v7 + 48);
              }
              v30 = v29;
              swift_bridgeObjectRelease();
              v31 = (unint64_t)objc_msgSend(v30, sel_integerValue);

              if ((v31 & 0x8000000000000000) != 0)
                goto LABEL_56;
              if (v31)
              {
                v32 = 0;
                while (v31 != v32)
                {
                  sub_24A135F88(&qword_25790BE68);
                  v33 = swift_allocObject();
                  *(_OWORD *)(v33 + 16) = xmmword_24A21AA40;
                  *(_QWORD *)(v33 + 32) = sub_24A216074();
                  *(_QWORD *)(v33 + 40) = sub_24A216074();
                  *(_QWORD *)(v33 + 48) = sub_24A216074();
                  sub_24A215EB8();
                  v34 = (void *)sub_24A215E94();
                  swift_bridgeObjectRelease();
                  v35 = objc_msgSend(v4, sel_objectForKeyedSubscript_, v34);

                  objc_msgSend(v35, sel_floatValue);
                  v37 = v36;

                  v7 = *a2;
                  if (!*a2)
                    goto LABEL_63;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v7 = (uint64_t)sub_24A17F650((_QWORD *)v7);
                  if (v23 >= *(_QWORD *)(v7 + 16))
                    goto LABEL_51;
                  v2 = (uint64_t)v4;
                  v5 = (char **)(v7 + 32);
                  v4 = (id)(8 * v23);
                  v38 = *(_QWORD **)(v7 + 32 + 8 * v23);
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v7 + 32 + 8 * v23) = v38;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v38 = sub_24A14893C(v38);
                    v5[v23] = (char *)v38;
                  }
                  if (v27 >= v38[2])
                    goto LABEL_52;
                  v5 = (char **)(v38 + 4);
                  v40 = (char *)v38[v27 + 4];
                  v41 = swift_isUniquelyReferenced_nonNull_native();
                  v5[v27] = v40;
                  if ((v41 & 1) == 0)
                  {
                    v40 = sub_24A148928((uint64_t)v40);
                    v5[v27] = v40;
                  }
                  v4 = (id)v2;
                  if (v32 >= *((_QWORD *)v40 + 2))
                    goto LABEL_53;
                  *(_DWORD *)&v40[4 * v32 + 32] = v37;
                  *a2 = v7;
                  if (v31 == ++v32)
                    goto LABEL_26;
                }
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
                break;
              }
LABEL_26:
              ++v27;
              v7 = v43;
              v5 = &selRef_copy;
              if (v27 == v43)
                goto LABEL_18;
            }
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
            break;
          }
LABEL_18:
          ++v23;
          v7 = v42;
          if (v23 == v42)
            return;
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
      }
    }
    else
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v21 = *(id *)(v7 + 32);
        goto LABEL_15;
      }
      __break(1u);
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    ;
  }
  __break(1u);
}

uint64_t sub_24A17F39C(void *a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  sub_24A17EDAC(a1, &v2);
  result = v2;
  if (!v2)
    __break(1u);
  return result;
}

id sub_24A17F3CC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  sub_24A16D544(0, (unint64_t *)&qword_25790B7A8);
  v4 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, v4, a2, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v5;
}

uint64_t sub_24A17F4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_24A17F4EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790BE48;
  if (!qword_25790BE48)
  {
    v1 = sub_24A21611C();
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_25790BE48);
  }
  return result;
}

unint64_t sub_24A17F534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790BE58;
  if (!qword_25790BE58)
  {
    v1 = sub_24A139148(&qword_25790BE50);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25790BE58);
  }
  return result;
}

uint64_t (*sub_24A17F580())(_BYTE *, _QWORD)
{
  uint64_t v0;
  uint64_t (*result)(_BYTE *, _QWORD);
  _QWORD *v2;
  _BYTE v3[32];

  result = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 112))(v3);
  if (__OFADD__(*v2, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v2;
    return (uint64_t (*)(_BYTE *, _QWORD))result(v3, 0);
  }
  return result;
}

uint64_t sub_24A17F5CC()
{
  return swift_deallocObject();
}

uint64_t sub_24A17F5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_24A17F5EC()
{
  return swift_release();
}

uint64_t (*sub_24A17F5F4())(_BYTE *, _QWORD)
{
  uint64_t v0;
  uint64_t (*result)(_BYTE *, _QWORD);
  _QWORD *v2;
  _BYTE v3[32];

  result = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 112))(v3);
  if (__OFSUB__(*v2, 1))
  {
    __break(1u);
  }
  else
  {
    --*v2;
    return (uint64_t (*)(_BYTE *, _QWORD))result(v3, 0);
  }
  return result;
}

uint64_t sub_24A17F640()
{
  return swift_deallocObject();
}

_QWORD *sub_24A17F650(_QWORD *a1)
{
  return sub_24A148158(0, a1[2], 0, a1, &qword_25790A448, &qword_25790BA70);
}

char *sub_24A17F684(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char **v6;
  char *v8;
  int64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  char *result;
  int64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v8 = *v6;
  v9 = *((_QWORD *)*v6 + 2);
  if (v9 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v13 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v14 = v13 - v11;
  if (__OFSUB__(v13, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v15 = v9 + v14;
  if (__OFADD__(v9, v14))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || v15 > *((_QWORD *)v8 + 3) >> 1)
  {
    if (v9 <= v15)
      v18 = v9 + v14;
    else
      v18 = v9;
    result = sub_24A147E34(result, v18, 1, v8);
    v8 = result;
  }
  v19 = &v8[4 * a1 + 32];
  if (!v14)
    goto LABEL_21;
  v20 = *((_QWORD *)v8 + 2);
  v21 = __OFSUB__(v20, a2);
  v22 = v20 - a2;
  if (v21)
    goto LABEL_30;
  if (v22 < 0)
  {
LABEL_32:
    result = (char *)sub_24A21644C();
    __break(1u);
    return result;
  }
  result = &v19[4 * v13];
  v23 = &v8[4 * a2 + 32];
  if (result != v23 || result >= &v23[4 * v22])
    result = (char *)memmove(result, v23, 4 * v22);
  v24 = *((_QWORD *)v8 + 2);
  v21 = __OFADD__(v24, v14);
  v25 = v24 + v14;
  if (v21)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *((_QWORD *)v8 + 2) = v25;
LABEL_21:
  if (v13 >= 1)
    result = (char *)memcpy(v19, (const void *)(a4 + 4 * a5), 4 * v13);
  *v6 = v8;
  return result;
}

char *sub_24A17F810(char *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  if ((a5 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(*(_QWORD *)v6 + 16);
  if (v7 < a5 || (uint64_t)v7 < a6)
    goto LABEL_14;
  if (a6 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)v6 + 4 * a5 + 32 != a2 + 4 * a3)
    return sub_24A17F684(a5, a6, (uint64_t)result, a2, a3, a4);
  if ((uint64_t)(a4 >> 1) < a3)
    goto LABEL_16;
  if (a5 != a3 || a4 >> 1 != a6)
    return sub_24A17F684(a5, a6, (uint64_t)result, a2, a3, a4);
  return result;
}

unint64_t sub_24A17F894()
{
  unint64_t result;

  result = qword_25790BE60;
  if (!qword_25790BE60)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_25790BE60);
  }
  return result;
}

uint64_t sub_24A17F8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v0 = sub_24A215A8C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_defaultManager);
  v6 = (void *)sub_24A215C90();
  v7 = objc_msgSend(v5, sel_fileExistsAtPath_, v6);

  if (!v7)
  {
    v36 = v3;
    v37 = v1;
    v38 = v0;
    v13 = (void *)sub_24A215C90();
    v14 = objc_msgSend(v13, sel_pathExtension);

    sub_24A215CB4();
    v15 = (void *)sub_24A215C90();
    v16 = objc_msgSend(v15, sel_stringByDeletingPathExtension);

    sub_24A215CB4();
    v17 = sub_24A17E11C();
    if (v18)
    {
      v12 = v17;
      v19 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = sub_24A17E20C();
      v19 = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v19)
      {
        v40 = 0;
        v41 = 0xE000000000000000;
        sub_24A216308();
        sub_24A215D98();
        sub_24A215D98();
        sub_24A215D98();
        goto LABEL_12;
      }
    }
    v21 = objc_msgSend(v4, sel_defaultManager);
    v22 = (void *)sub_24A215C90();
    v23 = objc_msgSend(v21, sel_isReadableFileAtPath_, v22);

    v24 = v38;
    if ((v23 & 1) != 0)
      return v12;
    v25 = sub_24A1B9D90();
    v27 = v36;
    v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v25, v24);
    swift_bridgeObjectRetain_n();
    v28 = sub_24A215A74();
    v29 = sub_24A216104();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      *(_DWORD *)v30 = 136315138;
      v39 = v30 + 4;
      v40 = v31;
      swift_bridgeObjectRetain();
      v42 = sub_24A148270(v12, v19, &v40);
      sub_24A216260();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A12D000, v28, v29, "File not readable in %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0AAAC](v31, -1, -1);
      MEMORY[0x24BD0AAAC](v30, -1, -1);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v24);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v24);
    }
    v40 = 0;
    v41 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v40 = 0xD000000000000015;
    v41 = 0x800000024A223060;
    sub_24A215D98();
    swift_bridgeObjectRelease();
LABEL_12:
    v33 = v40;
    v32 = v41;
    sub_24A14C404();
    swift_allocError();
    *v34 = v33;
    v34[1] = v32;
    swift_willThrow();
    return v12;
  }
  v8 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
  swift_bridgeObjectRetain();
  v9 = (void *)sub_24A215C90();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithString_, v9);

  v11 = objc_msgSend(v10, sel_stringByStandardizingPath);
  v12 = sub_24A215CB4();

  return v12;
}

uint64_t type metadata accessor for VABundleUtil()
{
  return objc_opt_self();
}

unint64_t sub_24A17FDF4()
{
  unint64_t result;

  result = qword_25790BE70;
  if (!qword_25790BE70)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21ABB8, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790BE70);
  }
  return result;
}

unint64_t sub_24A17FE3C()
{
  unint64_t result;

  result = qword_25790BE78;
  if (!qword_25790BE78)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AB90, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790BE78);
  }
  return result;
}

unint64_t sub_24A17FE84()
{
  unint64_t result;

  result = qword_25790BE80;
  if (!qword_25790BE80)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21ABE0, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790BE80);
  }
  return result;
}

unint64_t sub_24A17FECC()
{
  unint64_t result;

  result = qword_25790BE88;
  if (!qword_25790BE88)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AC08, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790BE88);
  }
  return result;
}

uint64_t sub_24A17FF10()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_24A17FF20()
{
  unint64_t result;

  result = qword_25790BE90;
  if (!qword_25790BE90)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AC48, &type metadata for AnyStringKey);
    atomic_store(result, (unint64_t *)&qword_25790BE90);
  }
  return result;
}

uint64_t sub_24A17FF64()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_24A17FF70()
{
  return MEMORY[0x24BEE0D88];
}

ValueMetadata *type metadata accessor for CustomDouble()
{
  return &type metadata for CustomDouble;
}

ValueMetadata *type metadata accessor for CustomFloat()
{
  return &type metadata for CustomFloat;
}

uint64_t initializeWithCopy for AnyStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AnyStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 initializeWithTake for AnyStringKey(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AnyStringKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyStringKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyStringKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyStringKey()
{
  return &type metadata for AnyStringKey;
}

uint64_t type metadata accessor for LoopCounter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VAFixedLengthQueue()
{
  return objc_opt_self();
}

uint64_t sub_24A18017C()
{
  _QWORD *v0;

  sub_24A14C404();
  swift_allocError();
  *v0 = 0xD00000000000001ELL;
  v0[1] = 0x800000024A223080;
  return swift_willThrow();
}

uint64_t VAStrategyLayer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAStrategyLayer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A1801F4()
{
  return swift_allocObject();
}

uint64_t sub_24A180204()
{
  uint64_t v0;

  return v0;
}

uint64_t dispatch thunk of VAStrategyLayerDelegate.keywordSpotterDidUpdateScores(verboseLog:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAStrategyLayerDelegate.keywordSpotterShouldTriggerKeyword(keywordResult:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for VAStrategyLayer()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAStrategyLayer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAStrategyLayer.handleKeywordResult(_:uuid:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of VAStrategyLayer.speechStarted()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of VAStrategyLayer.speechStopped()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of VAStrategyProvider.getStrategy(delegate:params:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

void *sub_24A180294()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

void sub_24A1802D4(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

uint64_t VAA2AAudioEncoderModelV3.__allocating_init(computeUnits:reuseBuffers:)(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  VAA2AAudioEncoderModelV3.init(computeUnits:reuseBuffers:)(a1, a2);
  return v4;
}

uint64_t VAA2AAudioEncoderModelV3.init(computeUnits:reuseBuffers:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_BYTE *)(v2 + 40) = a2;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  sub_24A180568();
  sub_24A215E64();
  sub_24A215E64();
  if (v12 == v10 && v13 == v11)
  {
    swift_bridgeObjectRelease_n();
    v5 = 0;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      sub_24A215E64();
      sub_24A215E64();
      if (v12 == v10 && v13 == v11)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v7 = sub_24A21659C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v7 & 1) == 0)
          goto LABEL_12;
      }
      v5 = 3;
    }
  }
  objc_msgSend(v4, sel_setComputeUnits_, v5);
LABEL_12:
  type metadata accessor for aa_encoder_20240530();
  v8 = sub_24A18B9F8(v4);
  if (v3)
  {
    swift_bridgeObjectRelease();

    type metadata accessor for VAA2AAudioEncoderModelV3();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v8;
  }
  return v2;
}

unint64_t sub_24A180568()
{
  unint64_t result;

  result = qword_25790C130;
  if (!qword_25790C130)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VAComputeUnits, &type metadata for VAComputeUnits);
    atomic_store(result, (unint64_t *)&qword_25790C130);
  }
  return result;
}

uint64_t type metadata accessor for VAA2AAudioEncoderModelV3()
{
  return objc_opt_self();
}

uint64_t sub_24A1805CC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void (*v6)(_BYTE *, uint64_t);
  void **v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t (*v16)(_BYTE *, _QWORD);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE v21[32];

  v4 = v1;
  v6 = (void (*)(_BYTE *, uint64_t))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 152))(v21);
  sub_24A17EAF4(a1, v7);
  if (v2)
  {
    v6(v21, 1);
  }
  else
  {
    v9 = ((uint64_t (*)(_BYTE *, _QWORD))v6)(v21, 0);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 136))(v9);
    if (v10)
    {
      v11 = (void *)v10;
      type metadata accessor for aa_encoder_20240530Input();
      v12 = v11;
      sub_24A18CC94();
      v13 = (*(uint64_t (**)(void))(**((_QWORD **)v4 + 2) + 136))();
      v15 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 88))(v13);
      swift_release();
      v16 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 128))(v21);
      sub_24A17EDAC(v15, v17);
      v18 = v16(v21, 0);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v18);
      if (v19)
      {
        v3 = v19;
        if ((v4[40] & 1) == 0)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v4 + 120))(0);
          (*(void (**)(_QWORD))(*(_QWORD *)v4 + 144))(0);
        }
        swift_release();

      }
      else
      {
        sub_24A14C404();
        swift_allocError();
        *v20 = 0xD00000000000001ELL;
        v20[1] = 0x800000024A2230F0;
        swift_willThrow();

        swift_release();
      }
    }
    else
    {
      sub_24A14C404();
      swift_allocError();
      *v14 = 0xD00000000000001DLL;
      v14[1] = 0x800000024A2230D0;
      swift_willThrow();
    }
  }
  return v3;
}

uint64_t VAA2AAudioEncoderModelV3.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t VAA2AAudioEncoderModelV3.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_24A18085C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t method lookup function for VAA2AAudioEncoderModelV3()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV3.__allocating_init(computeUnits:reuseBuffers:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of VAA2AAudioEncoderModelV3.predict(featureExtractionBuffer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_24A1808C4()
{
  uint64_t result;

  sub_24A16D544(0, (unint64_t *)&qword_25790C3C0);
  result = OS_os_log.init(category:)();
  qword_25791D778 = result;
  return result;
}

float sub_24A18091C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 120);
}

uint64_t sub_24A18094C(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 120) = a1;
  return result;
}

float sub_24A180988()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 124);
}

uint64_t sub_24A1809B8(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(float *)(v1 + 124) = a1;
  return result;
}

uint64_t (*sub_24A1809F4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_24A180A30(_QWORD *a1)
{
  swift_allocObject();
  sub_24A180A68(a1);
}

void sub_24A180A68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v5)(void);
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  _QWORD *v27;
  float v28;
  __int128 v29;
  _OWORD v30[2];
  _OWORD v31[2];
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  uint64_t v35[5];
  uint64_t v36[5];
  _BYTE v37[32];
  uint64_t v38;
  _BYTE v39[32];
  uint64_t v40;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x78);
  v6 = (_QWORD *)v5();
  (*(void (**)(void))((*v4 & *v6) + 0x68))();

  sub_24A181784(1, 0, v35);
  sub_24A182978((uint64_t)v35, (uint64_t)v32);
  sub_24A182978((uint64_t)v35, (uint64_t)v39);
  if (!v40)
  {
    if (qword_257917210 != -1)
      goto LABEL_22;
    goto LABEL_4;
  }
  v7 = swift_bridgeObjectRelease();
  while (1)
  {
    v8 = *(uint64_t (**)(void))((*v4 & *a1) + 0x90);
    v9 = (_QWORD *)((uint64_t (*)(uint64_t))v8)(v7);
    v10 = (*(uint64_t (**)(void))((*v4 & *v9) + 0x100))();

    v11 = (_QWORD *)v8();
    v12 = (*(uint64_t (**)(void))((*v4 & *v11) + 0x118))();

    *(_QWORD *)(v2 + 104) = v10;
    *(_QWORD *)(v2 + 112) = v12;
    v13 = v34;
    *(_QWORD *)(v2 + 16) = v32[0];
    if (!v13)
      break;
    v14 = v32[2];
    v15 = v33;
    *(_QWORD *)(v2 + 24) = v32[1];
    *(_QWORD *)(v2 + 32) = v14;
    *(_DWORD *)(v2 + 40) = v15;
    if (!*(_QWORD *)(v13 + 16))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    v16 = sub_24A148970(0x4474757074754F3CLL, 0xEC0000003E617461);
    if ((v17 & 1) == 0)
      goto LABEL_17;
    sub_24A14D1A4(*(_QWORD *)(v13 + 56) + 32 * v16, (uint64_t)v30);
    sub_24A170EFC(v30, v31);
    swift_dynamicCast();
    *(_OWORD *)(v2 + 48) = v29;
    v18 = v34;
    if (!v34)
      goto LABEL_24;
    if (!*(_QWORD *)(v34 + 16))
      goto LABEL_18;
    v19 = sub_24A148970(0x61447475706E493CLL, 0xEB000000003E6174);
    if ((v20 & 1) == 0)
      goto LABEL_19;
    sub_24A14D1A4(*(_QWORD *)(v18 + 56) + 32 * v19, (uint64_t)v30);
    sub_24A170EFC(v30, v31);
    swift_dynamicCast();
    *(_OWORD *)(v2 + 64) = v29;
    v21 = v34;
    if (!v34)
      goto LABEL_25;
    if (*(_QWORD *)(v34 + 16))
    {
      v22 = sub_24A148970(0xD000000000000011, 0x800000024A2231A0);
      if ((v23 & 1) != 0)
      {
        sub_24A14D1A4(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)v30);
        sub_24A170EFC(v30, v31);
        sub_24A135F88(&qword_25790C230);
        v24 = swift_dynamicCast();
        *(_OWORD *)(v2 + 80) = v29;
        *(_QWORD *)(v2 + 96) = 54;
        v25 = (_QWORD *)((uint64_t (*)(uint64_t))v5)(v24);
        v26 = (*(float (**)(void))((*v4 & *v25) + 0x80))();

        *(float *)(v2 + 120) = v26;
        v27 = (_QWORD *)v5();
        v28 = (*(float (**)(void))((*v4 & *v27) + 0x98))();

        *(float *)(v2 + 124) = v28;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_21;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once();
LABEL_4:
    OS_os_log.info(_:_:)((uint64_t)"Failed to init neural net in normal flow, will init it on CPU directly", 70, 2, MEMORY[0x24BEE4AF8]);
    sub_24A181784(0, 0, v36);
    swift_bridgeObjectRelease();
    sub_24A182978((uint64_t)v36, (uint64_t)v32);
    v7 = sub_24A182978((uint64_t)v36, (uint64_t)v37);
    if (!v38)
    {
      type metadata accessor for NeuralNet();
      OS_os_log.info(_:_:)((uint64_t)"Failed to init neural net after two attempts", 44, 2, MEMORY[0x24BEE4AF8]);

      swift_deallocPartialClassInstance();
      return;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t sub_24A180E8C()
{
  espresso_context_destroy();
  espresso_plan_destroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A180EC8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v1[13])
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) != v1[14])
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_24A1C3A28();
  sub_24A1C3A40();
  sub_24A1C3A48((uint64_t)&v9);
  sub_24A1C3A34();
  sub_24A1C3A40();
  v4 = sub_24A1C3A48((uint64_t)&v10);
  MEMORY[0x24BDAC7A8](v4);
  sub_24A1C378C((uint64_t (*)(void))sub_24A1829E0);
  sub_24A1C399C(v1[2]);
  v5 = v1[11];
  if (v5 < 0)
  {
LABEL_12:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  if (v5)
  {
    v6 = sub_24A215EF4();
    *(_QWORD *)(v6 + 16) = v5;
    bzero((void *)(v6 + 32), 4 * v5);
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
  }
  v8 = sub_24A1421D4(v6, v2[10]);
  MEMORY[0x24BDAC7A8](v8);
  sub_24A1C378C((uint64_t (*)(void))sub_24A182A8C);
  return v8;
}

uint64_t sub_24A18110C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  sub_24A135F88(&qword_25790C3B8);
  v6 = sub_24A216434();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_24A170EFC(v24, v35);
      }
      else
      {
        sub_24A14D1A4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_24A216638();
      sub_24A215D50();
      result = sub_24A21665C();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_24A170EFC(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

_OWORD *sub_24A181408(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_24A148970(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        sub_24A14D184((uint64_t)v19);
        return sub_24A170EFC(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24A1815A0();
      goto LABEL_7;
    }
    sub_24A18110C(v15, a4 & 1);
    v21 = sub_24A148970(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24A181538(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_24A2165CC();
  __break(1u);
  return result;
}

_OWORD *sub_24A181538(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_24A170EFC(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

void *sub_24A1815A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_24A135F88(&qword_25790C3B8);
  v2 = *v0;
  v3 = sub_24A216428();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_24A14D1A4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_24A170EFC(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_24A181784(char a1@<W2>, int a2@<W3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t plan;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  unsigned __int8 v38;
  uint64_t v39;
  __int128 v40;
  id v41;
  void *v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  _OWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  _BOOL8 v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  uint64_t *v104;
  int v105;
  char *v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _OWORD v111[2];
  __int128 v112;
  uint64_t v113;
  _QWORD v114[3];

  LODWORD(v3) = a2;
  v114[1] = *MEMORY[0x24BDAC8D0];
  v6 = sub_24A215690();
  v7 = *(char **)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v102 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v9);
  v106 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (unint64_t)&unk_257917000;
  v103 = (unint64_t)v7;
  if ((a1 & 1) != 0)
  {
    v114[0] = espresso_create_context();
    if (v114[0])
    {
      if (qword_257917210 != -1)
        goto LABEL_118;
      goto LABEL_4;
    }
    if (qword_257917210 != -1)
      swift_once();
    v14 = MEMORY[0x24BEE4AF8];
    OS_os_log.info(_:_:)((uint64_t)"Not able to utilized ANE; will use CPU instead", 46, 2, MEMORY[0x24BEE4AF8]);
    v114[0] = espresso_create_context();
    v13 = v14;
  }
  else
  {
    v114[0] = espresso_create_context();
    if (qword_257917210 != -1)
LABEL_113:
      swift_once();
    v13 = MEMORY[0x24BEE4AF8];
  }
  OS_os_log.info(_:_:)((uint64_t)"Will run acoustic model on CPU", 30, 2, v13);
  v105 = 0;
  if ((v3 & 1) == 0)
    goto LABEL_5;
LABEL_14:
  if (*(_QWORD *)(v11 + 528) != -1)
    swift_once();
  sub_24A135F88(qword_25790AEF0);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_24A218650;
  *(_QWORD *)(v15 + 56) = sub_24A135F88(&qword_25790C3A8);
  *(_QWORD *)(v15 + 64) = sub_24A182E80(&qword_25790C3B0, &qword_25790C3A8);
  *(_QWORD *)(v15 + 32) = v114;
  OS_os_log.debug(_:_:)((uint64_t)"Pointer of espresso_context_ref_t %@", 36, 2, v15);
  swift_bridgeObjectRelease();
  plan = espresso_create_plan();
  if (!plan)
LABEL_119:
    __break(1u);
  v110 = plan;
LABEL_18:
  if (*(_QWORD *)(v11 + 528) != -1)
LABEL_109:
    swift_once();
  sub_24A135F88(qword_25790AEF0);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_24A218650;
  *(_QWORD *)(v17 + 56) = sub_24A135F88(&qword_25790C398);
  *(_QWORD *)(v17 + 64) = sub_24A182E80(&qword_25790C3A0, &qword_25790C398);
  *(_QWORD *)(v17 + 32) = &v110;
  OS_os_log.debug(_:_:)((uint64_t)"Pointer of espresso_plan_ref_t", 30, 2, v17);
  swift_bridgeObjectRelease();
LABEL_20:
  sub_24A1966CC();
  swift_bridgeObjectRetain();
  v18 = sub_24A215E04();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    v19 = sub_24A17E2D0();
    if (v20)
      v21 = v19;
    else
      v21 = 0;
    v108 = v21;
    if (v20)
      v22 = v20;
    else
      v22 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v23 = sub_24A17E2D0();
    if (v24)
      v25 = v23;
    else
      v25 = 0;
    if (v24)
      v26 = v24;
    else
      v26 = 0xE000000000000000;
    if ((v3 & 1) != 0)
    {
      if (*(_QWORD *)(v11 + 528) != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_24A218650;
      *(_QWORD *)(v27 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v27 + 64) = sub_24A182DD4();
      *(_QWORD *)(v27 + 32) = v108;
      *(_QWORD *)(v27 + 40) = v22;
      OS_os_log.debug(_:_:)((uint64_t)"Path for the model file is %@", 29, 2, v27);
    }
  }
  else
  {
    v101 = v6;
    v107 = (int)v3;
    v104 = a3;
    v28 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
    swift_bridgeObjectRetain();
    v29 = (void *)sub_24A215C90();
    swift_bridgeObjectRelease();
    v30 = objc_msgSend(v28, sel_initWithString_, v29);

    v31 = objc_msgSend(v30, sel_stringByStandardizingPath);
    v32 = sub_24A215CB4();
    v34 = v33;

    *(_QWORD *)&v112 = v32;
    *((_QWORD *)&v112 + 1) = v34;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    v26 = *((_QWORD *)&v112 + 1);
    v25 = v112;
    v35 = (void *)objc_opt_self();
    v36 = objc_msgSend(v35, sel_defaultManager);
    v37 = (void *)sub_24A215C90();
    v38 = objc_msgSend(v36, sel_isReadableFileAtPath_, v37);

    if ((v38 & 1) == 0)
    {
      if (qword_257917210 != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_24A218650;
      *(_QWORD *)(v39 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v39 + 64) = sub_24A182DD4();
      *(_QWORD *)(v39 + 32) = v25;
      *(_QWORD *)(v39 + 40) = v26;
      OS_os_log.error(_:_:)((uint64_t)"Network config not found in %@", 30, 2, v39);
      swift_bridgeObjectRelease();
      v25 = 0;
      v26 = 0xE000000000000000;
    }
    a3 = v104;
    *(_QWORD *)&v112 = v32;
    *((_QWORD *)&v112 + 1) = v34;
    swift_bridgeObjectRetain();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v40 = v112;
    swift_bridgeObjectRetain();
    v41 = objc_msgSend(v35, sel_defaultManager);
    v108 = v40;
    v42 = (void *)sub_24A215C90();
    v43 = objc_msgSend(v41, sel_isReadableFileAtPath_, v42);

    if ((v43 & 1) != 0)
    {
      v22 = *((_QWORD *)&v40 + 1);
      LODWORD(v3) = v107;
      v6 = v101;
    }
    else
    {
      LODWORD(v3) = v107;
      v6 = v101;
      if (qword_257917210 != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_24A218650;
      *(_QWORD *)(v44 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v44 + 64) = sub_24A182DD4();
      *(_QWORD *)(v44 + 32) = v108;
      *(_QWORD *)(v44 + 40) = *((_QWORD *)&v40 + 1);
      OS_os_log.error(_:_:)((uint64_t)"Network not found in %@", 23, 2, v44);
      swift_bridgeObjectRelease();
      v108 = 0;
      v22 = 0xE000000000000000;
    }
  }
  swift_bridgeObjectRelease();
  v45 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v45 = v25 & 0xFFFFFFFFFFFFLL;
  if (!v45)
    goto LABEL_56;
  v46 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v46 = v108 & 0xFFFFFFFFFFFFLL;
  if (!v46)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v3 = 0;
LABEL_103:
    *a3 = v97;
    a3[1] = v98;
    a3[2] = v99;
    a3[3] = v100;
    a3[4] = (uint64_t)v3;
    return;
  }
  sub_24A215CF0();
  v47 = 0;
  v48 = sub_24A215C78();
  v107 = (int)v3;
  v49 = v48;
  v51 = v50;
  v104 = a3;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v112 = v49;
  *((_QWORD *)&v112 + 1) = v51;
  v52 = v102;
  sub_24A215684();
  sub_24A14C688();
  v53 = MEMORY[0x24BEE0D00];
  v54 = sub_24A216278();
  (*(void (**)(char *, unint64_t))(v103 + 8))(v52, v6);
  swift_bridgeObjectRelease();
  a3 = *(uint64_t **)(v54 + 16);
  if (a3)
  {
    v101 = v54;
    v102 = 0;
    v55 = (unint64_t *)(v54 + 40);
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    v6 = 0xE100000000000000;
    v103 = (unint64_t)"fer";
    v106 = (char *)0x800000024A2231A0;
    while (1)
    {
      v57 = *(v55 - 1);
      v11 = *v55;
      *(_QWORD *)&v112 = v57;
      *((_QWORD *)&v112 + 1) = v11;
      strcpy((char *)v111, "<OutputData>");
      BYTE13(v111[0]) = 0;
      HIWORD(v111[0]) = -5120;
      swift_bridgeObjectRetain();
      if ((sub_24A2162C0() & 1) != 0)
        break;
      *(_QWORD *)&v112 = v57;
      *((_QWORD *)&v112 + 1) = v11;
      strcpy((char *)v111, "<InputData>");
      HIDWORD(v111[0]) = -352321536;
      if ((sub_24A2162C0() & 1) != 0)
      {
        *(_QWORD *)&v112 = v57;
        *((_QWORD *)&v112 + 1) = v11;
        *(_QWORD *)&v111[0] = 32;
        *((_QWORD *)&v111[0] + 1) = 0xE100000000000000;
        v68 = (_QWORD *)sub_24A216284();
        swift_bridgeObjectRelease();
        v113 = v53;
        if (v68[2] < 2uLL)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        v70 = v68[6];
        v69 = v68[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v112 = v70;
        *((_QWORD *)&v112 + 1) = v69;
        sub_24A170EFC(&v112, v111);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v109 = v3;
        v11 = sub_24A148970(0x61447475706E493CLL, 0xEB000000003E6174);
        v73 = v3[2];
        v74 = (v72 & 1) == 0;
        v75 = v73 + v74;
        if (__OFADD__(v73, v74))
          goto LABEL_111;
        v6 = v72;
        if (v3[3] >= v75)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v3 = v109;
            if ((v72 & 1) == 0)
              goto LABEL_89;
          }
          else
          {
            sub_24A1815A0();
            v3 = v109;
            if ((v6 & 1) == 0)
              goto LABEL_89;
          }
        }
        else
        {
          sub_24A18110C(v75, isUniquelyReferenced_nonNull_native);
          v76 = sub_24A148970(0x61447475706E493CLL, 0xEB000000003E6174);
          if ((v6 & 1) != (v77 & 1))
            goto LABEL_121;
          v11 = v76;
          v3 = v109;
          if ((v6 & 1) == 0)
          {
LABEL_89:
            v3[(v11 >> 6) + 8] |= 1 << v11;
            v92 = (_QWORD *)(v3[6] + 16 * v11);
            *v92 = 0x61447475706E493CLL;
            v92[1] = 0xEB000000003E6174;
            sub_24A170EFC(v111, (_OWORD *)(v3[7] + 32 * v11));
            v93 = v3[2];
            v90 = __OFADD__(v93, 1);
            v91 = v93 + 1;
            if (v90)
              goto LABEL_117;
            goto LABEL_90;
          }
        }
        goto LABEL_59;
      }
      *(_QWORD *)&v112 = v57;
      *((_QWORD *)&v112 + 1) = v11;
      *(_QWORD *)&v111[0] = 0xD000000000000011;
      *((_QWORD *)&v111[0] + 1) = v106;
      if ((sub_24A2162C0() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_61;
      }
      *(_QWORD *)&v112 = v57;
      *((_QWORD *)&v112 + 1) = v11;
      *(_QWORD *)&v111[0] = 32;
      *((_QWORD *)&v111[0] + 1) = 0xE100000000000000;
      v78 = (_QWORD *)sub_24A216284();
      swift_bridgeObjectRelease();
      if (v78[2] < 2uLL)
      {
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        swift_once();
LABEL_4:
        OS_os_log.info(_:_:)((uint64_t)"Will run acoustic model on ANE", 30, 2, MEMORY[0x24BEE4AF8]);
        v105 = 1;
        if ((v3 & 1) != 0)
          goto LABEL_14;
LABEL_5:
        v12 = espresso_create_plan();
        if (!v12)
          goto LABEL_119;
        v110 = v12;
        if ((v3 & 1) != 0)
          goto LABEL_18;
        goto LABEL_20;
      }
      v79 = v78[6];
      v11 = v78[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v112 = v79;
      *((_QWORD *)&v112 + 1) = v11;
      *(_QWORD *)&v111[0] = 44;
      *((_QWORD *)&v111[0] + 1) = 0xE100000000000000;
      v80 = (_QWORD *)sub_24A216284();
      swift_bridgeObjectRelease();
      v113 = sub_24A135F88(&qword_25790C390);
      v81 = swift_allocObject();
      *(_QWORD *)&v112 = v81;
      if (v80[2] < 3uLL)
        goto LABEL_115;
      v11 = v81;
      v82 = v80[8];
      v6 = v80[9];
      swift_bridgeObjectRetain();
      *(_QWORD *)(v11 + 16) = sub_24A13F1BC(v82, v6);
      *(_BYTE *)(v11 + 24) = v83 & 1;
      if (v80[2] < 4uLL)
        goto LABEL_116;
      v84 = v80[10];
      v85 = v80[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v11 + 32) = sub_24A13F1BC(v84, v85);
      *(_BYTE *)(v11 + 40) = v86 & 1;
      sub_24A170EFC(&v112, v111);
      v87 = swift_isUniquelyReferenced_nonNull_native();
      v109 = v3;
      sub_24A181408(v111, 0xD000000000000011, v103 | 0x8000000000000000, v87);
      v3 = v109;
LABEL_60:
      swift_bridgeObjectRelease();
      v6 = 0xE100000000000000;
LABEL_61:
      v55 += 2;
      a3 = (uint64_t *)((char *)a3 - 1);
      if (!a3)
      {
        swift_bridgeObjectRelease();
        a3 = v104;
        v47 = v102;
        if (v105)
          goto LABEL_55;
        goto LABEL_96;
      }
    }
    *(_QWORD *)&v112 = v57;
    *((_QWORD *)&v112 + 1) = v11;
    *(_QWORD *)&v111[0] = 32;
    *((_QWORD *)&v111[0] + 1) = 0xE100000000000000;
    v58 = (_QWORD *)sub_24A216284();
    swift_bridgeObjectRelease();
    v113 = v53;
    if (v58[2] < 2uLL)
    {
      __break(1u);
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    v60 = v58[6];
    v59 = v58[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v112 = v60;
    *((_QWORD *)&v112 + 1) = v59;
    sub_24A170EFC(&v112, v111);
    v61 = swift_isUniquelyReferenced_nonNull_native();
    v109 = v3;
    v11 = sub_24A148970(0x4474757074754F3CLL, 0xEC0000003E617461);
    v63 = v3[2];
    v64 = (v62 & 1) == 0;
    v65 = v63 + v64;
    if (__OFADD__(v63, v64))
      goto LABEL_108;
    v6 = v62;
    if (v3[3] >= v65)
    {
      if ((v61 & 1) != 0)
      {
        v3 = v109;
        if ((v62 & 1) == 0)
          goto LABEL_83;
      }
      else
      {
        sub_24A1815A0();
        v3 = v109;
        if ((v6 & 1) == 0)
          goto LABEL_83;
      }
    }
    else
    {
      sub_24A18110C(v65, v61);
      v66 = sub_24A148970(0x4474757074754F3CLL, 0xEC0000003E617461);
      if ((v6 & 1) != (v67 & 1))
        goto LABEL_121;
      v11 = v66;
      v3 = v109;
      if ((v6 & 1) == 0)
      {
LABEL_83:
        v3[(v11 >> 6) + 8] |= 1 << v11;
        v88 = v3[6] + 16 * v11;
        strcpy((char *)v88, "<OutputData>");
        *(_BYTE *)(v88 + 13) = 0;
        *(_WORD *)(v88 + 14) = -5120;
        sub_24A170EFC(v111, (_OWORD *)(v3[7] + 32 * v11));
        v89 = v3[2];
        v90 = __OFADD__(v89, 1);
        v91 = v89 + 1;
        if (v90)
          goto LABEL_112;
LABEL_90:
        v3[2] = v91;
        goto LABEL_60;
      }
    }
LABEL_59:
    v56 = (_OWORD *)(v3[7] + 32 * v11);
    sub_24A14D184((uint64_t)v56);
    sub_24A170EFC(v111, v56);
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
  a3 = v104;
  if (v105)
LABEL_55:
    sub_24A1C388C();
  else
LABEL_96:
    sub_24A1C3880();
  v94 = sub_24A1C3898();
  if (!v47)
  {
    *(_QWORD *)&v112 = v94;
    DWORD2(v112) = v95;
    if ((v107 & 1) != 0)
    {
      if (qword_257917210 != -1)
        swift_once();
      sub_24A135F88(qword_25790AEF0);
      v96 = swift_allocObject();
      *(_OWORD *)(v96 + 16) = xmmword_24A218650;
      *(_QWORD *)(v96 + 56) = sub_24A135F88(&qword_25790C380);
      *(_QWORD *)(v96 + 64) = sub_24A182E80(&qword_25790C388, &qword_25790C380);
      *(_QWORD *)(v96 + 32) = &v112;
      OS_os_log.debug(_:_:)((uint64_t)"Pointer of espresso_network_t %@", 32, 2, v96);
      swift_bridgeObjectRelease();
    }
    sub_24A1C3980(v110);
    v98 = v114[0];
    if (v114[0])
    {
      v97 = v110;
      swift_bridgeObjectRelease();
      v99 = v112;
      v100 = DWORD2(v112);
      goto LABEL_103;
    }
    __break(1u);
LABEL_121:
    sub_24A2165CC();
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_24A182978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790C228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NeuralNet()
{
  return objc_opt_self();
}

uint64_t sub_24A1829E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 104);
  if (v3 < 0)
    goto LABEL_19;
  if (v3)
  {
    v4 = *(_QWORD *)(v2 + 112);
    if (v4 < 0)
    {
LABEL_20:
      __break(1u);
      return result;
    }
    v5 = 0;
    v6 = *(_QWORD *)(v1 + 24);
    while (!v4)
    {
LABEL_5:
      if (++v5 == v3)
        return result;
    }
    v7 = v5 * v4;
    if ((unsigned __int128)((uint64_t)v5 * (__int128)v4) >> 64 == (uint64_t)(v5 * v4) >> 63)
    {
      if (v5 >= *(_QWORD *)(v6 + 16))
      {
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      v8 = 0;
      v9 = *(_QWORD *)(v6 + 32 + 8 * v5);
      v10 = v9 + 32;
      v11 = *(_QWORD *)(v9 + 16);
      while (!__OFADD__(v7, v8))
      {
        if (v11 == v8)
          goto LABEL_16;
        *(_DWORD *)(result + 4 * (v7 + v8)) = *(_DWORD *)(v10 + 4 * v8);
        if (v4 == ++v8)
          goto LABEL_5;
      }
      __break(1u);
LABEL_16:
      __break(1u);
    }
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

void sub_24A182A8C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  char v9;
  float (*v10)(void);
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  char v15;
  uint64_t v16;
  float v17;
  float v18;
  char v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;

  v4 = v1;
  v5 = *(_QWORD **)(v1 + 16);
  v6 = v5[10];
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_42;
  if (v6)
  {
    v22 = v5[11];
    if (v22 < 0)
      goto LABEL_43;
    v3 = *(_QWORD *)(v4 + 24);
    v2 = *(_QWORD **)v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v3 = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_44;
    while (1)
    {
      v8 = 0;
      *(_QWORD *)v3 = v2;
      v21 = (_QWORD *)v6;
      while (1)
      {
        if (v8 == v6)
          goto LABEL_40;
        if (v22)
          break;
LABEL_6:
        ++v8;
        v6 = (unint64_t)v21;
        if ((_QWORD *)v8 == v21)
          return;
      }
      v24 = v8 * v22;
      if ((unsigned __int128)((uint64_t)v8 * (__int128)v22) >> 64 == (uint64_t)(v8 * v22) >> 63)
      {
        v2 = *(_QWORD **)v3;
        v9 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)v3 = v2;
        if ((v9 & 1) == 0)
          v2 = sub_24A14893C(v2);
        v10 = *(float (**)(void))(*v5 + 160);
        *(_QWORD *)v3 = v2;
        v11 = 8;
        while (1)
        {
          v12 = v11 - 8;
          if (__OFADD__(v24, v11 - 8))
            break;
          v13 = *(_DWORD *)(a1 + 4 * (v24 + v11 - 8));
          v2 = *(_QWORD **)v3;
          v14 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)v3 = v2;
          if ((v14 & 1) == 0)
          {
            v2 = sub_24A14893C(v2);
            *(_QWORD *)v3 = v2;
          }
          if (v8 >= v2[2])
            goto LABEL_34;
          v6 = (unint64_t)(v2 + 4);
          v2 = (_QWORD *)v2[v8 + 4];
          v15 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v6 + 8 * v8) = v2;
          if ((v15 & 1) == 0)
          {
            v2 = sub_24A148928((uint64_t)v2);
            *(_QWORD *)(v6 + 8 * v8) = v2;
          }
          if (v12 >= v2[2])
            goto LABEL_35;
          *((_DWORD *)v2 + v11) = v13;
          if (v8 >= *(_QWORD *)(*(_QWORD *)v3 + 16))
            goto LABEL_36;
          v16 = *(_QWORD *)(*(_QWORD *)v3 + 8 * v8 + 32);
          if (v12 >= *(_QWORD *)(v16 + 16))
            goto LABEL_37;
          v17 = *(float *)(v16 + 4 * v11);
          if (v17 < v10())
          {
            v18 = (*(float (**)(void))(*v5 + 184))();
            v2 = *(_QWORD **)v3;
            v19 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v3 = v2;
            if ((v19 & 1) == 0)
            {
              v2 = sub_24A14893C(v2);
              *(_QWORD *)v3 = v2;
            }
            if (v8 >= v2[2])
              goto LABEL_38;
            v6 = (unint64_t)(v2 + 4);
            v2 = (_QWORD *)v2[v8 + 4];
            v20 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v6 + 8 * v8) = v2;
            if ((v20 & 1) == 0)
            {
              v2 = sub_24A148928((uint64_t)v2);
              *(_QWORD *)(v6 + 8 * v8) = v2;
            }
            if (v12 >= v2[2])
              goto LABEL_39;
            *((float *)v2 + v11) = v18;
          }
          if (++v11 - v22 == 8)
            goto LABEL_6;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      v2 = sub_24A14893C(v2);
    }
  }
}

uint64_t sub_24A182D38(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24A182D58(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for espresso_network_t()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_25790C358)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_25790C358);
  }
}

unint64_t sub_24A182DD4()
{
  unint64_t result;

  result = qword_25790C360;
  if (!qword_25790C360)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_25790C360);
  }
  return result;
}

unint64_t sub_24A182E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790C370;
  if (!qword_25790C370)
  {
    v1 = sub_24A16D544(255, &qword_25790C368);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE5BE8], v1);
    atomic_store(result, (unint64_t *)&qword_25790C370);
  }
  return result;
}

uint64_t sub_24A182E70()
{
  return swift_deallocObject();
}

uint64_t sub_24A182E80(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_24A139148(a2);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE0978], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A182EC0()
{
  unint64_t result;

  result = sub_24A182EE4(MEMORY[0x24BEE4AF8]);
  qword_257917318 = result;
  return result;
}

unint64_t sub_24A182EE4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_25790A478);
  v2 = (_QWORD *)sub_24A216440();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_24A148970(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_24A182FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v0 = sub_24A215A8C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for VAEspressoUtils();
  v37 = 0;
  v5 = sub_24A1C3DF0();
  v7 = v6;
  v8 = sub_24A1516F0();
  static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(0xD000000000000018, 0x800000024A223470, &v37, v5, v7, v8 & 1, &v38);
  v35 = v0;
  v36 = v3;
  v34 = v1;
  swift_bridgeObjectRelease();
  v32 = xmmword_257917220;
  v33 = v4;
  v9 = *((_QWORD *)&xmmword_257917220 + 1);
  v10 = qword_257917230;
  v11 = qword_257917238;
  v12 = qword_257917240;
  xmmword_257917220 = v38;
  qword_257917230 = v39;
  qword_257917238 = v40;
  qword_257917240 = v41;
  qword_257917248 = v42;
  qword_257917250 = v43;
  qword_257917258 = v44;
  qword_257917260 = v45;
  byte_257917268 = v46;
  sub_24A14C34C(v32, v9, v10, v11, v12);
  v37 = 0;
  v13 = sub_24A1C3DF0();
  v15 = v14;
  v16 = sub_24A1516F0();
  static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(0xD000000000000018, 0x800000024A223490, &v37, v13, v15, v16 & 1, &v38);
  swift_bridgeObjectRelease();
  v17 = *((_QWORD *)&xmmword_257917270 + 1);
  v32 = xmmword_257917270;
  v18 = qword_257917280;
  v19 = qword_257917288;
  v20 = qword_257917290;
  xmmword_257917270 = v38;
  qword_257917280 = v39;
  qword_257917288 = v40;
  qword_257917290 = v41;
  qword_257917298 = v42;
  qword_2579172A0 = v43;
  qword_2579172A8 = v44;
  qword_2579172B0 = v45;
  byte_2579172B8 = v46;
  sub_24A14C34C(v32, v17, v18, v19, v20);
  v37 = 0;
  v21 = sub_24A1C3DF0();
  v23 = v22;
  v24 = sub_24A1516F0();
  static VAEspressoUtils.loadModel(_:computeUnits:espressoPrefix:debug:)(0xD000000000000017, 0x800000024A2234B0, &v37, v21, v23, v24 & 1, &v38);
  swift_bridgeObjectRelease();
  v25 = *((_QWORD *)&xmmword_2579172C0 + 1);
  v33 = xmmword_2579172C0;
  v26 = qword_2579172D0;
  v27 = qword_2579172D8;
  v28 = qword_2579172E0;
  xmmword_2579172C0 = v38;
  qword_2579172D0 = v39;
  qword_2579172D8 = v40;
  qword_2579172E0 = v41;
  qword_2579172E8 = v42;
  qword_2579172F0 = v43;
  qword_2579172F8 = v44;
  qword_257917300 = v45;
  byte_257917308 = v46;
  sub_24A14C34C(v33, v25, v26, v27, v28);
  if (qword_257917310 != -1)
    swift_once();
  v29 = sub_24A185960();
  swift_beginAccess();
  qword_257917318 = v29;
  swift_bridgeObjectRelease();
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for G2PFactored()), sel_init);
}

id G2PFactored.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

_QWORD *sub_24A18360C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  (*(void (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
  if (!v1)
  {
    v0 = v2;
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_24A18376C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
  if (!v1)
    swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24A1838B4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  float v27;
  _QWORD *v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;

  v3 = v2;
  v115 = sub_24A215A8C();
  v6 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v9);
  v116 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = a1;
  v126 = a2;
  v127 = 32;
  v128 = 0xE100000000000000;
  v11 = sub_24A14C688();
  v12 = MEMORY[0x24BEE0D00];
  if ((sub_24A2162C0() & 1) != 0)
  {
    v125 = a1;
    v126 = a2;
    v127 = 32;
    v128 = 0xE100000000000000;
    v123 = 95;
    v124 = 0xE100000000000000;
    v108 = (uint64_t *)v11;
    v109 = v11;
    v106 = v12;
    v107 = v11;
    sub_24A2162A8();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v125 = 0x3A3E53555F6E653CLL;
  v126 = 0xE800000000000000;
  sub_24A215D98();
  swift_bridgeObjectRelease();
  v13 = sub_24A14858C(v125, v126);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(v13 + 16);
  v113 = a1;
  v114 = a2;
  v117 = v8;
  if (v14)
  {
    v129 = v2;
    v125 = MEMORY[0x24BEE4AF8];
    sub_24A148BB8(0, v14, 0);
    v15 = 0;
    v16 = v125;
    while (1)
    {
      v17 = *(_BYTE *)(v13 + v15 + 32) + 3;
      if (((*(unsigned __int8 *)(v13 + v15 + 32) + 3) & 0x100) != 0)
        break;
      v125 = v16;
      v19 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_24A148BB8(v18 > 1, v19 + 1, 1);
        v16 = v125;
      }
      ++v15;
      *(_QWORD *)(v16 + 16) = v19 + 1;
      *(float *)(v16 + 4 * v19 + 32) = (float)v17;
      if (v14 == v15)
      {
        swift_release();
        v3 = v129;
        goto LABEL_12;
      }
    }
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  swift_release();
  v16 = MEMORY[0x24BEE4AF8];
LABEL_12:
  v20 = sub_24A215EF4();
  *(_QWORD *)(v20 + 16) = 48;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 208) = 0u;
  v21 = sub_24A215EF4();
  v22 = v21;
  *(_QWORD *)(v21 + 16) = 48;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_OWORD *)(v21 + 80) = 0u;
  *(_OWORD *)(v21 + 96) = 0u;
  *(_OWORD *)(v21 + 112) = 0u;
  *(_OWORD *)(v21 + 128) = 0u;
  *(_OWORD *)(v21 + 144) = 0u;
  *(_OWORD *)(v21 + 160) = 0u;
  *(_OWORD *)(v21 + 176) = 0u;
  v23 = 8;
  *(_OWORD *)(v21 + 192) = 0u;
  *(_OWORD *)(v21 + 208) = 0u;
  v24 = *(_QWORD *)(v16 + 16);
  do
  {
    v25 = v23 - 8;
    v26 = 0;
    if (v23 - 8 < v24)
      v26 = *(_DWORD *)(v16 + 4 * v23);
    if (v25 >= *(_QWORD *)(v20 + 16))
    {
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    *(_DWORD *)(v20 + 4 * v23) = v26;
    if (v25 >= *(_QWORD *)(v21 + 16))
      goto LABEL_83;
    if (v25 >= v24)
      v27 = 0.0;
    else
      v27 = 1.0;
    *(float *)(v21 + 4 * v23++) = v27;
  }
  while (v23 != 56);
  swift_bridgeObjectRelease();
  v28 = v121;
  v29 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v121) + 0x70);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = v3;
  v31 = v29(v20, v22);
  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v6;
  }
  v120 = v31;
  v112 = v6;
  swift_bridgeObjectRelease();
  v32 = sub_24A215EF4();
  *(_QWORD *)(v32 + 16) = 48;
  *(_OWORD *)(v32 + 32) = 0u;
  *(_OWORD *)(v32 + 48) = 0u;
  *(_OWORD *)(v32 + 64) = 0u;
  *(_OWORD *)(v32 + 80) = 0u;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 128) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_OWORD *)(v32 + 160) = 0u;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 192) = 0u;
  *(_OWORD *)(v32 + 208) = 0u;
  v6 = sub_24A215EF4();
  v33 = 0;
  *(_QWORD *)(v6 + 16) = 48;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v28) + 0x78);
  v118 = v20;
  v119 = v34;
  v35 = 0;
  v36 = MEMORY[0x24BEE4AF8];
  while (2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = (uint64_t)sub_24A148928(v6);
    v37 = v120;
    if (v33 >= *(_QWORD *)(v6 + 16))
      goto LABEL_85;
    *(_DWORD *)(v6 + 4 * v33 + 32) = 1065353216;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v38 = v119(v32, v6, v37, v22);
    if (v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return v6;
    }
    v39 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v28) + 0x80))(v39);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v40 + 16))
      goto LABEL_86;
    v41 = *(_QWORD *)(v40 + 32);
    if (v33 < *(_QWORD *)(v41 + 16))
    {
      v129 = 0;
      v42 = 0;
      v43 = v33 + 1;
      v44 = *(_QWORD *)(v41 + 8 * v33 + 32);
      v45 = v44 + 32;
      v46 = *(_QWORD *)(v44 + 16);
      v47 = -1;
      v48 = -100000.0;
      do
      {
        if (v46 < 0x180)
        {
          __break(1u);
          goto LABEL_78;
        }
        v49 = *(float *)(v45 + 4 * v42);
        if (v48 < v49)
          v47 = v42;
        v50 = v42 + 1;
        if (v48 < v49)
          v48 = *(float *)(v45 + 4 * v42);
        ++v42;
      }
      while (v50 != 384);
      swift_bridgeObjectRelease();
      v122 = v6;
      if (v47 == 1)
      {
        v35 = v129;
        goto LABEL_55;
      }
      v51 = v32;
      v52 = v47 - 3;
      if (__OFSUB__(v47, 3))
        goto LABEL_88;
      if ((v52 & 0x8000000000000000) == 0)
      {
        if (v52 >= 0x100)
        {
          LODWORD(v108) = 0;
          v107 = 3455;
          LOBYTE(v106) = 2;
          goto LABEL_94;
        }
        v53 = (char *)v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          v54 = v129;
        }
        else
        {
          v54 = v129;
          v53 = sub_24A18563C(0, *(_QWORD *)(v36 + 16) + 1, 1, (char *)v36);
        }
        v56 = *((_QWORD *)v53 + 2);
        v55 = *((_QWORD *)v53 + 3);
        v57 = v53;
        if (v56 >= v55 >> 1)
          v57 = sub_24A18563C((char *)(v55 > 1), v56 + 1, 1, v53);
        *((_QWORD *)v57 + 2) = v56 + 1;
        v58 = &v57[v56];
        v36 = (uint64_t)v57;
        v58[32] = v52;
        if (v33 > 0x2E)
        {
          v35 = v54;
          v32 = v51;
          v6 = v122;
        }
        else
        {
          v32 = v51;
          v59 = v54;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v32 = (uint64_t)sub_24A148928(v51);
          v6 = v122;
          if (v43 >= *(_QWORD *)(v32 + 16))
            goto LABEL_89;
          *(float *)(v32 + 4 * v43 + 32) = (float)v47;
          v35 = v59;
        }
        ++v33;
        v28 = v121;
        if (v43 != 48)
          continue;
LABEL_55:
        v129 = v35;
        v121 = (_QWORD *)v36;
        swift_bridgeObjectRelease();
        v125 = v36;
        swift_bridgeObjectRetain();
        sub_24A215CF0();
        sub_24A135F88(&qword_25790C3C8);
        sub_24A186210();
        v60 = sub_24A215CD8();
        v62 = v61;
        swift_bridgeObjectRelease();
        if (!v62)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24A18625C();
          swift_allocError();
          *v76 = 0xD000000000000023;
          v76[1] = 0x800000024A2234D0;
          swift_willThrow();
          return v6;
        }
        v63 = sub_24A1B9D90();
        v64 = v62;
        v65 = v112;
        v66 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v117, v63, v115);
        v67 = v114;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v68 = sub_24A215A74();
        v69 = sub_24A2160EC();
        LODWORD(v116) = v69;
        v70 = os_log_type_enabled(v68, v69);
        v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32;
        v120 = v60;
        if (v70)
        {
          v71 = swift_slowAlloc();
          v111 = swift_slowAlloc();
          v125 = v111;
          *(_DWORD *)v71 = 136315394;
          swift_bridgeObjectRetain();
          v127 = sub_24A148270(v113, v67, &v125);
          v72 = v65;
          sub_24A216260();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v71 + 12) = 2080;
          swift_bridgeObjectRetain();
          v127 = sub_24A148270(v120, v64, &v125);
          sub_24A216260();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_24A12D000, v68, (os_log_type_t)v116, "Inferred pronounciation for %s is %s", (uint8_t *)v71, 0x16u);
          v73 = v111;
          swift_arrayDestroy();
          MEMORY[0x24BD0AAAC](v73, -1, -1);
          v74 = v71;
          v60 = v120;
          MEMORY[0x24BD0AAAC](v74, -1, -1);

          v75 = (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v117, v115);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          v75 = (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v117, v66);
        }
        v125 = 32;
        v126 = 0xE100000000000000;
        MEMORY[0x24BDAC7A8](v75);
        v108 = &v125;
        swift_bridgeObjectRetain_n();
        v77 = v129;
        v78 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)&v106, v60, v64);
        v129 = v77;
        v117 = (char *)v64;
        swift_bridgeObjectRelease();
        v79 = *(_QWORD *)(v78 + 16);
        if (v79)
        {
          v125 = MEMORY[0x24BEE4AF8];
          sub_24A148B80(0, v79, 0);
          v80 = v125;
          v116 = (char *)v78;
          v81 = (uint64_t *)(v78 + 56);
          do
          {
            v82 = v80;
            v84 = *(v81 - 3);
            v83 = *(v81 - 2);
            v85 = *(v81 - 1);
            v86 = *v81;
            swift_bridgeObjectRetain();
            v87 = v83;
            v80 = v82;
            v88 = MEMORY[0x24BD095F4](v84, v87, v85, v86);
            v90 = v89;
            swift_bridgeObjectRelease();
            v125 = v82;
            v91 = *(_QWORD *)(v82 + 16);
            v92 = *(_QWORD *)(v80 + 24);
            if (v91 >= v92 >> 1)
            {
              sub_24A148B80(v92 > 1, v91 + 1, 1);
              v80 = v125;
            }
            *(_QWORD *)(v80 + 16) = v91 + 1;
            v93 = v80 + 16 * v91;
            *(_QWORD *)(v93 + 32) = v88;
            *(_QWORD *)(v93 + 40) = v90;
            v81 += 4;
            --v79;
          }
          while (v79);
          swift_bridgeObjectRelease();
          v94 = *(_QWORD *)(v80 + 16);
          if (v94)
          {
LABEL_66:
            swift_bridgeObjectRetain();
            v116 = (char *)v80;
            v95 = (uint64_t *)(v80 + 40);
            v6 = MEMORY[0x24BEE4AF8];
            while (1)
            {
              v96 = *(v95 - 1);
              v97 = *v95;
              v98 = qword_257917310;
              swift_bridgeObjectRetain();
              if (v98 != -1)
                swift_once();
              swift_beginAccess();
              v99 = qword_257917318;
              if (!*(_QWORD *)(qword_257917318 + 16))
                goto LABEL_91;
              swift_bridgeObjectRetain();
              v100 = sub_24A148970(v96, v97);
              if ((v101 & 1) == 0)
                goto LABEL_90;
              v102 = *(_QWORD *)(*(_QWORD *)(v99 + 56) + 8 * v100);
              swift_endAccess();
              swift_bridgeObjectRelease_n();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v6 = (uint64_t)sub_24A15037C(0, *(_QWORD *)(v6 + 16) + 1, 1, (_QWORD *)v6);
              v104 = *(_QWORD *)(v6 + 16);
              v103 = *(_QWORD *)(v6 + 24);
              if (v104 >= v103 >> 1)
                v6 = (uint64_t)sub_24A15037C((_QWORD *)(v103 > 1), v104 + 1, 1, (_QWORD *)v6);
              v95 += 2;
              *(_QWORD *)(v6 + 16) = v104 + 1;
              *(_QWORD *)(v6 + 8 * v104 + 32) = v102;
              if (!--v94)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_80;
              }
            }
          }
          goto LABEL_79;
        }
LABEL_78:
        swift_bridgeObjectRelease();
        v80 = MEMORY[0x24BEE4AF8];
        v94 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        if (v94)
          goto LABEL_66;
LABEL_79:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = MEMORY[0x24BEE4AF8];
LABEL_80:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v6;
      }
      goto LABEL_92;
    }
    break;
  }
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  swift_bridgeObjectRelease();
LABEL_91:
  swift_endAccess();
  __break(1u);
LABEL_92:
  LODWORD(v108) = 0;
  v107 = 3451;
  LOBYTE(v106) = 2;
LABEL_94:
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A18464C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[176];
  uint64_t v18;

  swift_getObjectType();
  v1 = qword_257917240;
  if (qword_257917240)
  {
    v2 = qword_257917230;
    v3 = qword_257917238;
    v13 = xmmword_257917220;
    sub_24A14C5A8(xmmword_257917220, *((uint64_t *)&xmmword_257917220 + 1), qword_257917230, qword_257917238, qword_257917240);
    sub_24A1C3A28();
    sub_24A1C3A40();
    v14 = v2;
    v4 = sub_24A1C3A48((uint64_t)&v15);
    if (v0)
    {
      return sub_24A14C34C(v13, *((uint64_t *)&v13 + 1), v2, v3, v1);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v4);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862B8);
      sub_24A1C3A40();
      v6 = sub_24A1C3A48((uint64_t)&v16);
      MEMORY[0x24BDAC7A8](v6);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862B8);
      v8 = sub_24A215EF4();
      *(_QWORD *)(v8 + 16) = 128;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 144) = 0u;
      *(_OWORD *)(v8 + 160) = 0u;
      *(_OWORD *)(v8 + 176) = 0u;
      *(_OWORD *)(v8 + 192) = 0u;
      *(_OWORD *)(v8 + 208) = 0u;
      *(_OWORD *)(v8 + 224) = 0u;
      *(_OWORD *)(v8 + 240) = 0u;
      *(_OWORD *)(v8 + 256) = 0u;
      *(_OWORD *)(v8 + 272) = 0u;
      *(_OWORD *)(v8 + 288) = 0u;
      *(_OWORD *)(v8 + 304) = 0u;
      *(_OWORD *)(v8 + 320) = 0u;
      *(_OWORD *)(v8 + 336) = 0u;
      *(_OWORD *)(v8 + 352) = 0u;
      *(_OWORD *)(v8 + 368) = 0u;
      *(_OWORD *)(v8 + 384) = 0u;
      *(_OWORD *)(v8 + 400) = 0u;
      *(_OWORD *)(v8 + 416) = 0u;
      *(_OWORD *)(v8 + 432) = 0u;
      *(_OWORD *)(v8 + 448) = 0u;
      *(_OWORD *)(v8 + 464) = 0u;
      *(_OWORD *)(v8 + 480) = 0u;
      *(_OWORD *)(v8 + 496) = 0u;
      *(_OWORD *)(v8 + 512) = 0u;
      *(_OWORD *)(v8 + 528) = 0u;
      sub_24A135F88(&qword_25790A458);
      v9 = 6;
      v10 = (_QWORD *)sub_24A215EF4();
      v10[2] = 48;
      v10[4] = v8;
      v10[5] = v8;
      do
      {
        v10[v9] = v8;
        swift_bridgeObjectRetain();
        ++v9;
      }
      while (v9 != 52);
      swift_bridgeObjectRetain();
      sub_24A135F88(&qword_25790BA70);
      v11 = sub_24A215EF4();
      *(_QWORD *)(v11 + 16) = 1;
      *(_QWORD *)(v11 + 32) = v10;
      v18 = v11;
      sub_24A1C3A34();
      sub_24A1C3A40();
      sub_24A1C3A48((uint64_t)v17);
      sub_24A1C399C(v13);
      v12 = sub_24A14C34C(v13, *((uint64_t *)&v13 + 1), v14, v3, v1);
      MEMORY[0x24BDAC7A8](v12);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862CC);
      return v18;
    }
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v5 = 0xD000000000000014;
    v5[1] = 0x800000024A223500;
    return swift_willThrow();
  }
}

uint64_t sub_24A184B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[176];
  uint64_t v21;

  swift_getObjectType();
  v1 = qword_257917290;
  if (qword_257917290)
  {
    v2 = qword_257917280;
    v3 = qword_257917288;
    v14 = *((_QWORD *)&xmmword_257917270 + 1);
    v15 = xmmword_257917270;
    sub_24A14C5A8(xmmword_257917270, *((uint64_t *)&xmmword_257917270 + 1), qword_257917280, qword_257917288, qword_257917290);
    sub_24A1C3A28();
    sub_24A1C3A40();
    v4 = sub_24A1C3A48((uint64_t)&v16);
    if (v0)
    {
      return sub_24A14C34C(v15, v14, v2, v3, v1);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v4);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862B8);
      sub_24A1C3A40();
      v6 = sub_24A1C3A48((uint64_t)&v17);
      MEMORY[0x24BDAC7A8](v6);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862B8);
      sub_24A1C3A40();
      sub_24A1C3A48((uint64_t)&v18);
      MEMORY[0x24BDAC7A8](v15);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862E0);
      sub_24A1C3A40();
      v7 = sub_24A1C3A48((uint64_t)&v19);
      MEMORY[0x24BDAC7A8](v7);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862B8);
      v9 = sub_24A215EF4();
      *(_QWORD *)(v9 + 16) = 128;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 144) = 0u;
      *(_OWORD *)(v9 + 160) = 0u;
      *(_OWORD *)(v9 + 176) = 0u;
      *(_OWORD *)(v9 + 192) = 0u;
      *(_OWORD *)(v9 + 208) = 0u;
      *(_OWORD *)(v9 + 224) = 0u;
      *(_OWORD *)(v9 + 240) = 0u;
      *(_OWORD *)(v9 + 256) = 0u;
      *(_OWORD *)(v9 + 272) = 0u;
      *(_OWORD *)(v9 + 288) = 0u;
      *(_OWORD *)(v9 + 304) = 0u;
      *(_OWORD *)(v9 + 320) = 0u;
      *(_OWORD *)(v9 + 336) = 0u;
      *(_OWORD *)(v9 + 352) = 0u;
      *(_OWORD *)(v9 + 368) = 0u;
      *(_OWORD *)(v9 + 384) = 0u;
      *(_OWORD *)(v9 + 400) = 0u;
      *(_OWORD *)(v9 + 416) = 0u;
      *(_OWORD *)(v9 + 432) = 0u;
      *(_OWORD *)(v9 + 448) = 0u;
      *(_OWORD *)(v9 + 464) = 0u;
      *(_OWORD *)(v9 + 480) = 0u;
      *(_OWORD *)(v9 + 496) = 0u;
      *(_OWORD *)(v9 + 512) = 0u;
      *(_OWORD *)(v9 + 528) = 0u;
      sub_24A135F88(&qword_25790A458);
      v10 = 6;
      v11 = (_QWORD *)sub_24A215EF4();
      v11[2] = 48;
      v11[4] = v9;
      v11[5] = v9;
      do
      {
        v11[v10] = v9;
        swift_bridgeObjectRetain();
        ++v10;
      }
      while (v10 != 52);
      swift_bridgeObjectRetain();
      sub_24A135F88(&qword_25790BA70);
      v12 = sub_24A215EF4();
      *(_QWORD *)(v12 + 16) = 1;
      *(_QWORD *)(v12 + 32) = v11;
      v21 = v12;
      sub_24A1C3A34();
      sub_24A1C3A40();
      sub_24A1C3A48((uint64_t)v20);
      sub_24A1C399C(v15);
      v13 = sub_24A14C34C(v15, v14, v2, v3, v1);
      MEMORY[0x24BDAC7A8](v13);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862CC);
      return v21;
    }
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v5 = 0xD000000000000014;
    v5[1] = 0x800000024A223520;
    return swift_willThrow();
  }
}

uint64_t sub_24A1851B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_getObjectType();
  v1 = qword_2579172E0;
  if (qword_2579172E0)
  {
    v2 = qword_2579172D0;
    v3 = qword_2579172D8;
    v12 = xmmword_2579172C0;
    sub_24A14C5A8(xmmword_2579172C0, *((uint64_t *)&xmmword_2579172C0 + 1), qword_2579172D0, qword_2579172D8, qword_2579172E0);
    sub_24A1C3A28();
    sub_24A1C3A40();
    v4 = sub_24A1C3A48((uint64_t)&v13);
    if (v0)
    {
      return sub_24A14C34C(v12, *((uint64_t *)&v12 + 1), v2, v3, v1);
    }
    else
    {
      MEMORY[0x24BDAC7A8](v4);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1862E0);
      v7 = sub_24A215EF4();
      *(_QWORD *)(v7 + 16) = 384;
      bzero((void *)(v7 + 32), 0x600uLL);
      sub_24A135F88(&qword_25790A458);
      v8 = 6;
      v9 = (_QWORD *)sub_24A215EF4();
      v9[2] = 48;
      v9[4] = v7;
      v9[5] = v7;
      do
      {
        v9[v8] = v7;
        swift_bridgeObjectRetain();
        ++v8;
      }
      while (v8 != 52);
      swift_bridgeObjectRetain();
      sub_24A135F88(&qword_25790BA70);
      v10 = sub_24A215EF4();
      *(_QWORD *)(v10 + 16) = 1;
      *(_QWORD *)(v10 + 32) = v9;
      v15 = v10;
      sub_24A1C3A34();
      sub_24A1C3A40();
      sub_24A1C3A48((uint64_t)&v14);
      sub_24A1C399C(v12);
      v11 = sub_24A14C34C(v12, *((uint64_t *)&v12 + 1), v2, v3, v1);
      MEMORY[0x24BDAC7A8](v11);
      sub_24A1C378C((uint64_t (*)(void))sub_24A1866B8);
      return v15;
    }
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v6 = 0xD000000000000012;
    v6[1] = 0x800000024A223580;
    return swift_willThrow();
  }
}

id G2PFactored.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for G2PFactored();
  return objc_msgSendSuper2(&v2, sel_init);
}

id G2PFactored.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for G2PFactored();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *sub_24A18563C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_24A135F88(&qword_25790A468);
      v10 = (char *)swift_allocObject();
      v11 = j__malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24A1868A4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A185734(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_24A148970(a1, a2);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_24A14A3B4();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_24A16F114(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24A185810(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = sub_24A148970(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_24A14A3B4();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_24A149F00(result, a4 & 1);
  result = sub_24A148970(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A185960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 *v64;
  unsigned int v65;
  uint64_t v66;
  char v67;
  char v68;
  __int128 v69;
  _OWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v83 = sub_24A215690();
  v1 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v3 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)sub_24A215C90();
  v5 = objc_msgSend(v4, sel_stringByDeletingPathExtension);

  v6 = sub_24A215CB4();
  v8 = v7;

  v9 = v8;
  v10 = (void *)sub_24A215C90();
  v11 = objc_msgSend(v10, sel_pathExtension);

  sub_24A215CB4();
  v74 = v6;
  sub_24A17E2D0();
  v13 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    sub_24A18625C();
    swift_allocError();
    *v17 = 0xD00000000000001DLL;
    v17[1] = 0x800000024A2235D0;
    return swift_willThrow();
  }
  v14 = sub_24A215C84();
  if (v0)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v18 = v14;
  v19 = v15;
  v78 = 0;
  swift_bridgeObjectRelease();
  v87 = sub_24A182EE4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)&v84 = v18;
  *((_QWORD *)&v84 + 1) = v19;
  sub_24A215684();
  v82 = sub_24A14C688();
  v20 = sub_24A216278();
  v21 = *(void (**)(char *, uint64_t))(v1 + 8);
  v21(v3, v83);
  result = swift_bridgeObjectRelease();
  v81 = *(_QWORD *)(v20 + 16);
  if (!v81)
  {
LABEL_74:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v87;
  }
  v73 = v9;
  v22 = 0;
  v79 = v20;
  v80 = v20 + 32;
  v71 = (char *)&v84 + 2;
  v72 = (char *)&v84 + 3;
  while (v22 < *(_QWORD *)(v20 + 16))
  {
    v23 = (uint64_t *)(v80 + 16 * v22);
    v25 = *v23;
    v24 = v23[1];
    *(_QWORD *)&v84 = *v23;
    *((_QWORD *)&v84 + 1) = v24;
    swift_bridgeObjectRetain();
    sub_24A215660();
    v26 = sub_24A21629C();
    v28 = v27;
    v21(v3, v83);
    v29 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (!v29 || (sub_24A1541B0() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = sub_24A1541B0();
      v31 = swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
        *(_QWORD *)&v84 = 32;
        *((_QWORD *)&v84 + 1) = 0xE100000000000000;
        MEMORY[0x24BDAC7A8](v31);
        *(&v71 - 2) = (char *)&v84;
        swift_bridgeObjectRetain_n();
        v32 = v78;
        v33 = sub_24A147840(0x7FFFFFFFFFFFFFFFLL, 1, sub_24A1862A0, (uint64_t)(&v71 - 4), v25, v24);
        v78 = v32;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v33 + 16) != 2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v84 = 0;
          *((_QWORD *)&v84 + 1) = 0xE000000000000000;
          sub_24A216308();
          swift_bridgeObjectRelease();
          strcpy((char *)&v84, "Invalid line ");
          HIWORD(v84) = -4864;
          sub_24A215D98();
          swift_bridgeObjectRelease();
          sub_24A215D98();
          sub_24A215D98();
          swift_bridgeObjectRelease();
          v69 = v84;
          sub_24A18625C();
          swift_allocError();
          *v70 = v69;
          return swift_willThrow();
        }
        result = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v33 + 16))
          goto LABEL_77;
        v35 = *(_QWORD *)(v33 + 48);
        v34 = *(_QWORD *)(v33 + 56);
        v84 = *(_OWORD *)(v33 + 32);
        v85 = v35;
        v86 = v34;
        swift_bridgeObjectRetain();
        sub_24A215630();
        sub_24A186988();
        v36 = sub_24A21629C();
        v38 = v37;
        v39 = v83;
        v21(v3, v83);
        result = swift_bridgeObjectRelease();
        if (*(_QWORD *)(v33 + 16) < 2uLL)
          goto LABEL_78;
        v75 = v38;
        v76 = v36;
        v77 = *(_OWORD *)(v33 + 64);
        v41 = *(_QWORD *)(v33 + 80);
        v40 = *(_QWORD *)(v33 + 88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v84 = v77;
        v85 = v41;
        v86 = v40;
        sub_24A215630();
        v42 = sub_24A21629C();
        v44 = v43;
        v21(v3, v39);
        result = swift_bridgeObjectRelease();
        v45 = HIBYTE(v44) & 0xF;
        v46 = v42 & 0xFFFFFFFFFFFFLL;
        if ((v44 & 0x2000000000000000) != 0)
          v47 = HIBYTE(v44) & 0xF;
        else
          v47 = v42 & 0xFFFFFFFFFFFFLL;
        if (!v47)
        {
          swift_bridgeObjectRelease();
          v48 = v76;
LABEL_72:
          sub_24A185734(v48, v75);
          goto LABEL_9;
        }
        if ((v44 & 0x1000000000000000) != 0)
        {
          v51 = (uint64_t)sub_24A149198(v42, v44, 10);
          v68 = v67;
          swift_bridgeObjectRelease();
          v48 = v76;
          if ((v68 & 1) != 0)
            goto LABEL_72;
          goto LABEL_63;
        }
        v48 = v76;
        if ((v44 & 0x2000000000000000) == 0)
        {
          if ((v42 & 0x1000000000000000) != 0)
            v49 = (unsigned __int8 *)((v44 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v49 = (unsigned __int8 *)sub_24A216350();
          v50 = v78;
          v51 = (uint64_t)sub_24A14927C(v49, v46, 10);
          v78 = v50;
          LOBYTE(v42) = v52 & 1;
          goto LABEL_62;
        }
        *(_QWORD *)&v84 = v42;
        *((_QWORD *)&v84 + 1) = v44 & 0xFFFFFFFFFFFFFFLL;
        if (v42 == 43)
        {
          if (!v45)
            goto LABEL_80;
          if (v45 == 1 || (BYTE1(v42) - 48) > 9u)
            goto LABEL_49;
          v51 = (BYTE1(v42) - 48);
          if (v45 != 2)
          {
            if ((BYTE2(v42) - 48) > 9u)
              goto LABEL_49;
            v51 = 10 * (BYTE1(v42) - 48) + (BYTE2(v42) - 48);
            v53 = v45 - 3;
            if (v53)
            {
              v54 = (unsigned __int8 *)v72;
              while (1)
              {
                v55 = *v54 - 48;
                if (v55 > 9)
                  goto LABEL_49;
                v56 = 10 * v51;
                if ((unsigned __int128)(v51 * (__int128)10) >> 64 != (10 * v51) >> 63)
                  goto LABEL_49;
                v51 = v56 + v55;
                if (__OFADD__(v56, v55))
                  goto LABEL_49;
                LOBYTE(v42) = 0;
                ++v54;
                if (!--v53)
                  goto LABEL_62;
              }
            }
          }
        }
        else
        {
          if (v42 == 45)
          {
            if (!v45)
              goto LABEL_79;
            if (v45 != 1 && (BYTE1(v42) - 48) <= 9u)
            {
              if (v45 == 2)
              {
                LOBYTE(v42) = 0;
                v51 = -(uint64_t)(BYTE1(v42) - 48);
LABEL_62:
                swift_bridgeObjectRelease();
                if ((v42 & 1) != 0)
                  goto LABEL_72;
LABEL_63:
                v62 = v87;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)&v84 = v62;
                v87 = 0x8000000000000000;
                sub_24A185810(v51, v48, v75, isUniquelyReferenced_nonNull_native);
                v87 = v84;
                swift_bridgeObjectRelease();
                goto LABEL_9;
              }
              if ((BYTE2(v42) - 48) <= 9u)
              {
                v51 = -10 * (BYTE1(v42) - 48) - (BYTE2(v42) - 48);
                v61 = v45 - 3;
                if (!v61)
                  goto LABEL_61;
                v64 = (unsigned __int8 *)v72;
                while (1)
                {
                  v65 = *v64 - 48;
                  if (v65 > 9)
                    break;
                  v66 = 10 * v51;
                  if ((unsigned __int128)(v51 * (__int128)10) >> 64 != (10 * v51) >> 63)
                    break;
                  v51 = v66 - v65;
                  if (__OFSUB__(v66, v65))
                    break;
                  LOBYTE(v42) = 0;
                  ++v64;
                  if (!--v61)
                    goto LABEL_62;
                }
              }
            }
LABEL_49:
            v51 = 0;
            LOBYTE(v42) = 1;
            goto LABEL_62;
          }
          if (!v45 || (v42 - 48) > 9u)
            goto LABEL_49;
          v51 = (v42 - 48);
          if (v45 != 1)
          {
            if ((BYTE1(v42) - 48) > 9u)
              goto LABEL_49;
            v51 = 10 * (v42 - 48) + (BYTE1(v42) - 48);
            v57 = v45 - 2;
            if (v57)
            {
              v58 = (unsigned __int8 *)v71;
              while (1)
              {
                v59 = *v58 - 48;
                if (v59 > 9)
                  goto LABEL_49;
                v60 = 10 * v51;
                if ((unsigned __int128)(v51 * (__int128)10) >> 64 != (10 * v51) >> 63)
                  goto LABEL_49;
                v51 = v60 + v59;
                if (__OFADD__(v60, v59))
                  goto LABEL_49;
                LOBYTE(v42) = 0;
                ++v58;
                if (!--v57)
                  goto LABEL_62;
              }
            }
          }
        }
LABEL_61:
        LOBYTE(v42) = 0;
        goto LABEL_62;
      }
    }
LABEL_9:
    result = swift_bridgeObjectRelease();
    ++v22;
    v20 = v79;
    if (v22 == v81)
      goto LABEL_74;
  }
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for G2PFactored()
{
  return objc_opt_self();
}

unint64_t sub_24A186210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790C3D0;
  if (!qword_25790C3D0)
  {
    v1 = sub_24A139148(&qword_25790C3C8);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25790C3D0);
  }
  return result;
}

unint64_t sub_24A18625C()
{
  unint64_t result;

  result = qword_25790C3D8;
  if (!qword_25790C3D8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21AE68, &type metadata for G2PErrorV2);
    atomic_store(result, (unint64_t *)&qword_25790C3D8);
  }
  return result;
}

uint64_t sub_24A1862A0(_QWORD *a1)
{
  return sub_24A14D1E0(a1) & 1;
}

_DWORD *sub_24A1862B8(_DWORD *a1)
{
  return sub_24A1862F4(a1);
}

uint64_t sub_24A1862CC(uint64_t a1)
{
  return sub_24A18648C(a1);
}

uint64_t sub_24A1862E0(uint64_t a1)
{
  return sub_24A1865D0(a1);
}

_DWORD *sub_24A1862F4(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v2 + 16) <= 0x2FuLL)
  {
    __break(1u);
  }
  else
  {
    *result = *(_DWORD *)(v2 + 32);
    result[1] = *(_DWORD *)(v2 + 36);
    result[2] = *(_DWORD *)(v2 + 40);
    result[3] = *(_DWORD *)(v2 + 44);
    result[4] = *(_DWORD *)(v2 + 48);
    result[5] = *(_DWORD *)(v2 + 52);
    result[6] = *(_DWORD *)(v2 + 56);
    result[7] = *(_DWORD *)(v2 + 60);
    result[8] = *(_DWORD *)(v2 + 64);
    result[9] = *(_DWORD *)(v2 + 68);
    result[10] = *(_DWORD *)(v2 + 72);
    result[11] = *(_DWORD *)(v2 + 76);
    result[12] = *(_DWORD *)(v2 + 80);
    result[13] = *(_DWORD *)(v2 + 84);
    result[14] = *(_DWORD *)(v2 + 88);
    result[15] = *(_DWORD *)(v2 + 92);
    result[16] = *(_DWORD *)(v2 + 96);
    result[17] = *(_DWORD *)(v2 + 100);
    result[18] = *(_DWORD *)(v2 + 104);
    result[19] = *(_DWORD *)(v2 + 108);
    result[20] = *(_DWORD *)(v2 + 112);
    result[21] = *(_DWORD *)(v2 + 116);
    result[22] = *(_DWORD *)(v2 + 120);
    result[23] = *(_DWORD *)(v2 + 124);
    result[24] = *(_DWORD *)(v2 + 128);
    result[25] = *(_DWORD *)(v2 + 132);
    result[26] = *(_DWORD *)(v2 + 136);
    result[27] = *(_DWORD *)(v2 + 140);
    result[28] = *(_DWORD *)(v2 + 144);
    result[29] = *(_DWORD *)(v2 + 148);
    result[30] = *(_DWORD *)(v2 + 152);
    result[31] = *(_DWORD *)(v2 + 156);
    result[32] = *(_DWORD *)(v2 + 160);
    result[33] = *(_DWORD *)(v2 + 164);
    result[34] = *(_DWORD *)(v2 + 168);
    result[35] = *(_DWORD *)(v2 + 172);
    result[36] = *(_DWORD *)(v2 + 176);
    result[37] = *(_DWORD *)(v2 + 180);
    result[38] = *(_DWORD *)(v2 + 184);
    result[39] = *(_DWORD *)(v2 + 188);
    result[40] = *(_DWORD *)(v2 + 192);
    result[41] = *(_DWORD *)(v2 + 196);
    result[42] = *(_DWORD *)(v2 + 200);
    result[43] = *(_DWORD *)(v2 + 204);
    result[44] = *(_DWORD *)(v2 + 208);
    result[45] = *(_DWORD *)(v2 + 212);
    result[46] = *(_DWORD *)(v2 + 216);
    result[47] = *(_DWORD *)(v2 + 220);
  }
  return result;
}

uint64_t sub_24A18648C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = 0;
  v4 = *(uint64_t **)(v1 + 16);
LABEL_3:
  v5 = 0;
  v6 = v3 + 1;
  while (1)
  {
    v7 = *(_DWORD *)(a1 + 4 * v5);
    v8 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v4 = (uint64_t)v8;
    if ((result & 1) != 0)
    {
      if (!v8[2])
        goto LABEL_19;
    }
    else
    {
      result = (uint64_t)sub_24A17F650(v8);
      v8 = (_QWORD *)result;
      *v4 = result;
      if (!*(_QWORD *)(result + 16))
        goto LABEL_19;
    }
    v10 = (_QWORD *)v8[4];
    result = swift_isUniquelyReferenced_nonNull_native();
    v8[4] = v10;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A14893C(v10);
      v10 = (_QWORD *)result;
      v8[4] = result;
    }
    if (v3 >= v10[2])
      break;
    v11 = v10 + 4;
    v12 = v11[v3];
    result = swift_isUniquelyReferenced_nonNull_native();
    v11[v3] = v12;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A148928(v12);
      v12 = result;
      v11[v3] = result;
    }
    if (v5 >= *(_QWORD *)(v12 + 16))
      goto LABEL_18;
    *(_DWORD *)(v12 + 4 * v5++ + 32) = v7;
    if (v5 == 128)
    {
      a1 += 512;
      ++v3;
      if (v6 == 48)
        return result;
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_24A1865D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_21;
  v3 = 0;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = v4 + 32;
  v6 = *(_QWORD *)(v4 + 16);
  v7 = (_OWORD *)(result + 16);
  v8 = result;
  while (2)
  {
    if (v3 == v6)
    {
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      return result;
    }
    v9 = *(_QWORD *)(v5 + 8 * v3);
    v10 = *(_QWORD *)(v9 + 16);
    if (v10 >= 0x7F)
      v11 = 127;
    else
      v11 = *(_QWORD *)(v9 + 16);
    if (v11 > 7 && (unint64_t)(result + (v3 << 9) - v9 - 32) >= 0x20)
    {
      v13 = v11 + 1;
      v14 = v13 & 7;
      if ((v13 & 7) == 0)
        v14 = 8;
      v12 = v13 - v14;
      v15 = (__int128 *)(v9 + 48);
      v16 = v12;
      v17 = v7;
      do
      {
        v18 = *v15;
        *(v17 - 1) = *(v15 - 1);
        *v17 = v18;
        v17 += 2;
        v15 += 2;
        v16 -= 8;
      }
      while (v16);
    }
    else
    {
      v12 = 0;
    }
    ++v3;
    v19 = v9 + 32;
    do
    {
      if (v10 == v12)
      {
        __break(1u);
        goto LABEL_20;
      }
      *(_DWORD *)(v8 + 4 * v12) = *(_DWORD *)(v19 + 4 * v12);
      ++v12;
    }
    while (v12 != 128);
    v7 += 32;
    v8 += 512;
    if (v3 != 48)
      continue;
    return result;
  }
}

uint64_t sub_24A1866B8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = 0;
  v4 = *(uint64_t **)(v1 + 16);
LABEL_3:
  v5 = 0;
  v6 = v3 + 1;
  while (1)
  {
    v7 = *(_DWORD *)(a1 + 4 * v5);
    v8 = (_QWORD *)*v4;
    result = swift_isUniquelyReferenced_nonNull_native();
    *v4 = (uint64_t)v8;
    if ((result & 1) != 0)
    {
      if (!v8[2])
        goto LABEL_19;
    }
    else
    {
      result = (uint64_t)sub_24A17F650(v8);
      v8 = (_QWORD *)result;
      *v4 = result;
      if (!*(_QWORD *)(result + 16))
        goto LABEL_19;
    }
    v10 = (_QWORD *)v8[4];
    result = swift_isUniquelyReferenced_nonNull_native();
    v8[4] = v10;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A14893C(v10);
      v10 = (_QWORD *)result;
      v8[4] = result;
    }
    if (v3 >= v10[2])
      break;
    v11 = v10 + 4;
    v12 = v11[v3];
    result = swift_isUniquelyReferenced_nonNull_native();
    v11[v3] = v12;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A148928(v12);
      v12 = result;
      v11[v3] = result;
    }
    if (v5 >= *(_QWORD *)(v12 + 16))
      goto LABEL_18;
    *(_DWORD *)(v12 + 4 * v5++ + 32) = v7;
    if (v5 == 384)
    {
      a1 += 1536;
      ++v3;
      if (v6 == 48)
        return result;
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for G2PErrorV2()
{
  return &type metadata for G2PErrorV2;
}

uint64_t method lookup function for G2PFactored()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static G2PFactored.createIfValid()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of G2PFactored.getPronounciationString(word:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of G2PFactored.getPronounciation(word:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of G2PFactored.getPronounciationInfo(word:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

char *sub_24A1868A4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_24A21644C();
  __break(1u);
  return result;
}

unint64_t sub_24A186988()
{
  unint64_t result;

  result = qword_25790C408;
  if (!qword_25790C408)
  {
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_25790C408);
  }
  return result;
}

uint64_t sub_24A1869CC()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A186A00(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = a1;
  return swift_release();
}

uint64_t sub_24A186A44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 72);
  v6 = *(_DWORD *)(v1 + 152);
  v5 = v1 + 152;
  v4 = v6;
  v7 = *(_QWORD *)(v5 - 72);
  v8 = *(_QWORD *)(v5 - 64);
  v9 = *(_QWORD *)(v5 - 56);
  v10 = *(_QWORD *)(v5 - 48);
  v11 = *(_QWORD *)(v5 - 40);
  v12 = *(_QWORD *)(v5 - 32);
  v13 = *(_QWORD *)(v5 - 24);
  v14 = *(_QWORD *)(v5 - 16);
  v15 = *(_QWORD *)(v5 - 8);
  LOWORD(v6) = *(_WORD *)(v5 + 4);
  v16 = *(_BYTE *)(v5 + 6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 86) = v16;
  *(_WORD *)(a1 + 84) = v6;
  return sub_24A17BD44(v3);
}

uint64_t sub_24A186AD4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v2 = *a1;
  v3 = a1[3];
  v13 = *((_OWORD *)a1 + 2);
  v14 = *(_OWORD *)(a1 + 1);
  v4 = a1[6];
  v12 = *(_OWORD *)(a1 + 7);
  v5 = a1[9];
  v7 = *((_DWORD *)a1 + 20);
  v6 = a1 + 10;
  v8 = *((_WORD *)v6 + 2);
  v9 = *((_BYTE *)v6 + 6);
  swift_beginAccess();
  v10 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;
  *(_OWORD *)(v1 + 80) = v14;
  *(_QWORD *)(v1 + 96) = v3;
  *(_OWORD *)(v1 + 104) = v13;
  *(_QWORD *)(v1 + 120) = v4;
  *(_OWORD *)(v1 + 128) = v12;
  *(_QWORD *)(v1 + 144) = v5;
  *(_DWORD *)(v1 + 152) = v7;
  *(_WORD *)(v1 + 156) = v8;
  *(_BYTE *)(v1 + 158) = v9;
  return sub_24A176794(v10);
}

uint64_t VAResultGeneratorVerifier.__allocating_init(subVerifier:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 143) = 0u;
  sub_24A152310(a1, v4 + 16);
  *(_QWORD *)(v4 + 56) = a2;
  v5 = sub_24A180204();
  sub_24A14D184(a1);
  return v5;
}

uint64_t VAResultGeneratorVerifier.init(subVerifier:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  *(_OWORD *)(v2 + 143) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  sub_24A152310(a1, v2 + 16);
  *(_QWORD *)(v2 + 56) = a2;
  v5 = sub_24A180204();
  sub_24A14D184(a1);
  return v5;
}

uint64_t sub_24A186C94(uint64_t *a1)
{
  unsigned int v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  int v13;
  char v14;
  _QWORD *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  BOOL v54;
  uint64_t v55;

  v31 = *a1;
  v1 = *((_DWORD *)a1 + 2);
  v2 = *((unsigned __int8 *)a1 + 12);
  v3 = *((unsigned __int8 *)a1 + 13);
  v36 = a1[3];
  v37 = a1[2];
  v35 = *((unsigned __int8 *)a1 + 32);
  v55 = a1[5];
  v41 = *((unsigned __int8 *)a1 + 48);
  v40 = *((unsigned __int8 *)a1 + 49);
  v4 = *((_DWORD *)a1 + 13);
  v5 = *((unsigned __int8 *)a1 + 56);
  v7 = a1[8];
  v6 = a1[9];
  v39 = *((unsigned __int8 *)a1 + 80);
  v33 = *((unsigned __int8 *)a1 + 81);
  v38 = *((unsigned __int8 *)a1 + 82);
  v8 = *((unsigned __int8 *)a1 + 83);
  v9 = *((unsigned __int8 *)a1 + 84);
  v10 = *((unsigned __int8 *)a1 + 85);
  v11 = *((unsigned __int8 *)a1 + 86);
  type metadata accessor for VAResultGenerator();
  v12 = (void *)v34[7];
  v42 = v31;
  LODWORD(v43) = v1;
  BYTE4(v43) = v2;
  BYTE5(v43) = v3;
  v44 = v37;
  v45 = v36;
  LOBYTE(v46) = v35;
  v47 = v55;
  LOBYTE(v48) = v41;
  BYTE1(v48) = v40;
  HIDWORD(v48) = v4;
  v29 = v5;
  v30 = v7;
  LOBYTE(v49) = v5;
  v50 = v7;
  v51 = v6;
  LOBYTE(v52) = v39;
  BYTE1(v52) = v33;
  BYTE2(v52) = v38;
  v13 = v8;
  HIBYTE(v52) = v8;
  v14 = v9;
  LOBYTE(v53) = v9;
  HIBYTE(v53) = v10;
  v54 = v11;
  swift_bridgeObjectRetain();
  v15 = v12;
  swift_bridgeObjectRetain();
  result = sub_24A1BDB2C(v15, (uint64_t)&v42);
  if (!v32)
  {
    (*(void (**)(uint64_t))(*v34 + 152))(result);
    v17 = 0x100000000;
    if (v2)
      v18 = 0x100000000;
    else
      v18 = 0;
    v19 = v18 | v1;
    v20 = 0x10000000000;
    if (v3)
      v21 = 0x10000000000;
    else
      v21 = 0;
    v22 = v19 | v21;
    v23 = 256;
    if (!v40)
      v23 = 0;
    v24 = v23 | v41 | ((unint64_t)v4 << 32);
    v25 = 0x1000000;
    if (!v13)
      v25 = 0;
    if (!v9)
      v17 = 0;
    if (!v10)
      v20 = 0;
    v42 = v31;
    v43 = v22;
    v44 = v37;
    v45 = v36;
    v46 = v35;
    v47 = v55;
    v48 = v24;
    v49 = v29;
    v50 = v7;
    v51 = v6;
    v54 = v11 != 0;
    v52 = v39 | ((_DWORD)v33 << 8) | ((_DWORD)v38 << 16) | v25;
    v53 = (v39 | (v33 << 8) | (v38 << 16) | v25 | v17 | (unint64_t)v20) >> 32;
    v26 = *(void (**)(uint64_t *))(*v34 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26(&v42);
    v28 = v34[5];
    v27 = v34[6];
    sub_24A14B668(v34 + 2, v28);
    v42 = v31;
    LODWORD(v43) = v1;
    BYTE4(v43) = v2;
    BYTE5(v43) = v3;
    v44 = v37;
    v45 = v36;
    LOBYTE(v46) = v35;
    v47 = v55;
    LOBYTE(v48) = v41;
    BYTE1(v48) = v40;
    HIDWORD(v48) = v4;
    LOBYTE(v49) = v29;
    v50 = v30;
    v51 = v6;
    LOBYTE(v52) = v39;
    BYTE1(v52) = v33;
    BYTE2(v52) = v38;
    HIBYTE(v52) = v13;
    LOBYTE(v53) = v14;
    HIBYTE(v53) = v10;
    v54 = v11;
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(&v42, v28, v27);
  }
  return result;
}

void sub_24A186FF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float v39;
  int8x16_t v40;
  uint64x2_t v41;
  int16x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  float *v51;
  uint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int32 v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, unint64_t, unint64_t, float);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[7];
  unint64_t v98;

  v5 = v3;
  v9 = *(_QWORD *)(v5 + 40);
  v10 = *(_QWORD *)(v5 + 48);
  sub_24A14B668((_QWORD *)(v5 + 16), v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, v9, v10);
  if (v4)
    return;
  v12 = v11;
  if ((*(_BYTE *)(v11 + 16) & 1) == 0)
  {
    static VAVerifierModelOutput.none.getter(a3);
LABEL_25:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v11 + 24);
  if (!v13)
  {
    sub_24A14C404();
    swift_allocError();
    v28 = 0xD00000000000002BLL;
    v29 = "resultGeneratorInput.scores not initialized";
LABEL_24:
    *v27 = v28;
    v27[1] = (unint64_t)(v29 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_25;
  }
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144);
  v15 = swift_bridgeObjectRetain();
  v83 = v14(v15);
  if (!v83)
  {
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    v28 = 0xD000000000000017;
    v29 = "resultGenerator not set";
    goto LABEL_24;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 168))(&v87);
  v80 = v87;
  if (!v87)
  {
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v61 = 0xD000000000000015;
    v61[1] = 0x800000024A223640;
    swift_willThrow();
    swift_release();
    goto LABEL_25;
  }
  v62 = a3;
  v85 = *(_QWORD *)(v13 + 16);
  if (!v85)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v77 = v12;
  v78 = v88;
  v73 = v89;
  v74 = v90;
  v75 = v91;
  v76 = v92;
  v79 = v93;
  v63 = v94;
  v71 = v96;
  v72 = v95;
  v68 = v97[6];
  v67 = *(unsigned __int16 *)&v97[4];
  v69 = *(unsigned int *)v97;
  v84 = v13 + 32;
  v16 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 16);
  v17 = (_QWORD *)sub_24A1421D4(MEMORY[0x24BEE4AF8], v16);
  v81 = v16;
  if (v16)
  {
    v18 = 0;
LABEL_10:
    v98 = v18 + 1;
    v20 = v84;
    v19 = v85;
    while (v18 < *(_QWORD *)(*(_QWORD *)v20 + 16))
    {
      v21 = *(_DWORD *)(*(_QWORD *)v20 + 4 * v18 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = sub_24A14893C(v17);
      if (v18 >= v17[2])
        goto LABEL_51;
      v22 = v17 + 4;
      v23 = (char *)v17[v18 + 4];
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17[v18 + 4] = v23;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v23 = sub_24A147E34(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
        v22[v18] = v23;
      }
      v26 = *((_QWORD *)v23 + 2);
      v25 = *((_QWORD *)v23 + 3);
      if (v26 >= v25 >> 1)
      {
        v23 = sub_24A147E34((char *)(v25 > 1), v26 + 1, 1, v23);
        v22[v18] = v23;
      }
      *((_QWORD *)v23 + 2) = v26 + 1;
      *(_DWORD *)&v23[4 * v26 + 32] = v21;
      v20 += 8;
      if (!--v19)
      {
        v18 = v98;
        if (v98 == v81)
          goto LABEL_27;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
LABEL_27:
  v30 = swift_bridgeObjectRelease();
  v31 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v5 + 56)) + 0xC8))(v30);
  v33 = v77;
  if (!v32)
  {
LABEL_60:
    __break(1u);
    return;
  }
  v34 = v32;
  v35 = v69 | ((unint64_t)(v67 | (v68 << 16)) << 32);
  v36 = (*(uint64_t (**)(void))((*v31 & *v32) + 0x138))();

  v37 = v17[2];
  v98 = v35;
  v86 = v37;
  if (v37)
  {
    v38 = 0;
    v82 = v35 >> 8;
    v70 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, unint64_t, unint64_t, float))(*(_QWORD *)v83 + 592);
    v39 = (float)v36;
    v40.i64[0] = 0xFFFFFFFFFFFFFFLL;
    v40.i64[1] = 0xFFFFFFFFFFFFFFLL;
    v41 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v35), v40);
    v42 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v41, (uint64x2_t)xmmword_24A21A9B0), (int32x4_t)vshlq_u64(v41, (uint64x2_t)xmmword_24A21A9A0));
    *(int8x8_t *)v42.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v42), (int8x8_t)0x1000100010001);
    v64 = v36;
    v65 = 4 * v36;
    v43 = 32;
    v66 = vmovn_s16(v42).u32[0];
    v44 = v35 >> 16;
    while (1)
    {
      v45 = v38 + 1;
      v46 = *(_QWORD *)(v33 + 32);
      if (v46)
      {
        v47 = v38 * v36;
        if ((unsigned __int128)((uint64_t)v38 * (__int128)v36) >> 64 != (uint64_t)(v38 * v36) >> 63)
          goto LABEL_53;
        v48 = v45 * v36;
        if ((unsigned __int128)((uint64_t)v45 * (__int128)v36) >> 64 != (uint64_t)(v45 * v36) >> 63)
          goto LABEL_54;
        if (v48 < v47)
          goto LABEL_55;
        v49 = 0.0;
        if (v47 != v48)
        {
          if (v47 >= v48)
            goto LABEL_56;
          if (v47 < 0)
            goto LABEL_57;
          v50 = *(_QWORD *)(v46 + 16);
          if (v47 >= v50 || v48 - 1 >= v50)
            goto LABEL_58;
          v51 = (float *)(v46 + v43);
          v52 = v36;
          do
          {
            v53 = *v51++;
            v49 = v49 + v53;
            --v52;
          }
          while (v52);
        }
        v54 = v49 / v39;
      }
      else
      {
        v54 = 0.0;
      }
      if (v38 >= v17[2])
        goto LABEL_52;
      v55 = v17[v38 + 4];
      v87 = v80;
      LODWORD(v88) = v78;
      WORD2(v88) = WORD2(v78) & 0x101;
      v89 = v73;
      v90 = v74;
      LOBYTE(v91) = v75 & 1;
      v92 = v76;
      LOWORD(v93) = v79 & 0x101;
      HIDWORD(v93) = HIDWORD(v79);
      LOBYTE(v94) = v63 & 1;
      v95 = v72;
      v96 = v71;
      v56 = v98;
      v97[0] = v98;
      v97[1] = v82;
      v97[2] = v44;
      *(_DWORD *)&v97[3] = v66;
      swift_bridgeObjectRetain();
      v57 = VARuntimeParameters.keywordsNoThresholds.getter();
      v58 = v70(v55, v57, 0, 0, v56, v82, v44, v54);
      swift_bridgeObjectRelease();
      v59 = swift_bridgeObjectRelease();
      v60 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 88))(v59) + 16);
      swift_bridgeObjectRelease();
      if (v60)
        break;
      swift_release();
      v36 = v64;
      v43 += v65;
      v38 = v45;
      v33 = v77;
      if (v45 == v86)
        goto LABEL_46;
    }
    sub_24A176794(v80);
    sub_24A1CE3A0(v58, v62);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_46:
    sub_24A176794(v80);
    static VAVerifierModelOutput.none.getter(v62);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
}

void sub_24A1876FC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A187728()
{
  uint64_t v0;

  sub_24A14D184(v0 + 16);

  swift_release();
  return sub_24A176794(*(_QWORD *)(v0 + 72));
}

uint64_t VAResultGeneratorVerifier.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  sub_24A14D184(v0 + 16);

  swift_release();
  sub_24A176794(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t VAResultGeneratorVerifier.__deallocating_deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  sub_24A14D184(v0 + 16);

  swift_release();
  sub_24A176794(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t sub_24A187884()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t VAResultGeneratorInput.hasInput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t VAResultGeneratorInput.scores.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAResultGeneratorInput.vadBuffer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  return result;
}

uint64_t VAResultGeneratorInput.init(hasInput:scores:vadBuffer:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  return v3;
}

uint64_t VAResultGeneratorInput.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAResultGeneratorInput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VAResultGeneratorVerifier()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAResultGeneratorVerifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAResultGeneratorVerifier.__allocating_init(subVerifier:config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of VAResultGeneratorVerifier.predict(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t type metadata accessor for VAResultGeneratorInput()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAResultGeneratorInput()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of VAResultGeneratorInputProviding.predictScores(predictionInput:shouldSkipVerifierInference:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAResultGeneratorInputProviding.didStartListening(requestParams:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_24A187A10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  VARuntimeParameters.init()((uint64_t)a1);
  sub_24A135F88(&qword_25790A460);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_24A218630;
  strcpy((char *)(v2 + 32), "wake_up:0.98");
  *(_BYTE *)(v2 + 45) = 0;
  *(_WORD *)(v2 + 46) = -5120;
  strcpy((char *)(v2 + 48), "open_siri:0.85");
  *(_BYTE *)(v2 + 63) = -18;
  strcpy((char *)(v2 + 64), "show_siri:0.8");
  *(_WORD *)(v2 + 78) = -4864;
  *(_QWORD *)(v2 + 80) = 0xD000000000000013;
  *(_QWORD *)(v2 + 88) = 0x800000024A223730;
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_24A187AF8()
{
  return swift_deallocClassInstance();
}

uint64_t sub_24A187B08()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t sub_24A187B30(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_24A187B60@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  VARuntimeParameters.init()((uint64_t)a1);
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t sub_24A187BAC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

void *sub_24A187BD4()
{
  return &unk_24A21AFB0;
}

uint64_t static VAFixedKeywordSpotter.defaultPreSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_24A187BE8()
{
  return &unk_24A21AFB1;
}

uint64_t static VAFixedKeywordSpotter.defaultPostSilenceCheckEnabled.getter()
{
  return 0;
}

void *sub_24A187BFC()
{
  return &unk_24A21AFB2;
}

uint64_t static VAFixedKeywordSpotter.defaultDuringSpeechCheckEnabled.getter()
{
  return 1;
}

id sub_24A187C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  id v15;
  _BYTE v17[40];

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  *(_QWORD *)(v14 + 79) = 0;
  sub_24A152310(a3, (uint64_t)&v13[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider]);
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_kwsModel] = a4;
  *(_QWORD *)&v13[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_vadModel] = a5;
  sub_24A152310(a6, (uint64_t)v17);
  v15 = sub_24A1ED848(a1, a2, (uint64_t)v17);
  sub_24A14D184(a6);
  sub_24A14D184(a3);
  return v15;
}

uint64_t static VAFixedKeywordSpotter.buildForAudioToText(delegate:jsonConfigFilename:computeUnits:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  void *v8;
  _QWORD v10[5];

  type metadata accessor for VAConfiguration();
  v7 = static VAConfiguration.buildForFixedVCWakeupRuntime()();
  if (!v3)
  {
    v8 = v7;
    v10[3] = type metadata accessor for VARuntimeParametersFactoryForVCWakeup();
    v10[4] = &off_251B9A5E0;
    v10[0] = swift_allocObject();
    a3 = sub_24A18AD04(v8, a1, a2, a3, (uint64_t)v10);

    sub_24A14D184((uint64_t)v10);
  }
  return a3;
}

uint64_t static VAFixedKeywordSpotter.buildForVoiceControlWakeup(delegate:jsonConfigFilename:evalMode:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v9;
  void *v10;
  _QWORD v12[5];

  type metadata accessor for VAConfiguration();
  if ((a4 & 1) != 0)
  {
    v9 = static VAConfiguration.buildForFixedVCWakeupEval()();
    if (!v4)
      goto LABEL_5;
  }
  else
  {
    v9 = static VAConfiguration.buildForFixedVCWakeupRuntime()();
    if (!v4)
    {
LABEL_5:
      v10 = v9;
      v12[3] = type metadata accessor for VARuntimeParametersFactoryForVCWakeup();
      v12[4] = &off_251B9A5E0;
      v12[0] = swift_allocObject();
      a3 = sub_24A18AD04(v10, a1, a2, a3, (uint64_t)v12);

      sub_24A14D184((uint64_t)v12);
    }
  }
  return a3;
}

uint64_t type metadata accessor for VARuntimeParametersFactoryForVCWakeup()
{
  return objc_opt_self();
}

uint64_t static VAFixedKeywordSpotter.buildForCustomModel(delegate:jsonConfigFilename:modelFilePath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[5];

  type metadata accessor for VAConfiguration();
  v11 = static VAConfiguration.buildForFixedWithCustomModel(modelFilepath:)(a4, a5);
  if (!v5)
  {
    v13 = v11;
    v14 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v15 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v11) + 0x98))();
    if (v15)
    {
      v16 = v15;
      v17 = (*(uint64_t (**)(void))((*v14 & *v15) + 0xB0))();
      v18 = sub_24A18AC20(v17);
      swift_bridgeObjectRelease();
      v19 = type metadata accessor for VARuntimeParametersFactoryForCustomModel();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v18;
      v22[3] = v19;
      v22[4] = &off_251B9A5F0;
      v22[0] = v20;
      a3 = sub_24A18AD04(v13, a1, a2, a3, (uint64_t)v22);

      sub_24A14D184((uint64_t)v22);
    }
    else
    {
      sub_24A14C404();
      swift_allocError();
      *v21 = 0xD000000000000014;
      v21[1] = 0x800000024A223750;
      swift_willThrow();

    }
  }
  return a3;
}

uint64_t static VAFixedKeywordSpotter.buildForBreakthrough(delegate:jsonConfigFilename:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[5];

  v7 = type metadata accessor for VAConfiguration();
  v8 = static VAConfiguration.buildForFixedBreakthrough()();
  if (!v3)
  {
    v9 = v8;
    v11[3] = type metadata accessor for VARuntimeParametersFactoryDummy();
    v11[4] = &protocol witness table for VARuntimeParametersFactoryDummy;
    v11[0] = sub_24A1801F4();
    v7 = sub_24A18AD04(v9, a1, a2, a3, (uint64_t)v11);
    sub_24A14D184((uint64_t)v11);

  }
  return v7;
}

uint64_t sub_24A1880F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))(v4);
  v1 = v5;
  v2 = v6;
  sub_24A14B668(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  return sub_24A14D184((uint64_t)v4);
}

uint64_t *sub_24A188188(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  int v49;
  char v50;
  char v51;
  _QWORD *v52;
  _QWORD *v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  const char *v77;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  int v128;
  int v129;

  v2 = sub_24A135F88(&qword_25790A7C0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned __int8 *)(a1 + 12);
  v8 = *(unsigned __int8 *)(a1 + 13);
  v10 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v11 = *(unsigned __int8 *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned __int8 *)(a1 + 48);
  v14 = *(unsigned __int8 *)(a1 + 49);
  v15 = *(_DWORD *)(a1 + 52);
  v17 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v18 = *(unsigned __int8 *)(a1 + 80);
  v19 = (uint64_t *)*(unsigned __int8 *)(a1 + 81);
  v20 = *(unsigned __int8 *)(a1 + 82);
  v21 = *(unsigned __int8 *)(a1 + 83);
  v22 = *(unsigned __int8 *)(a1 + 84);
  v23 = *(unsigned __int8 *)(a1 + 85);
  v24 = *(unsigned __int8 *)(a1 + 86);
  v99 = *(unsigned __int8 *)(a1 + 56);
  v100 = v5;
  v107 = v5;
  v108 = v6;
  v109 = v7;
  v129 = v8;
  v110 = v8;
  v104 = v9;
  v105 = v10;
  v111 = v10;
  v112 = v9;
  v102 = v12;
  v103 = v11;
  v113 = v11;
  v114 = v12;
  v115 = v13;
  v116 = v14;
  v117 = v15;
  v118 = v99;
  v101 = v17;
  v119 = v17;
  v120 = v16;
  v96 = v16;
  v121 = v18;
  v98 = v19;
  v122 = (char)v19;
  v106 = v20;
  v123 = v20;
  v124 = v21;
  v125 = v22;
  v126 = v23;
  v128 = v24;
  v127 = v24;
  v25 = &v107;
  if ((VARuntimeParameters.allKeywordsAreValid.getter() & 1) == 0)
  {
    sub_24A14C404();
    swift_allocError();
    v76 = 0xD00000000000006DLL;
    v77 = "Keywords should be lower case and should not contain spaces to ensure model compatibility and API consistency";
LABEL_25:
    *v75 = v76;
    v75[1] = (unint64_t)(v77 - 32) | 0x8000000000000000;
    swift_willThrow();
    return v25;
  }
  v81 = v4;
  v95 = v7;
  v26 = 0x100000000;
  if (v7)
    v27 = 0x100000000;
  else
    v27 = 0;
  v28 = v27 | v6;
  v29 = 0x10000000000;
  if (v129)
    v30 = 0x10000000000;
  else
    v30 = 0;
  v31 = v28 | v30;
  v94 = v14;
  v32 = 256;
  if (!v14)
    v32 = 0;
  v83 = v13;
  v33 = v32 | v13 | ((unint64_t)v15 << 32);
  v91 = v18;
  v25 = v98;
  v34 = v18 | ((_QWORD)v98 << 8) | (v106 << 16);
  v93 = v21;
  v35 = 0x1000000;
  if (!v21)
    v35 = 0;
  v36 = v34 | v35;
  v82 = v22;
  if (!v22)
    v26 = 0;
  v92 = v23;
  if (!v23)
    v29 = 0;
  v37 = v34 | v26 | v29;
  v38 = v128;
  v39 = v97;
  v40 = (char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters;
  v41 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters);
  v85 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 8);
  v84 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 16);
  v87 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 24);
  v42 = v128 != 0;
  v86 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 32);
  v90 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 40);
  v89 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 48);
  v88 = *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters + 56);
  *(_QWORD *)v40 = v100;
  *((_QWORD *)v40 + 1) = v31;
  *((_QWORD *)v40 + 6) = v33;
  v40[86] = v42;
  *((_DWORD *)v40 + 20) = v36;
  *((_WORD *)v40 + 42) = WORD2(v37);
  v43 = v104;
  *((_QWORD *)v40 + 2) = v105;
  *((_QWORD *)v40 + 3) = v43;
  v44 = v102;
  *((_QWORD *)v40 + 4) = v103;
  *((_QWORD *)v40 + 5) = v44;
  v45 = v99;
  v46 = v101;
  *((_QWORD *)v40 + 7) = v99;
  *((_QWORD *)v40 + 8) = v46;
  v47 = v96;
  *((_QWORD *)v40 + 9) = v96;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A176794(v41);
  v48 = v129;
  v49 = v45;
  v50 = v38;
  v51 = v106;
  if (v49 && !*(uint64_t *)((char *)v39 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_vadModel))
  {
    sub_24A14C404();
    swift_allocError();
    v76 = 0xD00000000000003BLL;
    v77 = "Inference is gated by VAD, but VAD model is not initialized";
    goto LABEL_25;
  }
  v90 = type metadata accessor for VARequestContext();
  v52 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v53 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v39) + 0x78))();
  v107 = v100;
  v108 = v6;
  v109 = v95;
  v110 = v48;
  v111 = v105;
  v112 = v104;
  v113 = v103;
  v114 = v102;
  v54 = v50;
  v55 = v83;
  v115 = v83;
  v116 = v94;
  v117 = v15;
  v118 = v49;
  v119 = v101;
  v120 = v47;
  v121 = v91;
  v122 = (char)v25;
  v123 = v51;
  v124 = v93;
  v56 = v82;
  v125 = v82;
  v126 = v92;
  v127 = v54;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = sub_24A167FE8(v53, &v107);
  v25 = v39;
  v58 = (*(uint64_t (**)(uint64_t))((*v52 & *v39) + 0x120))(v57);
  v59 = (*(uint64_t (**)(uint64_t))((*v52 & *v39) + 0x118))(v58);
  if (!v59)
  {
    sub_24A14C404();
    swift_allocError();
    v76 = 0xD00000000000001DLL;
    v77 = "Failed to create request info";
    goto LABEL_25;
  }
  v60 = *(uint64_t *)((char *)v39 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider + 32);
  v61 = v59;
  v62 = v56;
  v63 = v100;
  v64 = v55;
  v65 = *(uint64_t *)((char *)v39 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider + 24);
  sub_24A14B668((uint64_t *)((char *)v39 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider), v65);
  v107 = v63;
  v66 = v61;
  v108 = v6;
  v109 = v95;
  v110 = v129;
  v111 = v105;
  v112 = v104;
  v113 = v103;
  v114 = v102;
  v115 = v64;
  v116 = v94;
  v117 = v15;
  v118 = v99;
  v119 = v101;
  v120 = v47;
  v121 = v91;
  v122 = (char)v98;
  v123 = v106;
  v124 = v93;
  v125 = v62;
  v126 = v92;
  v127 = v128;
  v67 = (*(uint64_t (**)(uint64_t *, _UNKNOWN **, uint64_t *, uint64_t, uint64_t))(v60 + 8))(v39, &protocol witness table for VAKeywordSpotterBase, &v107, v65, v60);
  v68 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v39) + 0x150))(v67);
  v69 = sub_24A215F78();
  v70 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v81, 1, 1, v69);
  v71 = (_QWORD *)swift_allocObject();
  v71[2] = 0;
  v71[3] = 0;
  v71[4] = v39;
  v71[5] = v66;
  v25 = v39;
  swift_retain();
  v72 = sub_24A152B18(v70, (uint64_t)&unk_25790C5F8, (uint64_t)v71);
  v73 = (*(uint64_t (**)(uint64_t))((*v68 & *v25) + 0x138))(v72);
  v74 = (*(uint64_t (**)(uint64_t))((*v68 & *v25) + 0x130))(v73);
  if (v74)
  {
    v25 = (uint64_t *)v74;
  }
  else
  {
    sub_24A14C404();
    swift_allocError();
    *v79 = 0xD00000000000001DLL;
    v79[1] = 0x800000024A2213B0;
    swift_willThrow();
  }
  swift_release();
  return v25;
}

uint64_t sub_24A18890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v5[3] = a1;
  v7 = sub_24A215A8C();
  v5[4] = v7;
  v5[5] = *(_QWORD *)(v7 - 8);
  v5[6] = swift_task_alloc();
  v8 = (_QWORD *)swift_task_alloc();
  v5[7] = v8;
  *v8 = v5;
  v8[1] = sub_24A1527E8;
  return sub_24A18898C(a5);
}

uint64_t sub_24A18898C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[42] = a1;
  v2[43] = v1;
  v3 = sub_24A215A8C();
  v2[44] = v3;
  v2[45] = *(_QWORD *)(v3 - 8);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A188A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  _QWORD *v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  id v61;
  _QWORD *v62;
  void (*v63)(uint64_t *__return_ptr);
  uint64_t v64;
  uint64_t (*v65)(void);
  uint64_t result;
  uint64_t v67;
  int *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void);
  uint64_t (*v74)(void);
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  __int128 v79;
  char v80;
  uint64_t v81;
  char v82;
  char v83;
  int v84;
  char v85;
  __int128 v86;
  __int16 v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  int v94;
  char v95;
  char v96;
  __int128 v97;
  char v98;
  uint64_t v99;
  char v100;
  char v101;
  int v102;
  char v103;
  __int128 v104;
  __int16 v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = sub_24A1B9D90();
  *(_QWORD *)(v0 + 400) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 408) = v5;
  v5(v1, v4, v2);
  v6 = sub_24A215A74();
  v7 = sub_24A2160F8();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_24A12D000, v6, v7, "Entering StartProcessingAudio()", v8, 2u);
    MEMORY[0x24BD0AAAC](v8, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 344);

  v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  *(_QWORD *)(v0 + 416) = v13;
  v13(v9, v10);
  v14 = v12 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters;
  v15 = *(_QWORD *)(v12 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters);
  *(_QWORD *)(v0 + 424) = v15;
  *(_QWORD *)(v0 + 432) = *(_QWORD *)(v14 + 8);
  *(_QWORD *)(v0 + 440) = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v14 + 24);
  *(_QWORD *)(v0 + 456) = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v0 + 464) = *(_QWORD *)(v14 + 40);
  *(_QWORD *)(v0 + 472) = *(_QWORD *)(v14 + 48);
  *(_QWORD *)(v0 + 480) = *(_QWORD *)(v14 + 56);
  *(_QWORD *)(v0 + 488) = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v0 + 496) = *(_QWORD *)(v14 + 72);
  v17 = *(_DWORD *)(v14 + 80);
  v14 += 80;
  v16 = v17;
  LOWORD(v17) = *(_WORD *)(v14 + 4);
  v18 = *(_BYTE *)(v14 + 6);
  *(_DWORD *)(v0 + 504) = v16;
  *(_BYTE *)(v0 + 510) = v18;
  *(_WORD *)(v0 + 508) = v17;
  if (!v15)
  {
    sub_24A14C404();
    swift_allocError();
    v36 = 0xD000000000000016;
    v37 = "Nil runtime parameters";
LABEL_9:
    *v35 = v36;
    v35[1] = (unint64_t)(v37 - 32) | 0x8000000000000000;
    swift_willThrow();
    goto LABEL_18;
  }
  v19 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v20 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 344)) + 0x78);
  *(_QWORD *)(v0 + 512) = v20;
  swift_bridgeObjectRetain();
  v21 = swift_bridgeObjectRetain();
  v73 = v20;
  v22 = (_QWORD *)((uint64_t (*)(uint64_t))v20)(v21);
  v23 = (_QWORD *)(*(uint64_t (**)(void))((*v19 & *v22) + 0x98))();
  *(_QWORD *)(v0 + 520) = v23;

  if (!v23)
  {
    sub_24A176794(v15);
    sub_24A14C404();
    swift_allocError();
    v36 = 0xD00000000000001ELL;
    v37 = "Nil fixed spotter model config";
    goto LABEL_9;
  }
  v72 = v15;
  v24 = (*(uint64_t (**)(void))((*v19 & *v23) + 0x128))();
  v25 = v23;
  if ((v24 & 1) != 0)
  {
    v26 = sub_24A1DED98();
    v27 = sub_24A1DEDA0();
    v28 = sub_24A173568();
    v24 = sub_24A1DEDA8(v26, v27, v28, (uint64_t *)(v0 + 192));
    v30 = *(_QWORD *)(v0 + 192);
    v29 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 216);
    v33 = *(_QWORD *)(v0 + 224);
    v34 = *(_QWORD *)(v0 + 232);
  }
  else
  {
    v30 = 0;
    v29 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
  }
  *(_QWORD *)(v0 + 240) = v30;
  *(_QWORD *)(v0 + 248) = v29;
  *(_QWORD *)(v0 + 256) = v31;
  *(_QWORD *)(v0 + 264) = v32;
  *(_QWORD *)(v0 + 272) = v33;
  *(_QWORD *)(v0 + 280) = v34;
  v38 = *(void (**)(void))((*v19 & *v23) + 0x158);
  v39 = *(_QWORD *)(((uint64_t (*)(uint64_t))v38)(v24) + 16);
  v40 = swift_bridgeObjectRelease();
  if (v39)
  {
    v41 = (_QWORD *)((uint64_t (*)(uint64_t))v73)(v40);
    v42 = (_QWORD *)(*(uint64_t (**)(void))((*v19 & *v41) + 0x80))();

    v43 = (*(uint64_t (**)(void))((*v19 & *v42) + 0x148))();
    v44 = (*(uint64_t (**)(void))((*v19 & *v25) + 0x140))();
    v38();
    sub_24A1DED08();
    v45 = sub_24A1DED18(v43, v44);
    v48 = v47;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    v48 = 0;
  }
  *(_DWORD *)(v0 + 664) = v48;
  *(_QWORD *)(v0 + 536) = v46;
  *(_QWORD *)(v0 + 528) = v45;
  v49 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_vadModel);
  *(_QWORD *)(v0 + 544) = v49;
  v71 = v45;
  v50 = 0;
  if (v49)
  {
    type metadata accessor for VACircularMatrixBuffer();
    v51 = (_QWORD *)v73();
    v52 = (_QWORD *)(*(uint64_t (**)(void))((*v19 & *v51) + 0x80))();

    v53 = (*(uint64_t (**)(void))((*v19 & *v52) + 0x148))();
    v50 = sub_24A1D3E00(66, v53);
  }
  *(_QWORD *)(v0 + 552) = v50;
  v54 = (_QWORD *)v73();
  v55 = (_QWORD *)(*(uint64_t (**)(void))((*v19 & *v54) + 0x98))();

  if (v55)
  {
    v56 = *(_QWORD *)(v0 + 336);
    type metadata accessor for VACircularMatrixBuffer();
    v57 = (*(uint64_t (**)(void))((*v19 & *v55) + 0xE0))();

    v58 = (_QWORD *)v73();
    v59 = (_QWORD *)(*(uint64_t (**)(void))((*v19 & *v58) + 0x80))();

    v60 = (*(uint64_t (**)(void))((*v19 & *v59) + 0x148))();
    *(_QWORD *)(v0 + 560) = sub_24A1D3E00(v57, v60);
    type metadata accessor for VAFeatureExtract();
    v61 = VAFeatureExtract.__allocating_init()();
    *(_QWORD *)(v0 + 568) = v61;
    type metadata accessor for VAResultGenerator();
    v62 = (_QWORD *)v73();
    v63 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v56 + 280);
    *(_QWORD *)(v0 + 576) = v63;
    v63(&v75);
    v93 = v75;
    v94 = v76;
    v95 = v77;
    v96 = v78;
    v97 = v79;
    v98 = v80;
    v99 = v81;
    v100 = v82;
    v101 = v83;
    v102 = v84;
    v103 = v85;
    v104 = v86;
    v105 = v87;
    v106 = v88;
    v107 = v89;
    v108 = v90;
    v109 = v91;
    v110 = v92;
    v64 = sub_24A1BDB2C(v62, (uint64_t)&v93);
    *(_QWORD *)(v0 + 584) = v64;
    *(_QWORD *)(v0 + 592) = 0;
    if (v64)
    {
      v67 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)(v0 + 312) = 0;
      v68 = *(int **)(*(_QWORD *)v67 + 336);
      *(_QWORD *)(v0 + 600) = v68;
      v74 = (uint64_t (*)(void))((char *)v68 + *v68);
      swift_retain();
      v69 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 608) = v69;
      *v69 = v0;
      v69[1] = sub_24A1891EC;
      v65 = v74;
      return v65();
    }
    sub_24A18AFD4(v71);
    sub_24A176794(v72);
    sub_24A14C404();
    swift_allocError();
    *v70 = 0xD000000000000014;
    v70[1] = 0x800000024A2238D0;
    swift_willThrow();

    swift_release();
    swift_release();
    sub_24A18B000(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v65 = *(uint64_t (**)(void))(v0 + 8);
    return v65();
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_24A1891EC(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 103) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A189248()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t (*v15)(void);

  if ((*(_BYTE *)(v0 + 103) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 424);
    sub_24A18AFD4(*(_QWORD *)(v0 + 528));
    sub_24A176794(v1);
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 344)) + 0x200))(0);
    v2 = *(void **)(v0 + 520);

    swift_release();
    swift_release_n();

    swift_release();
    sub_24A18B000(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  *(_QWORD *)(v0 + 616) = OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_kwsModel;
  v4 = swift_beginAccess();
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 312);
  v6 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v7 = *(uint64_t (**)(uint64_t))(v0 + 512);
  *(_QWORD *)(v0 + 312) = v6;
  v8 = (_QWORD *)v7(v4);
  v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v10 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v8) + 0x80))();

  v11 = (*(uint64_t (**)(void))((*v9 & *v10) + 0x160))();
  if (!v11)
  {
LABEL_10:
    swift_release();
    __break(1u);
    goto LABEL_11;
  }
  if (v6 != 0x8000000000000000 || v11 != -1)
  {
    v12 = *(int **)(**(_QWORD **)(v0 + 336) + 352);
    v15 = (uint64_t (*)(void))((char *)v12 + *v12);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v13;
    *v13 = v0;
    v13[1] = sub_24A189504;
    v3 = v15;
    return v3();
  }
LABEL_11:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_24A189504(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 640) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A189560()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  uint64_t (*v70)(uint64_t, float);
  uint64_t v71;
  unsigned int v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  float v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  float v88;
  unint64_t v89;
  uint64_t v90;
  float *v91;
  float v92;
  float v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  char v102;
  char v103;
  int v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  __int16 v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, float);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(uint64_t, uint64_t, uint64_t);
  unint64_t v148;
  uint64_t (*v149)(void);

  if (*(_QWORD *)(v0 + 640))
    v1 = *(_QWORD *)(v0 + 640);
  else
    v1 = MEMORY[0x24BEE4AF8];
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  if (!*(_QWORD *)(v1 + 16))
  {
    v13 = *(_QWORD *)(v0 + 424);
    v147 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 408);
    v14 = *(_QWORD *)(v0 + 384);
    v143 = *(_QWORD *)(v0 + 352);
    v144 = *(_QWORD *)(v0 + 400);
    sub_24A18AFD4(*(_QWORD *)(v0 + 528));
    swift_bridgeObjectRelease();
    sub_24A176794(v13);
    v147(v14, v144, v143);
    v15 = sub_24A215A74();
    v16 = sub_24A2160F8();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_24A12D000, v15, v16, "processing was stopped, stop predictions", v17, 2u);
      MEMORY[0x24BD0AAAC](v17, -1, -1);
    }
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    v19 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 352);

    v18(v19, v20);
    v21 = *(_QWORD *)(v0 + 624);
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 344)) + 0x200))(0);
    v22 = *(void **)(v0 + 568);
    v23 = *(void **)(v0 + 520);
    if (!v21)
    {

      swift_release();
      swift_release_n();

      swift_release();
      sub_24A18B000(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }

    swift_release();
    swift_release_n();

    swift_release();
    goto LABEL_16;
  }
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 544);
  v5 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 568)) + 0x170))(v1);
  swift_bridgeObjectRelease();
  if (v4 && v3)
  {
    v6 = *(void (**)(uint64_t))(**(_QWORD **)(v0 + 552) + 168);
    swift_retain();
    v6(v5);
    swift_release();
  }
  v7 = *(_QWORD *)(v0 + 624);
  if (*(_QWORD *)(v0 + 272))
  {
    v8 = sub_24A1DEFCC(v5);
    if (v7)
    {
      v9 = *(_QWORD *)(v0 + 528);
      v10 = *(void **)(v0 + 520);
      v11 = *(_QWORD *)(v0 + 424);

      swift_release();
      swift_release();
      swift_release_n();

      sub_24A18AFD4(v9);
      swift_bridgeObjectRelease();
      v12 = v11;
LABEL_11:
      sub_24A176794(v12);
LABEL_16:
      sub_24A18B000(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }
    v25 = v8;
    swift_bridgeObjectRelease();
    v5 = v25;
  }
  if (*(_QWORD *)(v0 + 528))
  {
    v26 = *(float *)(v0 + 664);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = sub_24A1DED24(v5, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v27;
  }
  v28 = *(uint64_t (**)(uint64_t))(v0 + 512);
  (*(void (**)(uint64_t))(**(_QWORD **)(v0 + 560) + 168))(v5);
  v29 = swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v0 + 312);
  v31 = (_QWORD *)v28(v29);
  v32 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v31) + 0x80))();

  v33 = (*(uint64_t (**)(void))((*v2 & *v32) + 0x160))();
  if (!v33)
  {
LABEL_81:
    swift_release();
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    swift_release();
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v30 == 0x8000000000000000 && v33 == -1)
    goto LABEL_85;
  if (v30 % v33)
  {
LABEL_24:
    *(_QWORD *)(v0 + 648) = v7;
    v149 = (uint64_t (*)(void))(**(int **)(v0 + 600) + *(_QWORD *)(v0 + 600));
    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v34;
    *v34 = v0;
    v34[1] = sub_24A18A5B4;
    v24 = v149;
    return v24();
  }
  v35 = *(_QWORD *)(v0 + 544);
  if (v35 && (v36 = *(_QWORD *)(v0 + 552)) != 0)
  {
    v37 = *(void (**)(uint64_t))(*(_QWORD *)v36 + 176);
    swift_retain();
    v38 = swift_retain();
    v37(v38);
    v39 = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 128))();
    if (v7)
    {
      v135 = *(_QWORD *)(v0 + 528);
      v40 = *(void **)(v0 + 520);
      v41 = *(_QWORD *)(v0 + 424);

      swift_release();
      swift_release();
      swift_release_n();
      swift_release_n();

      sub_24A18AFD4(v135);
      swift_bridgeObjectRelease();
      v12 = v41;
      goto LABEL_11;
    }
    v43 = v39;
    v68 = *(_QWORD *)(v0 + 480);
    swift_bridgeObjectRelease();
    if ((v68 & 1) == 0)
    {
      v44 = v2;
      swift_release();
      swift_release();
      v7 = 0;
      goto LABEL_33;
    }
    v69 = *(float *)(v0 + 476);
    v70 = *(uint64_t (**)(uint64_t, float))((*v2 & **(_QWORD **)(v0 + 344)) + 0x208);
    v71 = swift_bridgeObjectRetain();
    v72 = v70(v71, v69);
    swift_bridgeObjectRelease();
    v46 = (v72 >> 8) & 1;
    if ((v72 & 0x100) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
      v73 = sub_24A215A74();
      v74 = sub_24A2160F8();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v75 = 134217984;
        v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
        *(_QWORD *)(v0 + 328) = *(_QWORD *)(v0 + 312);
        sub_24A216260();
        _os_log_impl(&dword_24A12D000, v73, v74, "Speech stopped detected at frame %lld", v75, 0xCu);
        MEMORY[0x24BD0AAAC](v75, -1, -1);
      }
      v76 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      v77 = *(_QWORD *)(v0 + 376);
      v78 = *(_QWORD *)(v0 + 352);

      v76(v77, v78);
    }
    if ((v72 & 1) != 0)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 408))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
      v125 = sub_24A215A74();
      v126 = sub_24A2160F8();
      if (os_log_type_enabled(v125, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v127 = 134217984;
        *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 312);
        sub_24A216260();
        _os_log_impl(&dword_24A12D000, v125, v126, "Speech started detected at frame %lld", v127, 0xCu);
        MEMORY[0x24BD0AAAC](v127, -1, -1);
      }
      v128 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
      v129 = *(_QWORD *)(v0 + 368);
      v130 = *(_QWORD *)(v0 + 352);

      swift_release();
      swift_release();
      v128(v129, v130);
      v7 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      v7 = 0;
    }
  }
  else
  {
    v43 = 0;
    if ((*(_BYTE *)(v0 + 480) & 1) == 0)
    {
      v44 = v2;
LABEL_33:
      v45 = *(_QWORD *)(v0 + 616);
LABEL_40:
      v53 = *(_QWORD *)(v0 + 584);
      v54 = *(_QWORD *)(v0 + 344);
      v55 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 560) + 176))();
      v56 = *(_QWORD *)(v54 + v45);
      v57 = (*(uint64_t (**)(void))(*(_QWORD *)v53 + 344))();
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 176))(v55, v57);
      if (v7)
      {
        v61 = *(void **)(v0 + 568);
        v136 = *(_QWORD *)(v0 + 528);
        v62 = *(void **)(v0 + 520);
        v63 = *(_QWORD *)(v0 + 424);
        swift_bridgeObjectRelease();

        swift_release();
        swift_release();
        swift_release_n();

        swift_bridgeObjectRelease();
        sub_24A18AFD4(v136);
        swift_bridgeObjectRelease();
        v12 = v63;
        goto LABEL_11;
      }
      v64 = v58;
      v65 = v59;
      v66 = v60;
      swift_bridgeObjectRelease();
      v48 = swift_bridgeObjectRelease();
      v2 = v44;
      v67 = v66;
      goto LABEL_52;
    }
    LOBYTE(v46) = 0;
  }
  v47 = (*(uint64_t (**)(void))((*v2 & **(_QWORD **)(v0 + 344)) + 0x178))();
  v45 = *(_QWORD *)(v0 + 616);
  if ((v46 & 1) != 0 || (v47 & 1) != 0)
  {
    v44 = v2;
    goto LABEL_40;
  }
  v48 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 344) + v45) + 168))();
  if (v7)
  {
    v142 = *(_QWORD *)(v0 + 528);
    v51 = *(void **)(v0 + 520);
    v52 = *(_QWORD *)(v0 + 424);

    swift_release();
    swift_release();
    swift_release_n();

    swift_bridgeObjectRelease();
    sub_24A18AFD4(v142);
    v12 = v52;
    goto LABEL_11;
  }
  v64 = v48;
  v65 = v49;
  v67 = v50;
LABEL_52:
  v79 = (_QWORD *)(*(uint64_t (**)(uint64_t))(v0 + 512))(v48);
  v80 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v79) + 0xC8))();

  if (v80)
  {
    v81 = (*(uint64_t (**)(void))((*v2 & *v80) + 0x138))();

    v145 = *(_QWORD *)(v64 + 16);
    if (!v145)
    {
LABEL_74:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = 0;
      goto LABEL_24;
    }
    v82 = 0;
    v137 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, float))(**(_QWORD **)(v0 + 584) + 592);
    v141 = v64 + 32;
    v146 = v65;
    v133 = v67 + 32;
    v134 = v65 + 32;
    v83 = (float *)(v43 + 32);
    v84 = (float)v81;
    v131 = 4 * v81;
    v132 = v81;
    v139 = v67;
    v140 = v43;
    v138 = v64;
    while (1)
    {
      v85 = v82 + 1;
      if (v43)
      {
        v86 = v82 * v81;
        if ((unsigned __int128)((uint64_t)v82 * (__int128)v81) >> 64 != (uint64_t)(v82 * v81) >> 63)
          goto LABEL_82;
        v87 = v85 * v81;
        if ((unsigned __int128)((uint64_t)v85 * (__int128)v81) >> 64 != (uint64_t)(v85 * v81) >> 63)
          goto LABEL_83;
        if (v87 < v86)
          goto LABEL_84;
        v88 = 0.0;
        if (v86 != v87)
        {
          if (v86 >= v87)
            goto LABEL_86;
          if (v86 < 0)
            goto LABEL_87;
          v89 = *(_QWORD *)(v43 + 16);
          if (v86 >= v89 || v87 - 1 >= v89)
            goto LABEL_88;
          v90 = v81;
          v91 = v83;
          do
          {
            v92 = *v91++;
            v88 = v88 + v92;
            --v90;
          }
          while (v90);
        }
        v93 = v88 / v84;
      }
      else
      {
        v93 = 0.0;
      }
      if (v82 >= *(_QWORD *)(v64 + 16))
        break;
      v148 = v82 + 1;
      v94 = *(void (**)(uint64_t))(v0 + 576);
      v95 = *(_QWORD *)(v141 + 8 * v82);
      v96 = swift_bridgeObjectRetain();
      v94(v96);
      v97 = *(_DWORD *)(v0 + 24);
      v98 = *(_BYTE *)(v0 + 28);
      v99 = *(_BYTE *)(v0 + 29);
      v100 = *(_BYTE *)(v0 + 48);
      v101 = *(_QWORD *)(v0 + 56);
      v102 = *(_BYTE *)(v0 + 64);
      v103 = *(_BYTE *)(v0 + 65);
      v104 = *(_DWORD *)(v0 + 68);
      v105 = *(_BYTE *)(v0 + 72);
      v106 = *(_QWORD *)(v0 + 80);
      v107 = *(_QWORD *)(v0 + 88);
      v108 = *(_WORD *)(v0 + 96);
      v109 = *(_BYTE *)(v0 + 98);
      v110 = *(_BYTE *)(v0 + 99);
      v111 = *(_BYTE *)(v0 + 100);
      v112 = *(_BYTE *)(v0 + 101);
      v113 = *(_BYTE *)(v0 + 102);
      *(_QWORD *)(v0 + 104) = *(_QWORD *)(v0 + 16);
      *(_DWORD *)(v0 + 112) = v97;
      *(_BYTE *)(v0 + 116) = v98;
      *(_BYTE *)(v0 + 117) = v99;
      *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 32);
      *(_BYTE *)(v0 + 136) = v100;
      *(_QWORD *)(v0 + 144) = v101;
      *(_BYTE *)(v0 + 152) = v102;
      *(_BYTE *)(v0 + 153) = v103;
      *(_DWORD *)(v0 + 156) = v104;
      *(_BYTE *)(v0 + 160) = v105;
      *(_QWORD *)(v0 + 168) = v106;
      *(_QWORD *)(v0 + 176) = v107;
      *(_WORD *)(v0 + 184) = v108;
      *(_BYTE *)(v0 + 186) = v109;
      *(_BYTE *)(v0 + 187) = v110;
      *(_BYTE *)(v0 + 188) = v111;
      *(_BYTE *)(v0 + 189) = v112;
      *(_BYTE *)(v0 + 190) = v113;
      v114 = VARuntimeParameters.keywordsNoThresholds.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v82 >= *(_QWORD *)(v146 + 16))
        goto LABEL_79;
      if (v82 >= *(_QWORD *)(v67 + 16))
        goto LABEL_80;
      v115 = *(unsigned int *)(v0 + 504);
      v116 = v115 | ((unint64_t)(*(unsigned __int16 *)(v0 + 508) | (*(unsigned __int8 *)(v0 + 510) << 16)) << 32);
      v117 = v116 >> 8;
      v118 = v116 >> 16;
      v119 = 8 * v82;
      v120 = *(_QWORD *)(v134 + 8 * v82);
      v121 = *(_QWORD *)(v133 + v119);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v122 = v137(v95, v114, v120, v121, v115, v117, v118, v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v123 = swift_bridgeObjectRelease();
      v124 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v122 + 88))(v123) + 16);
      swift_bridgeObjectRelease();
      if (v124)
        (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 344)) + 0x210))(v122);
      swift_release();
      v81 = v132;
      v83 = (float *)((char *)v83 + v131);
      v82 = v148;
      v67 = v139;
      v43 = v140;
      v64 = v138;
      if (v148 == v145)
        goto LABEL_74;
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
LABEL_89:
  swift_release();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_24A18A5B4(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 191) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24A18A610()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t (*v14)(void);

  if ((*(_BYTE *)(v0 + 191) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 424);
    sub_24A18AFD4(*(_QWORD *)(v0 + 528));
    sub_24A176794(v1);
    (*(void (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 344)) + 0x200))(0);
    v2 = *(void **)(v0 + 520);

    swift_release();
    swift_release_n();

    swift_release();
    sub_24A18B000(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  *(_QWORD *)(v0 + 624) = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v6 = *(uint64_t (**)(void))(v0 + 512);
  *(_QWORD *)(v0 + 312) = v5;
  v7 = (_QWORD *)v6();
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v9 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v7) + 0x80))();

  v10 = (*(uint64_t (**)(void))((*v8 & *v9) + 0x160))();
  if (!v10)
  {
LABEL_10:
    swift_release();
    __break(1u);
    goto LABEL_11;
  }
  if (v5 != 0x8000000000000000 || v10 != -1)
  {
    v11 = *(int **)(**(_QWORD **)(v0 + 336) + 352);
    v14 = (uint64_t (*)(void))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v12;
    *v12 = v0;
    v12[1] = sub_24A189504;
    v3 = v14;
    return v3();
  }
LABEL_11:
  result = swift_release();
  __break(1u);
  return result;
}

void sub_24A18A8AC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A18A8D8()
{
  uint64_t v0;

  sub_24A14D184(v0 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider);
  swift_release();
  swift_release();
  return sub_24A176794(*(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters));
}

id VAFixedKeywordSpotter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VAFixedKeywordSpotter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A18AA24(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_24A18AC20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_24A135F88(&qword_25790A460);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_24A18AA24((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_24A18B030();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_24A18AD04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE v21[40];
  _BYTE v22[40];
  _QWORD v23[5];

  if (a4)
  {
    v8 = type metadata accessor for VAConfiguration();
    v9 = (id)static VAConfiguration.buildFromConfigFile(jsonFile:)();
    if (v5)
      return v8;
  }
  else
  {
    v9 = a1;
  }
  v10 = v9;
  v11 = type metadata accessor for VAKWSModel();
  v12 = v10;
  v8 = v11;
  v13 = sub_24A1EBFC4(v12);
  if (v5)
  {

  }
  else
  {
    v14 = v13;
    type metadata accessor for VASilenceModel();
    v15 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v12) + 0xE0))();
    v18 = sub_24A1A446C(v15, v16);
    v23[3] = type metadata accessor for VAStrategyProviderPassthrough();
    v23[4] = &protocol witness table for VAStrategyProviderPassthrough;
    v23[0] = sub_24A1801F4();
    sub_24A152310(a5, (uint64_t)v22);
    v19 = (char *)objc_allocWithZone((Class)type metadata accessor for VAFixedKeywordSpotter());
    v20 = &v19[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_runtimeParameters];
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *((_OWORD *)v20 + 4) = 0u;
    *(_QWORD *)(v20 + 79) = 0;
    sub_24A152310((uint64_t)v23, (uint64_t)&v19[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_strategyProvider]);
    *(_QWORD *)&v19[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_kwsModel] = v14;
    *(_QWORD *)&v19[OBJC_IVAR____TtC12VoiceActions21VAFixedKeywordSpotter_vadModel] = v18;
    sub_24A152310((uint64_t)v22, (uint64_t)v21);
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v8 = (uint64_t)sub_24A1ED848(a2, (uint64_t)v12, (uint64_t)v21);
    sub_24A14D184((uint64_t)v22);
    sub_24A14D184((uint64_t)v23);
    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t type metadata accessor for VARuntimeParametersFactoryForCustomModel()
{
  return objc_opt_self();
}

uint64_t sub_24A18AF10()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24A18AF44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_24A152AD0;
  return sub_24A18890C(a1, v7, v8, v5, v4);
}

uint64_t type metadata accessor for VAFixedKeywordSpotter()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAFixedKeywordSpotter()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A18AFD4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A18B000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A18B030()
{
  return swift_release();
}

id sub_24A18B038()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 16);
}

void sub_24A18B068(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*sub_24A18B0AC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A18B150()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9A660);
  swift_arrayDestroy();
  return v0;
}

id sub_24A18B194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  void *v4;
  id v5;

  v3 = a1 == 0x61775F7475706E69 && a2 == 0xE900000000000076;
  if (!v3 && (sub_24A21659C() & 1) == 0)
    return 0;
  v4 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 88))();
  v5 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, v4);

  return v5;
}

void sub_24A18B324()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_24A215C90();
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4)
LABEL_5:
    __break(1u);
}

uint64_t sub_24A18B3C0()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 88))();
  return sub_24A215AA4();
}

uint64_t sub_24A18B498()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_featureNames);
  v2 = sub_24A216068();

  return v2;
}

id sub_24A18B4EC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_24A215C90();
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  return v3;
}

uint64_t sub_24A18B5C0(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

unint64_t sub_24A18B6F8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_24A135F88(&qword_25790C3B8);
  v2 = sub_24A216440();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24A18CC4C(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_24A148970(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_24A170EFC(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A18B820()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A18B844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A18B9F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t v18;

  v3 = v1;
  v5 = sub_24A215750();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v18 - v11;
  (*(void (**)(uint64_t))(v1 + 88))(v10);
  v13 = sub_24A16D544(0, qword_25790C7A0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
  v14 = a1;
  v15 = sub_24A18CA1C((uint64_t)v9, (uint64_t)v14);
  if (v2)
  {

  }
  else
  {
    v16 = v15;

    v13 = (*(uint64_t (**)(id))(v3 + 96))(v16);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  return v13;
}

uint64_t sub_24A18BB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = sub_24A215750();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v3 + 88))(v9);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 120))(v11, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_24A18BBE8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_24A215750();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24A18BC48()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD, _QWORD);

  v1 = v0[3];
  (*(void (**)(void))(v1 + 88))();
  v4 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v1 + 128) + *(_QWORD *)(v1 + 128));
  v2 = (_QWORD *)swift_task_alloc();
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_24A18BCB8;
  return v4(v0[6], v0[2]);
}

uint64_t sub_24A18BCB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 64) = v1;
  swift_task_dealloc();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 40) + 8))(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 32));
  if (v1)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_24A18BD54()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A18BD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A18BE20()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A18BEA0;
  return sub_24A2161AC();
}

uint64_t sub_24A18BEA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A18BF1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for aa_encoder_20240530();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A18BF60(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC0010]), sel_init);
  v4 = (*(uint64_t (**)(uint64_t, id))(*(_QWORD *)v1 + 144))(a1, v3);

  return v4;
}

uint64_t sub_24A18BFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for aa_encoder_20240530Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A18C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A18C0C0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A18C118;
  return sub_24A216194();
}

uint64_t sub_24A18C118(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A18C194()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for aa_encoder_20240530Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A18C1D8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for aa_encoder_20240530Input();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A18C250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A18C9D0();
  v12 = sub_24A2160E0();
  type metadata accessor for aa_encoder_20240530Input();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A18C398(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for aa_encoder_20240530Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A18C66C()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_24A18C690()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)sub_24A215C0C();
  swift_bridgeObjectRelease();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithDictionary_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_24A18C774(uint64_t a1, char a2)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v5;
  v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
      return result;
    v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_24A216410();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1)
    v9 = a1;
  else
    v9 = v8;
  result = MEMORY[0x24BD09BF4](v7, v9, a2 & 1, v5);
  *v2 = result;
  return result;
}

uint64_t sub_24A18C830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_24A135F88(&qword_25790CAB8);
    v3 = sub_24A2162F0();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_24A216638();
      swift_bridgeObjectRetain();
      sub_24A215D50();
      result = sub_24A21665C();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_24A21659C(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_24A21659C();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t sub_24A18C9D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790C788;
  if (!qword_25790C788)
  {
    v1 = sub_24A139148(&qword_25790C778);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BDBFCC8], v1);
    atomic_store(result, (unint64_t *)&qword_25790C788);
  }
  return result;
}

id sub_24A18CA1C(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  id v10;
  uint64_t v11;
  id v13[2];

  v13[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = (void *)sub_24A215720();
  v13[0] = 0;
  v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_modelWithContentsOfURL_configuration_error_, v4, a2, v13);

  v6 = v13[0];
  if (v5)
  {
    v7 = sub_24A215750();
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v9 = v6;
    v8(a1, v7);
  }
  else
  {
    v10 = v13[0];
    sub_24A2156F0();

    swift_willThrow();
    v11 = sub_24A215750();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  return v5;
}

uint64_t sub_24A18CB38()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A18CB5C(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for aa_encoder_20240530();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for aa_encoder_20240530()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_encoder_20240530Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_encoder_20240530Input()
{
  return objc_opt_self();
}

void sub_24A18CC40(id a1)
{

}

uint64_t sub_24A18CC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790CAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static VAA2TVerifierV2.maxPhonemesPerKeyword.getter()
{
  return 48;
}

uint64_t sub_24A18CCA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return sub_24A152310(v1 + 32, a1);
}

uint64_t sub_24A18CCEC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 32;
  swift_beginAccess();
  sub_24A14D184(v3);
  sub_24A13DB20(a1, v3);
  return swift_endAccess();
}

void *sub_24A18CD44()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 88);
  v2 = v1;
  return v1;
}

void sub_24A18CD84(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = a1;

}

uint64_t sub_24A18CDC8(unsigned __int8 *a1, uint64_t a2)
{
  swift_allocObject();
  return sub_24A18CE18(a1, a2);
}

uint64_t sub_24A18CE18(unsigned __int8 *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  v4 = v3;
  v5 = v2;
  v7 = *a1;
  v8 = MEMORY[0x24BEE4AF8];
  v2[3] = MEMORY[0x24BEE4AF8];
  v2[9] = v8;
  v2[10] = v8;
  v2[11] = 0;
  v9 = objc_allocWithZone(MEMORY[0x24BDBFFE0]);
  swift_retain();
  v10 = objc_msgSend(v9, sel_init);
  v11 = v10;
  if (v7)
    v12 = 3;
  else
    v12 = 0;
  objc_msgSend(v10, sel_setComputeUnits_, v12);
  type metadata accessor for at_verifier_rdr_125141826();
  v13 = sub_24A18B9F8(v11);
  if (v4)
  {
    sub_24A14D184(a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = (void *)v5[11];
    swift_release();

    type metadata accessor for VAA2TVerifierV2();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    v5[2] = v13;
    sub_24A152310(a2, (uint64_t)(v5 + 4));
    swift_release();
    v16 = sub_24A180204();
    sub_24A14D184(a2);
    return v16;
  }
}

uint64_t type metadata accessor for VAA2TVerifierV2()
{
  return objc_opt_self();
}

uint64_t sub_24A18CF6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t result;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;

  v3 = v1;
  v5 = type metadata accessor for G2PFactored();
  v6 = (void *)(*(uint64_t (**)(void))(v5 + 80))();
  if (!v6)
  {
    sub_24A14C404();
    swift_allocError();
    *v28 = 0xD000000000000014;
    v28[1] = 0x800000024A2239C0;
    swift_willThrow();
    return (uint64_t)v2;
  }
  v7 = v6;
  v2 = (_QWORD *)sub_24A16D64C(MEMORY[0x24BEE4AF8]);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {

    return (uint64_t)v2;
  }
  v31 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & *v7) + 0x60);
  swift_bridgeObjectRetain();
  v30 = v7;
  v9 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v12 = *(v9 - 1);
    v11 = *v9;
    swift_bridgeObjectRetain();
    v13 = v31(v12, v11);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return (uint64_t)v2;
    }
    v14 = v13;
    v32 = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = sub_24A148970(v12, v11);
    v18 = v2[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (v2[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_24A16F46C();
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_24A16EAC8(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_24A148970(v12, v11);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_25;
      v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_4:
        v10 = v2[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v10 + 8 * v17) = v14;
        goto LABEL_5;
      }
    }
    v2[(v17 >> 6) + 8] |= 1 << v17;
    v24 = (uint64_t *)(v2[6] + 16 * v17);
    *v24 = v12;
    v24[1] = v11;
    *(_QWORD *)(v2[7] + 8 * v17) = v14;
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_24;
    v2[2] = v27;
    swift_bridgeObjectRetain();
LABEL_5:
    v9 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = 0;
    v8 = v32 - 1;
    v7 = v30;
    if (v32 == 1)
    {

      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = sub_24A2165CC();
  __break(1u);
  return result;
}

uint64_t sub_24A18D21C(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD **__return_ptr, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  _QWORD *v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  BOOL v117;
  unint64_t v118;
  void (*v119)(_QWORD **__return_ptr, uint64_t);
  int64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  char v128;
  char v129;
  char v130;
  uint64_t v131;
  char isUniquelyReferenced_nonNull_native;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t, uint64_t);
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  __int128 v177;
  _QWORD *v178;
  int64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  unint64_t v185;
  unint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char v191;
  int v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  char v201;
  char v202;
  int64_t v203;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v157 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(unsigned __int8 *)(a1 + 12);
  v10 = *(unsigned __int8 *)(a1 + 13);
  v11 = *(unint64_t **)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(unsigned __int8 *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int8 *)(a1 + 48);
  v16 = *(unsigned __int8 *)(a1 + 49);
  v17 = *(_DWORD *)(a1 + 52);
  v18 = *(unsigned __int8 *)(a1 + 56);
  v19 = *(_QWORD *)(a1 + 64);
  v20 = *(_QWORD *)(a1 + 72);
  v21 = *(unsigned __int8 *)(a1 + 80);
  v22 = *(unsigned __int8 *)(a1 + 81);
  v23 = *(unsigned __int8 *)(a1 + 82);
  v24 = *(unsigned __int8 *)(a1 + 83);
  v25 = *(unsigned __int8 *)(a1 + 84);
  v26 = *(unsigned __int8 *)(a1 + 85);
  v27 = *(unsigned __int8 *)(a1 + 86);
  v175 = *(_QWORD *)a1;
  v184 = (_QWORD *)v175;
  LODWORD(v185) = v8;
  v169 = v9;
  BYTE4(v185) = v9;
  v168 = v10;
  BYTE5(v185) = v10;
  v176 = v11;
  v186 = v11;
  v187 = v12;
  LODWORD(v182) = v13;
  LOBYTE(v188) = v13;
  v189 = v14;
  v161 = v15;
  v190 = v15;
  v167 = v16;
  v191 = v16;
  v192 = v17;
  v166 = v18;
  v193 = v18;
  v174 = v19;
  v194 = v19;
  v195 = v20;
  v173 = v20;
  v172 = v21;
  v196 = v21;
  v171 = v22;
  v197 = v22;
  v170 = v23;
  v198 = v23;
  v165 = v24;
  v199 = v24;
  v164 = v25;
  v200 = v25;
  v163 = v26;
  v201 = v26;
  v162 = v27;
  v202 = v27;
  v28 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
  swift_bridgeObjectRelease();
  v29 = sub_24A1421D4((uint64_t)&unk_251B9A6B8, v28);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 168))(v29);
  v31 = *(void (**)(_QWORD **__return_ptr, uint64_t))(*(_QWORD *)v3 + 184);
  v31(&v184, v30);
  v32 = v187;
  v33 = v188;
  sub_24A14B668(&v184, v187);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
  v35 = v2;
  if (v2)
    return sub_24A14D184((uint64_t)&v184);
  v37 = v34;
  v159 = v3;
  *(_QWORD *)&v177 = v31;
  v158 = v7;
  swift_bridgeObjectRetain();
  sub_24A14D184((uint64_t)&v184);
  v184 = (_QWORD *)v175;
  LODWORD(v185) = v8;
  BYTE4(v185) = v169;
  BYTE5(v185) = v168;
  v38 = v176;
  v186 = v176;
  v187 = v12;
  v181 = v12;
  v39 = v182;
  LOBYTE(v188) = v182;
  v160 = v14;
  v189 = v14;
  v40 = v161;
  v190 = v161;
  v191 = v167;
  v192 = v17;
  v193 = v166;
  v194 = v174;
  v195 = v173;
  v196 = v172;
  v197 = v171;
  v198 = v170;
  v199 = v165;
  v200 = v164;
  v201 = v163;
  v202 = v162;
  v41 = VARuntimeParameters.keywordsNoThresholds.getter();
  v42 = *(_QWORD *)(v41 + 16);
  if (v42)
  {
    v203 = 0;
    v43 = (uint64_t *)(v41 + 40);
    v44 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v46 = *(v43 - 1);
      v45 = *v43;
      v47 = *(_QWORD *)(v37 + 16);
      swift_bridgeObjectRetain();
      if (v47
        && (swift_bridgeObjectRetain(), sub_24A148970(v46, v45), v49 = v48, swift_bridgeObjectRelease(), (v49 & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v44 = sub_24A14804C(0, v44[2] + 1, 1, v44);
        v51 = v44[2];
        v50 = v44[3];
        if (v51 >= v50 >> 1)
          v44 = sub_24A14804C((_QWORD *)(v50 > 1), v51 + 1, 1, v44);
        v44[2] = v51 + 1;
        v52 = &v44[2 * v51];
        v52[4] = v46;
        v52[5] = v45;
        v39 = v182;
      }
      v43 += 2;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
    v35 = v203;
    v38 = v176;
    v53 = v160;
    v40 = v161;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v53 = v160;
  }
  swift_bridgeObjectRelease();
  if (!v44[2])
  {
    swift_bridgeObjectRelease();
    v58 = v175;
    v59 = v181;
    v60 = v174;
    goto LABEL_20;
  }
  type metadata accessor for VALog();
  v54 = (uint64_t)v158;
  static VALog.begin(_:_:)("G2p", 3, 2u, 0, 0, (uint64_t)v158);
  v55 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v159 + 288);
  v56 = swift_bridgeObjectRetain();
  v57 = v55(v56);
  if (v35)
  {
    swift_bridgeObjectRelease();
    sub_24A18EDEC(v54);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v107 = v57;
  v203 = 0;
  swift_bridgeObjectRelease();
  v108 = *(_QWORD *)(v107 + 64);
  v178 = (_QWORD *)(v107 + 64);
  v109 = 1 << *(_BYTE *)(v107 + 32);
  v110 = -1;
  if (v109 < 64)
    v110 = ~(-1 << v109);
  v111 = v110 & v108;
  v179 = (unint64_t)(v109 + 63) >> 6;
  swift_bridgeObjectRetain();
  v112 = (_QWORD *)v107;
  v180 = (_QWORD *)v107;
LABEL_49:
  v113 = (uint64_t)v44;
  v114 = v37;
  v59 = v181;
  if (v111)
  {
LABEL_50:
    v115 = __clz(__rbit64(v111));
    v111 &= v111 - 1;
    v116 = v115 | (v35 << 6);
    goto LABEL_66;
  }
  while (1)
  {
    v117 = __OFADD__(v35++, 1);
    if (v117)
      goto LABEL_107;
    if (v35 >= v179)
    {
      v35 = v203;
      v119 = (void (*)(_QWORD **__return_ptr, uint64_t))v177;
      goto LABEL_95;
    }
    v118 = v178[v35];
    v119 = (void (*)(_QWORD **__return_ptr, uint64_t))v177;
    if (!v118)
      break;
LABEL_65:
    v111 = (v118 - 1) & v118;
    v116 = __clz(__rbit64(v118)) + (v35 << 6);
LABEL_66:
    v121 = (uint64_t *)(v112[6] + 16 * v116);
    v122 = *v121;
    v123 = v121[1];
    swift_bridgeObjectRetain_n();
    v124 = v203;
    v44 = (_QWORD *)sub_24A18FA00(v113, v122, v123);
    v203 = v124;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v112[2])
    {
      swift_bridgeObjectRetain();
      v125 = sub_24A148970(v122, v123);
      if ((v126 & 1) != 0)
      {
        v157 = *(_QWORD *)(v112[7] + 8 * v125);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v131 = v114;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v184 = (_QWORD *)v114;
        v134 = sub_24A148970(v122, v123);
        v135 = *(_QWORD *)(v114 + 16);
        v136 = (v133 & 1) == 0;
        v137 = v135 + v136;
        if (__OFADD__(v135, v136))
          goto LABEL_111;
        v138 = v133;
        if (*(_QWORD *)(v131 + 24) >= v137)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v141 = v184;
            if ((v133 & 1) == 0)
              goto LABEL_83;
          }
          else
          {
            sub_24A16F46C();
            v141 = v184;
            if ((v138 & 1) == 0)
              goto LABEL_83;
          }
        }
        else
        {
          sub_24A16EAC8(v137, isUniquelyReferenced_nonNull_native);
          v139 = sub_24A148970(v122, v123);
          if ((v138 & 1) != (v140 & 1))
            goto LABEL_115;
          v134 = v139;
          v141 = v184;
          if ((v138 & 1) == 0)
          {
LABEL_83:
            v141[(v134 >> 6) + 8] |= 1 << v134;
            v142 = (uint64_t *)(v141[6] + 16 * v134);
            *v142 = v122;
            v142[1] = v123;
            *(_QWORD *)(v141[7] + 8 * v134) = v157;
            v143 = v141[2];
            v117 = __OFADD__(v143, 1);
            v144 = v143 + 1;
            if (v117)
              goto LABEL_113;
            v145 = v141;
            v141[2] = v144;
            swift_bridgeObjectRetain();
            goto LABEL_88;
          }
        }
        v145 = v141;
        v146 = v141[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v146 + 8 * v134) = v157;
LABEL_88:
        v112 = v180;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v37 = (uint64_t)v145;
        goto LABEL_49;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v127 = sub_24A148970(v122, v123);
    v129 = v128;
    swift_bridgeObjectRelease();
    if ((v129 & 1) != 0)
    {
      v130 = swift_isUniquelyReferenced_nonNull_native();
      v184 = (_QWORD *)v114;
      if ((v130 & 1) == 0)
      {
        sub_24A16F46C();
        v114 = (uint64_t)v184;
      }
      swift_bridgeObjectRelease();
      sub_24A16F114(v127, v114);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v37 = v114;
      v112 = v180;
      goto LABEL_49;
    }
    swift_bridgeObjectRelease();
    v113 = (uint64_t)v44;
    v37 = v114;
    v112 = v180;
    v59 = v181;
    if (v111)
      goto LABEL_50;
  }
  v120 = v35 + 1;
  if (v35 + 1 >= v179)
    goto LABEL_94;
  v118 = v178[v120];
  if (v118)
    goto LABEL_64;
  v120 = v35 + 2;
  if (v35 + 2 >= v179)
    goto LABEL_94;
  v118 = v178[v120];
  if (v118)
    goto LABEL_64;
  v120 = v35 + 3;
  if (v35 + 3 >= v179)
    goto LABEL_94;
  v118 = v178[v120];
  if (v118)
    goto LABEL_64;
  v120 = v35 + 4;
  if (v35 + 4 >= v179)
    goto LABEL_94;
  v118 = v178[v120];
  if (v118)
  {
LABEL_64:
    v35 = v120;
    goto LABEL_65;
  }
  v120 = v35 + 5;
  if (v35 + 5 < v179)
  {
    v118 = v178[v120];
    if (!v118)
    {
      while (1)
      {
        v35 = v120 + 1;
        if (__OFADD__(v120, 1))
          goto LABEL_112;
        if (v35 >= v179)
          goto LABEL_94;
        v118 = v178[v35];
        ++v120;
        if (v118)
          goto LABEL_65;
      }
    }
    goto LABEL_64;
  }
LABEL_94:
  v35 = v203;
LABEL_95:
  swift_release();
  swift_bridgeObjectRelease();
  v38 = v176;
  if (*(_QWORD *)(v113 + 16))
  {
    v184 = 0;
    v185 = 0xE000000000000000;
    sub_24A216308();
    swift_bridgeObjectRelease();
    v184 = (_QWORD *)0xD000000000000012;
    v185 = 0x800000024A2239E0;
    v183 = v113;
    sub_24A135F88(&qword_257909948);
    sub_24A14C9E8();
    sub_24A215C60();
    swift_bridgeObjectRelease();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    v147 = (uint64_t)v184;
    v148 = v185;
    sub_24A14C404();
    swift_allocError();
    *v149 = v147;
    v149[1] = v148;
    swift_willThrow();
    sub_24A18EDEC((uint64_t)v158);
    return swift_bridgeObjectRelease();
  }
  v150 = swift_bridgeObjectRelease();
  v119(&v184, v150);
  v151 = v187;
  v152 = v188;
  sub_24A14B668(&v184, v187);
  v153 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16);
  v154 = swift_bridgeObjectRetain();
  v153(v154, v151, v152);
  if (v35)
  {
    sub_24A18EDEC((uint64_t)v158);
    swift_bridgeObjectRelease();
    sub_24A14D184((uint64_t)&v184);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_24A14D184((uint64_t)&v184);
  v156 = (uint64_t)v158;
  VASignpostInterval.end(_:)((Swift::String_optional)0);
  sub_24A18EDEC(v156);
  v58 = v175;
  v39 = v182;
  v40 = v161;
  v60 = v174;
  v53 = v160;
LABEL_20:
  v184 = (_QWORD *)v58;
  LODWORD(v185) = v8;
  BYTE4(v185) = v169;
  BYTE5(v185) = v168;
  v186 = v38;
  v187 = v59;
  LOBYTE(v188) = v39;
  v189 = v53;
  v190 = v40;
  v191 = v167;
  v192 = v17;
  v193 = v166;
  v194 = v60;
  v195 = v173;
  v196 = v172;
  v197 = v171;
  v198 = v170;
  v199 = v165;
  v200 = v164;
  v201 = v163;
  v202 = v162;
  v184 = (_QWORD *)VARuntimeParameters.keywordsNoThresholds.getter();
  swift_bridgeObjectRetain();
  sub_24A18EE90((uint64_t *)&v184);
  if (v35)
  {
LABEL_114:
    swift_release();
    __break(1u);
LABEL_115:
    result = sub_24A2165CC();
    __break(1u);
  }
  else
  {
    v61 = v39;
    v62 = v40;
    swift_bridgeObjectRelease();
    v181 = (uint64_t)v184;
    v63 = sub_24A215EF4();
    *(_QWORD *)(v63 + 16) = 48;
    *(_OWORD *)(v63 + 32) = 0u;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_OWORD *)(v63 + 64) = 0u;
    *(_OWORD *)(v63 + 80) = 0u;
    *(_OWORD *)(v63 + 96) = 0u;
    *(_OWORD *)(v63 + 112) = 0u;
    *(_OWORD *)(v63 + 128) = 0u;
    *(_OWORD *)(v63 + 144) = 0u;
    *(_OWORD *)(v63 + 160) = 0u;
    *(_OWORD *)(v63 + 176) = 0u;
    *(_OWORD *)(v63 + 192) = 0u;
    *(_OWORD *)(v63 + 208) = 0u;
    v184 = (_QWORD *)v175;
    LODWORD(v185) = v8;
    BYTE4(v185) = v169;
    BYTE5(v185) = v168;
    v64 = v176;
    v186 = v176;
    v187 = v59;
    LOBYTE(v188) = v61;
    v65 = v160;
    v189 = v160;
    v190 = v62;
    v191 = v167;
    v192 = v17;
    v193 = v166;
    v194 = v174;
    v195 = v173;
    v196 = v172;
    v197 = v171;
    v198 = v170;
    v199 = v165;
    v200 = v164;
    v201 = v163;
    v202 = v162;
    v66 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    swift_bridgeObjectRelease();
    v67 = sub_24A1421D4(v63, v66);
    v68 = v159;
    v69 = v159 + 72;
    swift_beginAccess();
    *(_QWORD *)(v68 + 72) = v67;
    swift_bridgeObjectRelease();
    v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFF8]), sel_init);
    v184 = (_QWORD *)v175;
    LODWORD(v185) = v8;
    BYTE4(v185) = v169;
    BYTE5(v185) = v168;
    v186 = v64;
    v187 = v59;
    v71 = (_QWORD *)v181;
    LOBYTE(v188) = v182;
    v189 = v65;
    v190 = v161;
    v191 = v167;
    v192 = v17;
    v193 = v166;
    v194 = v174;
    v195 = v173;
    v196 = v172;
    v197 = v171;
    v198 = v170;
    v199 = v165;
    v200 = v164;
    v201 = v163;
    v202 = v162;
    v72 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    swift_bridgeObjectRelease();
    v73 = sub_24A18E430(v70, v72);
    swift_beginAccess();
    *(_QWORD *)(v68 + 80) = v73;
    swift_bridgeObjectRelease();
    v179 = v71[2];
    if (v179)
    {
      if (*(_QWORD *)(v37 + 16))
      {
        v74 = v71[5];
        v178 = v71 + 4;
        v75 = v71[4];
        swift_bridgeObjectRetain();
        v76 = sub_24A148970(v75, v74);
        if ((v77 & 1) != 0)
        {
          v176 = (unint64_t *)(v68 + 80);
          v78 = v37;
          v79 = 0;
          v80 = 1;
          v177 = xmmword_24A218650;
          v158 = (char *)v78;
          while (1)
          {
            v180 = (_QWORD *)v80;
            v203 = 0;
            v81 = *(_QWORD *)(*(_QWORD *)(v78 + 56) + 8 * v76);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v182 = v81;
            v82 = *(_QWORD *)(v81 + 16);
            if (v82)
              break;
LABEL_34:
            swift_bridgeObjectRelease();
            sub_24A135F88(&qword_25790A450);
            v91 = swift_allocObject();
            *(_OWORD *)(v91 + 16) = v177;
            if (v79 >= *(_QWORD *)(*(_QWORD *)v69 + 16))
              goto LABEL_108;
            v92 = v91;
            *(_QWORD *)(v91 + 32) = *(_QWORD *)(*(_QWORD *)v69 + 8 * v79 + 32);
            swift_bridgeObjectRetain();
            v93 = v203;
            sub_24A17ED48(v92);
            v95 = v181;
            v96 = v176;
            v97 = (unint64_t)v180;
            if (v93)
            {
              swift_bridgeObjectRelease();
              swift_release();
              return swift_bridgeObjectRelease();
            }
            v98 = v94;
            swift_bridgeObjectRelease();
            swift_beginAccess();
            v99 = *v96;
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
            *v96 = v99;
            if (!isUniquelyReferenced_nonNull_bridgeObject
              || (v99 & 0x8000000000000000) != 0
              || (v99 & 0x4000000000000000) != 0)
            {
              sub_24A18EE28(v99);
            }
            if (v79 >= *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_109;
            v101 = *(void **)((v99 & 0xFFFFFFFFFFFFFF8) + 8 * v79 + 0x20);
            *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFF8) + 8 * v79 + 0x20) = v98;

            sub_24A215EB8();
            swift_endAccess();
            if (v97 == v179)
              goto LABEL_91;
            v102 = (uint64_t)v158;
            if (v97 >= *(_QWORD *)(v95 + 16))
              goto LABEL_110;
            if (!*((_QWORD *)v158 + 2))
              goto LABEL_93;
            v80 = v97 + 1;
            v103 = &v178[2 * v97];
            v104 = *v103;
            v105 = v103[1];
            swift_bridgeObjectRetain();
            v78 = v102;
            v76 = sub_24A148970(v104, v105);
            v79 = v97;
            if ((v106 & 1) == 0)
              goto LABEL_99;
          }
          v83 = 0;
          v84 = v182 + 32;
          while (1)
          {
            v85 = *(_QWORD *)(v84 + 8 * v83);
            swift_beginAccess();
            v86 = *(_QWORD **)v69;
            v87 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)v69 = v86;
            if ((v87 & 1) == 0)
            {
              v86 = sub_24A14893C(v86);
              *(_QWORD *)v69 = v86;
            }
            if (v79 >= v86[2])
              break;
            v88 = v86 + 4;
            v89 = (char *)v86[v79 + 4];
            v90 = swift_isUniquelyReferenced_nonNull_native();
            v88[v79] = v89;
            if ((v90 & 1) == 0)
            {
              v89 = sub_24A148928((uint64_t)v89);
              v88[v79] = v89;
            }
            if (v83 >= *((_QWORD *)v89 + 2))
              goto LABEL_106;
            *(float *)&v89[4 * v83 + 32] = (float)v85;
            swift_endAccess();
            if (v82 == ++v83)
              goto LABEL_34;
          }
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
          goto LABEL_114;
        }
LABEL_99:
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_93:
        swift_release();
      }
      sub_24A14C404();
      swift_allocError();
      *v155 = 0xD00000000000001DLL;
      v155[1] = 0x800000024A223A00;
      swift_willThrow();
    }
    else
    {
LABEL_91:
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A18E430(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  if (a2 < 0)
  {
    result = sub_24A2163E0();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_24A18FBCC();
      v4 = sub_24A215EF4();
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v5 + 16) = a2;
      v11 = v4;
      *(_QWORD *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = (_QWORD *)(v5 + 48);
          do
          {
            *v7++ = a1;
            v8 = a1;
            --v6;
          }
          while (v6);
        }
        v9 = a1;
      }
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];

    }
    sub_24A215EB8();
    return v11;
  }
  return result;
}

uint64_t sub_24A18E520(unint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  result = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_24A216410();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRetain();
      v16 = sub_24A216410();
      result = swift_bridgeObjectRelease();
      if (v16 >= 2)
        goto LABEL_4;
      goto LABEL_7;
    }
LABEL_16:
    type metadata accessor for VAResultGeneratorInput();
    return VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(0, 0, 0);
  }
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v11)
    goto LABEL_16;
  if (v11 >= 2)
  {
LABEL_4:
    sub_24A14C404();
    swift_allocError();
    v13 = 0xD00000000000001FLL;
    v14 = "Did not expect multiple buffers";
LABEL_18:
    *v12 = v13;
    v12[1] = (unint64_t)(v14 - 32) | 0x8000000000000000;
    swift_willThrow();
    return (uint64_t)v2;
  }
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x24BD09BE8](0, a1);
LABEL_10:
    type metadata accessor for VAFeatureExtractingEncoderOutput();
    v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      sub_24A14C404();
      swift_allocError();
      v13 = 0xD000000000000018;
      v14 = "Unexpected type of input";
      goto LABEL_18;
    }
    v18 = v17;
    if ((*(_BYTE *)(v17 + 16) & 1) != 0)
    {
      v19 = swift_beginAccess();
      if (*(_QWORD *)(v2[9] + 16))
      {
        if ((a2 & 1) != 0)
        {
          v2 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*v2 + 160))(v19);
LABEL_15:
          type metadata accessor for VAResultGeneratorInput();
          v20 = *(_QWORD *)(v18 + 32);
          swift_bridgeObjectRetain();
          v21 = 1;
          v22 = (uint64_t)v2;
          v23 = v20;
LABEL_23:
          v2 = (_QWORD *)VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(v21, v22, v23);
          swift_unknownObjectRelease();
          return (uint64_t)v2;
        }
        if (*(_QWORD *)(v18 + 40))
        {
          v28 = *(uint64_t (**)(uint64_t))(*v2 + 312);
          v29 = swift_bridgeObjectRetain();
          v2 = (_QWORD *)v28(v29);
          swift_bridgeObjectRelease();
          if (!v3)
            goto LABEL_15;
        }
        else
        {
          sub_24A14C404();
          swift_allocError();
          *v30 = 0xD00000000000001ELL;
          v30[1] = 0x800000024A223A40;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
        return (uint64_t)v2;
      }
      v24 = sub_24A1B9D90();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v24, v6);
      v25 = sub_24A215A74();
      v26 = sub_24A216104();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_24A12D000, v25, v26, "No pronunciations set for this model", v27, 2u);
        MEMORY[0x24BD0AAAC](v27, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    type metadata accessor for VAResultGeneratorInput();
    v21 = 0;
    v22 = 0;
    v23 = 0;
    goto LABEL_23;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_unknownObjectRetain();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A18E8CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  void (*v5)(_BYTE *, uint64_t);
  void **v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  void *v19;
  id v20;
  int v21;
  int v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  void *v27;
  id v28;
  int v29;
  int v30;
  id v31;
  _QWORD *v32;
  void *v33;
  uint64_t (*v34)(void);
  uint64_t *v35;
  uint64_t v36;
  _BYTE v37[32];

  swift_beginAccess();
  v4 = (_QWORD *)sub_24A1421D4(MEMORY[0x24BEE4AF8], *(_QWORD *)(v1[9] + 16));
  v5 = (void (*)(_BYTE *, uint64_t))(*(uint64_t (**)(_BYTE *))(*v1 + 272))(v37);
  sub_24A17E81C(a1, v6);
  if (v2)
  {
    swift_bridgeObjectRelease();
    v5(v37, 1);
    return (uint64_t)v4;
  }
  v8 = ((uint64_t (*)(_BYTE *, _QWORD))v5)(v37, 0);
  v9 = (*(uint64_t (**)(uint64_t))(*v1 + 256))(v8);
  if (!v9)
  {
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v32 = 0xD000000000000024;
    v32[1] = 0x800000024A223A80;
    swift_willThrow();
    return (uint64_t)v4;
  }
  v10 = (void *)v9;
  v36 = *(_QWORD *)(v1[9] + 16);
  if (!v36)
  {
LABEL_16:

    return (uint64_t)v4;
  }
  type metadata accessor for at_verifier_rdr_125141826Input();
  v34 = *(uint64_t (**)(void))(*(_QWORD *)v1[2] + 136);
  v35 = v1 + 10;
  result = swift_beginAccess();
  v11 = 0;
  v33 = v10;
  while (1)
  {
    v12 = *v35;
    if ((*v35 & 0xC000000000000001) == 0)
      break;
    v31 = v10;
    swift_bridgeObjectRetain();
    v15 = (id)MEMORY[0x24BD09BE8](v11, v12);
    swift_bridgeObjectRelease();
LABEL_10:
    sub_24A1ACA00((uint64_t)v10, (uint64_t)v15);
    v16 = v34();
    sub_24A135F88(&qword_257909960);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_24A218680;
    v18 = *(uint64_t (**)(void))(*(_QWORD *)v16 + 88);
    v19 = (void *)v18();
    v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 0);

    objc_msgSend(v20, sel_floatValue);
    v22 = v21;

    *(_DWORD *)(v17 + 32) = v22;
    v23 = (void *)v18();
    v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 1);

    objc_msgSend(v24, sel_floatValue);
    v26 = v25;

    *(_DWORD *)(v17 + 36) = v26;
    v27 = (void *)v18();
    v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 2);

    objc_msgSend(v28, sel_floatValue);
    v30 = v29;

    *(_DWORD *)(v17 + 40) = v30;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_24A14893C(v4);
      v4 = (_QWORD *)result;
    }
    if (v11 >= v4[2])
      goto LABEL_19;
    v4[v11 + 4] = v17;
    swift_release();
    swift_release();
    result = swift_bridgeObjectRelease();
    ++v11;
    v10 = v33;
    if (v36 == v11)
      goto LABEL_16;
  }
  if (v11 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(void **)(v12 + 8 * v11 + 32);
    v14 = v10;
    v15 = v13;
    goto LABEL_10;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void sub_24A18EC68()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_24A18EC94()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  sub_24A14D184(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t VAA2TVerifierV2.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24A14D184(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t VAA2TVerifierV2.__deallocating_deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24A14D184(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_24A18ED80()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t sub_24A18ED9C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 304))();
}

uint64_t sub_24A18EDC4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 296))();
}

uint64_t sub_24A18EDEC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VASignpostInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_24A18EE28(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A216410();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x24BD09BF4);
}

uint64_t sub_24A18EE90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24A18F9EC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_24A18EEF8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24A18EEF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_24A216578();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_24A18F5E0(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_24A18F6AC((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_24A176224((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_24A215EF4();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_24A21659C();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_24A21659C()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_24A17612C(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_24A17612C((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_24A18F6AC((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_24A21659C() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_24A2163E0();
  __break(1u);
  return result;
}

uint64_t sub_24A18F5E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_24A21659C(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A18F6AC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_24A21659C() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_24A21659C() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_24A18F944((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

char *sub_24A18F944(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_24A21644C();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_24A18F9EC(uint64_t a1)
{
  return sub_24A148BF0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24A18FA00(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  v6 = 0;
  v7 = result + 40;
  v8 = -(uint64_t)v3;
  v9 = MEMORY[0x24BEE4AF8];
  v19 = result + 40;
  do
  {
    if (v6 <= v3)
      v10 = v3;
    else
      v10 = v6;
    v11 = -(uint64_t)v10;
    for (i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
    {
      if (v11 + v6 == 1)
      {
        __break(1u);
        return result;
      }
      v13 = *(i - 1);
      v14 = *i;
      if (v13 != a2 || v14 != a3)
      {
        result = sub_24A21659C();
        if ((result & 1) == 0)
          break;
      }
      ++v6;
      if (v8 + v6 == 1)
        return v9;
    }
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
      result = sub_24A148B80(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v17 = *(_QWORD *)(v9 + 16);
    v16 = *(_QWORD *)(v9 + 24);
    if (v17 >= v16 >> 1)
      result = sub_24A148B80(v16 > 1, v17 + 1, 1);
    *(_QWORD *)(v9 + 16) = v17 + 1;
    v18 = v9 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v14;
    v3 = v20;
    v7 = v19;
  }
  while (v8 + v6);
  return v9;
}

uint64_t method lookup function for VAA2TVerifierV2()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2TVerifierV2.pronounciationFor(words:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of VAA2TVerifierV2.didStartListening(requestParams:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of VAA2TVerifierV2.predictScores(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

unint64_t sub_24A18FBCC()
{
  unint64_t result;

  result = qword_25790C780;
  if (!qword_25790C780)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25790C780);
  }
  return result;
}

id sub_24A18FC08()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 24);
}

void sub_24A18FC38(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

id sub_24A18FC7C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 32);
}

id sub_24A18FCAC()
{
  uint64_t v0;

  swift_beginAccess();
  return *(id *)(v0 + 40);
}

void sub_24A18FCDC(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

uint64_t sub_24A18FDA0()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9A720);
  swift_arrayDestroy();
  return v0;
}

id sub_24A18FDE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  id v7;

  if (a1 == 0xD000000000000016 && a2 == 0x800000024A223B70 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 14;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A223B90 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 17;
  }
  else if (a1 == 0x75615F7475706E69 && a2 == 0xEF6E656C5F6F6964 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 20;
  }
  else
  {
    if ((a1 != 0xD000000000000010 || a2 != 0x800000024A223BB0) && (sub_24A21659C() & 1) == 0)
      return 0;
    v5 = 23;
  }
  v6 = (void *)(*(uint64_t (**)(void))(*v2 + 8 * v5))();
  v7 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, v6);

  return v7;
}

_QWORD *sub_24A190004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

uint64_t sub_24A190054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v20 = a2;
  v8 = sub_24A135F88(&qword_25790C778);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v12(v11, a1, v8);
  sub_24A18C9D0();
  v19 = sub_24A2160E0();
  v12(v11, a2, v8);
  v13 = sub_24A2160E0();
  v12(v11, a3, v8);
  v14 = sub_24A2160E0();
  v12(v11, a4, v8);
  v15 = sub_24A2160E0();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 224))(v19, v13, v14, v15);
  v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(a4, v8);
  v17(a3, v8);
  v17(v20, v8);
  v17(v21, v8);
  return v16;
}

uint64_t sub_24A1901F4()
{
  id *v0;

  return swift_deallocClassInstance();
}

void sub_24A190230()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_24A215C90();
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4)
LABEL_5:
    __break(1u);
}

uint64_t sub_24A1903E0(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x74757074756FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A190508@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1906BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A190754()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1907D4;
  return sub_24A2161AC();
}

uint64_t sub_24A1907D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A190850()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for aa_verifier_20240530();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A190894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for aa_verifier_20240530Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A190968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A190984()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1909DC;
  return sub_24A216194();
}

uint64_t sub_24A1909DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A190A58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for aa_verifier_20240530Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A190A9C(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for aa_verifier_20240530Input();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A190B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790C778);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for aa_verifier_20240530Input();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A190054((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A190CB0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for aa_verifier_20240530Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A190F84()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A190FA8(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for aa_verifier_20240530();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for aa_verifier_20240530()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_verifier_20240530Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_verifier_20240530Input()
{
  return objc_opt_self();
}

uint64_t sub_24A19108C()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_24A1910BC(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t sub_24A1910F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_taskHint;
  swift_beginAccess();
  v4 = sub_24A215BB8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_24A19115C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_taskHint;
  swift_beginAccess();
  v4 = sub_24A215BB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_24A1911C8()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_batchAudioMode);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19120C(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_batchAudioMode);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A191254()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_hypothesisCallback);
  swift_beginAccess();
  v2 = *v1;
  sub_24A1912AC(*v1);
  return v2;
}

uint64_t sub_24A1912AC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_24A1912BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_hypothesisCallback);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a1;
  v5[1] = a2;
  return sub_24A191318(v6);
}

uint64_t sub_24A191318(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t VASpeechAPISpotterConfiguration.__allocating_init(taskHint:enableSpeechDetector:batchAudioMode:hypothesisCallback:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  VASpeechAPISpotterConfiguration.init(taskHint:enableSpeechDetector:batchAudioMode:hypothesisCallback:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t VASpeechAPISpotterConfiguration.init(taskHint:enableSpeechDetector:batchAudioMode:hypothesisCallback:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;

  *(_BYTE *)(v5 + 16) = 0;
  v9 = v5 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_taskHint;
  v10 = *MEMORY[0x24BDE9DE8];
  v11 = sub_24A215BB8();
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
  v13 = (_BYTE *)(v5 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_batchAudioMode);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_batchAudioMode) = 0;
  v14 = (uint64_t *)(v5 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_hypothesisCallback);
  *v14 = 0;
  v14[1] = 0;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v9, a1, v11);
  swift_endAccess();
  swift_beginAccess();
  *v13 = a3;
  swift_beginAccess();
  *(_BYTE *)(v5 + 16) = a2;
  swift_beginAccess();
  v15 = *v14;
  *v14 = a4;
  v14[1] = a5;
  sub_24A191318(v15);
  return v5;
}

uint64_t sub_24A1914D4()
{
  uint64_t v0;

  if (((*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))() & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t VASpeechAPISpotterConfiguration.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_taskHint;
  v2 = sub_24A215BB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A191318(*(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_hypothesisCallback));
  return v0;
}

uint64_t VASpeechAPISpotterConfiguration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_taskHint;
  v2 = sub_24A215BB8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_24A191318(*(_QWORD *)(v0 + OBJC_IVAR____TtC12VoiceActions31VASpeechAPISpotterConfiguration_hypothesisCallback));
  return swift_deallocClassInstance();
}

uint64_t sub_24A1915C4()
{
  return type metadata accessor for VASpeechAPISpotterConfiguration();
}

uint64_t type metadata accessor for VASpeechAPISpotterConfiguration()
{
  uint64_t result;

  result = qword_2579173A0;
  if (!qword_2579173A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24A191608()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A215BB8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for VASpeechAPISpotterConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VASpeechAPISpotterConfiguration.__allocating_init(taskHint:enableSpeechDetector:batchAudioMode:hypothesisCallback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of VASpeechAPISpotterConfiguration.shouldEnableSpeechDetector.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

unint64_t sub_24A1916AC()
{
  unint64_t result;

  result = qword_25790D060;
  if (!qword_25790D060)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21B320, &type metadata for E5RTUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_25790D060);
  }
  return result;
}

void sub_24A1916F0(_QWORD *a1@<X8>)
{
  *a1 = &unk_251B9A7A8;
}

uint64_t sub_24A191700()
{
  return sub_24A192558(MEMORY[0x24BE2FA68]);
}

uint64_t sub_24A191750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A70E8((uint64_t)&v4, (void (*)(char *))sub_24A192798, v1, (char *)&v3);
  if (!v0)
    return v3;
  return result;
}

uint64_t sub_24A1917D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unsigned int v3;
  int v4;

  v4 = 4;
  type metadata accessor for e5rt_tensor_desc_component_dtype_t(0);
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A70E8((uint64_t)&v4, (void (*)(char *))sub_24A192798, v1, (char *)&v3);
  if (!v0)
    return sub_24A192DCC(v3);
  return result;
}

uint64_t sub_24A191870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[4];
  char v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a1;
  v4[2] = sub_24A192F98;
  v4[3] = &v5;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v4, MEMORY[0x24BEE1EF0], v2, (uint64_t)&v7);
  if (!v1)
    return v7;
  return result;
}

uint64_t sub_24A1918EC()
{
  return sub_24A192558(MEMORY[0x24BE2F720]);
}

uint64_t sub_24A19193C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v10 = a2;
  v8[2] = sub_24A19369C;
  v8[3] = &v9;
  v5 = sub_24A135F88(&qword_25790D068);
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v8, v5, v6, (uint64_t)&v12);
  if (!v3)
    *a3 = v12;
  return result;
}

uint64_t sub_24A1919D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v10 = a2;
  v8[2] = sub_24A193670;
  v8[3] = &v9;
  v5 = sub_24A135F88(&qword_25790D068);
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v8, v5, v6, (uint64_t)&v12);
  if (!v3)
    *a3 = v12;
  return result;
}

uint64_t sub_24A191A64()
{
  return sub_24A192558(MEMORY[0x24BE2FAA8]);
}

uint64_t sub_24A191AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A70E8((uint64_t)&v4, (void (*)(char *))sub_24A192798, v1, (char *)&v3);
  if (!v0)
    return v3;
  return result;
}

_QWORD *sub_24A191B3C()
{
  return sub_24A191B74((char *)sub_24A193770);
}

_QWORD *sub_24A191B58()
{
  return sub_24A191B74((char *)sub_24A193784);
}

_QWORD *sub_24A191B74(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[3];
  uint64_t v7;
  const void *v8;
  uint64_t v9;

  v6[2] = *(_QWORD *)(v1 + 16);
  v7 = 0;
  v4 = sub_24A135F88(&qword_25790D068);
  result = (_QWORD *)sub_24A1A6F00((char *)&v9, (uint64_t)&v8, (uint64_t)&v7, a1, (uint64_t)v6, MEMORY[0x24BEE1768], v4);
  if (!v2)
    return sub_24A192B50(v8, v9);
  return result;
}

uint64_t sub_24A191BF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v0 + 16);
  v5[2] = sub_24A193704;
  v5[3] = &v6;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v5, MEMORY[0x24BEE27D0], v2, (uint64_t)&v8);
  if (!v1)
  {
    v4 = v8;
    type metadata accessor for E5RTTensorDescriptorDataType();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_24A191C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v0 + 16);
  v5[2] = sub_24A193718;
  v5[3] = &v6;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v5, MEMORY[0x24BEE27D0], v2, (uint64_t)&v8);
  if (!v1)
  {
    v4 = v8;
    type metadata accessor for E5RTBufferObject();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_24A191D2C()
{
  return sub_24A192558(MEMORY[0x24BE2F8E8]);
}

uint64_t sub_24A191D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD v5[4];
  char v6;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(v0 + 16);
  v5[2] = sub_24A19372C;
  v5[3] = &v6;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v5, MEMORY[0x24BEE27D0], v2, (uint64_t)&v8);
  if (!v1)
  {
    v4 = v8;
    type metadata accessor for E5RTTensorDescriptor();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_24A191E18(uint64_t a1)
{
  return sub_24A19272C(a1, MEMORY[0x24BE2F8A8]);
}

uint64_t sub_24A191E34()
{
  uint64_t precompiled_compute_operation;

  sub_24A215D20();
  sub_24A215D20();
  sub_24A215D20();
  precompiled_compute_operation = e5rt_execution_stream_operation_create_precompiled_compute_operation();
  swift_release();
  swift_release();
  swift_release();
  return precompiled_compute_operation;
}

uint64_t sub_24A191EFC(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, _QWORD, char *))
{
  char *v3;
  uint64_t (*v4)(uint64_t, _QWORD, char *);
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a1 < 0)
  {
    __break(1u);
LABEL_23:
    v3 = sub_24A192A44((uint64_t)v3);
    goto LABEL_10;
  }
  v4 = a3;
  v5 = a2;
  v7 = a1;
  v6 = MEMORY[0x24BEE4AF8];
  if (a1)
  {
    v23 = MEMORY[0x24BEE4AF8];
    sub_24A19283C(0, a1, 0);
    v3 = (char *)v23;
    v8 = *(_QWORD *)(v23 + 16);
    do
    {
      v9 = *(_QWORD *)(v23 + 24);
      if (v8 >= v9 >> 1)
        sub_24A19283C((char *)(v9 > 1), v8 + 1, 1);
      *(_QWORD *)(v23 + 16) = v8 + 1;
      *(_QWORD *)(v23 + 8 * v8++ + 32) = 0;
      --v7;
    }
    while (v7);
  }
  else
  {
    v3 = (char *)MEMORY[0x24BEE4AF8];
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_23;
LABEL_10:
  v10 = v4(v5, *((_QWORD *)v3 + 2), v3 + 32);
  if ((_DWORD)v10)
  {
    v11 = v10;
    sub_24A1916AC();
    swift_allocError();
    *(_DWORD *)v12 = v11;
    *(_BYTE *)(v12 + 4) = 0;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *((_QWORD *)v3 + 2);
    if (v14)
    {
      v24 = v6;
      sub_24A148B80(0, v14, 0);
      v15 = 0;
      v11 = v24;
      while (*(_QWORD *)&v3[8 * v15 + 32])
      {
        v16 = sub_24A215DA4();
        v18 = v17;
        v24 = v11;
        v20 = *(_QWORD *)(v11 + 16);
        v19 = *(_QWORD *)(v11 + 24);
        if (v20 >= v19 >> 1)
          sub_24A148B80(v19 > 1, v20 + 1, 1);
        ++v15;
        *(_QWORD *)(v11 + 16) = v20 + 1;
        v21 = v11 + 16 * v20;
        *(_QWORD *)(v21 + 32) = v16;
        *(_QWORD *)(v21 + 40) = v18;
        if (v14 == v15)
        {
          swift_bridgeObjectRelease();
          return v11;
        }
      }
      sub_24A1916AC();
      swift_allocError();
      *(_DWORD *)v22 = 3;
      *(_BYTE *)(v22 + 4) = 1;
      swift_willThrow();
      v11 = v24;
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v11;
}

uint64_t sub_24A192140()
{
  return sub_24A192558(MEMORY[0x24BE2F830]);
}

uint64_t sub_24A192190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[4];
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v14 = a1;
  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v12[2] = sub_24A193164;
  v12[3] = &v13;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v12, MEMORY[0x24BEE27D0], v9, (uint64_t)&v22);
  if (!v8)
  {
    v11 = v22;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v11;
  }
  return result;
}

uint64_t sub_24A192238()
{
  _QWORD *v0;

  sub_24A14C404();
  swift_allocError();
  *v0 = 0xD000000000000028;
  v0[1] = 0x800000024A223D50;
  return swift_willThrow();
}

uint64_t sub_24A192298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 16);
  v6 = 0;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A70E8((uint64_t)&v6, (void (*)(char *))sub_24A192798, v3, (char *)&v5);
  if (!v1)
    return sub_24A191EFC(v5, v2, MEMORY[0x24BE2F820]);
  return result;
}

uint64_t sub_24A192330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 16);
  v6 = 0;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A70E8((uint64_t)&v6, (void (*)(char *))sub_24A192798, v3, (char *)&v5);
  if (!v1)
    return sub_24A191EFC(v5, v2, MEMORY[0x24BE2F7F0]);
  return result;
}

uint64_t sub_24A1923C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[4];
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(v2 + 16);
  v10 = a1;
  v11 = a2;
  v7[2] = sub_24A1931BC;
  v7[3] = &v8;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v7, MEMORY[0x24BEE27D0], v4, (uint64_t)&v12);
  if (!v3)
  {
    v6 = v12;
    type metadata accessor for E5RTIOPort();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_24A192468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[4];
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(v2 + 16);
  v10 = a1;
  v11 = a2;
  v7[2] = sub_24A1931F8;
  v7[3] = &v8;
  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192F58, (uint64_t)v7, MEMORY[0x24BEE27D0], v4, (uint64_t)&v12);
  if (!v3)
  {
    v6 = v12;
    type metadata accessor for E5RTIOPort();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_24A192508()
{
  return sub_24A192558(MEMORY[0x24BE2F870]);
}

uint64_t sub_24A192558(uint64_t (*a1)(_QWORD *))
{
  uint64_t v1;
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x24BDAC8D0];
  v6[0] = *(_QWORD *)(v1 + 16);
  v2 = a1(v6);
  if (!v2)
    return swift_deallocClassInstance();
  v4 = v2;
  sub_24A1916AC();
  swift_allocError();
  *(_DWORD *)v5 = v4;
  *(_BYTE *)(v5 + 4) = 0;
  swift_willThrow();
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24A19262C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for e5rt_error_code_t(0);
  result = sub_24A1A71B0((void (*)(char *))sub_24A192798, (uint64_t)sub_24A192BF0, 0, MEMORY[0x24BEE27D0], v1, (uint64_t)&v4);
  if (!v0)
  {
    v3 = v4;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  return result;
}

uint64_t sub_24A1926B0()
{
  uint64_t result;
  int v1;
  uint64_t v2;

  result = e5rt_execution_stream_execute_sync();
  if ((_DWORD)result)
  {
    v1 = result;
    sub_24A1916AC();
    swift_allocError();
    *(_DWORD *)v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24A192710(uint64_t a1)
{
  return sub_24A19272C(a1, MEMORY[0x24BE2F7B0]);
}

uint64_t sub_24A19272C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;

  result = a2(*(_QWORD *)(v2 + 16), *(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
  {
    v4 = result;
    sub_24A1916AC();
    swift_allocError();
    *(_DWORD *)v5 = v4;
    *(_BYTE *)(v5 + 4) = 0;
    return swift_willThrow();
  }
  return result;
}

int *sub_24A192798(int *a1)
{
  return sub_24A1927AC(a1);
}

int *sub_24A1927AC(int *result)
{
  int v1;
  uint64_t v2;

  v1 = *result;
  if (*result)
  {
    sub_24A1916AC();
    swift_allocError();
    *(_DWORD *)v2 = v1;
    *(_BYTE *)(v2 + 4) = 0;
    return (int *)swift_willThrow();
  }
  return result;
}

_DWORD *sub_24A192804@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_24A192814(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

char *sub_24A192820(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_24A192858(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_24A19283C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_24A19294C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_24A192858(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790D460);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = 8 * v8;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

char *sub_24A19294C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790D458);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_24A192A44(uint64_t a1)
{
  return sub_24A192A58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_24A192A58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_24A135F88(&qword_25790D458);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_24A192B50(const void *a1, uint64_t a2)
{
  size_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a2 <= 0)
  {
    v4 = 8 * a2;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    sub_24A135F88(&qword_25790A4A8);
    v4 = 8 * a2;
    v5 = (_QWORD *)swift_allocObject();
    v6 = j__malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    v5[2] = a2;
    v5[3] = 2 * (v7 >> 3);
  }
  memcpy(v5 + 4, a1, v4);
  return v5;
}

uint64_t sub_24A192BF0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = e5rt_execution_stream_create();
  *a1 = result;
  return result;
}

uint64_t sub_24A192C1C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  sub_24A192820(0, 5, 0);
  v0 = v16;
  v2 = *(_QWORD *)(v16 + 16);
  v1 = *(_QWORD *)(v16 + 24);
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    sub_24A192820((char *)(v1 > 1), v2 + 1, 1);
    v0 = v16;
    v1 = *(_QWORD *)(v16 + 24);
    v3 = v1 >> 1;
  }
  *(_QWORD *)(v0 + 16) = v4;
  v5 = v0 + 8 * v2;
  *(_DWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 36) = 0;
  v6 = v2 + 2;
  if (v3 < (uint64_t)(v2 + 2))
  {
    sub_24A192820((char *)(v1 > 1), v2 + 2, 1);
    v0 = v16;
    v1 = *(_QWORD *)(v16 + 24);
    v3 = v1 >> 1;
  }
  *(_QWORD *)(v0 + 16) = v6;
  v7 = v0 + 8 * v4;
  *(_DWORD *)(v7 + 32) = 1;
  *(_BYTE *)(v7 + 36) = 1;
  v8 = v2 + 3;
  if (v3 < (uint64_t)(v2 + 3))
    sub_24A192820((char *)(v1 > 1), v2 + 3, 1);
  result = v16;
  *(_QWORD *)(v16 + 16) = v8;
  v10 = v16 + 8 * v6;
  *(_DWORD *)(v10 + 32) = 2;
  *(_BYTE *)(v10 + 36) = 2;
  v11 = *(_QWORD *)(v16 + 24);
  v12 = v2 + 4;
  if ((uint64_t)(v2 + 4) > (uint64_t)(v11 >> 1))
  {
    sub_24A192820((char *)(v11 > 1), v2 + 4, 1);
    result = v16;
  }
  *(_QWORD *)(result + 16) = v12;
  v13 = result + 8 * v8;
  *(_DWORD *)(v13 + 32) = 3;
  *(_BYTE *)(v13 + 36) = 3;
  v14 = *(_QWORD *)(result + 24);
  if ((uint64_t)(v2 + 5) > (uint64_t)(v14 >> 1))
  {
    sub_24A192820((char *)(v14 > 1), v2 + 5, 1);
    result = v16;
  }
  *(_QWORD *)(result + 16) = v2 + 5;
  v15 = result + 8 * v12;
  *(_DWORD *)(v15 + 32) = 4;
  *(_BYTE *)(v15 + 36) = 4;
  return result;
}

uint64_t sub_24A192DCC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_24A192C1C();
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    goto LABEL_9;
  if (*(_DWORD *)(result + 32) == (_DWORD)a1)
  {
    a1 = *(unsigned __int8 *)(result + 36);
LABEL_11:
    swift_bridgeObjectRelease();
    return a1;
  }
  if (v3 == 1)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    sub_24A1916AC();
    swift_allocError();
    *(_DWORD *)v7 = 5;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow();
    return a1;
  }
  v4 = (unsigned __int8 *)(result + 44);
  v5 = 1;
  while (1)
  {
    v6 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (*((_DWORD *)v4 - 1) == (_DWORD)a1)
    {
      a1 = *v4;
      goto LABEL_11;
    }
    v4 += 8;
    ++v5;
    if (v6 == v3)
      goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A192E94()
{
  return e5rt_tensor_desc_dtype_get_component_size();
}

void type metadata accessor for e5rt_error_code_t(uint64_t a1)
{
  sub_24A192F14(a1, &qword_25790D450);
}

uint64_t sub_24A192ED4()
{
  return e5rt_tensor_desc_dtype_get_component_dtype();
}

void type metadata accessor for e5rt_tensor_desc_component_dtype_t(uint64_t a1)
{
  sub_24A192F14(a1, &qword_25790D448);
}

void sub_24A192F14(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_24A192F58@<X0>(_DWORD *a1@<X8>)
{
  return sub_24A192F6C(a1);
}

uint64_t sub_24A192F6C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A192F98()
{
  return e5rt_buffer_object_get_data_ptr();
}

uint64_t sub_24A192FC4()
{
  return e5rt_tensor_desc_get_size();
}

uint64_t sub_24A192FF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24A19193C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_24A193008@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24A1919D0(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_24A193020()
{
  return e5rt_tensor_desc_retain_dtype();
}

uint64_t sub_24A19304C()
{
  return e5rt_tensor_desc_alloc_buffer_object();
}

uint64_t type metadata accessor for E5RTTensorDescriptorDataType()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for E5RTBufferObject()
{
  return objc_opt_self();
}

uint64_t sub_24A1930C0()
{
  return e5rt_io_port_retain_tensor_desc();
}

uint64_t type metadata accessor for E5RTTensorDescriptor()
{
  return objc_opt_self();
}

uint64_t sub_24A19310C()
{
  return e5rt_execution_stream_operation_get_num_outputs();
}

uint64_t sub_24A193138()
{
  return e5rt_execution_stream_operation_get_num_inputs();
}

uint64_t sub_24A193164()
{
  return sub_24A193178();
}

uint64_t sub_24A193178()
{
  return sub_24A191E34();
}

uint64_t sub_24A1931BC(uint64_t a1)
{
  return sub_24A193214(a1, MEMORY[0x24BE2F850]);
}

uint64_t type metadata accessor for E5RTIOPort()
{
  return objc_opt_self();
}

uint64_t sub_24A1931F8(uint64_t a1)
{
  return sub_24A193214(a1, MEMORY[0x24BE2F840]);
}

uint64_t sub_24A193214(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = sub_24A215D20();
  v7 = a2(v5, v6 + 32, a1);
  swift_release();
  return v7;
}

unint64_t sub_24A193280()
{
  unint64_t result;

  result = qword_25790D070;
  if (!qword_25790D070)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21B280, &type metadata for E5RTTensorDescriptorComponentDatatype);
    atomic_store(result, (unint64_t *)&qword_25790D070);
  }
  return result;
}

unint64_t sub_24A1932C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25790D078;
  if (!qword_25790D078)
  {
    v1 = sub_24A139148(&qword_25790D080);
    result = MEMORY[0x24BD0A9EC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_25790D078);
  }
  return result;
}

ValueMetadata *type metadata accessor for E5RTErrorCode()
{
  return &type metadata for E5RTErrorCode;
}

uint64_t getEnumTagSinglePayload for E5RTTensorDescriptorComponentDatatype(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for E5RTTensorDescriptorComponentDatatype(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24A193400 + 4 * byte_24A21B275[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24A193434 + 4 * byte_24A21B270[v4]))();
}

uint64_t sub_24A193434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A19343C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A193444);
  return result;
}

uint64_t sub_24A193450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A193458);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24A19345C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A193464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for E5RTTensorDescriptorComponentDatatype()
{
  return &type metadata for E5RTTensorDescriptorComponentDatatype;
}

_QWORD *initializeBufferWithCopyOfBuffer for UnsafeE5RTBufferObject(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UnsafeE5RTTensorDescriptorDataType()
{
  return &type metadata for UnsafeE5RTTensorDescriptorDataType;
}

ValueMetadata *type metadata accessor for UnsafeE5RTBufferObject()
{
  return &type metadata for UnsafeE5RTBufferObject;
}

ValueMetadata *type metadata accessor for UnsafeE5RTTensorDescriptor()
{
  return &type metadata for UnsafeE5RTTensorDescriptor;
}

ValueMetadata *type metadata accessor for UnsafeE5RTIOPort()
{
  return &type metadata for UnsafeE5RTIOPort;
}

ValueMetadata *type metadata accessor for UnsafeE5RTExecutionStreamOperation()
{
  return &type metadata for UnsafeE5RTExecutionStreamOperation;
}

uint64_t type metadata accessor for E5RTExecutionStreamOperation()
{
  return objc_opt_self();
}

uint64_t _s12VoiceActions22UnsafeE5RTBufferObjectVwet_0(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t _s12VoiceActions22UnsafeE5RTBufferObjectVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeE5RTExecutionStream()
{
  return &type metadata for UnsafeE5RTExecutionStream;
}

uint64_t type metadata accessor for E5RTExecutionStream()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for E5RTUtils()
{
  return &type metadata for E5RTUtils;
}

uint64_t initializeBufferWithCopyOfBuffer for E5RTUtils.DomainError(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for E5RTUtils.DomainError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for E5RTUtils.DomainError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_24A193624(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24A193640(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for E5RTUtils.DomainError()
{
  return &type metadata for E5RTUtils.DomainError;
}

uint64_t sub_24A193670()
{
  return e5rt_tensor_desc_get_strides();
}

uint64_t sub_24A19369C()
{
  return e5rt_tensor_desc_get_shape();
}

uint64_t sub_24A1936C8()
{
  return sub_24A192E94();
}

uint64_t sub_24A1936DC()
{
  return sub_24A192ED4();
}

uint64_t sub_24A1936F0()
{
  return sub_24A192FC4();
}

uint64_t sub_24A193704()
{
  return sub_24A193020();
}

uint64_t sub_24A193718()
{
  return sub_24A19304C();
}

uint64_t sub_24A19372C()
{
  return sub_24A1930C0();
}

uint64_t sub_24A193740()
{
  return sub_24A19310C();
}

uint64_t sub_24A193754()
{
  return sub_24A193138();
}

uint64_t sub_24A193770@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24A192FF0(a1, a2);
}

uint64_t sub_24A193784@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_24A193008(a1, a2);
}

uint64_t VAAVSBuildEnrollmentFactory(delegate:computeUnits:maxSamplesPerEnrollment:)(uint64_t a1, char *a2, Swift::Int a3, char a4)
{
  uint64_t v4;
  char v8;
  uint64_t result;
  uint64_t v10;
  Swift::Int maxSamplesPerEnrollment;
  Swift::Int minimumSilenceFrames;
  Swift::Int minimumSpeechFrames;
  Swift::Float speechThreshold;
  Swift::Int v15;
  Swift::Int minDuration;
  VoiceActions::AVSEndpointerConfig v17;
  VoiceActions::AVSConfig v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  Swift::Int recency;
  VoiceActions::AVSConfig v27;

  v8 = *a2;
  type metadata accessor for VAAVSAudioEncoderModel();
  LOBYTE(v27.rejectEnrollmentThreshold) = v8;
  result = VAAVSAudioEncoderModel.__allocating_init(computeUnits:)((char *)&v27);
  if (!v4)
  {
    v10 = result;
    AVSConfig.init()(&v27);
    if ((a4 & 1) == 0)
      AVSConfig.setEnrollmentParams(maxSamplesPerEnrollment:)(a3);
    type metadata accessor for VAAVSVerifierModel();
    v23 = *(_OWORD *)&v27.streamingMinDuration;
    v24 = *(_OWORD *)&v27.enrollMinimumSilenceFrames;
    v25 = *(_OWORD *)&v27.enrollSpeechThreshold;
    v19 = *(_OWORD *)&v27.rejectEnrollmentThreshold;
    v20 = *(_OWORD *)&v27.minDuration;
    v21 = *(_OWORD *)&v27.resampleDuration;
    v22 = *(_OWORD *)&v27.streamingMinimumSpeechFrames;
    v18 = v27;
    maxSamplesPerEnrollment = v27.maxSamplesPerEnrollment;
    recency = v27.recency;
    VAAVSVerifierModel.__allocating_init(configuration:)((uint64_t)&v18);
    *(_OWORD *)&v18.streamingMinDuration = v23;
    *(_OWORD *)&v18.enrollMinimumSilenceFrames = v24;
    *(_OWORD *)&v18.enrollSpeechThreshold = v25;
    *(_OWORD *)&v18.rejectEnrollmentThreshold = v19;
    *(_OWORD *)&v18.minDuration = v20;
    *(_OWORD *)&v18.resampleDuration = v21;
    *(_OWORD *)&v18.streamingMinimumSpeechFrames = v22;
    v18.recency = recency;
    v18.maxSamplesPerEnrollment = maxSamplesPerEnrollment;
    AVSConfig.getAVSEndpointerConfig()(&v17);
    minimumSilenceFrames = v17.minimumSilenceFrames;
    minimumSpeechFrames = v17.minimumSpeechFrames;
    speechThreshold = v17.speechThreshold;
    minDuration = v17.minDuration;
    v15 = v17.recency;
    type metadata accessor for VAAVSAudioEnrollerFactory();
    *(_QWORD *)&v18.rejectEnrollmentThreshold = minimumSilenceFrames;
    v18.minEnrollmentsBeforeRejecting = minimumSpeechFrames;
    *(Swift::Float *)&v18.minDuration = speechThreshold;
    v18.maxDuration = minDuration;
    v18.resampleDuration = v15;
    sub_24A193940(a1, (uint64_t)&v17);
    return VAAVSAudioEnrollerFactory.__allocating_init(encoder:endpointerConfig:delegate:maxSamplesPerEnrollment:)(v10, (uint64_t)&v18, (uint64_t)&v17, maxSamplesPerEnrollment, 0);
  }
  return result;
}

uint64_t sub_24A193940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(qword_25790D468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t VAAVSBuildKeywordSpotter(delegate:computeUnits:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  _QWORD v14[5];
  VoiceActions::AVSConfig v15;
  char v16;

  v4 = *a2;
  v5 = type metadata accessor for VAAVSAudioEncoderModel();
  v16 = v4;
  v6 = VAAVSAudioEncoderModel.__allocating_init(computeUnits:)(&v16);
  if (!v2)
  {
    v7 = v6;
    AVSConfig.init()(&v15);
    v8 = type metadata accessor for VAAVSVerifierModel();
    v9 = VAAVSVerifierModel.__allocating_init(configuration:)((uint64_t)&v15);
    v10 = type metadata accessor for VAStrategyProviderAVS();
    v11 = VAStrategyProviderAVS.__allocating_init()();
    type metadata accessor for VAFlexibleKeywordSpotter();
    type metadata accessor for VAConfiguration();
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v12 = static VAConfiguration.buildForFlexibleAVS()();
    v15.maxDuration = v10;
    v15.resampleDuration = (Swift::Int)&protocol witness table for VAStrategyProviderAVS;
    *(_QWORD *)&v15.rejectEnrollmentThreshold = v11;
    v14[3] = v8;
    v14[4] = &protocol witness table for VAAVSVerifierModel;
    v14[0] = v9;
    swift_retain();
    swift_retain();
    v5 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(a1, v9, v7, (uint64_t)v12, (uint64_t)&v15, (uint64_t)v14);
    swift_release();
    swift_release();
  }
  return v5;
}

uint64_t VAA2ABuildEnrollmentFactory(delegate:computeUnits:maxSamplesPerEnrollment:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int8 v7[40];

  v4 = *a2;
  type metadata accessor for VAA2AAudioEncoderModel();
  v7[0] = v4;
  result = VAA2AAudioEncoderModel.__allocating_init(computeUnits:)((char *)v7);
  if (!v2)
  {
    v6 = result;
    type metadata accessor for VAA2AVerifierModel();
    v7[0] = v4;
    VAA2AVerifierModel.__allocating_init(computeUnits:)(v7);
    type metadata accessor for VAA2AAudioEnrollerFactory();
    sub_24A193940(a1, (uint64_t)v7);
    return VAA2AAudioEnrollerFactory.__allocating_init(encoder:delegate:)(v6, (uint64_t)v7);
  }
  return result;
}

uint64_t VAA2ABuildKeywordSpotter(delegate:computeUnits:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _OWORD v15[2];
  uint64_t v16;
  _QWORD v17[5];

  v4 = *a2;
  type metadata accessor for VAConfiguration();
  v5 = static VAConfiguration.buildForFlexibleA2A()();
  v6 = type metadata accessor for VAA2AAudioEncoderModel();
  LOBYTE(v17[0]) = v4;
  v7 = VAA2AAudioEncoderModel.__allocating_init(computeUnits:)((char *)v17);
  if (v2)
  {

  }
  else
  {
    v8 = v7;
    type metadata accessor for VAA2AVerifierModel();
    LOBYTE(v17[0]) = v4;
    v9 = VAA2AVerifierModel.__allocating_init(computeUnits:)((unsigned __int8 *)v17);
    type metadata accessor for VAStrideConfiguration();
    v10 = static VAStrideConfiguration.forFlexibleA2A()();
    v11 = type metadata accessor for VAStrategyProviderDefault();
    v12 = v10;
    v13 = VAStrategyProviderDefault.__allocating_init(strideConfig:)((uint64_t)v12);
    type metadata accessor for VAFlexibleKeywordSpotter();
    v17[3] = v11;
    v17[4] = &protocol witness table for VAStrategyProviderDefault;
    v16 = 0;
    v17[0] = v13;
    memset(v15, 0, sizeof(v15));
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v6 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(a1, v9, v8, (uint64_t)v5, (uint64_t)v17, (uint64_t)v15);
    swift_release();
    swift_release();

  }
  return v6;
}

uint64_t VAA2ABuildEnrollmentFactoryV2(delegate:computeUnits:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  char v17;
  uint64_t v19;
  _QWORD v20[7];

  v4 = *a2;
  type metadata accessor for VAConfiguration();
  v5 = static VAConfiguration.buildForFlexibleA2Av2()();
  v6 = type metadata accessor for VASilenceModel();
  v7 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v5) + 0xE0))();
  v8 = v6;
  v10 = sub_24A1A446C(v7, v9);
  if (v2)
  {

  }
  else
  {
    v11 = v10;
    type metadata accessor for VAFeatureExtract();
    v12 = VAFeatureExtract.__allocating_init()();
    v13 = type metadata accessor for VAA2AAudioEncoderModelV2();
    LOBYTE(v20[0]) = v4;
    v14 = VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)((char *)v20);
    type metadata accessor for VAFeatureExtractingEncoder();
    v20[3] = v13;
    v20[4] = &protocol witness table for VAA2AAudioEncoderModelV2;
    v20[0] = v14;
    swift_retain();
    v15 = v12;
    swift_retain();
    v16 = v5;
    v17 = sub_24A1516F0();
    v20[6] = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v20, v15, v11, v16, v17 & 1);
    type metadata accessor for VAA2AVerifierModelV2();
    LOBYTE(v20[0]) = v4;
    VAA2AVerifierModelV2.__allocating_init(computeUnits:)((unsigned __int8 *)v20);
    type metadata accessor for VAA2AAudioEnrollerFactoryV2();
    sub_24A193940(a1, (uint64_t)v20);
    v19 = swift_retain();
    v8 = VAA2AAudioEnrollerFactoryV2.__allocating_init(encoder:delegate:)(v19, (uint64_t)v20);
    swift_release();

    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t VAA2ABuildKeywordSpotterV2(delegate:computeUnits:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  _OWORD v25[2];
  uint64_t v26;
  char v27[24];
  uint64_t v28;
  _UNKNOWN **v29;
  id v30;

  v4 = *a2;
  type metadata accessor for VAConfiguration();
  v5 = static VAConfiguration.buildForFlexibleA2Av2()();
  v6 = type metadata accessor for VASilenceModel();
  v7 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v5) + 0xE0))();
  v8 = v6;
  v10 = sub_24A1A446C(v7, v9);
  if (v2)
  {

  }
  else
  {
    v11 = v10;
    type metadata accessor for VAFeatureExtract();
    v12 = VAFeatureExtract.__allocating_init()();
    v13 = type metadata accessor for VAA2AAudioEncoderModelV2();
    v27[0] = v4;
    v14 = VAA2AAudioEncoderModelV2.__allocating_init(computeUnits:)(v27);
    type metadata accessor for VAFeatureExtractingEncoder();
    v28 = v13;
    v29 = &protocol witness table for VAA2AAudioEncoderModelV2;
    *(_QWORD *)v27 = v14;
    swift_retain();
    v15 = v12;
    swift_retain();
    v16 = v5;
    v17 = sub_24A1516F0();
    v18 = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v27, v15, v11, v16, v17 & 1);
    v30 = v15;
    type metadata accessor for VAA2AVerifierModelV2();
    v27[0] = v4;
    v20 = VAA2AVerifierModelV2.__allocating_init(computeUnits:)((unsigned __int8 *)v27);
    type metadata accessor for VAStrideConfiguration();
    v21 = (void *)static VAStrideConfiguration.forFlexibleA2Av2()();
    v22 = type metadata accessor for VAStrategyProviderDefault();
    v24 = v21;
    v23 = VAStrategyProviderDefault.__allocating_init(strideConfig:)((uint64_t)v24);
    type metadata accessor for VAFlexibleKeywordSpotter();
    v28 = v22;
    v29 = &protocol witness table for VAStrategyProviderDefault;
    v26 = 0;
    *(_QWORD *)v27 = v23;
    memset(v25, 0, sizeof(v25));
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(a1, v20, v18, (uint64_t)v16, (uint64_t)v27, (uint64_t)v25);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t VAA2ABuildEnrollmentFactoryV3(delegate:computeUnits:)(uint64_t a1, char *a2)
{
  uint64_t v2;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  char v17;
  _QWORD v19[5];
  uint64_t v20;

  v4 = *a2;
  type metadata accessor for VAConfiguration();
  v5 = static VAConfiguration.buildForFlexibleA2Av3()();
  v6 = type metadata accessor for VASilenceModel();
  v7 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v5) + 0xE0))();
  v8 = v6;
  v10 = sub_24A1A446C(v7, v9);
  if (v2)
  {

  }
  else
  {
    v11 = v10;
    type metadata accessor for VAFeatureExtract();
    v12 = VAFeatureExtract.__allocating_init()();
    v13 = type metadata accessor for VAA2AAudioEncoderModelV3();
    LOBYTE(v19[0]) = v4;
    v14 = VAA2AAudioEncoderModelV3.__allocating_init(computeUnits:reuseBuffers:)((uint64_t)v19, 0);
    type metadata accessor for VAFeatureExtractingEncoder();
    v19[3] = v13;
    v19[4] = &protocol witness table for VAA2AAudioEncoderModelV3;
    v19[0] = v14;
    swift_retain();
    v15 = v12;
    swift_retain();
    v16 = v5;
    v17 = sub_24A1516F0();
    v20 = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v19, v15, v11, v16, v17 & 1);
    type metadata accessor for VAA2AVerifierModelV3();
    LOBYTE(v19[0]) = v4;
    VAA2AVerifierModelV3.__allocating_init(computeUnits:)((unsigned __int8 *)v19);
    type metadata accessor for VAA2AAudioEnrollerFactoryV3();
    sub_24A193940(a1, (uint64_t)v19);
    v8 = VAA2AAudioEnrollerFactoryV3.__allocating_init(encoder:delegate:)(v20, (uint64_t)v19);

    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t VAA2ABuildKeywordSpotterV3(delegate:computeUnits:useResultGenerator:)(void *a1, char *a2, char a3)
{
  uint64_t v3;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  _OWORD v33[2];
  uint64_t v34;
  unsigned __int8 v35[24];
  uint64_t v36;
  _UNKNOWN **v37;
  id v38;

  v6 = *a2;
  type metadata accessor for VAConfiguration();
  v7 = static VAConfiguration.buildForFlexibleA2Av3()();
  v8 = type metadata accessor for VASilenceModel();
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v7) + 0xE0))();
  v10 = v8;
  v12 = sub_24A1A446C(v9, v11);
  if (v3)
  {

  }
  else
  {
    v13 = v12;
    type metadata accessor for VAFeatureExtract();
    v14 = VAFeatureExtract.__allocating_init()();
    v15 = type metadata accessor for VAA2AAudioEncoderModelV3();
    v35[0] = v6;
    v16 = VAA2AAudioEncoderModelV3.__allocating_init(computeUnits:reuseBuffers:)((uint64_t)v35, 1);
    v38 = a1;
    v17 = v16;
    type metadata accessor for VAFeatureExtractingEncoder();
    v36 = v15;
    v37 = &protocol witness table for VAA2AAudioEncoderModelV3;
    *(_QWORD *)v35 = v17;
    swift_retain();
    v18 = v14;
    swift_retain();
    v19 = v7;
    v20 = sub_24A1516F0();
    v21 = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v35, v18, v13, v19, v20 & 1);
    v32 = v18;
    v22 = type metadata accessor for VAA2AVerifierModelV3();
    v35[0] = v6;
    v23 = VAA2AVerifierModelV3.__allocating_init(computeUnits:)(v35);
    v24 = v21;
    if ((a3 & 1) != 0)
    {
      type metadata accessor for VAResultGeneratorVerifier();
      v36 = v22;
      v37 = &protocol witness table for VAA2AVerifierModelV3;
      *(_QWORD *)v35 = v23;
      v25 = v19;
      swift_retain();
      v31 = VAResultGeneratorVerifier.__allocating_init(subVerifier:config:)((uint64_t)v35, (uint64_t)v25);
    }
    else
    {
      swift_retain();
      v31 = v23;
    }
    v26 = (uint64_t)v38;
    type metadata accessor for VAStrideConfiguration();
    v27 = (void *)static VAStrideConfiguration.forFlexibleA2Av3()();
    v28 = type metadata accessor for VAStrategyProviderDefault();
    v38 = v27;
    v29 = VAStrategyProviderDefault.__allocating_init(strideConfig:)((uint64_t)v38);
    type metadata accessor for VAFlexibleKeywordSpotter();
    v36 = v28;
    v37 = &protocol witness table for VAStrategyProviderDefault;
    v34 = 0;
    *(_QWORD *)v35 = v29;
    memset(v33, 0, sizeof(v33));
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    v10 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(v26, v31, v24, (uint64_t)v19, (uint64_t)v35, (uint64_t)v33);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  return v10;
}

uint64_t sub_24A19480C()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9AD58);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A194A5C(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A194B94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A194D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A194DE0()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A194E60;
  return sub_24A2161AC();
}

uint64_t sub_24A194E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A194EDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for quant_enc_f32_wofeats();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A194F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for quant_enc_f32_wofeatsOutput();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A194FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A195010()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A195068;
  return sub_24A216194();
}

uint64_t sub_24A195068(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1950E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for quant_enc_f32_wofeatsOutput();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A195128(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for quant_enc_f32_wofeatsInput();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A1951A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A18C9D0();
  v12 = sub_24A2160E0();
  type metadata accessor for quant_enc_f32_wofeatsInput();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A1952E8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_enc_f32_wofeatsOutput();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1955BC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1955E0(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for quant_enc_f32_wofeats();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_enc_f32_wofeats()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_enc_f32_wofeatsOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_enc_f32_wofeatsInput()
{
  return objc_opt_self();
}

void sub_24A1956C4()
{
  sub_24A2163EC();
  __break(1u);
}

void sub_24A195724()
{
  sub_24A2163EC();
  __break(1u);
}

uint64_t VAAudioEncoderModel.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAAudioEncoderModel.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for VAAudioEncoderModelError()
{
  return &type metadata for VAAudioEncoderModelError;
}

uint64_t type metadata accessor for VAAudioEncoderModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAAudioEncoderModel()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A195858()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9AE68);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A195A20(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x74757074756FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A195B48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A195CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A195D94()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A195E14;
  return sub_24A2161AC();
}

uint64_t sub_24A195E14(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A195E90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for aa_verifier_rdr_125141826();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A195ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for aa_verifier_rdr_125141826Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A195FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A195FC4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A19601C;
  return sub_24A216194();
}

uint64_t sub_24A19601C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A196098()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for aa_verifier_rdr_125141826Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1960DC(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for aa_verifier_rdr_125141826Input();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A196178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790C778);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for aa_verifier_rdr_125141826Input();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A190054((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A1962F0(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for aa_verifier_rdr_125141826Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1965C4()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1965E8(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for aa_verifier_rdr_125141826();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for aa_verifier_rdr_125141826()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_verifier_rdr_125141826Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for aa_verifier_rdr_125141826Input()
{
  return objc_opt_self();
}

void *sub_24A1966CC()
{
  return &unk_251B9AEF0;
}

unint64_t DefaultConfigDir.getter()
{
  return 0xD000000000000010;
}

uint64_t DefaultConfigFilename.getter()
{
  return 0x6A2E6769666E6F63;
}

uint64_t sub_24A196758()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___SecondPassConfig_waitForFinal);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1967E4(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___SecondPassConfig_waitForFinal);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19682C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x60))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A196870(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x68))(*a1);
}

uint64_t (*sub_24A1968AC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A196934()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___SecondPassConfig_useEndpointer);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A1969C0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___SecondPassConfig_useEndpointer);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A196A0C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A196A58()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F70646E45657375;
  else
    return 0x46726F4674696177;
}

uint64_t sub_24A196AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A30E4(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A196ACC(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_24A196AD8()
{
  sub_24A196E58();
  return sub_24A2166A4();
}

uint64_t sub_24A196B00()
{
  sub_24A196E58();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for SecondPassConfig()
{
  return objc_opt_self();
}

id SecondPassConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SecondPassConfig.init(from:)(a1);
}

id SecondPassConfig.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char v22;
  char v23;
  uint64_t v24;
  objc_class *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  objc_super v30;
  char v31;
  char v32;
  uint64_t v33;

  v3 = sub_24A135F88(&qword_25790DAD8);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR___SecondPassConfig_waitForFinal];
  v1[OBJC_IVAR___SecondPassConfig_waitForFinal] = 1;
  v7 = &v1[OBJC_IVAR___SecondPassConfig_useEndpointer];
  v1[OBJC_IVAR___SecondPassConfig_useEndpointer] = 0;
  v8 = a1[3];
  v29 = a1;
  v9 = sub_24A14B668(a1, v8);
  sub_24A196E58();
  v10 = v1;
  v11 = v9;
  v12 = v33;
  sub_24A216674();
  if (v12)
  {

    sub_24A14D184((uint64_t)v29);
    type metadata accessor for SecondPassConfig();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v6;
    v14 = v27;
    v15 = v28;
    v16 = v7;
    v32 = 0;
    v17 = sub_24A216494();
    v18 = v14;
    if (v17 == 2)
    {
      v19 = v13;
      swift_beginAccess();
      v20 = *v13;
    }
    else
    {
      v20 = v17 & 1;
      v19 = v13;
    }
    swift_beginAccess();
    *v19 = v20;
    v31 = 1;
    v22 = sub_24A216494();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v15);
    if (v22 == 2)
    {
      swift_beginAccess();
      v23 = *v16;
    }
    else
    {
      v23 = v22 & 1;
    }
    v24 = (uint64_t)v29;
    swift_beginAccess();
    *v16 = v23;

    v25 = (objc_class *)type metadata accessor for SecondPassConfig();
    v30.receiver = v10;
    v30.super_class = v25;
    v11 = objc_msgSendSuper2(&v30, sel_init);
    sub_24A14D184(v24);
  }
  return v11;
}

unint64_t sub_24A196E58()
{
  unint64_t result;

  result = qword_257917738;
  if (!qword_257917738)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C7F4, &type metadata for SecondPassConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917738);
  }
  return result;
}

uint64_t sub_24A196E9C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DAE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A196E58();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x60))(v9);
  v13[15] = 0;
  v11 = sub_24A21653C();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x78))(v11);
    v13[14] = 1;
    sub_24A21653C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id SecondPassConfig.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for SecondPassConfig);
}

uint64_t sub_24A197058()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PreKeywordSilenceConfig_lookbackFrames;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1970E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___PreKeywordSilenceConfig_lookbackFrames);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19712C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x68))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19716C(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x70))(*a1);
}

uint64_t (*sub_24A1971A8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A197230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PreKeywordSilenceConfig_minSilenceInLookbackFrames;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1972BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___PreKeywordSilenceConfig_minSilenceInLookbackFrames);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A197304@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x80))();
  *a2 = result;
  return result;
}

uint64_t sub_24A197344(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x88))(*a1);
}

uint64_t (*sub_24A197380())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A197408()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PreKeywordSilenceConfig_silenceProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A19749C(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___PreKeywordSilenceConfig_silenceProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void sub_24A1974EC(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x98))();
}

uint64_t sub_24A19752C(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA0))(*a1);
}

uint64_t (*sub_24A197568())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1975AC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001ALL;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0x6B6361626B6F6F6CLL;
}

uint64_t sub_24A197620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3210(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A197644(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_24A197650()
{
  sub_24A197A80();
  return sub_24A2166A4();
}

uint64_t sub_24A197678()
{
  sub_24A197A80();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for PreKeywordSilence()
{
  return objc_opt_self();
}

id PreKeywordSilence.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PreKeywordSilence.init(from:)(a1);
}

id PreKeywordSilence.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  char *v25;
  objc_class *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  objc_super v32;
  char v33;
  char v34;
  char v35;
  char *v36;

  v30 = sub_24A135F88(&qword_25790DB08);
  v29 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = &v1[OBJC_IVAR___PreKeywordSilenceConfig_lookbackFrames];
  *(_QWORD *)&v1[OBJC_IVAR___PreKeywordSilenceConfig_lookbackFrames] = 20;
  v5 = &v1[OBJC_IVAR___PreKeywordSilenceConfig_minSilenceInLookbackFrames];
  *(_QWORD *)&v1[OBJC_IVAR___PreKeywordSilenceConfig_minSilenceInLookbackFrames] = 10;
  v6 = &v1[OBJC_IVAR___PreKeywordSilenceConfig_silenceProbability];
  *(_DWORD *)&v1[OBJC_IVAR___PreKeywordSilenceConfig_silenceProbability] = 1060320051;
  v7 = a1[3];
  v31 = a1;
  v8 = sub_24A14B668(a1, v7);
  sub_24A197A80();
  v9 = v1;
  v10 = v8;
  v11 = v36;
  sub_24A216674();
  if (v11)
  {

    sub_24A14D184((uint64_t)v31);
    type metadata accessor for PreKeywordSilence();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = (uint64_t *)v28;
    v36 = v5;
    v27 = v6;
    v13 = v29;
    v35 = 0;
    v14 = v30;
    v15 = sub_24A2164AC();
    v16 = v4;
    if ((v17 & 1) != 0)
    {
      swift_beginAccess();
      v18 = *v12;
    }
    else
    {
      v18 = v15;
    }
    swift_beginAccess();
    *v12 = v18;
    v34 = 1;
    v19 = sub_24A2164AC();
    if ((v20 & 1) != 0)
    {
      v22 = (uint64_t *)v36;
      swift_beginAccess();
      v21 = *v22;
    }
    else
    {
      v21 = v19;
      v22 = (uint64_t *)v36;
    }
    swift_beginAccess();
    *v22 = v21;
    v33 = 2;
    v24 = sub_24A2164A0();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v14);
    v25 = v27;
    if ((v24 & 0x100000000) != 0)
    {
      swift_beginAccess();
      LODWORD(v24) = *(_DWORD *)v25;
    }
    swift_beginAccess();
    *(_DWORD *)v25 = v24;

    v26 = (objc_class *)type metadata accessor for PreKeywordSilence();
    v32.receiver = v9;
    v32.super_class = v26;
    v10 = objc_msgSendSuper2(&v32, sel_init);
    sub_24A14D184((uint64_t)v31);
  }
  return v10;
}

unint64_t sub_24A197A80()
{
  unint64_t result;

  result = qword_257917740;
  if (!qword_257917740)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C7A4, &type metadata for PreKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917740);
  }
  return result;
}

uint64_t sub_24A197AC4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DB10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A197A80();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x68))(v9);
  v14[15] = 0;
  v11 = sub_24A216554();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x80))(v11);
    v14[14] = 1;
    v12 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x98))(v12);
    v14[13] = 2;
    sub_24A216548();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id PreKeywordSilence.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for PreKeywordSilence);
}

uint64_t sub_24A197C70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 176))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A197C9C()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xB8))();
}

float sub_24A197D18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___DuringKeywordSilenceConfig_minPercentageOfNonSilenceFrames;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A197DAC(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___DuringKeywordSilenceConfig_minPercentageOfNonSilenceFrames);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void sub_24A197DFC(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x60))();
}

uint64_t sub_24A197E3C(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & **a2) + 0x68))(*a1);
}

uint64_t (*sub_24A197E78())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A197F00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___DuringKeywordSilenceConfig_silenceProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A197F94(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___DuringKeywordSilenceConfig_silenceProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void sub_24A197FE4(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
}

uint64_t sub_24A198024(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_24A198060())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

unint64_t sub_24A1980A4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0xD00000000000001FLL;
}

uint64_t sub_24A1980E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A337C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A19810C()
{
  sub_24A19846C();
  return sub_24A2166A4();
}

uint64_t sub_24A198134()
{
  sub_24A19846C();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for DuringKeywordSilence()
{
  return objc_opt_self();
}

id DuringKeywordSilence.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DuringKeywordSilence.init(from:)(a1);
}

id DuringKeywordSilence.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  id v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  objc_super v27;
  char v28;
  char v29;
  uint64_t v30;

  v3 = sub_24A135F88(&qword_25790DB30);
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR___DuringKeywordSilenceConfig_minPercentageOfNonSilenceFrames];
  *(_DWORD *)&v1[OBJC_IVAR___DuringKeywordSilenceConfig_minPercentageOfNonSilenceFrames] = 1056964608;
  v7 = &v1[OBJC_IVAR___DuringKeywordSilenceConfig_silenceProbability];
  *(_DWORD *)&v1[OBJC_IVAR___DuringKeywordSilenceConfig_silenceProbability] = 1056964608;
  v8 = a1[3];
  v26 = a1;
  v9 = sub_24A14B668(a1, v8);
  sub_24A19846C();
  v10 = v1;
  v11 = v9;
  v12 = v30;
  sub_24A216674();
  if (v12)
  {

    sub_24A14D184((uint64_t)v26);
    type metadata accessor for DuringKeywordSilence();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v6;
    v14 = v24;
    v15 = v25;
    v16 = v7;
    v29 = 0;
    v17 = sub_24A2164A0();
    v18 = v17;
    v19 = v14;
    if ((v17 & 0x100000000) != 0)
    {
      swift_beginAccess();
      v18 = *(_DWORD *)v13;
    }
    swift_beginAccess();
    *(_DWORD *)v13 = v18;
    v28 = 1;
    v21 = sub_24A2164A0();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v15);
    if ((v21 & 0x100000000) != 0)
    {
      swift_beginAccess();
      LODWORD(v21) = *(_DWORD *)v16;
    }
    swift_beginAccess();
    *(_DWORD *)v16 = v21;

    v22 = (objc_class *)type metadata accessor for DuringKeywordSilence();
    v27.receiver = v10;
    v27.super_class = v22;
    v11 = objc_msgSendSuper2(&v27, sel_init);
    sub_24A14D184((uint64_t)v26);
  }
  return v11;
}

unint64_t sub_24A19846C()
{
  unint64_t result;

  result = qword_257917748;
  if (!qword_257917748)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C754, &type metadata for DuringKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917748);
  }
  return result;
}

uint64_t sub_24A1984B0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DB38);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A19846C();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x60))(v9);
  v13[15] = 0;
  v11 = sub_24A216548();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x78))(v11);
    v13[14] = 1;
    sub_24A216548();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id DuringKeywordSilence.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for DuringKeywordSilence);
}

uint64_t sub_24A198664()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PostKeywordSilenceConfig_lookForwardFrames;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1986F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___PostKeywordSilenceConfig_lookForwardFrames);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A198738@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x70))();
  *a2 = result;
  return result;
}

uint64_t sub_24A198778(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x78))(*a1);
}

uint64_t (*sub_24A1987B4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19883C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFramesExpected;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A1988C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFramesExpected);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A198910@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x88))();
  *a2 = result;
  return result;
}

uint64_t sub_24A198950(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x90))(*a1);
}

uint64_t (*sub_24A19898C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A198A14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PostKeywordSilenceConfig_silenceProbability;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A198AA8(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___PostKeywordSilenceConfig_silenceProbability);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void sub_24A198AF8(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
}

uint64_t sub_24A198B38(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA8))(*a1);
}

uint64_t (*sub_24A198B74())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A198BFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFrameCountAtEndOfKeyword;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A198C88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFrameCountAtEndOfKeyword);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A198CD0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB8))();
  *a2 = result;
  return result;
}

uint64_t sub_24A198D10(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC0))(*a1);
}

uint64_t (*sub_24A198D4C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A198D90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A198DC8 + 4 * byte_24A21B800[a1]))(0xD000000000000011, 0x800000024A224440);
}

uint64_t sub_24A198DC8(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_24A198E00()
{
  unsigned __int8 *v0;

  return sub_24A198D90(*v0);
}

uint64_t sub_24A198E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3468(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A198E2C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_24A198E38()
{
  sub_24A19930C();
  return sub_24A2166A4();
}

uint64_t sub_24A198E60()
{
  sub_24A19930C();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for PostKeywordSilence()
{
  return objc_opt_self();
}

id PostKeywordSilence.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return PostKeywordSilence.init(from:)(a1);
}

id PostKeywordSilence.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t *v30;
  char *v31;
  objc_class *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  objc_super v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char *v45;

  v38 = sub_24A135F88(&qword_25790DB68);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = &v1[OBJC_IVAR___PostKeywordSilenceConfig_lookForwardFrames];
  *(_QWORD *)&v1[OBJC_IVAR___PostKeywordSilenceConfig_lookForwardFrames] = 8;
  v35 = &v1[OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFramesExpected];
  *(_QWORD *)&v1[OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFramesExpected] = 2;
  v5 = &v1[OBJC_IVAR___PostKeywordSilenceConfig_silenceProbability];
  *(_DWORD *)&v1[OBJC_IVAR___PostKeywordSilenceConfig_silenceProbability] = 1060320051;
  v6 = &v1[OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFrameCountAtEndOfKeyword];
  *(_QWORD *)&v1[OBJC_IVAR___PostKeywordSilenceConfig_minSilenceFrameCountAtEndOfKeyword] = 2;
  v7 = a1[3];
  v39 = a1;
  v8 = sub_24A14B668(a1, v7);
  sub_24A19930C();
  v9 = v1;
  v10 = v8;
  v11 = v45;
  sub_24A216674();
  if (v11)
  {

    sub_24A14D184((uint64_t)v39);
    type metadata accessor for PostKeywordSilence();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v12 = (uint64_t *)v36;
    v13 = v35;
    v34 = v5;
    v33 = (uint64_t *)v6;
    v14 = v37;
    v45 = v9;
    v44 = 0;
    v15 = v38;
    v16 = sub_24A2164AC();
    if ((v17 & 1) != 0)
    {
      swift_beginAccess();
      v18 = *v12;
    }
    else
    {
      v18 = v16;
    }
    v19 = v13;
    swift_beginAccess();
    *v12 = v18;
    v43 = 1;
    v20 = sub_24A2164AC();
    if ((v21 & 1) != 0)
    {
      swift_beginAccess();
      v22 = *(_QWORD *)v13;
    }
    else
    {
      v22 = v20;
    }
    v23 = v34;
    swift_beginAccess();
    *v19 = v22;
    v42 = 2;
    v24 = sub_24A2164A0();
    v25 = v24;
    if ((v24 & 0x100000000) != 0)
    {
      swift_beginAccess();
      v25 = *(_DWORD *)v23;
    }
    swift_beginAccess();
    *(_DWORD *)v23 = v25;
    v41 = 3;
    v27 = sub_24A2164AC();
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v4, v15);
    v30 = v33;
    if ((v29 & 1) != 0)
    {
      swift_beginAccess();
      v27 = *v30;
    }
    swift_beginAccess();
    *v30 = v27;
    v31 = v45;

    v32 = (objc_class *)type metadata accessor for PostKeywordSilence();
    v40.receiver = v31;
    v40.super_class = v32;
    v10 = objc_msgSendSuper2(&v40, sel_init);
    sub_24A14D184((uint64_t)v39);
  }
  return v10;
}

unint64_t sub_24A19930C()
{
  unint64_t result;

  result = qword_257917750;
  if (!qword_257917750)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C704, &type metadata for PostKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917750);
  }
  return result;
}

uint64_t sub_24A199350(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DB70);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A19930C();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x70))(v9);
  v15[15] = 0;
  v11 = sub_24A216554();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x88))(v11);
    v15[14] = 1;
    v12 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xA0))(v12);
    v15[13] = 2;
    v13 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xB8))(v13);
    v15[12] = 3;
    sub_24A216554();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id PostKeywordSilence.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for PostKeywordSilence);
}

uint64_t sub_24A199538@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 208))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A199564()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xD8))();
}

uint64_t sub_24A1995E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___AudioCaptureConfig_leftOfStartFrameOffset;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19966C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___AudioCaptureConfig_leftOfStartFrameOffset);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A1996B4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1996F4(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x68))(*a1);
}

uint64_t (*sub_24A199730())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A1997B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___AudioCaptureConfig_rightOfEndFrameOffset;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A199844(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___AudioCaptureConfig_rightOfEndFrameOffset);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19988C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_24A1998CC(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_24A199908())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

BOOL sub_24A19994C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t sub_24A199964()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000016;
}

uint64_t sub_24A1999A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3600(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1999C4()
{
  sub_24A199D4C();
  return sub_24A2166A4();
}

uint64_t sub_24A1999EC()
{
  sub_24A199D4C();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for AudioCapture()
{
  return objc_opt_self();
}

id AudioCapture.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return AudioCapture.init(from:)(a1);
}

id AudioCapture.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  id v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  objc_class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  objc_super v34;
  char v35;
  char v36;
  uint64_t v37;

  v3 = sub_24A135F88(&qword_25790DB90);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR___AudioCaptureConfig_leftOfStartFrameOffset];
  *(_QWORD *)&v1[OBJC_IVAR___AudioCaptureConfig_leftOfStartFrameOffset] = 1;
  v7 = &v1[OBJC_IVAR___AudioCaptureConfig_rightOfEndFrameOffset];
  *(_QWORD *)&v1[OBJC_IVAR___AudioCaptureConfig_rightOfEndFrameOffset] = 8;
  v8 = a1[3];
  v33 = a1;
  v9 = sub_24A14B668(a1, v8);
  sub_24A199D4C();
  v10 = v1;
  v11 = v9;
  v12 = v37;
  sub_24A216674();
  if (v12)
  {

    sub_24A14D184((uint64_t)v33);
    type metadata accessor for AudioCapture();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v6;
    v14 = v31;
    v15 = v32;
    v16 = (uint64_t *)v7;
    v36 = 0;
    v17 = sub_24A2164AC();
    v18 = v14;
    if ((v19 & 1) != 0)
    {
      v21 = v13;
      swift_beginAccess();
      v20 = *(_QWORD *)v13;
    }
    else
    {
      v20 = v17;
      v21 = v13;
    }
    swift_beginAccess();
    *v21 = v20;
    v35 = 1;
    v22 = v5;
    v24 = sub_24A2164AC();
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v15);
    if ((v26 & 1) != 0)
    {
      v28 = v16;
      swift_beginAccess();
      v24 = *v16;
      v27 = (uint64_t)v33;
    }
    else
    {
      v27 = (uint64_t)v33;
      v28 = v16;
    }
    swift_beginAccess();
    *v28 = v24;

    v29 = (objc_class *)type metadata accessor for AudioCapture();
    v34.receiver = v10;
    v34.super_class = v29;
    v11 = objc_msgSendSuper2(&v34, sel_init);
    sub_24A14D184(v27);
  }
  return v11;
}

unint64_t sub_24A199D4C()
{
  unint64_t result;

  result = qword_257917758;
  if (!qword_257917758)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C6B4, &type metadata for AudioCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917758);
  }
  return result;
}

uint64_t sub_24A199D90(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DB98);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A199D4C();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x60))(v9);
  v13[15] = 0;
  v11 = sub_24A216554();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x78))(v11);
    v13[14] = 1;
    sub_24A216554();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id AudioCapture.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for AudioCapture);
}

uint64_t sub_24A199F00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 144))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A199F2C()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x98))();
}

uint64_t sub_24A199FA8()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___DecoderConfig_useChecker);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19A034(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___DecoderConfig_useChecker);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19A07C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19A0C0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_24A19A0FC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19A188()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___DecoderConfig_preKeywordSilence);
  swift_beginAccess();
  return *v1;
}

void sub_24A19A1D8(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___DecoderConfig_preKeywordSilence);
}

uint64_t sub_24A19A1E4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t (*sub_24A19A228())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19A2B4()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___DecoderConfig_duringKeywordSilence);
  swift_beginAccess();
  return *v1;
}

void sub_24A19A304(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___DecoderConfig_duringKeywordSilence);
}

uint64_t sub_24A19A310@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA8))();
  *a2 = result;
  return result;
}

uint64_t (*sub_24A19A354())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19A3E0()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___DecoderConfig_postKeywordSilence);
  swift_beginAccess();
  return *v1;
}

void sub_24A19A430(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___DecoderConfig_postKeywordSilence);
}

uint64_t sub_24A19A43C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC0))();
  *a2 = result;
  return result;
}

uint64_t (*sub_24A19A480())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19A50C()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___DecoderConfig_audioCapture);
  swift_beginAccess();
  return *v1;
}

void sub_24A19A55C(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___DecoderConfig_audioCapture);
}

uint64_t sub_24A19A568@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD8))();
  *a2 = result;
  return result;
}

uint64_t (*sub_24A19A5AC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19A5F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A19A628 + 4 * byte_24A21B804[a1]))(0x6B63656843657375, 0xEA00000000007265);
}

unint64_t sub_24A19A628()
{
  return 0xD000000000000011;
}

unint64_t sub_24A19A644()
{
  return 0xD000000000000014;
}

uint64_t sub_24A19A67C()
{
  return 0x7061436F69647561;
}

uint64_t sub_24A19A69C()
{
  unsigned __int8 *v0;

  return sub_24A19A5F0(*v0);
}

uint64_t sub_24A19A6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A36EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A19A6C8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_24A19A6D4()
{
  sub_24A19AE00();
  return sub_24A2166A4();
}

uint64_t sub_24A19A6FC()
{
  sub_24A19AE00();
  return sub_24A2166B0();
}

id sub_24A19A724()
{
  _BYTE *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v0[OBJC_IVAR___DecoderConfig_useChecker] = 0;
  v1 = OBJC_IVAR___DecoderConfig_preKeywordSilence;
  v2 = objc_allocWithZone((Class)type metadata accessor for PreKeywordSilence());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR___DecoderConfig_duringKeywordSilence;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DuringKeywordSilence()), sel_init);
  v5 = OBJC_IVAR___DecoderConfig_postKeywordSilence;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PostKeywordSilence()), sel_init);
  v6 = OBJC_IVAR___DecoderConfig_audioCapture;
  *(_QWORD *)&v3[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AudioCapture()), sel_init);

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for DecoderConfig();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for DecoderConfig()
{
  return objc_opt_self();
}

id DecoderConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return DecoderConfig.init(from:)(a1);
}

id DecoderConfig.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id *v7;
  id v8;
  char *v9;
  id v10;
  id *v11;
  id v12;
  id *v13;
  objc_class *v14;
  id v15;
  id *v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  objc_class *v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  id *v24;
  id *v25;
  void *v26;
  id *v27;
  id *v28;
  id v29;
  _BYTE *v31;
  char v32;
  uint64_t v33;
  id *v34;
  id *v35;
  char *v36;
  id v37;
  void *v38;
  id *v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  id *v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  objc_class *v50;
  _QWORD v51[2];
  Class v52;
  Class v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  id v58;
  id *v59;
  id *v60;
  id *v61;
  objc_class *v62;
  objc_super v63;
  void *v64;
  char v65;
  objc_class *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  char v72;
  id *v73;

  v3 = sub_24A135F88(&qword_25790DBD0);
  v4 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  v56 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = &v1[OBJC_IVAR___DecoderConfig_useChecker];
  v1[OBJC_IVAR___DecoderConfig_useChecker] = 0;
  v7 = (id *)&v1[OBJC_IVAR___DecoderConfig_preKeywordSilence];
  v53 = (Class)type metadata accessor for PreKeywordSilence();
  v8 = objc_allocWithZone(v53);
  v9 = v1;
  v10 = objc_msgSend(v8, sel_init);
  v59 = v7;
  *v7 = v10;
  v11 = (id *)&v9[OBJC_IVAR___DecoderConfig_duringKeywordSilence];
  v52 = (Class)type metadata accessor for DuringKeywordSilence();
  v12 = objc_msgSend(objc_allocWithZone(v52), sel_init);
  v61 = v11;
  *v11 = v12;
  v13 = (id *)&v9[OBJC_IVAR___DecoderConfig_postKeywordSilence];
  v14 = (objc_class *)type metadata accessor for PostKeywordSilence();
  v15 = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v73 = v13;
  *v13 = v15;
  v58 = v9;
  v16 = (id *)&v9[OBJC_IVAR___DecoderConfig_audioCapture];
  v17 = (objc_class *)type metadata accessor for AudioCapture();
  v18 = objc_msgSend(objc_allocWithZone(v17), sel_init);
  v60 = v16;
  *v16 = v18;
  v19 = a1[3];
  v57 = a1;
  sub_24A14B668(a1, v19);
  sub_24A19AE00();
  v20 = v62;
  sub_24A216674();
  if (v20)
  {
    v25 = v59;
    v24 = v60;
    v26 = v58;
    v27 = v61;
    v28 = v73;
    sub_24A14D184((uint64_t)v57);

    v29 = *v24;
    type metadata accessor for DecoderConfig();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v21 = v54;
    v62 = v14;
    v51[1] = v17;
    v72 = 0;
    v22 = v55;
    v23 = sub_24A216494();
    if (v23 == 2)
    {
      v31 = v21;
      swift_beginAccess();
      v32 = *v21;
    }
    else
    {
      v32 = v23 & 1;
      v31 = v21;
    }
    swift_beginAccess();
    *v31 = v32;
    v71 = 1;
    sub_24A164A60(&qword_25790DBD8, v33, (uint64_t (*)(uint64_t))type metadata accessor for PreKeywordSilence, (uint64_t)&protocol conformance descriptor for PreKeywordSilence);
    sub_24A2164B8();
    v34 = v60;
    v35 = v61;
    v36 = v6;
    v37 = v70;
    v38 = v58;
    v39 = v59;
    if (!v70)
    {
      swift_beginAccess();
      v37 = *v39;
    }
    swift_beginAccess();
    v40 = *v39;
    *v39 = v37;

    v69 = 2;
    sub_24A164A60(&qword_25790DBE0, v41, (uint64_t (*)(uint64_t))type metadata accessor for DuringKeywordSilence, (uint64_t)&protocol conformance descriptor for DuringKeywordSilence);
    sub_24A2164B8();
    v42 = v68;
    if (!v68)
    {
      swift_beginAccess();
      v42 = *v35;
    }
    swift_beginAccess();
    v43 = *v35;
    *v35 = v42;

    v67 = 3;
    sub_24A164A60(&qword_25790DBE8, v44, (uint64_t (*)(uint64_t))type metadata accessor for PostKeywordSilence, (uint64_t)&protocol conformance descriptor for PostKeywordSilence);
    sub_24A2164B8();
    v62 = v66;
    v45 = v73;
    if (!v66)
    {
      swift_beginAccess();
      v62 = (objc_class *)*v45;
    }
    swift_beginAccess();
    v46 = *v45;
    *v45 = v62;

    v65 = 4;
    sub_24A164A60(&qword_25790DBF0, v47, (uint64_t (*)(uint64_t))type metadata accessor for AudioCapture, (uint64_t)&protocol conformance descriptor for AudioCapture);
    sub_24A2164B8();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v36, v22);
    v48 = v64;
    if (!v64)
    {
      swift_beginAccess();
      v48 = *v34;
    }
    swift_beginAccess();
    v49 = *v34;
    *v34 = v48;

    v50 = (objc_class *)type metadata accessor for DecoderConfig();
    v63.receiver = v38;
    v63.super_class = v50;
    v29 = objc_msgSendSuper2(&v63, sel_init);
    sub_24A14D184((uint64_t)v57);
  }
  return v29;
}

unint64_t sub_24A19AE00()
{
  unint64_t result;

  result = qword_257917760;
  if (!qword_257917760)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C664, &type metadata for DecoderConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917760);
  }
  return result;
}

uint64_t sub_24A19AE44(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  void *v22;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DBF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A19AE00();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x78))(v9);
  LOBYTE(v22) = 0;
  v11 = sub_24A21653C();
  if (!v2)
  {
    v12 = (void *)(*(uint64_t (**)(uint64_t))((*v10 & *v3) + 0x90))(v11);
    v22 = v12;
    HIBYTE(v21) = 1;
    type metadata accessor for PreKeywordSilence();
    sub_24A164A60(&qword_25790DB18, v13, (uint64_t (*)(uint64_t))type metadata accessor for PreKeywordSilence, (uint64_t)&protocol conformance descriptor for PreKeywordSilence);
    sub_24A216560();

    v14 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xA8))();
    v22 = v14;
    HIBYTE(v21) = 2;
    type metadata accessor for DuringKeywordSilence();
    sub_24A164A60(&qword_25790DB40, v15, (uint64_t (*)(uint64_t))type metadata accessor for DuringKeywordSilence, (uint64_t)&protocol conformance descriptor for DuringKeywordSilence);
    sub_24A216560();

    v16 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xC0))();
    v22 = v16;
    HIBYTE(v21) = 3;
    type metadata accessor for PostKeywordSilence();
    sub_24A164A60(&qword_25790DB78, v17, (uint64_t (*)(uint64_t))type metadata accessor for PostKeywordSilence, (uint64_t)&protocol conformance descriptor for PostKeywordSilence);
    sub_24A216560();

    v18 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xD8))();
    v22 = v18;
    HIBYTE(v21) = 4;
    type metadata accessor for AudioCapture();
    sub_24A164A60(&qword_25790DBA0, v19, (uint64_t (*)(uint64_t))type metadata accessor for AudioCapture, (uint64_t)&protocol conformance descriptor for AudioCapture);
    sub_24A216560();

  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id DecoderConfig.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for DecoderConfig);
}

uint64_t sub_24A19B1BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 240))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A19B1E8()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0xF8))();
}

uint64_t sub_24A19B288()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR___NeuralNetworkConfig_modelPath);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_24A19B344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR___NeuralNetworkConfig_modelPath);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A19B3A0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x68))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_24A19B3E0(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x70);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_24A19B434())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A19B4BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___NeuralNetworkConfig_logThreshold;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A19B550(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___NeuralNetworkConfig_logThreshold);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

void sub_24A19B5A0(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x80))();
}

uint64_t sub_24A19B5E0(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x24BEE4EA0] & **a2) + 0x88))(*a1);
}

uint64_t (*sub_24A19B61C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

float sub_24A19B6A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___NeuralNetworkConfig_logMinimum;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t sub_24A19B738(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + OBJC_IVAR___NeuralNetworkConfig_logMinimum);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A19B788())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19B7CC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365726854676F6CLL;
  if (*v0 != 1)
    v1 = 0x6D696E694D676F6CLL;
  if (*v0)
    return v1;
  else
    return 0x7461506C65646F6DLL;
}

uint64_t sub_24A19B838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A19B85C()
{
  sub_24A19BCD8();
  return sub_24A2166A4();
}

uint64_t sub_24A19B884()
{
  sub_24A19BCD8();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for NeuralNetworkConfig()
{
  return objc_opt_self();
}

id NeuralNetworkConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return NeuralNetworkConfig.init(from:)(a1);
}

id NeuralNetworkConfig.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  objc_class *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t *v31;
  objc_super v32;
  char v33;
  char v34;
  char v35;
  char *v36;

  v28 = sub_24A135F88(&qword_25790DC20);
  v3 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR___NeuralNetworkConfig_modelPath];
  *(_QWORD *)v6 = 0xD000000000000041;
  *((_QWORD *)v6 + 1) = 0x800000024A224110;
  v31 = (uint64_t *)v6;
  v7 = &v1[OBJC_IVAR___NeuralNetworkConfig_logThreshold];
  *(_DWORD *)&v1[OBJC_IVAR___NeuralNetworkConfig_logThreshold] = -1035468800;
  v8 = &v1[OBJC_IVAR___NeuralNetworkConfig_logMinimum];
  *(_DWORD *)&v1[OBJC_IVAR___NeuralNetworkConfig_logMinimum] = -1027080192;
  v9 = a1[3];
  v29 = a1;
  sub_24A14B668(a1, v9);
  sub_24A19BCD8();
  v30 = v1;
  v10 = v36;
  sub_24A216674();
  if (v10)
  {
    v16 = v30;
    sub_24A14D184((uint64_t)v29);

    swift_bridgeObjectRelease();
    type metadata accessor for NeuralNetworkConfig();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v11 = v7;
    v12 = v3;
    v36 = v8;
    v35 = 0;
    v13 = v28;
    v14 = sub_24A216488();
    v18 = v15;
    v19 = v31;
    if (v15)
    {
      v20 = v14;
    }
    else
    {
      swift_beginAccess();
      v20 = *v19;
      v18 = v19[1];
      swift_bridgeObjectRetain();
    }
    swift_beginAccess();
    *v19 = v20;
    v19[1] = v18;
    swift_bridgeObjectRelease();
    v34 = 1;
    v21 = sub_24A2164A0();
    v22 = v21;
    if ((v21 & 0x100000000) != 0)
    {
      swift_beginAccess();
      v22 = *(_DWORD *)v11;
    }
    swift_beginAccess();
    *(_DWORD *)v11 = v22;
    v33 = 2;
    v23 = sub_24A2164A0();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v13);
    v24 = v36;
    if ((v23 & 0x100000000) != 0)
    {
      swift_beginAccess();
      LODWORD(v23) = *(_DWORD *)v24;
    }
    swift_beginAccess();
    *(_DWORD *)v24 = v23;
    v25 = v30;

    v26 = (objc_class *)type metadata accessor for NeuralNetworkConfig();
    v32.receiver = v25;
    v32.super_class = v26;
    v16 = objc_msgSendSuper2(&v32, sel_init);
    sub_24A14D184((uint64_t)v29);
  }
  return v16;
}

unint64_t sub_24A19BCD8()
{
  unint64_t result;

  result = qword_257917768;
  if (!qword_257917768)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C614, &type metadata for NeuralNetworkConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917768);
  }
  return result;
}

uint64_t sub_24A19BD1C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DC28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A19BCD8();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x68))(v9);
  v14[15] = 0;
  sub_24A216530();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v12 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x80))(v12);
    v14[14] = 1;
    v13 = sub_24A216548();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x98))(v13);
    v14[13] = 2;
    sub_24A216548();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
}

id NeuralNetworkConfig.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for NeuralNetworkConfig);
}

uint64_t sub_24A19BF48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_cmvnSlidingWindowLength;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19BFD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_cmvnSlidingWindowLength);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A19C01C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C0A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_cmvnMinWindowLength;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C130(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_cmvnMinWindowLength);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19C178@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xA0))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19C1B8(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA8))(*a1);
}

uint64_t (*sub_24A19C1F4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C27C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_spliceLeftContext;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C308(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_spliceLeftContext);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_24A19C350())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C3D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_spliceRightContext;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C464(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_spliceRightContext);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19C4AC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xD0))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19C4EC(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD8))(*a1);
}

uint64_t (*sub_24A19C528())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C5B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_downSampleStride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C63C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_downSampleStride);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19C684@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE8))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19C6C4(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xF0))(*a1);
}

uint64_t (*sub_24A19C700())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C788()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_nnetIntakeFeatureLength;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C814(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_nnetIntakeFeatureLength);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19C85C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x100))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19C89C(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x108))(*a1);
}

uint64_t (*sub_24A19C8D8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19C960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___FeatureExtractorConfig_nnetVectorSize;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_24A19C9EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___FeatureExtractorConfig_nnetVectorSize);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19CA34@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x118))();
  *a2 = result;
  return result;
}

uint64_t sub_24A19CA74(_QWORD *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x120))(*a1);
}

uint64_t (*sub_24A19CAB0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19CAF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24A19CB2C + 4 * byte_24A21B809[a1]))(0xD000000000000017, 0x800000024A2247D0);
}

uint64_t sub_24A19CB2C(uint64_t a1)
{
  return a1 - 4;
}

uint64_t sub_24A19CB80()
{
  return 0x7463655674656E6ELL;
}

uint64_t sub_24A19CBA4()
{
  unsigned __int8 *v0;

  return sub_24A19CAF4(*v0);
}

uint64_t sub_24A19CBAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3A98(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A19CBD0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_24A19CBDC()
{
  sub_24A19D234();
  return sub_24A2166A4();
}

uint64_t sub_24A19CC04()
{
  sub_24A19D234();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for FeatureExtractorConfig()
{
  return objc_opt_self();
}

id FeatureExtractorConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return FeatureExtractorConfig.init(from:)(a1);
}

id FeatureExtractorConfig.init(from:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  id v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t *v43;
  char *v44;
  objc_class *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  objc_super v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char *v65;

  v55 = sub_24A135F88(&qword_25790DC70);
  v53 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = &v1[OBJC_IVAR___FeatureExtractorConfig_cmvnSlidingWindowLength];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_cmvnSlidingWindowLength] = 600;
  v51 = &v1[OBJC_IVAR___FeatureExtractorConfig_cmvnMinWindowLength];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_cmvnMinWindowLength] = 24;
  v50 = &v1[OBJC_IVAR___FeatureExtractorConfig_spliceLeftContext];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_spliceLeftContext] = 3;
  v49 = &v1[OBJC_IVAR___FeatureExtractorConfig_spliceRightContext];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_spliceRightContext] = 3;
  v48 = &v1[OBJC_IVAR___FeatureExtractorConfig_downSampleStride];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_downSampleStride] = 3;
  v47 = &v1[OBJC_IVAR___FeatureExtractorConfig_nnetIntakeFeatureLength];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_nnetIntakeFeatureLength] = 8;
  v5 = &v1[OBJC_IVAR___FeatureExtractorConfig_nnetVectorSize];
  *(_QWORD *)&v1[OBJC_IVAR___FeatureExtractorConfig_nnetVectorSize] = 280;
  v6 = a1[3];
  v56 = a1;
  sub_24A14B668(a1, v6);
  sub_24A19D234();
  v7 = v1;
  v54 = v4;
  v8 = v65;
  sub_24A216674();
  if (v8)
  {

    v9 = v7;
    sub_24A14D184((uint64_t)v56);
    type metadata accessor for FeatureExtractorConfig();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v11 = (uint64_t *)v51;
    v10 = v52;
    v46 = (uint64_t *)v5;
    v12 = v53;
    v65 = v7;
    v64 = 0;
    v14 = v54;
    v13 = v55;
    v15 = sub_24A2164AC();
    if ((v16 & 1) != 0)
    {
      v18 = v10;
      swift_beginAccess();
      v17 = *(_QWORD *)v10;
    }
    else
    {
      v17 = v15;
      v18 = v10;
    }
    swift_beginAccess();
    *v18 = v17;
    v63 = 1;
    v19 = sub_24A2164AC();
    v22 = v12;
    if ((v20 & 1) != 0)
    {
      swift_beginAccess();
      v23 = *v11;
    }
    else
    {
      v23 = v19;
    }
    v24 = (uint64_t *)v50;
    swift_beginAccess();
    *v11 = v23;
    v62 = 2;
    v25 = sub_24A2164AC();
    if ((v26 & 1) != 0)
    {
      swift_beginAccess();
      v27 = *v24;
    }
    else
    {
      v27 = v25;
    }
    swift_beginAccess();
    *v24 = v27;
    v61 = 3;
    v28 = sub_24A2164AC();
    if ((v29 & 1) != 0)
    {
      v31 = (uint64_t *)v49;
      swift_beginAccess();
      v30 = *v31;
    }
    else
    {
      v30 = v28;
      v31 = (uint64_t *)v49;
    }
    swift_beginAccess();
    *v31 = v30;
    v60 = 4;
    v32 = sub_24A2164AC();
    if ((v33 & 1) != 0)
    {
      v35 = (uint64_t *)v48;
      swift_beginAccess();
      v34 = *v35;
    }
    else
    {
      v34 = v32;
      v35 = (uint64_t *)v48;
    }
    swift_beginAccess();
    *v35 = v34;
    v59 = 5;
    v36 = sub_24A2164AC();
    if ((v37 & 1) != 0)
    {
      v39 = (uint64_t *)v47;
      swift_beginAccess();
      v38 = *v39;
    }
    else
    {
      v38 = v36;
      v39 = (uint64_t *)v47;
    }
    swift_beginAccess();
    *v39 = v38;
    v58 = 6;
    v40 = sub_24A2164AC();
    v42 = v41;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v13);
    v43 = v46;
    if ((v42 & 1) != 0)
    {
      swift_beginAccess();
      v40 = *v43;
    }
    swift_beginAccess();
    *v43 = v40;
    v44 = v65;

    v45 = (objc_class *)type metadata accessor for FeatureExtractorConfig();
    v57.receiver = v44;
    v57.super_class = v45;
    v9 = objc_msgSendSuper2(&v57, sel_init);
    sub_24A14D184((uint64_t)v56);
  }
  return v9;
}

unint64_t sub_24A19D234()
{
  unint64_t result;

  result = qword_257917770;
  if (!qword_257917770)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C5C4, &type metadata for FeatureExtractorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917770);
  }
  return result;
}

uint64_t sub_24A19D278(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DC78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A19D234();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x88))(v9);
  v18[15] = 0;
  v11 = sub_24A216554();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xA0))(v11);
    v18[14] = 1;
    v12 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xB8))(v12);
    v18[13] = 2;
    v13 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xD0))(v13);
    v18[12] = 3;
    v14 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE8))(v14);
    v18[11] = 4;
    v15 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x100))(v15);
    v18[10] = 5;
    v16 = sub_24A216554();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x118))(v16);
    v18[9] = 6;
    sub_24A216554();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id FeatureExtractorConfig.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for FeatureExtractorConfig);
}

uint64_t sub_24A19D514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 304))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A19D540()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x138))();
}

uint64_t sub_24A19D5BC()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_audioDebug);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19D648(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_audioDebug);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19D690@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x80))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19D6D4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x88))(*a1);
}

uint64_t (*sub_24A19D710())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19D798()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_batchDecode);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19D824(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_batchDecode);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19D86C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x98))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19D8B0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA0))(*a1);
}

uint64_t (*sub_24A19D8EC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19D974()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_preKeywordSilence);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19DA00(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_preKeywordSilence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19DA48@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19DA8C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB8))(*a1);
}

uint64_t (*sub_24A19DAC8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19DB50()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_duringKeywordSilence);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19DBDC(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_duringKeywordSilence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19DC24@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19DC68(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD0))(*a1);
}

uint64_t (*sub_24A19DCA4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19DD2C()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_postKeywordSilence);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19DDB8(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_postKeywordSilence);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19DE00@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19DE44(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE8))(*a1);
}

uint64_t (*sub_24A19DE80())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19DF08()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___RuntimeConfig_secondPass);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_24A19DF94(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR___RuntimeConfig_secondPass);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_24A19DFDC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xF8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_24A19E020(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x100))(*a1);
}

uint64_t (*sub_24A19E05C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19E0A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A19E0D8 + 4 * byte_24A21B810[a1]))(0x6265446F69647561, 0xEA00000000006775);
}

uint64_t sub_24A19E0D8()
{
  return 0x6365446863746162;
}

unint64_t sub_24A19E0F8()
{
  return 0xD000000000000011;
}

unint64_t sub_24A19E114()
{
  return 0xD000000000000014;
}

uint64_t sub_24A19E14C()
{
  return 0x6150646E6F636573;
}

uint64_t sub_24A19E164()
{
  unsigned __int8 *v0;

  return sub_24A19E0A0(*v0);
}

uint64_t sub_24A19E16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3D64(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A19E190(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_24A19E19C()
{
  sub_24A19E740();
  return sub_24A2166A4();
}

uint64_t sub_24A19E1C4()
{
  sub_24A19E740();
  return sub_24A2166B0();
}

uint64_t type metadata accessor for RuntimeConfig()
{
  return objc_opt_self();
}

id RuntimeConfig.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return RuntimeConfig.init(from:)(a1);
}

id RuntimeConfig.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  id v10;
  id v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char *v21;
  char v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v32;
  char *v33;
  char v34;
  char v35;
  _BYTE *v36;
  char *v37;
  char v38;
  id v39;
  objc_class *v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  _BYTE *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  objc_super v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  id v57;

  v49 = sub_24A135F88(&qword_25790DCB8);
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = &v1[OBJC_IVAR___RuntimeConfig_audioDebug];
  v1[OBJC_IVAR___RuntimeConfig_audioDebug] = 0;
  v44 = &v1[OBJC_IVAR___RuntimeConfig_batchDecode];
  v1[OBJC_IVAR___RuntimeConfig_batchDecode] = 0;
  v45 = &v1[OBJC_IVAR___RuntimeConfig_preKeywordSilence];
  v1[OBJC_IVAR___RuntimeConfig_preKeywordSilence] = 1;
  v5 = &v1[OBJC_IVAR___RuntimeConfig_duringKeywordSilence];
  *v5 = 1;
  v42 = &v1[OBJC_IVAR___RuntimeConfig_postKeywordSilence];
  v43 = v5;
  v1[OBJC_IVAR___RuntimeConfig_postKeywordSilence] = 0;
  v6 = &v1[OBJC_IVAR___RuntimeConfig_secondPass];
  v1[OBJC_IVAR___RuntimeConfig_secondPass] = 0;
  v7 = a1[3];
  v50 = a1;
  v8 = sub_24A14B668(a1, v7);
  sub_24A19E740();
  v9 = v1;
  v48 = v4;
  v10 = v8;
  v11 = v57;
  sub_24A216674();
  if (v11)
  {

    sub_24A14D184((uint64_t)v50);
    type metadata accessor for RuntimeConfig();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v13 = v46;
    v12 = v47;
    v41 = v6;
    v57 = v9;
    v56 = 0;
    v14 = v48;
    v15 = v49;
    v16 = sub_24A216494();
    v17 = v14;
    v18 = v15;
    if (v16 == 2)
    {
      swift_beginAccess();
      v19 = v13;
      v20 = *v13;
    }
    else
    {
      v20 = v16 & 1;
      v19 = v13;
    }
    swift_beginAccess();
    *v19 = v20;
    v55 = 1;
    v21 = v17;
    v22 = sub_24A216494();
    if (v22 == 2)
    {
      v23 = v44;
      swift_beginAccess();
      v24 = *v23;
      v25 = v12;
      v26 = v45;
      v27 = v25;
    }
    else
    {
      v24 = v22 & 1;
      v27 = v12;
      v23 = v44;
      v26 = v45;
    }
    swift_beginAccess();
    *v23 = v24;
    v54 = 2;
    v28 = sub_24A216494();
    if (v28 == 2)
    {
      swift_beginAccess();
      v29 = *v26;
    }
    else
    {
      v29 = v28 & 1;
    }
    swift_beginAccess();
    *v26 = v29;
    v53 = 3;
    v30 = sub_24A216494();
    v32 = v27;
    if (v30 == 2)
    {
      v33 = v43;
      swift_beginAccess();
      v34 = *v33;
    }
    else
    {
      v34 = v30 & 1;
      v33 = v43;
    }
    swift_beginAccess();
    *v33 = v34;
    v52 = 4;
    v35 = sub_24A216494();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v18);
    v36 = v41;
    v37 = v42;
    if (v35 == 2)
    {
      swift_beginAccess();
      v38 = *v37;
    }
    else
    {
      v38 = v35 & 1;
    }
    swift_beginAccess();
    *v37 = v38;
    swift_beginAccess();
    *v36 = 0;
    v39 = v57;

    v40 = (objc_class *)type metadata accessor for RuntimeConfig();
    v51.receiver = v39;
    v51.super_class = v40;
    v10 = objc_msgSendSuper2(&v51, sel_init);
    sub_24A14D184((uint64_t)v50);
  }
  return v10;
}

unint64_t sub_24A19E740()
{
  unint64_t result;

  result = qword_257917778;
  if (!qword_257917778)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C574, &type metadata for RuntimeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257917778);
  }
  return result;
}

uint64_t sub_24A19E784(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DCC0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A14B668(a1, a1[3]);
  sub_24A19E740();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x80))(v9);
  v17[15] = 0;
  v11 = sub_24A21653C();
  if (!v2)
  {
    (*(void (**)(uint64_t))((*v10 & *v3) + 0x98))(v11);
    v17[14] = 1;
    v12 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xB0))(v12);
    v17[13] = 2;
    v13 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xC8))(v13);
    v17[12] = 3;
    v14 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xE0))(v14);
    v17[11] = 4;
    v15 = sub_24A21653C();
    (*(void (**)(uint64_t))((*v10 & *v3) + 0xF8))(v15);
    v17[10] = 5;
    sub_24A21653C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_24A19E9F0(void *a1, uint64_t a2, void (*a3)(void), unint64_t *a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  id result;

  v9 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v9);
  sub_24A215624();
  swift_allocObject();
  v10 = a1;
  sub_24A215618();
  a3();
  sub_24A164A60(a4, v11, (uint64_t (*)(uint64_t))a3, a5);
  v12 = sub_24A21560C();
  v14 = v13;
  swift_release();
  sub_24A215CF0();
  sub_24A215CCC();
  if (v15)
  {
    sub_24A135F1C(v12, v14);

    v16 = (void *)sub_24A215C90();
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    __break(1u);
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

id RuntimeConfig.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for RuntimeConfig);
}

uint64_t sub_24A19EB64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 272))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t sub_24A19EB90()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **v0) + 0x118))();
}

uint64_t sub_24A19EBC8()
{
  uint64_t result;

  sub_24A16D544(0, (unint64_t *)&qword_25790C3C0);
  result = OS_os_log.init(category:)();
  qword_25791D798 = result;
  return result;
}

id sub_24A19ECA8()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___VATConfiguration_neuralNetwork);
  swift_beginAccess();
  return *v1;
}

void sub_24A19ECF8(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___VATConfiguration_neuralNetwork);
}

uint64_t sub_24A19ED04(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_24A19ED44())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19EDD0()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___VATConfiguration_featureExtractor);
  swift_beginAccess();
  return *v1;
}

void sub_24A19EE20(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___VATConfiguration_featureExtractor);
}

uint64_t sub_24A19EE2C(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0x98))(*a1);
}

uint64_t (*sub_24A19EE6C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19EEF8()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___VATConfiguration_decoder);
  swift_beginAccess();
  return *v1;
}

void sub_24A19EF48(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___VATConfiguration_decoder);
}

uint64_t sub_24A19EF54(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB0))(*a1);
}

uint64_t (*sub_24A19EF94())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19F020()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___VATConfiguration_secondPass);
  swift_beginAccess();
  return *v1;
}

void sub_24A19F070(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___VATConfiguration_secondPass);
}

uint64_t sub_24A19F07C(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0xC8))(*a1);
}

uint64_t (*sub_24A19F0BC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_24A19F148()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___VATConfiguration_runtime);
  swift_beginAccess();
  return *v1;
}

void sub_24A19F198(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void **v5;
  void *v6;
  id v7;

  v5 = (void **)(a1 + *a4);
  swift_beginAccess();
  v6 = *v5;
  *v5 = a3;
  v7 = a3;

}

void sub_24A19F1F0(void *a1)
{
  sub_24A19F1FC(a1, &OBJC_IVAR___VATConfiguration_runtime);
}

void sub_24A19F1FC(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t sub_24A19F248(id *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(id))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE0))(*a1);
}

uint64_t (*sub_24A19F288())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_24A19F2CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A19F308 + 4 * byte_24A21B816[*v0]))(0x654E6C617275656ELL, 0xED00006B726F7774);
}

unint64_t sub_24A19F308()
{
  return 0xD000000000000010;
}

uint64_t sub_24A19F324()
{
  return 0x7265646F636564;
}

uint64_t sub_24A19F33C()
{
  return 0x6150646E6F636573;
}

uint64_t sub_24A19F358()
{
  return 0x656D69746E7572;
}

uint64_t sub_24A19F370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A3FEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A19F394()
{
  sub_24A19FB34();
  return sub_24A2166A4();
}

uint64_t sub_24A19F3BC()
{
  sub_24A19FB34();
  return sub_24A2166B0();
}

id sub_24A19F3E4()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_super v9;

  v1 = OBJC_IVAR___VATConfiguration_neuralNetwork;
  v2 = objc_allocWithZone((Class)type metadata accessor for NeuralNetworkConfig());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR___VATConfiguration_featureExtractor;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FeatureExtractorConfig()), sel_init);
  v5 = OBJC_IVAR___VATConfiguration_decoder;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DecoderConfig()), sel_init);
  v6 = OBJC_IVAR___VATConfiguration_secondPass;
  *(_QWORD *)&v3[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SecondPassConfig()), sel_init);
  v7 = OBJC_IVAR___VATConfiguration_runtime;
  *(_QWORD *)&v3[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RuntimeConfig()), sel_init);

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for VATConfiguration();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t type metadata accessor for VATConfiguration()
{
  return objc_opt_self();
}

id VATConfiguration.__allocating_init(from:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return VATConfiguration.init(from:)(a1);
}

id VATConfiguration.init(from:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  id *v4;
  id v5;
  char *v6;
  id v7;
  id *v8;
  id v9;
  id *v10;
  objc_class *v11;
  id v12;
  id *v13;
  objc_class *v14;
  id v15;
  id *v16;
  objc_class *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  id *v26;
  char *v27;
  id *v28;
  id *v29;
  id *v30;
  id v31;
  id v33;
  id *v34;
  id v35;
  uint64_t v36;
  id *v37;
  id v38;
  id *v39;
  id v40;
  uint64_t v41;
  id *v42;
  id v43;
  uint64_t v44;
  id *v45;
  id v46;
  uint64_t v47;
  id v48;
  char *v49;
  id v50;
  objc_class *v51;
  _QWORD v52[3];
  uint64_t v53;
  Class v54;
  Class v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id *v59;
  id *v60;
  id *v61;
  char *v62;
  objc_class *v63;
  id *v64;
  objc_super v65;
  void *v66;
  char v67;
  objc_class *v68;
  char v69;
  objc_class *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  id *v76;

  v56 = sub_24A135F88(&qword_25790DCF8);
  v53 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v62 = (char *)v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (id *)&v1[OBJC_IVAR___VATConfiguration_neuralNetwork];
  v55 = (Class)type metadata accessor for NeuralNetworkConfig();
  v5 = objc_allocWithZone(v55);
  v6 = v1;
  v7 = objc_msgSend(v5, sel_init);
  v61 = v4;
  *v4 = v7;
  v8 = (id *)&v6[OBJC_IVAR___VATConfiguration_featureExtractor];
  v54 = (Class)type metadata accessor for FeatureExtractorConfig();
  v9 = objc_msgSend(objc_allocWithZone(v54), sel_init);
  v59 = v8;
  *v8 = v9;
  v10 = (id *)&v6[OBJC_IVAR___VATConfiguration_decoder];
  v11 = (objc_class *)type metadata accessor for DecoderConfig();
  v12 = objc_msgSend(objc_allocWithZone(v11), sel_init);
  v76 = v10;
  *v10 = v12;
  v13 = (id *)&v6[OBJC_IVAR___VATConfiguration_secondPass];
  v14 = (objc_class *)type metadata accessor for SecondPassConfig();
  v15 = objc_msgSend(objc_allocWithZone(v14), sel_init);
  v64 = v13;
  *v13 = v15;
  v57 = v6;
  v16 = (id *)&v6[OBJC_IVAR___VATConfiguration_runtime];
  v17 = (objc_class *)type metadata accessor for RuntimeConfig();
  v18 = objc_msgSend(objc_allocWithZone(v17), sel_init);
  v60 = v16;
  *v16 = v18;
  v19 = *(_QWORD *)(a1 + 24);
  v58 = a1;
  v20 = (_QWORD *)a1;
  v21 = v62;
  sub_24A14B668(v20, v19);
  sub_24A19FB34();
  v22 = v63;
  sub_24A216674();
  if (v22)
  {
    v25 = v60;
    v26 = v61;
    v27 = v57;
    v28 = v59;
    v29 = v76;
    v30 = v64;
    sub_24A14D184(v58);

    v31 = *v25;
    type metadata accessor for VATConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v63 = v11;
    v52[1] = v17;
    v52[2] = v14;
    v75 = 0;
    sub_24A164A60(&qword_25790DD00, v23, (uint64_t (*)(uint64_t))type metadata accessor for NeuralNetworkConfig, (uint64_t)&protocol conformance descriptor for NeuralNetworkConfig);
    v24 = v56;
    sub_24A2164B8();
    v33 = v74;
    v34 = v61;
    if (!v74)
    {
      swift_beginAccess();
      v33 = *v34;
    }
    swift_beginAccess();
    v35 = *v34;
    *v34 = v33;

    v73 = 1;
    sub_24A164A60(&qword_25790DD08, v36, (uint64_t (*)(uint64_t))type metadata accessor for FeatureExtractorConfig, (uint64_t)&protocol conformance descriptor for FeatureExtractorConfig);
    sub_24A2164B8();
    v37 = v60;
    v38 = v72;
    v39 = v59;
    if (!v72)
    {
      swift_beginAccess();
      v38 = *v39;
    }
    swift_beginAccess();
    v40 = *v39;
    *v39 = v38;

    v71 = 2;
    sub_24A164A60(&qword_25790DD10, v41, (uint64_t (*)(uint64_t))type metadata accessor for DecoderConfig, (uint64_t)&protocol conformance descriptor for DecoderConfig);
    sub_24A2164B8();
    v63 = v70;
    v42 = v76;
    if (!v70)
    {
      swift_beginAccess();
      v63 = (objc_class *)*v42;
    }
    swift_beginAccess();
    v43 = *v42;
    *v42 = v63;

    v69 = 3;
    sub_24A164A60(&qword_25790DD18, v44, (uint64_t (*)(uint64_t))type metadata accessor for SecondPassConfig, (uint64_t)&protocol conformance descriptor for SecondPassConfig);
    sub_24A2164B8();
    v63 = v68;
    v45 = v64;
    if (!v68)
    {
      swift_beginAccess();
      v63 = (objc_class *)*v45;
    }
    swift_beginAccess();
    v46 = *v45;
    *v45 = v63;

    v67 = 4;
    sub_24A164A60(&qword_25790DD20, v47, (uint64_t (*)(uint64_t))type metadata accessor for RuntimeConfig, (uint64_t)&protocol conformance descriptor for RuntimeConfig);
    sub_24A2164B8();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v24);
    v48 = v66;
    if (!v66)
    {
      swift_beginAccess();
      v48 = *v37;
    }
    v49 = v57;
    swift_beginAccess();
    v50 = *v37;
    *v37 = v48;

    v51 = (objc_class *)type metadata accessor for VATConfiguration();
    v65.receiver = v49;
    v65.super_class = v51;
    v31 = objc_msgSendSuper2(&v65, sel_init);
    sub_24A14D184(v58);
  }
  return v31;
}

unint64_t sub_24A19FB34()
{
  unint64_t result;

  result = qword_257917780[0];
  if (!qword_257917780[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C524, &type metadata for VATConfiguration.CodingKeys);
    atomic_store(result, qword_257917780);
  }
  return result;
}

uint64_t sub_24A19FB78(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790DD28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A19FB34();
  v9 = sub_24A21668C();
  v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v3) + 0x78))(v9);
  v23 = v11;
  HIBYTE(v22) = 0;
  type metadata accessor for NeuralNetworkConfig();
  sub_24A164A60(&qword_25790DC30, v12, (uint64_t (*)(uint64_t))type metadata accessor for NeuralNetworkConfig, (uint64_t)&protocol conformance descriptor for NeuralNetworkConfig);
  sub_24A216560();
  if (v2)
  {

  }
  else
  {

    v13 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0x90))();
    v23 = v13;
    HIBYTE(v22) = 1;
    type metadata accessor for FeatureExtractorConfig();
    sub_24A164A60(&qword_25790DC80, v14, (uint64_t (*)(uint64_t))type metadata accessor for FeatureExtractorConfig, (uint64_t)&protocol conformance descriptor for FeatureExtractorConfig);
    sub_24A216560();

    v16 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xA8))();
    v23 = v16;
    HIBYTE(v22) = 2;
    type metadata accessor for DecoderConfig();
    sub_24A164A60(&qword_25790DC00, v17, (uint64_t (*)(uint64_t))type metadata accessor for DecoderConfig, (uint64_t)&protocol conformance descriptor for DecoderConfig);
    sub_24A216560();

    v18 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xC0))();
    v23 = v18;
    HIBYTE(v22) = 3;
    type metadata accessor for SecondPassConfig();
    sub_24A164A60(&qword_25790DAE8, v19, (uint64_t (*)(uint64_t))type metadata accessor for SecondPassConfig, (uint64_t)&protocol conformance descriptor for SecondPassConfig);
    sub_24A216560();

    v20 = (void *)(*(uint64_t (**)(void))((*v10 & *v3) + 0xD8))();
    v23 = v20;
    HIBYTE(v22) = 4;
    type metadata accessor for RuntimeConfig();
    sub_24A164A60(&qword_25790DCC8, v21, (uint64_t (*)(uint64_t))type metadata accessor for RuntimeConfig, (uint64_t)&protocol conformance descriptor for RuntimeConfig);
    sub_24A216560();

  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id VATConfiguration.__allocating_init(filename:)(uint64_t a1, unint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return VATConfiguration.init(filename:)(a1, a2);
}

id VATConfiguration.init(filename:)(uint64_t a1, unint64_t a2)
{
  char *v2;
  id *v5;
  id v6;
  char *v7;
  id *v8;
  id *v9;
  id *v10;
  void **v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  void **v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  char *v51;
  id *v52;
  id *v53;
  objc_class *v54;
  objc_class *v55;
  objc_class *v56;
  objc_class *v57;
  objc_class *v58;
  uint64_t v59;
  objc_super v60;
  objc_super v61;
  void **v62;

  v5 = (id *)&v2[OBJC_IVAR___VATConfiguration_neuralNetwork];
  v54 = (objc_class *)type metadata accessor for NeuralNetworkConfig();
  v6 = objc_allocWithZone(v54);
  v7 = v2;
  *v5 = objc_msgSend(v6, sel_init);
  v8 = (id *)&v7[OBJC_IVAR___VATConfiguration_featureExtractor];
  v55 = (objc_class *)type metadata accessor for FeatureExtractorConfig();
  *v8 = objc_msgSend(objc_allocWithZone(v55), sel_init);
  v9 = (id *)&v7[OBJC_IVAR___VATConfiguration_decoder];
  v56 = (objc_class *)type metadata accessor for DecoderConfig();
  *v9 = objc_msgSend(objc_allocWithZone(v56), sel_init);
  v10 = (id *)&v7[OBJC_IVAR___VATConfiguration_secondPass];
  v57 = (objc_class *)type metadata accessor for SecondPassConfig();
  *v10 = objc_msgSend(objc_allocWithZone(v57), sel_init);
  v11 = (void **)&v7[OBJC_IVAR___VATConfiguration_runtime];
  v58 = (objc_class *)type metadata accessor for RuntimeConfig();
  *v11 = objc_msgSend(objc_allocWithZone(v58), sel_init);
  v59 = a1;
  v12 = sub_24A1A05B8(a1, a2);
  v13 = (_QWORD *)v12;
  if ((v14 & 1) == 0)
  {
    v15 = swift_bridgeObjectRelease();
    v16 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v17 = v11;
    v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v13) + 0x78))(v15);
    swift_beginAccess();
    v19 = *v5;
    *v5 = (id)v18;

    v20 = (*(uint64_t (**)(void))((*v16 & *v13) + 0x90))();
    swift_beginAccess();
    v21 = *v8;
    *v8 = (id)v20;

    v22 = (*(uint64_t (**)(void))((*v16 & *v13) + 0xA8))();
    swift_beginAccess();
    v23 = *v9;
    *v9 = (id)v22;

    v24 = (*(uint64_t (**)(void))((*v16 & *v13) + 0xC0))();
    swift_beginAccess();
    v25 = *v10;
    *v10 = (id)v24;

    v26 = (*(uint64_t (**)(void))((*v16 & *v13) + 0xD8))();
    swift_beginAccess();
    v27 = *v17;
    *v17 = (void *)v26;

    v60.receiver = v7;
    v60.super_class = (Class)type metadata accessor for VATConfiguration();
    v28 = objc_msgSendSuper2(&v60, sel_init);
    sub_24A1A098C((unint64_t)v13, 0);
    return v28;
  }
  v51 = v7;
  v52 = v9;
  v53 = v10;
  if (v12 != 0x8000000000000000)
  {
    v62 = v11;
    if (qword_257917730 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_24A218660;
    *(_QWORD *)(v30 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v30 + 64) = sub_24A182DD4();
    v31 = 0x3E6C696E3CLL;
    if (a2)
      v31 = v59;
    v32 = 0xE500000000000000;
    if (a2)
      v32 = a2;
    *(_QWORD *)(v30 + 32) = v31;
    *(_QWORD *)(v30 + 40) = v32;
    sub_24A14D2EC();
    v33 = (void *)swift_allocError();
    *v34 = v13;
    sub_24A1A0970((unint64_t)v13);
    v35 = sub_24A2156E4();
    *(_QWORD *)(v30 + 96) = sub_24A16D544(0, &qword_25790C368);
    *(_QWORD *)(v30 + 104) = sub_24A182E18();
    *(_QWORD *)(v30 + 72) = v35;

    OS_os_log.error(_:_:)((uint64_t)"Error parsing %@: %@", 20, 2, v30);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (a2)
  {
    v62 = v11;
    if (qword_257917730 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_24A218650;
    *(_QWORD *)(v29 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v29 + 64) = sub_24A182DD4();
    *(_QWORD *)(v29 + 32) = v59;
    *(_QWORD *)(v29 + 40) = a2;
    OS_os_log.error(_:_:)((uint64_t)"Custom config file not found, using defaults: %@", 48, 2, v29);
    swift_bridgeObjectRelease();
    v13 = (_QWORD *)0x8000000000000000;
    sub_24A14D2EC();
LABEL_15:
    v28 = v51;
    swift_allocError();
    *v36 = v13;
    swift_willThrow();

    v37 = *v62;
    type metadata accessor for VATConfiguration();
    swift_deallocPartialClassInstance();
    return v28;
  }
  v39 = v11;
  if (qword_257917730 != -1)
    swift_once();
  sub_24A135F88(qword_25790AEF0);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_24A218650;
  *(_QWORD *)(v40 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v40 + 64) = sub_24A182DD4();
  *(_QWORD *)(v40 + 32) = 0x3E6C696E3CLL;
  *(_QWORD *)(v40 + 40) = 0xE500000000000000;
  OS_os_log.error(_:_:)((uint64_t)"Default Config file not found, using defaults: %@", 49, 2, v40);
  swift_bridgeObjectRelease();
  v41 = objc_msgSend(objc_allocWithZone(v54), sel_init);
  swift_beginAccess();
  v42 = *v5;
  *v5 = v41;

  v43 = objc_msgSend(objc_allocWithZone(v55), sel_init);
  swift_beginAccess();
  v44 = *v8;
  *v8 = v43;

  v45 = objc_msgSend(objc_allocWithZone(v56), sel_init);
  swift_beginAccess();
  v46 = *v9;
  *v9 = v45;

  v47 = objc_msgSend(objc_allocWithZone(v57), sel_init);
  swift_beginAccess();
  v48 = *v10;
  *v10 = v47;

  v49 = objc_msgSend(objc_allocWithZone(v58), sel_init);
  swift_beginAccess();
  v50 = *v39;
  *v39 = v49;

  v61.receiver = v51;
  v61.super_class = (Class)type metadata accessor for VATConfiguration();
  return objc_msgSendSuper2(&v61, sel_init);
}

unint64_t sub_24A1A05B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v26[4];

  v4 = sub_24A215750();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v26 - v9;
  type metadata accessor for VATConfiguration();
  if (!a2)
    goto LABEL_7;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
LABEL_7:
    v15 = (void *)sub_24A215C90();
    v16 = objc_msgSend(v15, sel_stringByDeletingPathExtension);

    sub_24A215CB4();
    sub_24A215714();
    sub_24A215708();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_24A17E2D0();
    v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18)
    {
      sub_24A215714();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    if (qword_257917730 != -1)
      swift_once();
    sub_24A135F88(qword_25790AEF0);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_24A218650;
    *(_QWORD *)(v19 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v19 + 64) = sub_24A182DD4();
    *(_QWORD *)(v19 + 32) = 0x6A2E6769666E6F63;
    *(_QWORD *)(v19 + 40) = 0xEB000000006E6F73;
    OS_os_log.error(_:_:)((uint64_t)"File not found: %@", 18, 2, v19);
    swift_bridgeObjectRelease();
    return 0x8000000000000000;
  }
  v12 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v13 = (void *)sub_24A215C90();
  v14 = objc_msgSend(v12, sel_isReadableFileAtPath_, v13);

  if ((v14 & 1) == 0)
    return 0x8000000000000000;
  sub_24A215714();
LABEL_9:
  v20 = sub_24A21575C();
  v22 = v21;
  sub_24A2155D0();
  swift_allocObject();
  sub_24A135EC4(v20, v22);
  sub_24A2155C4();
  sub_24A164A60(&qword_25790DEC8, v23, (uint64_t (*)(uint64_t))type metadata accessor for VATConfiguration, (uint64_t)&protocol conformance descriptor for VATConfiguration);
  sub_24A2155B8();
  swift_release();
  sub_24A135F1C(v20, v22);
  sub_24A135F1C(v20, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v26[2];
}

unint64_t sub_24A1A0970(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

void sub_24A1A098C(unint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    sub_24A1649F8(a1);
  else

}

void sub_24A1A0A24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2) + 0x78);
  v7 = (_QWORD *)v6();
  (*(void (**)(void))((*v5 & *v7) + 0x68))();

  v8 = (_QWORD *)v6();
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRetain();
  sub_24A215D98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))((*v5 & *v8) + 0x70))(a1, a2);

}

uint64_t sub_24A1A0C98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_24A215624();
  swift_allocObject();
  sub_24A215618();
  type metadata accessor for VATConfiguration();
  sub_24A164A60(&qword_25790DD30, v0, (uint64_t (*)(uint64_t))type metadata accessor for VATConfiguration, (uint64_t)&protocol conformance descriptor for VATConfiguration);
  v1 = sub_24A21560C();
  v3 = v2;
  swift_release();
  v4 = sub_24A1A0DA4();
  if (v5)
  {
    v6 = v4;
    sub_24A135F1C(v1, v3);
  }
  else
  {
    sub_24A135F1C(v1, v3);
    return 0x3E6C696E3CLL;
  }
  return v6;
}

uint64_t sub_24A1A0DA4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v0 = sub_24A215CFC();
  MEMORY[0x24BDAC7A8](v0);
  v1 = (void *)objc_opt_self();
  v2 = (void *)sub_24A215768();
  *(_QWORD *)&v20 = 0;
  v3 = objc_msgSend(v1, sel_JSONObjectWithData_options_error_, v2, 0, &v20);

  v4 = (id)v20;
  if (!v3)
  {
    v15 = v4;
    v16 = (void *)sub_24A2156F0();

    swift_willThrow();
    return 0;
  }
  sub_24A2162CC();
  swift_unknownObjectRelease();
  sub_24A170EFC(v19, &v20);
  sub_24A14B668(&v20, v21);
  v5 = sub_24A216590();
  *(_QWORD *)&v19[0] = 0;
  v6 = objc_msgSend(v1, sel_dataWithJSONObject_options_error_, v5, 9, v19);
  swift_unknownObjectRelease();
  v7 = *(id *)&v19[0];
  if (!v6)
  {
    v17 = v7;
    v18 = (void *)sub_24A2156F0();

    swift_willThrow();
    sub_24A14D184((uint64_t)&v20);
    return 0;
  }
  v8 = sub_24A215774();
  v10 = v9;

  sub_24A215CF0();
  v11 = sub_24A215CCC();
  v13 = v12;
  sub_24A135F1C(v8, v10);
  sub_24A14D184((uint64_t)&v20);
  if (v13)
    return v11;
  else
    return 0;
}

id VATConfiguration.__deallocating_deinit()
{
  return sub_24A1736C0(type metadata accessor for VATConfiguration);
}

uint64_t _s14JSONParseErrorOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_24A1A4230(a1, a2, a3, a4, (uint64_t)&_s14JSONParseErrorOMn);
}

unint64_t *initializeBufferWithCopyOfBuffer for JSONParseError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_24A1A0970(*a2);
  *a1 = v3;
  return a1;
}

void destroy for JSONParseError(unint64_t *a1)
{
  sub_24A1649F8(*a1);
}

unint64_t *assignWithCopy for JSONParseError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_24A1A0970(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_24A1649F8(v4);
  return a1;
}

unint64_t *assignWithTake for JSONParseError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_24A1649F8(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONParseError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JSONParseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_24A1A1184(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *sub_24A1A11A0(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_24A1A11B0(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for JSONParseError()
{
  return &type metadata for JSONParseError;
}

uint64_t method lookup function for SecondPassConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SecondPassConfig.waitForFinal.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SecondPassConfig.waitForFinal.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t method lookup function for PreKeywordSilence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PreKeywordSilence.lookbackFrames.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PreKeywordSilence.lookbackFrames.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PreKeywordSilence.lookbackFrames.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PreKeywordSilence.minSilenceInLookbackFrames.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PreKeywordSilence.minSilenceInLookbackFrames.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PreKeywordSilence.silenceProbability.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PreKeywordSilence.silenceProbability.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PreKeywordSilence.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PreKeywordSilence.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t method lookup function for DuringKeywordSilence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DuringKeywordSilence.minPercentageOfNonSilenceFrames.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of DuringKeywordSilence.minPercentageOfNonSilenceFrames.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of DuringKeywordSilence.silenceProbability.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of DuringKeywordSilence.silenceProbability.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t method lookup function for PostKeywordSilence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PostKeywordSilence.lookForwardFrames.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PostKeywordSilence.lookForwardFrames.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PostKeywordSilence.lookForwardFrames.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFramesExpected.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFramesExpected.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFramesExpected.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PostKeywordSilence.silenceProbability.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PostKeywordSilence.silenceProbability.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of PostKeywordSilence.silenceProbability.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFrameCountAtEndOfKeyword.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFrameCountAtEndOfKeyword.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PostKeywordSilence.minSilenceFrameCountAtEndOfKeyword.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PostKeywordSilence.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PostKeywordSilence.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t method lookup function for AudioCapture()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioCapture.leftOfStartFrameOffset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AudioCapture.leftOfStartFrameOffset.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of AudioCapture.leftOfStartFrameOffset.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of AudioCapture.rightOfEndFrameOffset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of AudioCapture.rightOfEndFrameOffset.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of AudioCapture.rightOfEndFrameOffset.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AudioCapture.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AudioCapture.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t method lookup function for DecoderConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DecoderConfig.useChecker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of DecoderConfig.useChecker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of DecoderConfig.preKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of DecoderConfig.preKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of DecoderConfig.preKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of DecoderConfig.duringKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of DecoderConfig.duringKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of DecoderConfig.duringKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of DecoderConfig.postKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of DecoderConfig.postKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of DecoderConfig.postKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of DecoderConfig.audioCapture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of DecoderConfig.audioCapture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of DecoderConfig.audioCapture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of DecoderConfig.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of DecoderConfig.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t method lookup function for NeuralNetworkConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NeuralNetworkConfig.modelPath.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of NeuralNetworkConfig.modelPath.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of NeuralNetworkConfig.logThreshold.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of NeuralNetworkConfig.logThreshold.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t method lookup function for FeatureExtractorConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureExtractorConfig.cmvnMinWindowLength.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.cmvnMinWindowLength.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.spliceRightContext.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.spliceRightContext.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.spliceRightContext.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.downSampleStride.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.downSampleStride.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.downSampleStride.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetIntakeFeatureLength.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetIntakeFeatureLength.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetIntakeFeatureLength.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetVectorSize.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetVectorSize.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.nnetVectorSize.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of FeatureExtractorConfig.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t method lookup function for RuntimeConfig()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RuntimeConfig.audioDebug.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of RuntimeConfig.audioDebug.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of RuntimeConfig.audioDebug.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of RuntimeConfig.batchDecode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of RuntimeConfig.batchDecode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of RuntimeConfig.batchDecode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of RuntimeConfig.preKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of RuntimeConfig.preKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of RuntimeConfig.preKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of RuntimeConfig.duringKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of RuntimeConfig.duringKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of RuntimeConfig.duringKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of RuntimeConfig.postKeywordSilence.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of RuntimeConfig.postKeywordSilence.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of RuntimeConfig.postKeywordSilence.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of RuntimeConfig.secondPass.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of RuntimeConfig.secondPass.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of RuntimeConfig.secondPass.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of RuntimeConfig.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of RuntimeConfig.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t method lookup function for VATConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VATConfiguration.__allocating_init(filename:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of VATConfiguration._replaceModelPathWithCustomModelPathForTest(prefix:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t sub_24A1A1D0C()
{
  return swift_allocateGenericValueMetadata();
}

void sub_24A1A1D14(uint64_t a1)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 64);
  while (2)
  {
    switch(v2)
    {
      case 0:
        swift_bridgeObjectRelease();
        break;
      case 1:
      case 2:

        break;
      case 3:
        sub_24A14D184(a1);
        sub_24A14D184(a1 + 32);
        break;
      default:
        v2 = *(_DWORD *)a1 + 4;
        continue;
    }
    break;
  }
}

uint64_t sub_24A1A1D90(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v4 = *((unsigned __int8 *)a2 + 64);
  while (2)
  {
    switch(v4)
    {
      case 0:
        v5 = a2[1];
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v5;
        *(_BYTE *)(a1 + 64) = 0;
        swift_bridgeObjectRetain();
        return a1;
      case 1:
        v11 = *a2;
        v12 = (id)*a2;
        *(_QWORD *)a1 = v11;
        v8 = 1;
        goto LABEL_8;
      case 2:
        v6 = *a2;
        v7 = (id)*a2;
        *(_QWORD *)a1 = v6;
        v8 = 2;
        goto LABEL_8;
      case 3:
        v9 = a2[3];
        *(_QWORD *)(a1 + 24) = v9;
        (**(void (***)(uint64_t, uint64_t *))(v9 - 8))(a1, a2);
        v10 = a2[7];
        *(_QWORD *)(a1 + 56) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, (uint64_t)(a2 + 4));
        v8 = 3;
LABEL_8:
        *(_BYTE *)(a1 + 64) = v8;
        return a1;
      default:
        v4 = *(_DWORD *)a2 + 4;
        continue;
    }
  }
}

uint64_t sub_24A1A1E68(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  void *v6;
  id v7;
  char v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
          swift_bridgeObjectRelease();
          break;
        case 1:
        case 2:

          break;
        case 3:
          sub_24A14D184(a1);
          sub_24A14D184(a1 + 32);
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 64) = 0;
          swift_bridgeObjectRetain();
          return a1;
        case 1:
          v6 = *(void **)a2;
          v7 = v6;
          *(_QWORD *)a1 = v6;
          v8 = 1;
          goto LABEL_15;
        case 2:
          v9 = *(void **)a2;
          v10 = v9;
          *(_QWORD *)a1 = v9;
          v8 = 2;
          goto LABEL_15;
        case 3:
          v11 = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 24) = v11;
          (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
          v12 = *(_QWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 56) = v12;
          (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 32, a2 + 32);
          v8 = 3;
LABEL_15:
          *(_BYTE *)(a1 + 64) = v8;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 sub_24A1A1FA8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_24A1A1FCC(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char v6;
  __int128 v7;
  __int128 v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    while (2)
    {
      switch(v4)
      {
        case 0:
          swift_bridgeObjectRelease();
          break;
        case 1:
        case 2:

          break;
        case 3:
          sub_24A14D184(a1);
          sub_24A14D184(a1 + 32);
          break;
        default:
          v4 = *(_DWORD *)a1 + 4;
          continue;
      }
      break;
    }
    v5 = *(unsigned __int8 *)(a2 + 64);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 1;
          break;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v6 = 2;
          break;
        case 3:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          v8 = *(_OWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 48) = v8;
          v6 = 3;
          break;
        default:
          v5 = *(_DWORD *)a2 + 4;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t sub_24A1A20C8(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 4)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_24A1A2104(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_24A1A2154(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 4)
    return (*(_DWORD *)a1 + 4);
  return result;
}

uint64_t sub_24A1A2170(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VATConfiguration.CodingKeys()
{
  return &type metadata for VATConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RuntimeConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24A1A21FC + 4 * byte_24A21B838[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24A1A2230 + 4 * byte_24A21B833[v4]))();
}

uint64_t sub_24A1A2230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A2240);
  return result;
}

uint64_t sub_24A1A224C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A2254);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24A1A2258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RuntimeConfig.CodingKeys()
{
  return &type metadata for RuntimeConfig.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FeatureExtractorConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureExtractorConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24A1A2358 + 4 * byte_24A21B842[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24A1A238C + 4 * byte_24A21B83D[v4]))();
}

uint64_t sub_24A1A238C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2394(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A239CLL);
  return result;
}

uint64_t sub_24A1A23A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A23B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24A1A23B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A23BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureExtractorConfig.CodingKeys()
{
  return &type metadata for FeatureExtractorConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for NeuralNetworkConfig.CodingKeys()
{
  return &type metadata for NeuralNetworkConfig.CodingKeys;
}

uint64_t _s12VoiceActions16VATConfigurationC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24A1A243C + 4 * byte_24A21B84C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24A1A2470 + 4 * byte_24A21B847[v4]))();
}

uint64_t sub_24A1A2470(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2478(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A2480);
  return result;
}

uint64_t sub_24A1A248C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A2494);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24A1A2498(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A24A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DecoderConfig.CodingKeys()
{
  return &type metadata for DecoderConfig.CodingKeys;
}

_BYTE *sub_24A1A24C4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AudioCapture.CodingKeys()
{
  return &type metadata for AudioCapture.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PostKeywordSilence.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24A1A252C + 4 * byte_24A21B856[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24A1A2560 + 4 * byte_24A21B851[v4]))();
}

uint64_t sub_24A1A2560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A2570);
  return result;
}

uint64_t sub_24A1A257C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A2584);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24A1A2588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PostKeywordSilence.CodingKeys()
{
  return &type metadata for PostKeywordSilence.CodingKeys;
}

ValueMetadata *type metadata accessor for DuringKeywordSilence.CodingKeys()
{
  return &type metadata for DuringKeywordSilence.CodingKeys;
}

uint64_t _s12VoiceActions19NeuralNetworkConfigC10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12VoiceActions19NeuralNetworkConfigC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24A1A2698 + 4 * byte_24A21B860[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24A1A26CC + 4 * byte_24A21B85B[v4]))();
}

uint64_t sub_24A1A26CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A26D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A26DCLL);
  return result;
}

uint64_t sub_24A1A26E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A26F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24A1A26F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A26FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreKeywordSilence.CodingKeys()
{
  return &type metadata for PreKeywordSilence.CodingKeys;
}

uint64_t getEnumTagSinglePayload for VAComputeUnits(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s12VoiceActions12AudioCaptureC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A1A27F4 + 4 * byte_24A21B86A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A1A2828 + 4 * byte_24A21B865[v4]))();
}

uint64_t sub_24A1A2828(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2830(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A2838);
  return result;
}

uint64_t sub_24A1A2844(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A284CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A1A2850(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A2858(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecondPassConfig.CodingKeys()
{
  return &type metadata for SecondPassConfig.CodingKeys;
}

unint64_t sub_24A1A2878()
{
  unint64_t result;

  result = qword_257918410[0];
  if (!qword_257918410[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BE84, &type metadata for SecondPassConfig.CodingKeys);
    atomic_store(result, qword_257918410);
  }
  return result;
}

unint64_t sub_24A1A28C0()
{
  unint64_t result;

  result = qword_257918620[0];
  if (!qword_257918620[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BF3C, &type metadata for PreKeywordSilence.CodingKeys);
    atomic_store(result, qword_257918620);
  }
  return result;
}

unint64_t sub_24A1A2908()
{
  unint64_t result;

  result = qword_257918830[0];
  if (!qword_257918830[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BFF4, &type metadata for DuringKeywordSilence.CodingKeys);
    atomic_store(result, qword_257918830);
  }
  return result;
}

unint64_t sub_24A1A2950()
{
  unint64_t result;

  result = qword_257918A40[0];
  if (!qword_257918A40[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C0AC, &type metadata for PostKeywordSilence.CodingKeys);
    atomic_store(result, qword_257918A40);
  }
  return result;
}

unint64_t sub_24A1A2998()
{
  unint64_t result;

  result = qword_257918C50[0];
  if (!qword_257918C50[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C164, &type metadata for AudioCapture.CodingKeys);
    atomic_store(result, qword_257918C50);
  }
  return result;
}

unint64_t sub_24A1A29E0()
{
  unint64_t result;

  result = qword_257918E60[0];
  if (!qword_257918E60[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C21C, &type metadata for DecoderConfig.CodingKeys);
    atomic_store(result, qword_257918E60);
  }
  return result;
}

unint64_t sub_24A1A2A28()
{
  unint64_t result;

  result = qword_257919070[0];
  if (!qword_257919070[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C2D4, &type metadata for NeuralNetworkConfig.CodingKeys);
    atomic_store(result, qword_257919070);
  }
  return result;
}

unint64_t sub_24A1A2A70()
{
  unint64_t result;

  result = qword_257919280[0];
  if (!qword_257919280[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C38C, &type metadata for FeatureExtractorConfig.CodingKeys);
    atomic_store(result, qword_257919280);
  }
  return result;
}

unint64_t sub_24A1A2AB8()
{
  unint64_t result;

  result = qword_257919490[0];
  if (!qword_257919490[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C444, &type metadata for RuntimeConfig.CodingKeys);
    atomic_store(result, qword_257919490);
  }
  return result;
}

unint64_t sub_24A1A2B00()
{
  unint64_t result;

  result = qword_2579196A0[0];
  if (!qword_2579196A0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C4FC, &type metadata for VATConfiguration.CodingKeys);
    atomic_store(result, qword_2579196A0);
  }
  return result;
}

unint64_t sub_24A1A2B48()
{
  unint64_t result;

  result = qword_2579197B0;
  if (!qword_2579197B0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C46C, &type metadata for VATConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579197B0);
  }
  return result;
}

unint64_t sub_24A1A2B90()
{
  unint64_t result;

  result = qword_2579197B8[0];
  if (!qword_2579197B8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C494, &type metadata for VATConfiguration.CodingKeys);
    atomic_store(result, qword_2579197B8);
  }
  return result;
}

unint64_t sub_24A1A2BD8()
{
  unint64_t result;

  result = qword_257919840;
  if (!qword_257919840)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C3B4, &type metadata for RuntimeConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919840);
  }
  return result;
}

unint64_t sub_24A1A2C20()
{
  unint64_t result;

  result = qword_257919848[0];
  if (!qword_257919848[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C3DC, &type metadata for RuntimeConfig.CodingKeys);
    atomic_store(result, qword_257919848);
  }
  return result;
}

unint64_t sub_24A1A2C68()
{
  unint64_t result;

  result = qword_2579198D0;
  if (!qword_2579198D0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C2FC, &type metadata for FeatureExtractorConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579198D0);
  }
  return result;
}

unint64_t sub_24A1A2CB0()
{
  unint64_t result;

  result = qword_2579198D8[0];
  if (!qword_2579198D8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C324, &type metadata for FeatureExtractorConfig.CodingKeys);
    atomic_store(result, qword_2579198D8);
  }
  return result;
}

unint64_t sub_24A1A2CF8()
{
  unint64_t result;

  result = qword_257919960;
  if (!qword_257919960)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C244, &type metadata for NeuralNetworkConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919960);
  }
  return result;
}

unint64_t sub_24A1A2D40()
{
  unint64_t result;

  result = qword_257919968[0];
  if (!qword_257919968[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C26C, &type metadata for NeuralNetworkConfig.CodingKeys);
    atomic_store(result, qword_257919968);
  }
  return result;
}

unint64_t sub_24A1A2D88()
{
  unint64_t result;

  result = qword_2579199F0;
  if (!qword_2579199F0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C18C, &type metadata for DecoderConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2579199F0);
  }
  return result;
}

unint64_t sub_24A1A2DD0()
{
  unint64_t result;

  result = qword_2579199F8[0];
  if (!qword_2579199F8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C1B4, &type metadata for DecoderConfig.CodingKeys);
    atomic_store(result, qword_2579199F8);
  }
  return result;
}

unint64_t sub_24A1A2E18()
{
  unint64_t result;

  result = qword_257919A80;
  if (!qword_257919A80)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C0D4, &type metadata for AudioCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919A80);
  }
  return result;
}

unint64_t sub_24A1A2E60()
{
  unint64_t result;

  result = qword_257919A88[0];
  if (!qword_257919A88[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C0FC, &type metadata for AudioCapture.CodingKeys);
    atomic_store(result, qword_257919A88);
  }
  return result;
}

unint64_t sub_24A1A2EA8()
{
  unint64_t result;

  result = qword_257919B10;
  if (!qword_257919B10)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C01C, &type metadata for PostKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919B10);
  }
  return result;
}

unint64_t sub_24A1A2EF0()
{
  unint64_t result;

  result = qword_257919B18[0];
  if (!qword_257919B18[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21C044, &type metadata for PostKeywordSilence.CodingKeys);
    atomic_store(result, qword_257919B18);
  }
  return result;
}

unint64_t sub_24A1A2F38()
{
  unint64_t result;

  result = qword_257919BA0;
  if (!qword_257919BA0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BF64, &type metadata for DuringKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919BA0);
  }
  return result;
}

unint64_t sub_24A1A2F80()
{
  unint64_t result;

  result = qword_257919BA8[0];
  if (!qword_257919BA8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BF8C, &type metadata for DuringKeywordSilence.CodingKeys);
    atomic_store(result, qword_257919BA8);
  }
  return result;
}

unint64_t sub_24A1A2FC8()
{
  unint64_t result;

  result = qword_257919C30;
  if (!qword_257919C30)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BEAC, &type metadata for PreKeywordSilence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919C30);
  }
  return result;
}

unint64_t sub_24A1A3010()
{
  unint64_t result;

  result = qword_257919C38[0];
  if (!qword_257919C38[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BED4, &type metadata for PreKeywordSilence.CodingKeys);
    atomic_store(result, qword_257919C38);
  }
  return result;
}

unint64_t sub_24A1A3058()
{
  unint64_t result;

  result = qword_257919CC0;
  if (!qword_257919CC0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BDF4, &type metadata for SecondPassConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919CC0);
  }
  return result;
}

unint64_t sub_24A1A30A0()
{
  unint64_t result;

  result = qword_257919CC8[0];
  if (!qword_257919CC8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21BE1C, &type metadata for SecondPassConfig.CodingKeys);
    atomic_store(result, qword_257919CC8);
  }
  return result;
}

uint64_t sub_24A1A30E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x46726F4674696177 && a2 == 0xEC0000006C616E69;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F70646E45657375 && a2 == 0xED00007265746E69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24A1A3210(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B6361626B6F6F6CLL && a2 == 0xEE0073656D617246;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000024A224300 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224320)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_24A1A337C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001FLL && a2 == 0x800000024A2243D0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224320)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24A1A3468(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x800000024A224440 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000024A224460 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224320 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x800000024A224480)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_24A1A3600(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x800000024A224540 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024A224560)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24A1A36EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6B63656843657375 && a2 == 0xEA00000000007265;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A2245E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A224600 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224620 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7061436F69647561 && a2 == 0xEC00000065727574)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_24A1A3914(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7461506C65646F6DLL && a2 == 0xE900000000000068;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365726854676F6CLL && a2 == 0xEC000000646C6F68 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D696E694D676F6CLL && a2 == 0xEA00000000006D75)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_24A1A3A98(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x800000024A2247D0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A2247F0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A224810 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224830 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A224850 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000024A224870 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7463655674656E6ELL && a2 == 0xEE00657A6953726FLL)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_24A1A3D64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6265446F69647561 && a2 == 0xEA00000000006775;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6365446863746162 && a2 == 0xEB0000000065646FLL || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A2245E0 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A224600 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A224620 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6150646E6F636573 && a2 == 0xEA00000000007373)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_24A1A3FEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654E6C617275656ELL && a2 == 0xED00006B726F7774;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024A220B10 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7265646F636564 && a2 == 0xE700000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6150646E6F636573 && a2 == 0xEA00000000007373 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656D69746E7572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_24A1A4230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24BD0A980](a1, v6, a5);
}

uint64_t dispatch thunk of DuringKeywordSilence.__allocating_init(from:)()
{
  return dispatch thunk of AudioCapture.__allocating_init(from:)();
}

uint64_t dispatch thunk of SecondPassConfig.__allocating_init(from:)()
{
  return dispatch thunk of AudioCapture.__allocating_init(from:)();
}

uint64_t dispatch thunk of NeuralNetworkConfig.__allocating_init(from:)()
{
  return dispatch thunk of PreKeywordSilence.__allocating_init(from:)();
}

uint64_t dispatch thunk of VATConfiguration.__allocating_init(from:)()
{
  return dispatch thunk of DecoderConfig.__allocating_init(from:)();
}

uint64_t dispatch thunk of DuringKeywordSilence.encode(to:)()
{
  return dispatch thunk of AudioCapture.encode(to:)();
}

uint64_t dispatch thunk of SecondPassConfig.encode(to:)()
{
  return dispatch thunk of AudioCapture.encode(to:)();
}

uint64_t dispatch thunk of NeuralNetworkConfig.encode(to:)()
{
  return dispatch thunk of PreKeywordSilence.encode(to:)();
}

uint64_t dispatch thunk of VATConfiguration.encode(to:)()
{
  return dispatch thunk of DecoderConfig.encode(to:)();
}

uint64_t sub_24A1A439C@<X0>(uint64_t *a1@<X8>)
{
  return sub_24A199F00(a1);
}

uint64_t sub_24A1A43B0@<X0>(uint64_t *a1@<X8>)
{
  return sub_24A197C70(a1);
}

uint64_t sub_24A1A43C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_24A19B1BC(a1);
}

uint64_t sub_24A1A4408()
{
  return sub_24A199F2C();
}

uint64_t sub_24A1A441C()
{
  return sub_24A197C9C();
}

uint64_t sub_24A1A4430()
{
  return sub_24A19B1E8();
}

void sub_24A1A4444()
{
  qword_257919D58 = (uint64_t)&unk_251B9B8E8;
}

void sub_24A1A4458()
{
  qword_257919D68 = (uint64_t)&unk_251B9B928;
}

uint64_t sub_24A1A446C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  sub_24A1A44C0(a1, a2);
  return v4;
}

uint64_t sub_24A1A44C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  unint64_t *v35;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = v2;
  if (!a2)
  {
    sub_24A14C404();
    swift_allocError();
    *v8 = 0xD000000000000017;
    v8[1] = 0x800000024A224B90;
    swift_willThrow();
    goto LABEL_5;
  }
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  type metadata accessor for VAEspressoUtilsV2();
  swift_bridgeObjectRetain();
  v7 = sub_24A1516F0();
  sub_24A1D80C4(a1, a2, v7 & 1, (uint64_t *)&v39);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    v9 = v40;
    v42 = v40;
    v10 = v41;
    *(_OWORD *)(v4 + 48) = v40;
    *(_OWORD *)(v4 + 64) = v10;
    *(_OWORD *)(v4 + 32) = v39;
    if (*(_QWORD *)(v9 + 16) == 1)
    {
      sub_24A14C470((uint64_t)&v42);
      sub_24A148970(0x7475706E69, 0xE500000000000000);
      v12 = v11;
      sub_24A14C4C0((uint64_t)&v42);
      if ((v12 & 1) != 0)
      {
        v13 = *(_QWORD *)(v4 + 48);
        if (*(_QWORD *)(v13 + 16) && (v14 = sub_24A148970(0x7475706E69, 0xE500000000000000), (v15 & 1) != 0))
        {
          v16 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v13 + 56) + 8 * v14) + 200);
          v17 = swift_retain();
          v18 = (_QWORD *)v16(v17);
          swift_release();
        }
        else
        {
          v18 = 0;
        }
        if (qword_257919D50 == -1)
        {
          if (!v18)
            goto LABEL_28;
        }
        else
        {
          swift_once();
          if (!v18)
            goto LABEL_28;
        }
        v19 = sub_24A1A4C00(v18, (_QWORD *)qword_257919D58);
        swift_bridgeObjectRelease();
        if (v19)
        {
          if (*(_QWORD *)(*(_QWORD *)(v4 + 56) + 16) == 1)
          {
            swift_bridgeObjectRetain();
            sub_24A148970(0x74757074756FLL, 0xE600000000000000);
            v21 = v20;
            swift_bridgeObjectRelease();
            if ((v21 & 1) != 0)
            {
              v22 = *(_QWORD *)(v4 + 56);
              if (*(_QWORD *)(v22 + 16)
                && (v23 = sub_24A148970(0x74757074756FLL, 0xE600000000000000), (v24 & 1) != 0))
              {
                v25 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v22 + 56) + 8 * v23) + 200);
                v26 = swift_retain();
                v27 = (_QWORD *)v25(v26);
                swift_release();
              }
              else
              {
                v27 = 0;
              }
              if (qword_257919D60 == -1)
              {
                if (!v27)
                  goto LABEL_24;
              }
              else
              {
                swift_once();
                if (!v27)
                  goto LABEL_24;
              }
              v28 = sub_24A1A4C00(v27, (_QWORD *)qword_257919D68);
              swift_bridgeObjectRelease();
              if (v28)
                return v4;
            }
          }
LABEL_24:
          sub_24A216308();
          swift_bridgeObjectRelease();
          v37 = 0xD00000000000001DLL;
          v38 = 0x800000024A224BD0;
          v29 = *(_QWORD *)(v4 + 56);
          if (!*(_QWORD *)(v29 + 16))
            goto LABEL_31;
          v30 = sub_24A148970(0x74757074756FLL, 0xE600000000000000);
          if ((v31 & 1) == 0)
            goto LABEL_31;
          goto LABEL_30;
        }
      }
    }
LABEL_28:
    sub_24A216308();
    swift_bridgeObjectRelease();
    v37 = 0xD00000000000001CLL;
    v38 = 0x800000024A224BB0;
    v29 = *(_QWORD *)(v4 + 48);
    if (!*(_QWORD *)(v29 + 16))
      goto LABEL_31;
    v30 = sub_24A148970(0x7475706E69, 0xE500000000000000);
    if ((v32 & 1) == 0)
      goto LABEL_31;
LABEL_30:
    v33 = *(void (**)(uint64_t))(**(_QWORD **)(*(_QWORD *)(v29 + 56) + 8 * v30) + 200);
    v34 = swift_retain();
    v33(v34);
    swift_release();
LABEL_31:
    sub_24A135F88(&qword_25790DED0);
    sub_24A215D08();
    sub_24A215D98();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v35 = v37;
    v35[1] = v38;
    swift_willThrow();
    swift_release();
    return v4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_5:
  type metadata accessor for VASilenceModel();
  swift_deallocPartialClassInstance();
  return v4;
}

uint64_t type metadata accessor for VASilenceModel()
{
  return objc_opt_self();
}

uint64_t sub_24A1A491C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  _QWORD *v16;

  v3 = v1;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 48) + 16)
    && (sub_24A148970(0x7475706E69, 0xE500000000000000), (v5 & 1) != 0)
    && (sub_24A135F88(&qword_25790DED8), (v6 = swift_dynamicCastClass()) != 0))
  {
    v7 = v6;
    swift_retain();
    sub_24A17E5C0(a1, v8);
    (*(void (**)(void))(*(_QWORD *)v7 + 624))();
    swift_bridgeObjectRelease();
    sub_24A1926B0();
    if (!v2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 16))
      {
        sub_24A148970(0x74757074756FLL, 0xE600000000000000);
        if ((v9 & 1) != 0)
        {
          sub_24A135F88(&qword_25790DEE0);
          v10 = swift_dynamicCastClass();
          if (v10)
          {
            v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 720);
            v12 = swift_retain();
            v13 = v11(v12);
            swift_release();
            swift_release();
            return v13;
          }
        }
      }
      sub_24A216308();
      swift_bridgeObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v16 = 0xD00000000000001DLL;
      v16[1] = 0x800000024A224C10;
      swift_willThrow();
    }
    return swift_release();
  }
  else
  {
    sub_24A216308();
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    *v15 = 0xD00000000000001BLL;
    v15[1] = 0x800000024A224BF0;
    return swift_willThrow();
  }
}

uint64_t VASilenceModel.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VASilenceModel.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

BOOL sub_24A1A4C00(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

ValueMetadata *type metadata accessor for VASilenceModelError()
{
  return &type metadata for VASilenceModelError;
}

uint64_t method lookup function for VASilenceModel()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A1A4CF8()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9BA50);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1A4F48(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  strcpy((char *)(inited + 32), "enc_3d_output");
  *(_WORD *)(inited + 46) = -4864;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1A5080@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1A5234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1A52CC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1A534C;
  return sub_24A2161AC();
}

uint64_t sub_24A1A534C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A53C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for at_encoder_rdr_125141826();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1A540C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for at_encoder_rdr_125141826Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1A54E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A54FC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1A5554;
  return sub_24A216194();
}

uint64_t sub_24A1A5554(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A55D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for at_encoder_rdr_125141826Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1A5614(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  id v5;
  uint64_t v6;

  type metadata accessor for at_encoder_rdr_125141826Input();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 136);
  v5 = a1;
  v6 = v4(v3);
  swift_release();
  return v6;
}

uint64_t sub_24A1A568C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v16 - v9, a1, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v11(v8, (uint64_t)v10, v4);
  sub_24A18C9D0();
  v12 = sub_24A2160E0();
  type metadata accessor for at_encoder_rdr_125141826Input();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v13);
  swift_release();
  return v14;
}

void sub_24A1A57D4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for at_encoder_rdr_125141826Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1A5AA8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1A5ACC(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for at_encoder_rdr_125141826();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for at_encoder_rdr_125141826()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for at_encoder_rdr_125141826Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for at_encoder_rdr_125141826Input()
{
  return objc_opt_self();
}

uint64_t sub_24A1A5C30()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9BAA8);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1A5DF8(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x74757074756FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1A5F20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1A60D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1A616C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1A61EC;
  return sub_24A2161AC();
}

uint64_t sub_24A1A61EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A6268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for quant_verifier_aa_fp32();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1A62AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for quant_verifier_aa_fp32Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1A6380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A639C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1A63F4;
  return sub_24A216194();
}

uint64_t sub_24A1A63F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1A6470()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for quant_verifier_aa_fp32Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1A64B4(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for quant_verifier_aa_fp32Input();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A1A6550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790C778);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for quant_verifier_aa_fp32Input();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A190054((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A1A66C8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for quant_verifier_aa_fp32Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1A699C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1A69C0(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for quant_verifier_aa_fp32();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for quant_verifier_aa_fp32()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_verifier_aa_fp32Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for quant_verifier_aa_fp32Input()
{
  return objc_opt_self();
}

uint64_t sub_24A1A6AA4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_24A1A6AD0()
{
  sub_24A1A6E34();
  return sub_24A2166A4();
}

uint64_t sub_24A1A6AF8()
{
  sub_24A1A6E34();
  return sub_24A2166B0();
}

unint64_t sub_24A1A6B20()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000014;
}

uint64_t sub_24A1A6B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1A7384(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1A6B80()
{
  sub_24A1A6DF0();
  return sub_24A2166A4();
}

uint64_t sub_24A1A6BA8()
{
  sub_24A1A6DF0();
  return sub_24A2166B0();
}

uint64_t sub_24A1A6BD0()
{
  sub_24A1A6E78();
  return sub_24A2166A4();
}

uint64_t sub_24A1A6BF8()
{
  sub_24A1A6E78();
  return sub_24A2166B0();
}

uint64_t sub_24A1A6C20(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = sub_24A135F88(&qword_25790E550);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_24A135F88(&qword_25790E558);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A135F88(&qword_25790E560);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A1A6DF0();
  sub_24A21668C();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    sub_24A1A6E34();
    sub_24A21650C();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    sub_24A1A6E78();
    sub_24A21650C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_24A1A6DF0()
{
  unint64_t result;

  result = qword_257919DF0;
  if (!qword_257919DF0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CD88, &type metadata for VACInteropUtils.DomainError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919DF0);
  }
  return result;
}

unint64_t sub_24A1A6E34()
{
  unint64_t result;

  result = qword_257919DF8;
  if (!qword_257919DF8)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CD38, &type metadata for VACInteropUtils.DomainError.BadArrayElementTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257919DF8);
  }
  return result;
}

unint64_t sub_24A1A6E78()
{
  unint64_t result;

  result = qword_257919E00[0];
  if (!qword_257919E00[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CCE8, &type metadata for VACInteropUtils.DomainError.UnexpectedNullResultCodingKeys);
    atomic_store(result, qword_257919E00);
  }
  return result;
}

uint64_t sub_24A1A6EBC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_24A1A7470(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t sub_24A1A6EE8(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_24A1A6C20(a1, *v1);
}

uint64_t sub_24A1A6F00(char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata2;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v36 = a5;
  v37 = a4;
  v34 = a1;
  v35 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v10 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v32 - v14;
  v16 = *(_QWORD *)(a7 - 8);
  v17 = MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a6 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a3, a6);
  v23 = v38;
  ((void (*)(char *))v37)(v22);
  if (v23)
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, a6);
  v38 = v12;
  v25 = TupleTypeMetadata2;
  v37 = &v15[*(int *)(TupleTypeMetadata2 + 48)];
  v26 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
  v26(v15, v22, a6);
  v27 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v28 = v37;
  v27(v37, v19, a7);
  v29 = *(int *)(v25 + 48);
  v30 = v38;
  v31 = &v38[v29];
  v26(v38, v15, a6);
  v27(v31, v28, a7);
  v26(v34, v30, a6);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v35, v31, a7);
}

uint64_t sub_24A1A70E8@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X6>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_24A1A6F00(a4, (uint64_t)v10, v11, v12, v13, v14, v15);
  if (!v4)
  {
    a2(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  }
  return result;
}

uint64_t sub_24A1A71B0@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(char *, uint64_t);
  _BYTE *v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v23[2] = a3;
  v24 = a5;
  v23[0] = a6;
  v23[1] = a2;
  v8 = sub_24A216200();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v23 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v23 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v15, 1, 1, a4);
  v19 = v25;
  sub_24A1A70E8((uint64_t)v15, a1, v24, v17);
  if (v19)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  v21 = *(void (**)(char *, uint64_t))(v9 + 8);
  v21(v15, v8);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v17, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, a4) == 1)
  {
    v21(v12, v8);
    sub_24A1A779C();
    swift_allocError();
    *v22 = 0;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v21)(v17, v8);
  }
  else
  {
    v21(v17, v8);
    return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v18 + 32))(v23[0], v12, a4);
  }
}

uint64_t sub_24A1A7384(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000024A224E50 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000024A224E70)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24A1A7470(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v24 = sub_24A135F88(&qword_25790E578);
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_24A135F88(&qword_25790E580);
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790E588);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A1A6DF0();
  v10 = v26;
  sub_24A216674();
  if (v10)
    goto LABEL_7;
  v11 = v5;
  v12 = v25;
  v21 = a1;
  v26 = v7;
  v13 = sub_24A216500();
  v14 = v6;
  if (*(_QWORD *)(v13 + 16) != 1)
  {
    v16 = sub_24A216344();
    swift_allocError();
    v17 = v9;
    v19 = v18;
    sub_24A135F88(&qword_25790E590);
    *v19 = &type metadata for VACInteropUtils.DomainError;
    sub_24A21647C();
    sub_24A216338();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v6);
    a1 = v21;
LABEL_7:
    sub_24A14D184((uint64_t)a1);
    return v6;
  }
  v6 = *(unsigned __int8 *)(v13 + 32);
  if ((v6 & 1) != 0)
  {
    v28 = 1;
    sub_24A1A6E34();
    sub_24A216470();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v24);
  }
  else
  {
    v27 = 0;
    sub_24A1A6E78();
    sub_24A216470();
    v15 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v23);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  sub_24A14D184((uint64_t)v21);
  return v6;
}

unint64_t sub_24A1A779C()
{
  unint64_t result;

  result = qword_25790E568;
  if (!qword_25790E568)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CA44, &type metadata for VACInteropUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_25790E568);
  }
  return result;
}

unint64_t sub_24A1A77E4()
{
  unint64_t result;

  result = qword_25790E570;
  if (!qword_25790E570)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CA1C, &type metadata for VACInteropUtils.DomainError);
    atomic_store(result, (unint64_t *)&qword_25790E570);
  }
  return result;
}

ValueMetadata *type metadata accessor for VACInteropUtils()
{
  return &type metadata for VACInteropUtils;
}

ValueMetadata *type metadata accessor for VACInteropUtils.DomainError()
{
  return &type metadata for VACInteropUtils.DomainError;
}

uint64_t _s12VoiceActions15VACInteropUtilsV11DomainErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A1A7898 + 4 * byte_24A21CA15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A1A78CC + 4 * byte_24A21CA10[v4]))();
}

uint64_t sub_24A1A78CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A78D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1A78DCLL);
  return result;
}

uint64_t sub_24A1A78E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1A78F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A1A78F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1A78FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VACInteropUtils.DomainError.CodingKeys()
{
  return &type metadata for VACInteropUtils.DomainError.CodingKeys;
}

ValueMetadata *type metadata accessor for VACInteropUtils.DomainError.UnexpectedNullResultCodingKeys()
{
  return &type metadata for VACInteropUtils.DomainError.UnexpectedNullResultCodingKeys;
}

ValueMetadata *type metadata accessor for VACInteropUtils.DomainError.BadArrayElementTypeCodingKeys()
{
  return &type metadata for VACInteropUtils.DomainError.BadArrayElementTypeCodingKeys;
}

unint64_t sub_24A1A793C()
{
  unint64_t result;

  result = qword_25791A390[0];
  if (!qword_25791A390[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CCC0, &type metadata for VACInteropUtils.DomainError.CodingKeys);
    atomic_store(result, qword_25791A390);
  }
  return result;
}

unint64_t sub_24A1A7984()
{
  unint64_t result;

  result = qword_25791A4A0;
  if (!qword_25791A4A0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CBE0, &type metadata for VACInteropUtils.DomainError.UnexpectedNullResultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A4A0);
  }
  return result;
}

unint64_t sub_24A1A79CC()
{
  unint64_t result;

  result = qword_25791A4A8[0];
  if (!qword_25791A4A8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CC08, &type metadata for VACInteropUtils.DomainError.UnexpectedNullResultCodingKeys);
    atomic_store(result, qword_25791A4A8);
  }
  return result;
}

unint64_t sub_24A1A7A14()
{
  unint64_t result;

  result = qword_25791A530;
  if (!qword_25791A530)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CB90, &type metadata for VACInteropUtils.DomainError.BadArrayElementTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A530);
  }
  return result;
}

unint64_t sub_24A1A7A5C()
{
  unint64_t result;

  result = qword_25791A538[0];
  if (!qword_25791A538[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CBB8, &type metadata for VACInteropUtils.DomainError.BadArrayElementTypeCodingKeys);
    atomic_store(result, qword_25791A538);
  }
  return result;
}

unint64_t sub_24A1A7AA4()
{
  unint64_t result;

  result = qword_25791A5C0;
  if (!qword_25791A5C0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CC30, &type metadata for VACInteropUtils.DomainError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A5C0);
  }
  return result;
}

unint64_t sub_24A1A7AEC()
{
  unint64_t result;

  result = qword_25791A5C8[0];
  if (!qword_25791A5C8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21CC58, &type metadata for VACInteropUtils.DomainError.CodingKeys);
    atomic_store(result, qword_25791A5C8);
  }
  return result;
}

uint64_t sub_24A1A7B34()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1A7B68(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

void *sub_24A1A7BAC()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void sub_24A1A7BEC(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;

}

uint64_t VAA2AVerifierModelV3.__allocating_init(computeUnits:)(unsigned __int8 *a1)
{
  swift_allocObject();
  return VAA2AVerifierModelV3.init(computeUnits:)(a1);
}

uint64_t VAA2AVerifierModelV3.init(computeUnits:)(unsigned __int8 *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v3 = v1;
  v5 = type metadata accessor for VASignpostInterval();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = MEMORY[0x24BEE4AF8];
  v3[3] = MEMORY[0x24BEE4AF8];
  v3[4] = v9;
  v3[5] = v9;
  v3[6] = v9;
  v3[7] = 0;
  v17 = 0;
  v18 = 0xE000000000000000;
  swift_retain();
  sub_24A216308();
  sub_24A215D98();
  v19 = v8;
  sub_24A2163D4();
  type metadata accessor for VALog();
  sub_24A215D98();
  static VALog.begin(_:_:)("VoiceActions", 12, 2u, v17, v18, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBFFE0]), sel_init);
  v11 = v10;
  if (v8)
    v12 = 3;
  else
    v12 = 0;
  objc_msgSend(v10, sel_setComputeUnits_, v12);
  type metadata accessor for aa_verifier_20240530();
  v13 = v11;
  v14 = sub_24A18B9F8(v13);
  if (v2)
  {

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = (void *)v3[7];
    swift_release();

    type metadata accessor for VAA2AVerifierModelV3();
    return swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = v14;
    swift_release();
    VASignpostInterval.end(_:)((Swift::String_optional)0);

    sub_24A136064((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for VASignpostInterval);
    return sub_24A180204();
  }
}

uint64_t type metadata accessor for VAA2AVerifierModelV3()
{
  return objc_opt_self();
}

uint64_t sub_24A1A7EDC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  BOOL v32;
  void (*v33)(uint64_t *, _QWORD);
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  char v98;
  int v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;

  v2 = v1;
  v4 = type metadata accessor for VASingleEnrollmentData();
  v83 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v84 = (uint64_t)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v63 - v7;
  v67 = *a1;
  v9 = *((_DWORD *)a1 + 2);
  v75 = *((unsigned __int8 *)a1 + 12);
  v74 = *((unsigned __int8 *)a1 + 13);
  v10 = a1[2];
  v11 = a1[3];
  v12 = *((unsigned __int8 *)a1 + 32);
  v13 = a1[5];
  v81 = *((unsigned __int8 *)a1 + 48);
  v73 = *((unsigned __int8 *)a1 + 49);
  v14 = *((_DWORD *)a1 + 13);
  v72 = *((unsigned __int8 *)a1 + 56);
  v80 = a1[8];
  v79 = a1[9];
  v78 = *((unsigned __int8 *)a1 + 80);
  v77 = *((unsigned __int8 *)a1 + 81);
  v76 = *((unsigned __int8 *)a1 + 82);
  v71 = *((unsigned __int8 *)a1 + 83);
  v70 = *((unsigned __int8 *)a1 + 84);
  v69 = *((unsigned __int8 *)a1 + 85);
  v68 = *((unsigned __int8 *)a1 + 86);
  v89 = v67;
  v90 = v9;
  v91 = v75;
  v92 = v74;
  v93 = v10;
  v94 = v11;
  v95 = v12;
  v96 = v13;
  v97 = v81;
  v98 = v73;
  v99 = v14;
  v100 = v72;
  v101 = v80;
  v102 = v79;
  v103 = v78;
  v104 = v77;
  v105 = v76;
  v106 = v71;
  v107 = v70;
  v108 = v69;
  v109 = v68;
  v15 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
  swift_bridgeObjectRelease();
  v16 = v15;
  v17 = v67;
  v18 = sub_24A1421D4((uint64_t)&unk_251B9BD88, v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 264))(v18);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 216))(MEMORY[0x24BEE4AF8]);
  v89 = v17;
  v90 = v9;
  v91 = v75;
  v92 = v74;
  v66 = v10;
  v93 = v10;
  v94 = v11;
  v65 = v11;
  v64 = v12;
  v95 = v12;
  v63 = v13;
  v96 = v13;
  v97 = v81;
  v98 = v73;
  v99 = v14;
  v100 = v72;
  v101 = v80;
  v102 = v79;
  v103 = v78;
  v104 = v77;
  v105 = v76;
  v106 = v71;
  v107 = v70;
  v108 = v69;
  v109 = v68;
  result = VARuntimeParameters.keywordsNoThresholds.getter();
  v20 = result;
  v88 = *(_QWORD *)(result + 16);
  if (v88)
  {
    v21 = 0;
    v22 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 232);
    v85 = result + 32;
    v86 = v22;
    v110 = v1;
    v82 = result;
    while (v21 < *(_QWORD *)(v20 + 16))
    {
      v23 = (uint64_t *)(v85 + 16 * v21);
      v24 = *v23;
      v25 = v23[1];
      v26 = swift_bridgeObjectRetain();
      v27 = v86(v26);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v87 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
        v29 = v27 + v87;
        v30 = *(_QWORD *)(v83 + 72);
        while (1)
        {
          sub_24A1A85E8(v29, (uint64_t)v8);
          v31 = &v8[*(int *)(v4 + 24)];
          v32 = *(_QWORD *)v31 == v24 && *((_QWORD *)v31 + 1) == v25;
          if (v32 || (sub_24A21659C() & 1) != 0)
            break;
          sub_24A136064((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
          v29 += v30;
          if (!--v28)
          {
            swift_bridgeObjectRelease();
            result = swift_bridgeObjectRelease();
            v2 = v110;
            goto LABEL_20;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_24A1A85E8((uint64_t)v8, v84);
        v33 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v110 + 224))(&v89);
        v35 = v34;
        v36 = *v34;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v36 = sub_24A1A9918(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
          *v35 = v36;
        }
        v39 = *(_QWORD *)(v36 + 16);
        v38 = *(_QWORD *)(v36 + 24);
        if (v39 >= v38 >> 1)
        {
          v36 = sub_24A1A9918(v38 > 1, v39 + 1, 1, v36);
          *v35 = v36;
        }
        v2 = v110;
        *(_QWORD *)(v36 + 16) = v39 + 1;
        sub_24A1A9B20(v84, v36 + v87 + v39 * v30);
        v33(&v89, 0);
        result = sub_24A136064((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
LABEL_20:
        v20 = v82;
      }
      else
      {
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
      }
      if (++v21 == v88)
      {
        swift_bridgeObjectRelease();
        v17 = v67;
        v40 = v66;
        v41 = v65;
        v42 = v64;
        v43 = v63;
        v44 = v81;
        v45 = v80;
        v46 = v79;
        v47 = v78;
        v48 = v77;
        v49 = v76;
        v50 = v75;
        v51 = v74;
        v52 = v73;
        v53 = v72;
        v54 = v71;
        v55 = v70;
        v56 = v69;
        v57 = v68;
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = v66;
    v41 = v65;
    v42 = v64;
    v43 = v63;
    v44 = v81;
    v45 = v80;
    v46 = v79;
    v47 = v78;
    v48 = v77;
    v49 = v76;
    v50 = v75;
    v51 = v74;
    v52 = v73;
    v53 = v72;
    v54 = v71;
    v55 = v70;
    v56 = v69;
    v57 = v68;
LABEL_23:
    v89 = v17;
    v90 = v9;
    v91 = v50;
    v92 = v51;
    v93 = v40;
    v94 = v41;
    v95 = v42;
    v96 = v43;
    v97 = v44;
    v98 = v52;
    v99 = v14;
    v100 = v53;
    v101 = v45;
    v102 = v46;
    v103 = v47;
    v104 = v48;
    v105 = v49;
    v106 = v54;
    v107 = v55;
    v108 = v56;
    v109 = v57;
    v58 = *(_QWORD *)(VARuntimeParameters.keywordsNoThresholds.getter() + 16);
    v59 = swift_bridgeObjectRelease();
    v60 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 208))(v59) + 16);
    v61 = swift_bridgeObjectRelease();
    if (v58 == v60)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(v61);
    }
    else
    {
      sub_24A14C404();
      swift_allocError();
      *v62 = 0xD00000000000003CLL;
      v62[1] = 0x800000024A224ED0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_24A1A85E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VASingleEnrollmentData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_24A1A862C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  id v14;
  double v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for VASingleEnrollmentData() + 20));
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v18 = v2;
  v20 = v2 + 32;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 16);
  sub_24A135F88(&qword_25790BE68);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A21AA40;
  sub_24A170EC0();
  *(_QWORD *)(v5 + 32) = sub_24A2161B8();
  *(_QWORD *)(v5 + 40) = sub_24A216074();
  *(_QWORD *)(v5 + 48) = sub_24A216074();
  sub_24A215EB8();
  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v7 = sub_24A17F3CC(v5, 65568);
  if (!v1)
  {
    v8 = 0;
    v19 = v3;
    while (!v4)
    {
LABEL_5:
      if (++v8 == v19)
        return;
    }
    if (v8 < *(_QWORD *)(v18 + 16))
    {
      v9 = 0;
      while (1)
      {
        v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = xmmword_24A21AA40;
        *(_QWORD *)(v10 + 32) = sub_24A2161B8();
        *(_QWORD *)(v10 + 40) = sub_24A216074();
        *(_QWORD *)(v10 + 48) = sub_24A216074();
        sub_24A215EB8();
        v11 = *(_QWORD *)(v20 + 8 * v8);
        if (v9 >= *(_QWORD *)(v11 + 16))
          break;
        v12 = v9 + 1;
        v13 = *(_DWORD *)(v11 + 4 * v9 + 32);
        v14 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
        LODWORD(v15) = v13;
        v16 = objc_msgSend(v14, sel_initWithFloat_, v15);
        v17 = (void *)sub_24A215E94();
        swift_bridgeObjectRelease();
        objc_msgSend(v7, sel_setObject_forKeyedSubscript_, v16, v17);

        v9 = v12;
        if (v4 == v12)
          goto LABEL_5;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_14;
  }
}

uint64_t sub_24A1A8874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, _QWORD);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[32];
  void (*v19)(char *);

  v2 = v0;
  v3 = type metadata accessor for VASingleEnrollmentData();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 192))(MEMORY[0x24BEE4AF8]);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 208))(v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v19 = *(void (**)(char *))(*(_QWORD *)v0 + 320);
    v10 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    v16 = v8;
    v17 = v11;
    while (1)
    {
      sub_24A1A85E8(v10, (uint64_t)v6);
      v19(v6);
      if (v1)
        break;
      v12 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 200))(v18);
      v14 = v13;
      MEMORY[0x24BD09750](v12);
      if (*(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_24A215ED0();
      sub_24A215F0C();
      sub_24A215EB8();
      v12(v18, 0);
      sub_24A136064((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
      v10 += v17;
      if (!--v9)
        return swift_bridgeObjectRelease();
    }
    sub_24A136064((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1A8A10(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD v32[2];

  v6 = sub_24A215A8C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = sub_24A216410();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRetain();
      v11 = sub_24A216410();
      v8 = swift_bridgeObjectRelease();
      if (v11 >= 2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
      if (v11 >= 2)
      {
LABEL_4:
        sub_24A14C404();
        swift_allocError();
        v13 = 0xD00000000000001FLL;
        v14 = "Did not expect multiple buffers";
LABEL_19:
        *v12 = v13;
        v12[1] = (unint64_t)(v14 - 32) | 0x8000000000000000;
        swift_willThrow();
        return v2;
      }
LABEL_7:
      if ((a1 & 0xC000000000000001) != 0)
      {
        MEMORY[0x24BD09BE8](0, a1);
      }
      else
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_27;
        }
        swift_unknownObjectRetain();
      }
      type metadata accessor for VAFeatureExtractingEncoderOutput();
      v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        sub_24A14C404();
        swift_allocError();
        v13 = 0xD000000000000018;
        v14 = "Unexpected type of input";
        goto LABEL_19;
      }
      v11 = v16;
      if ((*(_BYTE *)(v16 + 16) & 1) == 0)
        goto LABEL_31;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 184))();
      if (!(v8 >> 62))
      {
        v17 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        v18 = swift_bridgeObjectRelease();
        if (v17)
          goto LABEL_14;
LABEL_28:
        v27 = sub_24A1B9D90();
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v27, v6);
        v28 = sub_24A215A74();
        v29 = sub_24A216104();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v30 = 0;
          _os_log_impl(&dword_24A12D000, v28, v29, "No enrollments set for this model", v30, 2u);
          MEMORY[0x24BD0AAAC](v30, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_31:
        type metadata accessor for VAResultGeneratorInput();
        v20 = 0;
        v21 = 0;
        v22 = 0;
        goto LABEL_32;
      }
LABEL_27:
      v32[1] = v8;
      v26 = sub_24A216410();
      v18 = swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_14:
        if ((a2 & 1) != 0)
        {
          v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v18);
LABEL_16:
          type metadata accessor for VAResultGeneratorInput();
          v19 = *(_QWORD *)(v11 + 32);
          swift_bridgeObjectRetain();
          v20 = 1;
          v21 = v2;
          v22 = v19;
LABEL_32:
          v2 = VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(v20, v21, v22);
          swift_unknownObjectRelease();
          return v2;
        }
        if (*(_QWORD *)(v11 + 40))
        {
          v23 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352);
          v24 = swift_bridgeObjectRetain();
          v2 = v23(v24);
          swift_bridgeObjectRelease();
          if (!v3)
            goto LABEL_16;
        }
        else
        {
          sub_24A14C404();
          swift_allocError();
          *v25 = 0xD00000000000001ELL;
          v25[1] = 0x800000024A223A40;
          swift_willThrow();
        }
        swift_unknownObjectRelease();
        return v2;
      }
      goto LABEL_28;
    }
  }
  type metadata accessor for VAResultGeneratorInput();
  return VAResultGeneratorInput.__allocating_init(hasInput:scores:vadBuffer:)(0, 0, 0);
}

uint64_t sub_24A1A8DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD v60[2];
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;

  v8 = type metadata accessor for VASingleEnrollmentData();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 336))(a1, a2);
  if (!v4)
  {
    v13 = result;
    if ((*(_BYTE *)(result + 16) & 1) != 0)
    {
      v50 = 0;
      v51 = a3;
      v14 = *(_QWORD *)((*(uint64_t (**)(void))(*(_QWORD *)v3 + 208))() + 16);
      result = swift_bridgeObjectRelease();
      v57 = v14;
      if (v14)
      {
        v52 = v11;
        v15 = 0;
        v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v55 = v3;
        v56 = v13;
        v53 = v9;
        v54 = v8;
        while (1)
        {
          v16 = *(_QWORD *)(v13 + 24);
          if (!v16)
            break;
          if (v15 >= *(_QWORD *)(v16 + 16))
          {
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            break;
          }
          v17 = *(_QWORD *)(v16 + 8 * v15 + 32);
          v18 = *(_QWORD *)(v17 + 16);
          if (!v18)
            goto LABEL_25;
          v19 = *(float *)(v17 + 32);
          v20 = v18 - 1;
          if (v20)
          {
            v21 = (float *)(v17 + 36);
            do
            {
              v22 = *v21++;
              v23 = v22;
              if (v19 < v22)
                v19 = v23;
              --v20;
            }
            while (v20);
          }
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 232))(result);
          if (v15 >= *(_QWORD *)(result + 16))
            goto LABEL_26;
          v24 = (uint64_t)v52;
          sub_24A1A85E8(result+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v15, (uint64_t)v52);
          swift_bridgeObjectRelease();
          v25 = (uint64_t *)(v24 + *(int *)(v8 + 24));
          v27 = *v25;
          v26 = v25[1];
          swift_bridgeObjectRetain();
          sub_24A136064(v24, (uint64_t (*)(_QWORD))type metadata accessor for VASingleEnrollmentData);
          v28 = sub_24A1DF918();
          v29 = sub_24A1DF918();
          v30 = sub_24A1DF920();
          v31 = sub_24A1DF920();
          v32 = sub_24A1516F0();
          v33 = sub_24A1516F0();
          v34 = sub_24A162F28();
          sub_24A1DF928(v27, v26, v30, v31, v32 & 1, v33 & 1, v34 & 1, (uint64_t)v60, v19, v28, v29);
          v35 = v60[1];
          v58 = v60[0];
          v36 = v61;
          v37 = v62;
          v38 = v63;
          v39 = v64;
          v40 = v65;
          v41 = v66;
          v42 = v67;
          v43 = v68;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_24A17B434(0, v59[2] + 1, 1, v59);
            v59 = (_QWORD *)result;
          }
          v45 = v59[2];
          v44 = v59[3];
          if (v45 >= v44 >> 1)
          {
            result = (uint64_t)sub_24A17B434((_QWORD *)(v44 > 1), v45 + 1, 1, v59);
            v59 = (_QWORD *)result;
          }
          ++v15;
          v47 = v58;
          v46 = v59;
          v59[2] = v45 + 1;
          v48 = &v46[8 * v45];
          v48[4] = v47;
          v48[5] = v35;
          *((_DWORD *)v48 + 12) = v36;
          v48[7] = v37;
          v48[8] = v38;
          v48[9] = v39;
          v48[10] = v40;
          *((_BYTE *)v48 + 88) = v41;
          *((_BYTE *)v48 + 89) = v42;
          *((_BYTE *)v48 + 90) = v43;
          v13 = v56;
          v8 = v54;
          v3 = v55;
          v9 = v53;
          if (v15 == v57)
            goto LABEL_22;
        }
        __break(1u);
      }
      else
      {
        v59 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_22:
        type metadata accessor for VAKeywordResult();
        v49 = VAKeywordResult.__allocating_init(detections:)((uint64_t)v59);
        sub_24A1CE3A0(v49, v51);
        return swift_release();
      }
    }
    else
    {
      static VAVerifierModelOutput.none.getter(a3);
      return swift_release();
    }
  }
  return result;
}

void sub_24A1A911C(uint64_t (*a1)(void))
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  id v6;
  char **v7;
  char **v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, _QWORD);
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  id v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  int v32;
  int v33;
  void *v34;
  id v35;
  int v36;
  int v37;
  void *v38;
  id v39;
  int v40;
  int v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  char **v46;
  uint64_t (*v47)(void);
  id v48;
  id v49;
  uint64_t (*v50)(_QWORD *);
  char **v51;
  void *v52;
  uint64_t (*v53)(void);
  id v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD v57[4];

  v3 = v1;
  sub_24A135F88(&qword_25790BE68);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A21AA60;
  sub_24A170EC0();
  *(_QWORD *)(v5 + 32) = sub_24A2161B8();
  sub_24A215EB8();
  v6 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v7 = (char **)sub_24A17F3CC(v5, 65568);
  if (v2)
    return;
  v8 = v7;
  v9 = (void *)sub_24A2161B8();
  objc_msgSend(v8, sel_setObject_atIndexedSubscript_, v9, 0);

  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_24A21AA60;
  *(_QWORD *)(v10 + 32) = sub_24A2161B8();
  v57[0] = v10;
  sub_24A215EB8();
  v11 = objc_allocWithZone(MEMORY[0x24BDBFFF8]);
  v12 = sub_24A17F3CC(v10, 65568);
  v13 = (void *)sub_24A2161B8();
  objc_msgSend(v12, sel_setObject_atIndexedSubscript_, v13, 0);

  v53 = *(uint64_t (**)(void))(*v3 + 184);
  v14 = v53();
  if (v14 >> 62)
    goto LABEL_24;
  for (i = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = sub_24A216410())
  {
    swift_bridgeObjectRelease();
    v16 = sub_24A1421D4(MEMORY[0x24BEE4AF8], i);
    v17 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*v3 + 296))(v57);
    sub_24A17E81C((uint64_t)a1, v18);
    v19 = v17(v57, 0);
    v20 = (*(uint64_t (**)(uint64_t))(*v3 + 280))(v19);
    v52 = (void *)v20;
    if (!v20)
    {
      swift_bridgeObjectRelease();
      sub_24A14C404();
      swift_allocError();
      *v43 = 0xD000000000000024;
      v43[1] = 0x800000024A223A80;
      swift_willThrow();

      return;
    }
    v21 = ((uint64_t (*)(uint64_t))v53)(v20);
    v55 = v3;
    v56 = (_QWORD *)v16;
    if (v21 >> 62)
      break;
    a1 = *(uint64_t (**)(void))((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    if (!a1)
      goto LABEL_28;
LABEL_9:
    v51 = v8;
    type metadata accessor for aa_verifier_20240530Input();
    v22 = 0;
    v50 = *(uint64_t (**)(_QWORD *))(*v3 + 160);
    v48 = v12;
    v47 = a1;
    while (a1 != v22)
    {
      v54 = v52;
      v23 = ((uint64_t (*)(id))v53)(v54);
      if ((v23 & 0xC000000000000001) != 0)
      {
        v24 = (id)MEMORY[0x24BD09BE8](v22, v23);
      }
      else
      {
        if ((unint64_t)v22 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_22;
        v24 = *(id *)(v23 + 8 * (_QWORD)v22 + 32);
      }
      v25 = (uint64_t)v24;
      swift_bridgeObjectRelease();
      v26 = v51;
      v49 = v12;
      v3 = sub_24A190004((uint64_t)v54, v25, (uint64_t)v26, (uint64_t)v49);
      v27 = v50(v3);
      v28 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v27 + 136))(v3);
      v46 = v26;
      swift_release();
      sub_24A135F88(&qword_257909960);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_24A218680;
      a1 = *(uint64_t (**)(void))(*(_QWORD *)v28 + 88);
      v30 = (void *)a1();
      v31 = objc_msgSend(v30, sel_objectAtIndexedSubscript_, 0);

      v8 = &selRef_copy;
      objc_msgSend(v31, sel_floatValue);
      v33 = v32;

      *(_DWORD *)(v29 + 32) = v33;
      v34 = (void *)a1();
      v35 = objc_msgSend(v34, sel_objectAtIndexedSubscript_, 1);

      objc_msgSend(v35, sel_floatValue);
      v37 = v36;

      *(_DWORD *)(v29 + 36) = v37;
      v38 = (void *)a1();
      v39 = objc_msgSend(v38, sel_objectAtIndexedSubscript_, 2);

      objc_msgSend(v39, sel_floatValue);
      v41 = v40;

      *(_DWORD *)(v29 + 40) = v41;
      v42 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = sub_24A14893C(v56);
      v12 = v48;
      if ((unint64_t)v22 >= v42[2])
        goto LABEL_23;
      v56 = v42;
      v42[(_QWORD)v22 + 4] = v29;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v22 = (uint64_t (*)(void))((char *)v22 + 1);
      a1 = v47;
      v3 = v55;
      if (v47 == v22)
      {

        v44 = v54;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    ;
  }
  v45 = sub_24A216410();
  swift_bridgeObjectRelease();
  if (v45 < 0)
    __break(1u);
  a1 = (uint64_t (*)(void))v45;
  if (v45)
    goto LABEL_9;
LABEL_28:

  v44 = v52;
LABEL_29:

}

void sub_24A1A9714()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_24A1A9740()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t VAA2AVerifierModelV3.deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t VAA2AVerifierModelV3.__deallocating_deinit()
{
  uint64_t v0;

  v0 = VAVerifierModel.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_24A1A982C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t sub_24A1A9848()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t sub_24A1A9864()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 336))();
}

uint64_t sub_24A1A988C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 312))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VAA2AVerifierModelV3.setAudioEnrollments(enrollments:)(Swift::OpaquePointer enrollments)
{
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 240);
  v3 = swift_bridgeObjectRetain();
  v2(v3);
}

uint64_t sub_24A1A98E4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(**(_QWORD **)v0 + 240);
  v2 = swift_bridgeObjectRetain();
  return v1(v2);
}

uint64_t sub_24A1A9918(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_24A135F88(&qword_25790E740);
  v10 = *(_QWORD *)(type metadata accessor for VASingleEnrollmentData() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_24A2163E0();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for VASingleEnrollmentData() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A1A9BDC(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_24A1A9B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VASingleEnrollmentData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for VAA2AVerifierModelV3()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAA2AVerifierModelV3.__allocating_init(computeUnits:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV3.didStartListening(requestParams:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV3.predictScores(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of VAA2AVerifierModelV3.predict(predictionInput:shouldSkipVerifierInference:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t sub_24A1A9BDC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for VASingleEnrollmentData() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_24A21644C();
  __break(1u);
  return result;
}

BOOL static VASingleEnrollmentStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t VASingleEnrollmentStatus.hash(into:)()
{
  return sub_24A216644();
}

uint64_t sub_24A1A9D30()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A1A9D58 + 4 * byte_24A21CE70[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_24A1A9D58()
{
  return 0x73736563637573;
}

uint64_t sub_24A1A9D70()
{
  return 0x6863656570536F6ELL;
}

uint64_t sub_24A1A9D88()
{
  return 0x7973736F6CLL;
}

uint64_t sub_24A1A9D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1AC328(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1A9DC0()
{
  sub_24A1AA23C();
  return sub_24A2166A4();
}

uint64_t sub_24A1A9DE8()
{
  sub_24A1AA23C();
  return sub_24A2166B0();
}

uint64_t sub_24A1A9E10()
{
  sub_24A1AA280();
  return sub_24A2166A4();
}

uint64_t sub_24A1A9E38()
{
  sub_24A1AA280();
  return sub_24A2166B0();
}

uint64_t sub_24A1A9E60()
{
  sub_24A1AA2C4();
  return sub_24A2166A4();
}

uint64_t sub_24A1A9E88()
{
  sub_24A1AA2C4();
  return sub_24A2166B0();
}

uint64_t sub_24A1A9EB0()
{
  sub_24A1AA34C();
  return sub_24A2166A4();
}

uint64_t sub_24A1A9ED8()
{
  sub_24A1AA34C();
  return sub_24A2166B0();
}

uint64_t sub_24A1A9F00()
{
  sub_24A1AA308();
  return sub_24A2166A4();
}

uint64_t sub_24A1A9F28()
{
  sub_24A1AA308();
  return sub_24A2166B0();
}

void VASingleEnrollmentStatus.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_24A135F88(&qword_25790E748);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790E750);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_24A135F88(&qword_25790E758);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = sub_24A135F88(&qword_25790E760);
  MEMORY[0x24BDAC7A8](v12);
  v9 = sub_24A135F88(&qword_25790E768);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  sub_24A14B668(a1, a1[3]);
  sub_24A1AA23C();
  sub_24A21668C();
  __asm { BR              X9 }
}

uint64_t sub_24A1AA108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_24A1AA34C();
  sub_24A21650C();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_24A1AA23C()
{
  unint64_t result;

  result = qword_25791A650;
  if (!qword_25791A650)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D5B4, &type metadata for VASingleEnrollmentStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A650);
  }
  return result;
}

unint64_t sub_24A1AA280()
{
  unint64_t result;

  result = qword_25791A658;
  if (!qword_25791A658)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D564, &type metadata for VASingleEnrollmentStatus.LossyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A658);
  }
  return result;
}

unint64_t sub_24A1AA2C4()
{
  unint64_t result;

  result = qword_25791A660;
  if (!qword_25791A660)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D514, &type metadata for VASingleEnrollmentStatus.NoSpeechCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A660);
  }
  return result;
}

unint64_t sub_24A1AA308()
{
  unint64_t result;

  result = qword_25791A668;
  if (!qword_25791A668)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D4C4, &type metadata for VASingleEnrollmentStatus.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A668);
  }
  return result;
}

unint64_t sub_24A1AA34C()
{
  unint64_t result;

  result = qword_25791A670;
  if (!qword_25791A670)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D474, &type metadata for VASingleEnrollmentStatus.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791A670);
  }
  return result;
}

uint64_t VASingleEnrollmentStatus.hashValue.getter()
{
  sub_24A216638();
  sub_24A216644();
  return sub_24A21665C();
}

uint64_t VASingleEnrollmentStatus.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = sub_24A135F88(&qword_25790E770);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_24A135F88(&qword_25790E778);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790E780);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_24A135F88(&qword_25790E788);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = sub_24A135F88(&qword_25790E790);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  sub_24A14B668(a1, v14);
  sub_24A1AA23C();
  v15 = v28;
  sub_24A216674();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_24A216500();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_24A216344();
    swift_allocError();
    v19 = v18;
    sub_24A135F88(&qword_25790E590);
    *v19 = &type metadata for VASingleEnrollmentStatus;
    sub_24A21647C();
    sub_24A216338();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return sub_24A14D184((uint64_t)v27);
}

uint64_t sub_24A1AA858@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VASingleEnrollmentStatus.init(from:)(a1, a2);
}

void sub_24A1AA86C(_QWORD *a1)
{
  VASingleEnrollmentStatus.encode(to:)(a1);
}

uint64_t VASingleEnrollmentData.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_24A2157A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t VASingleEnrollmentData.embeddings.getter()
{
  type metadata accessor for VASingleEnrollmentData();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for VASingleEnrollmentData()
{
  uint64_t result;

  result = qword_25791A980;
  if (!qword_25791A980)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t VASingleEnrollmentData.keywordIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for VASingleEnrollmentData() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t VASingleEnrollmentData.debugAudioSamples.getter()
{
  type metadata accessor for VASingleEnrollmentData();
  return swift_bridgeObjectRetain();
}

uint64_t VASingleEnrollmentData.debugStartFrame.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for VASingleEnrollmentData() + 32));
}

uint64_t VASingleEnrollmentData.debugStartFrame.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for VASingleEnrollmentData();
  *(_QWORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

double (*VASingleEnrollmentData.debugStartFrame.modify())(_QWORD)
{
  type metadata accessor for VASingleEnrollmentData();
  return nullsub_1;
}

uint64_t VASingleEnrollmentData.debugEndFrame.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for VASingleEnrollmentData() + 36));
}

uint64_t VASingleEnrollmentData.debugEndFrame.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for VASingleEnrollmentData();
  *(_QWORD *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

double (*VASingleEnrollmentData.debugEndFrame.modify())(_QWORD)
{
  type metadata accessor for VASingleEnrollmentData();
  return nullsub_1;
}

uint64_t VASingleEnrollmentData.status.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for VASingleEnrollmentData();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_24A1AAA88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A1AAAB0 + 4 * byte_24A21CE7C[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_24A1AAAB0()
{
  return 0x6E69646465626D65;
}

unint64_t sub_24A1AAACC()
{
  return 0xD000000000000011;
}

uint64_t sub_24A1AAAF4()
{
  return 0x6174536775626564;
}

uint64_t sub_24A1AAB18()
{
  return 0x646E456775626564;
}

uint64_t sub_24A1AAB3C()
{
  return 0x737574617473;
}

uint64_t sub_24A1AAB50()
{
  unsigned __int8 *v0;

  return sub_24A1AAA88(*v0);
}

uint64_t sub_24A1AAB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24A1AC4C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1AAB7C()
{
  sub_24A1AAE90();
  return sub_24A2166A4();
}

uint64_t sub_24A1AABA4()
{
  sub_24A1AAE90();
  return sub_24A2166B0();
}

uint64_t VASingleEnrollmentData.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = sub_24A135F88(&qword_25790E798);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A14B668(a1, a1[3]);
  sub_24A1AAE90();
  sub_24A21668C();
  LOBYTE(v12) = 0;
  sub_24A2157A4();
  sub_24A1AB374(&qword_25790AF50, MEMORY[0x24BDCEA70]);
  sub_24A216560();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for VASingleEnrollmentData();
    v12 = *(_QWORD *)(v3 + v9[5]);
    HIBYTE(v11) = 1;
    sub_24A135F88(&qword_25790BA70);
    sub_24A1AB3B4(&qword_25790E7A0, &qword_25790E7A8, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
    sub_24A216560();
    LOBYTE(v12) = 2;
    sub_24A216530();
    v12 = *(_QWORD *)(v3 + v9[7]);
    HIBYTE(v11) = 3;
    sub_24A135F88(&qword_25790A458);
    sub_24A1AB434(&qword_25790E7A8, MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
    sub_24A216524();
    LOBYTE(v12) = 4;
    sub_24A216554();
    LOBYTE(v12) = 5;
    sub_24A216554();
    LOBYTE(v12) = *(_BYTE *)(v3 + v9[10]);
    HIBYTE(v11) = 6;
    sub_24A1AAED4();
    sub_24A216560();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24A1AAE90()
{
  unint64_t result;

  result = qword_25791A678[0];
  if (!qword_25791A678[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D424, &type metadata for VASingleEnrollmentData.CodingKeys);
    atomic_store(result, qword_25791A678);
  }
  return result;
}

unint64_t sub_24A1AAED4()
{
  unint64_t result;

  result = qword_25790E7B0;
  if (!qword_25790E7B0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASingleEnrollmentStatus, &type metadata for VASingleEnrollmentStatus);
    atomic_store(result, (unint64_t *)&qword_25790E7B0);
  }
  return result;
}

uint64_t VASingleEnrollmentData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v22 = a2;
  v24 = sub_24A2157A4();
  v26 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_24A135F88(&qword_25790E7B8);
  v23 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for VASingleEnrollmentData();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(int *)(v7 + 32);
  *(_QWORD *)&v9[v10] = -1;
  v11 = *(int *)(v7 + 36);
  *(_QWORD *)&v9[v11] = -1;
  sub_24A14B668(a1, a1[3]);
  sub_24A1AAE90();
  v27 = v5;
  v12 = v29;
  sub_24A216674();
  if (v12)
    return sub_24A14D184((uint64_t)a1);
  v29 = v10;
  v21 = v11;
  v13 = v23;
  v14 = v26;
  LOBYTE(v31) = 0;
  sub_24A1AB374(&qword_25790E7C0, MEMORY[0x24BDCEAA8]);
  v15 = v24;
  v16 = v25;
  sub_24A2164F4();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v9, v16, v15);
  sub_24A135F88(&qword_25790BA70);
  v30 = 1;
  sub_24A1AB3B4(&qword_25790E7C8, &qword_25790E7D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  sub_24A2164F4();
  *(_QWORD *)&v9[v6[5]] = v31;
  LOBYTE(v31) = 2;
  v17 = sub_24A2164D0();
  v18 = (uint64_t *)&v9[v6[6]];
  *v18 = v17;
  v18[1] = v19;
  sub_24A135F88(&qword_25790A458);
  v30 = 3;
  sub_24A1AB434(&qword_25790E7D0, MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
  sub_24A2164B8();
  *(_QWORD *)&v9[v6[7]] = v31;
  LOBYTE(v31) = 4;
  *(_QWORD *)&v9[v29] = sub_24A2164E8();
  LOBYTE(v31) = 5;
  *(_QWORD *)&v9[v21] = sub_24A2164E8();
  v30 = 6;
  sub_24A1AB494();
  sub_24A2164F4();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v28);
  *(_BYTE *)v6[10] = v31;
  sub_24A1A85E8(0, v22);
  sub_24A14D184((uint64_t)a1);
  return sub_24A1AB4D8(0);
}

uint64_t sub_24A1AB374(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_24A2157A4();
    result = MEMORY[0x24BD0A9EC](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1AB3B4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_24A139148(&qword_25790BA70);
    v10 = sub_24A1AB434(a2, a3, a4);
    result = MEMORY[0x24BD0A9EC](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1AB434(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_24A139148(&qword_25790A458);
    v8 = a2;
    result = MEMORY[0x24BD0A9EC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A1AB494()
{
  unint64_t result;

  result = qword_25790E7D8;
  if (!qword_25790E7D8)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASingleEnrollmentStatus, &type metadata for VASingleEnrollmentStatus);
    atomic_store(result, (unint64_t *)&qword_25790E7D8);
  }
  return result;
}

uint64_t sub_24A1AB4D8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VASingleEnrollmentData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1AB514()
{
  return -1;
}

int *sub_24A1AB51C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  char v17;
  uint64_t v18;
  int *result;
  _QWORD *v20;

  v17 = *a8;
  v18 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a9, a1, v18);
  result = (int *)type metadata accessor for VASingleEnrollmentData();
  *(_QWORD *)(a9 + result[5]) = a2;
  v20 = (_QWORD *)(a9 + result[6]);
  *v20 = a3;
  v20[1] = a4;
  *(_QWORD *)(a9 + result[7]) = a5;
  *(_QWORD *)(a9 + result[8]) = a6;
  *(_QWORD *)(a9 + result[9]) = a7;
  *(_BYTE *)(a9 + result[10]) = v17;
  return result;
}

uint64_t sub_24A1AB5D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return VASingleEnrollmentData.init(from:)(a1, a2);
}

uint64_t sub_24A1AB5E8(_QWORD *a1)
{
  return VASingleEnrollmentData.encode(to:)(a1);
}

uint64_t VAEnrollmentProgress.samplesCollected.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t VAEnrollmentProgress.maxSamples.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t VAEnrollmentProgress.completed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_24A1AB614@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = a3;
  return result;
}

unint64_t sub_24A1AB624()
{
  unint64_t result;

  result = qword_25790E7E0;
  if (!qword_25790E7E0)
  {
    result = MEMORY[0x24BD0A9EC](&protocol conformance descriptor for VASingleEnrollmentStatus, &type metadata for VASingleEnrollmentStatus);
    atomic_store(result, (unint64_t *)&qword_25790E7E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus()
{
  return &type metadata for VASingleEnrollmentStatus;
}

_QWORD *initializeBufferWithCopyOfBuffer for VASingleEnrollmentData(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_24A2157A4();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[8];
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
    v13 = a3[10];
    *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for VASingleEnrollmentData(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for VASingleEnrollmentData(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_24A2157A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v12 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for VASingleEnrollmentData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A1ABA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_24A2157A4();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for VASingleEnrollmentData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A1ABB18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_24A2157A4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_24A1ABB90()
{
  uint64_t result;
  unint64_t v1;

  result = sub_24A2157A4();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for VAEnrollmentProgress(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for VAEnrollmentProgress(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VAEnrollmentProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for VAEnrollmentProgress()
{
  return &type metadata for VAEnrollmentProgress;
}

uint64_t dispatch thunk of VAAudioEnroller.addAudio(buffer:hostTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAAudioEnroller.getEnrollmentData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VAAudioEnroller.getEnrollmentProgress()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VAAudioEnrollerDelegate.enrollmentDidComplete(VASingleEnrollmentData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of VAAudioEnrollerFactory.makeAudioEnroller(keywordIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of VAAudioEnrollmentReceiving.setAudioEnrollments(enrollments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t storeEnumTagSinglePayload for VASingleEnrollmentData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24A1ABDAC + 4 * byte_24A21CE88[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24A1ABDE0 + 4 * byte_24A21CE83[v4]))();
}

uint64_t sub_24A1ABDE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1ABDE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1ABDF0);
  return result;
}

uint64_t sub_24A1ABDFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1ABE04);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24A1ABE08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1ABE10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentData.CodingKeys()
{
  return &type metadata for VASingleEnrollmentData.CodingKeys;
}

uint64_t _s12VoiceActions24VASingleEnrollmentStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24A1ABE78 + 4 * byte_24A21CE92[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24A1ABEAC + 4 * byte_24A21CE8D[v4]))();
}

uint64_t sub_24A1ABEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1ABEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A1ABEBCLL);
  return result;
}

uint64_t sub_24A1ABEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A1ABED0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24A1ABED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A1ABEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.CodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.NoneCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.SuccessCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.SuccessCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.NoSpeechCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.NoSpeechCodingKeys;
}

ValueMetadata *type metadata accessor for VASingleEnrollmentStatus.LossyCodingKeys()
{
  return &type metadata for VASingleEnrollmentStatus.LossyCodingKeys;
}

unint64_t sub_24A1ABF3C()
{
  unint64_t result;

  result = qword_25791AE90[0];
  if (!qword_25791AE90[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D344, &type metadata for VASingleEnrollmentStatus.CodingKeys);
    atomic_store(result, qword_25791AE90);
  }
  return result;
}

unint64_t sub_24A1ABF84()
{
  unint64_t result;

  result = qword_25791B0A0[0];
  if (!qword_25791B0A0[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D3FC, &type metadata for VASingleEnrollmentData.CodingKeys);
    atomic_store(result, qword_25791B0A0);
  }
  return result;
}

unint64_t sub_24A1ABFCC()
{
  unint64_t result;

  result = qword_25791B1B0;
  if (!qword_25791B1B0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D36C, &type metadata for VASingleEnrollmentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B1B0);
  }
  return result;
}

unint64_t sub_24A1AC014()
{
  unint64_t result;

  result = qword_25791B1B8[0];
  if (!qword_25791B1B8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D394, &type metadata for VASingleEnrollmentData.CodingKeys);
    atomic_store(result, qword_25791B1B8);
  }
  return result;
}

unint64_t sub_24A1AC05C()
{
  unint64_t result;

  result = qword_25791B240;
  if (!qword_25791B240)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D264, &type metadata for VASingleEnrollmentStatus.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B240);
  }
  return result;
}

unint64_t sub_24A1AC0A4()
{
  unint64_t result;

  result = qword_25791B248[0];
  if (!qword_25791B248[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D28C, &type metadata for VASingleEnrollmentStatus.NoneCodingKeys);
    atomic_store(result, qword_25791B248);
  }
  return result;
}

unint64_t sub_24A1AC0EC()
{
  unint64_t result;

  result = qword_25791B2D0;
  if (!qword_25791B2D0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D214, &type metadata for VASingleEnrollmentStatus.SuccessCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B2D0);
  }
  return result;
}

unint64_t sub_24A1AC134()
{
  unint64_t result;

  result = qword_25791B2D8[0];
  if (!qword_25791B2D8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D23C, &type metadata for VASingleEnrollmentStatus.SuccessCodingKeys);
    atomic_store(result, qword_25791B2D8);
  }
  return result;
}

unint64_t sub_24A1AC17C()
{
  unint64_t result;

  result = qword_25791B360;
  if (!qword_25791B360)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D1C4, &type metadata for VASingleEnrollmentStatus.NoSpeechCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B360);
  }
  return result;
}

unint64_t sub_24A1AC1C4()
{
  unint64_t result;

  result = qword_25791B368[0];
  if (!qword_25791B368[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D1EC, &type metadata for VASingleEnrollmentStatus.NoSpeechCodingKeys);
    atomic_store(result, qword_25791B368);
  }
  return result;
}

unint64_t sub_24A1AC20C()
{
  unint64_t result;

  result = qword_25791B3F0;
  if (!qword_25791B3F0)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D174, &type metadata for VASingleEnrollmentStatus.LossyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B3F0);
  }
  return result;
}

unint64_t sub_24A1AC254()
{
  unint64_t result;

  result = qword_25791B3F8[0];
  if (!qword_25791B3F8[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D19C, &type metadata for VASingleEnrollmentStatus.LossyCodingKeys);
    atomic_store(result, qword_25791B3F8);
  }
  return result;
}

unint64_t sub_24A1AC29C()
{
  unint64_t result;

  result = qword_25791B480;
  if (!qword_25791B480)
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D2B4, &type metadata for VASingleEnrollmentStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25791B480);
  }
  return result;
}

unint64_t sub_24A1AC2E4()
{
  unint64_t result;

  result = qword_25791B488[0];
  if (!qword_25791B488[0])
  {
    result = MEMORY[0x24BD0A9EC](&unk_24A21D2DC, &type metadata for VASingleEnrollmentStatus.CodingKeys);
    atomic_store(result, qword_25791B488);
  }
  return result;
}

uint64_t sub_24A1AC328(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73736563637573 && a2 == 0xE700000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6863656570536F6ELL && a2 == 0xE800000000000000 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7973736F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_24A1AC4C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646465626D65 && a2 == 0xEA00000000007367 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A225030 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A225050 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6174536775626564 && a2 == 0xEF656D6172467472 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x646E456775626564 && a2 == 0xED0000656D617246 || (sub_24A21659C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_24A21659C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_24A1AC838()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9C1B8);
  swift_arrayDestroy();
  return v0;
}

id sub_24A1AC87C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  id v7;

  if (a1 == 0xD000000000000010 && a2 == 0x800000024A225070 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 12;
  }
  else
  {
    if ((a1 != 0x62616C5F74786574 || a2 != 0xEB00000000736C65) && (sub_24A21659C() & 1) == 0)
      return 0;
    v5 = 15;
  }
  v6 = (void *)(*(uint64_t (**)(void))(*v2 + 8 * v5))();
  v7 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, v6);

  return v7;
}

uint64_t sub_24A1ACA00(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_24A1ACA3C()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_24A1ACB8C(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x74757074756FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1ACCB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1ACE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1ACF00()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1ACF80;
  return sub_24A2161AC();
}

uint64_t sub_24A1ACF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1ACFFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for at_verifier_rdr_125141826();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1AD040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for at_verifier_rdr_125141826Output();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1AD114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1AD130()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1AD188;
  return sub_24A216194();
}

uint64_t sub_24A1AD188(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1AD204()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for at_verifier_rdr_125141826Output();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1AD248(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  id v7;
  id v8;
  uint64_t v9;

  type metadata accessor for at_verifier_rdr_125141826Input();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136);
  v7 = a1;
  v8 = a2;
  v9 = v6(v5);
  swift_release();
  return v9;
}

uint64_t sub_24A1AD2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v4 = sub_24A135F88(&qword_25790C778);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v21 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v21 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14((char *)v21 - v12, a1, v4);
  v14(v11, a2, v4);
  sub_24A16D544(0, (unint64_t *)&qword_25790C780);
  v14(v8, (uint64_t)v13, v4);
  sub_24A18C9D0();
  v15 = sub_24A2160E0();
  v14(v8, (uint64_t)v11, v4);
  v16 = sub_24A2160E0();
  type metadata accessor for at_verifier_rdr_125141826Input();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v11, v4);
  v18(v13, v4);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21[1] + 136))(v17);
  swift_release();
  return v19;
}

void sub_24A1AD480(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for at_verifier_rdr_125141826Output();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1AD754()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1AD778(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for at_verifier_rdr_125141826();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for at_verifier_rdr_125141826()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for at_verifier_rdr_125141826Output()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for at_verifier_rdr_125141826Input()
{
  return objc_opt_self();
}

uint64_t static VAA2TBuilder.buildSpotterForAudioToTextV2(delegate:jsonConfigFilename:computeUnits:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _OWORD v32[2];
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;

  v7 = *a4;
  v8 = type metadata accessor for VAConfiguration();
  v9 = static VAConfiguration.buildForFlexibleA2Tv2()();
  if (a3)
  {
    v10 = static VAConfiguration.buildFromConfigFile(jsonFile:)();
    if (v4)
    {
LABEL_6:

      return v8;
    }
    v11 = (void *)v10;

    v9 = v11;
  }
  v12 = type metadata accessor for VAA2TEncoderV2();
  LOBYTE(v34[0]) = v7;
  v8 = v12;
  v13 = VAA2TEncoderV2.__allocating_init(computeUnits:)();
  if (v4)
    goto LABEL_6;
  v14 = v13;
  v15 = type metadata accessor for VAA2TVerifierV2();
  LOBYTE(v32[0]) = v7;
  v35 = type metadata accessor for VAMemoryBackedLexicon();
  v36 = &off_251B99DF0;
  v34[0] = sub_24A16D60C();
  v17 = sub_24A18CDC8((unsigned __int8 *)v32, (uint64_t)v34);
  type metadata accessor for VAResultGeneratorVerifier();
  v35 = v15;
  v36 = &protocol witness table for VAA2TVerifierV2;
  v34[0] = v17;
  swift_retain();
  v18 = v9;
  v19 = VAResultGeneratorVerifier.__allocating_init(subVerifier:config:)((uint64_t)v34, (uint64_t)v18);
  type metadata accessor for VASilenceModel();
  v20 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v18) + 0xE0))();
  v22 = sub_24A1A446C(v20, v21);
  v37 = v19;
  type metadata accessor for VAFeatureExtract();
  v23 = VAFeatureExtract.__allocating_init()();
  type metadata accessor for VAFeatureExtractingEncoder();
  v35 = v12;
  v36 = &protocol witness table for VAA2TEncoderV2;
  v34[0] = v14;
  v24 = v18;
  swift_retain();
  v25 = v23;
  swift_retain();
  v26 = sub_24A1516F0();
  v31 = v25;
  v27 = VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)((uint64_t)v34, v25, v22, v24, v26 & 1);
  v28 = type metadata accessor for VAStrategyProviderPassthrough();
  v29 = sub_24A1801F4();
  type metadata accessor for VAFlexibleKeywordSpotter();
  v35 = v28;
  v36 = &protocol witness table for VAStrategyProviderPassthrough;
  v33 = 0;
  v34[0] = v29;
  memset(v32, 0, sizeof(v32));
  swift_unknownObjectRetain();
  v30 = v37;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = (uint64_t)VAFlexibleKeywordSpotter.__allocating_init(delegate:verifier:encoder:configuration:strategyProvider:runtimeParametersFactory:)(a1, v30, v27, (uint64_t)v24, (uint64_t)v34, (uint64_t)v32);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v8;
}

uint64_t VAA2TBuilder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t VAA2TBuilder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VAA2TBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAA2TBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_24A1ADBE0()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_24A1ADC14();
  return v0;
}

void sub_24A1ADC14()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = sub_24A215540();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *sub_24A1B12E4();
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v1[2] = v6;
  v7 = sub_24A1B12C8();
  if (*v7 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = ceilf(log2f((float)(2 * *v7)));
  if ((~LODWORD(v8) & 0x7F800000) == 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v8 >= 1.8447e19)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v1[4] = 0;
  v1[3] = (unint64_t)v8;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEDFB60], v2);
  type metadata accessor for DSPSplitComplex();
  sub_24A135F88(&qword_25790B7F8);
  swift_allocObject();
  v9 = sub_24A215528();
  if (v9)
  {
    v10 = v9;
    swift_beginAccess();
    v1[4] = v10;
    swift_release();
    return;
  }
LABEL_13:
  __break(1u);
}

char *sub_24A1ADD8C(uint64_t a1)
{
  char *realp;
  float v2;
  vDSP_Length v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  vDSP_Length v21;
  float *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  DSPSplitComplex __A;
  DSPSplitComplex v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)realp + 2);
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_31;
  if (v3)
  {
    v5 = sub_24A215EF4();
    *(_QWORD *)(v5 + 16) = v3;
    bzero((void *)(v5 + 32), 4 * v3);
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      goto LABEL_14;
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
    v6 = *(_QWORD *)(a1 + 16);
    if (!v6)
      goto LABEL_14;
  }
  if (v6 > *(_QWORD *)(v5 + 16))
  {
    __break(1u);
    goto LABEL_34;
  }
  v7 = 0;
  if (v6 < 8)
    goto LABEL_12;
  if ((unint64_t)(v5 - a1) < 0x20)
    goto LABEL_12;
  v7 = v6 & 0x7FFFFFFFFFFFFFF8;
  v8 = (__int128 *)(a1 + 48);
  v9 = (_OWORD *)(v5 + 48);
  v10 = v6 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v11 = *v8;
    *(v9 - 1) = *(v8 - 1);
    *v9 = v11;
    v8 += 2;
    v9 += 2;
    v10 -= 8;
  }
  while (v10);
  if (v6 != v7)
  {
LABEL_12:
    v12 = v6 - v7;
    v13 = 4 * v7 + 32;
    v14 = (_DWORD *)(v5 + v13);
    v15 = (int *)(a1 + v13);
    do
    {
      v16 = *v15++;
      *v14++ = v16;
      --v12;
    }
    while (v12);
  }
LABEL_14:
  if (v3)
  {
    v17 = sub_24A215EF4();
    *(_QWORD *)(v17 + 16) = v3;
    bzero((void *)(v17 + 32), 4 * v3);
    v18 = sub_24A215EF4();
    *(_QWORD *)(v18 + 16) = v3;
    bzero((void *)(v18 + 32), 4 * v3);
    v19 = sub_24A215EF4();
    *(_QWORD *)(v19 + 16) = v3;
    bzero((void *)(v19 + 32), 4 * v3);
    v20 = sub_24A215EF4();
    *(_QWORD *)(v20 + 16) = v3;
    bzero((void *)(v20 + 32), 4 * v3);
  }
  else
  {
    v20 = MEMORY[0x24BEE4AF8];
    v18 = MEMORY[0x24BEE4AF8];
    v19 = MEMORY[0x24BEE4AF8];
  }
  v31.realp = (float *)(v18 + 32);
  v31.imagp = (float *)(v19 + 32);
  if (!(*(uint64_t (**)(void))(*(_QWORD *)realp + 104))())
LABEL_34:
    __break(1u);
  sub_24A215534();
  swift_release();
  v21 = *(_QWORD *)(v20 + 16);
  __A = v31;
  vDSP_zvabs(&__A, 1, (float *)(v20 + 32), 1, v21);
  v22 = (float *)MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v23 = sub_24A215EF4();
    *(_QWORD *)(v23 + 16) = v3;
    bzero((void *)(v23 + 32), 4 * v3);
  }
  else
  {
    v23 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  vDSP_vmul((const float *)(v20 + 32), 1, (const float *)(v20 + 32), 1, (float *)(v23 + 32), 1, v3);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    realp = (char *)MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_27;
    goto LABEL_30;
  }
  v31.realp = v22;
  swift_bridgeObjectRetain();
  sub_24A148BB8(0, v24, 0);
  v25 = 0;
  realp = (char *)v31.realp;
  v26 = *((_QWORD *)v31.realp + 2);
  v2 = 0.25;
  do
  {
    v27 = *(float *)(v23 + 4 * v25 + 32);
    v31.realp = (float *)realp;
    v28 = *((_QWORD *)realp + 3);
    if (v26 >= v28 >> 1)
    {
      sub_24A148BB8(v28 > 1, v26 + 1, 1);
      realp = (char *)v31.realp;
    }
    ++v25;
    *((_QWORD *)realp + 2) = v26 + 1;
    *(float *)&realp[4 * v26++ + 32] = v27 * 0.25;
  }
  while (v24 != v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*((_QWORD *)realp + 2))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
LABEL_27:
  v2 = *((float *)realp + 8);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_32:
    realp = sub_24A148928((uint64_t)realp);
  *((float *)realp + 8) = v2 * 0.5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return realp;
}

uint64_t sub_24A1AE174()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FFTCalculator()
{
  return objc_opt_self();
}

uint64_t sub_24A1AE238()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9C220);
  swift_arrayDestroy();
  return v0;
}

id sub_24A1AE27C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  id v7;

  if (a1 == 0xD000000000000010 && a2 == 0x800000024A225070 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 14;
  }
  else if (a1 == 0x62616C5F74786574 && a2 == 0xEB00000000736C65 || (sub_24A21659C() & 1) != 0)
  {
    v5 = 17;
  }
  else if (a1 == 0x656C5F6F69647561 && a2 == 0xE90000000000006ELL || (sub_24A21659C() & 1) != 0)
  {
    v5 = 20;
  }
  else
  {
    if ((a1 != 0x6E656C5F74786574 || a2 != 0xE800000000000000) && (sub_24A21659C() & 1) == 0)
      return 0;
    v5 = 23;
  }
  v6 = (void *)(*(uint64_t (**)(void))(*v2 + 8 * v5))();
  v7 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, v6);

  return v7;
}

void sub_24A1AE4B0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_24A215C90();
  v3 = objc_msgSend(v1, sel_featureValueForName_, v2);

  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = objc_msgSend(v3, sel_multiArrayValue);

  if (!v4)
LABEL_5:
    __break(1u);
}

uint64_t sub_24A1AE664(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x3739315F726176;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1AE790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1AE944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1AE9DC()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1AEA5C;
  return sub_24A2161AC();
}

uint64_t sub_24A1AEA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1AEAD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _20enrollments_quant_all_verifier_aa();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1AEB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1AEBF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1AEC0C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1AEC64;
  return sub_24A216194();
}

uint64_t sub_24A1AEC64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1AECE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1AED24(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for _20enrollments_quant_all_verifier_aaInput();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A1AEDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790C778);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for _20enrollments_quant_all_verifier_aaInput();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A190054((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A1AEF38(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for _20enrollments_quant_all_verifier_aaOutput();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1AF20C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1AF230(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for _20enrollments_quant_all_verifier_aa();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aa()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aaOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for _20enrollments_quant_all_verifier_aaInput()
{
  return objc_opt_self();
}

uint64_t sub_24A1AF314()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1AF348(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t sub_24A1AF38C()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_24A1AF3C0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t sub_24A1AF404@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_beginAccess();
  v3 = v1[13];
  v4 = v1[14];
  v5 = v1[15];
  v6 = v1[16];
  v8 = v1[17];
  v7 = v1[18];
  result = sub_24A1AF488(v3, v4, v5, v6, v8);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v8;
  a1[5] = v7;
  return result;
}

uint64_t sub_24A1AF488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a5)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24A1AF4B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v3 = v1[13];
  v4 = v1[14];
  v5 = v1[15];
  v6 = v1[16];
  v7 = v1[17];
  sub_24A1AF540(a1, (uint64_t)(v1 + 13));
  return sub_24A18B000(v3, v4, v5, v6, v7);
}

uint64_t sub_24A1AF540(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_24A135F88(&qword_25790EFA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_24A1AF588())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1AF5C4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 72)) + 0x80))();
  v3 = (*(uint64_t (**)(void))((*v1 & *v2) + 0x100))();

  return v3;
}

uint64_t VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v10;

  swift_allocObject();
  v10 = sub_24A1B00D4(a1, a2, a3, a4, a5);

  swift_release();
  return v10;
}

uint64_t VAFeatureExtractingEncoder.init(subEncoder:featureExtractor:vadModel:config:useCMVN:)(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v7;

  v7 = sub_24A1B00D4(a1, a2, a3, a4, a5);

  swift_release();
  return v7;
}

void sub_24A1AF710()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD);

  v2 = (_QWORD *)v0;
  type metadata accessor for VACircularMatrixBuffer();
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v4 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 72)) + 0x80);
  v5 = (_QWORD *)v4();
  v6 = (*(uint64_t (**)(void))((*v3 & *v5) + 0x178))();

  v7 = (_QWORD *)v4();
  v8 = (*(uint64_t (**)(void))((*v3 & *v7) + 0x148))();

  v9 = sub_24A1D3E00(v6, v8);
  v10 = (*(uint64_t (**)(_QWORD *))(*v2 + 216))(v9);
  if (v2[8])
  {
    v11 = (_QWORD *)((uint64_t (*)(uint64_t))v4)(v10);
    v12 = (*(uint64_t (**)(void))((*v3 & *v11) + 0x148))();

    v13 = sub_24A1D3E00(66, v12);
    v10 = (*(uint64_t (**)(_QWORD *))(*v2 + 240))(v13);
  }
  v14 = (_QWORD *)((uint64_t (*)(uint64_t))v4)(v10);
  (*(void (**)(void))((*v3 & *v14) + 0x178))();

  v15 = *(uint64_t (**)(_QWORD))(*v2 + 192);
  v16 = v15(0);
  v17 = (_QWORD *)((uint64_t (*)(uint64_t))v4)(v16);
  v18 = (*(uint64_t (**)(void))((*v3 & *v17) + 0x118))();

  if (v18 < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }
  if (v18)
  {
    v19 = sub_24A215EF4();
    *(_QWORD *)(v19 + 16) = v18;
    bzero((void *)(v19 + 32), 4 * v18);
  }
  else
  {
    v19 = MEMORY[0x24BEE4AF8];
  }
  v20 = (_QWORD *)v4();
  v21 = (*(uint64_t (**)(void))((*v3 & *v20) + 0x178))();

  if (v21 < 0)
    goto LABEL_15;
  if (v21)
  {
    v22 = *(void (**)(uint64_t, _QWORD))(*v2 + 312);
    while (1)
    {
      v22(v19, 0);
      if (v1)
        break;
      swift_release();
      if (!--v21)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    v15(0);
  }
}

uint64_t sub_24A1AF968(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 312))(a1, 2);
}

void sub_24A1AF988(uint64_t a1, char a2)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(_BYTE *, _QWORD);
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE v46[32];
  uint64_t v47[6];
  char v48[32];
  uint64_t v49;
  uint64_t (*v50)(void);

  v4 = v3;
  v5 = v2;
  v8 = ((uint64_t (*)(void))(*v2)[26])();
  if (!v8)
  {
    sub_24A14C404();
    swift_allocError();
    *v23 = 0xD000000000000035;
    v23[1] = 0x800000024A225350;
    swift_willThrow();
    return;
  }
  v9 = v8;
  v10 = (uint64_t (*)(void))(*v2)[23];
  if (v10() < 0)
  {
    sub_24A14C404();
    swift_allocError();
    v25 = 0xD00000000000002ALL;
    v26 = "VAFeatureExtractingEncoder not initialized";
LABEL_15:
    *v24 = v25;
    v24[1] = (unint64_t)(v26 - 32) | 0x8000000000000000;
    swift_willThrow();
LABEL_16:
    swift_release();
    return;
  }
  v11 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v50 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v2[9]) + 0x80);
  v12 = (_QWORD *)v50();
  v13 = (*(uint64_t (**)(void))((*v11 & *v12) + 0x118))();

  if (*(_QWORD *)(a1 + 16) != v13)
  {
    sub_24A14C404();
    swift_allocError();
    v25 = 0xD000000000000033;
    v26 = "Unexpected number of samples for feature extraction";
    goto LABEL_15;
  }
  v14 = (void (*)(_BYTE *, _QWORD))((uint64_t (*)(_BYTE *))(*v5)[25])(v46);
  if (__OFADD__(*v15, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  ++*v15;
  v14(v46, 0);
  v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v5[7]) + 0x170))(a1);
  v17 = v5[8];
  if (v17)
  {
    v18 = ((uint64_t (*)(void))(*v5)[29])();
    if (v18)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 168))(v16);
      swift_release();
    }
  }
  v45 = v17;
  ((void (*)(uint64_t *__return_ptr))(*v5)[32])(v47);
  sub_24A1B0248(v47);
  sub_24A1AF540((uint64_t)v47, (uint64_t)v48);
  if (v49)
  {
    v19 = ((uint64_t (*)(_BYTE *))(*v5)[34])(v46);
    if (!*(_QWORD *)(v20 + 32))
    {
LABEL_35:
      __break(1u);
      return;
    }
    v21 = (void (*)(_BYTE *, uint64_t))v19;
    v22 = sub_24A1DEFCC(v16);
    if (v3)
    {
      v21(v46, 1);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    v27 = v22;
    swift_bridgeObjectRelease();
    v21(v46, 0);
    v16 = v27;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 168))(v16);
  v28 = swift_bridgeObjectRelease();
  if (a2 != 2)
  {
    if ((a2 & 1) == 0)
      goto LABEL_23;
    goto LABEL_25;
  }
  v29 = ((uint64_t (*)(uint64_t))v10)(v28);
  v30 = (_QWORD *)v50();
  v31 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v30) + 0x160))();

  if (!v31)
    goto LABEL_33;
  if (v29 == 0x8000000000000000 && v31 == -1)
    goto LABEL_34;
  if (v29 % v31)
  {
LABEL_23:
    v32 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 176))();
    swift_release();
    type metadata accessor for VAFeatureExtractingEncoderOutput();
    v33 = swift_allocObject();
    *(_BYTE *)(v33 + 16) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 40) = 0;
    *(_QWORD *)(v33 + 24) = v32;
    return;
  }
LABEL_25:
  v34 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 176))();
  if (!v45)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    sub_24A14C404();
    swift_allocError();
    v25 = 0xD000000000000024;
    v26 = "VAD not initialized for flex spotter";
    goto LABEL_15;
  }
  v35 = (uint64_t (*)(uint64_t))(*v5)[29];
  v36 = swift_retain();
  v37 = v35(v36);
  if (!v37)
  {
    swift_release();
    goto LABEL_30;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 176))();
  v38 = (*(uint64_t (**)(void))(*v45 + 128))();
  if (v4)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v39 = v38;
  swift_bridgeObjectRelease();
  v40 = v5 + 2;
  v42 = (uint64_t)v5[5];
  v41 = v5[6];
  sub_24A14B668(v40, v42);
  v43 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *))v41[1])(v34, v42, v41);
  swift_release();
  swift_release();
  swift_release();
  type metadata accessor for VAFeatureExtractingEncoderOutput();
  v44 = swift_allocObject();
  *(_BYTE *)(v44 + 16) = 1;
  *(_QWORD *)(v44 + 24) = v34;
  *(_QWORD *)(v44 + 32) = v39;
  *(_QWORD *)(v44 + 40) = v43;
}

uint64_t VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  return result;
}

void sub_24A1AFF20()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_24A1AFF4C()
{
  uint64_t v0;

  sub_24A14D184(v0 + 16);

  swift_release();
  swift_release();
  swift_release();
  return sub_24A18B000(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t VAFeatureExtractingEncoder.deinit()
{
  uint64_t v0;

  v0 = VAAudioEncoderModel.deinit();
  sub_24A14D184(v0 + 16);

  swift_release();
  swift_release();
  swift_release();
  sub_24A18B000(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  return v0;
}

uint64_t VAFeatureExtractingEncoder.__deallocating_deinit()
{
  VAFeatureExtractingEncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1B0018()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t sub_24A1B0034()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t VAFeatureExtractingEncoderOutput.hasNewFeature.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t VAFeatureExtractingEncoderOutput.featureExtractionBuffer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.vadBuffer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.encoderOutput.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VAFeatureExtractingEncoderOutput.init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = a4;
  return v4;
}

uint64_t VAFeatureExtractingEncoderOutput.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t VAFeatureExtractingEncoderOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_24A1B00D4(uint64_t a1, void *a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v32[6];

  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_QWORD *)(v5 + 56) = a2;
  sub_24A152310(a1, v5 + 16);
  *(_QWORD *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 80) = -1;
  swift_retain();
  v12 = a4;
  swift_retain();
  v13 = a2;
  if ((a5 & 1) != 0)
  {
    v14 = sub_24A1DED98();
    v15 = sub_24A1DEDA0();
    v16 = sub_24A173568();
    sub_24A1DEDA8(v14, v15, v16, v32);
    v17 = v32[0];
    v18 = v32[1];
    v19 = v32[2];
    v20 = v32[3];
    v22 = v32[4];
    v21 = v32[5];
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v22 = 0;
    v21 = 0;
  }
  swift_beginAccess();
  v23 = *(_QWORD *)(v5 + 104);
  v24 = *(_QWORD *)(v5 + 112);
  v25 = *(_QWORD *)(v5 + 120);
  v26 = *(_QWORD *)(v5 + 128);
  v27 = *(_QWORD *)(v5 + 136);
  *(_QWORD *)(v5 + 104) = v17;
  *(_QWORD *)(v5 + 112) = v18;
  *(_QWORD *)(v5 + 120) = v19;
  *(_QWORD *)(v5 + 128) = v20;
  *(_QWORD *)(v5 + 136) = v22;
  *(_QWORD *)(v5 + 144) = v21;
  sub_24A18B000(v23, v24, v25, v26, v27);
  swift_release();
  v28 = sub_24A180204();
  v29 = *(void (**)(uint64_t))(*(_QWORD *)v28 + 296);
  v30 = swift_retain();
  v29(v30);
  swift_release();
  if (v6)
    swift_release();
  sub_24A14D184(a1);
  return v28;
}

uint64_t *sub_24A1B0248(uint64_t *a1)
{
  sub_24A18B000(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t type metadata accessor for VAFeatureExtractingEncoderOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VAFeatureExtractingEncoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for VAFeatureExtractingEncoder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.processingWindowSampleCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.__allocating_init(subEncoder:featureExtractor:vadModel:config:useCMVN:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.predict(currFrame:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoder.predict(currFrame:forceEncoderCall:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t method lookup function for VAFeatureExtractingEncoderOutput()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VAFeatureExtractingEncoderOutput.__allocating_init(hasNewFeature:featureExtractionBuffer:vadBuffer:encoderOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of VAFeatureExtractionConsuming.predict(featureExtractionBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_24A1B03D0()
{
  uint64_t v0;

  v0 = sub_24A18C830((uint64_t)&unk_251B9C2D0);
  swift_arrayDestroy();
  return v0;
}

uint64_t sub_24A1B0598(void *a1)
{
  uint64_t v2;
  uint64_t inited;
  id v4;
  id v5;
  id v6;

  v2 = swift_allocObject();
  sub_24A135F88(&qword_25790C790);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A218650;
  *(_QWORD *)(inited + 32) = 0x3739315F726176;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v4 = objc_msgSend((id)objc_opt_self(), sel_featureValueWithMultiArray_, a1);
  *(_QWORD *)(inited + 72) = sub_24A16D544(0, &qword_25790C798);
  *(_QWORD *)(inited + 48) = v4;
  sub_24A18B6F8(inited);
  v5 = objc_allocWithZone(MEMORY[0x24BDBFF88]);
  v6 = sub_24A18C690();

  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A1B06C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v16;

  v2 = sub_24A215750();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24A135F88(&qword_25790BCF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24A17DDE0();
  if (!v9)
  {
    __break(1u);
    goto LABEL_6;
  }
  v10 = v9;
  v11 = (void *)sub_24A215C90();
  v12 = (void *)sub_24A215C90();
  v13 = objc_msgSend(v10, sel_URLForResource_withExtension_, v11, v12);

  if (!v13)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  sub_24A215738();

  v14 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v14(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {

    return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v8, v2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1B0878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_24A16D544(0, qword_25790C7A0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  swift_retain();
  sub_24A2161A0();
  return swift_release();
}

uint64_t sub_24A1B0910()
{
  uint64_t v0;
  _QWORD *v1;

  sub_24A16D544(0, qword_25790C7A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_24A1B0990;
  return sub_24A2161AC();
}

uint64_t sub_24A1B0990(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1B0A0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for _3enrollments_quant_all_verifier_aa();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1B0A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = *(void **)(v2 + 16);
  v12[0] = 0;
  v6 = objc_msgSend(v5, sel_predictionFromFeatures_options_error_, a1, a2, v12);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v8;
    v9 = v7;
  }
  else
  {
    v10 = v12[0];
    sub_24A2156F0();

    swift_willThrow();
  }
  return v3;
}

uint64_t sub_24A1B0B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24A1B0B40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_24A1B0B98;
  return sub_24A216194();
}

uint64_t sub_24A1B0B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch();
}

uint64_t sub_24A1B0C14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1B0C58(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v10)(_QWORD *);
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;

  type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v10 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v4 + 136);
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v10(v9);
  swift_release();
  return v15;
}

uint64_t sub_24A1B0CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v25 = a3;
  v26 = a4;
  v24 = a2;
  v7 = sub_24A135F88(&qword_25790C778);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v23 - v18;
  type metadata accessor for _3enrollments_quant_all_verifier_aaInput();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a1, v7);
  v20(v17, v24, v7);
  v20(v14, v25, v7);
  v20(v11, v26, v7);
  sub_24A190054((uint64_t)v19, (uint64_t)v17, (uint64_t)v14, (uint64_t)v11);
  v21 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 136))();
  swift_release();
  return v21;
}

void sub_24A1B0E6C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_24A135F88(&qword_25790C820);
    sub_24A2163F8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_24A2165B4();
  }
  v6 = objc_allocWithZone(MEMORY[0x24BDBFF58]);
  sub_24A135F88(&qword_25790C820);
  v7 = (void *)sub_24A215E94();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithFeatureProviderArray_, v7);

  v9 = *(void **)(v2 + 16);
  v22[0] = 0;
  v10 = objc_msgSend(v9, sel_predictionsFromBatch_options_error_, v8, a2, v22);
  v11 = v22[0];
  if (v10)
  {
    v12 = v10;
    v22[0] = (id)MEMORY[0x24BEE4AF8];
    if (v5)
    {
      swift_bridgeObjectRetain();
      v16 = v11;
      v13 = sub_24A216410();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      v14 = v11;
    }
    sub_24A18C774(v13, 0);
    sub_24A215EB8();
    v17 = (unint64_t)objc_msgSend(v12, sel_count);
    if ((v17 & 0x8000000000000000) != 0)
      __break(1u);
    v18 = v17;
    if (v17)
    {
      v19 = 0;
      do
      {
        v20 = objc_msgSend(v12, sel_featuresAtIndex_, v19);
        type metadata accessor for _3enrollments_quant_all_verifier_aaOutput();
        *(_QWORD *)(swift_allocObject() + 16) = v20;
        swift_unknownObjectRetain();
        v21 = swift_retain();
        MEMORY[0x24BD09750](v21);
        if (*(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v22[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A215ED0();
        ++v19;
        sub_24A215F0C();
        sub_24A215EB8();
        swift_release();
        swift_unknownObjectRelease();
      }
      while (v18 != v19);
    }
    swift_unknownObjectRelease();

  }
  else
  {
    v15 = v22[0];
    sub_24A2156F0();

    swift_willThrow();
  }
}

uint64_t sub_24A1B1140()
{
  swift_release();
  return swift_deallocObject();
}

void sub_24A1B1164(id a1, char a2)
{
  uint64_t v2;
  void (*v4)(id, uint64_t);
  uint64_t v5;
  id v6;
  id v7;

  v4 = *(void (**)(id, uint64_t))(v2 + 16);
  if ((a2 & 1) != 0)
  {
    v7 = a1;
    v4(a1, 1);
    sub_24A18CC40(a1);
  }
  else
  {
    type metadata accessor for _3enrollments_quant_all_verifier_aa();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = a1;
    v6 = a1;
    v4((id)v5, 0);
    swift_release();
  }
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aa()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aaOutput()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for _3enrollments_quant_all_verifier_aaInput()
{
  return objc_opt_self();
}

void sub_24A1B1248()
{
  qword_25791D7A0 = (uint64_t)&unk_251B9C358;
}

void sub_24A1B125C()
{
  qword_25791D7A8 = (uint64_t)&unk_251B9C7D8;
}

uint64_t sub_24A1B1270()
{
  uint64_t result;

  sub_24A16D544(0, (unint64_t *)&qword_25790C3C0);
  result = OS_os_log.init(category:)();
  qword_25791D7B0 = result;
  return result;
}

void *sub_24A1B12C8()
{
  return &unk_24A21D9E0;
}

void sub_24A1B12D4()
{
  qword_25791D7B8 = 512;
}

uint64_t *sub_24A1B12E4()
{
  if (qword_25791B528 != -1)
    swift_once();
  return &qword_25791D7B8;
}

void sub_24A1B1324()
{
  qword_25791D7C0 = 48000;
}

id FeatureExtract.__allocating_init(config:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return FeatureExtract.init(config:)(a1);
}

id FeatureExtract.init(config:)(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  objc_class *v35;
  id v36;
  void *v37;
  _QWORD v39[11];
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  objc_super v45;
  uint64_t v46;

  v43 = a1;
  v40 = sub_24A216128();
  v2 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v41 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_24A21611C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_24A215BF4();
  MEMORY[0x24BDAC7A8](v5);
  v6 = &v1[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBuffer];
  v7 = v1;
  v8 = *(_QWORD *)sub_24A2157C8();
  v42 = v6;
  *(_QWORD *)v6 = v8;
  v39[3] = OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_audioSampleWorkBuffer] = v8;
  v9 = MEMORY[0x24BEE4AF8];
  v39[4] = OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_slidingCmvnBuffer] = MEMORY[0x24BEE4AF8];
  v39[5] = OBJC_IVAR___FeatureExtractObjc_spliceBuffer;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBuffer] = v9;
  v39[6] = OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_nnetIntakeBuffer] = v9;
  v10 = v9;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferCounter] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferCounterAll] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_frameCounter] = 0;
  v11 = OBJC_IVAR___FeatureExtractObjc_fftCalculator;
  type metadata accessor for FFTCalculator();
  swift_retain_n();
  v12 = sub_24A1ADBE0();
  v39[2] = v11;
  *(_QWORD *)&v7[v11] = v12;
  v13 = sub_24A215EF4();
  *(_QWORD *)(v13 + 16) = 40;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_OWORD *)(v13 + 176) = 0u;
  v39[1] = OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_cmvnSlidingWindowSum] = v13;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_cmvnBufferCount] = 0;
  v44 = OBJC_IVAR___FeatureExtractObjc_serialWorkQueue;
  v39[7] = sub_24A16D544(0, &qword_25790BE40);
  sub_24A215BE8();
  v46 = v10;
  v39[9] = sub_24A137FF0((unint64_t *)&qword_25790BE48, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  v39[8] = sub_24A135F88(&qword_25790BE50);
  v39[10] = sub_24A1B8564((unint64_t *)&qword_25790BE58, &qword_25790BE50);
  sub_24A2162D8();
  v14 = *MEMORY[0x24BEE5750];
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
  v17 = v40;
  v16 = v41;
  v15(v41, v14, v40);
  *(_QWORD *)&v7[v44] = sub_24A216140();
  v18 = OBJC_IVAR___FeatureExtractObjc_stateAccessQueue;
  sub_24A215BDC();
  v46 = MEMORY[0x24BEE4AF8];
  sub_24A2162D8();
  v15(v16, v14, v17);
  *(_QWORD *)&v7[v18] = sub_24A216140();
  v19 = OBJC_IVAR___FeatureExtractObjc_dataAvailableSem;
  *(_QWORD *)&v7[v19] = dispatch_semaphore_create(0);
  v20 = OBJC_IVAR___FeatureExtractObjc_allProcessedAfterStopSem;
  *(_QWORD *)&v7[v20] = dispatch_semaphore_create(0);
  v7[OBJC_IVAR___FeatureExtractObjc_stopSignaled] = 0;
  v21 = (uint64_t *)&v7[OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable];
  *v21 = 0;
  v21[1] = 0;
  v7[OBJC_IVAR___FeatureExtractObjc_isRunning] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_spliceBufferLength] = 7;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_splicedVectorDim] = 280;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_numSamplesRemovedFromAudioSampleInjestionBuffer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_audioSampleIngestionBufferStartIndex] = 0;
  v22 = OBJC_IVAR___FeatureExtractObjc_frameDuration;
  *(_DWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_frameDuration] = 1022739087;
  v7[OBJC_IVAR___FeatureExtractObjc_streamingMode] = 1;
  v23 = OBJC_IVAR___FeatureExtractObjc_config;
  v24 = v43;
  *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_config] = v43;
  type metadata accessor for NeuralNet();
  v25 = v24;
  sub_24A180A30(v25);
  if (v26)
  {
    v27 = v42;
    *(_QWORD *)&v7[OBJC_IVAR___FeatureExtractObjc_nn] = v26;
    v28 = qword_25791B530;
    swift_retain();
    if (v28 != -1)
      swift_once();
    v29 = qword_25791D7C0;
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (*(_QWORD *)(*(_QWORD *)v27 + 16) < v29 || (isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_24A16A73C(v29);
    v31 = swift_endAccess();
    v32 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v33 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v25) + 0x90))(v31);
    v34 = (*(uint64_t (**)(void))((*v32 & *v33) + 0xE8))();

    swift_release();
    *(float *)&v7[v22] = (float)((float)v34 * 160.0) / 16000.0;

    v35 = (objc_class *)type metadata accessor for FeatureExtract();
    v45.receiver = v7;
    v45.super_class = v35;
    v36 = objc_msgSendSuper2(&v45, sel_init);

  }
  else
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    sub_24A191318(*v21);
    v37 = *(void **)&v7[v23];

    type metadata accessor for FeatureExtract();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v36;
}

uint64_t type metadata accessor for FeatureExtract()
{
  return objc_opt_self();
}

uint64_t sub_24A1B19DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR___FeatureExtractObjc_acousticModelOutputAvailable);
  *v3 = a1;
  v3[1] = a2;
  swift_retain();
  return sub_24A191318(v4);
}

void sub_24A1B1A78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  _QWORD *v6;
  _QWORD *v7;

  v3 = *(_QWORD **)(v1 + OBJC_IVAR___FeatureExtractObjc_config);
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v3) + 0x90);
  v6 = v3;
  v7 = (_QWORD *)v5();

  (*(void (**)(uint64_t))((*v4 & *v7) + 0xA8))(a1);
}

id sub_24A1B1B9C()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___FeatureExtractObjc_config);
}

uint64_t sub_24A1B1BBC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___FeatureExtractObjc_streamingMode) = result;
  return result;
}

uint64_t sub_24A1B1BDC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = v2;
  ObjectType = swift_getObjectType();
  v7 = sub_24A215BC4();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_24A215BF4();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)&v3[OBJC_IVAR___FeatureExtractObjc_serialWorkQueue];
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v3;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = ObjectType;
  aBlock[4] = sub_24A1B7DE0;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24A1B23B4;
  aBlock[3] = &unk_251B9CC80;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_retain();
  sub_24A215BDC();
  v21 = MEMORY[0x24BEE4AF8];
  sub_24A137FF0(&qword_25790F5B8, v8, MEMORY[0x24BEE5468]);
  sub_24A135F88(&qword_25790F5C0);
  sub_24A1B8564(&qword_25790F5C8, &qword_25790F5C0);
  sub_24A2162D8();
  MEMORY[0x24BD099FC](0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_24A1B1DEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  char v42[40];
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE v46[24];
  _QWORD v47[2];
  unsigned __int8 v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v43 = a1;
  v44 = a2;
  v45 = a3;
  v7 = a3 + 5;
  result = swift_retain();
  v9 = a3[4];
  v10 = (uint64_t *)(a3[3] + v9);
  if (a3[2] < (uint64_t)v10)
  {
    result = swift_release();
    v11 = a2 - a1;
    if (!__OFSUB__(a2, a1))
    {
      if (v11 <= 0)
        return result;
      result = *v3;
      v9 = *(_QWORD *)(*v3 + 24);
      v12 = v9 + v11;
      if (!__OFADD__(v9, v11))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v14 = *v3;
        if (*(_QWORD *)(*v3 + 16) < v12 || (isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_24A16A73C(v12);
          v14 = *v3;
        }
        sub_24A1B87AC((_QWORD *)(v14 + 16), v14 + 40, (uint64_t)v42);
        sub_24A1B8858(a2 - a1, (uint64_t)&v43);
        sub_24A16C3B0((uint64_t)&v45, (uint64_t)v46, &qword_25790B488);
        result = sub_24A16C3B0((uint64_t)v46, (uint64_t)v47, &qword_25790B488);
        v9 = v48;
        v10 = &v52;
        v37 = (uint64_t *)(a2 - a1);
        if ((v48 & 1) != 0)
        {
          v36 = &v32;
          v16 = v43;
          v15 = v44;
          MEMORY[0x24BDAC7A8](result);
          v30 = v16;
          v31 = v15;
          v38 = a1;
          v39 = (uint64_t *)a2;
          v40 = a3;
          swift_retain();
          result = swift_retain();
          v9 = a3[4];
          v10 = (uint64_t *)(a3[3] + v9);
          if (a3[2] >= (uint64_t)v10)
          {
            if ((uint64_t)v10 < v9)
            {
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            if (__OFSUB__(v10, v9))
            {
LABEL_47:
              __break(1u);
              goto LABEL_48;
            }
            sub_24A1B9054((uint64_t *)((char *)v7 + 4 * v9), &v38, (_QWORD *(*)(uint64_t *__return_ptr, char *, uint64_t))sub_24A1B9A78, v49);
          }
          else
          {
            swift_retain();
            result = sub_24A16B304(&v38, v16, v15, a1, a2, a3);
            v9 = v41;
            v10 = v39;
            if ((uint64_t *)v41 != v39)
              goto LABEL_52;
            swift_release();
          }
        }
        else
        {
          v17 = v44;
          v18 = a1 + v44;
          if (__OFADD__(a1, v44))
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          if (v18 < a1)
          {
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          v9 = (uint64_t)&v50;
          v34 = v7;
          if (v18 > a2)
          {
LABEL_45:
            __break(1u);
            goto LABEL_46;
          }
          v36 = &v32;
          v35 = v47[0];
          v33 = v47[1];
          v19 = v43;
          MEMORY[0x24BDAC7A8](result);
          v30 = v19;
          v31 = v17;
          v38 = a1;
          v39 = (uint64_t *)v18;
          v40 = a3;
          swift_retain();
          result = swift_retain();
          v9 = a3[4];
          v10 = (uint64_t *)(a3[3] + v9);
          if (a3[2] >= (uint64_t)v10)
          {
            v23 = __OFSUB__(v10, v9);
            if ((uint64_t)v10 < v9)
            {
LABEL_48:
              __break(1u);
              goto LABEL_49;
            }
            v10 = &v51;
            v22 = v35;
            if (v23)
            {
LABEL_49:
              __break(1u);
              goto LABEL_50;
            }
            v21 = (uint64_t)sub_24A1B9054((uint64_t *)((char *)v34 + 4 * v9), &v38, (_QWORD *(*)(uint64_t *__return_ptr, char *, uint64_t))sub_24A1B9A78, v49);
          }
          else
          {
            swift_retain();
            result = sub_24A16B304(&v38, v19, v17, a1, a1 + v17, a3);
            v9 = v41;
            v20 = (uint64_t)v39;
            if ((uint64_t *)v41 != v39)
            {
LABEL_57:
              if (v9 >= v20 || v9 < v38)
                goto LABEL_70;
              if (v9 < 0)
              {
LABEL_71:
                __break(1u);
                goto LABEL_72;
              }
              v26 = v40[3];
              if (v9 >= v26)
              {
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
                goto LABEL_74;
              }
              __break(1u);
              goto LABEL_62;
            }
            v21 = swift_release();
            v22 = v35;
          }
          MEMORY[0x24BDAC7A8](v21);
          *(_QWORD *)&v29[-16] = v22;
          v24 = v22;
          v25 = v33;
          *(_QWORD *)&v29[-8] = v33;
          v38 = v18;
          v39 = (uint64_t *)a2;
          v40 = a3;
          result = swift_retain();
          v9 = a3[4];
          v10 = (uint64_t *)(a3[3] + v9);
          if (a3[2] >= (uint64_t)v10)
          {
            v27 = __OFSUB__(v10, v9);
            if ((uint64_t)v10 < v9)
            {
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
            v10 = v34;
            if (v27)
            {
LABEL_51:
              __break(1u);
LABEL_52:
              if (v9 >= (uint64_t)v10 || v9 < v38)
              {
LABEL_67:
                __break(1u);
                goto LABEL_68;
              }
              if (v9 < 0)
              {
LABEL_68:
                __break(1u);
                goto LABEL_69;
              }
              v20 = v40[3];
              if (v9 >= v20)
              {
LABEL_69:
                __break(1u);
LABEL_70:
                __break(1u);
                goto LABEL_71;
              }
              __break(1u);
              goto LABEL_57;
            }
            sub_24A1B9054((uint64_t *)((char *)v34 + 4 * v9), &v38, (_QWORD *(*)(uint64_t *__return_ptr, char *, uint64_t))sub_24A1B9A78, v49);
            result = swift_release_n();
            goto LABEL_34;
          }
          swift_retain();
          result = sub_24A16B304(&v38, v24, v25, v18, a2, a3);
          v9 = v41;
          v26 = (uint64_t)v39;
          if ((uint64_t *)v41 != v39)
          {
LABEL_62:
            if (v9 >= v26 || v9 < v38)
              goto LABEL_73;
            if (v9 < 0)
            {
LABEL_74:
              __break(1u);
              goto LABEL_75;
            }
            if (v9 >= v40[3])
            {
LABEL_75:
              __break(1u);
              return result;
            }
            __break(1u);
            goto LABEL_67;
          }
          swift_release_n();
        }
        result = swift_release();
LABEL_34:
        v10 = v37;
        v28 = *(_QWORD *)(v14 + 24);
        v23 = __OFADD__(v28, v37);
        v9 = (uint64_t)v37 + v28;
        if (!v23)
        {
          *(_QWORD *)(v14 + 24) = v9;
          return swift_release();
        }
        goto LABEL_42;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    __break(1u);
    goto LABEL_39;
  }
  if ((uint64_t)v10 < v9)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (__OFSUB__(v10, v9))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  sub_24A1B90C4((uint64_t)v7 + 4 * v9, a3[3], &v43, (uint64_t (*)(uint64_t, uint64_t))sub_24A1B9A60);
  return swift_release();
}

