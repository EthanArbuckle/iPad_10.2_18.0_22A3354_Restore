uint64_t PFSharedFigDecodeSession()
{
  if (PFSharedFigDecodeSession_s_onceToken != -1)
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1139);
  return PFSharedFigDecodeSession_s_decodeSession;
}

__CFString *PFStoryTitleCategoryNamed(void *a1)
{
  id v1;
  int VertexIndexForTitleCategory;
  __CFString *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  VertexIndexForTitleCategory = _GetVertexIndexForTitleCategory(v1);
  if (VertexIndexForTitleCategory < 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "unsupported title category '%@'", (uint8_t *)&v5, 0xCu);
    }
    v3 = CFSTR("undefined");
  }
  else
  {
    v3 = Vertices[VertexIndexForTitleCategory];
  }

  return v3;
}

uint64_t _GetVertexIndexForTitleCategory(void *a1)
{
  __CFString *v1;
  uint64_t v2;
  __CFString *v3;

  v1 = a1;
  v2 = 0;
  while (1)
  {
    v3 = Vertices[v2];
    if (v3 == v1 || (-[__CFString isEqualToString:](v3, "isEqualToString:", v1) & 1) != 0)
      break;
    if (++v2 == 6)
    {
      v2 = 0xFFFFFFFFLL;
      break;
    }
  }

  return v2;
}

id PFStoryTitleSupportedCategories()
{
  if (PFStoryTitleSupportedCategories_onceToken[0] != -1)
    dispatch_once(PFStoryTitleSupportedCategories_onceToken, &__block_literal_global);
  return (id)PFStoryTitleSupportedCategories_supportedCategories;
}

__CFString *PFStoryTitleCategoryGenerateWithWrappedIndex(uint64_t a1)
{
  return Vertices[a1 % 6];
}

__CFString *PFStoryValidatedTitleCategory(uint64_t a1)
{
  __CFString *v1;

  if ((unint64_t)(a1 - 7) >= 0xFFFFFFFFFFFFFFFALL)
    v1 = Vertices[a1 - 1];
  else
    v1 = 0;
  return v1;
}

void *PFStoryTitleCategoryGetSerializedTitleCategory(void *result)
{
  if (result)
    return (void *)((int)_GetVertexIndexForTitleCategory(result) + 1);
  return result;
}

void sub_1A16FD660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

double progressOfSampleBufferInTimeRange(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  double Seconds;
  CMTime v6;
  CMTime rhs;
  CMTime lhs;
  CMTime v9;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetPresentationTimeStamp(&v10, a1);
  lhs = v10;
  rhs = *a2;
  CMTimeSubtract(&v9, &lhs, &rhs);
  v10 = v9;
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetDuration(&v9, a1);
  if ((v9.flags & 0x1D) == 1)
  {
    rhs = v10;
    v6 = v9;
    CMTimeAdd(&lhs, &rhs, &v6);
    v10 = lhs;
  }
  lhs = v10;
  Seconds = CMTimeGetSeconds(&lhs);
  lhs = a2[1];
  return Seconds / CMTimeGetSeconds(&lhs);
}

CMSampleBufferRef StolenFigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, int32_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const __CFArray *v8;
  const __CFAllocator *v9;
  char *v10;
  int32_t v11;
  __int128 v12;
  CMTimeEpoch v13;
  CMSampleBufferRef v14;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  CMTime v18;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  CMSampleBufferRef v21;
  CMMetadataFormatDescriptionRef formatDescriptionOut;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v21 = 0;
  formatDescriptionOut = 0;
  blockBufferOut = 0;
  v4 = *MEMORY[0x1E0CA4CC0];
  v5 = *MEMORY[0x1E0CA2518];
  v23[0] = *MEMORY[0x1E0CA2528];
  v23[1] = v5;
  v6 = *MEMORY[0x1E0CA2468];
  v24[0] = v4;
  v24[1] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v25[0] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 1);
  v8 = (const __CFArray *)objc_claimAutoreleasedReturnValue();

  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x6D656278u, v8, &formatDescriptionOut);
  LODWORD(v4) = bswap32(FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors());
  CMBlockBufferCreateWithMemoryBlock(v9, 0, 9uLL, v9, 0, 0, 9uLL, 1u, &blockBufferOut);
  dataPointerOut = 0;
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut);
  v10 = dataPointerOut;
  *(_DWORD *)dataPointerOut = 150994944;
  v10[8] = -1;
  dataPointerOut = v10 + 8;
  *((_DWORD *)v10 + 1) = v4;
  if (a2)
    v11 = a2;
  else
    v11 = 600;
  memset(&v18, 0, sizeof(v18));
  CMTimeMake(&v18, 1, v11);
  v12 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
  *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v12;
  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
  v13 = *(_QWORD *)(a1 + 16);
  sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
  sampleTimingArray.presentationTimeStamp.epoch = v13;
  sampleTimingArray.duration = v18;
  sampleSizeArray = CMBlockBufferGetDataLength(blockBufferOut);
  CMSampleBufferCreate(v9, blockBufferOut, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v21);
  CFRelease(formatDescriptionOut);
  CFRelease(blockBufferOut);
  v14 = v21;

  return v14;
}

const __CFString *PFPosterConfigurationTypeStringWithType(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("??");
  if (a1 == 1)
    v1 = CFSTR("Shuffle");
  if (a1)
    return v1;
  else
    return CFSTR("Photo");
}

const __CFString *PFPosterShuffleTypeStringWithType(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("??");
  else
    return off_1E45A1A88[a1];
}

const __CFString *PFPosterShuffleFrequencyStringWithFrequency(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("??");
  else
    return off_1E45A1AA0[a1];
}

BOOL PFCameraAdjustmentsCropIsValid(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v9;
  CGRect v10;

  if (CGRectIsEmpty(*(CGRect *)&a1))
    return 0;
  v9.origin.x = a1;
  v9.origin.y = a2;
  v9.size.width = a3;
  v9.size.height = a4;
  if (CGRectIsNull(v9))
    return 0;
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  return !CGRectIsInfinite(v10);
}

void PFImageMetricComputeSSIMForCIImage(void *a1, void *a2, double *a3, double *a4, double *a5)
{
  id v8;
  id v9;
  os_signpost_id_t v10;
  unint64_t v11;
  double *v12;
  NSObject *v13;
  id v14;
  _BOOL4 v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double *v22;
  NSObject *v23;
  id v24;
  _BOOL4 v25;
  id v26;
  signed int PixelFormatType;
  signed int v28;
  int v29;
  int v30;
  unsigned __int16 v31;
  CVReturn v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  _BOOL4 IsNull;
  double v38;
  double v39;
  unint64_t v40;
  size_t Width;
  size_t Height;
  int v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  dispatch_queue_t v47;
  void *v48;
  uint64_t v49;
  double v56;
  uint32_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *BaseAddress;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  size_t j;
  uint64_t v66;
  size_t k;
  uint64_t v68;
  double v70;
  double v71;
  double v72;
  id v73;
  id v74;
  double *v75;
  double *v76;
  size_t v77;
  size_t v78;
  size_t v79;
  size_t BytesPerRow;
  size_t v81;
  CVReturn v82;
  void *v83;
  double *v84;
  unint64_t v85;
  uint64_t i;
  __CVBuffer *pixelBuffer;
  __CVBuffer *v88;
  CVPixelBufferRef texture;
  CVPixelBufferRef pixelBufferOut;
  __int128 block;
  __int128 v93;
  _QWORD *v94;
  __CVBuffer *v95;
  double v96;
  double v97;
  CGFloat v98;
  CGFloat v99;
  __CVBuffer *v100;
  double v101;
  double v102;
  CGFloat v103;
  CGFloat v104;
  uint64_t v105;
  _QWORD v106[4];
  CVPixelBufferRef v107;
  CVPixelBufferRef v108;
  _BYTE v109[24];
  void *v110;
  _QWORD *v111;
  __CVBuffer *v112;
  double v113;
  double v114;
  CGFloat v115;
  CGFloat v116;
  __CVBuffer *v117;
  double v118;
  double v119;
  CGFloat v120;
  CGFloat v121;
  uint64_t v122;
  uint8_t buf[16];
  __int128 v124;
  _QWORD *v125;
  __CVBuffer *v126;
  double v127;
  double v128;
  CGFloat v129;
  CGFloat v130;
  __CVBuffer *v131;
  double v132;
  double v133;
  CGFloat v134;
  CGFloat v135;
  uint64_t v136;
  float64x2_t v137[3];
  float64x2_t v138;
  double v139;
  uint64_t v140;
  CGRect v141;

  v140 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v9 = a2;
  v10 = os_signpost_id_make_with_pointer(MEMORY[0x1E0C81028], v8);
  v11 = v10 - 1;
  if (v10 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = MEMORY[0x1E0C81028];
  }
  else
  {
    v12 = a3;
    if (os_signpost_enabled(MEMORY[0x1E0C81028]))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim", (const char *)&unk_1A17C945B, buf, 2u);
    }
    v13 = MEMORY[0x1E0C81028];
    v14 = MEMORY[0x1E0C81028];
    v15 = os_signpost_enabled(v13);
    a3 = v12;
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim.decode-to-pixelbuffer", (const char *)&unk_1A17C945B, buf, 2u);
    }
  }

  pixelBufferOut = 0;
  objc_msgSend(v9, "extent");
  if (!CVPixelBufferCreate(0, (unint64_t)v17, (unint64_t)v18, 0x34323066u, 0, &pixelBufferOut))
  {
    objc_msgSend(v8, "extent");
    texture = 0;
    if (CVPixelBufferCreate(0, (unint64_t)v19, (unint64_t)v20, 0x34323066u, 0, &texture))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v8;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unable to create pixel buffer for image %@", buf, 0xCu);
      }
LABEL_116:
      CVPixelBufferRelease(pixelBufferOut);
      goto LABEL_117;
    }
    objc_msgSend(MEMORY[0x1E0C9DD90], "context");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "render:toCVPixelBuffer:", v9, pixelBufferOut);
    objc_msgSend(v21, "render:toCVPixelBuffer:", v8, texture);
    if (v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v26 = MEMORY[0x1E0C81028];
    }
    else
    {
      v22 = a3;
      if (os_signpost_enabled(MEMORY[0x1E0C81028]))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim.decode-to-pixelbuffer", (const char *)&unk_1A17C945B, buf, 2u);
      }
      v23 = MEMORY[0x1E0C81028];
      v24 = MEMORY[0x1E0C81028];
      v25 = os_signpost_enabled(v23);
      a3 = v22;
      if (v25)
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_BEGIN, v10, "com.apple.mediaconversion.ssim.compute-ssim", (const char *)&unk_1A17C945B, buf, 2u);
      }
    }

    v83 = v21;
    v84 = a3;
    v88 = pixelBufferOut;
    v139 = 0.0;
    v138 = 0u;
    memset(v137, 0, sizeof(v137));
    v106[0] = 0;
    v106[1] = v106;
    v106[2] = 0x2020000000;
    v106[3] = v137;
    pixelBuffer = texture;
    PixelFormatType = CVPixelBufferGetPixelFormatType(texture);
    v28 = PixelFormatType;
    v29 = 0;
    if (PixelFormatType > 1278226735)
    {
      if (PixelFormatType > 2016686639)
      {
        if (PixelFormatType == 2016686640)
          goto LABEL_33;
        v30 = 2019963440;
LABEL_32:
        if (PixelFormatType == v30)
        {
LABEL_33:
          v32 = CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
          if (v32)
          {
LABEL_100:
            if (v84)
            {
              v70 = v137[0].f64[0];
              if (v32)
                v70 = 0.0;
              *v84 = v70;
            }
            if (a4)
            {
              v71 = v137[0].f64[1];
              if (v32)
                v71 = 0.0;
              *a4 = v71;
            }
            if (a5)
            {
              v72 = v137[1].f64[0];
              if (v32)
                v72 = 0.0;
              *a5 = v72;
            }
            _Block_object_dispose(v106, 8);
            v73 = MEMORY[0x1E0C81028];
            if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(MEMORY[0x1E0C81028]))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim.compute-ssim", (const char *)&unk_1A17C945B, buf, 2u);
            }

            CVPixelBufferRelease(texture);
            goto LABEL_116;
          }
          v82 = CVPixelBufferLockBaseAddress(v88, 1uLL);
          v32 = v82;
          if (v82)
          {
LABEL_98:
            CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
            if (!v82)
              CVPixelBufferUnlockBaseAddress(v88, 1uLL);
            goto LABEL_100;
          }
          v34 = *MEMORY[0x1E0C9D628];
          v33 = *(double *)(MEMORY[0x1E0C9D628] + 8);
          v36 = *(double *)(MEMORY[0x1E0C9D628] + 16);
          v35 = *(double *)(MEMORY[0x1E0C9D628] + 24);
          v141.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
          v141.origin.y = v33;
          v141.size.width = v36;
          v141.size.height = v35;
          IsNull = CGRectIsNull(v141);
          if (IsNull)
            v38 = v34;
          else
            v38 = 0.0;
          if (IsNull)
            v39 = v33;
          else
            v39 = 0.0;
          if (v29)
          {
            _computeSSIMForPlane(pixelBuffer, v88, 0, 0, (uint64_t)v137, v38, v39, v36, v35, v34, v33, v36, v35);
            v32 = 0;
            goto LABEL_98;
          }
          if (v28 != 1111970369)
          {
            v46 = PFImageMetricComputeSSIMForPixelBuffer_queue;
            if (!PFImageMetricComputeSSIMForPixelBuffer_queue)
            {
              v47 = dispatch_queue_create("com.apple.coremedia.psnr", MEMORY[0x1E0C80D50]);
              v48 = (void *)PFImageMetricComputeSSIMForPixelBuffer_queue;
              PFImageMetricComputeSSIMForPixelBuffer_queue = (uint64_t)v47;

              v46 = PFImageMetricComputeSSIMForPixelBuffer_queue;
              if (!PFImageMetricComputeSSIMForPixelBuffer_queue)
              {
                if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = "void PFImageMetricComputeSSIMForPixelBuffer(CVPixelBufferRef, CVPixelBufferRef, C"
                                       "GRect, CVPixelBufferRef, _Bool, double *, double *, double *)";
                  _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'queue', bailing from %s", buf, 0xCu);
                }
                v32 = -16991;
                goto LABEL_98;
              }
            }
            v75 = a5;
            v49 = MEMORY[0x1E0C809B0];
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&v124 = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke;
            *((_QWORD *)&v124 + 1) = &unk_1E45A1B38;
            v127 = v38;
            v128 = v39;
            v129 = v36;
            v130 = v35;
            v131 = v88;
            v132 = v34;
            v133 = v33;
            v134 = v36;
            v135 = v35;
            v136 = 0;
            v125 = v106;
            v126 = pixelBuffer;
            dispatch_async(v46, buf);
            *(_QWORD *)&block = v49;
            *((_QWORD *)&block + 1) = 3221225472;
            *(_QWORD *)&v93 = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_2;
            *((_QWORD *)&v93 + 1) = &unk_1E45A1B38;
            v96 = v38;
            v97 = v39;
            v98 = v36;
            v99 = v35;
            v100 = v88;
            v101 = v34;
            v102 = v33;
            v103 = v36;
            v104 = v35;
            v105 = 0;
            v94 = v106;
            v95 = pixelBuffer;
            dispatch_async((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, &block);
            *(_QWORD *)v109 = v49;
            a5 = v75;
            *(_QWORD *)&v109[8] = 3221225472;
            *(_QWORD *)&v109[16] = __PFImageMetricComputeSSIMForPixelBuffer_block_invoke_3;
            v110 = &unk_1E45A1B38;
            v113 = v38;
            v114 = v39;
            v115 = v36;
            v116 = v35;
            v117 = v88;
            v118 = v34;
            v119 = v33;
            v120 = v36;
            v121 = v35;
            v122 = 0;
            v111 = v106;
            v112 = pixelBuffer;
            dispatch_async((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, v109);
            dispatch_barrier_sync((dispatch_queue_t)PFImageMetricComputeSSIMForPixelBuffer_queue, &__block_literal_global_595);
            v32 = 0;
            __asm
            {
              FMOV            V2.2D, #6.0
              FMOV            V1.2D, #0.125
            }
            v137[0] = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)((char *)&v137[1] + 8), _Q2, v137[0]), v138), _Q1);
            v56 = (v137[2].f64[1] + v137[1].f64[0] * 6.0 + v139) * 0.125;
            goto LABEL_97;
          }
          v107 = 0;
          v108 = 0;
          *(_OWORD *)buf = 0u;
          v124 = 0u;
          _computeCropRectForPixelBuffer(buf, pixelBuffer, v38, v39, v36, v35);
          block = 0u;
          v93 = 0u;
          _computeCropRectForPixelBuffer(&block, v88, v34, v33, v36, v35);
          v40 = v124;
          if (v124 == v93)
          {
            v85 = *((_QWORD *)&v124 + 1);
            Width = CVPixelBufferGetWidth(pixelBuffer);
            if (Width == CVPixelBufferGetWidth(v88))
            {
              Height = CVPixelBufferGetHeight(pixelBuffer);
              if (Height == CVPixelBufferGetHeight(v88))
              {
                CVPixelBufferGetWidth(pixelBuffer);
                CVPixelBufferGetHeight(pixelBuffer);
                v43 = CMPhotoSurfacePoolCreatePixelBuffer();
                if (v43)
                {
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v109 = 134218242;
                    *(_QWORD *)&v109[4] = v43;
                    *(_WORD *)&v109[12] = 2080;
                    *(_QWORD *)&v109[14] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRe"
                                           "ct, CVPixelBufferRef, int, double *)";
                    v44 = MEMORY[0x1E0C81028];
                    v45 = "Unexpected error %ld, bailing from %s";
LABEL_82:
                    v57 = 22;
                    goto LABEL_72;
                  }
LABEL_92:
                  if (v108)
                    CFRelease(v108);
                  if (v107)
                    CFRelease(v107);
                  v32 = 0;
                  __asm { FMOV            V1.2D, #3.0 }
                  v137[0] = vdivq_f64(vaddq_f64(vaddq_f64(v137[0], *(float64x2_t *)((char *)&v137[1] + 8)), v138), _Q1);
                  v56 = (v137[1].f64[0] + v137[2].f64[1] + v139) / 3.0;
LABEL_97:
                  v137[1].f64[0] = v56;
                  goto LABEL_98;
                }
                CVPixelBufferGetWidth(pixelBuffer);
                CVPixelBufferGetHeight(pixelBuffer);
                v58 = CMPhotoSurfacePoolCreatePixelBuffer();
                if (v58)
                {
                  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                    goto LABEL_92;
                }
                else
                {
                  v59 = *(_QWORD *)buf;
                  v60 = *(_QWORD *)&buf[8];
                  FigPhotoSetPixelBufferCLAP(v108, *(unint64_t *)buf, *(unint64_t *)&buf[8], v40, v85);
                  FigPhotoSetPixelBufferCLAP(v107, v59, v60, v40, v85);
                  v58 = CVPixelBufferLockBaseAddress(v108, 1uLL);
                  if (v58)
                  {
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_92;
                  }
                  else
                  {
                    v58 = CVPixelBufferLockBaseAddress(v107, 1uLL);
                    v76 = a5;
                    if (!v58)
                    {
                      for (i = 0; i != 3; ++i)
                      {
                        BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
                        v79 = CVPixelBufferGetBytesPerRow(v88);
                        BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
                        v62 = CVPixelBufferGetBaseAddress(v88);
                        v78 = CVPixelBufferGetBytesPerRow(v108);
                        v77 = CVPixelBufferGetBytesPerRow(v107);
                        v63 = CVPixelBufferGetBaseAddress(v108);
                        v64 = CVPixelBufferGetBaseAddress(v107);
                        for (j = 0; CVPixelBufferGetHeight(pixelBuffer) > j; j = v81 + 1)
                        {
                          v81 = j;
                          v66 = 0;
                          for (k = 0; CVPixelBufferGetWidth(v88) > k; ++k)
                          {
                            v68 = (v66 & 0xFFFFFFFC) + i;
                            v63[k] = BaseAddress[v68];
                            v64[k] = v62[v68];
                            v66 += 4;
                          }
                          BaseAddress += BytesPerRow;
                          v62 += v79;
                          v63 += v78;
                          v64 += v77;
                        }
                        _computeSSIMForPlane(v108, v107, 0, 0, (uint64_t)v137 + 24 * i, v34, v33, v36, v35, v34, v33, v36, v35);
                      }
                      CVPixelBufferUnlockBaseAddress(v108, 1uLL);
                      a5 = v76;
                      CVPixelBufferUnlockBaseAddress(v107, 1uLL);
                      goto LABEL_92;
                    }
                    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      goto LABEL_92;
                  }
                }
                *(_DWORD *)v109 = 134218242;
                *(_QWORD *)&v109[4] = v58;
                *(_WORD *)&v109[12] = 2080;
                *(_QWORD *)&v109[14] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, "
                                       "CVPixelBufferRef, int, double *)";
                v44 = MEMORY[0x1E0C81028];
                v45 = "Unexpected error %ld, bailing from %s";
                goto LABEL_82;
              }
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v109 = 136315138;
                *(_QWORD *)&v109[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, C"
                                      "VPixelBufferRef, int, double *)";
                _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'CVPixelBufferGetHeight(pbufA) == CVPixelBufferGetHeight(pbufB)', bailing from %s", v109, 0xCu);
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_92;
              *(_WORD *)v109 = 0;
              v44 = MEMORY[0x1E0C81028];
              v45 = "_computeSSIMForBGRA - heightA and heightB not the same";
            }
            else
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v109 = 136315138;
                *(_QWORD *)&v109[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, C"
                                      "VPixelBufferRef, int, double *)";
                _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'CVPixelBufferGetWidth(pbufA) == CVPixelBufferGetWidth(pbufB)', bailing from %s", v109, 0xCu);
              }
              if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                goto LABEL_92;
              *(_WORD *)v109 = 0;
              v44 = MEMORY[0x1E0C81028];
              v45 = "_computeSSIMForBGRA - widthA and widthB not the same";
            }
          }
          else
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v109 = 136315138;
              *(_QWORD *)&v109[4] = "OSStatus _computeSSIMForBGRA(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVP"
                                    "ixelBufferRef, int, double *)";
              _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'FigPhotoSizeIsEqual(clapA.size, clapB.size)', bailing from %s", v109, 0xCu);
            }
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_92;
            *(_WORD *)v109 = 0;
            v44 = MEMORY[0x1E0C81028];
            v45 = "_computeSSIMForBGRA - clapA and clapB not the same";
          }
          v57 = 2;
LABEL_72:
          _os_log_error_impl(&dword_1A16EE000, v44, OS_LOG_TYPE_ERROR, v45, v109, v57);
          goto LABEL_92;
        }
LABEL_43:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unsupported pixel format for SSIM computation", buf, 2u);
        }
        v32 = 0;
        goto LABEL_100;
      }
      if (PixelFormatType == 1278226736)
      {
LABEL_29:
        v29 = 1;
        goto LABEL_33;
      }
      v31 = 12598;
    }
    else
    {
      if (PixelFormatType <= 1111970368)
      {
        if (PixelFormatType == 875704422)
          goto LABEL_33;
        v30 = 875704438;
        goto LABEL_32;
      }
      if (PixelFormatType == 1111970369)
        goto LABEL_33;
      v31 = 12344;
    }
    if (PixelFormatType != (v31 | 0x4C300000))
      goto LABEL_43;
    goto LABEL_29;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v9;
    _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unable to create pixel buffer for reference image %@", buf, 0xCu);
  }
LABEL_117:
  v74 = MEMORY[0x1E0C81028];
  if (v11 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(MEMORY[0x1E0C81028]))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_SIGNPOST_INTERVAL_END, v10, "com.apple.mediaconversion.ssim", (const char *)&unk_1A17C945B, buf, 2u);
  }

}

void sub_1A17055DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void _computeSSIMForPlane(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3, unsigned int a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  OSType PixelFormatType;
  uint64_t BitDepthForPixelFormat;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *BaseAddressOfPlane;
  NSObject *v33;
  const char *v34;
  uint8_t *v35;
  int64x2_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  signed int v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int64x2_t v45;
  char v46;
  char *v47;
  char *v48;
  char *v49;
  size_t v50;
  char *v51;
  size_t v52;
  char *v53;
  char *v54;
  char *v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  size_t v60;
  double v61;
  size_t v62;
  double v63;
  unsigned int v64;
  unsigned int v65;
  _DWORD *v66;
  _DWORD *v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  int32x4_t *v82;
  unint64_t v83;
  int32x4_t *v84;
  uint64_t v85;
  int v86;
  int32x4_t *v87;
  int32x4_t v88;
  double v89;
  double v90;
  unsigned __int8 *v91;
  int v92;
  double v93;
  double v94;
  unsigned int v95;
  double v96;
  double v97;
  double v98;
  char *v99;
  int64x2_t v100;
  OSType v101;
  char *v102;
  uint64_t v103;
  size_t BytesPerRowOfPlane;
  size_t v105;
  size_t v106;
  unint64_t v107;
  __CVBuffer *pixelBuffer;
  _BOOL8 v109;
  unint64_t v110;
  int64x2_t v111;
  __int128 v112;
  int64x2_t v113;
  __int128 v114;
  _OWORD v115[4];
  uint64_t v116;
  int v117;
  const char *v118;
  uint8_t buf[16];
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  BitDepthForPixelFormat = PFImageMetricGetBitDepthForPixelFormat(PixelFormatType);
  v28 = a4 != 0;
  if (a4)
    v29 = 2;
  else
    v29 = 1;
  v109 = a4 > 1;
  v110 = BitDepthForPixelFormat;
  v113 = 0u;
  v114 = 0u;
  _computeCropRectForPixelBuffer(&v113, a1, a6, a7, a8, a9);
  v111 = 0u;
  v112 = 0u;
  _computeCropRectForPixelBuffer(&v111, a2, a10, a11, a12, a13);
  v30 = v114;
  if ((_QWORD)v114 != (_QWORD)v112 || (v31 = *((_QWORD *)&v114 + 1), *((_QWORD *)&v114 + 1) != *((_QWORD *)&v112 + 1)))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void _computeSSIMForPlane(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVPixelBufferRe"
                           "f, int, double *)";
      v33 = MEMORY[0x1E0C81028];
      v34 = "Failed condition 'FigPhotoSizeIsEqual(clapA.size, clapB.size)', bailing from %s";
      v35 = buf;
      goto LABEL_12;
    }
LABEL_114:
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    v98 = 0.0;
    goto LABEL_115;
  }
  pixelBuffer = a2;
  if (a3)
  {
    BaseAddressOfPlane = (unsigned __int8 *)CVPixelBufferGetBaseAddressOfPlane(a3, 0);
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a3, 0);
    *(_OWORD *)buf = 0u;
    v120 = 0u;
    _computeCropRectForPixelBuffer(buf, a3, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24));
    if (v120 != __PAIR128__(v31, v30))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v117 = 136315138;
        v118 = "void _computeSSIMForPlane(CVPixelBufferRef, CGRect, CVPixelBufferRef, CGRect, CVPixelBufferRef, int, double *)";
        v33 = MEMORY[0x1E0C81028];
        v34 = "Failed condition 'FigPhotoSizeIsEqual(clapW.size, clapA.size)', bailing from %s";
        v35 = (uint8_t *)&v117;
LABEL_12:
        _os_log_error_impl(&dword_1A16EE000, v33, OS_LOG_TYPE_ERROR, v34, v35, 0xCu);
        goto LABEL_114;
      }
      goto LABEL_114;
    }
  }
  else
  {
    BaseAddressOfPlane = 0;
    BytesPerRowOfPlane = 0;
  }
  if (a4)
  {
    v30 = (v30 + 1) >> 1;
    v31 = (v31 + 1) >> 1;
    *(_QWORD *)&v114 = v30;
    *((_QWORD *)&v114 + 1) = v31;
    v36 = vdupq_n_s64(1uLL);
    v113 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v113, v36), 1uLL);
    v111 = (int64x2_t)vshrq_n_u64((uint64x2_t)vaddq_s64(v111, v36), 1uLL);
  }
  v105 = CVPixelBufferGetBytesPerRowOfPlane(a1, a4 != 0);
  v106 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, a4 != 0);
  v37 = (char *)malloc_type_calloc(180 * v30 + 1440, 1uLL, 0xCEC6451EuLL);
  v38 = 0;
  memset(v115, 0, sizeof(v115));
  v116 = 0;
  v39 = v37 + 160;
  do
  {
    *(_QWORD *)((char *)v115 + v38) = v39;
    v38 += 8;
    v39 += 20 * v30 + 160;
  }
  while (v38 != 72);
  v40 = CVPixelBufferGetPixelFormatType(a1);
  v102 = v37;
  v103 = a5;
  v107 = v31;
  if (v40 > 1380401728)
  {
    if (v40 > 1919378231)
    {
      if (v40 > 2016687155)
      {
        if (v40 > 2019963955)
        {
          if (v40 == 2019963956 || v40 == 2037741158)
            goto LABEL_80;
          v42 = 2037741171;
        }
        else
        {
          if (v40 == 2016687156 || v40 == 2019963440)
            goto LABEL_80;
          v42 = 2019963442;
        }
        goto LABEL_79;
      }
      if (v40 > 1932996148)
      {
        if (v40 == 1932996149 || v40 == 2016686640)
          goto LABEL_80;
        v42 = 2016686642;
        goto LABEL_79;
      }
      if (v40 == 1919378232)
        goto LABEL_67;
      if (v40 == 1919379252)
      {
LABEL_80:
        v41 = 2;
        goto LABEL_81;
      }
      if (v40 != 1919381552)
        goto LABEL_67;
    }
    else
    {
      v41 = 8;
      if (v40 <= 1751411058)
      {
        if (v40 > 1717855599)
        {
          if (v40 == 1717855600 || v40 == 1717856627)
            goto LABEL_72;
          v42 = 1751410032;
        }
        else
        {
          if (v40 == 1380401729)
            goto LABEL_72;
          if (v40 == 1380411457)
            goto LABEL_81;
          v42 = 1650943796;
        }
LABEL_79:
        if (v40 != v42)
          goto LABEL_67;
        goto LABEL_80;
      }
      if (v40 <= 1882468911)
      {
        if (v40 != 1751411059 && v40 != 1751527984)
        {
          if (v40 == 1815491698)
            goto LABEL_81;
          goto LABEL_67;
        }
        goto LABEL_80;
      }
      if (v40 != 1882468912 && v40 != 1885745712)
      {
        v43 = 1919365990;
        goto LABEL_71;
      }
    }
    v41 = 0;
    goto LABEL_81;
  }
  if (v40 > 875704437)
  {
    if (v40 <= 1278226487)
    {
      if (v40 <= 875836518 || v40 == 875836534)
        goto LABEL_67;
      v43 = 1111970369;
LABEL_71:
      if (v40 == v43)
        goto LABEL_72;
LABEL_67:
      v41 = 1;
      goto LABEL_81;
    }
    if (v40 > 1278226735)
    {
      if (v40 == 1278226736 || v40 == 1278226742)
        goto LABEL_80;
      v42 = 1278555701;
      goto LABEL_79;
    }
    if (v40 == 1278226488)
      goto LABEL_67;
    if (v40 != 1278226534)
    {
      v42 = 1278226536;
      goto LABEL_79;
    }
LABEL_72:
    v41 = 4;
    goto LABEL_81;
  }
  if (v40 > 641234479)
  {
    if (v40 <= 825306676 || v40 != 825306677 && v40 != 825437747)
      goto LABEL_67;
    goto LABEL_80;
  }
  if (v40 > 641230383)
    goto LABEL_67;
  if (v40 == 16)
    goto LABEL_80;
  if (v40 != 24)
  {
    if (v40 != 32)
      goto LABEL_67;
    goto LABEL_72;
  }
  v41 = 3;
LABEL_81:
  v44 = v41;
  v101 = CVPixelBufferGetPixelFormatType(a1);
  v100 = v113;
  v45 = v111;
  v46 = v28;
  v99 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v28);
  v47 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v28);
  v48 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v28);
  v49 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v28);
  if (!v107)
  {
    free(v37);
    a5 = v103;
    goto LABEL_114;
  }
  v50 = (v45.i64[0] << v28) + v109 + v45.i64[1] * v106 / v44;
  v51 = &v49[2 * v50];
  v52 = (v100.i64[0] << v28) + v109 + v100.i64[1] * v105 / v44;
  v53 = &v48[2 * v52];
  v54 = &v47[v50];
  v55 = &v99[v52];
  v56 = PFImageMetricGetBitDepthForPixelFormat(v101);
  v57 = 0;
  v58 = 0;
  v59 = 16 - v56;
  v60 = v105 / v44;
  v61 = 0.0;
  v62 = v106 / v44;
  v63 = 0.0;
  do
  {
    v64 = ((int)v57 + 8) % 9u;
    v65 = v57 % 9;
    if (v110 < 9)
    {
      if (v30)
      {
        v73 = (_DWORD *)*((_QWORD *)v115 + v65);
        v74 = (_DWORD *)*((_QWORD *)v115 + v64);
        v75 = v30;
        v76 = v55;
        v77 = v54;
        do
        {
          v78 = *v76;
          v79 = *v77;
          *v73 = *v74 + v78;
          v73[1] = v74[1] + v79;
          v73[2] = v74[2] + v78 * v78;
          v73[3] = v74[3] + v79 * v79;
          v76 += v29;
          v73[4] = v74[4] + v79 * v78;
          v77 += v29;
          v74 += 5;
          v73 += 5;
          --v75;
        }
        while (v75);
      }
    }
    else if (v30)
    {
      v66 = (_DWORD *)*((_QWORD *)v115 + v65);
      v67 = (_DWORD *)*((_QWORD *)v115 + v64);
      v68 = v30;
      v69 = v53;
      v70 = v51;
      do
      {
        v71 = *(unsigned __int16 *)v69 >> v59;
        v72 = *(unsigned __int16 *)v70 >> v59;
        *v66 = *v67 + v71;
        v66[1] = v67[1] + v72;
        v66[2] = v67[2] + v71 * v71;
        v66[3] = v67[3] + v72 * v72;
        v66[4] = v67[4] + v72 * v71;
        v69 += 2 * v29;
        v70 += 2 * v29;
        v67 += 5;
        v66 += 5;
        --v68;
      }
      while (v68);
    }
    v80 = v57 + 1;
    if (v57 >= 7)
    {
      if (v30)
      {
        v81 = *((_QWORD *)v115 + v80 % 9);
        v82 = (int32x4_t *)*((_QWORD *)v115 + v65);
        v83 = v30;
        v84 = (int32x4_t *)v81;
        do
        {
          *v84 = vsubq_s32(*v82, *v84);
          v84[1].i32[0] = v82[1].i32[0] - v84[1].i32[0];
          v82 = (int32x4_t *)((char *)v82 + 20);
          v84 = (int32x4_t *)((char *)v84 + 20);
          --v83;
        }
        while (v83);
        LODWORD(v85) = 0;
        v86 = 0;
        v87 = (int32x4_t *)(v81 + 4);
        v88 = 0uLL;
        v89 = 0.0;
        v90 = 0.0;
        v91 = BaseAddressOfPlane;
        do
        {
          v86 += v87[-1].i32[3] - v87[-11].i32[3];
          v88 = vaddq_s32(vsubq_s32(*v87, v87[-10]), v88);
          if (v83 >= 7)
          {
            v92 = v86 * v86 + v88.i32[0] * v88.i32[0];
            v93 = ((double)(2 * v86 * v88.i32[0]) + 26634.24) / ((double)v92 + 26634.24);
            v94 = ((double)((v88.i32[3] << 7) - 2 * v86 * v88.i32[0]) + 239708.16)
                / ((double)((v88.i32[1] << 6) - v92 + (v88.i32[2] << 6)) + 239708.16);
            if (v91)
            {
              v95 = *v91;
              v90 = v90 + (double)v95 * v93;
              v89 = v89 + (double)v95 * v94;
              LODWORD(v85) = v85 + v95;
              v91 += v29;
            }
            else
            {
              v90 = v90 + v93;
              v89 = v89 + v94;
            }
          }
          ++v83;
          v87 = (int32x4_t *)((char *)v87 + 20);
        }
        while (v30 != v83);
      }
      else
      {
        LODWORD(v85) = 0;
        v90 = 0.0;
        v91 = BaseAddressOfPlane;
        v89 = 0.0;
      }
      if (v91)
        v85 = v85;
      else
        v85 = (v30 - 7);
      v58 += v85;
      v63 = v63 + v90;
      v61 = v61 + v89;
    }
    v55 += v60;
    v54 += v62;
    v53 += 2 * v60;
    v51 += 2 * v62;
    if (BaseAddressOfPlane)
      BaseAddressOfPlane += BytesPerRowOfPlane << v46;
    else
      BaseAddressOfPlane = 0;
    v57 = v80;
  }
  while (v80 != v107);
  free(v102);
  a5 = v103;
  if (!v58)
    goto LABEL_114;
  v96 = v63 / (double)v58;
  v97 = v61 / (double)v58;
  *(double *)(v103 + 8) = v96;
  *(double *)(v103 + 16) = v97;
  v98 = v96 * v97;
LABEL_115:
  *(double *)a5 = v98;
}

void _computeCropRectForPixelBuffer(_QWORD *a1, CVPixelBufferRef pixelBuffer, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double PixelBufferCLAPAsRect;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  const char *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v24 = *MEMORY[0x1E0C80C00];
  PixelBufferCLAPAsRect = FigPhotoGetPixelBufferCLAPAsRect(pixelBuffer);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v25.origin.x = a3;
  v25.origin.y = a4;
  v25.size.width = a5;
  v25.size.height = a6;
  if (!CGRectIsNull(v25))
  {
    if (a5 >= v15 - a3)
      v18 = v15 - a3;
    else
      v18 = a5;
    if (a6 >= v17 - a4)
      v19 = v17 - a4;
    else
      v19 = a6;
    if (a3 >= v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        v20 = MEMORY[0x1E0C81028];
        v21 = "Failed condition 'cropRect.origin.x < rect->size.width', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (a4 >= v17)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        v20 = MEMORY[0x1E0C81028];
        v21 = "Failed condition 'cropRect.origin.y < rect->size.height', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (v18 <= v15 - a3)
    {
      if (v19 <= v17 - a4)
      {
        PixelBufferCLAPAsRect = a3 + PixelBufferCLAPAsRect;
        v13 = a4 + v13;
        v15 = v18;
        v17 = v19;
        goto LABEL_22;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v22 = 136315138;
        v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
        v20 = MEMORY[0x1E0C81028];
        v21 = "Failed condition 'cropRect.size.height <= rect->size.height - cropRect.origin.y', bailing from %s";
        goto LABEL_17;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v22 = 136315138;
      v23 = "OSStatus FigPhotoApplyCropRectToRect(CGRect *, CGRect)";
      v20 = MEMORY[0x1E0C81028];
      v21 = "Failed condition 'cropRect.size.width <= rect->size.width - cropRect.origin.x', bailing from %s";
LABEL_17:
      _os_log_error_impl(&dword_1A16EE000, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v22, 0xCu);
    }
  }
LABEL_22:
  v26.origin.x = PixelBufferCLAPAsRect;
  v26.origin.y = v13;
  v26.size.width = v15;
  v26.size.height = v17;
  v27 = CGRectIntegral(v26);
  *a1 = (unint64_t)v27.origin.x;
  a1[1] = (unint64_t)v27.origin.y;
  a1[2] = (unint64_t)v27.size.width;
  a1[3] = (unint64_t)v27.size.height;
}

void FigPhotoSetPixelBufferCLAP(__CVBuffer *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  double v6;
  double v7;
  double v8;
  double v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  const __CFAllocator *v14;
  size_t v15;
  size_t v16;
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  float v19;
  int v20;
  int v21;
  NSObject *v22;
  const char *v23;
  uint32_t v24;
  float v25;
  int v26;
  float v27;
  int v28;
  float v29;
  int v30;
  int v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = (double)a2;
    v7 = (double)a3;
    v8 = (double)a4;
    v9 = (double)a5;
    v36.origin.x = FigPhotoGetPixelBufferCLAPAsRect(a1);
    x = v36.origin.x;
    y = v36.origin.y;
    width = v36.size.width;
    height = v36.size.height;
    v38.origin.x = v6;
    v38.origin.y = v7;
    v38.size.width = v8;
    v38.size.height = v9;
    if (CGRectContainsRect(v36, v38))
    {
      v37.origin.x = x;
      v37.origin.y = y;
      v37.size.width = width;
      v37.size.height = height;
      v39.origin.x = v6;
      v39.origin.y = v7;
      v39.size.width = v8;
      v39.size.height = v9;
      if (CGRectEqualToRect(v37, v39))
        return;
      v14 = CFGetAllocator(a1);
      v15 = CVPixelBufferGetWidth(a1);
      v16 = CVPixelBufferGetHeight(a1);
      Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          v31 = 136315138;
          v32 = "OSStatus FigPhotoCreatePixelBufferCLAPDictionaryFromRect(CFAllocatorRef, CGSize, CGRect, CFDictionaryRef *)";
          _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'dict', bailing from %s", (uint8_t *)&v31, 0xCu);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          LOWORD(v31) = 0;
          _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "failed to create clap dictionary", (uint8_t *)&v31, 2u);
        }
        v21 = -16991;
        goto LABEL_33;
      }
      v18 = Mutable;
      v19 = v8 * 0.5 + v6 - (double)v15 * 0.5;
      v20 = FigPhotoCFDictionarySetFloat(Mutable, (const void *)*MEMORY[0x1E0CA8D48], v19);
      if (v20)
      {
        v21 = v20;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          goto LABEL_31;
      }
      else
      {
        v25 = v9 * 0.5 + v7 - (double)v16 * 0.5;
        v26 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E0CA8D58], v25);
        if (v26)
        {
          v21 = v26;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
            goto LABEL_31;
        }
        else
        {
          v27 = v8;
          v28 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E0CA8D60], v27);
          if (!v28)
          {
            v29 = v9;
            v30 = FigPhotoCFDictionarySetFloat(v18, (const void *)*MEMORY[0x1E0CA8D40], v29);
            if (!v30)
            {
              CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], v18, kCVAttachmentMode_ShouldPropagate);
              CFRelease(v18);
              return;
            }
            v21 = v30;
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
              goto LABEL_32;
            goto LABEL_31;
          }
          v21 = v28;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          {
LABEL_31:
            v31 = 134218242;
            v32 = (const char *)v21;
            v33 = 2080;
            v34 = "OSStatus FigPhotoCreatePixelBufferCLAPDictionaryFromRect(CFAllocatorRef, CGSize, CGRect, CFDictionaryRef *)";
            _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unexpected error %ld, bailing from %s", (uint8_t *)&v31, 0x16u);
          }
        }
      }
LABEL_32:
      CFRelease(v18);
LABEL_33:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return;
      v31 = 134218242;
      v32 = (const char *)v21;
      v33 = 2080;
      v34 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
      v22 = MEMORY[0x1E0C81028];
      v23 = "Unexpected error %ld, bailing from %s";
      v24 = 22;
LABEL_17:
      _os_log_error_impl(&dword_1A16EE000, v22, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&v31, v24);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v31 = 136315138;
      v32 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'CGRectContainsRect(currentTopLeftRect, topLeftRect)', bailing from %s", (uint8_t *)&v31, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v31) = 0;
      v22 = MEMORY[0x1E0C81028];
      v23 = "new top-left CLAP rect is too big to fit in existing rect";
      goto LABEL_16;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v31 = 136315138;
      v32 = "OSStatus FigPhotoSetPixelBufferCLAPFromRect(CVPixelBufferRef, CGRect, Boolean, Boolean)";
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'pixelBuffer != NULL', bailing from %s", (uint8_t *)&v31, 0xCu);
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v31) = 0;
      v22 = MEMORY[0x1E0C81028];
      v23 = "pixelBuffer not specified";
LABEL_16:
      v24 = 2;
      goto LABEL_17;
    }
  }
}

double FigPhotoGetPixelBufferCLAPAsRect(CVPixelBufferRef pixelBuffer)
{
  double Width;
  double Height;
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const void *v6;
  const void *Value;
  const void *v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID TypeID;
  _BOOL4 v12;
  NSObject *v13;
  const char *v14;
  double v15;
  double v16;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint8_t buf[4];
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (pixelBuffer)
  {
    Width = (double)CVPixelBufferGetWidth(pixelBuffer);
    Height = (double)CVPixelBufferGetHeight(pixelBuffer);
  }
  else
  {
    Width = 0.0;
    Height = 0.0;
  }
  v4 = (const __CFDictionary *)CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  v23 = 0.0;
  v24 = 0;
  v21 = Width;
  v22 = Height;
  if (!v4)
  {
    v15 = 0.0;
    v16 = Width;
    return round(v15 + (Width - v16) * 0.5);
  }
  v5 = v4;
  v6 = (const void *)*MEMORY[0x1E0CA22F8];
  if (CFDictionaryContainsKey(v4, (const void *)*MEMORY[0x1E0CA22F8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E0CA22C8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E0CA22D8])
    && CFDictionaryContainsKey(v5, (const void *)*MEMORY[0x1E0CA22E8]))
  {
    Value = CFDictionaryGetValue(v5, v6);
    if (Value && (v8 = Value, v9 = CFGetTypeID(Value), v9 == CFArrayGetTypeID()))
    {
      if (CFArrayGetCount((CFArrayRef)v8) == 2)
      {
        v10 = CFGetTypeID(v8);
        TypeID = CFArrayGetTypeID();
        v12 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (v10 == TypeID)
        {
          if (!v12)
            goto LABEL_26;
          *(_WORD *)buf = 0;
          v13 = MEMORY[0x1E0C81028];
          v14 = "invalid index";
        }
        else
        {
          if (!v12)
            goto LABEL_26;
          *(_WORD *)buf = 0;
          v13 = MEMORY[0x1E0C81028];
          v14 = "not an array";
        }
        _os_log_error_impl(&dword_1A16EE000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
LABEL_26:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v18 = MEMORY[0x1E0C81028];
          v19 = "ERROR: Unable to read num/den from rational array";
          v20 = 2;
LABEL_30:
          _os_log_error_impl(&dword_1A16EE000, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
        }
LABEL_20:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Warning: Unable to convert rational values from CLAP dictionary to floating point", buf, 2u);
        }
        v16 = Width;
        v15 = 0.0;
        goto LABEL_16;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 136315138;
      v26 = "Boolean _floatFromRational(CFArrayRef, CGFloat *)";
      v18 = MEMORY[0x1E0C81028];
      v19 = "Failed condition 'CFArrayGetCount(ratArray) == 2', bailing from %s";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_20;
      *(_DWORD *)buf = 136315138;
      v26 = "Boolean _floatFromRational(CFArrayRef, CGFloat *)";
      v18 = MEMORY[0x1E0C81028];
      v19 = "Failed condition 'FigCFIsTypeOf(ratArray, CFArray)', bailing from %s";
    }
    v20 = 12;
    goto LABEL_30;
  }
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E0CA8D60], &v21);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E0CA8D40], &v22);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E0CA8D48], &v23);
  _cfDictionaryGetNumberIfPresent((CFTypeID)v5, (const void *)*MEMORY[0x1E0CA8D58], &v24);
  v15 = v23;
  v16 = v21;
LABEL_16:
  CFRelease(v5);
  return round(v15 + (Width - v16) * 0.5);
}

uint64_t FigPhotoCFDictionarySetFloat(__CFDictionary *a1, const void *a2, float a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  float valuePtr;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  valuePtr = a3;
  if (a2)
  {
    v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(a1, a2, v5);
      CFRelease(v6);
      return 0;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        v10 = "OSStatus _cfDictionarySetNumber(CFMutableDictionaryRef, CFStringRef, CFNumberType, void *)";
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'number', bailing from %s", buf, 0xCu);
      }
      return 4294950305;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v10 = "OSStatus _cfDictionarySetNumber(CFMutableDictionaryRef, CFStringRef, CFNumberType, void *)";
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed condition 'key', bailing from %s", buf, 0xCu);
    }
    return 4294950306;
  }
}

CFTypeID _cfDictionaryGetNumberIfPresent(CFTypeID result, const void *a2, void *a3)
{
  CFTypeID TypeID;
  void *value;

  value = 0;
  if (a2)
  {
    if (a3)
    {
      result = CFDictionaryGetValueIfPresent((CFDictionaryRef)result, a2, (const void **)&value);
      if ((_DWORD)result)
      {
        TypeID = CFNumberGetTypeID();
        result = CFGetTypeID(value);
        if (TypeID == result)
          return CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
      }
    }
  }
  return result;
}

uint64_t PFImageMetricGetBitDepthForPixelFormat(int a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v1 = 32;
  if (a1 <= 1380401728)
  {
    if (a1 <= 875704933)
    {
      if (a1 <= 825306676 || a1 > 875704421)
        return 8;
      if (a1 == 825306677)
        return 16;
      v2 = 825437747;
      goto LABEL_37;
    }
    if (a1 <= 1278226533)
      return 8;
    if (a1 > 1278226741)
    {
      if (a1 == 1278226742)
        return 16;
      if (a1 == 1278555445)
        return 5;
      v3 = 1378955371;
    }
    else
    {
      if (a1 == 1278226534)
        return v1;
      if (a1 == 1278226536)
        return 16;
      v3 = 1278226736;
    }
    goto LABEL_48;
  }
  if (a1 > 1919379251)
  {
    if (a1 > 2016687155)
    {
      if (a1 > 2019963955)
      {
        if (a1 != 2019963956)
          return 8;
        return 10;
      }
      if (a1 == 2016687156 || a1 == 2019963440)
        return 10;
      v3 = 2019963442;
    }
    else
    {
      if (a1 <= 1999843441)
      {
        if (a1 == 1919379252)
          return 14;
        if (a1 != 1919381552)
        {
          v2 = 1932996149;
          goto LABEL_37;
        }
        return 10;
      }
      if (a1 == 1999843442 || a1 == 2016686640)
        return 10;
      v3 = 2016686642;
    }
LABEL_48:
    if (a1 != v3)
      return 8;
    return 10;
  }
  if (a1 > 1751411058)
  {
    if (a1 <= 1882468911)
    {
      if (a1 == 1751411059 || a1 == 1751527984)
        return 16;
      v2 = 1815491698;
      goto LABEL_37;
    }
    if (a1 != 1882468912 && a1 != 1885745712)
      return 8;
    return 10;
  }
  if (a1 <= 1717855599)
  {
    if (a1 != 1380401729)
    {
      if (a1 != 1380411457)
      {
        if (a1 != 1650943796)
          return 8;
        return 14;
      }
      return 16;
    }
    return 8;
  }
  if (a1 != 1717855600 && a1 != 1717856627)
  {
    v2 = 1751410032;
LABEL_37:
    if (a1 != v2)
      return 8;
    return 16;
  }
  return v1;
}

const __CFString *PFParallaxAssetResourceTypeName(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("???");
  else
    return off_1E45A1B78[a1];
}

const __CFString *PFPosterMediaTypeDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("Undefined");
  else
    return off_1E45A1BB0[a1 - 1];
}

const __CFString *PFPosterMediaTypeStringWithType(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("??");
  else
    return off_1E45A1BC8[a1];
}

void sub_1A170C044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

id _PFExportGIFRequestError(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v5)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CB3388]);
  if (v6)
  {
    v9 = (void *)objc_msgSend(v6, "copy");
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0CB2938]);

  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PFExportGIFRequestErrorDomain"), a1, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t LayerIDMatchesOptions(void *a1, unint64_t a2)
{
  id v3;
  uint64_t v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("background")) & 1) == 0
    && (objc_msgSend(v3, "isEqualToString:", CFSTR("foreground")) & 1) == 0
    && (objc_msgSend(v3, "isEqualToString:", CFSTR("background-landscape")) & 1) == 0
    && (objc_msgSend(v3, "isEqualToString:", CFSTR("foreground-landscape")) & 1) == 0)
  {
    if (objc_msgSend(v3, "hasSuffix:", CFSTR("backfill")))
    {
      v4 = (a2 >> 1) & 1;
      goto LABEL_6;
    }
    if (objc_msgSend(v3, "hasPrefix:", CFSTR("inactive")))
    {
      v4 = (a2 >> 2) & 1;
      goto LABEL_6;
    }
    if (objc_msgSend(v3, "isEqualToString:", CFSTR("settling-video")))
    {
      v4 = (a2 >> 6) & 1;
      goto LABEL_6;
    }
    if (objc_msgSend(v3, "hasPrefix:", CFSTR("debug")))
    {
      v4 = (a2 >> 4) & 1;
      goto LABEL_6;
    }
    if ((_WORD)a2 != 0xFFFF)
    {
      v4 = 0;
      goto LABEL_6;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_debug_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "Allowing unexpected layer ID: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  v4 = 1;
LABEL_6:

  return v4;
}

BOOL ReadImageFromURL(uint64_t a1, void *a2, int a3, _QWORD *a4)
{
  id v6;
  void *v7;
  void *v8;
  uint64_t ImageFromImageSource;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (a3)
    objc_msgSend(v7, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09588]);
  ImageFromImageSource = _PLFigCreateImageFromImageSource((uint64_t)v6, 0, 2, v8);
  v10 = ImageFromImageSource;
  if (a4 && (_DWORD)ImageFromImageSource)
  {
    v11 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Error reading image from disk, code: %d"), ImageFromImageSource, *MEMORY[0x1E0CB2938]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PhotosFormats"), 3, v13);
    *a4 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v10 == 0;
}

void PFCreateGIFFromVideoURL(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  PFExportGIFRequest *v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[4];
  id v17;

  v7 = a3;
  v8 = a4;
  v9 = a2;
  v10 = a1;
  v11 = -[PFExportGIFRequest initWithVideoURL:]([PFExportGIFRequest alloc], "initWithVideoURL:", v10);

  -[PFExportGIFRequest setSynchronous:](v11, "setSynchronous:", 1);
  v15 = v8;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __PFCreateGIFFromVideoURL_block_invoke;
  v16[3] = &unk_1E45A1CB0;
  v17 = v7;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __PFCreateGIFFromVideoURL_block_invoke_2;
  v14[3] = &unk_1E45A1CD8;
  v12 = v8;
  v13 = v7;
  +[PFExportGIFRequest runExport:toURL:progress:completion:](PFExportGIFRequest, "runExport:toURL:progress:completion:", v11, v9, v16, v14);

}

uint64_t PFSharedFigDecodeSessionDiscardCachedBuffers()
{
  if (PFSharedFigDecodeSession_s_onceToken != -1)
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1139);
  return CMPhotoDecompressionSessionFlushCachedBuffers();
}

uint64_t _PLFigCreateImageFromImageSource(uint64_t a1, int a2, int a3, void *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t Container;

  v6 = a4;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *MEMORY[0x1E0D09598];
  objc_msgSend(v6, "objectForKeyedSubscript:", *MEMORY[0x1E0D09598]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v9)
    objc_msgSend(v7, "setObject:forKey:", &unk_1E45CA2B0, v8);
  if (a3 == 4)
  {
    objc_msgSend(v7, "setObject:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09558]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1111970369);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setObject:forKey:", v10, *MEMORY[0x1E0D09570]);

  }
  if (a2)
    objc_msgSend(v7, "setObject:forKey:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0D09550]);
  objc_msgSend(v7, "addEntriesFromDictionary:", v6);
  if (PFSharedFigDecodeSession_s_onceToken != -1)
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1139);
  Container = CMPhotoDecompressionSessionCreateContainer();

  return Container;
}

uint64_t PFFigCreateCGImageFromImageData(uint64_t a1, int a2, void *a3)
{
  return _PLFigCreateImageFromImageSource(a1, a2, 4, a3);
}

uint64_t PFFigCreateCVPixelBufferFromImageData(uint64_t a1, void *a2)
{
  return _PLFigCreateImageFromImageSource(a1, 0, 2, a2);
}

uint64_t PFFigCreateCVPixelBufferFromURL(uint64_t a1, void *a2)
{
  return _PLFigCreateImageFromImageSource(a1, 0, 2, a2);
}

uint64_t PFFigJPEGDataFromImage(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v20[4];
  _QWORD v21[4];
  _QWORD v22[3];
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = 0;
  v9 = 0xFFFFFFFFLL;
  v10 = 0;
  if (a1 && a2)
  {
    if (!a4)
    {
      v13 = CMPhotoCompressionSessionCreate();
      if ((_DWORD)v13)
      {
        v9 = v13;
        v8 = 0;
        goto LABEL_8;
      }
    }
    v11 = *MEMORY[0x1E0D09320];
    v22[0] = *MEMORY[0x1E0D09318];
    v22[1] = v11;
    v23[0] = &unk_1E45CA2C8;
    v23[1] = &unk_1E45CA2C8;
    v22[2] = *MEMORY[0x1E0D09308];
    v23[2] = &unk_1E45CA2C8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 3, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = CMPhotoCompressionSessionOpenEmptyContainer();
    if ((_DWORD)v12)
    {
      v9 = v12;
LABEL_8:
      v10 = 0;
      goto LABEL_14;
    }
    v14 = (void *)MEMORY[0x1E0C99E08];
    v15 = *MEMORY[0x1E0D093A8];
    v20[0] = *MEMORY[0x1E0D09378];
    v20[1] = v15;
    v21[0] = &unk_1E45CA2E0;
    v21[1] = MEMORY[0x1E0C9AAB0];
    v16 = *MEMORY[0x1E0D09410];
    v20[2] = *MEMORY[0x1E0D09418];
    v20[3] = v16;
    v21[2] = &unk_1E45CA2F8;
    v21[3] = &unk_1E45CA2C8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 4);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "dictionaryWithDictionary:", v17);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "addEntriesFromDictionary:", v7);
    v18 = CMPhotoCompressionSessionAddImage();
    if ((_DWORD)v18)
    {
      v9 = v18;
    }
    else
    {
      v9 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
      if (!(_DWORD)v9)
        *a1 = 0;
    }
  }
LABEL_14:

  return v9;
}

uint64_t PFFigCopyImageDataWithProperties(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a1 && a2)
    return _PFFigCopyImageWithPropertiesToURL(a1, a2, a3, a4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t _PFFigCopyImageWithPropertiesToURL(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[3];
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v7 = *MEMORY[0x1E0D09308];
  v14[0] = *MEMORY[0x1E0D09330];
  v14[1] = v7;
  v15[0] = MEMORY[0x1E0C9AAB0];
  v15[1] = &unk_1E45CA328;
  v14[2] = *MEMORY[0x1E0D092F8];
  v15[2] = a2;
  v8 = (void *)MEMORY[0x1E0C99D80];
  v9 = a3;
  v10 = a2;
  objc_msgSend(v8, "dictionaryWithObjects:forKeys:count:", v15, v14, 3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = _PFFigCopyImageWithPropertiesAndContainerOptions(a1, v11, v9, a4, &__block_literal_global_1308);
  return v12;
}

uint64_t _PFFigCopyImageWithPropertiesAndContainerOptions(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t (**v11)(id, _QWORD);
  uint64_t v12;
  uint64_t v13;
  id v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (!a4)
  {
    v13 = CMPhotoCompressionSessionCreate();
    if ((_DWORD)v13)
      goto LABEL_9;
    a4 = 0;
  }
  v15 = v10;
  v12 = CMPhotoCompressionSessionOpenExistingContainerForModification();
  if ((_DWORD)v12)
  {
    v13 = v12;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v17 = a1;
      v18 = 1024;
      v19 = v13;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CMPhotoCompressionSessionOpenExistingContainerForModification failed for %@ with code %d", buf, 0x12u);
    }
  }
  else
  {
    v13 = v11[2](v11, a4);
  }

LABEL_9:
  return v13;
}

uint64_t PFFigCopyImageFileWithProperties(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a1 && a2)
    return _PFFigCopyImageWithPropertiesToURL(a1, a2, a3, a4);
  else
    return 0xFFFFFFFFLL;
}

uint64_t PFFigCopyImageFileWithPropertiesToData(void *a1, _QWORD *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = v8;
  v10 = 0xFFFFFFFFLL;
  if (v7 && a2)
  {
    v11 = v8;
    v12 = *MEMORY[0x1E0D09308];
    v20[0] = *MEMORY[0x1E0D09330];
    v20[1] = v12;
    v21[0] = MEMORY[0x1E0C9AAB0];
    v21[1] = &unk_1E45CA2C8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    v17 = &v16;
    v18 = 0x2020000000;
    v19 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = ___PFFigCopyImageWithPropertiesToData_block_invoke;
    v15[3] = &unk_1E45A1DC8;
    v15[4] = &v16;
    v10 = _PFFigCopyImageWithPropertiesAndContainerOptions((uint64_t)v7, v13, v11, a4, v15);
    if (!(_DWORD)v10)
      *a2 = (id)v17[3];
    _Block_object_dispose(&v16, 8);

  }
  return v10;
}

void sub_1A1710968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _PFFigTranscodeImageToJPEG(float a1, uint64_t a2, _QWORD *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  void *v10;
  uint64_t Container;
  double v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  if (PFSharedFigDecodeSession_s_onceToken != -1)
    dispatch_once(&PFSharedFigDecodeSession_s_onceToken, &__block_literal_global_1139);
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  Container = CMPhotoDecompressionSessionCreateContainer();
  if (!(_DWORD)Container)
  {
    objc_msgSend(v10, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D09558]);
    objc_msgSend(v10, "addEntriesFromDictionary:", v8);
    if (v9)
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0D09670]);
    if (a1 > 0.0)
    {
      objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E45CA328, *MEMORY[0x1E0D09418]);
      v16 = *MEMORY[0x1E0D09618];
      *(float *)&v12 = a1;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, *MEMORY[0x1E0D09410]);

    }
    objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E45CA2C8, *MEMORY[0x1E0D09598]);
    Container = CMPhotoDecompressionContainerJFIFTranscode();
    if (!(_DWORD)Container)
      *a3 = 0;
  }

  return Container;
}

uint64_t PFFigEncodeCVPixelBufferToURL(uint64_t a1, void *a2, int a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  _QWORD v12[3];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = *MEMORY[0x1E0D09308];
  v12[0] = *MEMORY[0x1E0D09318];
  v12[1] = v5;
  v13[0] = &unk_1E45CA310;
  v13[1] = &unk_1E45CA328;
  v12[2] = *MEMORY[0x1E0D092F8];
  v13[2] = v4;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *MEMORY[0x1E0D09378];
  v11 = &unk_1E45CA340;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = CMPhotoCompressionSessionCreate();
  if (!(_DWORD)v8)
  {
    v8 = CMPhotoCompressionSessionOpenEmptyContainer();
    if (!(_DWORD)v8)
    {
      v8 = CMPhotoCompressionSessionAddImage();
      if (!(_DWORD)v8)
      {
        if (!a3 || (v8 = CMPhotoCompressionSessionAddAuxiliaryImage(), !(_DWORD)v8))
        {
          v8 = CMPhotoCompressionSessionCloseContainer();
          if (!(_DWORD)v8)
            v8 = CMPhotoCompressionSessionInvalidate();
        }
      }
    }
  }

  return v8;
}

uint64_t PFFigEncodeCVPixelBufferToData(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v10;
  void *v11;
  _QWORD v12[2];
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v3 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v6 = *MEMORY[0x1E0D09308];
    v12[0] = *MEMORY[0x1E0D09318];
    v12[1] = v6;
    v13[0] = &unk_1E45CA310;
    v13[1] = &unk_1E45CA2C8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, v12, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *MEMORY[0x1E0D09378];
    v11 = &unk_1E45CA340;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = CMPhotoCompressionSessionCreate();
    if (!(_DWORD)v3)
    {
      v3 = CMPhotoCompressionSessionOpenEmptyContainer();
      if (!(_DWORD)v3)
      {
        v3 = CMPhotoCompressionSessionAddImage();
        if (!(_DWORD)v3)
        {
          if (!a3 || (v3 = CMPhotoCompressionSessionAddAuxiliaryImage(), !(_DWORD)v3))
          {
            v3 = CMPhotoCompressionSessionCloseContainerAndCopyBacking();
            if (!(_DWORD)v3)
              *a2 = 0;
          }
        }
      }
    }

  }
  return v3;
}

void PFMutableArrayShuffleRangeWithRandomNumberGenerator(void *a1, uint64_t a2, int a3, void *a4)
{
  unint64_t v7;
  id v8;

  v8 = a1;
  if (a3 >= 2)
  {
    v7 = a3 + 1;
    do
    {
      objc_msgSend(v8, "exchangeObjectAtIndex:withObjectAtIndex:", a2 + (v7 - 2), a2 + (int)objc_msgSend(a4, "nextUnsignedIntegerLessThan:", (v7 - 2)));
      --v7;
    }
    while (v7 > 2);
  }

}

void PFMutableArrayShuffleWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = a1;
  PFMutableArrayShuffleRangeWithRandomNumberGenerator(v4, 0, objc_msgSend(v4, "count"), v3);

}

id PFShuffledArrayWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  if ((unint64_t)objc_msgSend(v4, "count") >= 2)
  {
    v5 = (void *)objc_msgSend(v4, "mutableCopy");

    PFMutableArrayShuffleWithRandomNumberGenerator(v5, v3);
    v4 = v5;
  }
  v6 = (void *)objc_msgSend(v4, "copy");

  return v6;
}

id PFArrayRandomObjectWithRandomNumberGenerator(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  if (v5 > 1)
    objc_msgSend(v3, "objectAtIndexedSubscript:", objc_msgSend(v4, "nextUnsignedIntegerLessThan:", v5));
  else
    objc_msgSend(v3, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

const __CFString *PFPosterShuffleFrequencyDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("None");
  else
    return off_1E45A1E18[a1 - 1];
}

const __CFString *PFPosterShuffleTypeDescription(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Manual");
  if (!a1)
    v1 = CFSTR("Smart Albums");
  if (a1 == 2)
    return CFSTR("User Album");
  else
    return v1;
}

__CFString *PFPosterShuffleSmartAlbumsDescription(uint64_t a1)
{
  return PFBitmaskDescription(a1, &unk_1E45CB228, &unk_1E45CB240);
}

void sub_1A1711F08(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

void sub_1A1712004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1712434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A17125D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va1);
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1A17126AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A171273C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1712C20(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v15;
  uint64_t v16;

  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error reading scene geography index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A17128B4);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 8));
    *(_QWORD *)v1 = 0;
    JUMPOUT(0x1A1B0C908);
  }
  return result;
}

char **boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(char **a1)
{
  char *v2;

  v2 = *a1;
  if (v2)
  {
    if (*((_BYTE *)a1 + 28))
    {
      if (shmdt(v2))
        __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
    }
    else
    {
      munmap((void *)(v2 - a1[2]), (size_t)&a1[2][(_QWORD)a1[1]]);
      *a1 = 0;
    }
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file(_QWORD *a1, const char *a2)
{
  _QWORD *v4;
  int v5;
  const char *v6;

  v6 = a2;
  *a1 = 0;
  v4 = a1;
  v5 = 1;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((uint64_t)(a1 + 1), &v6, 0, (uint64_t)&v4);
  return a1;
}

void sub_1A1712EF0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_1A171307C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_find_impl<int>(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t (**v6)();
  int64x2_t v7;
  uint64_t v8;

  if (!a2)
    __assert_rtn("priv_find_impl", "segment_manager.hpp", 731, "name != 0");
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4EF0] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v7 = vdupq_n_s64(4uLL);
  v8 = v2;
  v6 = off_1E45A1250;
  if (a2 == (char *)-1)
  {
    v3 = a1 + 88;
    a2 = (char *)v2;
  }
  else
  {
    v3 = a1 + 56;
  }
  return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_find<char>(a1, a2, v3, (uint64_t)&v6, &v5);
}

unint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_find<char>(int a1, char *__s, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  size_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  char *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t result;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;

  v7 = strlen(__s);
  v8 = (char *)(a3 + 8);
  v41 = a3 + 8 - (_QWORD)&v41;
  v42 = a3 + 8 - (_QWORD)&v42;
  v44 = a3 + 8 - (_QWORD)&v44;
  v9 = *(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFFDLL;
  v10 = a3 + 8 - (_QWORD)&v46;
  if (v9 == 1)
    v10 = 0;
  v11 = v10 + v9;
  v12 = v8 - (char *)&v45;
  v45 = v8 - (char *)&v45;
  v46 = v10 + v9;
  if (v10 + v9 != 1)
  {
    while (1)
    {
      v47 = (char *)&v46 + v11 - (char *)&v47;
      if (v47 == 1)
        break;
      if (boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()((uint64_t)&v46 + v11, __s, v7))
      {
        if (v11 == 1)
          v13 = 0;
        else
          v13 = (char *)&v46 + v11;
        v16 = *((_QWORD *)v13 + 2);
        v14 = v13 + 16;
        v15 = v16;
      }
      else
      {
        if (v11 == 1)
          v17 = 0;
        else
          v17 = (char *)&v46 - (char *)&v45;
        v12 = v17 + v11;
        v45 = v17 + v11;
        if (v11 == 1)
          v18 = 0;
        else
          v18 = (char *)&v46 + v11;
        v19 = *((_QWORD *)v18 + 1);
        v14 = v18 + 8;
        v15 = v19;
      }
      v20 = v14 - (char *)&v47;
      if (v15 == 1)
        v20 = 0;
      v21 = v20 + v15;
      if (v21 == 1)
        v22 = 0;
      else
        v22 = (char *)&v47 - (char *)&v46;
      v11 = v22 + v21;
      v46 = v22 + v21;
      if (v22 + v21 == 1)
        goto LABEL_23;
    }
LABEL_51:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
LABEL_23:
  v23 = (char *)&v45 - (char *)&v43;
  if (v12 == 1)
    v23 = 0;
  v43 = v23 + v12;
  if (v23 + v12 == 1)
    v24 = 0;
  else
    v24 = (char *)&v43 + v23 + v12;
  if (v8 == v24)
  {
    v26 = &v44;
    v27 = a3 + 8 - (_QWORD)&v44;
  }
  else
  {
    v47 = v24 - (char *)&v47;
    if (v24 - (char *)&v47 == 1)
      goto LABEL_51;
    v25 = boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(__s, v7, (uint64_t)v24);
    v26 = &v44;
    if (!v25)
      v26 = (uint64_t *)&v43;
    v27 = *v26;
  }
  v28 = (char *)v26 - (char *)&v47;
  if (v27 == 1)
    v28 = 0;
  v29 = v28 + v27;
  v30 = (char *)&v47 - (char *)&v46;
  if (v29 == 1)
    v30 = 0;
  v31 = v30 + v29;
  v46 = v31;
  *a5 = 0;
  v32 = (char *)&v46 - (char *)&v47;
  if (v31 == 1)
    v32 = 0;
  v33 = v32 + v31;
  if (v33 == 1)
    v34 = 0;
  else
    v34 = (char *)&v47 + v33;
  if (v8 == v34)
    return 0;
  v35 = (char *)&v46 + v31;
  if (v31 == 1)
    v35 = 0;
  v47 = v35 - (char *)&v47;
  if (v35 - (char *)&v47 == 1)
    goto LABEL_51;
  v36 = *((_QWORD *)v35 + 3);
  v37 = *(_QWORD *)(a4 + 16);
  if (v36 != v36 / v37 * v37)
    __assert_rtn("priv_generic_find", "segment_manager.hpp", 877, "(ctrl_data->m_value_bytes % table.size) == 0");
  if ((v35[35] & 0x1F) != 1)
    __assert_rtn("priv_generic_find", "segment_manager.hpp", 878, "ctrl_data->sizeof_char() == sizeof(CharT)");
  result = (unint64_t)&v35[v35[34] * (unint64_t)(0xFu / v35[34] + 1)
                                + 24];
  *a5 = v36 / v37;
  return result;
}

uint64_t boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(const void *a1, size_t __n, uint64_t a3)
{
  size_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a3 + 32);
  if (v3 > __n)
    return 1;
  if (v3 != __n)
    return 0;
  v6 = *(_QWORD *)(a3 + 24);
  v5 = a3 + 24;
  return memcmp(a1, (const void *)(v5+ (*(_BYTE *)(v5 + 11) & 0x1F)+ (*(_BYTE *)(v5 + 11) & 0x1F)* ((v6 - 1)/ (unint64_t)(*(_BYTE *)(v5 + 11) & 0x1F))+ *(unsigned __int8 *)(v5 + 10)* (unint64_t)(0xFu / *(unsigned __int8 *)(v5 + 10) + 1)), __n) >> 31;
}

uint64_t boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 < a3)
    return 1;
  if (v3 != a3)
    return 0;
  v6 = *(_QWORD *)(a1 + 24);
  v5 = a1 + 24;
  return memcmp((const void *)(v5+ (*(_BYTE *)(v5 + 11) & 0x1F)+ (*(_BYTE *)(v5 + 11) & 0x1F)* ((v6 - 1)/ (unint64_t)(*(_BYTE *)(v5 + 11) & 0x1F))+ *(unsigned __int8 *)(v5 + 10)* (unint64_t)(0xFu / *(unsigned __int8 *)(v5 + 10) + 1)), a2, a3) >> 31;
}

void boost::interprocess::interprocess_exception::~interprocess_exception(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E45A10B0;
  if (SHIBYTE(this[4].__vftable) < 0)
    operator delete(this[2].__vftable);
  std::exception::~exception(this);
}

{
  boost::interprocess::interprocess_exception::~interprocess_exception(this);
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::interprocess::interprocess_exception::what(boost::interprocess::interprocess_exception *this)
{
  uint64_t result;

  result = (uint64_t)this + 16;
  if (*((char *)this + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *boost::interprocess::interprocess_exception::interprocess_exception(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;

  *a1 = &off_1E45A10B0;
  v3 = *a2;
  a1[2] = 0;
  a1[1] = v3;
  a1[3] = 0;
  a1[4] = 0;
  if ((_DWORD)v3)
  {
    v4 = strerror(v3);
    MEMORY[0x1A1B0C8D8](a1 + 2, v4);
  }
  else
  {
    MEMORY[0x1A1B0C8D8](a1 + 2, "boost::interprocess_exception::library_error");
  }
  return a1;
}

void sub_1A17135D0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A17135BCLL);
}

void sub_1A17135DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  std::exception::~exception((std::exception *)v1);
  _Unwind_Resume(a1);
}

_BYTE *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *a4 = 0;
  if (a3)
  {
    v7 = (char *)&v30 - (char *)&v26;
    do
    {
      if (*(_QWORD *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v29, a2, *(_QWORD *)(a2 + 24));
        if (v29 == 1)
          v8 = 0;
        else
          v8 = (char *)&v29 + v29;
        v9 = *(_QWORD *)v8;
        v10 = v8 - (char *)&v30;
        if (v9 == 1)
          v10 = 0;
        v11 = v10 + v9;
        v12 = (char *)&v30 - (char *)&v28;
        if (v11 == 1)
          v12 = 0;
        v13 = v12 + v11;
        v28 = v13;
        if (v11 == 1)
          v14 = 0;
        else
          v14 = (char *)&v30 - (char *)&v27;
        if (v13 == 1)
          v15 = 0;
        else
          v15 = (char *)&v28 + v13;
        v16 = *((_QWORD *)v15 + 10);
        v17 = v15 + 80 - (char *)&v29;
        if (v16 == 1)
          v17 = 0;
        v29 = v17 + v16;
        v30 = v11;
        v27 = v14 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v27);
        while (1)
        {
          v18 = v29 == 1 ? 0 : (char *)&v29 - (char *)&v30;
          v19 = v18 + v29;
          v30 = v18 + v29;
          if (v18 + v29 == 1)
            break;
          v26 = v19 + v7;
          if (v19 + v7 == 1)
            v20 = 0;
          else
            v20 = (char *)&v30 + v19;
          v21 = *((_QWORD *)v20 + 10);
          v22 = v20 + 80 - (char *)&v29;
          if (v21 == 1)
            v22 = 0;
          v29 = v22 + v21;
          v25 = (char *)&v30 - (char *)&v25 + v19;
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(a2, (char *)&v25);
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((_QWORD *)a2);
        *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
        *(_QWORD *)(a2 + 32) = 0;
      }
      result = boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions((_BYTE *)a2);
      v24 = *a4 + 1;
      *a4 = v24;
      a2 += 64;
    }
    while (v24 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

_BYTE *boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions(_BYTE *result)
{
  if ((*result & 2) != 0)
    __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
  return result;
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v8[8];

  v5 = *(_QWORD *)(a2 + 56);
  v3 = a2 + 56;
  v4 = v5;
  if (v5 == 1)
    __assert_rtn("get_bucket_pointer", "implementation.hpp", 3025, "buckets_");
  v6 = v3 + 8 * a3 - (_QWORD)v8 + v4;
  v7 = (_BYTE *)(v8 - (_BYTE *)result);
  if (v6 == 1)
    v7 = 0;
  *result = &v7[v6];
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;

  v2 = *a2;
  v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(_QWORD *)result == 1)
      v5 = 0;
    else
      v5 = &result[*(_QWORD *)result];
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(uint64_t a1, char *a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v7;

  if (*(_QWORD *)a2 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)&a2[*(_QWORD *)a2];
  boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)(v4 + 48));
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v4);
  v5 = a2 - (char *)&v7;
  if (*(_QWORD *)a2 == 1)
    v5 = 0;
  v7 = v5 + *(_QWORD *)a2;
  return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v7);
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets(_QWORD *a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  v3 = a1[7];
  v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1)
    v4 = 0;
  v9 = v4 + v3;
  v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    v7 = a1[1];
    if (v7 == 1)
      v8 = 0;
    else
      v8 = (char *)a1 + v7 + 8;
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(char *result, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  char v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  char v83[24];
  int64_t v84;
  uint64_t v85;
  uint64_t v86;

  if (a2)
  {
    v2 = result;
    v3 = (char *)(a2 - 16);
    v4 = *(_QWORD *)(a2 - 8);
    v5 = (unint64_t)&result[*((_QWORD *)result + 4) + 55] & 0xFFFFFFFFFFFFFFF8;
    v6 = (char *)(v5 + 8);
    v7 = ((unint64_t)&result[*((_QWORD *)result + 6) - v5 - 8] & 0xFFFFFFFFFFFFFFF8) + v5 + 8;
    if (v7 != a2 && ((*(_QWORD *)&v3[8 * v4 + 8] & 0x4000000000000000) != 0) != v4 >> 63)
      goto LABEL_104;
    if ((v4 & 0x8000000000000000) == 0)
      __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1335, "priv_is_allocated_block(block)");
    if ((a2 & 7) != 0)
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
    v8 = *((_QWORD *)result + 5);
    if (v8 < 8 * v4)
      __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1341, "m_header.m_allocated >= block_old_size");
    *((_QWORD *)result + 5) = v8 - 8 * v4;
    v9 = *(_QWORD *)(a2 - 8);
    if (v6 != v3 && (v9 & 0x4000000000000000) == 0)
    {
      v11 = *(_QWORD *)&v3[-8 * *(_QWORD *)v3 + 8];
      if (v11 < 0)
        __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1218, "!prev->m_allocated");
      if ((v11 & 0x3FFFFFFFFFFFFFFFLL) != *(_QWORD *)v3)
        __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1219, "prev->m_size == block->m_prev_size");
    }
    v12 = v7 - 16;
    v13 = &v3[8 * v9];
    v14 = *((_QWORD *)v13 + 1);
    if ((char *)v12 != v13 && ((*(_QWORD *)&v13[8 * v14 + 8] & 0x4000000000000000) != 0) != v14 >> 63)
LABEL_104:
      __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
    if ((v9 & 0x4000000000000000) != 0 && (v14 & 0x8000000000000000) != 0)
    {
      v15 = (char *)&v84 - (char *)&v85;
      if (result - (char *)&v84 == -7)
        v15 = 0;
      v16 = v15 + result - (char *)&v84 + 8;
      if (v16 == 1)
        v17 = 0;
      else
        v17 = (char *)&v85 + v16;
      v18 = *((_QWORD *)v17 + 1);
      v19 = v17 + 8 - (char *)&v86;
      if (v18 == 1)
        v19 = 0;
      v20 = v19 + v18;
      v21 = (char *)&v86 - (char *)&v81;
      if (v20 == 1)
        v21 = 0;
      v22 = v21 + v20;
      v81 = v22;
      v23 = (char *)&v81 - (char *)&v86;
      if (v22 == 1)
        v23 = 0;
      v24 = v23 + v22;
      v25 = (char *)&v86 - (char *)&v76;
      if (v24 == 1)
        v25 = 0;
      v26 = v25 + v24;
      v76 = v26;
      v27 = (char *)&v76 - (char *)&v86;
      if (v26 == 1)
        v27 = 0;
      v28 = v27 + v26;
      v29 = (char *)&v86 - (char *)&v85;
    }
    else
    {
      if ((v9 & 0x4000000000000000) == 0)
      {
        v3 -= 8 * *(_QWORD *)v3;
        v30 = *((_QWORD *)v3 + 1);
        *((_QWORD *)v3 + 1) = v30 & 0xC000000000000000 | (v30 + v9) & 0x3FFFFFFFFFFFFFFFLL;
        if (((v30 + v9) & 0x3FFFFFFFFFFFFFFFuLL) <= 4)
          __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1361, "block_to_insert->m_size >= BlockCtrlUnits");
      }
      if ((v14 & 0x8000000000000000) == 0)
      {
        v31 = *((_QWORD *)v3 + 1);
        v32 = (*((_QWORD *)v13 + 1) + v31) & 0x3FFFFFFFFFFFFFFFLL;
        *((_QWORD *)v3 + 1) = v31 & 0xC000000000000000 | v32;
        if (v32 <= 4)
          __assert_rtn("priv_deallocate", "rbtree_best_fit.hpp", 1366, "block_to_insert->m_size >= BlockCtrlUnits");
        v33 = v13 - (char *)&v85 + 16;
        v85 = v33;
        if ((v9 & 0x4000000000000000) != 0)
        {
          v34 = (uint64_t)(result + 8);
          v35 = (char *)&v85 - (char *)&v86;
          if (v33 == 1)
            v35 = 0;
          v36 = v35 + v33;
          v37 = (char *)&v86 - (char *)&v82;
          if (v36 == 1)
            v37 = 0;
          v82 = v37 + v36;
          boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(v34, &v82, (uint64_t)v3);
        }
        else
        {
          v38 = (char *)&v85 - (char *)&v86;
          if (v33 == 1)
            v38 = 0;
          v39 = v38 + v33;
          v40 = (char *)&v86 - v83;
          if (v39 == 1)
            v40 = 0;
          *(_QWORD *)v83 = v40 + v39;
          boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v86, result, v83);
        }
      }
      v41 = v3 - (char *)&v81 + 16;
      v42 = (char *)&v81 - (char *)&v86;
      if (v3 - (char *)&v81 == -15)
        v42 = 0;
      v43 = v42 + v41;
      if (v43 == 1)
        v44 = 0;
      else
        v44 = (char *)&v86 - (char *)&v80;
      v80 = v44 + v43;
      v81 = v3 - (char *)&v81 + 16;
      if (v2 - (char *)&v84 == -7)
        v45 = 0;
      else
        v45 = (char *)&v84 - (char *)&v85;
      v46 = v45 + v2 - (char *)&v84 + 8;
      if (v46 == 1)
        v47 = 1;
      else
        v47 = (char *)&v85 - (char *)&v86 + v46;
      v48 = (char *)&v86 - &v79;
      if (v47 == 1)
        v48 = 0;
      v49 = v48 + v47;
      v50 = &v79 - (char *)&v86;
      if (v49 == 1)
        v50 = 0;
      v51 = v50 + v49;
      v52 = (char *)&v86 - (char *)&v84;
      if (v51 == 1)
        v52 = 0;
      v53 = v52 + v51;
      v84 = v52 + v51;
      result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v86, (char *)&v80);
      if (v86 == 1)
        v54 = 0;
      else
        v54 = (char *)&v86 - (char *)&v80;
      v55 = v54 + v86;
      v80 = v55;
      v56 = (char *)&v80 - (char *)&v86;
      if (v55 == 1)
        v56 = 0;
      v57 = v56 + v55;
      if (v53 == 1)
        v58 = 0;
      else
        v58 = (char *)&v84 - (char *)&v85;
      v59 = v58 + v53;
      if (v57 == 1)
        v60 = 0;
      else
        v60 = (char *)&v86 + v57;
      if (v59 == 1)
        v61 = 0;
      else
        v61 = (char *)&v85 + v59;
      if (v60 == v61)
        goto LABEL_102;
      v62 = *((_QWORD *)v3 + 1);
      if (v55 == 1)
        v63 = 0;
      else
        v63 = (char *)&v80 + v55;
      v64 = v63 - 16;
      v65 = v63 - 16 - (char *)&v86;
      v86 = v65;
      if (v65 == 1)
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      v66 = v62 & 0x3FFFFFFFFFFFFFFFLL;
      if (v65 + (char *)&v86 - (char *)&v85 == 1)
        v64 = 0;
      if (v66 <= (*((_QWORD *)v64 + 1) & 0x3FFFFFFFFFFFFFFFuLL))
        goto LABEL_102;
      v67 = (char *)&v81 - (char *)&v86;
      if (v3 - (char *)&v81 == -15)
        v67 = 0;
      v68 = v67 + v41;
      v69 = (char *)&v86 - (char *)&v78;
      if (v68 == 1)
        v69 = 0;
      v78 = v69 + v68;
      boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v86, v2, (char *)&v78);
      v70 = (char *)&v84 - (char *)&v86;
      if (v84 == 1)
        v70 = 0;
      v71 = (char *)&v86 - (char *)&v77;
      if (v70 + v84 == 1)
        v71 = 0;
      v72 = v71 + v70 + v84;
      v77 = v72;
      v73 = (char *)&v77 - (char *)&v86;
      if (v72 == 1)
        v73 = 0;
      v28 = v73 + v72;
      v29 = (char *)&v86 - (char *)&v85;
    }
    if (v28 == 1)
      v29 = 0;
    v85 = v29 + v28;
    result = boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v86, v2, (char *)&v85, (uint64_t)v3);
LABEL_102:
    v74 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = v74 & 0x7FFFFFFFFFFFFFFFLL;
    v75 = (uint64_t *)&v3[8 * v74];
    v75[1] &= ~0x4000000000000000uLL;
    *v75 = *((_QWORD *)v3 + 1) & 0x3FFFFFFFFFFFFFFFLL;
  }
  return result;
}

char *boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase(char *a1, char *a2, char *a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)a3;
  v6 = a3 - (char *)&v20;
  if (*(_QWORD *)a3 == 1)
    v6 = 0;
  v7 = v6 + v5;
  if (*(_QWORD *)a3 == 1)
    v8 = 0;
  else
    v8 = a3 - (char *)&v18;
  if (v7 == 1)
    v9 = 0;
  else
    v9 = (char *)&v20 - (char *)&v19;
  v19 = v9 + v7;
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v20, (char *)&v19);
  if (v20 == 1)
    v10 = 0;
  else
    v10 = (char *)&v20 - (char *)&v19;
  v19 = v10 + v20;
  v17 = a2 - (char *)&v17 + 8;
  v18 = v8 + v5;
  v11 = (char *)&v18 - (char *)&v16;
  if (v8 + v5 == 1)
    v11 = 0;
  v16 = v11 + v8 + v5;
  result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase((char *)&v20, (char *)&v17, (char *)&v16);
  --*(_QWORD *)a2;
  v13 = (char *)&v19 - (char *)&v20;
  if (v19 == 1)
    v13 = 0;
  v14 = v13 + v19;
  v15 = (char *)((char *)&v20 - a1);
  if (v14 == 1)
    v15 = 0;
  *(_QWORD *)a1 = &v15[v14];
  return result;
}

char *boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  int64_t v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  int64_t v91;
  uint64_t v92;
  char *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t v99;
  int64_t v100;
  uint64_t v101;
  _BYTE *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[8];
  _BYTE v113[8];
  _BYTE v114[8];
  _BYTE v115[8];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v3 = (char *)a2 + *a2;
  if (*a2 == 1)
    v3 = 0;
  v132 = v3 - (char *)&v132 - 16;
  if (v3 - (char *)&v132 == 17)
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  v4 = v3 - (char *)&v108;
  v5 = a1 - (_QWORD)&v107;
  v107 = a1 - (_QWORD)&v107;
  v108 = v3 - (char *)&v108;
  result = (char *)(a3 + 16);
  v7 = a3 + 16 - (_QWORD)&v106;
  v106 = v7;
  v8 = (char *)&v108 - (char *)&v111;
  if (v3 - (char *)&v108 == 1)
    v8 = 0;
  v9 = v8 + v4;
  v10 = (char *)&v107 - (char *)&v110;
  if (v5 == 1)
    v10 = 0;
  v11 = v10 + v5;
  v110 = v10 + v5;
  v111 = v9;
  v12 = result - (char *)&v109;
  v109 = result - (char *)&v109;
  v13 = &v112[v9 - 8];
  if (v9 == 1)
    v14 = 0;
  else
    v14 = &v112[v9 - 8];
  if (result != v14)
  {
    v15 = (char *)&v110 + v11;
    if (v11 == 1)
      v15 = 0;
    v16 = *((_QWORD *)v15 + 1);
    v17 = v15 + 8 - (char *)&v132;
    if (v16 == 1)
      v17 = 0;
    v18 = v17 + v16;
    if (v18 == 1)
      v19 = 0;
    else
      v19 = (char *)&v132 + v18;
    if (v14 == v19)
    {
      v20 = (char *)&v110 - (char *)&v132;
      if (v11 == 1)
        v20 = 0;
      v131 = (char *)&v109 - (char *)&v131 + v12;
      v132 = v20 + v11;
      v21 = (char *)&v132 + v20 + v11;
      if (v20 + v11 == 1)
        v21 = 0;
      *((_QWORD *)v21 + 1) = (char *)&v109 + v12 - (v21 + 8);
    }
    v22 = *((_QWORD *)v15 + 2);
    v23 = v15 + 16 - (char *)&v130;
    if (v22 == 1)
      v23 = 0;
    v24 = v23 + v22;
    if (v24 == 1)
      v25 = 0;
    else
      v25 = (char *)&v130 + v24;
    if (v14 == v25)
    {
      v26 = (char *)&v110 - (char *)&v130;
      if (v11 == 1)
        v26 = 0;
      v129 = (char *)&v109 - (char *)&v129 + v12;
      v130 = v26 + v11;
      v27 = (char *)&v130 + v26 + v11;
      if (v26 + v11 == 1)
        v27 = 0;
      *((_QWORD *)v27 + 2) = (char *)&v109 + v12 - (v27 + 16);
    }
    v28 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFDLL;
    v29 = v15 - (char *)&v128;
    if (v28 == 1)
      v29 = 0;
    v30 = v29 + v28;
    if (v30 == 1)
      v31 = 0;
    else
      v31 = (char *)&v128 + v30;
    if (v14 == v31)
    {
      v32 = (char *)&v110 - (char *)&v128;
      if (v11 == 1)
        v32 = 0;
      v33 = v32 + v11;
      v34 = (char *)&v109 - (char *)&v127 + v12;
      v127 = v34;
      v128 = v33;
      if (v33 == 1)
        v35 = 0;
      else
        v35 = (uint64_t *)((char *)&v128 + v33);
      *v35 = *v35 & 2 | ((char *)&v127 - (char *)v35 + v34);
      v12 = v109;
      v9 = v111;
      v13 = &v112[v111 - 8];
    }
    v36 = (char *)&v109 - (char *)&v121;
    if (v12 == 1)
      v36 = 0;
    v37 = (char *)&v109 - (char *)&v123;
    if (v12 == 1)
      v37 = 0;
    v38 = (char *)&v109 - (char *)&v125;
    if (v12 == 1)
      v38 = 0;
    v39 = v38 + v12;
    v125 = v39;
    v126 = 1;
    if (v9 == 1)
      v13 = 0;
    v40 = *((_QWORD *)v13 + 1);
    v41 = v13 + 8 - (char *)&v124;
    if (v40 == 1)
      v41 = 0;
    v42 = v41 + v40;
    v124 = v42;
    v43 = (char *)&v125 + v39;
    if (v39 == 1)
      v43 = 0;
    v44 = (char *)((char *)&v124 - (v43 + 8));
    if (v42 == 1)
      v44 = 0;
    *((_QWORD *)v43 + 1) = &v44[v42];
    v45 = v37 + v12;
    result = (char *)*((_QWORD *)v13 + 2);
    v46 = v13 + 16 - (char *)&v122;
    if (result == (char *)1)
      v46 = 0;
    v47 = &result[v46];
    v122 = v47;
    v123 = v45;
    if (v45 == 1)
      v48 = 0;
    else
      v48 = (char *)&v123 + v45;
    v49 = (char *)&v122 - (v48 + 16);
    if (v47 == (char *)1)
      v49 = 0;
    *((_QWORD *)v48 + 2) = &v47[v49];
    v50 = v36 + v12;
    v121 = v36 + v12;
    v51 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFDLL;
    v52 = v13 - (char *)&v120;
    if (v51 == 1)
      v52 = 0;
    v53 = v52 + v51;
    v120 = v53;
    if ((v53 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    if (v50 == 1)
      v54 = 0;
    else
      v54 = (unint64_t *)((char *)&v121 + v50);
    v55 = (char *)((char *)&v120 - (char *)v54);
    if (v53 == 1)
      v55 = 0;
    *v54 = *v54 & 2 | (unint64_t)&v55[v53];
    v56 = v109;
    v57 = (char *)&v109 + v109;
    if (v109 == 1)
      v58 = 0;
    else
      v58 = (char *)&v109 + v109;
    v59 = *((_QWORD *)v58 + 1);
    v60 = v58 + 8 - (char *)&v119;
    if (v59 == 1)
      v60 = 0;
    v61 = v60 + v59;
    v62 = (char *)&v119 - (char *)&v126;
    if (v61 == 1)
      v62 = 0;
    v63 = v62 + v61;
    v126 = v63;
    if (v63 != 1)
    {
      v64 = (char *)&v109 - (char *)&v118;
      if (v109 == 1)
        v64 = 0;
      v65 = v64 + v109;
      v118 = v65;
      v119 = v63 + (char *)&v126 - (char *)&v119;
      if ((v109 & 2) != 0)
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      v66 = (unint64_t *)((char *)&v126 + v63);
      if (v63 + (char *)&v126 - (char *)&v119 == 1)
        v66 = 0;
      v67 = (char *)((char *)&v118 - (char *)v66);
      if (v65 == 1)
        v67 = 0;
      *v66 = *v66 & 2 | (unint64_t)&v67[v65];
      v56 = v109;
      v57 = (char *)&v109 + v109;
    }
    if (v56 == 1)
      v68 = 0;
    else
      v68 = v57;
    v69 = *((_QWORD *)v68 + 2);
    v70 = v68 + 16 - (char *)&v117;
    if (v69 == 1)
      v70 = 0;
    v71 = v70 + v69;
    v72 = (char *)&v117 - (char *)&v126;
    if (v71 == 1)
      v72 = 0;
    v73 = v72 + v71;
    v126 = v73;
    if (v73 != 1)
    {
      v74 = (char *)&v109 - (char *)&v116;
      if (v56 == 1)
        v74 = 0;
      v75 = v74 + v56;
      v116 = v75;
      v117 = v73 + (char *)&v126 - (char *)&v117;
      if ((v56 & 2) != 0)
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      v76 = (unint64_t *)((char *)&v126 + v73);
      if (v73 + (char *)&v126 - (char *)&v117 == 1)
        v76 = 0;
      v77 = (char *)((char *)&v116 - (char *)v76);
      if (v75 == 1)
        v77 = 0;
      *v76 = *v76 & 2 | (unint64_t)&v77[v75];
      v56 = v109;
      v57 = (char *)&v109 + v109;
    }
    if (v56 == 1)
      v78 = 0;
    else
      v78 = v57;
    v79 = *(_QWORD *)v78 & 0xFFFFFFFFFFFFFFFDLL;
    v80 = v78 - v115;
    if (v79 == 1)
      v80 = 0;
    v81 = v80 + v79;
    v82 = v115 - (_BYTE *)&v126;
    if (v81 == 1)
      v82 = 0;
    v83 = v82 + v81;
    if (v83 != 1)
    {
      v84 = (char *)&v126 + v83;
      v85 = v110 == 1 ? 0 : (char *)&v110 + v110;
      if (v84 != v85)
      {
        v86 = *((_QWORD *)v84 + 1);
        v87 = v84 + 8 - v115;
        if (v86 == 1)
          v87 = 0;
        v88 = v87 + v86;
        v89 = &v115[v88];
        if (v88 == 1)
          v89 = 0;
        if (v111 == 1)
          v90 = 0;
        else
          v90 = &v112[v111 - 8];
        if (v89 == v90)
        {
          v91 = (char *)&v109 - v114;
          if (v56 == 1)
            v91 = 0;
          v92 = v91 + v56;
          if (v83 + (char *)&v126 - v115 == 1)
            v93 = 0;
          else
            v93 = (char *)&v126 + v83;
          v94 = (_BYTE *)(v114 - (v93 + 8));
          if (v92 == 1)
            v94 = 0;
          *((_QWORD *)v93 + 1) = &v94[v92];
        }
        v95 = *((_QWORD *)v84 + 2);
        v96 = v84 + 16 - v113;
        if (v95 == 1)
          v96 = 0;
        v97 = v96 + v95;
        if (v97 == 1)
          v98 = 0;
        else
          v98 = &v113[v97];
        if (v98 == v90)
        {
          v99 = v83 + (char *)&v126 - v113;
          v100 = (char *)&v109 - v112;
          if (v56 == 1)
            v100 = 0;
          v101 = v100 + v56;
          if (v99 == 1)
            v84 = 0;
          v102 = (_BYTE *)(v112 - (v84 + 16));
          if (v101 == 1)
            v102 = 0;
          *((_QWORD *)v84 + 2) = &v102[v101];
        }
      }
    }
    v4 = v108;
    v7 = v106;
  }
  v103 = (unint64_t *)((char *)&v108 + v4);
  if (v4 == 1)
    v103 = 0;
  v104 = *v103;
  v105 = (unint64_t *)((char *)&v106 + v7);
  if (v7 == 1)
    v105 = 0;
  *v105 = *v105 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((v104 >> 1) & 1));
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node(char *result, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int64_t v35;
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == 1)
    v3 = 0;
  else
    v3 = &a2[*(_QWORD *)a2];
  v4 = *((_QWORD *)v3 + 2);
  v5 = v3 + 16 - (char *)&v40;
  if (v4 == 1)
    v5 = 0;
  v6 = v5 + v4;
  v40 = v6;
  if (v6 == 1)
  {
    v7 = (char *)&v38;
    v8 = a2 - (char *)&v38;
    if (v2 == 1)
      v8 = 0;
    v9 = v8 + v2;
    v38 = v9;
    if (v9 == 1)
      v10 = 0;
    else
      v10 = (char *)&v38 + v9;
    v11 = *(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFDLL;
    v12 = v10 - (char *)&v37;
    if (v11 == 1)
      v12 = 0;
    v13 = v12 + v11;
    v37 = v12 + v11;
    v14 = v12 + v11 == 1;
    v15 = (char *)&v37 + v12 + v11;
    if (v13 == 1)
      v15 = 0;
    v16 = *((_QWORD *)v15 + 2);
    v17 = v15 + 16 - v36;
    if (v16 == 1)
      v17 = 0;
    v18 = v17 + v16;
    if (v18 == 1)
      v19 = 0;
    else
      v19 = &v36[v18];
    if (v10 == v19)
    {
      do
      {
        if (v14)
          v20 = 0;
        else
          v20 = (char *)&v37 - (char *)&v38;
        v21 = v20 + v13;
        v38 = v21;
        v22 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFFDLL;
        v23 = v15 - v36;
        if (v22 == 1)
          v23 = 0;
        v24 = v23 + v22;
        if (v24 == 1)
          v25 = 0;
        else
          v25 = v36 - (_BYTE *)&v37;
        v13 = v25 + v24;
        v37 = v13;
        v15 = (char *)&v37 + v13;
        if (v13 == 1)
          v15 = 0;
        v26 = *((_QWORD *)v15 + 2);
        v14 = v13 == 1;
        v27 = v15 + 16 - v36;
        if (v26 == 1)
          v27 = 0;
        v28 = v27 + v26;
        if (v21 == 1)
          v10 = 0;
        else
          v10 = (char *)&v38 + v21;
        if (v28 == 1)
          v29 = 0;
        else
          v29 = &v36[v28];
      }
      while (v10 == v29);
    }
    v30 = *((_QWORD *)v10 + 2);
    v31 = v10 + 16 - v36;
    if (v30 == 1)
      v31 = 0;
    v32 = v31 + v30;
    v33 = &v36[v32];
    if (v32 == 1)
      v33 = 0;
    if (v15 != v33)
      v7 = (char *)&v37;
    v34 = *(_QWORD *)v7;
    v35 = v7 - result;
    if (v34 == 1)
      v35 = 0;
    *(_QWORD *)result = v35 + v34;
  }
  else
  {
    v39 = (char *)&v40 - (char *)&v39 + v6;
    return boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum(result, &v39);
  }
  return result;
}

char *boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal(char *a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  char *v43;
  char *v44;
  BOOL v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  char *v52;
  int64_t v53;
  int64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char *result;
  int64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92[16];

  v7 = a4 + 16;
  v77 = a4 + 16 - (_QWORD)&v77;
  v8 = a3 - (char *)&v75;
  if (*(_QWORD *)a3 == 1)
    v8 = 0;
  v9 = v8 + *(_QWORD *)a3;
  v75 = v9;
  v76 = a2 - (char *)&v76 + 8;
  v74 = v7 - (_QWORD)&v74;
  v10 = (char *)&v76 - (char *)&v80;
  if (a2 - (char *)&v76 == -7)
    v10 = 0;
  v11 = v10 + a2 - (char *)&v76 + 8;
  v12 = (char *)&v75 - (char *)&v79;
  if (v9 == 1)
    v12 = 0;
  v13 = v12 + v9;
  v79 = v13;
  v80 = v10 + a2 - (char *)&v76 + 8;
  v14 = v7 - (_QWORD)&v78;
  v78 = v7 - (_QWORD)&v78;
  LOBYTE(v84) = 0;
  v85 = 1;
  v15 = (char *)&v80 - (char *)&v83;
  if (v11 == 1)
    v15 = 0;
  v16 = v15 + v11;
  v17 = (char *)&v79 - (char *)&v82;
  if (v13 == 1)
    v17 = 0;
  v18 = v17 + v13;
  v82 = v18;
  v83 = v15 + v11;
  v19 = v7 - (_QWORD)&v81;
  v81 = v7 - (_QWORD)&v81;
  v20 = (char *)&v82 + v18;
  if (v18 == 1)
    v20 = 0;
  v21 = (char *)&v83 + v16;
  if (v16 == 1)
    v21 = 0;
  if (v20 != v21)
  {
    *(_QWORD *)v92 = v20 - v92 - 16;
    if (v20 - v92 == 17)
      goto LABEL_109;
    v91 = a4 - (_QWORD)&v91;
    if ((*((_QWORD *)v20 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < (*(_QWORD *)(a4 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
    {
      v22 = (char *)&v83 - (char *)&v87;
      if (v16 == 1)
        v22 = 0;
      v23 = v22 + v16;
      v24 = (char *)&v81 - (char *)&v86 + v19;
      v86 = v24;
      v87 = v23;
      v25 = (char *)&v87 - (char *)&v90;
      if (v23 == 1)
        v25 = 0;
      v26 = v25 + v23;
      v90 = v26;
      v27 = (char *)&v90 + v26;
      if (v26 == 1)
        v28 = 0;
      else
        v28 = (char *)&v90 + v26;
      v29 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFFDLL;
      v30 = v28 - (char *)&v89;
      if (v29 == 1)
        v30 = 0;
      v31 = v30 + v29;
      v89 = v30 + v29;
      if (v30 + v29 != 1)
      {
        v32 = (char *)&v89 - (char *)&v90;
        if (v24 == 1)
          v33 = 0;
        else
          v33 = a4 + 16;
        while (1)
        {
          v26 = v32 + v31;
          v90 = v32 + v31;
          v27 = (char *)&v89 + v31;
          *(_QWORD *)v92 = (char *)&v89 + v31 - v92 - 16;
          if ((char *)&v89 + v31 - v92 == 17)
            break;
          v91 = v33 - (_QWORD)&v91 - 16;
          if (v33 - (_QWORD)&v91 == 17)
            break;
          v34 = *((_QWORD *)v27 - 1) & 0x3FFFFFFFFFFFFFFFLL;
          v35 = *(_QWORD *)(v33 - 8) & 0x3FFFFFFFFFFFFFFFLL;
          v36 = v34 >= v35;
          if (v34 >= v35)
            v37 = 8;
          else
            v37 = 16;
          if (v36)
            v38 = v27 + 8;
          else
            v38 = v27 + 16;
          v39 = *(_QWORD *)&v27[v37];
          v40 = v38 - (char *)&v88;
          if (v39 == 1)
            v40 = 0;
          v41 = v40 + v39;
          if (v41 == 1)
            v42 = 0;
          else
            v42 = (char *)&v88 - (char *)&v89;
          v31 = v42 + v41;
          v89 = v31;
          if (v31 == 1)
            goto LABEL_45;
        }
LABEL_109:
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      }
LABEL_45:
      if (v26 == 1)
        v43 = 0;
      else
        v43 = v27;
      v44 = (char *)&v87 + v23;
      if (v23 == 1)
        v44 = 0;
      if (v43 == v44)
      {
        v45 = 1;
      }
      else
      {
        *(_QWORD *)v92 = v43 - v92 - 16;
        if (v43 - v92 == 17)
          goto LABEL_109;
        if (v24 == 1)
          v7 = 0;
        v91 = v7 - (_QWORD)&v91 - 16;
        if (v7 - (_QWORD)&v91 == 17)
          goto LABEL_109;
        v45 = (*((_QWORD *)v43 - 1) & 0x3FFFFFFFFFFFFFFFuLL) >= (*(_QWORD *)(v7 - 8) & 0x3FFFFFFFFFFFFFFFuLL);
      }
      LOBYTE(v84) = v45;
      v65 = (char *)&v90 - (char *)&v85;
      if (v26 == 1)
        v65 = 0;
      v64 = v65 + v26;
      goto LABEL_95;
    }
  }
  v46 = (char *)&v82 - (char *)&v90;
  if (v18 == 1)
    v46 = 0;
  v47 = v46 + v18;
  v90 = v47;
  v48 = *((_QWORD *)v21 + 1);
  v49 = v21 + 8 - (char *)&v89;
  if (v48 == 1)
    v49 = 0;
  v89 = v49 + v48;
  if (v49 + v48 == 1)
    v50 = 0;
  else
    v50 = (char *)&v89 + v49 + v48;
  if (v20 == v50)
    goto LABEL_73;
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v88, (char *)&v82);
  v51 = (char *)&v88 - (char *)&v90;
  if (v88 == 1)
    v51 = 0;
  v47 = v51 + v88;
  *(_QWORD *)v92 = a4 - (_QWORD)v92;
  v52 = (char *)&v90 + v51 + v88;
  if (v47 == 1)
    v52 = 0;
  v90 = v47;
  v91 = v52 - (char *)&v91 - 16;
  if (v52 - (char *)&v91 == 17)
    goto LABEL_109;
  if ((*(_QWORD *)(a4 + 8) & 0x3FFFFFFFFFFFFFFFuLL) >= (*((_QWORD *)v52 - 1) & 0x3FFFFFFFFFFFFFFFuLL))
  {
LABEL_73:
    v54 = (char *)&v83 - (char *)&v91;
    if (v16 == 1)
      v54 = 0;
    v91 = v54 + v16;
    v55 = &v92[v54 - 8 + v16];
    if (v54 + v16 == 1)
      v55 = 0;
    v56 = *(_QWORD *)v55 & 0xFFFFFFFFFFFFFFFDLL;
    v57 = v55 - v92;
    if (v56 == 1)
      v57 = 0;
    if (v57 + v56 == 1)
    {
      LOBYTE(v84) = 1;
      v58 = v82;
    }
    else
    {
      v58 = v82;
      v59 = (char *)&v82 + v82;
      if (v82 == 1)
        v59 = 0;
      v60 = *((_QWORD *)v59 + 1);
      v61 = v59 + 8 - v92;
      if (v60 == 1)
        v61 = 0;
      LOBYTE(v84) = v61 + v60 == 1;
      if (v61 + v60 != 1)
      {
        v62 = (char *)&v90;
LABEL_88:
        v63 = v62 - (char *)&v85;
        if (v47 == 1)
          v63 = 0;
        v64 = v63 + v47;
LABEL_95:
        v85 = v64;
        goto LABEL_96;
      }
    }
    v62 = (char *)&v82;
    v47 = v58;
    goto LABEL_88;
  }
  v53 = (char *)&v83 - v92;
  if (v16 == 1)
    v53 = 0;
  *(_QWORD *)v92 = v53 + v16;
  v91 = (char *)&v81 - (char *)&v91 + v19;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>(v92, &v91, (uint64_t)&v84);
  v11 = v80;
  v14 = v78;
LABEL_96:
  v66 = (char *)&v80 - v92;
  if (v11 == 1)
    v66 = 0;
  *(_QWORD *)v92 = v66 + v11;
  v67 = (char *)&v78 - (char *)&v91;
  if (v14 == 1)
    v67 = 0;
  v91 = v67 + v14;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit(v92, (char *)&v91, (uint64_t)&v84);
  v68 = (char *)&v76 - (char *)&v84;
  if (v76 == 1)
    v68 = 0;
  v84 = v68 + v76;
  v69 = (char *)&v74 - v92;
  if (v74 == 1)
    v69 = 0;
  *(_QWORD *)v92 = v69 + v74;
  result = boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)&v84, v92);
  v71 = (char *)&v74 - (char *)&v91;
  if (v74 == 1)
    v71 = 0;
  v72 = v71 + v74;
  v73 = (char *)((char *)&v91 - a1);
  if (v72 == 1)
    v73 = 0;
  *(_QWORD *)a1 = &v73[v72];
  ++*(_QWORD *)a2;
  return result;
}

char *boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion(char *a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *result;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  unint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  char *v53;
  unint64_t v54;
  int64_t v55;
  int64_t v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  _QWORD *v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  _BYTE v75[8];
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;

  if (*(_QWORD *)a2 == 1)
    v4 = 0;
  else
    v4 = &a2[*(_QWORD *)a2];
  *(_QWORD *)v4 &= ~2uLL;
  v5 = (char *)((char *)&v78 - a2);
  v6 = *(char **)a2;
  while (1)
  {
    if (v6 == (char *)1)
      v7 = 0;
    else
      v7 = &a2[(_QWORD)v6];
    v8 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFFDLL;
    v9 = v7 - (char *)&v79;
    if (v8 == 1)
      v9 = 0;
    v10 = v9 + v8;
    v79 = v10;
    if (v10 == 1)
      v11 = 0;
    else
      v11 = (char *)&v79 + v10;
    v12 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFDLL;
    v13 = v11 - (char *)&v78;
    if (v12 == 1)
      v13 = 0;
    v14 = v13 + v12;
    v78 = v13 + v12;
    v15 = *(_QWORD *)a1;
    v16 = &a1[*(_QWORD *)a1];
    result = *(_QWORD *)a1 == 1 ? 0 : &a1[*(_QWORD *)a1];
    if (v11 == result || (*v11 & 2) != 0)
      break;
    v18 = (char *)&v78 + v14;
    if (v14 == 1)
      v18 = 0;
    if (v18 == result)
      break;
    *(_QWORD *)v18 &= ~2uLL;
    v19 = v78;
    v20 = (char *)&v78 + v78;
    if (v78 == 1)
      v21 = 0;
    else
      v21 = (char *)&v78 + v78;
    v22 = *((_QWORD *)v21 + 1);
    v23 = v21 + 8 - (char *)&v77;
    if (v22 == 1)
      v23 = 0;
    v24 = v23 + v22;
    v77 = v23 + v22;
    v25 = v79;
    v26 = (char *)&v79 + v79;
    if (v79 == 1)
      v26 = 0;
    v27 = (char *)&v77 + v24;
    if (v24 == 1)
      v27 = 0;
    if (v26 == v27)
    {
      v24 = *((_QWORD *)v21 + 2);
      v28 = v21 + 16 - (char *)&v76;
      if (v24 == 1)
        v28 = 0;
    }
    else if (v24 == 1)
    {
      v28 = 0;
    }
    else
    {
      v28 = 8;
    }
    v29 = v28 + v24;
    v76 = v29;
    if (v29 == 1 || (v30 = *(uint64_t *)((char *)&v76 + v29), (v30 & 2) != 0))
    {
      v33 = *((_QWORD *)v26 + 1);
      v34 = v26 + 8 - v75;
      if (v33 == 1)
        v34 = 0;
      v35 = v34 + v33;
      v36 = &v75[v35];
      if (v35 == 1)
        v36 = 0;
      v37 = *(char **)a2;
      v38 = &a2[*(_QWORD *)a2];
      if (*(_QWORD *)a2 == 1)
        v38 = 0;
      if (v26 == v27)
      {
        if (v36 != v38)
        {
          v48 = 40;
          if (v79 == 1)
            v48 = 0;
          v74 = v48 + v79;
          v49 = a2 - (char *)&v73;
          if (v37 == (char *)1)
            v49 = 0;
          v73 = &v37[v49];
          boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix((char *)&v74, (char *)&v73);
          v50 = a2 - (char *)&v79;
          if (*(_QWORD *)a2 == 1)
            v50 = 0;
          v25 = v50 + *(_QWORD *)a2;
          v79 = v25;
          v19 = v78;
          v20 = (char *)&v78 + v78;
        }
        v51 = (char *)&v78 - (char *)&v72;
        v52 = (char *)&v79 - (char *)&v71;
        if (v25 == 1)
          v52 = 0;
        if (v19 == 1)
          v51 = 0;
        v71 = v52 + v25;
        v72 = v51 + v19;
        if (v19 == 1)
          v53 = 0;
        else
          v53 = v20;
        v54 = *(_QWORD *)v53 & 0xFFFFFFFFFFFFFFFDLL;
        v55 = v53 - (char *)&v70;
        if (v54 == 1)
          v55 = 0;
        v70 = v55 + v54;
        v56 = a1 - (char *)&v69;
        if (*(_QWORD *)a1 == 1)
          v56 = 0;
        v69 = v56 + *(_QWORD *)a1;
        result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v72, (char *)&v71, (char *)&v70, (char *)&v69);
      }
      else
      {
        if (v36 == v38)
        {
          v39 = (char *)&v79 - (char *)&v68;
          if (v79 == 1)
            v39 = 0;
          v68 = v39 + v79;
          v40 = a2 - (char *)&v67;
          if (v37 == (char *)1)
            v40 = 0;
          v67 = &v37[v40];
          boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix((char *)&v68, (char *)&v67);
          v41 = a2 - (char *)&v79;
          if (*(_QWORD *)a2 == 1)
            v41 = 0;
          v25 = v41 + *(_QWORD *)a2;
          v79 = v25;
          v19 = v78;
          v20 = (char *)&v78 + v78;
        }
        v42 = (char *)&v78 - (char *)&v66;
        v43 = (char *)&v79 - (char *)&v65;
        if (v25 == 1)
          v43 = 0;
        if (v19 == 1)
          v42 = 0;
        v65 = v43 + v25;
        v66 = v42 + v19;
        if (v19 == 1)
          v44 = 0;
        else
          v44 = v20;
        v45 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFFDLL;
        v46 = v44 - (char *)&v64;
        if (v45 == 1)
          v46 = 0;
        v64 = v46 + v45;
        v47 = a1 - (char *)&v63;
        if (*(_QWORD *)a1 == 1)
          v47 = 0;
        v63 = v47 + *(_QWORD *)a1;
        result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v66, (char *)&v65, (char *)&v64, (char *)&v63);
      }
      if (v79 == 1)
        v57 = 0;
      else
        v57 = (int64_t *)((char *)&v79 + v79);
      *v57 |= 2uLL;
      v15 = *(_QWORD *)a1;
      v16 = &a1[*(_QWORD *)a1];
      break;
    }
    *(uint64_t *)((char *)&v76 + v29) = v30 | 2;
    if (v79 == 1)
      v31 = 0;
    else
      v31 = (int64_t *)((char *)&v79 + v79);
    *v31 |= 2uLL;
    if (v78 == 1)
      v32 = 0;
    else
      v32 = v5;
    v6 = &v32[v78];
    *(_QWORD *)a2 = &v32[v78];
  }
  if (v15 == 1)
    v58 = 0;
  else
    v58 = v16;
  v59 = *(_QWORD *)v58 & 0xFFFFFFFFFFFFFFFDLL;
  v60 = v58 - (char *)&v79;
  if (v59 == 1)
    v60 = 0;
  v61 = v60 + v59;
  v79 = v61;
  if (v61 == 1)
    v62 = 0;
  else
    v62 = (int64_t *)((char *)&v79 + v61);
  *v62 |= 2uLL;
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix(char *result, char *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t *v15;
  char *v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t *v27;
  char *v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  if (*(_QWORD *)a2 == 1)
    v2 = 0;
  else
    v2 = &a2[*(_QWORD *)a2];
  v3 = *((_QWORD *)v2 + 1);
  v4 = v2 + 8 - (char *)&v36;
  if (v3 == 1)
    v4 = 0;
  v5 = v4 + v3;
  v6 = result - (char *)&v35;
  if (*(_QWORD *)result == 1)
    v6 = 0;
  v7 = v6 + *(_QWORD *)result;
  v8 = (char *)&v36 - (char *)&v34;
  if (v5 == 1)
    v8 = 0;
  v9 = v8 + v5;
  v10 = (char *)&v35 + v7;
  if (v7 == 1)
    v10 = 0;
  v11 = (char *)((char *)&v34 - (v10 + 16));
  if (v9 == 1)
    v11 = 0;
  v35 = v7;
  v36 = v5;
  v34 = v9;
  *((_QWORD *)v10 + 2) = &v11[v9];
  if (v5 != 1)
  {
    v12 = v5 + 24;
    v33[1] = v5 + 24;
    v13 = result - (char *)v33;
    if (*(_QWORD *)result == 1)
      v13 = 0;
    v14 = v13 + *(_QWORD *)result;
    v33[0] = v14;
    if ((v14 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v15 = (unint64_t *)((char *)&v36 + v5);
    if (v12 == 1)
      v15 = 0;
    v16 = (char *)((char *)v33 - (char *)v15);
    if (v14 == 1)
      v16 = 0;
    *v15 = *v15 & 2 | (unint64_t)&v16[v14];
  }
  v17 = a2 - (char *)&v32;
  if (*(_QWORD *)a2 == 1)
    v17 = 0;
  v18 = v17 + *(_QWORD *)a2;
  v19 = result - (char *)&v31;
  if (*(_QWORD *)result == 1)
    v19 = 0;
  v20 = v19 + *(_QWORD *)result;
  v31 = v20;
  v32 = v18;
  if (v18 == 1)
    v21 = 0;
  else
    v21 = (char *)&v33[-1] + v18;
  v22 = (char *)((char *)&v31 - (v21 + 8));
  if (v20 == 1)
    v22 = 0;
  *((_QWORD *)v21 + 1) = &v22[v20];
  v23 = result - (char *)&v30;
  if (*(_QWORD *)result == 1)
    v23 = 0;
  v24 = v23 + *(_QWORD *)result;
  v25 = a2 - (char *)&v29;
  if (*(_QWORD *)a2 == 1)
    v25 = 0;
  v26 = v25 + *(_QWORD *)a2;
  v29 = v26;
  v30 = v24;
  if ((v26 & 2) != 0)
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  v27 = (unint64_t *)((char *)&v30 + v24);
  if (v24 == 1)
    v27 = 0;
  v28 = (char *)((char *)&v29 - (char *)v27);
  if (v26 == 1)
    v28 = 0;
  *v27 = *v27 & 2 | (unint64_t)&v28[v26];
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right(char *a1, char *a2, char *a3, char *a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  _BYTE v36[8];

  if (*(_QWORD *)a3 == 1)
    v8 = 0;
  else
    v8 = &a3[*(_QWORD *)a3];
  v11 = *((_QWORD *)v8 + 1);
  v10 = v8 + 8;
  v9 = v11;
  v12 = *(_QWORD *)a1;
  v13 = a1 - (char *)&v35;
  if (*(_QWORD *)a1 == 1)
    v13 = 0;
  v35 = v13 + v12;
  v14 = a2 - (char *)&v34;
  if (*(_QWORD *)a2 == 1)
    v14 = 0;
  v34 = v14 + *(_QWORD *)a2;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix((char *)&v35, (char *)&v34);
  v15 = a2 - (char *)&v33;
  if (*(_QWORD *)a2 == 1)
    v15 = 0;
  v16 = v15 + *(_QWORD *)a2;
  v17 = a3 - (char *)&v32;
  if (*(_QWORD *)a3 == 1)
    v17 = 0;
  v18 = v17 + *(_QWORD *)a3;
  v32 = v18;
  v33 = v16;
  if ((v18 & 2) != 0)
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  v19 = v10 - v36;
  if (v9 == 1)
    v19 = 0;
  v20 = v19 + v9;
  v21 = &v36[v20];
  if (v20 == 1)
    v21 = 0;
  v22 = &a1[v12];
  if (v12 == 1)
    v22 = 0;
  v23 = (unint64_t *)((char *)&v33 + v16);
  if (v16 == 1)
    v23 = 0;
  v24 = (char *)((char *)&v32 - (char *)v23);
  if (v18 == 1)
    v24 = 0;
  *v23 = *v23 & 2 | (unint64_t)&v24[v18];
  v25 = a4 - (char *)&v31;
  if (*(_QWORD *)a4 == 1)
    v25 = 0;
  v31 = v25 + *(_QWORD *)a4;
  v26 = a2 - (char *)&v30;
  if (*(_QWORD *)a2 == 1)
    v26 = 0;
  v30 = v26 + *(_QWORD *)a2;
  v27 = a3 - (char *)&v29;
  if (*(_QWORD *)a3 == 1)
    v27 = 0;
  v29 = v27 + *(_QWORD *)a3;
  return boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v31, (char *)&v30, (char *)&v29, v21 == v22);
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right_no_parent_fix(char *result, char *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t *v15;
  char *v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  char *v22;
  int64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t *v27;
  char *v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  int64_t v35;
  uint64_t v36;

  if (*(_QWORD *)a2 == 1)
    v2 = 0;
  else
    v2 = &a2[*(_QWORD *)a2];
  v3 = *((_QWORD *)v2 + 2);
  v4 = v2 + 16 - (char *)&v36;
  if (v3 == 1)
    v4 = 0;
  v5 = v4 + v3;
  v6 = result - (char *)&v35;
  if (*(_QWORD *)result == 1)
    v6 = 0;
  v7 = v6 + *(_QWORD *)result;
  v8 = (char *)&v36 - (char *)&v34;
  if (v5 == 1)
    v8 = 0;
  v9 = v8 + v5;
  v10 = (char *)&v35 + v7;
  if (v7 == 1)
    v10 = 0;
  v11 = (char *)((char *)&v34 - (v10 + 8));
  if (v9 == 1)
    v11 = 0;
  v35 = v7;
  v36 = v5;
  v34 = v9;
  *((_QWORD *)v10 + 1) = &v11[v9];
  if (v5 != 1)
  {
    v12 = v5 + 24;
    v33[1] = v5 + 24;
    v13 = result - (char *)v33;
    if (*(_QWORD *)result == 1)
      v13 = 0;
    v14 = v13 + *(_QWORD *)result;
    v33[0] = v14;
    if ((v14 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v15 = (unint64_t *)((char *)&v36 + v5);
    if (v12 == 1)
      v15 = 0;
    v16 = (char *)((char *)v33 - (char *)v15);
    if (v14 == 1)
      v16 = 0;
    *v15 = *v15 & 2 | (unint64_t)&v16[v14];
  }
  v17 = a2 - (char *)&v32;
  if (*(_QWORD *)a2 == 1)
    v17 = 0;
  v18 = v17 + *(_QWORD *)a2;
  v19 = result - (char *)&v31;
  if (*(_QWORD *)result == 1)
    v19 = 0;
  v20 = v19 + *(_QWORD *)result;
  v31 = v20;
  v32 = v18;
  if (v18 == 1)
    v21 = 0;
  else
    v21 = (char *)&v33[-1] + v18;
  v22 = (char *)((char *)&v31 - (v21 + 16));
  if (v20 == 1)
    v22 = 0;
  *((_QWORD *)v21 + 2) = &v22[v20];
  v23 = result - (char *)&v30;
  if (*(_QWORD *)result == 1)
    v23 = 0;
  v24 = v23 + *(_QWORD *)result;
  v25 = a2 - (char *)&v29;
  if (*(_QWORD *)a2 == 1)
    v25 = 0;
  v26 = v25 + *(_QWORD *)a2;
  v29 = v26;
  v30 = v24;
  if ((v26 & 2) != 0)
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  v27 = (unint64_t *)((char *)&v30 + v24);
  if (v24 == 1)
    v27 = 0;
  v28 = (char *)((char *)&v29 - (char *)v27);
  if (v26 == 1)
    v28 = 0;
  *v27 = *v27 & 2 | (unint64_t)&v28[v26];
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left(char *a1, char *a2, char *a3, char *a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t *v23;
  char *v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  _BYTE v36[8];

  if (*(_QWORD *)a3 == 1)
    v8 = 0;
  else
    v8 = &a3[*(_QWORD *)a3];
  v11 = *((_QWORD *)v8 + 1);
  v10 = v8 + 8;
  v9 = v11;
  v12 = *(_QWORD *)a1;
  v13 = a1 - (char *)&v35;
  if (*(_QWORD *)a1 == 1)
    v13 = 0;
  v35 = v13 + v12;
  v14 = a2 - (char *)&v34;
  if (*(_QWORD *)a2 == 1)
    v14 = 0;
  v34 = v14 + *(_QWORD *)a2;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left_no_parent_fix((char *)&v35, (char *)&v34);
  v15 = a2 - (char *)&v33;
  if (*(_QWORD *)a2 == 1)
    v15 = 0;
  v16 = v15 + *(_QWORD *)a2;
  v17 = a3 - (char *)&v32;
  if (*(_QWORD *)a3 == 1)
    v17 = 0;
  v18 = v17 + *(_QWORD *)a3;
  v32 = v18;
  v33 = v16;
  if ((v18 & 2) != 0)
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  v19 = v10 - v36;
  if (v9 == 1)
    v19 = 0;
  v20 = v19 + v9;
  v21 = &v36[v20];
  if (v20 == 1)
    v21 = 0;
  v22 = &a1[v12];
  if (v12 == 1)
    v22 = 0;
  v23 = (unint64_t *)((char *)&v33 + v16);
  if (v16 == 1)
    v23 = 0;
  v24 = (char *)((char *)&v32 - (char *)v23);
  if (v18 == 1)
    v24 = 0;
  *v23 = *v23 & 2 | (unint64_t)&v24[v18];
  v25 = a4 - (char *)&v31;
  if (*(_QWORD *)a4 == 1)
    v25 = 0;
  v31 = v25 + *(_QWORD *)a4;
  v26 = a2 - (char *)&v30;
  if (*(_QWORD *)a2 == 1)
    v26 = 0;
  v30 = v26 + *(_QWORD *)a2;
  v27 = a3 - (char *)&v29;
  if (*(_QWORD *)a3 == 1)
    v27 = 0;
  v29 = v27 + *(_QWORD *)a3;
  return boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v31, (char *)&v30, (char *)&v29, v21 == v22);
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child(char *result, char *a2, char *a3, int a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t *v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == 1)
    v5 = 0;
  else
    v5 = &a3[*(_QWORD *)a3];
  v6 = *(_QWORD *)result;
  v7 = &result[*(_QWORD *)result];
  if (*(_QWORD *)result == 1)
    v7 = 0;
  if (v5 == v7)
  {
    v15 = result - (char *)&v32;
    if (v6 == 1)
      v15 = 0;
    v16 = v15 + v6;
    v17 = a2 - (char *)&v31;
    if (*(_QWORD *)a2 == 1)
      v17 = 0;
    v18 = v17 + *(_QWORD *)a2;
    v31 = v18;
    v32 = v16;
    if ((v18 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v19 = (unint64_t *)((char *)&v32 + v16);
    if (v16 == 1)
      v19 = 0;
    v20 = (char *)((char *)&v31 - (char *)v19);
    if (v18 == 1)
      v20 = 0;
    *v19 = *v19 & 2 | (unint64_t)&v20[v18];
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (a4)
    {
      v9 = a3 - v30;
      if (v4 == 1)
        v9 = 0;
      v10 = v9 + v4;
      v11 = a2 - v29;
      if (v8 == 1)
        v11 = 0;
      v12 = v11 + v8;
      if (v10 == 1)
        v13 = 0;
      else
        v13 = &v30[v10];
      v14 = (_BYTE *)(v29 - (v13 + 8));
      if (v12 == 1)
        v14 = 0;
      *((_QWORD *)v13 + 1) = &v14[v12];
    }
    else
    {
      v21 = a3 - v28;
      if (v4 == 1)
        v21 = 0;
      v22 = v21 + v4;
      v23 = a2 - (char *)&v27;
      if (v8 == 1)
        v23 = 0;
      v24 = v23 + v8;
      if (v22 == 1)
        v25 = 0;
      else
        v25 = &v28[v22];
      v26 = (char *)((char *)&v27 - (v25 + 16));
      if (v24 == 1)
        v26 = 0;
      *((_QWORD *)v25 + 2) = &v26[v24];
    }
  }
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit(char *result, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  _BYTE *v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  unint64_t *v32;
  char *v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  char *v38;
  char *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  char *v62;
  char *v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t *v68;
  char *v69;
  int64_t v70;
  int64_t v71;
  _BYTE *v72;
  int64_t v73;
  int64_t v74;
  _BYTE *v75;
  _BYTE v76[8];
  _BYTE v77[8];
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  _BYTE v86[8];
  int64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;

  v3 = a3 + 8;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 == 1 || v4 == -(a3 + 8))
    __assert_rtn("insert_commit", "bstree_algorithms.hpp", 1774, "commit_data.node != node_ptr()");
  v6 = v4 + v3 - (_QWORD)&v95;
  v95 = v6;
  v7 = (char *)(v4 + v3);
  if (v6 == 1)
    v7 = 0;
  v8 = *(_QWORD *)result;
  v9 = &result[*(_QWORD *)result];
  if (*(_QWORD *)result == 1)
    v9 = 0;
  if (v7 == v9)
  {
    v28 = result - (char *)&v94;
    if (v8 == 1)
      v28 = 0;
    v29 = v28 + v8;
    v30 = a2 - (char *)&v93;
    if (*(_QWORD *)a2 == 1)
      v30 = 0;
    v31 = v30 + *(_QWORD *)a2;
    v93 = v31;
    v94 = v29;
    if ((v31 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v32 = (unint64_t *)((char *)&v94 + v29);
    if (v29 == 1)
      v32 = 0;
    v33 = (char *)((char *)&v93 - (char *)v32);
    if (v31 == 1)
      v33 = 0;
    *v32 = *v32 & 2 | (unint64_t)&v33[v31];
    v34 = result - (char *)&v92;
    if (*(_QWORD *)result == 1)
      v34 = 0;
    v35 = v34 + *(_QWORD *)result;
    v36 = a2 - (char *)&v91;
    if (*(_QWORD *)a2 == 1)
      v36 = 0;
    v37 = v36 + *(_QWORD *)a2;
    v91 = v37;
    v92 = v35;
    if (v35 == 1)
      v38 = 0;
    else
      v38 = (char *)&v92 + v35;
    v39 = (char *)((char *)&v91 - (v38 + 16));
    if (v37 == 1)
      v39 = 0;
    *((_QWORD *)v38 + 2) = &v39[v37];
    v40 = result - (char *)&v90;
    if (*(_QWORD *)result == 1)
      v40 = 0;
    v41 = v40 + *(_QWORD *)result;
    v42 = a2 - (char *)&v89;
    if (*(_QWORD *)a2 == 1)
      v42 = 0;
    v43 = v42 + *(_QWORD *)a2;
    v89 = v43;
    v90 = v41;
    if (v41 == 1)
      v44 = 0;
    else
      v44 = (char *)&v90 + v41;
    v45 = (char *)((char *)&v89 - (v44 + 8));
    if (v43 == 1)
      v45 = 0;
    *((_QWORD *)v44 + 1) = &v45[v43];
    v6 = v95;
  }
  else if (*(_BYTE *)a3)
  {
    v10 = 56;
    if (v6 == 1)
      v10 = 0;
    v11 = v10 + v6;
    v12 = a2 - (char *)&v87;
    if (*(_QWORD *)a2 == 1)
      v12 = 0;
    v13 = v12 + *(_QWORD *)a2;
    v87 = v13;
    v88 = v11;
    v14 = (char *)&v88 + v11;
    if (v11 == 1)
      v14 = 0;
    v15 = (char *)((char *)&v87 - (v14 + 8));
    if (v13 == 1)
      v15 = 0;
    *((_QWORD *)v14 + 1) = &v15[v13];
    v16 = *(_QWORD *)result;
    v17 = &result[*(_QWORD *)result];
    if (*(_QWORD *)result == 1)
      v17 = 0;
    v18 = *((_QWORD *)v17 + 1);
    v19 = v17 + 8 - v86;
    if (v18 == 1)
      v19 = 0;
    v20 = v19 + v18;
    if (v20 == 1)
      v21 = 0;
    else
      v21 = &v86[v20];
    if (v7 == v21)
    {
      v22 = result - (char *)&v85;
      if (v16 == 1)
        v22 = 0;
      v23 = v22 + v16;
      v24 = a2 - (char *)&v84;
      if (*(_QWORD *)a2 == 1)
        v24 = 0;
      v25 = v24 + *(_QWORD *)a2;
      v84 = v25;
      v85 = v23;
      v26 = &v86[v23 - 8];
      if (v23 == 1)
        v26 = 0;
      v27 = (char *)((char *)&v84 - (v26 + 8));
      if (v25 == 1)
        v27 = 0;
      *((_QWORD *)v26 + 1) = &v27[v25];
    }
  }
  else
  {
    v46 = (char *)&v95 - (char *)&v83;
    if (v6 == 1)
      v46 = 0;
    v47 = v46 + v6;
    v48 = a2 - (char *)&v82;
    if (*(_QWORD *)a2 == 1)
      v48 = 0;
    v49 = v48 + *(_QWORD *)a2;
    v82 = v49;
    v83 = v47;
    v50 = (char *)&v83 + v47;
    if (v47 == 1)
      v50 = 0;
    v51 = (char *)((char *)&v82 - (v50 + 16));
    if (v49 == 1)
      v51 = 0;
    *((_QWORD *)v50 + 2) = &v51[v49];
    v52 = *(_QWORD *)result;
    v53 = &result[*(_QWORD *)result];
    if (*(_QWORD *)result == 1)
      v53 = 0;
    v54 = *((_QWORD *)v53 + 2);
    v55 = v53 + 16 - v86;
    if (v54 == 1)
      v55 = 0;
    v56 = v55 + v54;
    if (v56 == 1)
      v57 = 0;
    else
      v57 = &v86[v56];
    if (v7 == v57)
    {
      v58 = result - (char *)&v81;
      if (v52 == 1)
        v58 = 0;
      v59 = v58 + v52;
      v60 = a2 - (char *)&v80;
      if (*(_QWORD *)a2 == 1)
        v60 = 0;
      v61 = v60 + *(_QWORD *)a2;
      v80 = v61;
      v81 = v59;
      v62 = (char *)&v81 + v59;
      if (v59 == 1)
        v62 = 0;
      v63 = (char *)((char *)&v80 - (v62 + 16));
      if (v61 == 1)
        v63 = 0;
      *((_QWORD *)v62 + 2) = &v63[v61];
    }
  }
  v64 = a2 - (char *)&v79;
  if (*(_QWORD *)a2 == 1)
    v64 = 0;
  v65 = v64 + *(_QWORD *)a2;
  v66 = (char *)&v95 - (char *)&v78;
  if (v6 == 1)
    v66 = 0;
  v67 = v66 + v6;
  v78 = v67;
  v79 = v65;
  if ((v6 & 2) != 0)
    __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
  v68 = (unint64_t *)((char *)&v79 + v65);
  if (v65 == 1)
    v68 = 0;
  v69 = (char *)((char *)&v78 - (char *)v68);
  if (v67 == 1)
    v69 = 0;
  *v68 = *v68 & 2 | (unint64_t)&v69[v67];
  v70 = a2 - v77;
  if (*(_QWORD *)a2 == 1)
    v70 = 0;
  v71 = v70 + *(_QWORD *)a2;
  if (v71 == 1)
    v72 = 0;
  else
    v72 = &v77[v71];
  *((_QWORD *)v72 + 2) = 1;
  v73 = a2 - v76;
  if (*(_QWORD *)a2 == 1)
    v73 = 0;
  v74 = v73 + *(_QWORD *)a2;
  if (v74 == 1)
    v75 = 0;
  else
    v75 = &v76[v74];
  *((_QWORD *)v75 + 1) = 1;
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node(char *result, char *a2)
{
  uint64_t v2;
  int64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  BOOL v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE v63[8];
  char v64;
  _BYTE v65[8];
  unint64_t v66;
  uint64_t v67;
  char *v68;

  v2 = *(_QWORD *)a2;
  v3 = a2 - (char *)&v61;
  if (*(_QWORD *)a2 == 1)
    v3 = 0;
  v61 = v3 + v2;
  v4 = (char *)&v61 + v3 + v2;
  if (v3 + v2 == 1)
    v4 = 0;
  v5 = *((_QWORD *)v4 + 1);
  v6 = v4 + 8 - (char *)&v68;
  if (v5 == 1)
    v6 = 0;
  v7 = (char *)(v6 + v5);
  v8 = *((_QWORD *)v4 + 2);
  v9 = v4 + 16 - (char *)&v67;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  v67 = v10;
  v68 = v7;
  v11 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFFDLL;
  v12 = v4 - (char *)&v66;
  if (v11 == 1)
    v12 = 0;
  v66 = v12 + v11;
  if (v12 + v11 == 1)
    goto LABEL_12;
  if (v7 == (char *)1 || v10 == 1)
    goto LABEL_24;
  v45 = (char *)&v68 + (_QWORD)v7;
  v46 = (char *)&v67 + v10;
  if (v45 == (char *)&v67 + v10)
    goto LABEL_12;
  v47 = *(_QWORD *)v45 & 0xFFFFFFFFFFFFFFFDLL;
  v48 = v45 - &v64;
  if (v47 == 1)
    v48 = 0;
  v49 = v48 + v47;
  v50 = &v64 - v65;
  if (v49 == 1)
    v50 = 0;
  v51 = v50 + v49;
  v52 = v51 == 1 ? 0 : &v65[v51];
  if (v52 != v4)
    goto LABEL_12;
  v53 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFFDLL;
  v54 = v46 - &v62;
  if (v53 == 1)
    v54 = 0;
  v55 = v54 + v53;
  v56 = &v62 - v63;
  if (v55 == 1)
    v56 = 0;
  v57 = v56 + v55;
  v58 = v57 == 1 ? 0 : &v63[v57];
  if (v58 == v4)
  {
LABEL_24:
    if (v2 == 1)
      v17 = 0;
    else
      v17 = &a2[v2];
    v20 = *((_QWORD *)v17 + 1);
    v19 = v17 + 8;
    v18 = v20;
    v21 = v19 - (char *)&v68;
    if (v20 == 1)
      v21 = 0;
    if (v21 + v18 == 1)
    {
      v22 = a2 - (char *)&v68;
      if (v2 == 1)
        v22 = 0;
      v23 = (char *)(v22 + v2);
      v68 = v23;
      if (v23 == (char *)1)
        v24 = 0;
      else
        v24 = (char *)&v68 + (_QWORD)v23;
      v25 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFFDLL;
      v26 = v24 - result;
      if (v25 == 1)
        v26 = 0;
      v27 = (char *)(v26 + v25);
      *(_QWORD *)result = v27;
      v28 = v27 == (char *)1;
      v29 = &result[(_QWORD)v27];
      if (v27 == (char *)1)
        v29 = 0;
      v30 = *((_QWORD *)v29 + 1);
      v31 = v29 + 8 - (char *)&v67;
      if (v30 == 1)
        v31 = 0;
      v32 = v31 + v30;
      if (v32 == 1)
        v33 = 0;
      else
        v33 = (char *)&v67 + v32;
      if (v24 == v33)
      {
        do
        {
          if (v28)
            v34 = 0;
          else
            v34 = result - (char *)&v68;
          v35 = &v27[v34];
          v68 = &v27[v34];
          v36 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFFDLL;
          v37 = v29 - (char *)&v67;
          if (v36 == 1)
            v37 = 0;
          v38 = v37 + v36;
          if (v38 == 1)
            v39 = 0;
          else
            v39 = (char *)((char *)&v67 - result);
          v27 = &v39[v38];
          *(_QWORD *)result = v27;
          v29 = &result[(_QWORD)v27];
          if (v27 == (char *)1)
            v29 = 0;
          v40 = *((_QWORD *)v29 + 1);
          v28 = v27 == (char *)1;
          v41 = v29 + 8 - (char *)&v67;
          if (v40 == 1)
            v41 = 0;
          v42 = v41 + v40;
          if (v35 == (char *)1)
            v43 = 0;
          else
            v43 = (char *)&v68 + (_QWORD)v35;
          if (v42 == 1)
            v44 = 0;
          else
            v44 = (char *)&v67 + v42;
        }
        while (v43 == v44);
      }
    }
    else
    {
      v59 = v19 - (char *)&v60;
      if (v18 == 1)
        v59 = 0;
      v60 = v59 + v18;
      return boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum(result, &v60);
    }
  }
  else
  {
LABEL_12:
    if (v2 == 1)
      v13 = 0;
    else
      v13 = &a2[v2];
    v14 = *((_QWORD *)v13 + 2);
    v15 = v13 + 16 - result;
    if (v14 == 1)
      v15 = 0;
    *(_QWORD *)result = v15 + v14;
  }
  return result;
}

char *boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>(char *result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  BOOL v25;
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *(_QWORD *)result;
  v4 = result - (char *)&v29;
  if (*(_QWORD *)result == 1)
    v4 = 0;
  v5 = v4 + v3;
  v29 = v5;
  v6 = (char *)&v29 + v5;
  if (v5 == 1)
    v7 = 0;
  else
    v7 = (char *)&v29 + v5;
  v8 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFFDLL;
  v9 = v7 - (char *)&v28;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  v28 = v9 + v8;
  if (v9 + v8 != 1)
  {
    v11 = (char *)&v28 - (char *)&v29;
    if (*a2 == 1)
      v12 = 0;
    else
      v12 = (char *)a2 + *a2;
    while (1)
    {
      v5 = v11 + v10;
      v29 = v11 + v10;
      v31 = v12 - (char *)&v31 - 16;
      if (v12 - (char *)&v31 == 17)
        break;
      v6 = (char *)&v28 + v10;
      v30 = (char *)&v28 + v10 - (char *)&v30 - 16;
      if ((char *)&v28 + v10 - (char *)&v30 == 17)
        break;
      v13 = *((_QWORD *)v12 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v14 = *((_QWORD *)v6 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v15 = v13 >= v14;
      if (v13 >= v14)
        v16 = 16;
      else
        v16 = 8;
      if (v15)
        v17 = v6 + 16;
      else
        v17 = v6 + 8;
      v18 = *(_QWORD *)&v6[v16];
      v19 = v17 - &v27;
      if (v18 == 1)
        v19 = 0;
      v20 = v19 + v18;
      if (v20 == 1)
        v21 = 0;
      else
        v21 = &v27 - (char *)&v28;
      v10 = v21 + v20;
      v28 = v10;
      if (v10 == 1)
        goto LABEL_26;
    }
LABEL_43:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
LABEL_26:
  if (v5 == 1)
    v22 = 0;
  else
    v22 = v6;
  if (v3 == 1)
    v23 = 0;
  else
    v23 = &result[v3];
  if (v22 == v23)
  {
    v25 = 1;
  }
  else
  {
    if (*a2 == 1)
      v24 = 0;
    else
      v24 = (char *)a2 + *a2;
    v31 = v24 - (char *)&v31 - 16;
    if (v24 - (char *)&v31 == 17)
      goto LABEL_43;
    v30 = v22 - (char *)&v30 - 16;
    if (v22 - (char *)&v30 == 17)
      goto LABEL_43;
    v25 = (*((_QWORD *)v24 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < (*((_QWORD *)v22 - 1) & 0x3FFFFFFFFFFFFFFFuLL);
  }
  *(_BYTE *)a3 = v25;
  v26 = (char *)&v29 - a3 - 8;
  if (v5 == 1)
    v26 = 0;
  *(_QWORD *)(a3 + 8) = &v26[v5];
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum(char *result, _QWORD *a2)
{
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  _BYTE v15[8];

  v2 = (_BYTE *)*a2;
  if (*a2 == 1)
    v3 = 0;
  else
    v3 = (char *)a2 + *a2;
  v4 = *((_QWORD *)v3 + 2);
  v5 = v3 + 16 - v15;
  if (v4 == 1)
    v5 = 0;
  v6 = v5 + v4;
  if (v5 + v4 != 1)
  {
    v7 = (_BYTE *)(v15 - (_BYTE *)a2);
    do
    {
      v2 = &v7[v6];
      *a2 = &v7[v6];
      v8 = &v15[v6];
      if (v2 == (_BYTE *)1)
        v8 = 0;
      v9 = *((_QWORD *)v8 + 2);
      v10 = v8 + 16 - (_BYTE *)&v14;
      if (v9 == 1)
        v10 = 0;
      v11 = v10 + v9;
      if (v11 == 1)
        v12 = 0;
      else
        v12 = (char *)&v14 - v15;
      v6 = v12 + v11;
    }
    while (v6 != 1);
  }
  v13 = (char *)a2 - result;
  if (v2 == (_BYTE *)1)
    v13 = 0;
  *(_QWORD *)result = &v2[v13];
  return result;
}

char *boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum(char *result, _QWORD *a2)
{
  _BYTE *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  _BYTE v15[8];

  v2 = (_BYTE *)*a2;
  if (*a2 == 1)
    v3 = 0;
  else
    v3 = (char *)a2 + *a2;
  v4 = *((_QWORD *)v3 + 1);
  v5 = v3 - (char *)&v14;
  if (v4 == 1)
    v5 = 0;
  v6 = v5 + v4;
  if (v5 + v4 != 1)
  {
    v7 = (_BYTE *)(v15 - (_BYTE *)a2);
    do
    {
      v2 = &v7[v6];
      *a2 = &v7[v6];
      v8 = &v15[v6];
      if (v2 == (_BYTE *)1)
        v8 = 0;
      v9 = *((_QWORD *)v8 + 1);
      v10 = v8 + 8 - (_BYTE *)&v14;
      if (v9 == 1)
        v10 = 0;
      v11 = v10 + v9;
      if (v11 == 1)
        v12 = 0;
      else
        v12 = (char *)&v14 - v15;
      v6 = v12 + v11;
    }
    while (v6 != 1);
  }
  v13 = (char *)a2 - result;
  if (v2 == (_BYTE *)1)
    v13 = 0;
  *(_QWORD *)result = &v2[v13];
  return result;
}

char *boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase(char *a1, char *a2, char *a3)
{
  char *v3;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  int64_t v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  int64_t v79;
  unint64_t *v80;
  char *v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  char *v86;
  char *v87;
  int64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  _BOOL4 v92;
  unint64_t *v93;
  char *v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  char *result;
  uint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  char *v102;
  _BOOL4 v103;
  int64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  int64_t v132;
  int64_t v133;
  int64_t v134;
  int64_t v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  int64_t v139;
  int64_t v140;
  int64_t v141;
  int64_t v142;
  int64_t v143;
  int64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  _QWORD *v155;
  int64_t v156;
  int64_t v157;
  char *v158;
  unint64_t v159;
  int64_t v160;
  int64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  int64_t v180;
  char *v181;
  unint64_t v182;
  int64_t v183;
  int64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int64_t v198;
  char *v199;
  unint64_t v200;
  int64_t v201;
  unint64_t v202;
  int64_t v203;
  char *v204;
  int64_t v205;
  uint64_t v206;
  int64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  _QWORD *v212;
  uint64_t v213;
  int64_t v214;
  char *v215;
  unint64_t v216;
  int64_t v217;
  int64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  int64_t v236;
  int64_t v237;
  char *v238;
  _QWORD *v239;
  uint64_t v240;
  int64_t v241;
  char *v242;
  unint64_t v243;
  int64_t v244;
  int64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  _QWORD *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int64_t v263;
  int64_t v264;
  int64_t v265;
  int v266;
  char *v267;
  char *v268;
  int64_t v269;
  uint64_t v270;
  int64_t v271;
  int64_t v272;
  int64_t v273;
  int64_t v274;
  int64_t v275;
  int64_t v276;
  int64_t v277;
  int64_t v278;
  int64x2_t v279;
  _QWORD v280[2];
  unint64_t v281;
  int64_t v282;
  int64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  int64_t v287;
  int64_t v288;
  int64_t v289;
  uint64_t v290;
  int64_t v291;
  int64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int64_t v303;
  uint64_t v304;
  _QWORD v305[2];

  v3 = a3;
  v279 = vdupq_n_s64(1uLL);
  v280[0] = 1;
  v6 = a2 - (char *)&v278;
  if (*(_QWORD *)a2 == 1)
    v6 = 0;
  v7 = v6 + *(_QWORD *)a2;
  v8 = a3 - (char *)&v277;
  if (*(_QWORD *)a3 == 1)
    v8 = 0;
  v9 = v8 + *(_QWORD *)a3;
  v277 = v9;
  v278 = v7;
  v10 = (char *)&v277 - (char *)v305;
  if (v9 == 1)
    v10 = 0;
  v11 = v10 + v9;
  v304 = 1;
  v305[0] = v11;
  if (v9 == 1)
    v12 = 0;
  else
    v12 = (char *)&v277 + v9;
  v13 = *((_QWORD *)v12 + 1);
  v14 = v12 + 8 - (char *)&v303;
  if (v13 == 1)
    v14 = 0;
  v15 = v14 + v13;
  v16 = *((_QWORD *)v12 + 2);
  v17 = v12 + 16 - (char *)&v302;
  if (v16 == 1)
    v17 = 0;
  v18 = v17 + v16;
  v302 = v18;
  v303 = v15;
  if (v15 == 1)
  {
    v19 = -16;
LABEL_26:
    if (v18 == 1)
      v19 = 0;
    v20 = v19 + v18;
    v304 = v19 + v18;
    goto LABEL_29;
  }
  if (v18 != 1)
  {
    v300 = (char *)&v302 - (char *)&v300 + v18;
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum((char *)&v301, &v300);
    v23 = -32;
    if (v301 == 1)
      v23 = 0;
    v11 = v23 + v301;
    v305[0] = v11;
    v24 = (char *)v305 + v11;
    if (v11 == 1)
      v24 = 0;
    v25 = *((_QWORD *)v24 + 2);
    v26 = v24 + 16 - (char *)&v301;
    if (v25 == 1)
      v26 = 0;
    v18 = v26 + v25;
    v19 = -24;
    goto LABEL_26;
  }
  v20 = v15 - 8;
  v304 = v15 - 8;
  if (v15 == 9)
  {
    v21 = "x";
    v22 = 1521;
    goto LABEL_450;
  }
LABEL_29:
  v301 = 1;
  v27 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFDLL;
  v28 = v12 - (char *)&v299;
  if (v27 == 1)
    v28 = 0;
  v29 = v28 + v27;
  v299 = v29;
  v30 = (char *)&v299 + v29;
  if (v29 == 1)
    v30 = 0;
  v31 = *((_QWORD *)v30 + 1);
  v32 = v30 + 8 - (char *)&v298;
  if (v31 == 1)
    v32 = 0;
  v33 = v32 + v31;
  if (v33 == 1)
    v34 = 0;
  else
    v34 = (char *)&v298 + v33;
  v35 = (char *)v305 + v11;
  if (v11 == 1)
    v35 = 0;
  if (v35 != v12)
  {
    v36 = 40;
    if (v15 == 1)
      v36 = 0;
    v37 = v36 + v15;
    v38 = (char *)v305 - (char *)&v297;
    if (v11 == 1)
      v38 = 0;
    v39 = v38 + v11;
    v297 = v39;
    v298 = v36 + v15;
    if ((v11 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v40 = (unint64_t *)((char *)&v298 + v37);
    if (v37 == 1)
      v40 = 0;
    v41 = (char *)((char *)&v297 - (char *)v40);
    if (v39 == 1)
      v41 = 0;
    *v40 = *v40 & 2 | (unint64_t)&v41[v39];
    v42 = v305[0];
    v43 = 72;
    v44 = (char *)&v303 - (char *)&v295;
    if (v303 == 1)
      v44 = 0;
    if (v305[0] == 1)
      v43 = 0;
    v45 = v43 + v305[0];
    v46 = v44 + v303;
    v295 = v46;
    v296 = v45;
    v47 = (char *)&v296 + v45;
    v48 = (char *)v305 + v305[0];
    if (v305[0] == 1)
      v48 = 0;
    if (v45 == 1)
      v47 = 0;
    v49 = (char *)((char *)&v295 - (v47 + 8));
    if (v46 == 1)
      v49 = 0;
    *((_QWORD *)v47 + 1) = &v49[v46];
    v50 = v302;
    v51 = (char *)&v302 + v302;
    if (v302 == 1)
      v51 = 0;
    if (v48 == v51)
    {
      v77 = 32;
      if (v42 == 1)
        v77 = 0;
      v301 = v77 + v42;
      goto LABEL_123;
    }
    v52 = 88;
    if (v42 == 1)
      v52 = 0;
    v53 = v52 + v42;
    v294 = v53;
    v54 = (char *)&v294 + v53;
    if (v42 == 1)
      v55 = 0;
    else
      v55 = (char *)v305 - (char *)&v291;
    if (v53 == 1)
      v54 = 0;
    v56 = (char *)((char *)&v293 - (v54 + 16));
    v57 = 80;
    if (v302 == 1)
      v58 = 0;
    else
      v58 = (char *)&v302 - (char *)&v293;
    v59 = v58 + v302;
    if (v302 == 1)
      v57 = 0;
    if (v59 == 1)
      v56 = 0;
    *((_QWORD *)v54 + 2) = &v56[v59];
    v60 = v57 + v50;
    v292 = v60;
    v293 = v59;
    v61 = v55 + v42;
    v291 = v55 + v42;
    if ((v42 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v62 = (unint64_t *)((char *)&v292 + v60);
    if (v60 == 1)
      v62 = 0;
    v63 = (char *)((char *)&v291 - (char *)v62);
    if (v61 == 1)
      v63 = 0;
    *v62 = *v62 & 2 | (unint64_t)&v63[v61];
    v42 = v305[0];
    if (v305[0] == 1)
      v64 = 0;
    else
      v64 = (char *)v305 + v305[0];
    v65 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFFDLL;
    v66 = v64 - (char *)&v290;
    if (v65 == 1)
      v66 = 0;
    v67 = v66 + v65;
    v68 = (char *)&v290 - (char *)&v301;
    if (v67 == 1)
      v68 = 0;
    v69 = v68 + v67;
    v301 = v69;
    v70 = (char *)&v301 + v69;
    if (v69 == 1)
      v70 = 0;
    v71 = *((_QWORD *)v70 + 1);
    v72 = v70 + 8 - (char *)&v290;
    if (v71 == 1)
      v72 = 0;
    v290 = v72 + v71;
    v73 = (char *)&v290 + v72 + v71;
    if (v72 + v71 == 1)
      v73 = 0;
    if (v73 == v64)
    {
      if (v304 == 1)
      {
        v74 = 1;
      }
      else
      {
        v78 = (char *)&v301 - (char *)&v289;
        if (v69 == 1)
          v78 = 0;
        v79 = v78 + v69;
        v289 = v79;
        v290 = v304 + (char *)&v304 - (char *)&v290;
        if ((v67 & 2) != 0)
          __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
        v80 = (_QWORD *)((char *)&v305[-1] + v304);
        if (v304 + (char *)&v304 - (char *)&v290 == 1)
          v80 = 0;
        v81 = (char *)((char *)&v289 - (char *)v80);
        if (v79 == 1)
          v81 = 0;
        *v80 = *v80 & 2 | (unint64_t)&v81[v79];
        v69 = v301;
        v74 = v304;
        v42 = v305[0];
      }
      v82 = (char *)&v301 - (char *)&v288;
      if (v69 == 1)
        v82 = 0;
      v83 = v82 + v69;
      v84 = (char *)&v304 - (char *)&v287;
      if (v74 == 1)
        v84 = 0;
      v85 = v84 + v74;
      v287 = v85;
      v288 = v83;
      if (v83 == 1)
        v86 = 0;
      else
        v86 = (char *)&v288 + v83;
      v87 = (char *)((char *)&v287 - (v86 + 8));
      if (v85 == 1)
        v87 = 0;
      *((_QWORD *)v86 + 1) = &v87[v85];
LABEL_123:
      v88 = (char *)v305 - (char *)&v286;
      if (v42 == 1)
        v88 = 0;
      v89 = v88 + v42;
      v90 = (char *)&v299 - (char *)&v285;
      if (v299 == 1)
        v90 = 0;
      v91 = v90 + v299;
      v285 = v91;
      v286 = v88 + v42;
      if ((v299 & 2) != 0)
        __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
      v92 = v34 == v12;
      v93 = (unint64_t *)((char *)&v286 + v89);
      if (v89 == 1)
        v93 = 0;
      v94 = (char *)((char *)&v285 - (char *)v93);
      if (v91 == 1)
        v94 = 0;
      *v93 = *v93 & 2 | (unint64_t)&v94[v91];
      v95 = (char *)&v278 - (char *)&v284;
      if (v278 == 1)
        v95 = 0;
      v284 = v95 + v278;
      v96 = (char *)v305 - (char *)&v283;
      if (v305[0] == 1)
        v96 = 0;
      v283 = v96 + v305[0];
      v97 = (char *)&v299 - (char *)&v282;
      if (v299 == 1)
        v97 = 0;
      v282 = v97 + v299;
      result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v284, (char *)&v283, (char *)&v282, v92);
      goto LABEL_184;
    }
    v21 = "NodeTraits::get_left(x_parent) == y";
    v22 = 1545;
LABEL_450:
    __assert_rtn("erase", "bstree_algorithms.hpp", v22, v21);
  }
  v75 = -16;
  if (v29 == 1)
    v75 = 0;
  v301 = v75 + v29;
  if (v20 == 1)
  {
    v76 = 1;
  }
  else
  {
    v99 = 16;
    if (v29 == 1)
      v99 = 0;
    v100 = v99 + v29;
    v297 = v100;
    v298 = v20 + 48;
    if ((v29 & 2) != 0)
      __assert_rtn("set_pointer", "offset_ptr.hpp", 725, "0 == (get_bits)(p)");
    v101 = (_QWORD *)((char *)&v305[-1] + v20);
    if (v20 == -47)
      v101 = 0;
    v102 = (char *)((char *)&v297 - (char *)v101);
    if (v100 == 1)
      v102 = 0;
    *v101 = *v101 & 2 | (unint64_t)&v102[v100];
    v76 = v304;
    v29 = v299;
    v7 = v278;
  }
  v103 = v34 == v12;
  v104 = (char *)&v278 - (char *)&v296;
  if (v7 == 1)
    v104 = 0;
  v296 = v104 + v7;
  v105 = 72;
  if (v76 == 1)
    v105 = 0;
  v295 = v105 + v76;
  v106 = 40;
  if (v29 == 1)
    v106 = 0;
  v294 = v106 + v29;
  result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::set_child((char *)&v296, (char *)&v295, (char *)&v294, v103);
  v107 = v278;
  if (v278 == 1)
    v108 = 0;
  else
    v108 = (char *)&v278 + v278;
  v109 = *((_QWORD *)v108 + 1);
  v110 = v108 + 8 - (char *)&v293;
  if (v109 == 1)
    v110 = 0;
  v111 = v110 + v109;
  if (v111 == 1)
    v112 = 0;
  else
    v112 = (char *)&v293 + v111;
  if (v277 == 1)
    v113 = 0;
  else
    v113 = (char *)&v277 + v277;
  if (v112 == v113)
  {
    if (v303 != 1)
    {
      v21 = "!z_left";
      v22 = 1567;
      goto LABEL_450;
    }
    v114 = (char *)&v278 - (char *)&v293;
    if (v278 == 1)
      v114 = 0;
    v115 = v114 + v278;
    v293 = v114 + v278;
    if (v302 == 1)
    {
      v116 = 56;
      if (v299 == 1)
        v116 = 0;
      v117 = v116 + v299;
      v292 = v116 + v299;
    }
    else
    {
      v291 = (char *)&v302 - (char *)&v291 + v302;
      result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::minimum((char *)&v292, &v291);
      v117 = v292;
    }
    v118 = (char *)&v293 + v115;
    if (v115 == 1)
      v118 = 0;
    v119 = (char *)((char *)&v292 - (v118 + 8));
    if (v117 == 1)
      v119 = 0;
    *((_QWORD *)v118 + 1) = &v119[v117];
  }
  v120 = *((_QWORD *)v108 + 2);
  v121 = v108 + 16 - (char *)&v290;
  if (v120 == 1)
    v121 = 0;
  v122 = v121 + v120;
  if (v122 == 1)
    v123 = 0;
  else
    v123 = (char *)&v290 + v122;
  if (v123 == v113)
  {
    if (v302 != 1)
    {
      v21 = "!z_right";
      v22 = 1574;
      goto LABEL_450;
    }
    v205 = (char *)&v278 - (char *)&v290;
    if (v107 == 1)
      v205 = 0;
    v206 = v205 + v107;
    v290 = v206;
    if (v303 == 1)
    {
      v207 = (char *)&v299 - (char *)&v289;
      if (v299 == 1)
        v207 = 0;
      v208 = v207 + v299;
      v289 = v207 + v299;
    }
    else
    {
      v288 = (char *)&v303 - (char *)&v288 + v303;
      result = boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::maximum((char *)&v289, &v288);
      v208 = v289;
    }
    v209 = (char *)&v290 + v206;
    if (v206 == 1)
      v209 = 0;
    v210 = (char *)((char *)&v289 - (v209 + 16));
    if (v208 == 1)
      v210 = 0;
    *((_QWORD *)v209 + 2) = &v210[v208];
  }
LABEL_184:
  v124 = (char *)&v304 - (char *)&v279;
  v125 = (char *)v305 - (char *)v280;
  if (v305[0] == 1)
    v125 = 0;
  v126 = v125 + v305[0];
  if (v304 == 1)
    v124 = 0;
  v279.i64[0] = v124 + v304;
  v280[0] = v125 + v305[0];
  if (v304 != 1)
  {
    v127 = *(_QWORD *)((char *)&v305[-1] + v304) & 0xFFFFFFFFFFFFFFFDLL;
    v128 = (char *)&v305[-1] + v304 - (char *)&v281;
    if (v127 == 1)
      v128 = 0;
    v129 = v128 + v127;
    v281 = v129;
    if (v129 == 1)
      v130 = 0;
    else
      v130 = (char *)&v281 + v129;
    v131 = (char *)&v301 + v301;
    if (v301 == 1)
      v131 = 0;
    if (v130 != v131)
    {
      v21 = "!x || NodeTraits::get_parent(x) == x_parent";
      v22 = 1587;
      goto LABEL_450;
    }
  }
  v132 = (char *)&v301 - (char *)&v279.u64[1];
  if (v301 == 1)
    v132 = 0;
  v279.i64[1] = v132 + v301;
  v133 = a2 - (char *)&v276;
  if (*(_QWORD *)a2 == 1)
    v133 = 0;
  v276 = v133 + *(_QWORD *)a2;
  v134 = v3 - (char *)&v275;
  if (*(_QWORD *)v3 == 1)
    v134 = 0;
  v135 = v134 + *(_QWORD *)v3;
  v275 = v135;
  v136 = (_QWORD *)((char *)v280 + v126);
  if (v126 == 1)
    v136 = 0;
  if (v135 == 1)
    v137 = 0;
  else
    v137 = (unint64_t *)((char *)&v275 + v135);
  v138 = *v136;
  if (v136 != v137)
    *v136 = v138 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v137 >> 1) & 1));
  if ((v138 & 2) == 0)
    goto LABEL_434;
  v267 = v3;
  v139 = (char *)&v276 - (char *)&v284;
  if (v276 == 1)
    v139 = 0;
  v140 = v139 + v276;
  v141 = (char *)&v279 - (char *)&v283;
  if (v279.i64[0] == 1)
    v141 = 0;
  v142 = v141 + v279.i64[0];
  v283 = v141 + v279.i64[0];
  v284 = v140;
  v143 = (char *)&v279.u64[1] - (char *)&v282;
  if (v279.i64[1] == 1)
    v143 = 0;
  v144 = v143 + v279.i64[1];
  v282 = v144;
  v145 = (char *)&v282 + v144;
  if (v144 == 1)
    v145 = 0;
  if (v140 == 1)
    v146 = 0;
  else
    v146 = (char *)&v284 + v140;
  v268 = a1;
  if (v145 == v146)
    goto LABEL_431;
  v274 = (char *)&v282 - (char *)&v288;
  v273 = (char *)&v304 - (char *)&v287;
  v272 = (char *)&v284 - (char *)&v285;
  v271 = (char *)&v282 - (char *)&v303;
  v270 = 16;
  v269 = (char *)&v284 - (char *)&v300;
  while (1)
  {
    if (v142 == 1)
    {
      v147 = 0;
    }
    else
    {
      v147 = (char *)&v283 + v142;
      if ((*((_BYTE *)&v283 + v142) & 2) == 0)
        goto LABEL_432;
    }
    v148 = *((_QWORD *)v145 + 1);
    v149 = v145 + 8 - (char *)v305;
    if (v148 == 1)
      v149 = 0;
    v150 = v149 + v148;
    v305[0] = v150;
    v151 = (char *)v305 + v150;
    if (v150 == 1)
      v151 = 0;
    if (v147 == v151)
    {
      v175 = *((_QWORD *)v145 + 2);
      v176 = v145 + 16 - (char *)&v304;
      if (v175 == 1)
        v176 = 0;
      v177 = v176 + v175;
      v304 = v177;
      if (v177 == 1)
      {
        v266 = 475;
        goto LABEL_440;
      }
      v154 = (char *)&v305[-1] + v177;
      if ((*(_QWORD *)v154 & 2) == 0)
      {
        *(_QWORD *)v154 |= 2uLL;
        if (v282 == 1)
          v178 = 0;
        else
          v178 = (int64_t *)((char *)&v282 + v282);
        *v178 &= ~2uLL;
        v179 = v270;
        v180 = v271;
        if (v304 == 1)
          v179 = 0;
        if (v282 == 1)
          v180 = 0;
        v302 = v179 + v304;
        v303 = v180 + v282;
        v181 = (char *)&v282 + v282;
        if (v282 == 1)
          v181 = 0;
        v182 = *(_QWORD *)v181 & 0xFFFFFFFFFFFFFFFDLL;
        v183 = v181 - (char *)&v301;
        if (v182 == 1)
          v183 = 0;
        v301 = v183 + v182;
        v184 = v269;
        if (v284 == 1)
          v184 = 0;
        v300 = v184 + v284;
        result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v303, (char *)&v302, (char *)&v301, (char *)&v300);
        v144 = v282;
        v185 = (char *)&v282 + v282;
        if (v282 == 1)
          v185 = 0;
        v186 = *((_QWORD *)v185 + 2);
        v187 = v185 + 16 - (char *)&v299;
        if (v186 == 1)
          v187 = 0;
        v188 = v187 + v186;
        if (v188 == 1)
          v189 = 0;
        else
          v189 = -40;
        v190 = v189 + v188;
        v304 = v190;
        if (v190 == 1)
        {
          v266 = 481;
          goto LABEL_440;
        }
        v154 = (char *)&v305[-1] + v190;
      }
      v191 = *((_QWORD *)v154 + 1);
      v192 = v154 + 8 - (char *)&v299;
      if (v191 == 1)
        v192 = 0;
      v193 = v192 + v191;
      v194 = *((_QWORD *)v154 + 2);
      v195 = v154 + 16 - (char *)&v298;
      if (v194 == 1)
        v195 = 0;
      v196 = v195 + v194;
      v298 = v196;
      v299 = v193;
      if (v193 == 1 || (v197 = *(unint64_t *)((char *)&v299 + v193), (v197 & 2) != 0))
      {
        if (v196 != 1 && (*((_BYTE *)&v298 + v196) & 2) == 0)
          goto LABEL_384;
        goto LABEL_304;
      }
      if (v196 == 1 || (*((_BYTE *)&v298 + v196) & 2) != 0)
      {
        *(unint64_t *)((char *)&v299 + v193) = v197 | 2;
        if (v304 == 1)
          v239 = 0;
        else
          v239 = (_QWORD *)((char *)&v305[-1] + v304);
        *v239 &= ~2uLL;
        v240 = 56;
        v241 = (char *)&v299 - (char *)&v296;
        if (v299 == 1)
          v241 = 0;
        if (v304 == 1)
          v240 = 0;
        v296 = v241 + v299;
        v297 = v240 + v304;
        v242 = (char *)&v305[-1] + v304;
        if (v304 == 1)
          v242 = 0;
        v243 = *(_QWORD *)v242 & 0xFFFFFFFFFFFFFFFDLL;
        v244 = v242 - (char *)&v295;
        if (v243 == 1)
          v244 = 0;
        v295 = v244 + v243;
        v245 = (char *)&v284 - (char *)&v294;
        if (v284 == 1)
          v245 = 0;
        v294 = v245 + v284;
        boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v297, (char *)&v296, (char *)&v295, (char *)&v294);
        v144 = v282;
        v238 = (char *)&v282 + v282;
        if (v282 == 1)
          v246 = 0;
        else
          v246 = (char *)&v282 + v282;
        v247 = *((_QWORD *)v246 + 2);
        v248 = v246 + 16 - (char *)&v293;
        if (v247 == 1)
          v248 = 0;
        v249 = v248 + v247;
        v250 = -88;
        if (v249 == 1)
          v250 = 0;
        v251 = v250 + v249;
        v304 = v251;
        if (v251 == 1)
        {
          v266 = 497;
LABEL_440:
          __assert_rtn("rebalance_after_erasure_restore_invariants", "rbtree_algorithms.hpp", v266, "w");
        }
        v154 = (char *)&v305[-1] + v251;
      }
      else
      {
LABEL_384:
        v238 = (char *)&v282 + v144;
      }
      if (v144 == 1)
        v252 = 0;
      else
        v252 = v238;
      *(_QWORD *)v154 = *(_QWORD *)v154 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v252 >> 1) & 1));
      if (v282 == 1)
        v253 = 0;
      else
        v253 = (int64_t *)((char *)&v282 + v282);
      *v253 |= 2uLL;
      v254 = (char *)&v305[-1] + v304;
      if (v304 == 1)
        v254 = 0;
      v255 = *((_QWORD *)v254 + 2);
      v256 = v254 + 16 - (char *)&v293;
      if (v255 == 1)
        v256 = 0;
      v257 = v256 + v255;
      v293 = v257;
      if (v257 != 1)
        *(uint64_t *)((char *)&v293 + v257) |= 2uLL;
      v258 = (char *)&v282 - (char *)&v292;
      if (v282 == 1)
        v258 = 0;
      v292 = v258 + v282;
      v259 = (char *)&v282 + v282;
      if (v282 == 1)
        v259 = 0;
      v260 = *((_QWORD *)v259 + 2);
      v261 = v259 + 16 - (char *)&v291;
      if (v260 == 1)
        v261 = 0;
      v291 = v261 + v260;
      v262 = *(_QWORD *)v259 & 0xFFFFFFFFFFFFFFFDLL;
      v263 = v259 - (char *)&v290;
      if (v262 == 1)
        v263 = 0;
      v290 = v263 + v262;
      v264 = (char *)&v284 - (char *)&v289;
      if (v284 == 1)
        v264 = 0;
      v289 = v264 + v284;
      result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v292, (char *)&v291, (char *)&v290, (char *)&v289);
      goto LABEL_430;
    }
    if (v150 == 1)
      v152 = 0;
    else
      v152 = 8;
    v153 = v152 + v150;
    v304 = v153;
    if (v153 == 1)
      v154 = 0;
    else
      v154 = (char *)&v305[-1] + v153;
    if ((*(_QWORD *)v154 & 2) == 0)
    {
      *(_QWORD *)v154 |= 2uLL;
      if (v282 == 1)
        v155 = 0;
      else
        v155 = (int64_t *)((char *)&v282 + v282);
      *v155 &= ~2uLL;
      v156 = v273;
      v157 = v274;
      if (v304 == 1)
        v156 = 0;
      if (v282 == 1)
        v157 = 0;
      v287 = v156 + v304;
      v288 = v157 + v282;
      v158 = (char *)&v282 + v282;
      if (v282 == 1)
        v158 = 0;
      v159 = *(_QWORD *)v158 & 0xFFFFFFFFFFFFFFFDLL;
      v160 = v158 - (char *)&v286;
      if (v159 == 1)
        v160 = 0;
      v286 = v160 + v159;
      v161 = v272;
      if (v284 == 1)
        v161 = 0;
      v285 = v161 + v284;
      result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v288, (char *)&v287, (char *)&v286, (char *)&v285);
      v144 = v282;
      v162 = (char *)&v282 + v282;
      if (v282 == 1)
        v162 = 0;
      v163 = *((_QWORD *)v162 + 1);
      v164 = v162 + 8 - (char *)&v299;
      if (v163 == 1)
        v164 = 0;
      v165 = v164 + v163;
      if (v165 == 1)
        v166 = 0;
      else
        v166 = -40;
      v167 = v166 + v165;
      v304 = v167;
      if (v167 == 1)
      {
        v266 = 516;
        goto LABEL_440;
      }
      v154 = (char *)&v305[-1] + v167;
    }
    v168 = *((_QWORD *)v154 + 1);
    v169 = v154 + 8 - (char *)&v299;
    if (v168 == 1)
      v169 = 0;
    v170 = v169 + v168;
    v171 = *((_QWORD *)v154 + 2);
    v172 = v154 + 16 - (char *)&v298;
    if (v171 == 1)
      v172 = 0;
    v173 = v172 + v171;
    v298 = v173;
    v299 = v170;
    if (v173 != 1)
    {
      v174 = *(uint64_t *)((char *)&v298 + v173);
      if ((v174 & 2) == 0)
        break;
    }
    if (v170 != 1 && (*((_BYTE *)&v299 + v170) & 2) == 0)
      goto LABEL_336;
LABEL_304:
    *(_QWORD *)v154 &= ~2uLL;
    if (v282 == 1)
      v198 = 0;
    else
      v198 = (char *)&v282 - (char *)&v283;
    v142 = v198 + v282;
    v283 = v142;
    v199 = (char *)&v282 + v282;
    if (v282 == 1)
      v199 = 0;
    v200 = *(_QWORD *)v199 & 0xFFFFFFFFFFFFFFFDLL;
    v201 = v199 - (char *)&v297;
    if (v200 == 1)
      v201 = 0;
    v202 = v201 + v200;
    if (v202 == 1)
      v203 = 0;
    else
      v203 = (char *)&v297 - (char *)&v282;
    v144 = v203 + v202;
    v282 = v144;
    v145 = (char *)&v282 + v144;
    if (v144 == 1)
      v145 = 0;
    if (v284 == 1)
      v204 = 0;
    else
      v204 = (char *)&v284 + v284;
    if (v145 == v204)
      goto LABEL_431;
  }
  if (v170 != 1 && (*((_BYTE *)&v299 + v170) & 2) == 0)
  {
LABEL_336:
    v211 = (char *)&v282 + v144;
    goto LABEL_359;
  }
  *(uint64_t *)((char *)&v298 + v173) = v174 | 2;
  if (v304 == 1)
    v212 = 0;
  else
    v212 = (_QWORD *)((char *)&v305[-1] + v304);
  *v212 &= ~2uLL;
  v213 = 56;
  v214 = (char *)&v298 - (char *)&v296;
  if (v298 == 1)
    v214 = 0;
  if (v304 == 1)
    v213 = 0;
  v296 = v214 + v298;
  v297 = v213 + v304;
  v215 = (char *)&v305[-1] + v304;
  if (v304 == 1)
    v215 = 0;
  v216 = *(_QWORD *)v215 & 0xFFFFFFFFFFFFFFFDLL;
  v217 = v215 - (char *)&v295;
  if (v216 == 1)
    v217 = 0;
  v295 = v217 + v216;
  v218 = (char *)&v284 - (char *)&v294;
  if (v284 == 1)
    v218 = 0;
  v294 = v218 + v284;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_left((char *)&v297, (char *)&v296, (char *)&v295, (char *)&v294);
  v144 = v282;
  v211 = (char *)&v282 + v282;
  if (v282 == 1)
    v219 = 0;
  else
    v219 = (char *)&v282 + v282;
  v220 = *((_QWORD *)v219 + 1);
  v221 = v219 + 8 - (char *)&v293;
  if (v220 == 1)
    v221 = 0;
  v222 = v221 + v220;
  v223 = -88;
  if (v222 == 1)
    v223 = 0;
  v224 = v223 + v222;
  v304 = v224;
  if (v224 == 1)
  {
    v266 = 532;
    goto LABEL_440;
  }
  v154 = (char *)&v305[-1] + v224;
LABEL_359:
  if (v144 == 1)
    v225 = 0;
  else
    v225 = v211;
  *(_QWORD *)v154 = *(_QWORD *)v154 & 0xFFFFFFFFFFFFFFFDLL | (2 * ((*v225 >> 1) & 1));
  if (v282 == 1)
    v226 = 0;
  else
    v226 = (int64_t *)((char *)&v282 + v282);
  *v226 |= 2uLL;
  v227 = (char *)&v305[-1] + v304;
  if (v304 == 1)
    v227 = 0;
  v228 = *((_QWORD *)v227 + 1);
  v229 = v227 + 8 - (char *)&v293;
  if (v228 == 1)
    v229 = 0;
  v230 = v229 + v228;
  v293 = v230;
  if (v230 != 1)
    *(uint64_t *)((char *)&v293 + v230) |= 2uLL;
  v231 = (char *)&v282 - (char *)&v292;
  if (v282 == 1)
    v231 = 0;
  v292 = v231 + v282;
  v232 = (char *)&v282 + v282;
  if (v282 == 1)
    v232 = 0;
  v233 = *((_QWORD *)v232 + 1);
  v234 = v232 + 8 - (char *)&v291;
  if (v233 == 1)
    v234 = 0;
  v291 = v234 + v233;
  v235 = *(_QWORD *)v232 & 0xFFFFFFFFFFFFFFFDLL;
  v236 = v232 - (char *)&v290;
  if (v235 == 1)
    v236 = 0;
  v290 = v236 + v235;
  v237 = (char *)&v284 - (char *)&v289;
  if (v284 == 1)
    v237 = 0;
  v289 = v237 + v284;
  result = boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rotate_right((char *)&v292, (char *)&v291, (char *)&v290, (char *)&v289);
LABEL_430:
  v142 = v283;
LABEL_431:
  if (v142 != 1)
LABEL_432:
    *(int64_t *)((char *)&v283 + v142) |= 2uLL;
  v3 = v267;
  a1 = v268;
LABEL_434:
  v265 = v3 - a1;
  if (*(_QWORD *)v3 == 1)
    v265 = 0;
  *(_QWORD *)a1 = v265 + *(_QWORD *)v3;
  return result;
}

char *boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(char *a1)
{
  uint64_t v2;
  int64_t v3;
  char *v4;
  char *v6;
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)a1 + 3))
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = a1 - (char *)&v8;
    if (v2 == 1)
      v3 = 0;
    v9 = v3 + v2;
    v4 = (char *)&v9 + v3 + v2;
    if (v3 + v2 != 1 && v4 != 0)
    {
      if (*(_QWORD *)a1 == 1)
        v6 = 0;
      else
        v6 = &a1[*(_QWORD *)a1];
      boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v6, (uint64_t)v4);
    }
  }
  return a1;
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 24);
    v3 = a1 + 24 - (_QWORD)&v5;
    if (v2 == 1)
      v3 = 0;
    v5 = v3 + v2;
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v5, *(_QWORD *)(a1 + 16));
  }
  return a1;
}

char *boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate(char *result, _QWORD *a2, unint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char *v5;

  if (a3 >= 0x18)
  {
    v4 = *a2 == 1;
    v3 = (uint64_t)a2 + *a2;
    v4 = v4 || v3 == 0;
    if (!v4)
    {
      if (*(_QWORD *)result == 1)
        v5 = 0;
      else
        v5 = &result[*(_QWORD *)result];
      return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
    }
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  char *v15;
  unint64_t v16;
  uint64_t v17;

  *a4 = 0;
  if (a3)
  {
    do
    {
      v7 = (char *)(a2 + 1);
      v8 = a2[2];
      if (v8)
      {
        if (*(_QWORD *)v7 == 1)
          v9 = 0;
        else
          v9 = &v7[*(_QWORD *)v7];
        v10 = v9 - (char *)&v17;
        do
        {
          if (v9)
            v11 = v10;
          else
            v11 = 1;
          v17 = v11;
          boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v17);
          v9 += 32;
          v10 += 32;
          --v8;
        }
        while (v8);
      }
      if (a2[3])
      {
        v12 = v7 - (char *)&v17;
        if (*(_QWORD *)v7 == 1)
          v12 = 0;
        v17 = v12 + *(_QWORD *)v7;
        v13 = (char *)&v17 + v17;
        if (v17 != 1 && v13 != 0)
        {
          if (*a2 == 1)
            v15 = 0;
          else
            v15 = (char *)a2 + *a2;
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
        }
      }
      a2 += 4;
      v16 = *a4 + 1;
      *a4 = v16;
    }
    while (v16 < a3);
  }
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

char *boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(uint64_t *a1)
{
  uint64_t v1;
  char *v2;

  v1 = *a1;
  v2 = (char *)a1 + *a1;
  if (v1 == 1 || v2 == 0)
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  return boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(v2);
}

char *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(char *a1)
{
  uint64_t v2;
  int64_t v3;
  char *v4;
  char *v6;
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)a1 + 3))
  {
    v2 = *((_QWORD *)a1 + 1);
    v3 = a1 - (char *)&v8;
    if (v2 == 1)
      v3 = 0;
    v9 = v3 + v2;
    v4 = (char *)&v9 + v3 + v2;
    if (v3 + v2 != 1 && v4 != 0)
    {
      if (*(_QWORD *)a1 == 1)
        v6 = 0;
      else
        v6 = &a1[*(_QWORD *)a1];
      boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v6, (uint64_t)v4);
    }
  }
  return a1;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a4 = 0;
  if (a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = (char *)a2;
    do
    {
      if (v6[3])
      {
        v9 = v6[1];
        v10 = v8 - (char *)&v14;
        if (v9 == 1)
          v10 = 0;
        v15 = v10 + v9;
        v11 = (char *)&v15 + v10 + v9;
        if (v10 + v9 != 1 && v11 != 0)
        {
          if (*v6 == 1)
            v13 = 0;
          else
            v13 = &v8[*v6];
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v13, (uint64_t)v11);
          v7 = *a4;
        }
      }
      v6 += 4;
      *a4 = ++v7;
      v8 += 32;
    }
    while (v7 < a3);
  }
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

void boost::interprocess::ipcdetail::placement_destroy<int>::destroy_n(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = a3;
}

void boost::interprocess::ipcdetail::placement_destroy<int>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>(uint64_t a1, const char **a2, int a3, uint64_t a4)
{
  mode_t v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = 420;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((char **)a1, 1, a2, 0, a3, &v6, *(uint64_t **)a4, *(_QWORD *)(a4 + 8));
  return a1;
}

void sub_1A1717F5C(_Unwind_Exception *a1)
{
  boost::interprocess::mapped_region *v1;

  boost::interprocess::mapped_region::~mapped_region(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>(char **a1, int a2, const char **a3, unint64_t a4, int a5, mode_t *a6, uint64_t *a7, int a8)
{
  char *v12;
  _BOOL4 v13;
  dev_t st_dev;
  uint64_t v15;
  uint64_t v16;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int *v25;
  char *v27;
  __int128 v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  __darwin_ino64_t st_ino;
  uint64_t v37;
  char *v38;
  __darwin_ino64_t v39;
  uint64_t v40;
  __int128 v41;
  dev_t v42;
  char v43;
  int v44;
  char *v45;
  __darwin_ino64_t v46;
  char *v47;
  __darwin_ino64_t v48;
  char *v49;
  dev_t v50;
  int v51;
  uint64_t result;
  _QWORD *v53;
  int *v54;
  uint64_t v55;
  dev_t v56;
  int v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *exception;
  _QWORD *v63;
  _QWORD *v64;
  int v65[2];
  uint64_t v66;
  _BYTE v67[24];
  dev_t st_rdev;
  char v69;
  _QWORD v70[2];
  int v71;
  stat v72;

  if (a2 == 1)
  {
    *(_QWORD *)v65 = 0xFFFFFFFFLL;
    v12 = (char *)*a3;
    *(_WORD *)v67 = 420;
    boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(&v72.st_dev, 1, v12, 2 * (a5 == 2), (mode_t *)v67);
    *(_QWORD *)v65 = *(_QWORD *)&v72.st_dev;
    v13 = a5 == 0;
    st_dev = v72.st_dev;
    memset(v67, 0, 20);
    gettimeofday((timeval *)&v72, 0);
    v15 = *(_QWORD *)&v72.st_dev;
    v16 = -(uint64_t)SLODWORD(v72.st_ino);
    while (1)
    {
      if (fstat(st_dev, &v72))
      {
        v54 = __error();
        v55 = 0;
        v56 = *v54;
        v72.st_dev = *v54;
        while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v55) != v56)
        {
          v55 += 8;
          if (v55 == 128)
          {
            v57 = 1;
            goto LABEL_71;
          }
        }
        v57 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v55 + 4);
LABEL_71:
        *(_DWORD *)&v72.st_mode = v57;
        exception = __cxa_allocate_exception(0x28uLL);
        boost::interprocess::interprocess_exception::interprocess_exception(exception, (uint64_t *)&v72.st_dev);
      }
      if (v72.st_size)
        break;
      gettimeofday((timeval *)&v72, 0);
      if ((unint64_t)(v16 + 1000000 * (*(_QWORD *)&v72.st_dev - v15) + SLODWORD(v72.st_ino)) > 0x11E1A300)
      {
        v58 = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)&v72.st_dev = 0x1300000000;
        boost::interprocess::interprocess_exception::interprocess_exception(v58, (uint64_t *)&v72.st_dev);
      }
      boost::interprocess::spin_wait::yield((boost::interprocess::spin_wait *)v67);
    }
    if (v72.st_size == 1)
    {
      v59 = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)&v72.st_dev = 0x1300000000;
      boost::interprocess::interprocess_exception::interprocess_exception(v59, (uint64_t *)&v72.st_dev);
    }
    if (v13)
      v29 = 0;
    else
      v29 = 2;
    boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)&v72, v65, v29);
    v30 = *(int **)&v72.st_dev;
    v31 = **(_DWORD **)&v72.st_dev;
    __dmb(0xBu);
    if (v31 != 2)
    {
      gettimeofday((timeval *)v67, 0);
      v32 = *(_QWORD *)v67;
      v70[0] = 0;
      v70[1] = 0;
      v71 = 0;
      v33 = -(uint64_t)*(int *)&v67[8];
      while (1)
      {
        v34 = *v30;
        __dmb(0xBu);
        if (v34 == 2)
          break;
        if (v34 == 3)
        {
          v60 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v67 = 0x1300000000;
          boost::interprocess::interprocess_exception::interprocess_exception(v60, (uint64_t *)v67);
        }
        gettimeofday((timeval *)v67, 0);
        if ((unint64_t)(v33 + 1000000 * (*(_QWORD *)v67 - v32) + *(int *)&v67[8]) > 0x11E1A300)
        {
          v61 = __cxa_allocate_exception(0x28uLL);
          *(_QWORD *)v67 = 0x1300000000;
          boost::interprocess::interprocess_exception::interprocess_exception(v61, (uint64_t *)v67);
        }
        boost::interprocess::spin_wait::yield((boost::interprocess::spin_wait *)v70);
      }
      v35 = *(char **)&v72.st_dev;
      st_ino = v72.st_ino;
      v37 = *(_QWORD *)&v72.st_uid;
      memset(&v72, 0, 29);
      if (v35)
      {
        if (*((_BYTE *)&v72.st_rdev + 4))
        {
          if (shmdt(v35))
            __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
        }
        else
        {
          munmap(&v35[-v37], v37 + st_ino);
        }
      }
      boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)v67, v65, v29);
      v38 = *(char **)&v72.st_dev;
      v39 = v72.st_ino;
      *(_QWORD *)&v72.st_dev = *(_QWORD *)v67;
      v40 = *(_QWORD *)&v72.st_uid;
      v41 = *(_OWORD *)&v67[8];
      *(_QWORD *)v67 = v38;
      *(_QWORD *)&v67[8] = v72.st_ino;
      *(_QWORD *)&v67[16] = *(_QWORD *)&v72.st_uid;
      *(_OWORD *)&v72.st_ino = v41;
      v42 = st_rdev;
      st_rdev = v72.st_rdev;
      v72.st_rdev = v42;
      v43 = v69;
      v44 = *((unsigned __int8 *)&v72.st_rdev + 4);
      v69 = *((_BYTE *)&v72.st_rdev + 4);
      *((_BYTE *)&v72.st_rdev + 4) = v43;
      if (v38)
      {
        if (v44)
        {
          if (shmdt(v38))
            __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
        }
        else
        {
          munmap(&v38[-v40], v40 + v39);
        }
      }
    }
    v45 = *(char **)&v72.st_dev;
    v46 = v72.st_ino;
    if (a8 && !*a7)
      *a7 = *(_QWORD *)&v72.st_dev + 8;
    v47 = *a1;
    v48 = (__darwin_ino64_t)a1[1];
    *a1 = v45;
    a1[1] = (char *)v46;
    *(_QWORD *)&v72.st_dev = v47;
    v72.st_ino = v48;
    v49 = a1[2];
    a1[2] = *(char **)&v72.st_uid;
    *(_QWORD *)&v72.st_uid = v49;
    v50 = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v72.st_rdev;
    v72.st_rdev = v50;
    v51 = *((unsigned __int8 *)a1 + 28);
    *((_BYTE *)a1 + 28) = *((_BYTE *)&v72.st_rdev + 4);
    *((_BYTE *)&v72.st_rdev + 4) = v51;
    if (v47)
    {
      if (v51)
      {
        if (shmdt(v47))
          __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
      }
      else
      {
        munmap((void *)(v47 - v49), (size_t)&v49[v48]);
      }
    }
  }
  else
  {
    if (a4 <= 0xB7)
    {
      v63 = __cxa_allocate_exception(0x28uLL);
      *(_QWORD *)&v72.st_dev = 0x1200000000;
      boost::interprocess::interprocess_exception::interprocess_exception(v63, (uint64_t *)&v72.st_dev);
    }
    *(_QWORD *)v65 = 0xFFFFFFFFLL;
    memset(&v72, 0, 20);
    v19 = open(*a3, 2562, *a6);
    v20 = v19;
    if (v19 < 0)
    {
      if (v19 == -1)
      {
        v21 = __error();
        v22 = 0;
        v23 = *v21;
        LODWORD(v66) = *v21;
        while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v22) != v23)
        {
          v22 += 8;
          if (v22 == 128)
          {
            v24 = 1;
            goto LABEL_16;
          }
        }
        v24 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v22 + 4);
LABEL_16:
        HIDWORD(v66) = v24;
        v64 = __cxa_allocate_exception(0x28uLL);
        boost::interprocess::interprocess_exception::interprocess_exception(v64, &v66);
      }
    }
    else
    {
      fchmod(v19, *a6);
    }
    v65[0] = v20;
    v65[1] = 2;
    boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::truncate_device<true>(v20, a4);
    boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>((uint64_t)&v72, v65, 2);
    v25 = *(unsigned int **)&v72.st_dev;
    do
    {
      if (__ldaxr(v25))
      {
        __clrex();
        __dmb(0xBu);
        *v25 = 3;
        v53 = __cxa_allocate_exception(0x28uLL);
        *(_QWORD *)v67 = 0x1300000000;
        boost::interprocess::interprocess_exception::interprocess_exception(v53, (uint64_t *)v67);
      }
    }
    while (__stlxr(1u, v25));
    if (a8 != 1 && !*a7)
    {
      if (((*(_QWORD *)&v72.st_dev + 8) & 7) != 0)
        __assert_rtn("create_impl", "managed_memory_impl.hpp", 180, "(0 == (std::size_t)addr % boost::move_detail::alignment_of<segment_manager>::value)");
      *a7 = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(*(_QWORD *)&v72.st_dev + 8, a4 - 8);
    }
    v27 = *a1;
    *a1 = *(char **)&v72.st_dev;
    *(_QWORD *)&v72.st_dev = v27;
    v28 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)&v72.st_ino;
    *(_OWORD *)&v72.st_ino = v28;
    LODWORD(v27) = *((_DWORD *)a1 + 6);
    *((_DWORD *)a1 + 6) = v72.st_rdev;
    v72.st_rdev = (int)v27;
    LOBYTE(v27) = *((_BYTE *)a1 + 28);
    *((_BYTE *)a1 + 28) = *((_BYTE *)&v72.st_rdev + 4);
    *((_BYTE *)&v72.st_rdev + 4) = (_BYTE)v27;
    __dmb(0xBu);
    *v25 = 2;
    if (*(_QWORD *)&v72.st_dev)
    {
      if (*((_BYTE *)&v72.st_rdev + 4))
      {
        if (shmdt(*(const void **)&v72.st_dev))
          __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
      }
      else
      {
        munmap((void *)(*(_QWORD *)&v72.st_dev - *(_QWORD *)&v72.st_uid), v72.st_ino + *(_QWORD *)&v72.st_uid);
      }
    }
  }
  result = v65[0];
  if (v65[0] != -1)
    return close(v65[0]);
  return result;
}

void sub_1A17187CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  __cxa_end_catch();
  boost::interprocess::ipcdetail::file_wrapper::~file_wrapper((boost::interprocess::ipcdetail::file_wrapper *)va);
  _Unwind_Resume(a1);
}

void sub_1A1718908(void *a1)
{
  _DWORD *v1;

  __cxa_begin_catch(a1);
  __dmb(0xBu);
  *v1 = 3;
  __cxa_rethrow();
}

void sub_1A1718920()
{
  __cxa_end_catch();
  JUMPOUT(0x1A17188A8);
}

void boost::interprocess::mapped_region::~mapped_region(boost::interprocess::mapped_region *this)
{
  char *v2;

  v2 = *(char **)this;
  if (v2)
  {
    if (*((_BYTE *)this + 28))
    {
      if (shmdt(v2))
        __assert_rtn("priv_close", "mapped_region.hpp", 836, "ret == 0");
    }
    else
    {
      munmap(&v2[-*((_QWORD *)this + 2)], *((_QWORD *)this + 1) + *((_QWORD *)this + 2));
      *(_QWORD *)this = 0;
    }
  }
}

int *boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(int *a1, int a2, char *a3, int a4, mode_t *a5)
{
  int *result;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  void *exception;
  uint64_t v17;

  if ((a4 & 0xFFFFFFFD) != 0)
  {
    v17 = 0x1100000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
    goto LABEL_22;
  }
  if (a2 == 2)
  {
    while (1)
    {
      v15 = open(a3, a4 | 0xA00, *a5);
      v9 = v15;
      if ((v15 & 0x80000000) == 0)
        break;
      result = __error();
      if (*result != 17)
        goto LABEL_5;
      result = (int *)open(a3, a4);
      v9 = (int)result;
      if ((result & 0x80000000) == 0)
        goto LABEL_16;
      result = __error();
      if (*result != 2)
        goto LABEL_5;
    }
    result = (int *)fchmod(v15, *a5);
LABEL_16:
    *a1 = v9;
  }
  else
  {
    if (a2 != 1)
    {
      v17 = 0x200000000;
      exception = __cxa_allocate_exception(0x28uLL);
      boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
      goto LABEL_22;
    }
    result = (int *)open(a3, a4);
    v9 = (int)result;
LABEL_5:
    *a1 = v9;
    if (v9 == -1)
    {
      v10 = __error();
      v11 = 0;
      v12 = *v10;
      LODWORD(v17) = *v10;
      while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v11) != v12)
      {
        v11 += 8;
        if (v11 == 128)
        {
          v13 = 1;
          goto LABEL_21;
        }
      }
      v13 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v11 + 4);
LABEL_21:
      HIDWORD(v17) = v13;
      exception = __cxa_allocate_exception(0x28uLL);
      boost::interprocess::interprocess_exception::interprocess_exception(exception, &v17);
LABEL_22:
    }
  }
  a1[1] = a4;
  return result;
}

void sub_1A1718B50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::file_wrapper::~file_wrapper(boost::interprocess::ipcdetail::file_wrapper *this)
{
  int v2;

  v2 = *(_DWORD *)this;
  if (v2 != -1)
  {
    close(v2);
    *(_DWORD *)this = -1;
  }
}

void boost::interprocess::spin_wait::yield(boost::interprocess::spin_wait *this)
{
  unsigned int v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  timespec v12;

  v2 = *((_DWORD *)this + 4);
  if (!v2)
  {
    if ((v3 & 1) == 0
    {
      v10 = sysconf(58);
      if ((unint64_t)v10 > 0xFFFFFFFE)
        v11 = -1;
      else
        v11 = v10;
      if (v10 < 1)
        v11 = 1;
      boost::interprocess::spin_wait::init_limits(void)::num_cores = v11;
    }
    v2 = 32 * (boost::interprocess::spin_wait::init_limits(void)::num_cores < 2);
    *((_DWORD *)this + 4) = v2;
  }
  if (v2 >= 8)
  {
    if (v2 == 32)
    {
      mach_timebase_info((mach_timebase_info_t)&v12);
      v4 = sysconf(3);
      v7 = 100;
      if (v4 >= 1)
        v7 = v4;
      LODWORD(v6) = HIDWORD(v12.tv_sec);
      LODWORD(v5) = v12.tv_sec;
      *((_QWORD *)this + 1) = (unint64_t)((double)(0x3B9AC9FF / v7 + 1) / ((double)v5 / (double)v6));
      *(_QWORD *)this = mach_absolute_time();
      goto LABEL_17;
    }
    if (*((_QWORD *)this + 1))
    {
      if (mach_absolute_time() - *(_QWORD *)this >= *((_QWORD *)this + 1))
      {
        *((_QWORD *)this + 1) = 0;
LABEL_13:
        v12.tv_sec = 0;
        v8 = sysconf(3);
        v9 = 100;
        if (v8 >= 1)
          v9 = v8;
        v12.tv_nsec = (0x3B9AC9FF / v9 + 1) >> 1;
        nanosleep(&v12, 0);
        goto LABEL_17;
      }
    }
    else if ((v2 & 1) == 0)
    {
      goto LABEL_13;
    }
    sched_yield();
  }
LABEL_17:
  ++*((_DWORD *)this + 4);
}

void sub_1A1718D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::mapped_region::mapped_region<boost::interprocess::ipcdetail::file_wrapper>(uint64_t a1, int *a2, int a3)
{
  int v6;
  unsigned __int8 v7;
  off_t st_size;
  void *v9;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  void *exception;
  int *v16;
  uint64_t v17;
  dev_t v18;
  int v19;
  stat v20;
  uint64_t v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 28) = 0;
  v6 = *a2;
  if ((v7 & 1) == 0
  {
    sysconf(29);
  }
  if (fstat(v6, &v20))
  {
    v11 = __error();
    v12 = 0;
    v13 = *v11;
    LODWORD(v21) = *v11;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v12) != v13)
    {
      v12 += 8;
      if (v12 == 128)
      {
        v14 = 1;
        goto LABEL_20;
      }
    }
    v14 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v12 + 4);
LABEL_20:
    HIDWORD(v21) = v14;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v21);
LABEL_23:
  }
  st_size = v20.st_size;
  if (v20.st_size < 0)
  {
    v21 = 0x1200000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v21);
    goto LABEL_23;
  }
  if (((0x1Du >> a3) & 1) == 0)
  {
    *(_QWORD *)&v20.st_dev = 0x1100000000;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v20);
    goto LABEL_23;
  }
  v9 = mmap(0, v20.st_size, dword_1A17B6F5C[a3], dword_1A17B6F48[a3], *a2, 0);
  if (v9 == (void *)-1)
  {
    v16 = __error();
    v17 = 0;
    v18 = *v16;
    v20.st_dev = *v16;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v17) != v18)
    {
      v17 += 8;
      if (v17 == 128)
      {
        v19 = 1;
        goto LABEL_22;
      }
    }
    v19 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v17 + 4);
LABEL_22:
    *(_DWORD *)&v20.st_mode = v19;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v20);
    goto LABEL_23;
  }
  *(_QWORD *)(a1 + 8) = st_size;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v9;
  return a1;
}

void sub_1A1718F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::truncate_device<true>(int a1, off_t a2)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  int v5;
  int v6;
  void *exception;
  _DWORD v8[2];

  result = ftruncate(a1, a2);
  if ((_DWORD)result)
  {
    v3 = __error();
    v4 = 0;
    v5 = *v3;
    v8[0] = *v3;
    while (*(_DWORD *)((char *)&boost::interprocess::ec_table + v4) != v5)
    {
      v4 += 8;
      if (v4 == 128)
      {
        v6 = 1;
        goto LABEL_7;
      }
    }
    v6 = *(_DWORD *)((char *)&boost::interprocess::ec_table + v4 + 4);
LABEL_7:
    v8[1] = v6;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, v8);
  }
  return result;
}

void sub_1A1718FFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t *v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  _QWORD v52[2];

  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(1uLL);
  *(_QWORD *)(a1 + 24) = 1;
  v3 = a1 + 8 - (_QWORD)&v46;
  v46 = v3;
  v4 = (char *)&v46 - (char *)&v47;
  if (v3 == 1)
    v4 = 0;
  v5 = v4 + v3;
  v47 = v5;
  v6 = (char *)&v47 - (char *)v52;
  if (v5 == 1)
    v6 = 0;
  v52[0] = v6 + v5;
  if (v6 + v5 == 1)
    v7 = 0;
  else
    v7 = (_QWORD *)((char *)v52 + v6 + v5);
  *v7 = *v7 & 2 | 1;
  v8 = v47;
  v9 = (char *)&v47 - (char *)&v48;
  if (v47 == 1)
    v9 = 0;
  v10 = (char *)&v47 - (char *)&v49;
  if (v47 == 1)
    v10 = 0;
  v11 = (char *)&v47 - (char *)&v50;
  if (v47 == 1)
    v11 = 0;
  v12 = (char *)&v47 - (char *)&v51;
  if (v47 == 1)
    v12 = 0;
  v13 = v12 + v47;
  v14 = v11 + v47;
  if (v13 == 1)
    v15 = 0;
  else
    v15 = (char *)&v52[-1] + v13;
  v16 = (char *)((char *)&v50 - (v15 + 8));
  if (v14 == 1)
    v16 = 0;
  *((_QWORD *)v15 + 1) = &v16[v14];
  v17 = v10 + v8;
  v18 = v9 + v8;
  if (v17 == 1)
    v19 = 0;
  else
    v19 = (char *)&v49 + v17;
  v20 = (char *)((char *)&v48 - (v19 + 16));
  if (v18 == 1)
    v20 = 0;
  *((_QWORD *)v19 + 2) = &v20[v18];
  v21 = (uint64_t *)((char *)&v46 + v46);
  if (v46 == 1)
    v21 = 0;
  *v21 &= ~2uLL;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 32) = xmmword_1A17B6C80;
  v22 = (a1 + 119) & 0xFFFFFFFFFFFFFFF8;
  v23 = v22 - a1 + 8;
  if ((unint64_t)(a2 - v23) <= 0x37)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 385, "segment_size >= (BlockCtrlBytes + EndCtrlBlockBytes)");
  v24 = (uint64_t *)(v22 + 8);
  *(int64x2_t *)(v22 + 24) = vdupq_n_s64(1uLL);
  v25 = v22 + 24;
  *(_QWORD *)(v22 + 40) = 1;
  v26 = ((unint64_t)(a2 - v23) >> 3) + 0x3FFFFFFFFFFFFFFELL;
  *(_QWORD *)(v22 + 16) = v26 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v26 & 0x3FFFFFFFFFFFFFFFuLL) <= 4)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 390, "first_big_block->m_size >= BlockCtrlUnits");
  v27 = 8 * v26;
  v28 = &v24[v26];
  v28[1] &= ~0x4000000000000000uLL;
  *v28 = *(_QWORD *)(v22 + 16) & 0x3FFFFFFFFFFFFFFFLL;
  v28[1] = v28[1] & 0xC000000000000000 | v26 & 0x1FFFFFFFFFFFFFFFLL;
  *v24 = v26 & 0x1FFFFFFFFFFFFFFFLL;
  v28[1] |= 0x8000000000000000;
  v29 = *(_QWORD *)(v22 + 16);
  *(_QWORD *)(v22 + 16) = v29 | 0x4000000000000000;
  if (v27 != 8 * v29)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 408, "priv_next_block(first_big_block) == end_block");
  if ((*((_BYTE *)v28 + 15) & 0x40) != 0)
    __assert_rtn("priv_prev_block", "rbtree_best_fit.hpp", 1138, "!ptr->m_prev_allocated");
  if (&v28[-*v28] != v24)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 409, "priv_prev_block(end_block) == first_big_block");
  if (((a1 + *(_QWORD *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8) != v22)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 410, "priv_first_block() == first_big_block");
  if (((*(_QWORD *)(a1 + 48) - v23) & 0xFFFFFFFFFFFFFFF8) - 16 != v27)
    __assert_rtn("priv_add_segment", "rbtree_best_fit.hpp", 411, "priv_end_block() == end_block");
  v30 = a1 + 8 - (_QWORD)&v44;
  v44 = v30;
  v45 = v25 - (_QWORD)&v45;
  v31 = v25 - (_QWORD)&v43;
  v43 = v31;
  v32 = (char *)&v44 - (char *)&v47;
  if (v30 == 1)
    v32 = 0;
  v33 = v32 + v30;
  v34 = (char *)&v43 - (char *)&v46;
  if (v31 == 1)
    v34 = 0;
  v35 = v34 + v31;
  v46 = v35;
  v47 = v33;
  LOBYTE(v52[0]) = 0;
  v52[1] = 1;
  v36 = (char *)&v47 - (char *)&v51;
  if (v33 == 1)
    v36 = 0;
  v51 = v36 + v33;
  v37 = (char *)&v46 - (char *)&v50;
  if (v35 == 1)
    v37 = 0;
  v50 = v37 + v35;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_equal_upper_bound_check<boost::intrusive::detail::key_nodeptr_comp<std::less<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>,boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,boost::move_detail::identity<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl>>>((char *)&v51, &v50, (uint64_t)v52);
  v38 = (char *)&v47 - (char *)&v49;
  if (v47 == 1)
    v38 = 0;
  v49 = v38 + v47;
  v39 = (char *)&v46 - (char *)&v48;
  if (v46 == 1)
    v39 = 0;
  v48 = v39 + v46;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit((char *)&v49, (char *)&v48, (uint64_t)v52);
  v40 = (char *)&v44 - (char *)v52;
  if (v44 == 1)
    v40 = 0;
  v52[0] = v40 + v44;
  v41 = (char *)&v43 - (char *)&v51;
  if (v43 == 1)
    v41 = 0;
  v51 = v41 + v43;
  boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)v52, (char *)&v51);
  ++*(_QWORD *)a1;
  boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2((int64x2_t *)(a1 + 64));
  *(_QWORD *)(a1 + 56) = 0;
  boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2((int64x2_t *)(a1 + 96));
  *(_QWORD *)(a1 + 88) = 0;
  if ((a1 & 7) != 0)
    __assert_rtn("segment_manager", "segment_manager.hpp", 442, "(0 == (std::size_t)this_addr % boost::move_detail::alignment_of<segment_manager>::value)");
  return a1;
}

void sub_1A17194D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v2);
  boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(uint64_t result)
{
  uint64_t v1;
  char *v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t *v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t *v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  char *v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t *v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char *v66;
  uint64_t v67;
  int64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  _BYTE *v74;
  int64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE v88[8];
  _BYTE v89[8];
  int64_t v90;

  v1 = result + 8 - (_QWORD)&v78;
  v78 = v1;
  if (v1 == 1)
    v2 = 0;
  else
    v2 = (char *)(result + 8);
  v3 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFFDLL;
  v4 = v2 - (char *)&v80;
  if (v3 == 1)
    v4 = 0;
  v5 = v4 + v3;
  v80 = v5;
  if (v5 != 1)
  {
    v6 = (char *)&v80 - (char *)&v79 + v5;
    v79 = v6;
    if (v6 != 1)
    {
      v7 = (char *)&v86 - (char *)&v83;
      v8 = (char *)&v79 - (char *)&v81;
      do
      {
        v9 = (char *)&v79 + v6;
        v10 = *(unint64_t *)((char *)&v79 + v6 + 8);
        v11 = (char *)&v79 + v6 + 8 - (char *)&v86;
        if (v10 == 1)
          v11 = 0;
        v12 = v11 + v10;
        if (v12 == 1)
        {
          v13 = *((_QWORD *)v9 + 2);
          v14 = v9 + 16 - (char *)&v90;
          if (v13 == 1)
            v14 = 0;
          v15 = v14 + v13;
          if (v15 == 1)
            v16 = 0;
          else
            v16 = (char *)&v90 - (char *)&v86;
          v86 = v16 + v15;
          v17 = v6 + v8;
          v81 = v6 + v8;
          if (v6 + v8 == 1)
            v18 = 0;
          else
            v18 = (char *)&v81 - (char *)&v90;
          v19 = v18 + v17;
          v90 = v19;
          if (v19 == 1)
            v20 = 0;
          else
            v20 = (int64_t *)((char *)&v90 + v19);
          *v20 = *v20 & 2 | 1;
          v21 = v81;
          if (v81 == 1)
            v22 = 0;
          else
            v22 = (char *)&v81 - v89;
          v23 = v22 + v81;
          if (v81 == 1)
            v24 = 0;
          else
            v24 = (char *)&v81 - v88;
          if (v23 == 1)
            v25 = 0;
          else
            v25 = &v89[v23];
          *((_QWORD *)v25 + 1) = 1;
          v26 = v24 + v21;
          if (v26 == 1)
            v27 = 0;
          else
            v27 = &v88[v26];
          *((_QWORD *)v27 + 2) = 1;
          if (v79 == 1)
            v28 = 0;
          else
            v28 = (char *)&v79 - (char *)&v87;
          v29 = v28 + v79;
          v87 = v28 + v79;
          if (v28 + v79 == 1)
            v30 = 0;
          else
            v30 = (char *)&v87 - (char *)&v90;
          v31 = v30 + v29;
          v90 = v31;
          if (v31 == 1)
            v32 = 0;
          else
            v32 = (int64_t *)((char *)&v90 + v31);
          *v32 = *v32 & 2 | 1;
          v33 = v87;
          if (v87 == 1)
            v34 = 0;
          else
            v34 = (char *)&v87 - v89;
          v35 = v34 + v87;
          if (v87 == 1)
            v36 = 0;
          else
            v36 = (char *)&v87 - v88;
          if (v35 == 1)
            v37 = 0;
          else
            v37 = &v89[v35];
          *((_QWORD *)v37 + 1) = 1;
          v38 = v36 + v33;
          if (v38 == 1)
            v39 = 0;
          else
            v39 = &v88[v38];
          *((_QWORD *)v39 + 2) = 1;
          if (v79 == 1)
            v40 = 0;
          else
            v40 = (char *)&v79 + v79;
          v90 = v40 - (char *)&v90;
          if (v40 - (char *)&v90 == 1)
            __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
          v12 = v86;
        }
        else
        {
          v41 = *(uint64_t *)((char *)&v86 + v12 + 16);
          v42 = (char *)&v86 + v12 + 16 - (char *)&v84;
          if (v41 == 1)
            v42 = 0;
          v43 = v42 + v41;
          v84 = v43;
          v85 = v6 + (char *)&v79 - (char *)&v85;
          if (v85 == 1)
            v9 = 0;
          v44 = (char *)((char *)&v84 - (v9 + 8));
          if (v43 == 1)
            v44 = 0;
          *((_QWORD *)v9 + 1) = &v44[v43];
          if (v6 == 1)
            v45 = 0;
          else
            v45 = (char *)&v79 - (char *)&v82;
          v46 = v45 + v6;
          v82 = v46;
          v83 = v12 + v7;
          if (v12 + v7 == 1)
            v47 = 0;
          else
            v47 = (char *)&v86 + v12;
          v48 = (char *)((char *)&v82 - (v47 + 16));
          if (v46 == 1)
            v48 = 0;
          *((_QWORD *)v47 + 2) = &v48[v46];
        }
        if (v12 == 1)
          v49 = 0;
        else
          v49 = (char *)&v86 - (char *)&v79;
        v6 = v49 + v12;
        v79 = v49 + v12;
      }
      while (v49 + v12 != 1);
      v1 = v78;
    }
    v50 = (char *)&v78 - (char *)&v85;
    if (v1 == 1)
      v50 = 0;
    v51 = v50 + v1;
    v85 = v51;
    v52 = (char *)&v85 - (char *)&v90;
    if (v51 == 1)
      v52 = 0;
    v90 = v52 + v51;
    if (v52 + v51 == 1)
      v53 = 0;
    else
      v53 = (int64_t *)((char *)&v90 + v52 + v51);
    *v53 = *v53 & 2 | 1;
    v54 = v85;
    v55 = (char *)&v85 - (char *)&v86;
    if (v85 == 1)
      v55 = 0;
    v56 = (char *)&v85 - (char *)&v87;
    if (v85 == 1)
      v56 = 0;
    v57 = (char *)&v85 - v88;
    if (v85 == 1)
      v57 = 0;
    v58 = (char *)&v85 - v89;
    if (v85 == 1)
      v58 = 0;
    v59 = v58 + v85;
    v60 = v57 + v85;
    if (v59 == 1)
      v61 = 0;
    else
      v61 = &v89[v59];
    v62 = (_BYTE *)(v88 - (v61 + 8));
    if (v60 == 1)
      v62 = 0;
    *((_QWORD *)v61 + 1) = &v62[v60];
    v63 = v56 + v54;
    v64 = v55 + v54;
    if (v63 == 1)
      v65 = 0;
    else
      v65 = &v88[v63 - 8];
    v66 = (char *)((char *)&v86 - (v65 + 16));
    if (v64 == 1)
      v66 = 0;
    *((_QWORD *)v65 + 2) = &v66[v64];
  }
  v67 = result + 8 - (_QWORD)&v77;
  v77 = v67;
  v68 = (char *)&v77 - (char *)&v90;
  if (v67 == 1)
    v68 = 0;
  v90 = v68 + v67;
  if (v68 + v67 == 1)
    v69 = 0;
  else
    v69 = (int64_t *)((char *)&v90 + v68 + v67);
  *v69 = *v69 & 2 | 1;
  v70 = v77;
  v71 = (char *)&v77 - v89;
  v72 = (char *)&v77 - v88;
  if (v77 == 1)
    v71 = 0;
  v73 = v71 + v77;
  v74 = &v89[v73];
  if (v77 == 1)
    v72 = 0;
  if (v73 == 1)
    v74 = 0;
  *((_QWORD *)v74 + 1) = 1;
  v75 = v72 + v70;
  if (v75 == 1)
    v76 = 0;
  else
    v76 = &v88[v75];
  *((_QWORD *)v76 + 2) = 1;
  return result;
}

int64x2_t *boost::intrusive::bstbase2<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,(boost::intrusive::algo_types)5,void>::bstbase2(int64x2_t *result)
{
  int64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _QWORD *v18;
  int64_t v19;
  int64_t v20;
  _BYTE v21[8];
  _BYTE v22[8];
  _BYTE v23[8];
  _BYTE v24[8];
  int64_t v25;

  *result = vdupq_n_s64(1uLL);
  result[1].i64[0] = 1;
  v19 = (char *)result - (char *)&v19;
  v1 = (char *)&v19 - (char *)&v20;
  if ((char *)result - (char *)&v19 == 1)
    v1 = 0;
  v2 = v1 + (char *)result - (char *)&v19;
  v20 = v2;
  v3 = (char *)&v20 - (char *)&v25;
  if (v2 == 1)
    v3 = 0;
  v25 = v3 + v2;
  if (v3 + v2 == 1)
    v4 = 0;
  else
    v4 = (int64_t *)((char *)&v25 + v3 + v2);
  *v4 = *v4 & 2 | 1;
  v5 = v20;
  v6 = (char *)&v20 - v21;
  if (v20 == 1)
    v6 = 0;
  v7 = (char *)&v20 - v22;
  if (v20 == 1)
    v7 = 0;
  v8 = (char *)&v20 - v23;
  if (v20 == 1)
    v8 = 0;
  v9 = (char *)&v20 - v24;
  if (v20 == 1)
    v9 = 0;
  v10 = v9 + v20;
  v11 = v8 + v20;
  if (v10 == 1)
    v12 = 0;
  else
    v12 = &v24[v10];
  v13 = (_BYTE *)(v23 - (v12 + 8));
  if (v11 == 1)
    v13 = 0;
  *((_QWORD *)v12 + 1) = &v13[v11];
  v14 = v7 + v5;
  v15 = v6 + v5;
  if (v14 == 1)
    v16 = 0;
  else
    v16 = &v22[v14];
  v17 = (_BYTE *)(v21 - (v16 + 16));
  if (v15 == 1)
    v17 = 0;
  *((_QWORD *)v16 + 2) = &v17[v15];
  v18 = (int64_t *)((char *)&v19 + v19);
  if (v19 == 1)
    v18 = 0;
  *v18 &= ~2uLL;
  return result;
}

uint64_t boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_heap_memory(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (uint64_t)operator new(0x400uLL);
  v3 = 0;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v2 + 1024;
  do
  {
    *(_OWORD *)(v2 + v3) = 0uLL;
    v3 += 16;
  }
  while (v3 != 1024);
  *(_QWORD *)(a1 + 16) = v2 + 1024;
  if ((v2 & 7) != 0)
    __assert_rtn("create_impl", "managed_memory_impl.hpp", 180, "(0 == (std::size_t)addr % boost::move_detail::alignment_of<segment_manager>::value)");
  *(_QWORD *)a1 = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::segment_manager(v2, 1024);
  return a1;
}

void sub_1A1719B30()
{
  __break(1u);
}

void sub_1A1719B7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(uint64_t a1, char *__s, _QWORD *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  size_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  char *v77;
  uint64_t v78;
  _BYTE *v79;
  int v81;
  const char *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if (*a3 == 1)
    v5 = 0;
  else
    v5 = (char *)a3 + *a3;
  if (v5)
    v6 = (uint64_t)&v5[-a1];
  else
    v6 = 1;
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = 1;
  v7 = a1 + 9;
  v8 = a1 + 9 - (_QWORD)&v94;
  v9 = (char *)&v94 - (char *)&v92;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  v11 = (char *)&v92 - (char *)&v93;
  if (v10 == 1)
    v11 = 0;
  v12 = v11 + v10;
  if (v12 == 1)
    v13 = 0;
  else
    v13 = (char *)&v93 + v12;
  if (v13)
    v14 = v13 - (char *)&v94;
  else
    v14 = 1;
  v15 = (char *)&v94 + v14;
  if (v14 == 1)
    v15 = 0;
  *v15 = 0;
  v16 = strlen(__s);
  if (*(_QWORD *)a1 == 1)
    v18 = 0;
  else
    v18 = *(_QWORD *)a1 + a1;
  v19 = *(_QWORD *)(v18 + 48);
  if (v19 - 1 < v16)
    boost::container::throw_length_error((boost::container *)"basic_string::reserve max_size() exceeded", v17);
  v20 = v16;
  v21 = *(unsigned __int8 *)(a1 + 8);
  if ((v21 & 1) != 0)
  {
    if (v16 < 0x17)
      goto LABEL_112;
    v26 = v21 >> 1;
    if (v21 >> 1 <= v16)
      v26 = v16;
    v24 = v26 + 1;
    v22 = 23;
    v25 = 46;
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    if (v22 - 1 >= v16)
      goto LABEL_112;
    v23 = *(_QWORD *)(a1 + 8) >> 1;
    if (v23 <= v16)
      v23 = v16;
    v24 = v23 + 1;
    if (v22 < 0)
      v25 = -1;
    else
      v25 = 2 * v22;
  }
  v27 = v24 + v22;
  if (v25 < v19)
    v19 = v25;
  if (v27 <= v19)
    v28 = v19;
  else
    v28 = v27;
  v90 = 1;
  v91 = v28;
  boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v89, (_QWORD *)a1, 1, v24, &v91, &v90);
  v29 = *(unsigned __int8 *)(a1 + 8);
  if ((v29 & 1) != 0)
  {
    v32 = v7 - (_QWORD)&v88;
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 24);
    v31 = a1 + 24 - (_QWORD)&v88;
    if (v30 == 1)
      v31 = 0;
    v32 = v31 + v30;
  }
  v33 = (char *)&v88 - (char *)&v87;
  v34 = (char *)&v88 - (char *)&v85;
  if (v32 == 1)
    v33 = 0;
  v35 = v33 + v32;
  v87 = v33 + v32;
  v88 = v32;
  if (v32 == 1)
    v34 = 0;
  v36 = v34 + v32;
  if ((v29 & 1) == 0)
    v29 = *(_QWORD *)(a1 + 8);
  v37 = (v29 >> 1) + v36;
  v38 = (char *)&v85 - (char *)&v86;
  if (v37 == 1)
    v38 = 0;
  v39 = v38 + v37;
  v85 = v37;
  v86 = v38 + v37;
  v40 = v89;
  v41 = (char *)&v89 - (char *)&v84;
  if (v89 == 1)
    v41 = 0;
  v42 = v41 + v89;
  v84 = v41 + v89;
  v43 = (char *)&v84 - (char *)&v93;
  if (v41 + v89 == 1)
    v43 = 0;
  v93 = v43 + v42;
  v44 = (char *)&v87 + v35;
  if (v35 == 1)
    v44 = 0;
  v45 = (char *)&v86 + v39;
  if (v39 == 1)
    v45 = 0;
  if (v44 == v45)
  {
    v46 = 0;
  }
  else
  {
    v46 = 0;
    do
    {
      if (v42 == 1)
        v47 = 0;
      else
        v47 = (char *)&v84 - (char *)&v92;
      v48 = v47 + v42;
      v92 = v48;
      if (v48 == 1)
        v49 = 0;
      else
        v49 = (char *)&v92 + v48;
      if (v49)
        v50 = v49 - (char *)&v94;
      else
        v50 = 1;
      if (v50 == 1)
        v51 = 0;
      else
        v51 = (char *)&v94 + v50;
      *v51 = *v44;
      v42 = ++v84;
      v52 = v87++;
      ++v46;
      if (v52)
        v44 = (char *)&v87 + v87;
      else
        v44 = 0;
      if (v86 == 1)
        v53 = 0;
      else
        v53 = (char *)&v86 + v86;
    }
    while (v44 != v53);
    v40 = v89;
  }
  v54 = (char *)&v89 - (char *)&v83;
  if (v40 == 1)
    v54 = 0;
  v55 = v40 + v46 + v54;
  v83 = v55;
  v56 = (char *)&v83 - (char *)&v92;
  if (v55 == 1)
    v56 = 0;
  v57 = v56 + v55;
  v92 = v57;
  v58 = (char *)&v92 - (char *)&v93;
  if (v57 == 1)
    v58 = 0;
  v59 = v58 + v57;
  if (v59 == 1)
    v60 = 0;
  else
    v60 = (char *)&v93 + v59;
  if (v60)
    v61 = v60 - (char *)&v94;
  else
    v61 = 1;
  if (v61 == 1)
    v62 = 0;
  else
    v62 = (char *)&v94 + v61;
  *v62 = 0;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v65 = v7 - (_QWORD)&v94;
    v66 = 23;
  }
  else
  {
    v63 = *(_QWORD *)(a1 + 24);
    v64 = a1 + 24 - (_QWORD)&v94;
    if (v63 == 1)
      v64 = 0;
    v65 = v64 + v63;
    v66 = *(_QWORD *)(a1 + 16);
  }
  v94 = v65;
  boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v94, v66);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    *(_QWORD *)(a1 + 8) &= ~1uLL;
  v67 = (char *)&v89 - (char *)&v94;
  if (v89 == 1)
    v67 = 0;
  v94 = v67 + v89;
  v68 = (char *)&v94 - a1 - 24;
  if (v67 + v89 == 1)
    v68 = 0;
  *(_QWORD *)(a1 + 24) = &v68[v67 + v89];
  if (v46 < 0)
    goto LABEL_141;
  v69 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v69 & 1 | (2 * v46);
  LOBYTE(v21) = v69 & 1 | (2 * v46);
  if ((v69 & 1) == 0)
    *(_QWORD *)(a1 + 16) = v91;
LABEL_112:
  if ((v21 & 1) != 0)
  {
    v72 = v7 - (_QWORD)&v94;
  }
  else
  {
    v70 = *(_QWORD *)(a1 + 24);
    v71 = a1 + 24 - (_QWORD)&v94;
    if (v70 == 1)
      v71 = 0;
    v72 = v71 + v70;
  }
  if (v72 == 1)
    v73 = 0;
  else
    v73 = (char *)&v94 + v72;
  if (v20)
    memmove(v73, __s, v20);
  v74 = &v73[v20] - (char *)&v92;
  if (!v73)
    v74 = 1;
  v92 = v74;
  v75 = (char *)&v92 - (char *)&v93;
  if (v74 == 1)
    v75 = 0;
  v76 = v75 + v74;
  if (v76 == 1)
    v77 = 0;
  else
    v77 = (char *)&v93 + v76;
  if (v77)
    v78 = v77 - (char *)&v94;
  else
    v78 = 1;
  if (v78 == 1)
    v79 = 0;
  else
    v79 = (char *)&v94 + v78;
  *v79 = 0;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (v20 <= 0x7F)
    {
      *(_BYTE *)(a1 + 8) = (2 * v20) | 1;
      return a1;
    }
    v81 = 468;
    v82 = "priv_short_size";
LABEL_143:
    __assert_rtn(v82, "string.hpp", v81, "sz <= mask");
  }
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_141:
    v81 = 476;
    v82 = "priv_long_size";
    goto LABEL_143;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 1 | (2 * v20);
  return a1;
}

void sub_1A171A0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string_base(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory(uint64_t *a1)
{
  void *v2;

  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_close(a1);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = (uint64_t)v2;
    operator delete(v2);
  }
  *a1 = 0;
  return a1;
}

void boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_close(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 56;
    boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v2 + 88);
    boost::intrusive::bstbase<boost::intrusive::bhtraits<boost::interprocess::ipcdetail::intrusive_value_type_impl<boost::intrusive::generic_hook<(boost::intrusive::algo_types)5,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,boost::intrusive::dft_tag,(boost::intrusive::link_mode_type)1,(boost::intrusive::base_hook_type)3>,char,unsigned long>,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)1,boost::intrusive::dft_tag,3u>,void,void,true,unsigned long,(boost::intrusive::algo_types)5,void>::~bstbase(v3);
    *a1 = 0;
  }
  v4 = (void *)a1[1];
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  if (v4)
    operator delete(v4);
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[8];
  _BYTE v38[8];
  uint64_t v39;

  v4 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_45;
  v6 = (*(_QWORD *)(a2 + 24) - 1) & a3;
  result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v39, a2, v6);
  v7 = (char *)&v39 + v39;
  if (v39 == 1)
    v7 = 0;
  v8 = *(_QWORD *)v7;
  v9 = v7 - v38;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  if (v10 == 1)
    goto LABEL_45;
  v11 = &v38[v10];
  if (v10 + v38 - v37 == 1)
    v11 = 0;
  v12 = *((_QWORD *)v11 + 10);
  v13 = v11 + 80 - (_BYTE *)&v36;
  if (v12 == 1)
    v13 = 0;
  v14 = v13 + v12;
  v36 = v13 + v12;
  if (v13 + v12 == 1)
  {
LABEL_45:
    v31 = 1;
  }
  else
  {
    v15 = (char *)&v36 - (char *)&v35;
    while (1)
    {
      v35 = v14 + v15;
      v16 = v14 + v15 == 1 ? 0 : &v37[v14 - 8];
      result = (uint64_t *)std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](a4, (uint64_t)v16);
      if ((_DWORD)result)
        break;
      v17 = (char *)&v36 - (char *)&v34;
      if (v14 == 1)
        v17 = 0;
      v34 = v17 + v14;
      if (v17 + v14 == 1)
        v18 = 0;
      else
        v18 = (char *)&v34 + v17 + v14;
      if ((*((_QWORD *)v18 + 11) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        v19 = (char *)&v36 - (char *)&v33;
        if (v14 == 1)
          v19 = 0;
        v20 = v19 + v14;
        v33 = v20;
        v21 = v20 == 1 ? 0 : (char *)&v33 - v37;
        v22 = v21 + v20;
        while (1)
        {
          if (v22 == 1)
            v23 = 0;
          else
            v23 = v37 - v38;
          v24 = v23 + v22;
          if (v24 == 1)
            v25 = 0;
          else
            v25 = &v38[v24];
          v26 = *((_QWORD *)v25 + 10);
          v27 = v25 + 80 - (_BYTE *)&v39;
          if (v26 == 1)
            v27 = 0;
          v28 = v27 + v26;
          v29 = v28 == 1 ? 0 : (char *)&v39 - v37;
          v22 = v29 + v28;
          if (v22 == 1)
            break;
          if ((*(_QWORD *)&v37[v22 + 88] & 0x8000000000000000) == 0)
          {
            v30 = v37 - (_BYTE *)&v36;
            goto LABEL_44;
          }
        }
        v30 = 0;
LABEL_44:
        v14 = v30 + v22;
        v36 = v30 + v22;
        if (v30 + v22 != 1)
          continue;
      }
      goto LABEL_45;
    }
    v32 = (_BYTE *)((char *)&v36 - (char *)v4);
    if (v14 == 1)
      v32 = 0;
    v31 = (uint64_t)&v32[v14];
  }
  *v4 = v31;
  return result;
}

BOOL std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v15[8];

  v2 = *(unsigned __int8 *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = v2 >> 1;
  else
    v3 = *(_QWORD *)(a1 + 8) >> 1;
  v4 = *(unsigned __int8 *)(a2 + 8);
  v5 = v4 >> 1;
  if ((v4 & 1) == 0)
    v5 = *(_QWORD *)(a2 + 8) >> 1;
  if (v3 != v5)
    return 0;
  if ((v2 & 1) != 0)
  {
    v8 = a1 - (_QWORD)v15 + 9;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = a1 + 24 - (_QWORD)v15;
    if (v6 == 1)
      v7 = 0;
    v8 = v7 + v6;
  }
  if (v8 == 1)
    v10 = 0;
  else
    v10 = &v15[v8];
  if ((v4 & 1) != 0)
  {
    v13 = a2 - (_QWORD)v15 + 9;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24);
    v12 = a2 + 24 - (_QWORD)v15;
    if (v11 == 1)
      v12 = 0;
    v13 = v12 + v11;
  }
  if (v13 == 1)
    v14 = 0;
  else
    v14 = &v15[v13];
  return memcmp(v10, v14, v3) == 0;
}

unint64_t boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t result;
  unint64_t i;
  uint64_t v10;
  _BYTE v11[8];

  v1 = *(unsigned __int8 *)(a1 + 8);
  if ((v1 & 1) != 0)
  {
    v7 = (char *)(a1 + 9);
    if (a1 + 9 - (_QWORD)v11 == 1)
      v7 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 24);
    v2 = a1 + 24;
    v3 = v4;
    v5 = v2 - (_QWORD)v11;
    if (v4 == 1)
      v5 = 0;
    v6 = v5 + v3;
    if (v6 == 1)
      v7 = 0;
    else
      v7 = &v11[v6];
    v1 = *(_QWORD *)(v2 - 16);
  }
  result = 0;
  for (i = v1 >> 1; i; --i)
  {
    v10 = *v7++;
    result ^= (result << 6) + (result >> 2) + 2654435769u + v10;
  }
  return result;
}

uint64_t boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string_base(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 24);
    v3 = a1 + 24 - (_QWORD)&v5;
    if (v2 == 1)
      v3 = 0;
    v5 = v3 + v2;
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v5, *(_QWORD *)(a1 + 16));
  }
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_1E45A1458;
  exception[1] = this;
}

char *boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(char *a1, _QWORD *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  char *result;
  uint64_t v14;
  uint64_t v15;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v17;
  uint64_t v18;
  unint64_t v19;

  if (*a6 == 1)
    v7 = 0;
  else
    v7 = (uint64_t)a6 + *a6;
  if (*a2 == 1)
    v8 = 0;
  else
    v8 = (uint64_t)a2 + *a2;
  v18 = v7;
  v9 = *(_QWORD *)(v8 + 48);
  v10 = v9 < a4 || *a5 > v9;
  if (v10
    || (v19 = *a5,
        result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v8, a3 | 0x10u, a4, &v19, &v18, 1uLL), *a5 = v19, !result))
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v17 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v17 = &off_1E45A10D8;
  }
  v14 = v18;
  *(_QWORD *)a1 = result - a1;
  if (v14)
    v15 = v14 - (_QWORD)a6;
  else
    v15 = 1;
  *a6 = v15;
  return result;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t v10;
  char *result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  BOOL v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  int64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v10 = *a4;
  if ((a2 & 8) != 0)
  {
    v12 = *a5;
    if (!*a5)
      return 0;
    v13 = v12 - 16;
    v14 = *(_QWORD *)(v12 - 8);
    v15 = (a1 + *(_QWORD *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8;
    if (v15 + ((*(_QWORD *)(a1 + 48) + a1 - v15 - 8) & 0xFFFFFFFFFFFFFFF8) + 8 != v12
      && ((*(_QWORD *)(v13 + 8 * v14 + 8) & 0x4000000000000000) != 0) != v14 >> 63)
    {
      __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
    }
    if ((v14 & 0x8000000000000000) == 0)
      __assert_rtn("try_shrink", "mem_algo_common.hpp", 378, "memory_algo->priv_is_allocated_block(block)");
    if ((v12 & 7) != 0)
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
    result = 0;
    v16 = (v14 & 0x3FFFFFFFFFFFFFFFLL) - 2;
    *a4 = 8 * v16 + 8;
    v17 = (a3 - 8) >> 3;
    if (v17 >= (v10 - 1) >> 3)
    {
      v18 = (v10 - 1) >> 3;
      if (v16 >= v18)
      {
        if (v16 != v18)
        {
          result = 0;
          if (v18 <= 3)
            v18 = 3;
          if (v17 < v18 || v16 - v18 < 5)
            return result;
          *a4 = 8 * v18 + 8;
          v19 = (v18 & 0x1FFFFFFFFFFFFFFFLL) + 2;
          *(_QWORD *)(v12 - 8) = v19 | *(_QWORD *)(v12 - 8) & 0xC000000000000000;
          if (8 * v18 <= 0x17)
            __assert_rtn("shrink", "mem_algo_common.hpp", 442, "block->m_size >= BlockCtrlUnits");
          v20 = v13 + 8 * v19;
          v21 = (v14 - v19) & 0x3FFFFFFFFFFFFFFFLL;
          *(_QWORD *)(v20 + 8) = *(_QWORD *)(v20 + 8) & 0xC000000000000000 | v21;
          if (v21 <= 4)
            __assert_rtn("shrink", "mem_algo_common.hpp", 450, "new_block->m_size >= BlockCtrlUnits");
          v22 = *(_QWORD *)(v12 - 8);
          *(_QWORD *)(v12 - 8) = v22 | 0x8000000000000000;
          *(_QWORD *)(v13 + 8 * v22 + 8) |= 0x4000000000000000uLL;
          v23 = *(_QWORD *)(v20 + 8);
          *(_QWORD *)(v20 + 8) = v23 | 0x8000000000000000;
          *(_QWORD *)(v20 + 8 * v23 + 8) |= 0x4000000000000000uLL;
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate((char *)a1, v20 + 16);
        }
        return (char *)*a5;
      }
    }
  }
  else
  {
    *a4 = 0;
    if (v10 < a3)
    {
LABEL_3:
      result = 0;
      *a5 = 0;
      return result;
    }
    v26 = 8;
    if (v10 <= 8)
      v27 = 8;
    else
      v27 = v10;
    v28 = (unint64_t)(v27 - 1) >> 3;
    if (v28 <= 3)
      v29 = 3;
    else
      v29 = v28;
    if (a3 > 8)
      v26 = a3;
    v30 = (unint64_t)(v26 - 1) >> 3;
    if (v30 <= 3)
      v31 = 3;
    else
      v31 = v30;
    *a4 = v10;
    v32 = a2 & 6;
    if ((a2 & 6) == 0
      || (v33 = *a5) == 0
      || (result = (char *)boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(a1, a2, a3, a4, v33, 1, a6)) == 0)
    {
      if ((a2 & 1) == 0)
        goto LABEL_35;
      v35 = v29 + 2;
      v36 = a1 + 8;
      v37 = (char *)&v93 - (char *)&v94;
      if (a1 - (_QWORD)&v92 == 1)
        v37 = 0;
      v38 = v37 + a1 - (_QWORD)&v92;
      v93 = a1 - (_QWORD)&v92;
      v94 = v38;
      v39 = v38 == 1;
      if (v38 == 1)
        v40 = 0;
      else
        v40 = (char *)&v94 + v38;
      v41 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFDLL;
      v42 = (char *)&v94 - (char *)&v95 + v38;
      if (v39)
        v43 = 1;
      else
        v43 = v42;
      v44 = v40 - (char *)&v96;
      if (v41 == 1)
        v44 = 0;
      v45 = v44 + v41;
      v95 = v43;
      v96 = v44 + v41;
      if (v44 + v41 != 1)
      {
        v46 = (char *)&v96 - (char *)&v95;
        do
        {
          v47 = (char *)&v96 + v45;
          v97 = (char *)&v96 + v45 - (char *)&v97 - 16;
          if ((char *)&v96 + v45 - (char *)&v97 == 17)
            goto LABEL_125;
          if ((*((_QWORD *)v47 - 1) & 0x3FFFFFFFFFFFFFFFuLL) >= v35)
          {
            v43 = v46 + v45;
            v95 = v46 + v45;
            if (v45 == 1)
              v51 = 0;
            else
              v51 = (char *)&v96 + v45;
            v52 = *((_QWORD *)v51 + 1);
            v53 = v51 + 8 - (char *)&v97;
            if (v52 == 1)
              v53 = 0;
            v50 = v53 + v52;
          }
          else
          {
            v48 = *((_QWORD *)v47 + 2);
            v49 = v47 + 16 - (char *)&v97;
            if (v48 == 1)
              v49 = 0;
            v50 = v49 + v48;
          }
          if (v50 == 1)
            v54 = 0;
          else
            v54 = (char *)&v97 - (char *)&v96;
          v45 = v54 + v50;
          v96 = v45;
        }
        while (v45 != 1);
      }
      v55 = (char *)&v95 - (char *)&v97;
      if (v43 == 1)
        v55 = 0;
      v56 = v55 + v43;
      v57 = (char *)&v97 - (char *)&v92;
      if (v56 == 1)
        v57 = 0;
      v58 = v57 + v56;
      v92 = v58;
      v59 = (char *)&v95 - (char *)&v96;
      if (v36 - (_QWORD)&v95 == 1)
        v59 = 0;
      v60 = v59 + v36 - (_QWORD)&v95;
      if (v60 == 1)
        v61 = 1;
      else
        v61 = (char *)&v96 - (char *)&v97 + v60;
      v62 = (char *)&v97 - (char *)&v94;
      if (v61 == 1)
        v62 = 0;
      v63 = v62 + v61;
      if (v58 == 1)
        v64 = 0;
      else
        v64 = (char *)&v92 - (char *)&v97;
      v65 = v64 + v58;
      v66 = (char *)&v94 - (char *)&v96;
      if (v63 == 1)
        v66 = 0;
      v67 = v66 + v63;
      v68 = (char *)&v97 + v65;
      if (v65 == 1)
        v68 = 0;
      if (v67 == 1)
        v69 = 0;
      else
        v69 = (char *)&v96 + v67;
      if (v68 == v69)
      {
        v73 = v36 - (_QWORD)&v95;
        v74 = (char *)&v95 - (char *)&v96;
        if (v73 == 1)
          v74 = 0;
        v75 = v74 + v73;
        if (v75 == 1)
          v76 = 0;
        else
          v76 = (char *)&v96 + v75;
        v77 = *((_QWORD *)v76 + 1);
        v78 = v76 + 8 - (char *)&v97;
        if (v77 == 1)
          v78 = 0;
        v79 = v78 + v77;
        v80 = (char *)&v97 - (char *)&v94;
        if (v79 == 1)
          v80 = 0;
        v81 = v80 + v79;
        v94 = v81;
        if (v58 == 1)
          v82 = 0;
        else
          v82 = (char *)&v92 - (char *)&v97;
        v83 = v82 + v58;
        v84 = (char *)&v94 - (char *)&v96;
        if (v81 == 1)
          v84 = 0;
        v85 = v84 + v81;
        v86 = (char *)&v97 + v83;
        if (v83 == 1)
          v86 = 0;
        if (v85 == 1)
          v87 = 0;
        else
          v87 = (char *)&v96 + v85;
        if (v86 == v87)
          goto LABEL_35;
        boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v97, (char *)&v92);
        v88 = (char *)&v97 - (char *)&v92;
        if (v97 == 1)
          v88 = 0;
        v92 = v88 + v97;
        if (v88 + v97 == 1)
          v89 = 0;
        else
          v89 = (char *)&v92 + v88 + v97;
        v96 = v89 - (char *)&v96 - 16;
        if (v89 - (char *)&v96 == 17)
LABEL_125:
          __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
        if ((*((_QWORD *)v89 - 1) & 0x3FFFFFFFFFFFFFFFuLL) < v31 + 2)
        {
LABEL_35:
          if (!v32)
            goto LABEL_3;
          v34 = *a5;
          if (!*a5)
            goto LABEL_3;
          *a4 = v10;
          return (char *)boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(a1, a2, a3, a4, v34, 0, a6);
        }
        *a5 = 0;
        boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(&v97, &v92);
        if (v97 == 1)
          v90 = 0;
        else
          v90 = (char *)&v97 + v97;
        v91 = *((_QWORD *)v90 + 1) & 0x3FFFFFFFFFFFFFFFLL;
        v71 = boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator*(&v92);
        v72 = a1;
        v35 = v91;
      }
      else
      {
        *a5 = 0;
        v70 = (char *)&v92 + v58;
        if (v58 == 1)
          v70 = 0;
        v71 = v70 - 16;
        v97 = v70 - 16 - (char *)&v97;
        if (v97 == 1)
          goto LABEL_125;
        v72 = a1;
      }
      return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_check_and_allocate(v72, v35, (uint64_t)v71, a4);
    }
  }
  return result;
}

boost::interprocess::interprocess_exception *boost::interprocess::interprocess_exception::interprocess_exception(boost::interprocess::interprocess_exception *this, const char *a2)
{
  *(_QWORD *)this = &off_1E45A10B0;
  *((_QWORD *)this + 1) = 0x200000000;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  MEMORY[0x1A1B0C8D8]((char *)this + 16, a2);
  return this;
}

void sub_1A171ACEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1A171ACDCLL);
}

void boost::interprocess::bad_alloc::~bad_alloc(std::exception *this)
{
  boost::interprocess::interprocess_exception::~interprocess_exception(this);
  JUMPOUT(0x1A1B0C908);
}

const char *boost::interprocess::bad_alloc::what(boost::interprocess::bad_alloc *this)
{
  return "boost::interprocess::bad_alloc";
}

uint64_t boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand_both_sides(uint64_t a1, char a2, unint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t a7)
{
  uint64_t v9;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  char *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  char v71[24];
  unint64_t v72;

  if ((a5 & 7) != 0)
    goto LABEL_102;
  v9 = a5;
  v14 = *a4;
  if ((a2 & 2) != 0)
  {
    if ((boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(a1, a5, a3, a4) & 1) != 0)return v9;
  }
  else
  {
    v15 = 8 * *(_QWORD *)(a5 - 8) - 8;
    *a4 = v15;
    if (v15 >= v14 || v15 >= a3)
      return v9;
  }
  if (a3 % a7)
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 808, "0 == (min_size % backwards_multiple)");
  if (v14 % a7)
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 809, "0 == (preferred_size % backwards_multiple)");
  if ((a2 & 4) == 0)
    return 0;
  v17 = (uint64_t *)(v9 - 16);
  if (((v9 - 16) & 7) != 0)
    goto LABEL_102;
  if ((*(_BYTE *)(v9 - 1) & 0x40) != 0)
    return 0;
  v18 = (a1 + *(_QWORD *)(a1 + 32) + 55) & 0xFFFFFFFFFFFFFFF8;
  v19 = *v17;
  v20 = (uint64_t)&v17[-*v17];
  v21 = *(_QWORD *)(v20 + 8);
  if ((uint64_t *)(v18 + 8) != v17)
  {
    if ((v21 & 0x8000000000000000) != 0)
      __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1218, "!prev->m_allocated");
    if ((v21 & 0x3FFFFFFFFFFFFFFFLL) != v19)
      __assert_rtn("priv_is_prev_allocated", "rbtree_best_fit.hpp", 1219, "prev->m_size == block->m_prev_size");
  }
  if (((*(_QWORD *)(a1 + 48) - (v18 - a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + v18 + 8 - 16 != v20
    && ((*(_QWORD *)(v20 + 8 * v21 + 8) & 0x4000000000000000) != 0) != v21 >> 63)
  {
    __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
  }
  if ((v21 & 0x8000000000000000) != 0)
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 827, "!priv_is_allocated_block(prev_block)");
  v22 = v21 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v21 & 0x3FFFFFFFFFFFFFFFLL) != v19)
    __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 830, "prev_block->m_size == reuse->m_prev_size");
  if ((v20 & 7) != 0)
    goto LABEL_102;
  v23 = *a4;
  if (a6)
    v24 = v14;
  else
    v24 = a3;
  v25 = 8;
  if (a7 <= 8)
    v26 = 8;
  else
    v26 = a7;
  if (a7 < 8)
    v25 = a7;
  if ((a7 & (a7 - 1)) == 0)
  {
    if (((a7 - 1) & v24) == 0)
    {
      v27 = v24 - (v23 & -(uint64_t)a7);
      if (v27 % a7)
        __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 161, "(needs_backwards % backwards_multiple) == 0");
      v28 = ((v27 - 1) & -(uint64_t)v26) + v26;
      goto LABEL_55;
    }
    return 0;
  }
  if ((a7 & 7) != 0)
  {
    if ((a7 & 3) != 0)
    {
      if ((a7 & 1) != 0)
      {
        v34 = v25;
        v35 = v26;
        do
        {
          v36 = v35;
          v35 = v34;
          v34 = v36 % v34;
        }
        while (v34);
        v37 = v23 % a7 - v23 + v24;
        if (v37 % a7)
          __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 220, "(needs_backwards % backwards_multiple) == 0");
        v26 = v26 / v35 * v25;
        v28 = v26 + v26 * ((v37 - 1) / v26);
      }
      else
      {
        v26 = 4 * a7;
        v28 = v23 % a7 - v23 + v24;
        v29 = (v28 >> 1) & 3;
        if (v29)
        {
          v30 = v28 + (4 - v29) * a7;
          v31 = v28 + v29 * a7;
          if ((a7 & 4) != 0)
            v28 = v31;
          else
            v28 = v30;
        }
        if (v28 % v26)
          __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 207, "(needs_backwards_lcmed % lcm_val) == 0");
      }
    }
    else
    {
      v26 = 2 * a7;
      v32 = v23 % a7 - v23 + v24;
      if ((v32 & 7) != 0)
        v33 = a7;
      else
        v33 = 0;
      v28 = v33 + v32;
      if ((v33 + v32) % v26)
        __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 186, "(needs_backwards_lcmed % lcm_val) == 0");
    }
  }
  else
  {
    v28 = v23 % a7 - v23 + v24;
    v26 = a7;
    if ((v28 & 7) != 0)
      __assert_rtn("calculate_lcm_and_needs_backwards_lcmed", "mem_algo_common.hpp", 173, "(needs_backwards_lcmed & (Alignment - 1u)) == 0");
  }
LABEL_55:
  if (v28 > 8 * v21)
    return 0;
  if ((a2 & 2) != 0)
  {
    v72 = *a4;
    if ((boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(a1, v9, v23, &v72) & 1) == 0)__assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 849, "0");
    v23 = *a4;
    if (*a4 != v72)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 851, "prefer_in_recvd_out_size == received_size2");
    v21 = *(_QWORD *)(v20 + 8);
    v22 = v21 & 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v22 >= (v28 >> 3) + 5)
  {
    v47 = (char *)v17 - v28;
    v48 = v28 + v23 - 8;
    v49 = (v48 >> 3) + 2;
    v50 = v49 | *(uint64_t *)((char *)v17 - v28 + 8) & 0xC000000000000000;
    *(uint64_t *)((char *)v17 - v28 + 8) = v50;
    if (v48 <= 0x17)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 861, "new_block->m_size >= BlockCtrlUnits");
    *((_QWORD *)v47 + 1) = v50 | 0x8000000000000000;
    *(_QWORD *)&v47[8 * v49 + 8] |= 0x4000000000000000uLL;
    v51 = *(_QWORD *)(v20 + 8) & 0xC000000000000000 | ((unint64_t)&v47[-v20] >> 3);
    *(_QWORD *)(v20 + 8) = v51;
    if ((unint64_t)&v47[-v20] <= 0x27)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 866, "prev_block->m_size >= BlockCtrlUnits");
    *(_QWORD *)(v20 + 8) = v51 & 0x5FFFFFFFFFFFFFFFLL;
    v52 = (uint64_t *)(v20 + ((unint64_t)&v47[-v20] & 0xFFFFFFFFFFFFFFF8));
    v52[1] &= ~0x4000000000000000uLL;
    *v52 = *(_QWORD *)(v20 + 8) & 0x3FFFFFFFFFFFFFFFLL;
    v53 = v20 - (_QWORD)v71 + 16;
    v54 = v71 - (char *)&v72;
    if (v20 - (_QWORD)v71 == -15)
      v54 = 0;
    v55 = v54 + v53;
    if (v55 == 1)
      v56 = 0;
    else
      v56 = (char *)&v72 - (char *)&v70;
    v70 = v56 + v55;
    *(_QWORD *)v71 = v20 - (_QWORD)v71 + 16;
    boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin((char *)&v69, a1 + 8);
    if (boost::intrusive::operator!=(v71, (char *)&v69))
    {
      v57 = v71 - (char *)&v70;
      if (v20 - (_QWORD)v71 == -15)
        v57 = 0;
      v70 = v57 + v53;
      boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v72, (char *)&v70);
      if (v72 == 1)
        v58 = 0;
      else
        v58 = (char *)&v72 - (char *)&v70;
      v70 = v58 + v72;
      boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(&v68, &v70);
      if (v68 == 1)
        v59 = 0;
      else
        v59 = (char *)&v68 + v68;
      if ((*((_QWORD *)v59 + 1) & 0x3FFFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v20 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
      {
        v60 = v71 - (char *)&v72;
        if (*(_QWORD *)v71 == 1)
          v60 = 0;
        v61 = (char *)&v72 - (char *)&v67;
        if (v60 + *(_QWORD *)v71 == 1)
          v61 = 0;
        v67 = v61 + v60 + *(_QWORD *)v71;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v72, (char *)a1, (char *)&v67);
        boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin((char *)&v69, a1 + 8);
        v62 = (char *)&v69 - (char *)&v72;
        if (v69 == 1)
          v62 = 0;
        v63 = v62 + v69;
        v64 = (char *)&v72 - (char *)&v66;
        if (v63 == 1)
          v64 = 0;
        v66 = v64 + v63;
        boost::intrusive::multiset_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,void>::insert((char *)&v72, (char *)a1, (char *)&v66, v20);
      }
    }
    *a4 += v28;
    *(_QWORD *)(a1 + 40) += v28;
    if ((v47 & 7) != 0)
      goto LABEL_102;
    if ((v9 - (uint64_t)(v47 + 16)) % a7)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 892, "size_type(static_cast<char*>(reuse_ptr) - static_cast<char*>(user_ptr)) % backwards_multiple == 0");
    v9 = (uint64_t)(v47 + 16);
    if ((((_BYTE)v47 + 16) & 7) != 0)
      goto LABEL_102;
  }
  else
  {
    if (v22 < v28 >> 3 || 8 * v21 % v26)
      return 0;
    v39 = v20 + 16;
    v40 = v20 + 16 - (_QWORD)v71;
    *(_QWORD *)v71 = v40;
    v41 = v71 - (char *)&v72;
    if (v40 == 1)
      v41 = 0;
    v42 = v41 + v40;
    v43 = (char *)&v72 - (char *)&v65;
    if (v42 == 1)
      v43 = 0;
    v65 = v43 + v42;
    boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v72, (char *)a1, (char *)&v65);
    *a4 += 8 * *(_QWORD *)(v20 + 8);
    *(_QWORD *)(a1 + 40) += 8 * *(_QWORD *)(v20 + 8);
    v44 = *(_QWORD *)(v20 + 8);
    v45 = *(_QWORD *)(v9 - 8) + v44;
    v46 = v44 & 0xC000000000000000 | v45 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v20 + 8) = v46;
    if ((v45 & 0x3FFFFFFFFFFFFFFFuLL) <= 4)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 910, "prev_block->m_size >= BlockCtrlUnits");
    *(_QWORD *)(v20 + 8) = v46 | 0x8000000000000000;
    *(_QWORD *)(v20 + 8 * v45 + 8) |= 0x4000000000000000uLL;
    if ((v9 - v39) % a7)
      __assert_rtn("priv_expand_both_sides", "rbtree_best_fit.hpp", 916, "size_type(static_cast<char*>(reuse_ptr) - static_cast<char*>(user_ptr)) % backwards_multiple == 0");
    v9 = v20 + 16;
    if ((v39 & 7) != 0)
LABEL_102:
      __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  }
  return v9;
}

char *boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_check_and_allocate(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  char *v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  int64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = (char *)(a3 + 16);
  v5 = a3 + 16 - (_QWORD)v63;
  v63[0] = v5;
  if ((a3 & 7) != 0)
    goto LABEL_72;
  v9 = *(_QWORD *)(a3 + 8);
  if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < a2 + 5)
  {
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < a2)
      __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1293, "0");
    v10 = (char *)v63 - (char *)&v66;
    if (v5 == 1)
      v10 = 0;
    v11 = v10 + v5;
    v12 = (char *)&v66 - (char *)&v58;
    if (v11 == 1)
      v12 = 0;
    v58 = v12 + v11;
    boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v66, (char *)a1, (char *)&v58);
    goto LABEL_71;
  }
  *(_QWORD *)(a3 + 8) = v9 & 0xC000000000000000 | a2 & 0x3FFFFFFFFFFFFFFFLL;
  if ((a2 & 0x3FFFFFFFFFFFFFFFLL) <= 4)
    __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1261, "block->m_size >= BlockCtrlUnits");
  v13 = a3 + 8 * a2;
  *(int64x2_t *)(v13 + 24) = vdupq_n_s64(1uLL);
  *(_OWORD *)(v13 + 8) = xmmword_1A17B6C70;
  if ((v13 & 7) != 0)
LABEL_72:
    __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  v14 = v9 - a2;
  *(_QWORD *)(v13 + 8) = v14 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v14 & 0x3FFFFFFFFFFFFFFFuLL) <= 4)
    __assert_rtn("priv_check_and_allocate", "rbtree_best_fit.hpp", 1268, "rem_block->m_size >= BlockCtrlUnits");
  v15 = (uint64_t *)(v13 + 8 * v14);
  v15[1] &= ~0x4000000000000000uLL;
  *v15 = *(_QWORD *)(v13 + 8) & 0x3FFFFFFFFFFFFFFFLL;
  v16 = a1 + 8;
  v17 = a1 + 8 - (_QWORD)&v64;
  v18 = (char *)&v64 - (char *)&v65;
  if (v17 == 1)
    v18 = 0;
  v19 = v18 + v17;
  v20 = (char *)&v65 + v19;
  if (v19 == 1)
    v20 = 0;
  v21 = *((_QWORD *)v20 + 1);
  v22 = v20 + 8 - (char *)&v66;
  if (v21 == 1)
    v22 = 0;
  v23 = v22 + v21;
  v24 = (char *)&v66 - (char *)&v62;
  if (v23 == 1)
    v24 = 0;
  v25 = v24 + v23;
  v62 = v25;
  v26 = (char *)v63 - (char *)&v66;
  if (v5 == 1)
    v27 = 0;
  else
    v27 = (char *)v63 - (char *)&v66;
  v28 = v27 + v5;
  v29 = (char *)&v62 - (char *)&v65;
  if (v25 == 1)
    v29 = 0;
  v30 = v29 + v25;
  v31 = (char *)&v66 + v28;
  if (v28 == 1)
    v31 = 0;
  if (v30 == 1)
    v32 = 0;
  else
    v32 = (char *)&v65 + v30;
  if (v31 == v32)
    goto LABEL_66;
  if (v5 == 1)
    v26 = 0;
  v33 = v26 + v5;
  if (v33 == 1)
    v34 = 0;
  else
    v34 = (char *)&v66 - (char *)&v64;
  v64 = v34 + v33;
  boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v66, (char *)&v64);
  if (v66 == 1)
    v35 = 0;
  else
    v35 = (char *)&v66 - (char *)&v64;
  v64 = v35 + v66;
  if (v35 + v66 == 1)
    v36 = 0;
  else
    v36 = (char *)&v64 + v35 + v66;
  v65 = v36 - (char *)&v65 - 16;
  if (v36 - (char *)&v65 == 17)
    goto LABEL_73;
  if ((*((_QWORD *)v36 - 1) & 0x3FFFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v13 + 8) & 0x3FFFFFFFFFFFFFFFuLL))
  {
LABEL_66:
    if (v5 == 1)
      v55 = 0;
    else
      v55 = v4;
    v66 = v55 - (char *)&v66 - 16;
    if (v55 - (char *)&v66 != 17)
    {
      v61 = v55 - (char *)&v61;
      boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(a1 + 8, &v61, v13);
      goto LABEL_71;
    }
LABEL_73:
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  }
  v37 = (char *)v63 - (char *)&v66;
  if (v5 == 1)
    v37 = 0;
  v38 = v37 + v5;
  v39 = (char *)&v66 - (char *)&v60;
  if (v38 == 1)
    v39 = 0;
  v60 = v39 + v38;
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v66, (char *)a1, (char *)&v60);
  v40 = (char *)&v64 - (char *)&v65;
  if (v16 - (_QWORD)&v64 == 1)
    v40 = 0;
  v41 = v40 + v16 - (_QWORD)&v64;
  if (v41 == 1)
    v42 = 0;
  else
    v42 = (char *)&v65 + v41;
  v43 = *((_QWORD *)v42 + 1);
  v44 = v42 + 8 - (char *)&v66;
  if (v43 == 1)
    v44 = 0;
  v45 = v44 + v43;
  v46 = (char *)&v66 - (char *)&v62;
  if (v45 == 1)
    v46 = 0;
  v47 = v46 + v45;
  v62 = v47;
  v48 = (char *)&v62 - (char *)&v66;
  if (v47 == 1)
    v48 = 0;
  v49 = v48 + v47;
  v50 = (char *)&v66 - (char *)&v59;
  if (v49 == 1)
    v50 = 0;
  v51 = v50 + v49;
  v59 = v51;
  v52 = (char *)&v59 - (char *)&v66;
  if (v51 == 1)
    v52 = 0;
  v53 = v52 + v51;
  v54 = (char *)&v66 - (char *)&v65;
  if (v53 == 1)
    v54 = 0;
  v65 = v54 + v53;
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v66, (char *)a1, (char *)&v65, v13);
LABEL_71:
  *(_QWORD *)(a1 + 40) += 8 * *(_QWORD *)(a3 + 8);
  *a4 = 8 * *(_QWORD *)(a3 + 8) - 8;
  v56 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v56 | 0x8000000000000000;
  *(_QWORD *)(a3 + 8 * v56 + 8) |= 0x4000000000000000uLL;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)(a3 + 8 * *(_QWORD *)(a3 + 8)) = 0;
  return v4;
}

uint64_t *boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator->(uint64_t *result, _QWORD *a2)
{
  char *v2;
  uint64_t v3;

  if (*a2 == 1)
    v2 = 0;
  else
    v2 = (char *)a2 + *a2;
  v3 = v2 - (char *)result - 16;
  *result = v3;
  if (v3 == 1)
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  return result;
}

char *boost::intrusive::tree_iterator<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,false>::operator*(_QWORD *a1)
{
  char *v1;
  char *result;
  uint64_t v3;

  if (*a1 == 1)
    v1 = 0;
  else
    v1 = (char *)a1 + *a1;
  result = v1 - 16;
  v3 = v1 - 16 - (char *)&v3;
  if (v3 == 1)
    __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
  return result;
}

uint64_t boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_expand(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  char *v44;
  char *v45;
  int64_t v46;
  int64_t v47;
  int64_t v48;
  int v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  int64x2_t *v55;
  uint64_t *v56;
  int64_t v57;
  int64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  char v85;
  char v86[16];
  uint64_t v87;

  v7 = *a4;
  v8 = a2 - 16;
  v9 = *(_QWORD *)(a2 - 8);
  v10 = (*(_QWORD *)(a1 + 32) + a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  if (v10 + ((*(_QWORD *)(a1 + 48) + a1 - v10 - 8) & 0xFFFFFFFFFFFFFFF8) + 8 != a2
    && ((*(_QWORD *)(v8 + 8 * v9 + 8) & 0x4000000000000000) != 0) != v9 >> 63)
  {
    goto LABEL_99;
  }
  if ((v9 & 0x8000000000000000) == 0)
    __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1037, "priv_is_allocated_block(block)");
  v11 = 8 * v9 - 8;
  *a4 = v11;
  if (v11 >= v7 || v11 >= a3)
    return 1;
  v14 = (a3 - 1) >> 3;
  v15 = v7 - 1;
  if (v14 > (v7 - 1) >> 3)
    __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1049, "min_user_units <= preferred_user_units");
  v16 = v8 + 8 * *(_QWORD *)(a2 - 8);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = (*(_QWORD *)(a1 + 32) + a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  if (v18 + ((*(_QWORD *)(a1 + 48) + a1 - v18 - 8) & 0xFFFFFFFFFFFFFFF8) - 8 != v16
    && ((*(_QWORD *)(v16 + 8 * v17 + 8) & 0x4000000000000000) != 0) != v17 >> 63)
  {
LABEL_99:
    __assert_rtn("priv_is_allocated_block", "rbtree_best_fit.hpp", 1200, "allocated == next_block_prev_allocated");
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    if ((v16 & 7) == 0)
    {
      v19 = v17 & 0x3FFFFFFFFFFFFFFFLL;
      v20 = (v17 & 0x3FFFFFFFFFFFFFFFLL) + (v9 & 0x3FFFFFFFFFFFFFFFLL);
      v13 = v20 - 2 >= v14;
      if (v20 - 2 < v14)
      {
LABEL_96:
        *a4 = 8 * v20 - 8;
        return v13;
      }
      v21 = v15 >> 3;
      if (v20 - 2 >= v21)
        v22 = v21;
      else
        v22 = v20 - 2;
      v23 = v22 + 2;
      v24 = v20 - (v22 + 2);
      if (v24 < 5)
      {
        v50 = v16 - (_QWORD)v86 + 16;
        *(_QWORD *)v86 = v50;
        v51 = v86 - (char *)&v87;
        if (v50 == 1)
          v51 = 0;
        v52 = v51 + v50;
        v53 = (char *)&v87 - (char *)&v77;
        if (v52 == 1)
          v53 = 0;
        v77 = v53 + v52;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v87, (char *)a1, (char *)&v77);
        *(_QWORD *)(a2 - 8) = *(_QWORD *)(a2 - 8) & 0xC000000000000000 | v20 & 0x3FFFFFFFFFFFFFFFLL;
        if ((v20 & 0x3FFFFFFFFFFFFFFFuLL) <= 4)
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1125, "block->m_size >= BlockCtrlUnits");
        v54 = *(_QWORD *)(a1 + 40) + 8 * v17;
        goto LABEL_95;
      }
      if (v19 != *(_QWORD *)(v16 + 8 * v17))
        __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1081, "next_block->m_size == priv_next_block(next_block)->m_prev_size");
      v25 = v16 - (_QWORD)v84 + 16;
      v84[0] = v25;
      v76 = v22;
      if (v19 - v24 <= 4)
        goto LABEL_54;
      v26 = &v85 - v86;
      if (a1 - (_QWORD)&v85 == -7)
        v26 = 0;
      v27 = v26 + a1 - (_QWORD)&v85 + 8;
      v28 = &v86[v27];
      if (v27 == 1)
        v28 = 0;
      v29 = *((_QWORD *)v28 + 1);
      v30 = v28 + 8 - (char *)&v87;
      if (v29 == 1)
        v30 = 0;
      v31 = v30 + v29;
      v32 = (char *)&v87 - (char *)&v83;
      if (v31 == 1)
        v32 = 0;
      v33 = v32 + v31;
      v83 = v33;
      v34 = (char *)v84 - (char *)&v87;
      if (v25 == 1)
        v34 = 0;
      v35 = v34 + v25;
      v36 = (char *)&v83 - v86;
      if (v33 == 1)
        v36 = 0;
      v37 = v36 + v33;
      v38 = v35 == 1 ? 0 : (char *)&v87 + v35;
      v39 = v37 == 1 ? 0 : &v86[v37];
      if (v38 == v39)
        goto LABEL_66;
      v40 = (char *)v84 - (char *)&v87;
      if (v25 == 1)
        v40 = 0;
      v41 = v40 + v25;
      if (v41 == 1)
        v42 = 0;
      else
        v42 = (char *)&v87 - (char *)&v81;
      v81 = v42 + v41;
      boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v87, (char *)&v81);
      if (v87 == 1)
        v43 = 0;
      else
        v43 = (char *)&v87 - (char *)&v81;
      v81 = v43 + v87;
      v44 = (char *)&v81 + v43 + v87;
      if (v81 == 1)
        v45 = 0;
      else
        v45 = v44;
      v82 = v45 - (char *)&v82 - 16;
      if (v45 - (char *)&v82 == 17)
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      if ((*((_QWORD *)v45 - 1) & 0x3FFFFFFFFFFFFFFFuLL) <= v24)
      {
LABEL_66:
        v49 = 0;
      }
      else
      {
LABEL_54:
        v46 = (char *)v84 - (char *)&v87;
        if (v25 == 1)
          v46 = 0;
        v47 = v46 + v25;
        v48 = (char *)&v87 - (char *)&v80;
        if (v47 == 1)
          v48 = 0;
        v80 = v48 + v47;
        boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)&v87, (char *)a1, (char *)&v80);
        v49 = 1;
      }
      v55 = (int64x2_t *)(v8 + 8 * v23);
      v55[1] = vdupq_n_s64(1uLL);
      v55[2].i64[0] = 1;
      v55->i64[1] = v24 & 0x3FFFFFFFFFFFFFFFLL;
      if ((v55 & 7) == 0)
      {
        if ((v24 & 0x3FFFFFFFFFFFFFFFLL) <= 4)
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1104, "rem_block->m_size >= BlockCtrlUnits");
        v56 = &v55->i64[v24];
        v56[1] &= ~0x4000000000000000uLL;
        *v56 = v55->i64[1] & 0x3FFFFFFFFFFFFFFFLL;
        if (v49)
        {
          v57 = &v85 - v86;
          if (a1 - (_QWORD)&v85 == -7)
            v57 = 0;
          v58 = v57 + a1 - (_QWORD)&v85 + 8;
          if (v58 == 1)
            v59 = 0;
          else
            v59 = &v86[v58];
          v60 = *((_QWORD *)v59 + 1);
          v61 = v59 + 8 - (char *)&v87;
          if (v60 == 1)
            v61 = 0;
          v62 = v61 + v60;
          v63 = (char *)&v87 - (char *)&v83;
          if (v62 == 1)
            v63 = 0;
          v64 = v63 + v62;
          v83 = v64;
          v65 = (char *)&v83 - (char *)&v87;
          if (v64 == 1)
            v65 = 0;
          v66 = v65 + v64;
          v67 = (char *)&v87 - (char *)&v79;
          if (v66 == 1)
            v67 = 0;
          v68 = v67 + v66;
          v79 = v68;
          v69 = (char *)&v79 - (char *)&v87;
          if (v68 == 1)
            v69 = 0;
          v70 = v69 + v68;
          v71 = (char *)&v87 - v86;
          if (v70 == 1)
            v71 = 0;
          *(_QWORD *)v86 = v71 + v70;
          boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal((char *)&v87, (char *)a1, v86, (uint64_t)v55);
        }
        else
        {
          v72 = (char *)v84 - (char *)&v87;
          if (v84[0] == 1)
            v72 = 0;
          v73 = (char *)&v87 - (char *)&v78;
          if (v72 + v84[0] == 1)
            v73 = 0;
          v78 = v73 + v72 + v84[0];
          boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::replace_node(a1 + 8, &v78, v8 + 8 * v23);
        }
        *(_QWORD *)(a2 - 8) = *(_QWORD *)(a2 - 8) & 0xC000000000000000 | v23;
        if (v76 <= 2)
          __assert_rtn("priv_expand", "rbtree_best_fit.hpp", 1115, "block->m_size >= BlockCtrlUnits");
        v54 = *(_QWORD *)(a1 + 40) + 8 * (v23 - v9);
LABEL_95:
        *(_QWORD *)(a1 + 40) = v54;
        v74 = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v74 | 0x8000000000000000;
        *(_QWORD *)(v8 + 8 * v74 + 8) |= 0x4000000000000000uLL;
        v20 = *(_QWORD *)(a2 - 8);
        goto LABEL_96;
      }
    }
    __assert_rtn("assert_alignment", "mem_algo_common.hpp", 106, "uint_ptr % Alignment == 0");
  }
  return 0;
}

char *boost::intrusive::bstbase3<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,(boost::intrusive::algo_types)5,void>::begin(char *result, uint64_t a2)
{
  int64_t v2;
  int64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  _BYTE v10[8];
  char v11;

  v2 = &v9 - v10;
  if (a2 - (_QWORD)&v9 == 1)
    v2 = 0;
  v3 = v2 + a2 - (_QWORD)&v9;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = &v10[v3];
  v5 = *((_QWORD *)v4 + 1);
  v6 = v4 + 8 - &v11;
  if (v5 == 1)
    v6 = 0;
  v7 = v6 + v5;
  v8 = (_BYTE *)(&v11 - result);
  if (v7 == 1)
    v8 = 0;
  *(_QWORD *)result = &v8[v7];
  return result;
}

BOOL boost::intrusive::operator!=(char *a1, char *a2)
{
  int64_t v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE v9[8];
  _BYTE v10[8];

  v2 = a1 - v10;
  if (*(_QWORD *)a1 == 1)
    v2 = 0;
  v3 = v2 + *(_QWORD *)a1;
  v4 = a2 - v9;
  if (*(_QWORD *)a2 == 1)
    v4 = 0;
  v5 = v4 + *(_QWORD *)a2;
  if (v3 == 1)
    v6 = 0;
  else
    v6 = &v10[v3];
  v7 = &v9[v5];
  if (v5 == 1)
    v7 = 0;
  return v6 != v7;
}

char *boost::intrusive::multiset_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,void>::insert(char *a1, char *a2, char *a3, uint64_t a4)
{
  int64_t v4;
  int64_t v5;
  int64_t v6;
  int64_t v8;
  char v9;

  v4 = a3 - &v9;
  if (*(_QWORD *)a3 == 1)
    v4 = 0;
  v5 = v4 + *(_QWORD *)a3;
  v6 = &v9 - (char *)&v8;
  if (v5 == 1)
    v6 = 0;
  v8 = v6 + v5;
  return boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::insert_equal(a1, a2, (char *)&v8, a4);
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1B0C908);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "unknown boost::container exception";
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E459F9D0, MEMORY[0x1E0DE42D0]);
}

void sub_1A171C2A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

id _PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryRev0(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  int v35;

  v1 = a1;
  v2 = objc_retainAutorelease((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", 12));
  v3 = objc_msgSend(v2, "mutableBytes");
  *(_WORD *)v3 = -32766;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ColorCastCI"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = llround((_objectToDouble(v6) + 0.1) / 0.4 * 255.0);
    if (v7 >= 255)
      v7 = 255;
    *(_BYTE *)(v3 + 10) = v7 & ~(v7 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ContrastCI"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8)
  {
    objc_msgSend(v8, "objectAtIndexedSubscript:", 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = llround((_objectToDouble(v10) + 0.15) / 0.55 * 255.0);
    if (v11 >= 255)
      v11 = 255;
    *(_BYTE *)(v3 + 4) = v11 & ~(v11 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("ExposureAndBlackPointCI"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = llround((_objectToDouble(v14) + 0.01) / 0.02 * 255.0);
    if (v15 >= 255)
      v15 = 255;
    *(_BYTE *)(v3 + 6) = v15 & ~(v15 >> 31);

    objc_msgSend(v13, "objectAtIndexedSubscript:", 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = llround((_objectToDouble(v16) + 0.01) / 0.02 * 255.0);
    if (v17 >= 255)
      v17 = 255;
    *(_BYTE *)(v3 + 5) = v17 & ~(v17 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("HighKeyCI"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v18;
  if (v18)
  {
    objc_msgSend(v18, "objectAtIndexedSubscript:", 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = llround((_objectToDouble(v20) + 0.2) / 1.5 * 255.0);
    if (v21 >= 255)
      v21 = 255;
    *(_BYTE *)(v3 + 8) = v21 & ~(v21 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("HighlightsCI"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22)
  {
    objc_msgSend(v22, "objectAtIndexedSubscript:", 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = llround((_objectToDouble(v24) + 0.4) / 0.42 * 255.0);
    if (v25 >= 255)
      v25 = 255;
    *(_BYTE *)(v3 + 7) = v25 & ~(v25 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("VibrancyCI"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v26)
  {
    objc_msgSend(v26, "objectAtIndexedSubscript:", 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = llround((_objectToDouble(v28) + 0.075) / 0.225 * 255.0);
    if (v29 >= 255)
      v29 = 255;
    *(_BYTE *)(v3 + 9) = v29 & ~(v29 >> 31);

  }
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("WhiteBalanceTempTintCI"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if (v30)
  {
    objc_msgSend(v30, "objectAtIndexedSubscript:", 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = llround((_objectToDouble(v32) + -4200.0) / 2000.0 * 255.0);
    if (v33 >= 255)
      v33 = 255;
    *(_BYTE *)(v3 + 2) = v33 & ~(v33 >> 31);

    objc_msgSend(v31, "objectAtIndexedSubscript:", 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = llround((_objectToDouble(v34) + 20.0) / 40.0 * 255.0);
    if (v35 >= 255)
      v35 = 255;
    *(_BYTE *)(v3 + 3) = v35 & ~(v35 >> 31);

  }
  return v2;
}

double _objectToDouble(void *a1)
{
  id v1;
  double v2;
  double v3;

  v1 = a1;
  v2 = 0.0;
  if (v1 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "doubleValue");
    v2 = v3;
  }

  return v2;
}

id PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryAndRevision(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "count");
    v6 = 0;
    if (!a2 && v5)
    {
      _PFStoryRecipeDisplayAssetNormalizationDataFromMediaAnalysisDictionaryRev0(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id PFMap(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, _QWORD);
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v6 = v3;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          v4[2](v4, *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11)
            objc_msgSend(v5, "addObject:", v11, (_QWORD)v13);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id PFMapDictionary(id a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  id v12;

  v3 = a2;
  if (a1)
  {
    v4 = (objc_class *)MEMORY[0x1E0C99E08];
    v5 = a1;
    v6 = (void *)objc_msgSend([v4 alloc], "initWithCapacity:", objc_msgSend(v5, "count"));
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __PFMapDictionary_block_invoke;
    v10[3] = &unk_1E45A20D0;
    v7 = v6;
    v11 = v7;
    v12 = v3;
    objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v10);

    v8 = v12;
    a1 = v7;

  }
  return a1;
}

uint64_t PFCount(void *a1, void *a2)
{
  id v3;
  unsigned int (**v4)(id, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v3);
        v7 += v4[2](v4, *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i));
      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v6);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

__CFString *PFMetadataStringForMetadataLoadOptions(__int16 a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 2) != 0)
  {
    objc_msgSend(&stru_1E45A8128, "stringByAppendingString:", CFSTR("lookforxmpsidecar|"));
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if ((a1 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = &stru_1E45A8128;
  if ((a1 & 1) != 0)
  {
LABEL_5:
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("usejpegfastpath|"));
    v3 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v3;
  }
LABEL_6:
  if ((a1 & 0x10) != 0)
  {
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("createproxy|"));
    v6 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v6;
    if ((a1 & 0x20) == 0)
    {
LABEL_8:
      if ((a1 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("allowexportforproxy|"));
  v7 = objc_claimAutoreleasedReturnValue();

  v2 = (__CFString *)v7;
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("nofileaccess|"));
  v8 = objc_claimAutoreleasedReturnValue();

  v2 = (__CFString *)v8;
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_18:
  -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("nooutofprocess"));
  v9 = objc_claimAutoreleasedReturnValue();

  v2 = (__CFString *)v9;
  if ((a1 & 0x40) != 0)
  {
LABEL_11:
    -[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR("loadvalues"));
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (__CFString *)v4;
  }
LABEL_12:
  if (!-[__CFString length](v2, "length"))
  {

    v2 = CFSTR("none");
  }
  return v2;
}

void cleanJSON(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  __CFString *v11;
  double v12;
  void *v13;
  const __CFString *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  uint64_t v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      objc_msgSend(v1, "allKeys");
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      if (!v3)
        goto LABEL_26;
      v5 = v3;
      v6 = *(_QWORD *)v20;
      *(_QWORD *)&v4 = 138412290;
      v18 = v4;
      while (1)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v20 != v6)
            objc_enumerationMutation(v2);
          v8 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v7);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v9 = metadataLog;
            if (os_log_type_enabled((os_log_t)metadataLog, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v18;
              v24 = v8;
              _os_log_error_impl(&dword_1A16EE000, v9, OS_LOG_TYPE_ERROR, "Invalid key: %@", buf, 0xCu);
            }
            objc_msgSend(v1, "removeObjectForKey:", v8, v18);
          }
          objc_msgSend(v1, "objectForKeyedSubscript:", v8, v18);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v11 = objc_retainAutorelease(v10);
            if (!strcmp((const char *)-[__CFString objCType](v11, "objCType"), "d"))
            {
              -[__CFString doubleValue](v11, "doubleValue");
              if ((__fpclassifyd(v12) - 1) <= 1)
              {
                v13 = v1;
                v14 = CFSTR("null");
                goto LABEL_22;
              }
            }
            goto LABEL_23;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            cleanJSON(v10);
            goto LABEL_24;
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_msgSend(v10, "description");
              v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
              v13 = v1;
              v14 = v11;
LABEL_22:
              objc_msgSend(v13, "setObject:forKeyedSubscript:", v14, v8);
LABEL_23:

            }
          }
LABEL_24:

          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
        if (!v5)
        {
LABEL_26:

          goto LABEL_41;
        }
      }
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v1, "count"))
    {
      v15 = 0;
      do
      {
        objc_msgSend(v1, "objectAtIndexedSubscript:", v15);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          cleanJSON(v16);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0)
                  {
                    objc_msgSend(v16, "description");
                    v17 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v1, "setObject:atIndexedSubscript:", v17, v15);

                  }
                }
              }
            }
          }
        }

        ++v15;
      }
      while (objc_msgSend(v1, "count") > v15);
    }
  }
LABEL_41:

}

void PFGetDimensionsFromImageProperties(void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a1;
  objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBCFF0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7)
  {
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBD090]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v8
      || (v9 = v8,
          objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0CBD0C0]),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          v9,
          !v7))
    {
      v7 = &unk_1E45CA5E0;
    }
  }
  if (a2)
    *a2 = objc_retainAutorelease(v7);
  objc_msgSend(v14, "objectForKey:", CFSTR("RawPixelWidth"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v10)
  {
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBD048]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v10)
    {
      objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBCB50]);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0CBCC28]);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (a3)
    *a3 = objc_retainAutorelease(v10);
  objc_msgSend(v14, "objectForKey:", CFSTR("RawPixelHeight"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBD040]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v12)
    {
      objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0CBCB50]);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "objectForKey:", *MEMORY[0x1E0CBCC30]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  if (a4)
    *a4 = objc_retainAutorelease(v12);

}

const __CFString *PFDisplayAssetPlaybackStyleDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unsupported");
  else
    return off_1E45A22D0[a1 - 1];
}

const __CFString *PFStoryRecipeClipMotionStyleDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("none");
  else
    return off_1E45A2300[a1 - 1];
}

const __CFString *PFStoryRecipeClipTransitionKindDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("none");
  else
    return off_1E45A2320[a1 - 1];
}

id PFPosterSettlingEffectGatingStatisticsAnalyticsPayload(unsigned int *a1, uint64_t a2)
{
  id v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = CFSTR("Default");
  if (a2 == 1)
    v5 = CFSTR("Interactive");
  if (a2 == 2)
    v5 = CFSTR("Overnight");
  v6 = v5;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("GatingLevel"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("FailedFeatureDisabled"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[1]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("FailedHardwareUnsupported"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[2]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("FailedResourceAvailability"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[3]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, CFSTR("FailedUnsupportedAdjustments"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[4]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v11, CFSTR("FailedGenericError"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[5]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v12, CFSTR("FailedMetadataCheck"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[6]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v13, CFSTR("FailedStabilization"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[7]);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v14, CFSTR("FailedVideoQuality"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[8]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v15, CFSTR("FailedMetadataIntegrity"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[9]);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v16, CFSTR("FailedFRC"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[10]);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v17, CFSTR("FailedVideoDecision"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[11]);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v18, CFSTR("FailedLayoutDecision"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1[12]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v19, CFSTR("FailedStillTransition"));

  return v4;
}

void sub_1A172A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A172AA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A172AD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *convertTypeToKey(int a1, int a2)
{
  __CFString **v4;
  __CFString **v5;
  __CFString *v6;
  const __CFString *v7;
  __CFString **v8;
  BOOL v9;
  __CFString *v10;

  if (convertTypeToKey_onceToken[0] != -1)
    dispatch_once(convertTypeToKey_onceToken, &__block_literal_global_2799);
  switch(a1)
  {
    case 0:
      __assert_rtn("convertTypeToKey", "PFMediaMetadata.m", 70, "false");
    case 1:
      v4 = (__CFString **)MEMORY[0x1E0C89C70];
      v5 = (__CFString **)MEMORY[0x1E0C8AA88];
      goto LABEL_19;
    case 2:
      v6 = (__CFString *)*MEMORY[0x1E0C89CC8];
      v7 = CFSTR("com.apple.photos.originating.signature");
      goto LABEL_8;
    case 3:
      v6 = (__CFString *)*MEMORY[0x1E0C89CD8];
      v7 = CFSTR("com.apple.photos.render.originating.signature");
      goto LABEL_8;
    case 4:
      v6 = (__CFString *)*MEMORY[0x1E0C89CD0];
      v7 = CFSTR("com.apple.photos.variation-identifier");
LABEL_8:
      if (a2)
        v6 = (__CFString *)v7;
      goto LABEL_45;
    case 5:
      v6 = CFSTR("com.apple.photos.live-photo.minimum-client-version");
      goto LABEL_36;
    case 6:
      v8 = (__CFString **)MEMORY[0x1E0C89C90];
      goto LABEL_33;
    case 7:
      v8 = (__CFString **)MEMORY[0x1E0C89CB8];
      goto LABEL_33;
    case 8:
      v6 = (__CFString *)convertTypeToKey_quicktimeAutoLivePhotoKey;
      goto LABEL_36;
    case 9:
      v6 = (__CFString *)convertTypeToKey_quicktimeVitalityScoreKey;
      goto LABEL_36;
    case 10:
      v8 = (__CFString **)MEMORY[0x1E0D03D40];
      goto LABEL_33;
    case 11:
      v8 = (__CFString **)MEMORY[0x1E0C89CC0];
      goto LABEL_33;
    case 12:
      v4 = (__CFString **)MEMORY[0x1E0C89D48];
      v5 = (__CFString **)MEMORY[0x1E0C8AAE0];
LABEL_19:
      if (a2)
        v4 = v5;
      goto LABEL_44;
    case 13:
      v8 = (__CFString **)MEMORY[0x1E0D03D18];
      goto LABEL_33;
    case 14:
      v8 = (__CFString **)MEMORY[0x1E0D03D78];
      goto LABEL_33;
    case 15:
      v6 = CFSTR("20");
      goto LABEL_34;
    case 16:
      v6 = (__CFString *)*MEMORY[0x1E0C8AA80];
      if (!a2)
        v6 = 0;
      goto LABEL_45;
    case 17:
      v6 = (__CFString *)*MEMORY[0x1E0C8AAC0];
      goto LABEL_36;
    case 18:
      v8 = (__CFString **)MEMORY[0x1E0CBC710];
      goto LABEL_33;
    case 19:
      v8 = (__CFString **)MEMORY[0x1E0D03D48];
      goto LABEL_33;
    case 20:
      v8 = (__CFString **)MEMORY[0x1E0C89C78];
      goto LABEL_33;
    case 21:
      v8 = (__CFString **)MEMORY[0x1E0C89C80];
LABEL_33:
      v6 = *v8;
LABEL_34:
      v9 = a2 == 0;
      goto LABEL_37;
    case 22:
      v6 = CFSTR("com.apple.quicktime.limit-still-image-transform");
LABEL_36:
      v9 = a2 == 1;
LABEL_37:
      if (!v9)
        v6 = 0;
      goto LABEL_45;
    case 23:
      v10 = CFSTR("58");
      return v10;
    case 24:
      v10 = CFSTR("com.apple.quicktime.live-photo.transition-vitality-score.v1");
      return v10;
    case 25:
      v4 = (__CFString **)MEMORY[0x1E0C8AAD0];
      goto LABEL_44;
    case 26:
      v4 = (__CFString **)MEMORY[0x1E0C8AAD8];
LABEL_44:
      v6 = *v4;
LABEL_45:
      v10 = v6;
      break;
    default:
      v10 = 0;
      break;
  }
  return v10;
}

void __convertTypeToKey_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C8B220], "keyForIdentifier:", *MEMORY[0x1E0C8A940]);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)convertTypeToKey_quicktimeAutoLivePhotoKey;
  convertTypeToKey_quicktimeAutoLivePhotoKey = v0;

  objc_msgSend(MEMORY[0x1E0C8B220], "keyForIdentifier:", *MEMORY[0x1E0C8A978]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)convertTypeToKey_quicktimeVitalityScoreKey;
  convertTypeToKey_quicktimeVitalityScoreKey = v2;

}

void sub_1A172BF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AuxiliaryImageCVPixelBufferReleaseBytesCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void sub_1A172D63C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

float64x2_t lhc_to_srgb(float64x2_t *a1, float64x2_t a2, double a3)
{
  __double2 v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x16_t v7;
  float64x2_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float64x2_t v11;
  int8x16_t v12;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t result;
  simd_double2 v30;
  float64x2_t v31;
  simd_double2 xa;
  simd_double2 x;
  float64x2_t v34;
  uint64_t v35;
  int8x16_t v36;
  float64x2_t v37;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v44;

  v4 = __sincos_stret(a2.f64[1]);
  v5.f64[0] = v4.__cosval * a3;
  v6.f64[0] = v4.__sinval * a3;
  if (matrix_ipt_to_lms_once != -1)
  {
    v37 = v5;
    v41 = v6;
    dispatch_once(&matrix_ipt_to_lms_once, &__block_literal_global_2933);
    v5 = v37;
    v6 = v41;
  }
  v7 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)matrix_ipt_to_lms_IPTToLMS, a2.f64[0]), (float64x2_t)xmmword_1EE645600, v5.f64[0]), (float64x2_t)xmmword_1EE645620, v6.f64[0]);
  v35 = vextq_s8(v7, v7, 8uLL).u64[0];
  v39 = v7.i64[0];
  v43 = vmlaq_f64(vmlaq_f64(vmulq_f64(a2, *(float64x2_t *)algn_1EE6455F0), v5, unk_1EE645610), v6, unk_1EE645630);
  v34 = (float64x2_t)_simd_pow_d2((simd_double2)vandq_s8(v7, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (simd_double2)vdupq_n_s64(0x40029ACA6B29ACA7uLL));
  v8 = (float64x2_t)_simd_pow_d2((simd_double2)(unint64_t)*(_OWORD *)&vabsq_f64(v43), (simd_double2)xmmword_1A17B6D40);
  if (matrix_lms_to_rgb_once != -1)
  {
    x = (simd_double2)v8;
    dispatch_once(&matrix_lms_to_rgb_once, &__block_literal_global_96);
    v8 = (float64x2_t)x;
  }
  v10.i64[0] = v39;
  *(_QWORD *)&v11.f64[0] = v39;
  *(_QWORD *)&v11.f64[1] = v35;
  v10.i64[1] = v35;
  v12 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
  v9.i64[0] = 0x8000000000000000;
  __asm { FMOV            V7.2D, #1.0 }
  v18 = vmulq_f64(v8, (float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v43), (int8x16_t)vcgtzq_f64(v43)), vorrq_s8(vandq_s8((int8x16_t)v43, v9), _Q7), (int8x16_t)0));
  v19 = vmulq_f64(v34, (float64x2_t)vandq_s8(vorrq_s8(vandq_s8(v10, v12), _Q7), vorrq_s8((int8x16_t)vcltzq_f64(v11), (int8x16_t)vcgtzq_f64(v11))));
  v20 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v19, *(float64x2_t *)algn_1EE645670), unk_1EE645690, v19, 1), v18, unk_1EE6456B0);
  v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)matrix_lms_to_rgb_LMSToRGB, v19.f64[0]), (float64x2_t)xmmword_1EE645680, v19, 1), (float64x2_t)xmmword_1EE6456A0, v18.f64[0]);
  v22 = (float64x2_t)vorrq_s8(vandq_s8((int8x16_t)v20, v9), _Q7);
  v40 = (float64x2_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f64(v20), (int8x16_t)vcgtzq_f64(v20)), (int8x16_t)v22, (int8x16_t)0);
  v44 = (float64x2_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v21, v12), _Q7), vorrq_s8((int8x16_t)vcltzq_f64(v21), (int8x16_t)vcgtzq_f64(v21)));
  v31 = vabsq_f64(v20);
  xa = (simd_double2)vabsq_f64(v21);
  v22.f64[0] = 12.92;
  v36 = (int8x16_t)vmulq_f64(v31, v22);
  v30 = _simd_pow_d2((simd_double2)vandq_s8((int8x16_t)v21, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL)), (simd_double2)vdupq_n_s64(0x3FDAAAAACE754379uLL));
  v23 = (float64x2_t)_simd_pow_d2((simd_double2)*(unint64_t *)&v31.f64[0], (simd_double2)xmmword_1A17B6D50);
  v24.f64[0] = 1.055;
  v25.f64[0] = -0.055;
  v26 = (int8x16_t)vmlaq_f64(v25, v24, v23);
  v27 = (float64x2_t)vdupq_n_s64(0x3FF0E147AE147AE1uLL);
  v28 = (int8x16_t)vmlaq_f64((float64x2_t)vdupq_n_s64(0xBFAC28F5C28F5C29), v27, (float64x2_t)v30);
  v27.f64[0] = 0.0031308;
  result = vmulq_f64(v40, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)vcgtq_f64(v31, v27).u64[0]), v26, v36));
  *a1 = vmulq_f64(v44, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vcgtq_f64((float64x2_t)xa, (float64x2_t)vdupq_n_s64(0x3F69A5C37387B719uLL))), v28, (int8x16_t)vmulq_f64((float64x2_t)xa, (float64x2_t)vdupq_n_s64(0x4029D70A3D70A3D7uLL))));
  a1[1] = result;
  return result;
}

double __matrix_lms_to_rgb_block_invoke()
{
  double result;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  __invert_d3();
  xmmword_1EE645680 = v3;
  unk_1EE645690 = v4;
  xmmword_1EE6456A0 = v5;
  unk_1EE6456B0 = v6;
  result = *(double *)&v1;
  matrix_lms_to_rgb_LMSToRGB = v1;
  *(_OWORD *)algn_1EE645670 = v2;
  return result;
}

double __matrix_ipt_to_lms_block_invoke()
{
  double result;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  __invert_d3();
  xmmword_1EE645600 = v3;
  unk_1EE645610 = v4;
  xmmword_1EE645620 = v5;
  unk_1EE645630 = v6;
  result = *(double *)&v1;
  matrix_ipt_to_lms_IPTToLMS = v1;
  *(_OWORD *)algn_1EE6455F0 = v2;
  return result;
}

void sub_1A172E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _AuxiliaryImageCVPixelBufferReleaseBytesCallback_3094(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr;
  v6 = getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr;
  if (!getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = __getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke;
    v2[3] = &unk_1E45A3198;
    v2[4] = &v3;
    __getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1A1732120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (ImageIOLibraryCore_frameworkLibrary)
  {
    v2 = (void *)ImageIOLibraryCore_frameworkLibrary;
  }
  else
  {
    ImageIOLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)ImageIOLibraryCore_frameworkLibrary;
    if (!ImageIOLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "kCGImageAuxiliaryDataInfoPixelBuffer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getkCGImageAuxiliaryDataInfoPixelBufferSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void PFCGImageApplyTemporaryAVAssetImageGeneratorColorSpaceWorkaround(CGImageRef *a1)
{
  CGColorSpace *ColorSpace;
  CGColorSpace *v3;
  CGColorSpace *v4;
  CGImageRef CopyWithColorSpace;

  ColorSpace = CGImageGetColorSpace(*a1);
  if (CGColorSpaceUsesITUR_2100TF(ColorSpace))
  {
    v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
    if (v3)
    {
      v4 = v3;
      CopyWithColorSpace = CGImageCreateCopyWithColorSpace(*a1, v3);
      CFRelease(*a1);
      *a1 = CopyWithColorSpace;
      CFRelease(v4);
    }
  }
}

id PFStoryColorGradeKindToString(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = 0;
  v2 = ColorGradeKindInfos;
  while (1)
  {
    v3 = *v2;
    v2 += 2;
    if (v3 == a1)
      break;
    if (++v1 == 13)
      return 0;
  }
  return (id)ColorGradeKindInfos[2 * v1 + 1];
}

uint64_t PFStoryColorGradeKindNamed(void *a1)
{
  id v1;
  uint64_t v2;
  id *v3;
  id v4;
  void *v5;
  char v6;
  uint64_t v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = 0;
  v3 = (id *)&qword_1E45A25D8;
  do
  {
    v4 = *v3;
    if (v4 == v1)
    {

LABEL_9:
      v7 = ColorGradeKindInfos[2 * v2];
      goto LABEL_10;
    }
    v5 = v4;
    v6 = objc_msgSend(v4, "isEqualToString:", v1);

    if ((v6 & 1) != 0)
      goto LABEL_9;
    ++v2;
    v3 += 2;
  }
  while (v2 != 13);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v9 = 138412290;
    v10 = v1;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "unsupported color grade kind '%@'", (uint8_t *)&v9, 0xCu);
  }
  v7 = 0;
LABEL_10:

  return v7;
}

uint64_t PFStoryColorGradeKindGetTier(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0xA)
    return 0;
  else
    return qword_1A17B6F88[a1 - 2];
}

uint64_t PFStoryColorGradeKindGetEnergy(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0xA)
    return 0;
  else
    return qword_1A17B6FE0[a1 - 2];
}

uint64_t PFStoryColorGradeKindDefaultForColorGradeCategory(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("silly")) & 1) != 0)
      goto LABEL_3;
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("extreme")) & 1) != 0)
    {
      v3 = 9;
      goto LABEL_10;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("energetic")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("motivational")) & 1) != 0)
    {
      v3 = 8;
      goto LABEL_10;
    }
    if ((objc_msgSend(v2, "isEqualToString:", CFSTR("inspirational")) & 1) != 0
      || (objc_msgSend(v2, "isEqualToString:", CFSTR("playful")) & 1) != 0)
    {
LABEL_3:
      v3 = 7;
    }
    else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("epic")) & 1) != 0)
    {
      v3 = 6;
    }
    else
    {
      if ((objc_msgSend(v2, "isEqualToString:", CFSTR("hopeful")) & 1) != 0)
        goto LABEL_19;
      if ((objc_msgSend(v2, "isEqualToString:", CFSTR("sentimental")) & 1) != 0)
      {
        v3 = 5;
        goto LABEL_10;
      }
      if ((objc_msgSend(v2, "isEqualToString:", CFSTR("romantic")) & 1) != 0)
      {
LABEL_19:
        v3 = 4;
        goto LABEL_10;
      }
      if ((objc_msgSend(v2, "isEqualToString:", CFSTR("peaceful")) & 1) != 0)
      {
        v3 = 10;
      }
      else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("nostalgic")) & 1) != 0)
      {
        v3 = 11;
      }
      else if (objc_msgSend(v2, "isEqualToString:", CFSTR("reflective")))
      {
        v3 = 12;
      }
      else
      {
        v3 = 0;
      }
    }
  }
  else
  {
    v3 = 0;
  }
LABEL_10:

  return v3;
}

void sub_1A1734684(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1A17354C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 216), 8);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__74(uint64_t a1)
{

}

void sub_1A1735EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x1A1B0CFA4](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1A1737024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A17375D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3588(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3589(uint64_t a1)
{

}

void sub_1A17388B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x1A1738814);
  }
  _Unwind_Resume(a1);
}

void sub_1A1738D4C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);

    objc_end_catch();
    JUMPOUT(0x1A1738CACLL);
  }
  _Unwind_Resume(a1);
}

BOOL PFPosterWantsLowLuminanceContent()
{
  void *v0;
  char v1;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PI_PARALLAX_FORCE_ENABLE_LOW_LUMINANCE"));

  if ((v1 & 1) != 0)
    return 1;
  if (PFPosterDeviceSupportsLowLuminance_onceToken != -1)
    dispatch_once(&PFPosterDeviceSupportsLowLuminance_onceToken, &__block_literal_global_3730);
  return PFPosterDeviceSupportsLowLuminance_supportsLowLuminance != 0;
}

uint64_t PFPosterDeviceSupportsSegmentation()
{
  return MGGetBoolAnswer();
}

uint64_t PFPosterEnableSettlingEffect()
{
  return _os_feature_enabled_impl();
}

uint64_t PFPosterEnableHeadroom()
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PI_DISABLE_HEADROOM"));

  return _os_feature_enabled_impl() & (v1 ^ 1);
}

uint64_t PFPosterEnableSmartTextColor()
{
  return _os_feature_enabled_impl();
}

uint64_t PFPosterEnableCropVariant()
{
  void *v0;
  int v1;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PI_POSTER_DISABLE_CROP_VARIANT"));

  return _os_feature_enabled_impl() & (v1 ^ 1);
}

void sub_1A173B90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173C694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173D944(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1A173DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3988(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3989(uint64_t a1)
{

}

void sub_1A173F2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173FA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173FEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A173FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A1741160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double PFDeviceScreenSize()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "bounds");
    v3 = v2;
  }
  else
  {
    v3 = -1.0;
  }

  return v3;
}

double PFDeviceNativeScreenSize()
{
  void *v0;
  void *v1;
  double v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "nativeSize");
    v3 = v2;
  }
  else
  {
    v3 = -1.0;
  }

  return v3;
}

double PFDeviceScreenScale()
{
  void *v0;
  void *v1;
  void *v2;
  double v3;

  objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "currentMode");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (double)(unint64_t)objc_msgSend(v2, "preferredScale");

  }
  else
  {
    v3 = 1.0;
  }

  return v3;
}

double PFDeviceLockScreenFocusAreaRectNormalized()
{
  if (PFDeviceLockScreenFocusAreaRectNormalized_onceToken[0] != -1)
    dispatch_once(PFDeviceLockScreenFocusAreaRectNormalized_onceToken, &__block_literal_global_4261);
  return *(double *)&PFDeviceLockScreenFocusAreaRectNormalized_sDeviceLockScreenFocusAreaRect_0;
}

id getSBSWallpaperServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getSBSWallpaperServiceClass_softClass;
  v7 = getSBSWallpaperServiceClass_softClass;
  if (!getSBSWallpaperServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getSBSWallpaperServiceClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getSBSWallpaperServiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A17428F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSBSWallpaperServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!SpringBoardServicesLibraryCore_frameworkLibrary)
  {
    SpringBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!SpringBoardServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("SBSWallpaperService");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  getSBSWallpaperServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double PFDeviceLockScreenApproximateTimeRectNormalized_SBS(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  id v4;
  NSObject *v5;
  dispatch_time_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  id v13;
  void *v14;
  NSObject *v15;
  id v16;
  void *v17;
  _QWORD v19[4];
  _QWORD v20[4];
  _QWORD v21[4];
  NSObject *v22;
  uint8_t *v23;
  uint8_t v24[8];
  double *v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v1 = a1;
  v32 = *MEMORY[0x1E0C80C00];
  if (a1 != 1)
  {
    if (a1 == 2)
    {
      v1 = 4;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v24 = 0;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "interface orientation is unknown", v24, 2u);
      }
      v1 = 0;
    }
  }
  *(_QWORD *)v24 = 0;
  v25 = (double *)v24;
  v26 = 0x4010000000;
  v27 = &unk_1A17D2676;
  v2 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v28 = *MEMORY[0x1E0C9D648];
  v29 = v2;
  v3 = dispatch_group_create();
  v4 = objc_alloc_init((Class)getSBSWallpaperServiceClass());
  dispatch_group_enter(v3);
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = __PFDeviceLockScreenApproximateTimeRectNormalized_SBS_block_invoke;
  v21[3] = &unk_1E45A2D10;
  v23 = v24;
  v5 = v3;
  v22 = v5;
  objc_msgSend(v4, "fetchLimitedOcclusionBoundsForOrientation:completionHandler:", v1, v21);
  v6 = dispatch_time(0, 3000000000);
  dispatch_group_wait(v5, v6);
  v8 = v25[6];
  v7 = v25[7];
  v9 = v25[4] + v8 * 0.0;
  v10 = v25[5] + v7 * 0.0;
  v11 = v7 * 1.33333333;
  v12 = MEMORY[0x1E0C81028];
  v13 = MEMORY[0x1E0C81028];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(double *)v20 = v9;
    *(double *)&v20[1] = v10;
    *(double *)&v20[2] = v8;
    *(double *)&v20[3] = v11;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v20, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v31 = v14;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized_SBS] Time rect from limited occlusion bounds: %@", buf, 0xCu);

  }
  objc_msgSend(v4, "invalidate");
  v15 = MEMORY[0x1E0C81028];
  v16 = MEMORY[0x1E0C81028];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(double *)v19 = v9;
    *(double *)&v19[1] = v10;
    *(double *)&v19[2] = v8;
    *(double *)&v19[3] = v11;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v19, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v31 = v17;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized_SBS] Returning: %@", buf, 0xCu);

  }
  _Block_object_dispose(v24, 8);
  return v9;
}

void sub_1A1742D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double PFDeviceLockScreenApproximateTimeRectNormalized(uint64_t a1)
{
  void *v2;
  double v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  id v7;
  uint64_t v8;
  id *v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  void *v20;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 buf;
  void *v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  CGRect v33;

  v32 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = &v24;
  v26 = 0x2050000000;
  v2 = (void *)getPRUISPosterLayoutUtilitiesClass_softClass;
  v27 = getPRUISPosterLayoutUtilitiesClass_softClass;
  if (!getPRUISPosterLayoutUtilitiesClass_softClass)
  {
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v29 = __getPRUISPosterLayoutUtilitiesClass_block_invoke;
    v30 = &unk_1E45A3198;
    v31 = &v24;
    __getPRUISPosterLayoutUtilitiesClass_block_invoke((uint64_t)&buf);
    v2 = (void *)v25[3];
  }
  v3 = *MEMORY[0x1E0C9D648];
  v4 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v5 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  v6 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v7 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v24, 8);
  if (v7 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a1 == 2)
      v8 = 4;
    else
      v8 = 1;
    v24 = 0;
    v25 = &v24;
    v26 = 0x2020000000;
    v9 = (id *)getPRPosterRoleLockScreenSymbolLoc_ptr;
    v27 = getPRPosterRoleLockScreenSymbolLoc_ptr;
    if (!getPRPosterRoleLockScreenSymbolLoc_ptr)
    {
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3221225472;
      v29 = __getPRPosterRoleLockScreenSymbolLoc_block_invoke;
      v30 = &unk_1E45A3198;
      v31 = &v24;
      __getPRPosterRoleLockScreenSymbolLoc_block_invoke((uint64_t)&buf);
      v9 = (id *)v25[3];
    }
    _Block_object_dispose(&v24, 8);
    if (!v9)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    v10 = *v9;
    v23 = 0;
    objc_msgSend(v7, "titleBoundsForLayout:orientation:role:error:", 0, v8, v10, &v23);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v23;
    if (v11)
    {
      objc_msgSend(v11, "rectValue");
      v3 = v13;
      v4 = v14;
      v5 = v15;
      v6 = v16;
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "PFDeviceLockScreenApproximateTimeRect: PRUISPosterLayoutUtilities.getTitleBounds returned an error: %{public}@", (uint8_t *)&buf, 0xCu);
    }

  }
  v33.origin.x = v3;
  v33.origin.y = v4;
  v33.size.width = v5;
  v33.size.height = v6;
  if (CGRectIsEmpty(v33))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "PFDeviceLockScreenApproximateTimeRect: Falling back to SBS", (uint8_t *)&buf, 2u);
    }
    v3 = PFDeviceLockScreenApproximateTimeRectNormalized_SBS(a1);
    v4 = v17;
    v5 = v18;
    v6 = v19;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(double *)v22 = v3;
    *(CGFloat *)&v22[1] = v4;
    *(CGFloat *)&v22[2] = v5;
    *(CGFloat *)&v22[3] = v6;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v22, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v20;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[PFDeviceLockScreenApproximateTimeRectNormalized] Returning: %@", (uint8_t *)&buf, 0xCu);

  }
  return v3;
}

void sub_1A17431BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPRUISPosterLayoutUtilitiesClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!PosterBoardUIServicesLibraryCore_frameworkLibrary)
    PosterBoardUIServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("PRUISPosterLayoutUtilities");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPRUISPosterLayoutUtilitiesClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getPRPosterRoleLockScreenSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (PosterKitLibraryCore_frameworkLibrary)
  {
    v2 = (void *)PosterKitLibraryCore_frameworkLibrary;
  }
  else
  {
    PosterKitLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)PosterKitLibraryCore_frameworkLibrary;
    if (!PosterKitLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "PRPosterRoleLockScreen");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getPRPosterRoleLockScreenSymbolLoc_ptr = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void PFFrameApplyingContentsRectInBounds(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  double v25;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  double v35;
  CGFloat v36;
  CGRect v38;
  CGRect v39;

  if (a9 > 0.0
    && a7 != 0.0
    && a8 != 0.0
    && (a7 != *MEMORY[0x1E0D71130] || a8 != *(double *)(MEMORY[0x1E0D71130] + 8)))
  {
    v34 = *MEMORY[0x1E0D71130];
    v31 = *(double *)(MEMORY[0x1E0D71130] + 8);
    if (!CGRectIsEmpty(*(CGRect *)&a1))
    {
      v25 = a3 * a9;
      if (a3 * a9 != 0.0 && a4 != 0.0 && (v25 != v34 || a4 != v31))
      {
        v32 = a2 + 0.0 + a4 * 0.5;
        v35 = a1 * a9 + 0.0 + v25 * 0.5;
        PFSizeWithAspectRatioFittingSize();
        v28 = v27;
        v30 = v29;
        v33 = v32 + v29 * -0.5;
        v36 = v35 + v27 * -0.5;
        v38.origin.x = a5;
        v38.origin.y = a6;
        v38.size.width = a7;
        v38.size.height = a8;
        CGRectGetWidth(v38);
        v39.origin.x = v36;
        v39.origin.y = v33;
        v39.size.width = v28;
        v39.size.height = v30;
        CGRectGetWidth(v39);
      }
    }
  }
}

void PFStoryRecipeLibraryKindEnumerateSupportedValuesUsingBlock(void *a1)
{
  id v1;
  id v2;
  void (**v3)(_QWORD, _QWORD);
  _QWORD v4[4];
  id v5;
  _QWORD *v6;
  _QWORD v7[3];
  char v8;

  v1 = a1;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __PFStoryRecipeLibraryKindEnumerateSupportedValuesUsingBlock_block_invoke;
  v4[3] = &unk_1E45A2D80;
  v6 = v7;
  v2 = v1;
  v5 = v2;
  v3 = (void (**)(_QWORD, _QWORD))MEMORY[0x1A1B0CFA4](v4);
  v3[2](v3, 1);

  _Block_object_dispose(v7, 8);
}

void sub_1A1743824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A17448A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a71;
  uint64_t v71;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v71 - 256), 8);
  _Block_object_dispose((const void *)(v71 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4423(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4424(uint64_t a1)
{

}

void sub_1A1746020(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A17465E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4526(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4527(uint64_t a1)
{

}

size_t pf_estimateFullAnimatedImageMemoryCost(CGImageSource *a1)
{
  size_t Count;
  const __CFDictionary *v3;
  CGImage *ImageAtIndex;
  CGImage *v5;
  size_t Height;
  size_t v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  Count = CGImageSourceGetCount(a1);
  v9 = *MEMORY[0x1E0CBD240];
  v10[0] = MEMORY[0x1E0C9AAA0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, v3);
  if (ImageAtIndex)
  {
    v5 = ImageAtIndex;
    Height = CGImageGetHeight(ImageAtIndex);
    v7 = Height * Count * CGImageGetBytesPerRow(v5);
    CGImageRelease(v5);
  }
  else
  {
    v7 = 20971521;
  }

  return v7;
}

void sub_1A174778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A1747C4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1A1747F28(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void PIImageMedataSetValueMatchingImageProperty(CGImageMetadata *a1, const __CFString *a2, const __CFString *a3, void *a4)
{
  id v7;
  NSObject *v8;
  int v9;
  const __CFString *v10;
  __int16 v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  if (!CGImageMetadataSetValueMatchingImageProperty(a1, a2, a3, v7))
  {
    PFMetadataBuilderLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = 138543875;
      v10 = a2;
      v11 = 2114;
      v12 = a3;
      v13 = 2113;
      v14 = v7;
      _os_log_error_impl(&dword_1A16EE000, v8, OS_LOG_TYPE_ERROR, "[XMP metadata builder] Failed to set value for dictionary name %{public}@ key %{public}@ value %{private}@", (uint8_t *)&v9, 0x20u);
    }

  }
}

id PFMetadataBuilderLog()
{
  if (PFMetadataBuilderLog_onceToken[0] != -1)
    dispatch_once(PFMetadataBuilderLog_onceToken, &__block_literal_global_4903);
  return (id)PFMetadataBuilderLog_log;
}

id PFStoryDurationInfoDescription(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  CMTime v8;

  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  v8 = *(CMTime *)(a1 + 24);
  __PFStoryDurationInfoDescription_block_invoke(&v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(CMTime *)a1;
  __PFStoryDurationInfoDescription_block_invoke(&v8);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(CMTime *)(a1 + 48);
  __PFStoryDurationInfoDescription_block_invoke(&v8);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v2, "initWithFormat:", CFSTR("{ pref: %@, min: %@, max: %@ }"), v3, v4, v5);

  return v6;
}

const __CFString *PFStringFromPFAdjustmentStyleCast(int a1)
{
  if (a1 < 16)
  {
    if (a1 <= 0xF)
      return off_1E45A3060[(unsigned __int16)a1];
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Invalid type %d: %s"), (unsigned __int16)a1, "NSString *PFStringFromPFAdjustmentStyleCast(PFAdjustmentStyleCast)");
  }
  return CFSTR("PFAdjustmentStyleCastLAST");
}

id PFStringFromPFAdjustmentStyleCastShort(int a1)
{
  __CFString *v1;
  __CFString *v2;
  void *v3;
  void *v4;

  if (a1 >= 16)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("Invalid type %d: %s"), (unsigned __int16)a1, "NSString *PFStringFromPFAdjustmentStyleCast(PFAdjustmentStyleCast)");
LABEL_5:
    v1 = CFSTR("PFAdjustmentStyleCastLAST");
    goto LABEL_6;
  }
  if (a1 > 0xF)
    goto LABEL_5;
  v1 = off_1E45A3060[(unsigned __int16)a1];
LABEL_6:
  v2 = v1;
  -[__CFString substringFromIndex:](v2, "substringFromIndex:", objc_msgSend(CFSTR("PFAdjustmentStyleCast"), "length"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lowercaseString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t PFAdjustmentStyleCastFromString(void *a1)
{
  void *v1;
  unsigned __int16 v2;
  void *v3;
  char v4;
  unsigned int v5;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = 0;
  while (1)
  {
    PFStringFromPFAdjustmentStyleCastShort((__int16)v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v1, "isEqualToString:", v3);

    if ((v4 & 1) != 0)
      break;
    v5 = v2++;
    if (v5 >= 0xF)
    {
      v2 = 0;
      break;
    }
  }

  return (__int16)v2;
}

id PFGMTTimeZone()
{
  if (PFGMTTimeZone_onceToken[0] != -1)
    dispatch_once(PFGMTTimeZone_onceToken, &__block_literal_global_5086);
  return (id)PFGMTTimeZone_gmtTimeZone;
}

id PFDateFormatterForTimeZone(void *a1)
{
  return PFDateFormatterForTimeZoneAndFormat(a1, CFSTR("yyyy:MM:dd HH:mm:ss"));
}

id PFDateFormatterForTimeZoneAndFormat(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;

  v3 = a1;
  v4 = a2;
  if (PFDateFormatterForTimeZoneAndFormat_onceToken != -1)
    dispatch_once(&PFDateFormatterForTimeZoneAndFormat_onceToken, &__block_literal_global_2);
  objc_msgSend((id)PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    v5 = (void *)objc_opt_new();
    objc_msgSend((id)PFDateFormatterForTimeZoneAndFormat_dateFormattersByTimeZone, "setObject:forKeyedSubscript:", v5, v3);
  }
  v6 = (__CFString *)v4;
  v7 = v6;
  if (v6)
    v8 = v6;
  else
    v8 = CFSTR("yyyy:MM:dd HH:mm:ss");
  objc_msgSend(v5, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v9)
  {
    v9 = (void *)objc_opt_new();
    objc_msgSend(v9, "setCalendar:", PFDateFormatterForTimeZoneAndFormat_calendar);
    objc_msgSend(v9, "setDateFormat:", v8);
    objc_msgSend(v9, "setTimeZone:", v3);
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v9, v8);
  }

  return v9;
}

id PFLocalDateFromGMTDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99E80];
  v2 = a1;
  objc_msgSend(v1, "localTimeZone");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PFDateFromGMTDateTimeZone(v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PFDateFromGMTDateTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  objc_msgSend(v3, "dateByAddingTimeInterval:", (double)objc_msgSend(a2, "secondsFromGMTForDate:", v3));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PFGMTDateFromLocalDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0C99E80];
  v2 = a1;
  objc_msgSend(v1, "localTimeZone");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PFGMTDateFromDateTimeZone(v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PFGMTDateFromDateTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  objc_msgSend(v3, "dateByAddingTimeInterval:", (double)-objc_msgSend(a2, "secondsFromGMTForDate:", v3));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PFTimeZoneDateFromGMTDate(void *a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  objc_msgSend(v3, "dateByAddingTimeInterval:", (double)objc_msgSend(a2, "secondsFromGMTForDate:", v3));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PFDateFromStringTimeZoneFormat(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (onceToken != -1)
    dispatch_once(&onceToken, &__block_literal_global_6);
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__5093;
  v23 = __Block_byref_object_dispose__5094;
  v24 = 0;
  v8 = dateQueue;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __PFDateFromStringTimeZoneFormat_block_invoke_8;
  v14[3] = &unk_1E45A4540;
  v15 = v6;
  v16 = v7;
  v17 = v5;
  v18 = &v19;
  v9 = v5;
  v10 = v7;
  v11 = v6;
  dispatch_sync(v8, v14);
  v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v12;
}

uint64_t __Block_byref_object_copy__5093(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5094(uint64_t a1)
{

}

id PFDateFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  PFGMTTimeZone();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  PFDateFromStringTimeZoneFormat(v1, v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PFStringFromDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  PFGMTTimeZone();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  PFStringFromDateTimeZoneFormat(v1, v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PFStringFromDateTimeZoneFormat(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (onceToken != -1)
    dispatch_once(&onceToken, &__block_literal_global_9);
  v19 = 0;
  v20 = &v19;
  v21 = 0x3032000000;
  v22 = __Block_byref_object_copy__5093;
  v23 = __Block_byref_object_dispose__5094;
  v24 = 0;
  v8 = dateQueue;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __PFStringFromDateTimeZoneFormat_block_invoke_2;
  v14[3] = &unk_1E45A4540;
  v15 = v6;
  v16 = v7;
  v17 = v5;
  v18 = &v19;
  v9 = v5;
  v10 = v7;
  v11 = v6;
  dispatch_sync(v8, v14);
  v12 = (id)v20[5];

  _Block_object_dispose(&v19, 8);
  return v12;
}

id getVNObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNObservationClass_softClass;
  v7 = getVNObservationClass_softClass;
  if (!getVNObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getVNEspressoModelImageprintClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNEspressoModelImageprintClass_softClass;
  v7 = getVNEspressoModelImageprintClass_softClass;
  if (!getVNEspressoModelImageprintClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNEspressoModelImageprintClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNEspressoModelImageprintClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getVNEspressoModelImageprintClass_block_invoke(uint64_t a1)
{
  VisionLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("VNEspressoModelImageprint");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNEspressoModelImageprintClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    VisionLibrary();
  }
}

void VisionLibrary()
{
  void *v0;

  if (!VisionLibraryCore_frameworkLibrary)
  {
    VisionLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!VisionLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getVNObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;
  id v5;

  VisionLibrary();
  result = objc_getClass("VNObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[PFCameraMetadataJSONDebugSerialization vnObjectPlaceholderForObject:](v3, v4, v5);
  }
  return result;
}

void sub_1A174D748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

Class __getVNFeaturePrintObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNFeaturePrintObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNFeaturePrintObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)getVNSceneObservationClass(v3);
  }
  return result;
}

id getVNSceneObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNSceneObservationClass_softClass;
  v7 = getVNSceneObservationClass_softClass;
  if (!getVNSceneObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNSceneObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNSceneObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getVNClassificationObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNClassificationObservationClass_softClass;
  v7 = getVNClassificationObservationClass_softClass;
  if (!getVNClassificationObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNClassificationObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNClassificationObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNPixelBufferObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNPixelBufferObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNPixelBufferObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)getVNSaliencyImageObservationClass(v3);
  }
  return result;
}

id getVNSaliencyImageObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNSaliencyImageObservationClass_softClass;
  v7 = getVNSaliencyImageObservationClass_softClass;
  if (!getVNSaliencyImageObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNSaliencyImageObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNSaliencyImageObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174DA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNDetectedObjectObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNDetectedObjectObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNDetectedObjectObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getVNRectangleObservationClass_block_invoke(v3);
  }
  return result;
}

Class __getVNRectangleObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNRectangleObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNRectangleObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)getVNRecognizedObjectObservationClass(v3);
  }
  return result;
}

id getVNRecognizedObjectObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNRecognizedObjectObservationClass_softClass;
  v7 = getVNRecognizedObjectObservationClass_softClass;
  if (!getVNRecognizedObjectObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNRecognizedObjectObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNRecognizedObjectObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_PFCameraMetadataAVMetadataObject *__getVNRecognizedObjectObservationClass_block_invoke(uint64_t a1)
{
  _PFCameraMetadataAVMetadataObject *result;
  uint64_t v3;

  VisionLibrary();
  result = (_PFCameraMetadataAVMetadataObject *)objc_getClass("VNRecognizedObjectObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNRecognizedObjectObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return __getVNSaliencyImageObservationClass_block_invoke(v3);
  }
  return result;
}

_PFCameraMetadataAVMetadataObject *__getVNSaliencyImageObservationClass_block_invoke(uint64_t a1)
{
  _PFCameraMetadataAVMetadataObject *result;
  uint64_t v3;

  VisionLibrary();
  result = (_PFCameraMetadataAVMetadataObject *)objc_getClass("VNSaliencyImageObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNSaliencyImageObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return __getVNClassificationObservationClass_block_invoke(v3);
  }
  return result;
}

_PFCameraMetadataAVMetadataObject *__getVNClassificationObservationClass_block_invoke(uint64_t a1)
{
  _PFCameraMetadataAVMetadataObject *result;
  uint64_t v3;

  VisionLibrary();
  result = (_PFCameraMetadataAVMetadataObject *)objc_getClass("VNClassificationObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNClassificationObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return __getVNSceneObservationClass_block_invoke(v3);
  }
  return result;
}

_PFCameraMetadataAVMetadataObject *__getVNSceneObservationClass_block_invoke(uint64_t a1)
{
  _PFCameraMetadataAVMetadataObject *result;
  _PFCameraMetadataAVMetadataObject *v3;
  SEL v4;
  id v5;
  int v6;
  CGRect v7;

  VisionLibrary();
  result = (_PFCameraMetadataAVMetadataObject *)objc_getClass("VNSceneObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNSceneObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (_PFCameraMetadataAVMetadataObject *)abort_report_np();
    return -[_PFCameraMetadataAVMetadataObject initWithType:bounds:confidence:](v3, v4, v5, v7, v6);
  }
  return result;
}

id getVNFaceObservationClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVNFaceObservationClass_softClass;
  v7 = getVNFaceObservationClass_softClass;
  if (!getVNFaceObservationClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getVNFaceObservationClass_block_invoke;
    v3[3] = &unk_1E45A3198;
    v3[4] = &v4;
    __getVNFaceObservationClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1A174EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNFaceObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  SEL v4;

  VisionLibrary();
  result = objc_getClass("VNFaceObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNFaceObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (void *)abort_report_np();
    return (Class)+[PFCameraMetadata supportsSecureCoding](v3, v4);
  }
  return result;
}

void sub_1A174FDCC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x360], 8);
  _Unwind_Resume(a1);
}

Class __getVNImageAestheticsObservationClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNImageAestheticsObservation");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNImageAestheticsObservationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__84__PFCameraMetadataSerialization_deserializedMetadataFromCameraClientMetadata_error___block_invoke(v3);
  }
  return result;
}

void sub_1A17501A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getVNFaceprintClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  VisionLibrary();
  result = objc_getClass("VNFaceprint");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNFaceprintClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getVNFaceTorsoprintClass_block_invoke(v3);
  }
  return result;
}

PFMetadataImage *__getVNFaceTorsoprintClass_block_invoke(uint64_t a1)
{
  PFMetadataImage *result;
  PFMetadataImage *v3;
  SEL v4;
  id v5;
  id v6;
  unsigned __int16 v7;
  id v8;
  BOOL v9;
  BOOL v10;

  VisionLibrary();
  result = (PFMetadataImage *)objc_getClass("VNFaceTorsoprint");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVNFaceTorsoprintClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (PFMetadataImage *)abort_report_np();
    return -[PFMetadataImage initWithImageURL:contentType:options:timeZoneLookup:cacheImageSource:cacheImageData:](v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return result;
}

void sub_1A1752E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5748(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5749(uint64_t a1)
{

}

__CFString *operator||(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;

  switch(a1)
  {
    case 3:
      v2 = CFSTR("headroom");
      v3 = CFSTR("h");
      break;
    case 2:
      v2 = CFSTR("target");
      v3 = CFSTR("t");
      break;
    case 1:
      v2 = CFSTR("none");
      v3 = CFSTR("n");
      break;
    default:
      return CFSTR("-");
  }
  if (a2)
    v2 = (__CFString *)v3;
  return v2;
}

__CFString *OverlapStrategyDescription(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;
  __CFString *v4;

  switch(a1)
  {
    case 1:
      v2 = CFSTR("none");
      v3 = CFSTR("n");
      goto LABEL_8;
    case 2:
      v2 = CFSTR("target");
      v3 = CFSTR("t");
      goto LABEL_8;
    case 3:
      v2 = CFSTR("avoid");
      v3 = CFSTR("a");
      goto LABEL_8;
    case 4:
      v2 = CFSTR("fmdavoid");
      v3 = CFSTR("m");
LABEL_8:
      if (a2)
        v2 = (__CFString *)v3;
      v4 = v2;
      break;
    default:
      v4 = CFSTR("-");
      break;
  }
  return v4;
}

__CFString *ParallaxStrategyDescription(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;

  if (a1 == 1)
  {
    v2 = CFSTR("off");
    v3 = CFSTR("n");
  }
  else
  {
    if (a1 != 2)
      return CFSTR("-");
    v2 = CFSTR("on");
    v3 = CFSTR("p");
  }
  if (a2)
    v2 = (__CFString *)v3;
  return v2;
}

__CFString *InactiveStrategyDescription(uint64_t a1, int a2)
{
  __CFString *v2;
  const __CFString *v3;

  if (a1 == 2)
  {
    v2 = CFSTR("avoid");
    v3 = CFSTR("i");
  }
  else
  {
    if (a1 != 1)
      return CFSTR("-");
    v2 = CFSTR("none");
    v3 = CFSTR("n");
  }
  if (a2)
    v2 = (__CFString *)v3;
  return v2;
}

const __CFString *PFPosterClassificationName(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("person");
  else
    return off_1E45A32E8[a1];
}

uint64_t PFPosterClassificationNamed(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("person")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pet")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("nature")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cityscape")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("other")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PFParallaxLayoutClockLayerOrderNamed(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  v2 = CFSTR("ClockAboveForeground");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ClockAboveForeground")) & 1) == 0
    && objc_msgSend(v1, "isEqualToString:", CFSTR("ClockAboveBackground")))
  {
    v2 = CFSTR("ClockAboveBackground");
  }

  return v2;
}

void sub_1A175D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A175F364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A175F678(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1A175F978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va1);
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1A175FB38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A175FBFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A175FCC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A175FDCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A175FF34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A17604DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v15;
  uint64_t v16;

  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error reading SceneTaxonomy index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A1760400);
  }
  _Unwind_Resume(a1);
}

void sub_1A1760844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  char *result;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  *a4 = 0;
  if (a3)
  {
    v7 = (char *)&v33 - (char *)&v29;
    do
    {
      if (*(_QWORD *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v34, a2, *(_QWORD *)(a2 + 24));
        if (v34 == 1)
          v8 = 0;
        else
          v8 = (char *)&v34 + v34;
        v9 = *(_QWORD *)v8;
        v10 = v8 - (char *)&v33;
        if (v9 == 1)
          v10 = 0;
        v11 = v10 + v9;
        v13 = (char *)&v33 - (char *)&v31;
        v12 = (char *)&v33 - (char *)&v32;
        if (v11 == 1)
          v12 = 0;
        v14 = v12 + v11;
        v32 = v14;
        v33 = v11;
        if (v11 == 1)
          v13 = 0;
        if (v14 == 1)
          v15 = 0;
        else
          v15 = (char *)&v32 + v14;
        v16 = *((_QWORD *)v15 + 2);
        v17 = v15 + 16 - (char *)&v34;
        if (v16 == 1)
          v17 = 0;
        v34 = v17 + v16;
        v31 = v13 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v31);
        v18 = v34;
        v19 = (char *)&v34 - (char *)&v33;
        if (v34 == 1)
          v19 = 0;
        while (1)
        {
          v20 = v19 + v18;
          v33 = v20;
          if (v20 == 1)
            break;
          v21 = (char *)&v33 + v20;
          if (v20 + v7 == 1)
            v21 = 0;
          v22 = *((_QWORD *)v21 + 2);
          v29 = v20 + v7;
          v23 = v21 + 16 - (char *)&v30;
          if (v22 == 1)
            v23 = 0;
          v30 = v23 + v22;
          v24 = v20 + (char *)&v33 - (char *)&v28;
          v28 = v24;
          if (v24 == 1)
            v25 = 0;
          else
            v25 = (char *)&v28 - (char *)&v34;
          v34 = v25 + v24;
          std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v34);
          v18 = v30;
          if (v30 == 1)
            v19 = 0;
          else
            v19 = (char *)&v30 - (char *)&v33;
        }
        result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets((_QWORD *)a2);
        *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
        *(_QWORD *)(a2 + 32) = 0;
      }
      if ((*(_BYTE *)a2 & 2) != 0)
        __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
      a2 += 64;
      v27 = *a4 + 1;
      *a4 = v27;
    }
    while (v27 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;

  v2 = *a2;
  v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(_QWORD *)result == 1)
      v5 = 0;
    else
      v5 = &result[*(_QWORD *)result];
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets(_QWORD *a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  v3 = a1[7];
  v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1)
    v4 = 0;
  v9 = v4 + v3;
  v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    v7 = a1[1];
    if (v7 == 1)
      v8 = 0;
    else
      v8 = (char *)a1 + v7 + 8;
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

_BYTE *boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  _BYTE *result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  *a4 = 0;
  if (a3)
  {
    v7 = (char *)&v32 - (char *)&v28;
    do
    {
      if (*(_QWORD *)(a2 + 56) != 1)
      {
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v31, a2, *(_QWORD *)(a2 + 24));
        if (v31 == 1)
          v8 = 0;
        else
          v8 = (char *)&v31 + v31;
        v9 = *(_QWORD *)v8;
        v10 = v8 - (char *)&v32;
        if (v9 == 1)
          v10 = 0;
        v11 = v10 + v9;
        v12 = (char *)&v32 - (char *)&v30;
        if (v11 == 1)
          v12 = 0;
        v13 = v12 + v11;
        v30 = v13;
        if (v11 == 1)
          v14 = 0;
        else
          v14 = (char *)&v32 - (char *)&v29;
        if (v13 == 1)
          v15 = 0;
        else
          v15 = (char *)&v30 + v13;
        v16 = v15 + 304;
        v17 = *((_QWORD *)v15 + 38);
        v18 = v16 - (char *)&v31;
        if (v17 == 1)
          v18 = 0;
        v31 = v18 + v17;
        v32 = v11;
        v29 = v14 + v11;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a2 + 16), &v29);
        while (1)
        {
          v19 = v31 == 1 ? 0 : (char *)&v31 - (char *)&v32;
          v20 = v19 + v31;
          v32 = v19 + v31;
          if (v19 + v31 == 1)
            break;
          v28 = v20 + v7;
          if (v20 + v7 == 1)
            v21 = 0;
          else
            v21 = (char *)&v32 + v20;
          v22 = v21 + 304;
          v23 = *((_QWORD *)v21 + 38);
          v24 = v22 - (char *)&v31;
          if (v23 == 1)
            v24 = 0;
          v31 = v24 + v23;
          v27 = (char *)&v32 - (char *)&v27 + v20;
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(a2, (char *)&v27);
        }
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((_QWORD *)a2);
        *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
        *(_QWORD *)(a2 + 32) = 0;
      }
      result = boost::unordered::detail::functions<boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>::~functions((_BYTE *)a2);
      v26 = *a4 + 1;
      *a4 = v26;
      a2 += 64;
    }
    while (v26 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;

  v2 = *a2;
  v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(_QWORD *)result == 1)
      v5 = 0;
    else
      v5 = &result[*(_QWORD *)result];
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(uint64_t a1, char *a2)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v7;

  if (*(_QWORD *)a2 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)&a2[*(_QWORD *)a2];
  std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(v4);
  v5 = a2 - (char *)&v7;
  if (*(_QWORD *)a2 == 1)
    v5 = 0;
  v7 = v5 + *(_QWORD *)a2;
  return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v7);
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets(_QWORD *a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  v3 = a1[7];
  v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1)
    v4 = 0;
  v9 = v4 + v3;
  v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    v7 = a1[1];
    if (v7 == 1)
      v8 = 0;
    else
      v8 = (char *)a1 + v7 + 8;
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(uint64_t a1)
{
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 240);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 176);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(a1 + 112);
  return boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(a1);
}

_BYTE *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 56) != 1)
  {
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v28, a1, *(_QWORD *)(a1 + 24));
    if (v28 == 1)
      v2 = 0;
    else
      v2 = (char *)&v28 + v28;
    v3 = *(_QWORD *)v2;
    v4 = v2 - (char *)&v27;
    if (v3 == 1)
      v4 = 0;
    v5 = v4 + v3;
    v6 = (char *)&v27 - (char *)&v26;
    v7 = (char *)&v27 - (char *)&v25;
    if (v5 == 1)
      v6 = 0;
    v8 = v6 + v5;
    v26 = v8;
    v27 = v5;
    v9 = (char *)&v26 + v8;
    if (v5 == 1)
      v7 = 0;
    if (v8 == 1)
      v9 = 0;
    v10 = *((_QWORD *)v9 + 1);
    v11 = v9 + 8 - (char *)&v28;
    if (v10 == 1)
      v11 = 0;
    v28 = v11 + v10;
    v25 = v7 + v5;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v25);
    v12 = (char *)&v28 - (char *)&v27;
    if (v28 == 1)
      v12 = 0;
    v13 = v12 + v28;
    v27 = v12 + v28;
    if (v12 + v28 != 1)
    {
      v14 = (char *)&v27 - (char *)&v23;
      do
      {
        v15 = (char *)&v27 + v13;
        if (v13 + v14 == 1)
          v15 = 0;
        v16 = *((_QWORD *)v15 + 1);
        v23 = v13 + v14;
        v17 = v15 + 8 - (char *)&v24;
        if (v16 == 1)
          v17 = 0;
        v24 = v17 + v16;
        v18 = v13 + (char *)&v27 - (char *)&v22;
        v22 = v18;
        if (v18 == 1)
          v19 = 0;
        else
          v19 = (char *)&v22 - (char *)&v28;
        v28 = v19 + v18;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100]((char *)(a1 + 16), &v28);
        if (v24 == 1)
          v20 = 0;
        else
          v20 = (char *)&v24 - (char *)&v27;
        v13 = v20 + v24;
        v27 = v20 + v24;
      }
      while (v20 + v24 != 1);
    }
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets((_QWORD *)a1);
    *(_OWORD *)(a1 + 48) = xmmword_1A17B6C70;
    *(_QWORD *)(a1 + 32) = 0;
  }
  return boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions((_BYTE *)a1);
}

_BYTE *boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions(_BYTE *result)
{
  if ((*result & 2) != 0)
    __assert_rtn("~functions", "implementation.hpp", 2781, "!(current_ & 2)");
  return result;
}

char *std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](char *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;

  v2 = *a2;
  v3 = (uint64_t)a2 + *a2;
  if (v2 != 1 && v3 != 0)
  {
    if (*(_QWORD *)result == 1)
      v5 = 0;
    else
      v5 = &result[*(_QWORD *)result];
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v5, v3);
  }
  return result;
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets(_QWORD *a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  result = (char *)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v10, (uint64_t)a1, a1[3] + 1);
  v3 = a1[7];
  v4 = (char *)(a1 + 7) - (char *)&v9;
  if (v3 == 1)
    v4 = 0;
  v9 = v4 + v3;
  v5 = (char *)&v9 + v4 + v3;
  if (v4 + v3 != 1 && v5 != 0)
  {
    v7 = a1[1];
    if (v7 == 1)
      v8 = 0;
    else
      v8 = (char *)a1 + v7 + 8;
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v8, (uint64_t)v5);
  }
  return result;
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;

  *a4 = 0;
  if (a3)
  {
    do
    {
      v7 = a2 + 32;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(a2);
      v8 = *a4 + 1;
      *a4 = v8;
      a2 = v7;
    }
    while (v8 < a3);
  }
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

void sub_1A1761274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1A1761334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  int64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  _BYTE v40[8];
  uint64_t v41;

  v4 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_45;
  v6 = (*(_QWORD *)(a2 + 24) - 1) & a3;
  result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v41, a2, v6);
  v7 = (char *)&v41 + v41;
  if (v41 == 1)
    v7 = 0;
  v8 = *(_QWORD *)v7;
  v9 = v7 - v40;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  if (v10 == 1)
    goto LABEL_45;
  v11 = &v40[v10];
  if (v10 + v40 - v39 == 1)
    v11 = 0;
  v12 = v11 + 304;
  v13 = *((_QWORD *)v11 + 38);
  v14 = v12 - (_BYTE *)&v38;
  if (v13 == 1)
    v14 = 0;
  v15 = v14 + v13;
  v38 = v14 + v13;
  if (v14 + v13 == 1)
  {
LABEL_45:
    v33 = 1;
  }
  else
  {
    v16 = (char *)&v38 - (char *)&v37;
    while (1)
    {
      v37 = v15 + v16;
      v17 = v15 + v16 == 1 ? 0 : &v39[v15 - 8];
      result = (uint64_t *)std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()[abi:ne180100](a4, (uint64_t)v17);
      if ((_DWORD)result)
        break;
      v18 = (char *)&v38 - (char *)&v36;
      if (v15 == 1)
        v18 = 0;
      v36 = v18 + v15;
      if (v18 + v15 == 1)
        v19 = 0;
      else
        v19 = (char *)&v36 + v18 + v15;
      if ((*((_QWORD *)v19 + 39) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        v20 = (char *)&v38 - (char *)&v35;
        if (v15 == 1)
          v20 = 0;
        v21 = v20 + v15;
        v35 = v21;
        v22 = v21 == 1 ? 0 : (char *)&v35 - v39;
        v23 = v22 + v21;
        while (1)
        {
          if (v23 == 1)
            v24 = 0;
          else
            v24 = v39 - v40;
          v25 = v24 + v23;
          if (v25 == 1)
            v26 = 0;
          else
            v26 = &v40[v25];
          v27 = v26 + 304;
          v28 = *((_QWORD *)v26 + 38);
          v29 = v27 - (_BYTE *)&v41;
          if (v28 == 1)
            v29 = 0;
          v30 = v29 + v28;
          v31 = v30 == 1 ? 0 : (char *)&v41 - v39;
          v23 = v31 + v30;
          if (v23 == 1)
            break;
          if ((*(_QWORD *)&v39[v23 + 312] & 0x8000000000000000) == 0)
          {
            v32 = v39 - (_BYTE *)&v38;
            goto LABEL_44;
          }
        }
        v32 = 0;
LABEL_44:
        v15 = v32 + v23;
        v38 = v32 + v23;
        if (v32 + v23 != 1)
          continue;
      }
      goto LABEL_45;
    }
    v34 = (_BYTE *)((char *)&v38 - (char *)v4);
    if (v15 == 1)
      v34 = 0;
    v33 = (uint64_t)&v34[v15];
  }
  *v4 = v33;
  return result;
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::find_node_impl<unsigned long long,std::equal_to<unsigned long long>>(uint64_t *result, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[8];
  _BYTE v37[8];
  uint64_t v38;

  v4 = result;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_13;
  v6 = a3 % *(_QWORD *)(a2 + 24);
  result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v38, a2, v6);
  if (v38 == 1)
    v7 = 0;
  else
    v7 = (char *)&v38 + v38;
  v8 = *(_QWORD *)v7;
  v9 = v7 - v37;
  if (v8 == 1)
    v9 = 0;
  v10 = v9 + v8;
  if (v10 == 1)
    goto LABEL_13;
  v11 = &v37[v10];
  if (v10 + v37 - v36 == 1)
    v11 = 0;
  v12 = *((_QWORD *)v11 + 2);
  v13 = v11 + 16 - (_BYTE *)&v35;
  if (v12 == 1)
    v13 = 0;
  v14 = v13 + v12;
  v35 = v13 + v12;
  if (v13 + v12 == 1)
  {
LABEL_13:
    v15 = 1;
  }
  else
  {
    v16 = (char *)&v35 - (char *)&v34;
    v17 = (char *)&v35 - (char *)&v33;
    v18 = *a4;
    result = (uint64_t *)(v36 - v37);
    v15 = 1;
    while (1)
    {
      v34 = v14 + v16;
      v19 = &v36[v14 - 8];
      v20 = v14 + v16 == 1 ? 0 : &v36[v14 - 8];
      if (v18 == *v20)
        break;
      v33 = v14 + v17;
      if (v14 + v17 == 1)
        v19 = 0;
      if ((*((_QWORD *)v19 + 3) & 0x7FFFFFFFFFFFFFFFLL) == v6)
      {
        v21 = (char *)&v35 - (char *)&v32 + v14;
        v32 = v21;
        v22 = v21 == 1 ? 0 : (char *)&v32 - v36;
        v23 = v22 + v21;
        while (1)
        {
          if (v23 == 1)
            v24 = 0;
          else
            v24 = v36 - v37;
          v25 = v24 + v23;
          if (v25 == 1)
            v26 = 0;
          else
            v26 = &v37[v25];
          v27 = *((_QWORD *)v26 + 2);
          v28 = v26 + 16 - (_BYTE *)&v38;
          if (v27 == 1)
            v28 = 0;
          v29 = v28 + v27;
          v30 = v29 == 1 ? 0 : (char *)&v38 - v36;
          v23 = v30 + v29;
          if (v23 == 1)
            break;
          if ((*(_QWORD *)&v36[v23 + 24] & 0x8000000000000000) == 0)
          {
            v31 = v36 - (_BYTE *)&v35;
            goto LABEL_42;
          }
        }
        v31 = 0;
LABEL_42:
        v14 = v31 + v23;
        v35 = v14;
        if (v14 != 1)
          continue;
      }
      goto LABEL_14;
    }
    v15 = (char *)&v35 - (char *)v4 + v14;
  }
LABEL_14:
  *v4 = v15;
  return result;
}

void sub_1A1761848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL PFSceneTaxonomyNodeEqual(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  return !v2 && a1 == a2;
}

BOOL PFSceneTaxonomyNodeSceneIdEqual(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = 0;
  if (a1)
  {
    if (a2)
      return *a1 == *a2;
  }
  return result;
}

unint64_t PFSceneTaxonomyNodeHash(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = a1[9];
  if (v2 == 1)
    v3 = 0;
  else
    v3 = (uint64_t)a1 + v2 + 72;
  return boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(v3) ^ v1;
}

id PFSceneTaxonomyNodeDescription(uint64_t *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint8_t *v17;
  uint8_t buf[4];
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1[9];
    v5 = (uint64_t)a1 + v4 + 72;
    if (v4 == 1)
      v5 = 0;
    if ((*(_BYTE *)(v5 + 8) & 1) != 0)
    {
      v8 = v5 - (_QWORD)buf + 9;
    }
    else
    {
      v6 = *(_QWORD *)(v5 + 24);
      v7 = v5 + 24 - (_QWORD)buf;
      if (v6 == 1)
        v7 = 0;
      v8 = v7 + v6;
    }
    v10 = (void *)MEMORY[0x1E0CB3940];
    v11 = *a1;
    v12 = *((unsigned __int8 *)a1 + 12);
    v13 = a1[2];
    PFSceneTaxonomyNodeLocalizedLabel((pf::SceneTaxonomyNode *)a1, a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    PFSceneTaxonomyNodeLocalizedSynonyms((pf::SceneTaxonomyNode *)a1, a2);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = (void *)v15;
    v17 = &buf[v8];
    if (v8 == 1)
      v17 = 0;
    objc_msgSend(v10, "stringWithFormat:", CFSTR("<PFSceneTaxonomyNodeRef: %p> sceneClassId:%lu name:%s indexed:%d searchThreshold:%f label:%@ synonyms:%@, parents:%lu, children:%lu"), a1, v11, v17, v12, v13, v14, v15, a1[14], a1[22]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "NSString * _Nullable PFSceneTaxonomyNodeDescription(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomy *const "
            "__strong _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
    }
    v9 = 0;
  }
  return v9;
}

void sub_1A1761A78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id PFSceneTaxonomyNodeLocalizedLabel(pf::SceneTaxonomyNode *a1, void *a2)
{
  uint64_t v4;
  char *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  void *v15;
  void *v16;
  int v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v17 = 136446210;
      v18 = "NSString * _Nullable PFSceneTaxonomyNodeLocalizedLabel(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomy *con"
            "st __strong _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v17, 0xCu);
    }
    return 0;
  }
  if (pf::SceneTaxonomyNode::isRoot(a1))
    return 0;
  v4 = *((_QWORD *)a1 + 9);
  if (v4 == 1)
    v5 = 0;
  else
    v5 = (char *)a1 + v4 + 72;
  v6 = objc_alloc(MEMORY[0x1E0CB3940]);
  v7 = v5[8];
  if ((v7 & 1) != 0)
  {
    if (v5 + 9 - (char *)&v17 == 1)
      v13 = 0;
    else
      v13 = v5 + 9;
  }
  else
  {
    v10 = *((_QWORD *)v5 + 3);
    v9 = v5 + 24;
    v8 = v10;
    v11 = v9 - (char *)&v17;
    if (v10 == 1)
      v11 = 0;
    v12 = v11 + v8;
    if (v12 == 1)
      v13 = 0;
    else
      v13 = (char *)&v17 + v12;
    v7 = *((_QWORD *)v9 - 2);
  }
  v15 = (void *)objc_msgSend(v6, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v13, v7 >> 1, 4, 0);
  objc_msgSend(a2, "localizedStringForKey:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1A1761BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id PFSceneTaxonomyNodeLocalizedSynonyms(pf::SceneTaxonomyNode *a1, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v10 = 136446210;
      v11 = "NSArray<NSString *> * _Nullable PFSceneTaxonomyNodeLocalizedSynonyms(PFSceneTaxonomyNodeRef _Nonnull, PFScen"
            "eTaxonomy *const __strong _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v10, 0xCu);
    }
    return 0;
  }
  if (pf::SceneTaxonomyNode::isRoot(a1))
    return 0;
  PFSceneTaxonomyNodeNameInternal((uint64_t)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingString:", CFSTR("-synonyms"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a2, "localizedStringForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v6)
  {
    objc_msgSend(v6, "componentsSeparatedByString:", CFSTR("|"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1A1761D34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL pf::SceneTaxonomyNode::isRoot(pf::SceneTaxonomyNode *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE v8[8];

  if (*(_QWORD *)this)
    return 0;
  v2 = *((_QWORD *)this + 9);
  if (v2 == 1)
    v3 = 0;
  else
    v3 = (char *)this + v2 + 72;
  if ((v3[8] & 1) == 0)
  {
    if ((*((_QWORD *)v3 + 1) & 0xFFFFFFFFFFFFFFFELL) == 0x10)
    {
      v4 = *((_QWORD *)v3 + 3);
      v5 = v3 + 24 - v8;
      if (v4 == 1)
        v5 = 0;
      v6 = v5 + v4;
      goto LABEL_13;
    }
    return 0;
  }
  if ((v3[8] & 0xFE) != 0x10)
    return 0;
  v6 = v3 - v8 + 9;
LABEL_13:
  if (v6 == 1)
    v7 = 0;
  else
    v7 = &v8[v6];
  return *v7 == 0x7C5F544F4F525F7CLL;
}

id PFSceneTaxonomyNodeNameInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 72);
    if (v1 == 1)
      v2 = 0;
    else
      v2 = v1 + a1 + 72;
    v3 = objc_alloc(MEMORY[0x1E0CB3940]);
    v4 = *(unsigned __int8 *)(v2 + 8);
    if ((v4 & 1) != 0)
    {
      if (v2 + 9 - (_QWORD)&v12 == 1)
        v10 = 0;
      else
        v10 = (char *)(v2 + 9);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 24);
      v6 = v2 + 24;
      v5 = v7;
      v8 = v6 - (_QWORD)&v12;
      if (v7 == 1)
        v8 = 0;
      v9 = v8 + v5;
      if (v9 == 1)
        v10 = 0;
      else
        v10 = (char *)&v12 + v9;
      v4 = *(_QWORD *)(v6 - 16);
    }
    return (id)objc_msgSend(v3, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v10, v4 >> 1, 4, 0);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v12 = 136446210;
      v13 = "NSString * _Nullable PFSceneTaxonomyNodeNameInternal(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
}

void PFSceneTaxonomyFillNodeData(pf::SceneTaxonomyNode *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  BOOL isRoot;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  __int128 v19;
  __int128 v20;
  double v21;
  int v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (this)
  {
    v4 = *(_QWORD *)this;
    v5 = *((_QWORD *)this + 9);
    if (v5 == 1)
      v6 = 0;
    else
      v6 = (char *)this + v5 + 72;
    if ((v6[8] & 1) != 0)
    {
      v9 = v6 - (char *)&v22 + 9;
    }
    else
    {
      v7 = *((_QWORD *)v6 + 3);
      v8 = v6 + 24 - (char *)&v22;
      if (v7 == 1)
        v8 = 0;
      v9 = v8 + v7;
    }
    if (v9 == 1)
      v10 = 0;
    else
      v10 = (char *)&v22 + v9;
    if (v4 >= 0x100000000)
      LODWORD(v11) = 0;
    else
      v11 = *(_QWORD *)this;
    v12 = *((unsigned int *)this + 2);
    v13 = *((_BYTE *)this + 12);
    isRoot = pf::SceneTaxonomyNode::isRoot(this);
    v15 = *((double *)this + 2);
    v16 = *((double *)this + 3);
    v17 = *((_QWORD *)this + 8);
    if (v16 >= v15)
      v18 = *((double *)this + 2);
    else
      v18 = *((double *)this + 3);
    v19 = *((_OWORD *)this + 2);
    v20 = *((_OWORD *)this + 3);
    if (*(double *)&v19 >= v18)
      v21 = v18;
    else
      v21 = *((double *)this + 4);
    *(_QWORD *)a2 = v10;
    *(_DWORD *)(a2 + 8) = v11;
    *(_DWORD *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = v12;
    *(_BYTE *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 33) = isRoot;
    *(_WORD *)(a2 + 38) = 0;
    *(_DWORD *)(a2 + 34) = 0;
    *(double *)(a2 + 40) = v15;
    *(double *)(a2 + 48) = v16;
    *(_OWORD *)(a2 + 56) = v19;
    *(_OWORD *)(a2 + 72) = v20;
    *(_QWORD *)(a2 + 88) = v17;
    *(double *)(a2 + 96) = v18;
    *(double *)(a2 + 104) = v21;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v22 = 136446210;
    v23 = "void PFSceneTaxonomyFillNodeData(PFSceneTaxonomyNodeRef _Nonnull, PFSceneTaxonomyNodeData * _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v22, 0xCu);
  }
}

uint64_t PFSceneTaxonomyNodeExtendedSceneClassId(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)a1;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "PFExtendedSceneClassId PFSceneTaxonomyNodeExtendedSceneClassId(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return -1;
}

uint64_t PFSceneTaxonomyNodeNetworkId(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(unsigned int *)(a1 + 8);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "PFSceneTaxonomyNetworkId PFSceneTaxonomyNodeNetworkId(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

id PFSceneTaxonomyNodeName(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 72);
    if (v1 == 1)
      v2 = 0;
    else
      v2 = v1 + a1 + 72;
    v3 = objc_alloc(MEMORY[0x1E0CB3940]);
    v4 = *(unsigned __int8 *)(v2 + 8);
    if ((v4 & 1) != 0)
    {
      if (v2 + 9 - (_QWORD)&v12 == 1)
        v10 = 0;
      else
        v10 = (char *)(v2 + 9);
    }
    else
    {
      v7 = *(_QWORD *)(v2 + 24);
      v6 = v2 + 24;
      v5 = v7;
      v8 = v6 - (_QWORD)&v12;
      if (v7 == 1)
        v8 = 0;
      v9 = v8 + v5;
      if (v9 == 1)
        v10 = 0;
      else
        v10 = (char *)&v12 + v9;
      v4 = *(_QWORD *)(v6 - 16);
    }
    return (id)objc_msgSend(v3, "initWithBytes:length:encoding:", v10, v4 >> 1, 4);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v12 = 136446210;
      v13 = "NSString * _Nullable PFSceneTaxonomyNodeName(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
}

char *PFSceneTaxonomyNodeString(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 72);
    v2 = v1 + a1 + 72;
    if (v1 == 1)
      v2 = 0;
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v5 = v2 - (_QWORD)&v7 + 9;
    }
    else
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = v2 + 24 - (_QWORD)&v7;
      if (v3 == 1)
        v4 = 0;
      v5 = v4 + v3;
    }
    if (v5 == 1)
      return 0;
    else
      return (char *)&v7 + v5;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v7 = 136446210;
      v8 = "const char *PFSceneTaxonomyNodeString(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
}

BOOL PFSceneTaxonomyNodeIsIndexed(uint64_t a1)
{
  _BOOL8 result;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_BYTE *)(a1 + 12) != 0;
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO);
  if (result)
  {
    v2 = 136446210;
    v3 = "BOOL PFSceneTaxonomyNodeIsIndexed(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
    return 0;
  }
  return result;
}

BOOL PFSceneTaxonomyNodeIsRoot(pf::SceneTaxonomyNode *a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return pf::SceneTaxonomyNode::isRoot(a1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "BOOL PFSceneTaxonomyNodeIsRoot(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

double PFSceneTaxonomyNodeSearchThreshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 16);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeSearchThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeHighRecallThreshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 32);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeHighRecallThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeHighPrecisionThreshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 24);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeHighPrecisionThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodePrecision0Point6Threshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 40);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodePrecision0Point6Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF0Point5Threshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 48);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeF0Point5Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF1Threshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 56);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeF1Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeF2Threshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(double *)(a1 + 64);
  v1 = 0.0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v3 = 136446210;
    v4 = "double PFSceneTaxonomyNodeF2Threshold(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
  }
  return v1;
}

double PFSceneTaxonomyNodeGraphHighPrecisionThreshold(uint64_t a1)
{
  double v1;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(double *)(a1 + 24) >= *(double *)(a1 + 16))
      return *(double *)(a1 + 16);
    else
      return *(double *)(a1 + 24);
  }
  else
  {
    v1 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v3 = 136446210;
      v4 = "double PFSceneTaxonomyNodeGraphHighPrecisionThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v3, 0xCu);
    }
  }
  return v1;
}

double PFSceneTaxonomyNodeGraphHighRecallThreshold(double *a1)
{
  double v1;
  double v2;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1[3];
    if (v1 >= a1[2])
      v1 = a1[2];
    if (a1[4] >= v1)
      return v1;
    else
      return a1[4];
  }
  else
  {
    v2 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v4 = 136446210;
      v5 = "double PFSceneTaxonomyNodeGraphHighRecallThreshold(PFSceneTaxonomyNodeRef _Nonnull)";
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v4, 0xCu);
    }
  }
  return v2;
}

uint64_t PFSceneTaxonomyNodeParentsCount(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 112);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "size_t PFSceneTaxonomyNodeParentsCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t PFSceneTaxonomyNodeChildrenCount(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 176);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "size_t PFSceneTaxonomyNodeChildrenCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

uint64_t PFSceneTaxonomyNodeDetectorsCount(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
    return *(_QWORD *)(a1 + 240);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2 = 136446210;
    v3 = "size_t PFSceneTaxonomyNodeDetectorsCount(PFSceneTaxonomyNodeRef _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v2, 0xCu);
  }
  return 0;
}

void PFSceneTaxonomyNodeTraverseParents(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    v6 = operator new(8uLL);
    *v6 = a1;
    v7 = v6 + 1;
    *(_QWORD *)&v12 = v6;
    v13 = v6 + 1;
    do
    {
      v8 = (void *)MEMORY[0x1A1B0CDDC]();
      v9 = *(v7 - 1);
      *((_QWORD *)&v12 + 1) = v7 - 1;
      pf::back_insert_node_set(v9 + 80, (void **)&v12);
      v10 = PFSceneTaxonomyVisitNode(v5, v9);
      objc_autoreleasePoolPop(v8);
      v7 = (_QWORD *)*((_QWORD *)&v12 + 1);
      if ((_QWORD)v12 == *((_QWORD *)&v12 + 1))
        v11 = 1;
      else
        v11 = v10;
    }
    while ((v11 & 1) == 0);
    if ((_QWORD)v12)
      operator delete((void *)v12);

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    LODWORD(v12) = 136446210;
    *(_QWORD *)((char *)&v12 + 4) = "void PFSceneTaxonomyNodeTraverseParents(PFSceneTaxonomyNodeRef _Nonnull, __strong PF"
                                    "SceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
  }

}

void sub_1A1762F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  _Unwind_Resume(a1);
}

void pf::back_insert_node_set(uint64_t a1, void **a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v5 = (_BYTE *)a2[1] - (_BYTE *)*a2;
    v6 = v2 + (v5 >> 3);
    if (v6 > ((_BYTE *)a2[2] - (_BYTE *)*a2) >> 3)
    {
      if (v6 >> 61)
LABEL_49:
        std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
      v7 = v5 >> 3;
      v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v6);
      v9 = &v8[8 * v7];
      v11 = &v8[8 * v10];
      v13 = (char *)*a2;
      v12 = (char *)a2[1];
      v14 = v9;
      if (v12 != *a2)
      {
        do
        {
          v15 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v12 != v13);
        v12 = (char *)*a2;
      }
      *a2 = v14;
      a2[1] = v9;
      a2[2] = v11;
      if (v12)
        operator delete(v12);
    }
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v40, a1);
    v39 = 1;
    v16 = (char *)&v40 + v40;
    if (v40 != 1 && v16 != 0)
    {
      v18 = (char *)a2[1];
      do
      {
        v19 = *(_QWORD *)v16;
        v20 = &v16[*(_QWORD *)v16];
        if (v19 == 1)
          v21 = 0;
        else
          v21 = v20;
        v22 = (unint64_t)a2[2];
        if ((unint64_t)v18 >= v22)
        {
          v23 = (v18 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v23 + 1) >> 61)
            goto LABEL_49;
          v24 = v22 - (_QWORD)*a2;
          v25 = v24 >> 2;
          if (v24 >> 2 <= (unint64_t)(v23 + 1))
            v25 = v23 + 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v26);
          else
            v27 = 0;
          v28 = (char *)(v26 + 8 * v23);
          *(_QWORD *)v28 = v21;
          v18 = v28 + 8;
          v30 = (char *)*a2;
          v29 = (char *)a2[1];
          if (v29 != *a2)
          {
            do
            {
              v31 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v28 - 1) = v31;
              v28 -= 8;
            }
            while (v29 != v30);
            v29 = (char *)*a2;
          }
          *a2 = v28;
          a2[1] = v18;
          a2[2] = (void *)(v26 + 8 * v27);
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v18 = v21;
          v18 += 8;
        }
        a2[1] = v18;
        if (v40 == 1)
          v32 = 0;
        else
          v32 = (char *)&v40 + v40;
        v33 = *((_QWORD *)v32 + 1);
        v34 = v32 + 8 - &v41;
        if (v33 == 1)
          v34 = 0;
        v35 = v34 + v33;
        if (v35 == 1)
          v36 = 0;
        else
          v36 = &v41 - (char *)&v40;
        v37 = v36 + v35;
        v40 = v37;
        if (v37 == 1)
          v16 = 0;
        else
          v16 = (char *)&v40 + v37;
        if (v39 == 1)
          v38 = 0;
        else
          v38 = (char *)&v39 + v39;
      }
      while (v16 != v38);
    }
  }
}

uint64_t PFSceneTaxonomyVisitNode(void *a1, uint64_t a2)
{
  uint64_t (**v3)(id, uint64_t, _BYTE **);
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  double v27;
  double v28;
  _BYTE v29[8];

  v3 = a1;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 72);
  if (v5 == 1)
    v6 = 0;
  else
    v6 = v5 + a2 + 72;
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    v9 = v6 - (_QWORD)v29 + 9;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = v6 + 24 - (_QWORD)v29;
    if (v7 == 1)
      v8 = 0;
    v9 = v8 + v7;
  }
  v20 = 0u;
  v21 = 0u;
  v10 = &v29[v9];
  if (v9 == 1)
    v10 = 0;
  v19 = v10;
  v11 = 0;
  if (v4 < 0x100000000)
    v11 = v4;
  LODWORD(v20) = v11;
  v12 = *(unsigned int *)(a2 + 8);
  *((_QWORD *)&v20 + 1) = v4;
  *(_QWORD *)&v21 = v12;
  BYTE8(v21) = *(_BYTE *)(a2 + 12);
  BYTE9(v21) = pf::SceneTaxonomyNode::isRoot((pf::SceneTaxonomyNode *)a2);
  v13 = *(double *)(a2 + 16);
  v14 = *(double *)(a2 + 24);
  v22 = v13;
  v23 = v14;
  v15 = *(_OWORD *)(a2 + 32);
  v16 = *(_OWORD *)(a2 + 48);
  v24 = v15;
  v25 = v16;
  if (v14 < v13)
    v13 = v14;
  v26 = *(_QWORD *)(a2 + 64);
  v27 = v13;
  if (*(double *)&v15 < v13)
    v13 = *(double *)&v15;
  v28 = v13;
  v17 = v3[2](v3, a2, &v19);

  return v17;
}

void sub_1A1763264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin(char *a1, uint64_t a2)
{
  uint64_t *result;
  char *v4;
  uint64_t v5;

  result = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(&v5, a2);
  v4 = (char *)((char *)&v5 - a1);
  if (v5 == 1)
    v4 = 0;
  *(_QWORD *)a1 = &v4[v5];
  return result;
}

void std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;

  v2 = result;
  if (*(_QWORD *)(a2 + 32))
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v12, a2, *(_QWORD *)(a2 + 24));
    if (v12 == 1)
      v3 = 0;
    else
      v3 = (char *)&v12 + v12;
    v4 = *(_QWORD *)v3;
    v5 = v3 - v11;
    if (v4 == 1)
      v5 = 0;
    v6 = v5 + v4;
    if (v6 == 1)
      v7 = 0;
    else
      v7 = &v11[v6];
    v8 = *((_QWORD *)v7 + 1);
    v9 = v7 + 8 - (_BYTE *)v2;
    if (v8 == 1)
      v9 = 0;
    v10 = v9 + v8;
  }
  else
  {
    v10 = 1;
  }
  *v2 = v10;
  return result;
}

void PFSceneTaxonomyNodeTraverseChildren(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    v6 = operator new(8uLL);
    *v6 = a1;
    v7 = v6 + 1;
    *(_QWORD *)&v12 = v6;
    v13 = v6 + 1;
    do
    {
      v8 = (void *)MEMORY[0x1A1B0CDDC]();
      v9 = *(v7 - 1);
      *((_QWORD *)&v12 + 1) = v7 - 1;
      pf::back_insert_node_set(v9 + 144, (void **)&v12);
      v10 = PFSceneTaxonomyVisitNode(v5, v9);
      objc_autoreleasePoolPop(v8);
      v7 = (_QWORD *)*((_QWORD *)&v12 + 1);
      if ((_QWORD)v12 == *((_QWORD *)&v12 + 1))
        v11 = 1;
      else
        v11 = v10;
    }
    while ((v11 & 1) == 0);
    if ((_QWORD)v12)
      operator delete((void *)v12);

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    LODWORD(v12) = 136446210;
    *(_QWORD *)((char *)&v12 + 4) = "void PFSceneTaxonomyNodeTraverseChildren(PFSceneTaxonomyNodeRef _Nonnull, __strong P"
                                    "FSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", (uint8_t *)&v12, 0xCu);
  }

}

void sub_1A17634F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitParents(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint8_t *v6;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 80);
    v18 = 1;
    v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        v8 = *(_QWORD *)v6;
        v9 = &v6[*(_QWORD *)v6];
        if (v8 == 1)
          v10 = 0;
        else
          v10 = (uint64_t)v9;
        if ((PFSceneTaxonomyVisitNode(v5, v10) & 1) != 0)
          break;
        if (v19 == 1)
          v11 = 0;
        else
          v11 = &buf[v19 - 8];
        v12 = *((_QWORD *)v11 + 1);
        v13 = v11 + 8 - buf;
        if (v12 == 1)
          v13 = 0;
        v14 = v13 + v12;
        v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        v16 = v15 + v14;
        v19 = v16;
        v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "void PFSceneTaxonomyNodeVisitParents(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }

}

void sub_1A17636AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitChildren(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint8_t *v6;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 144);
    v18 = 1;
    v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        v8 = *(_QWORD *)v6;
        v9 = &v6[*(_QWORD *)v6];
        if (v8 == 1)
          v10 = 0;
        else
          v10 = (uint64_t)v9;
        if ((PFSceneTaxonomyVisitNode(v5, v10) & 1) != 0)
          break;
        if (v19 == 1)
          v11 = 0;
        else
          v11 = &buf[v19 - 8];
        v12 = *((_QWORD *)v11 + 1);
        v13 = v11 + 8 - buf;
        if (v12 == 1)
          v13 = 0;
        v14 = v13 + v12;
        v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        v16 = v15 + v14;
        v19 = v16;
        v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "void PFSceneTaxonomyNodeVisitChildren(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }

}

void sub_1A1763848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PFSceneTaxonomyNodeVisitDetectors(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint8_t *v6;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = v3;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::begin((char *)&v19, a1 + 208);
    v18 = 1;
    v6 = &buf[v19 - 8];
    if (v19 != 1 && v6 != 0)
    {
      do
      {
        v8 = *(_QWORD *)v6;
        v9 = &v6[*(_QWORD *)v6];
        if (v8 == 1)
          v10 = 0;
        else
          v10 = (uint64_t)v9;
        if ((PFSceneTaxonomyVisitNode(v5, v10) & 1) != 0)
          break;
        if (v19 == 1)
          v11 = 0;
        else
          v11 = &buf[v19 - 8];
        v12 = *((_QWORD *)v11 + 1);
        v13 = v11 + 8 - buf;
        if (v12 == 1)
          v13 = 0;
        v14 = v13 + v12;
        v15 = v14 == 1 ? 0 : buf - (uint8_t *)&v19;
        v16 = v15 + v14;
        v19 = v16;
        v6 = v16 == 1 ? 0 : &buf[v16 - 8];
        v17 = v18 == 1 ? 0 : (char *)&v18 + v18;
      }
      while (v6 != (uint8_t *)v17);
    }

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v21 = "void PFSceneTaxonomyNodeVisitDetectors(PFSceneTaxonomyNodeRef _Nonnull, __strong PFSceneTaxonomyNodeRefVisitor _Nonnull)";
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomyErrorReturn in %{public}s.", buf, 0xCu);
  }

}

void sub_1A17639E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PFSceneTaxonomyEnumerateTopologicallyOrderedNodes(void *a1, void *a2)
{
  id v3;
  uint64_t (**v4)(id, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD v20[10];
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  double (*v25)(_QWORD *, _QWORD *);
  uint64_t (*v26)(uint64_t);
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = a1;
  v4 = a2;
  v22 = 0;
  v23 = &v22;
  v24 = 0x6012000000;
  v25 = __Block_byref_object_copy__6625;
  v26 = __Block_byref_object_dispose__6626;
  v27 = &unk_1A17D2676;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v5 = objc_msgSend(v3, "rootNodeRef");
  v6 = *((_QWORD *)&v28 + 1);
  if ((_QWORD)v29 == *((_QWORD *)&v28 + 1))
    v7 = 0;
  else
    v7 = (((_QWORD)v29 - *((_QWORD *)&v28 + 1)) << 6) - 1;
  v8 = *((_QWORD *)&v30 + 1);
  v9 = *((_QWORD *)&v30 + 1) + v30;
  if (v7 == *((_QWORD *)&v30 + 1) + (_QWORD)v30)
  {
    std::deque<void const*>::__add_back_capacity(&v28);
    v8 = *((_QWORD *)&v30 + 1);
    v6 = *((_QWORD *)&v28 + 1);
    v9 = v30 + *((_QWORD *)&v30 + 1);
  }
  *(_QWORD *)(*(_QWORD *)(v6 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = v5;
  *((_QWORD *)&v30 + 1) = v8 + 1;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x5812000000;
  v20[3] = __Block_byref_object_copy__150;
  v20[4] = __Block_byref_object_dispose__151;
  memset(&v20[5], 0, 40);
  v21 = 1065353216;
  v10 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v11 = v23;
    v12 = v23[11];
    if (!v12)
      break;
    v14 = v23[7];
    v13 = v23[8];
    v15 = ((v13 - v14) << 6) - 1;
    if (v13 == v14)
      v15 = 0;
    v16 = v12 - 1;
    v17 = v23[10] + v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v14 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF));
    v23[11] = v16;
    if (v15 - v17 >= 0x400)
    {
      operator delete(*(void **)(v13 - 8));
      v11[8] -= 8;
    }
    if ((v4[2](v4, v18) & 1) != 0)
      break;
    v19[0] = v10;
    v19[1] = 3221225472;
    v19[2] = __PFSceneTaxonomyEnumerateTopologicallyOrderedNodes_block_invoke;
    v19[3] = &unk_1E45A3408;
    v19[4] = &v22;
    v19[5] = v20;
    PFSceneTaxonomyNodeVisitChildren(v18, v19);
  }
  _Block_object_dispose(v20, 8);
  std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table((uint64_t)&v20[6]);
  _Block_object_dispose(&v22, 8);
  std::deque<void const*>::~deque[abi:ne180100]((uint64_t)&v28);

}

void sub_1A1763C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;

  _Block_object_dispose(&a28, 8);
  std::deque<void const*>::~deque[abi:ne180100](a10);

  _Unwind_Resume(a1);
}

double __Block_byref_object_copy__6625(_QWORD *a1, _QWORD *a2)
{
  double result;

  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  result = 0.0;
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  a1[10] = a2[10];
  a1[11] = a2[11];
  a2[10] = 0;
  a2[11] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__6626(uint64_t a1)
{
  return std::deque<void const*>::~deque[abi:ne180100](a1 + 48);
}

uint64_t __Block_byref_object_copy__150(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__151(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table(a1 + 48);
}

uint64_t std::__hash_table<std::__hash_value_type<void const*,unsigned long>,std::__unordered_map_hasher<void const*,std::__hash_value_type<void const*,unsigned long>,std::hash<void const*>,std::equal_to<void const*>,true>,std::__unordered_map_equal<void const*,std::__hash_value_type<void const*,unsigned long>,std::equal_to<void const*>,std::hash<void const*>,true>,std::allocator<std::__hash_value_type<void const*,unsigned long>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1A176427C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<void const*>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<void const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<void const*>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<void const*>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0x1000uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pf::SceneTaxonomyNode const*>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1A1764884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

const __CFString *PFPosterSettlingEffectGatingLevelDescription(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Default");
  if (a1 == 1)
    v1 = CFSTR("Interactive");
  if (a1 == 2)
    return CFSTR("Overnight");
  else
    return v1;
}

void sub_1A1767160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  __destructor_8_s0_sb8_s16((id *)va);
  _Unwind_Resume(a1);
}

uint64_t PFAppleArchiveEntryMessageProc(uint64_t a1, uint64_t a2, const char *a3)
{
  void *v5;
  void *v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  char v11;

  if (*a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFileSystemRepresentation:length:", a3, strlen(a3));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 16), "URLByAppendingPathComponent:", v6);
    v7 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = *(id *)(a1 + 16);
  }
  v11 = 0;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))() ^ 1;
  if (v11)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = v8;

  return v9;
}

void __destructor_8_s0_sb8_s16(id *a1)
{

}

void pf::SceneTaxonomyLineParser::~SceneTaxonomyLineParser(pf::SceneTaxonomyLineParser *this)
{
  *(_QWORD *)this = &off_1E45A0F30;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)this + 16);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 8);
  *((_QWORD *)this + 7) = 0;
}

{
  *(_QWORD *)this = &off_1E45A0F30;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory((uint64_t *)this + 16);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 8);
  *((_QWORD *)this + 7) = 0;
  JUMPOUT(0x1A1B0C908);
}

uint64_t pf::SceneTaxonomyLineParser::parseLine(pf::SceneTaxonomyLineParser *this, char *a2, unint64_t a3)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  uint32_t v6;
  int v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a3 > 1)
  {
    v7 = a2[1];
    if (v7 == 58)
    {
      v10 = *a2;
      v8 = a2 + 2;
      v9 = v10;
      if (v10 <= 100)
      {
        if (v9 == 99)
          return 1;
        if (v9 == 100)
          return pf::SceneTaxonomyLineParser::parseDetectors(this, v8);
      }
      else
      {
        switch(v9)
        {
          case 'e':
            return (uint64_t)pf::SceneTaxonomyLineParser::parseEdge(this, v8);
          case 'n':
            return pf::SceneTaxonomyLineParser::parseNode(this, v8);
          case 's':
            return pf::SceneTaxonomyLineParser::parseSHA(this, v8);
        }
      }
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v11 = 67109120;
      v12 = v9;
      v4 = MEMORY[0x1E0C81028];
      v5 = "unexpected line type, first character: %c";
    }
    else
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v11 = 67109120;
      v12 = v7;
      v4 = MEMORY[0x1E0C81028];
      v5 = "unexpected second character: %c (expected ':')";
    }
    v6 = 8;
    goto LABEL_22;
  }
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    LOWORD(v11) = 0;
    v4 = MEMORY[0x1E0C81028];
    v5 = "short line: expected 2 characters or longer";
    v6 = 2;
LABEL_22:
    _os_log_error_impl(&dword_1A16EE000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v11, v6);
    return 0;
  }
  return result;
}

_BYTE *pf::SceneTaxonomyLineParser::finalize(pf::SceneTaxonomyLineParser *this)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint8_t *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v30;
  _QWORD v31[2];
  _BYTE v32[80];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t buf[24];
  uint64_t v38;
  void *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  pf::SceneTaxonomyNode::SceneTaxonomyNode((uint64_t)v32, 0, 0, 0, (_QWORD *)this + 15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  v2 = *((_QWORD *)this + 20);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, "|_ROOT_|", (_QWORD *)this + 12);
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>((uint64_t)v31, v2, (uint64_t)buf, (uint64_t)buf, (uint64_t)v32);
  v3 = (_QWORD *)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
  if (v31[0] == 1)
    v4 = 0;
  else
    v4 = (char *)v31 + v31[0];
  *((_QWORD *)v4 + 13) = -104;
  v5 = *((_QWORD *)this + 20);
  if (!*(_QWORD *)(v5 + 32))
  {
    v14 = 1;
LABEL_18:
    v15 = 0;
    goto LABEL_19;
  }
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v3, v5, *(_QWORD *)(v5 + 24));
  if (*(_QWORD *)buf == 1)
    v6 = 0;
  else
    v6 = (char *)&buf[*(_QWORD *)buf];
  v7 = *(_QWORD *)v6;
  v8 = v6 - (char *)&v36;
  if (v7 == 1)
    v8 = 0;
  v9 = v8 + v7;
  if (v9 == 1)
    v10 = 0;
  else
    v10 = &buf[v9 - 8];
  v11 = v10 + 304;
  v12 = *((_QWORD *)v10 + 38);
  v13 = v11 - buf;
  if (v12 == 1)
    v13 = 0;
  v14 = v13 + v12;
  if (v14 == 1)
    goto LABEL_18;
  v15 = buf - (uint8_t *)&v30;
LABEL_19:
  v16 = v15 + v14;
  v30 = v16;
  v36 = 1;
  if (v16 != 1)
  {
    v17 = (char *)&v31[-1] + v16;
    if ((_QWORD *)((char *)&v31[-1] + v16))
    {
      v18 = 1;
      do
      {
        if (v17 != v4 && !*((_QWORD *)v17 + 18))
        {
          pf::SceneTaxonomyNode::addChild((pf::SceneTaxonomyNode *)(v4 + 32), (pf::SceneTaxonomyNode *)(v17 + 32));
          v16 = v30;
          v18 = v36;
        }
        if (v16 == 1)
          v19 = 0;
        else
          v19 = (char *)&v31[-1] + v16;
        v20 = v19 + 304;
        v21 = *((_QWORD *)v19 + 38);
        v22 = v20 - (char *)buf;
        if (v21 == 1)
          v22 = 0;
        v23 = v22 + v21;
        if (v23 == 1)
          v24 = 0;
        else
          v24 = buf - (uint8_t *)&v30;
        v16 = v24 + v23;
        v30 = v16;
        v17 = (char *)&v31[-1] + v16;
        if (v16 == 1)
          v17 = 0;
        v25 = (char *)&buf[v18 - 8];
        if (v18 == 1)
          v25 = 0;
      }
      while (v17 != v25);
    }
  }
  v26 = *((_QWORD *)this + 7);
  v27 = *(_QWORD *)(MEMORY[0x1E0DE4EF0] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)&buf[8] = vdupq_n_s64(4uLL);
  *(_QWORD *)buf = off_1E45A13D0;
  v38 = v27;
  v39 = &PF_SCENE_TAXONOMY_VERSION;
  boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v26, "version", (uint64_t)buf);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  v28 = PFChecksumArchiveData((char *)(*((_QWORD *)this + 7) - 8), *(_QWORD *)(*((_QWORD *)this + 7) + 48) + 8, *((char **)this + 3), *((_QWORD *)this + 4));
  **((_QWORD **)this + 5) = v28;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneTaxonomy checksum %016llx", buf, 0xCu);
  }
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v35);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v34);
  return boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v33);
}

void sub_1A1769FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pf::SceneTaxonomyNode::SceneTaxonomyNode(uint64_t a1, uint64_t a2, int a3, char a4, _QWORD *a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 12) = a4;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = a12;
  *(_QWORD *)(a1 + 72) = 1;
  v14 = a1 + 80;
  if (*a5 == 1)
    v15 = 0;
  else
    v15 = (char *)a5 + *a5;
  if (v15)
    v16 = v15 - (char *)&v22;
  else
    v16 = 1;
  v22 = v16;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(v14, &v22);
  if (*a5 == 1)
    v17 = 0;
  else
    v17 = (char *)a5 + *a5;
  if (v17)
    v18 = v17 - (char *)&v22;
  else
    v18 = 1;
  v22 = v18;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(a1 + 144, &v22);
  if (*a5 == 1)
    v19 = 0;
  else
    v19 = (char *)a5 + *a5;
  if (v19)
    v20 = v19 - (char *)&v22;
  else
    v20 = 1;
  v22 = v20;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(a1 + 208, &v22);
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  BOOL v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  int64_t v91;
  char *v92;
  uint64_t *v93;
  char *v94;
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  char *v98;
  int64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int64_t v121;
  int64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  int64_t v126;
  int64_t v127;
  char v128;
  uint64_t v129;
  int64_t v130;
  uint64_t *v131;
  _QWORD v132[3];
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[2];

  v10 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(a3);
  v11 = 265 * ((~v10 + (v10 << 21)) ^ ((~v10 + (v10 << 21)) >> 24));
  v12 = 2147483649u * ((21 * (v11 ^ (v11 >> 14))) ^ ((21 * (v11 ^ (v11 >> 14))) >> 28));
  result = (uint64_t)boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v129, a2, v12, a3);
  if (v129 == 1)
  {
    v131 = (uint64_t *)(a2 + 16);
    v132[0] = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v131);
    if (v132[0] == 1)
      v14 = 0;
    else
      v14 = (char *)v132 + v132[0];
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v14, a4);
    *((_OWORD *)v14 + 2) = *(_OWORD *)a5;
    v15 = *(_OWORD *)(a5 + 16);
    v16 = *(_OWORD *)(a5 + 32);
    v17 = *(_OWORD *)(a5 + 48);
    *((_QWORD *)v14 + 12) = *(_QWORD *)(a5 + 64);
    *((_OWORD *)v14 + 4) = v16;
    *((_OWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 3) = v15;
    v18 = *(_QWORD *)(a5 + 72);
    v19 = a5 + 72 - (_QWORD)(v14 + 104);
    if (v18 == 1)
      v19 = 0;
    *((_QWORD *)v14 + 13) = v19 + v18;
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 112), a5 + 80);
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 176), a5 + 144);
    boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set((uint64_t)(v14 + 240), a5 + 208);
    if (v132[0] == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v20 = (char *)v132 - (char *)&v126 + v132[0];
    v126 = v20;
    v21 = (char *)&v126 - (char *)&v130;
    if (v20 == 1)
      v21 = 0;
    v22 = v21 + v20;
    v130 = v22;
    v131 = (uint64_t *)(a2 + 16);
    v23 = (char *)&v130 - (char *)v132;
    if (v22 == 1)
      v23 = 0;
    v132[0] = v23 + v22;
    v24 = *(_QWORD *)(a2 + 32);
    v25 = v24 + 1;
    if (*(_QWORD *)(a2 + 56) == 1)
    {
      v26 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v25, *(float *)(a2 + 40));
      if (*(_QWORD *)(a2 + 24) <= v26)
        v27 = v26;
      else
        v27 = *(_QWORD *)(a2 + 24);
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(a2, v27);
    }
    else if (*(_QWORD *)(a2 + 48) < v25)
    {
      v32 = v24 + (v24 >> 1);
      if (v32 > v25)
        v25 = v32;
      v33 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v25, *(float *)(a2 + 40));
      if (v33 != *(_QWORD *)(a2 + 24))
      {
        if (*(_QWORD *)(a2 + 56) == 1)
          __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(a2, v33);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *(_QWORD *)(a2 + 24));
        v125 = v12;
        if (v139[0] == 1)
          v34 = 0;
        else
          v34 = (char *)v139 + v139[0];
        v35 = *(_QWORD *)v34;
        v36 = v34 - (char *)&v138;
        if (v35 == 1)
          v36 = 0;
        v37 = v36 + v35;
        v138 = v37;
        v38 = v37 == 1;
        v39 = (char *)&v139[-1] + v37;
        if (v37 == 1)
          v39 = 0;
        if (*((_QWORD *)v39 + 38) != 1)
        {
          v40 = (char *)&v135 - (char *)v139;
          do
          {
            v48 = !v38;
            v41 = 8;
            if (!v48)
              v41 = 0;
            v42 = v41 + v37;
            v137 = v42;
            if (v42 == 1)
              v43 = 0;
            else
              v43 = (char *)&v137 + v42;
            v44 = v43 + 304;
            v45 = *((_QWORD *)v43 + 38);
            v46 = v44 - (char *)v139;
            if (v45 == 1)
              v46 = 0;
            v47 = v46 + v45;
            v139[0] = v46 + v45;
            v48 = v46 + v45 == 1;
            v49 = 24;
            if (v48)
              v49 = 0;
            v50 = v49 + v47;
            v136 = v50;
            if (v48)
              v51 = 0;
            else
              v51 = (char *)v139 + v47;
            if (v48)
              v52 = 0;
            else
              v52 = (char *)v139 - (char *)&v134;
            if (v50 == 1)
              v53 = 0;
            else
              v53 = (char *)&v136 + v50;
            v54 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v53);
            v55 = 265 * ((~v54 + (v54 << 21)) ^ ((~v54 + (v54 << 21)) >> 24));
            v56 = (*(_QWORD *)(a2 + 24) - 1) & (2147483649u
                                                * ((21 * (v55 ^ (v55 >> 14))) ^ ((21 * (v55 ^ (v55 >> 14))) >> 28)));
            *((_QWORD *)v51 + 39) = v56 & 0x7FFFFFFFFFFFFFFFLL;
            v57 = v52 + v47;
            v58 = (char *)&v134 + v52 + v47;
            if (v52 + v47 == 1)
              v58 = 0;
            v59 = v58 + 304;
            v60 = *((_QWORD *)v58 + 38);
            v61 = v59 - (char *)&v135;
            if (v60 == 1)
              v61 = 0;
            v62 = v61 + v60;
            if (v62 != 1)
            {
              v63 = (char *)&v135 + v62;
              if (*(uint64_t *)((char *)&v135 + v62 + 312) < 0)
              {
                do
                {
                  v64 = v62 + v40;
                  if (v62 + v40 == 1)
                    v65 = 0;
                  else
                    v65 = v63;
                  *((_QWORD *)v65 + 39) = v56 | 0x8000000000000000;
                  if (v62 + v40 == 1)
                    v66 = 0;
                  else
                    v66 = (char *)v139 - (char *)&v134;
                  v57 = v66 + v64;
                  v67 = (char *)&v134 + v57;
                  if (v57 == 1)
                    v67 = 0;
                  v68 = v67 + 304;
                  v69 = *((_QWORD *)v67 + 38);
                  v70 = v68 - (char *)&v135;
                  if (v69 == 1)
                    v70 = 0;
                  v62 = v70 + v69;
                  if (v62 == 1)
                    break;
                  v63 = (char *)&v135 + v62;
                }
                while (*(uint64_t *)((char *)&v135 + v62 + 312) < 0);
                v139[0] = v64;
              }
            }
            v134 = v57;
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v135, a2, v56);
            v71 = (char *)&v135 + v135;
            if (v135 == 1)
              v71 = 0;
            if (*(_QWORD *)v71 == 1)
            {
              v72 = (char *)((char *)&v138 - v71);
              if (v138 == 1)
                v72 = 0;
              *(_QWORD *)v71 = &v72[v138];
              v73 = 1;
              if (v139[0] == 1)
                v73 = 0;
              v37 = v73 * 8 + v139[0];
              v138 = v73 * 8 + v139[0];
              v74 = (char *)&v139[v73 - 1] + v139[0];
            }
            else
            {
              if (v139[0] == 1)
                v75 = 0;
              else
                v75 = (char *)v139 + v139[0];
              v76 = *((_QWORD *)v75 + 38);
              v77 = v75 + 304 - (char *)&v133;
              if (v76 == 1)
                v77 = 0;
              v78 = v77 + v76;
              v133 = v78;
              if (*(_QWORD *)v71 == 1)
                v79 = 0;
              else
                v79 = &v71[*(_QWORD *)v71];
              v80 = v79 + 304;
              v81 = *((_QWORD *)v79 + 38);
              v82 = v80 - (v75 + 304);
              if (v81 == 1)
                v82 = 0;
              *((_QWORD *)v75 + 38) = v82 + v81;
              v37 = v138;
              v74 = (char *)&v139[-1] + v138;
              if (v138 == 1)
                v83 = 0;
              else
                v83 = (char *)&v139[-1] + v138;
              v84 = *(_QWORD *)v71;
              v85 = &v71[*(_QWORD *)v71];
              if (v84 == 1)
                v85 = 0;
              v86 = *((_QWORD *)v83 + 38);
              v87 = (char *)(v83 - v85);
              if (v86 == 1)
                v87 = 0;
              *((_QWORD *)v85 + 38) = &v87[v86];
              v88 = (char *)((char *)&v133 - (v83 + 304));
              if (v78 == 1)
                v88 = 0;
              *((_QWORD *)v83 + 38) = &v88[v78];
            }
            v38 = v37 == 1;
            if (v37 == 1)
              v74 = 0;
          }
          while (*((_QWORD *)v74 + 38) != 1);
        }
        v12 = v125;
      }
    }
    v89 = (char *)v132 - (char *)&v134;
    if (v132[0] == 1)
      v89 = 0;
    v134 = v89 + v132[0];
    v132[0] = 1;
    v90 = (*(_QWORD *)(a2 + 24) - 1) & v12;
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v138, a2, v90);
    v91 = v134;
    v92 = (char *)&v134 + v134;
    if (v134 == 1)
      v92 = 0;
    *((_QWORD *)v92 + 39) = v90 & 0x7FFFFFFFFFFFFFFFLL;
    if (v138 == 1)
      v93 = 0;
    else
      v93 = (_QWORD *)((char *)&v139[-1] + v138);
    if (*v93 == 1)
    {
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *(_QWORD *)(a2 + 24));
      if (v139[0] == 1)
        v94 = 0;
      else
        v94 = (char *)v139 + v139[0];
      v95 = *(_QWORD *)v94;
      v96 = v94 - (char *)&v137;
      if (v95 == 1)
        v96 = 0;
      v97 = v96 + v95;
      v137 = v97;
      v98 = (char *)&v137 + v97;
      if (v97 == 1)
        v98 = 0;
      if (*((_QWORD *)v98 + 38) != 1)
      {
        v99 = (char *)&v137 - (char *)&v135;
        if (v97 == 1)
          v99 = 0;
        v135 = v99 + v97;
        if (v99 + v97 == 1)
          v100 = 0;
        else
          v100 = (char *)&v135 + v99 + v97;
        v101 = v100 + 304;
        v102 = *((_QWORD *)v100 + 38);
        v103 = v101 - (char *)&v136;
        if (v102 == 1)
          v103 = 0;
        v104 = v103 + v102;
        v136 = v104;
        if (v104 == 1)
          v105 = 0;
        else
          v105 = (char *)&v136 + v104;
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v139, a2, *((_QWORD *)v105 + 39) & 0x7FFFFFFFFFFFFFFFLL);
        if (v139[0] == 1)
          v106 = 0;
        else
          v106 = (char *)v139 + v139[0];
        v107 = (char *)((char *)&v134 - v106);
        if (v134 == 1)
          v107 = 0;
        *(_QWORD *)v106 = &v107[v134];
        v97 = v137;
      }
      if (v138 == 1)
        v108 = 0;
      else
        v108 = (char *)&v139[-1] + v138;
      v109 = (char *)((char *)&v137 - v108);
      if (v97 == 1)
        v109 = 0;
      *(_QWORD *)v108 = &v109[v97];
      v110 = (char *)&v137 + v137;
      if (v137 == 1)
        v110 = 0;
      v91 = v134;
      v111 = (char *)&v134 + v134;
      v112 = (char *)((char *)&v134 - (v110 + 304));
      if (v134 == 1)
        v111 = 0;
      v113 = *((_QWORD *)v110 + 38);
      if (v134 == 1)
        v112 = 0;
      v114 = v110 - v111;
      if (v113 == 1)
        v114 = 0;
      *((_QWORD *)v111 + 38) = v114 + v113;
      v115 = &v112[v91];
    }
    else
    {
      v116 = *(uint64_t *)((char *)v93 + *v93 + 304);
      v117 = (char *)v93 + *v93 - v92;
      if (v116 == 1)
        v117 = 0;
      *((_QWORD *)v92 + 38) = v117 + v116;
      v118 = *v93;
      v119 = (char *)v93 + *v93;
      if (v118 == 1)
        v110 = 0;
      else
        v110 = v119;
      v120 = (char *)((char *)&v134 - (v110 + 304));
      if (v91 == 1)
        v120 = 0;
      v115 = &v120[v91];
    }
    *((_QWORD *)v110 + 38) = v115;
    ++*(_QWORD *)(a2 + 32);
    v121 = (char *)&v134 - (char *)&v127;
    if (v91 == 1)
      v121 = 0;
    v127 = v121 + v91;
    result = boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)&v131);
    v122 = (char *)&v127 - (char *)&v131;
    if (v127 == 1)
      v122 = 0;
    v123 = v122 + v127;
    v124 = (char *)&v132[-1] - a1;
    if (v123 == 1)
      v124 = 0;
    *(_QWORD *)a1 = &v124[v123];
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
    v28 = v129 + (char *)&v129 - &v128;
    v29 = &v128 - (char *)&v131;
    if (v28 == 1)
      v29 = 0;
    v30 = v29 + v28;
    v31 = (char *)&v132[-1] - a1;
    if (v30 == 1)
      v31 = 0;
    *(_QWORD *)a1 = &v31[v30];
    *(_BYTE *)(a1 + 8) = 0;
  }
  return result;
}

void sub_1A176A918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;

  va_start(va, a11);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(v13);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table(v12);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v11);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A176A948(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;

  __cxa_begin_catch(a1);
  v27 = *(_QWORD *)(v26 - 104);
  v28 = v26 - 104 - (_QWORD)&a25;
  v29 = v27 == 1;
  if (v27 == 1)
    v28 = 0;
  v30 = v28 + v27;
  a25 = v30;
  v31 = v27 + v26 - 104;
  if (v29)
    v32 = 0;
  else
    v32 = v31;
  if (v30 == 1)
    v33 = 0;
  else
    v33 = (char *)&a25 + v30;
  v34 = v33 + 304;
  v35 = *((_QWORD *)v33 + 38);
  v36 = v26 - 96;
  v37 = &v34[-v26 + 96];
  if (v35 == 1)
    v37 = 0;
  v38 = &v37[v35];
  *(_QWORD *)(v26 - 96) = v38;
  *(_QWORD *)(v32 + 304) = 1;
  if (v38 != (char *)1)
  {
    v39 = v36 - (_QWORD)&a22;
    do
    {
      a22 = &v38[v39];
      if (&v38[v39] == (char *)1)
        v40 = 0;
      else
        v40 = &v38[v36];
      v41 = v40 + 304;
      v42 = *((_QWORD *)v40 + 38);
      v43 = v41 - (char *)&a23;
      if (v42 == 1)
        v43 = 0;
      a23 = v43 + v42;
      a21 = &v38[v36 - (_QWORD)&a21];
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(v25, (char *)&a21);
      --*(_QWORD *)(v25 + 32);
      if (a23 == 1)
        v44 = 0;
      else
        v44 = (char *)&a23 - v36;
      v38 = &v44[a23];
      *(_QWORD *)(v26 - 96) = &v44[a23];
    }
    while (v38 != (char *)1);
  }
  __cxa_rethrow();
}

void sub_1A176AA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  __cxa_end_catch();
  boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)va);
  JUMPOUT(0x1A176AA68);
}

char *pf::SceneTaxonomyNode::addChild(pf::SceneTaxonomyNode *this, pf::SceneTaxonomyNode *a2)
{
  _BYTE v5[16];
  pf::SceneTaxonomyNode *v6;

  v6 = a2;
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)v5, (uint64_t)this + 144, &v6);
  v6 = this;
  return boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)v5, (uint64_t)a2 + 80, &v6);
}

char *boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(uint64_t a1, char *__s, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  _QWORD *v12;
  char v13;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v15;
  unint64_t v16[3];
  uint64_t v17;

  if (__s == (char *)-1)
  {
    v5 = *(char **)(a3 + 24);
    v12 = (_QWORD *)(a1 + 88);
    v13 = 2;
    return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_named_construct<char>(a1, v13, v5, a3, v12);
  }
  v5 = __s;
  if (__s)
  {
    v12 = (_QWORD *)(a1 + 56);
    v13 = 1;
    return boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_named_construct<char>(a1, v13, v5, a3, v12);
  }
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 8);
  v8 = 0xF / v7 + 1;
  v16[0] = v6 + *(_QWORD *)(a3 + 8) * (unint64_t)v8;
  v17 = 0;
  v9 = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(a1, 1, v16[0], v16, &v17, 1uLL);
  if (!v9)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v15 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v15 = &off_1E45A10D8;
  }
  v16[0] = (unint64_t)v9;
  v16[1] = a1;
  *(_QWORD *)v9 = v6;
  *((_WORD *)v9 + 4) = 0;
  v9[10] = v7;
  v9[11] = 1;
  v10 = &v9[v7 * (unint64_t)v8];
  v17 = 0;
  (**(void (***)(uint64_t, char *, uint64_t, uint64_t *))a3)(a3, v10, 1, &v17);
  v16[0] = 0;
  boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::~mem_algo_deallocator((uint64_t)v16);
  return v10;
}

void sub_1A176AC08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  __cxa_begin_catch(a1);
  a11 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 8))(v12, v13, a12, &a11);
  __cxa_rethrow();
}

void sub_1A176AC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::~mem_algo_deallocator((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  off_t v21;
  int v22;
  uint64_t result;
  const char *v24;
  int v25;
  const char *v26;
  const char *v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  _QWORD *exception;
  uint64_t v33;
  char *v34[4];
  int v35[2];
  int v36;
  uint64_t v37;
  const char *v38[2];

  v38[0] = a1;
  v33 = 0;
  *(_QWORD *)v35 = &v33;
  v36 = 1;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::managed_open_or_create_impl<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((uint64_t)v34, v38, 2, (uint64_t)v35);
  v2 = v33;
  v3 = v33 + 55;
  v4 = (*(_QWORD *)(v33 + 32) + v33 + 55) & 0xFFFFFFFFFFFFFFF8;
  v5 = (char *)(v4 + 8);
  v6 = ((*(_QWORD *)(v33 + 48) - (v4 - v33 + 8)) & 0xFFFFFFFFFFFFFFF8) - 16;
  v7 = &v5[v6];
  if (((unint64_t)&v5[v6] & 7) != 0)
    goto LABEL_33;
  v8 = *((_QWORD *)v7 + 1);
  if (v6 != 8 * *((_QWORD *)v5 + 1))
  {
    if ((v8 & 0x4000000000000000) != 0)
      goto LABEL_28;
    v14 = &v7[-8 * *(_QWORD *)v7];
    v15 = *((_QWORD *)v14 + 1);
    if (!v6)
      goto LABEL_18;
    if ((v15 & 0x8000000000000000) != 0)
    {
      v24 = "!prev->m_allocated";
      v25 = 1218;
    }
    else
    {
      if ((v15 & 0x3FFFFFFFFFFFFFFFLL) == *(_QWORD *)v7)
      {
LABEL_18:
        v10 = 0;
        goto LABEL_19;
      }
      v24 = "prev->m_size == block->m_prev_size";
      v25 = 1219;
    }
    v26 = "rbtree_best_fit.hpp";
    v27 = "priv_is_prev_allocated";
LABEL_40:
    __assert_rtn(v27, v26, v25, v24);
  }
  *(_QWORD *)v35 = 0;
  v38[0] = 0;
  v9 = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v33, 1, 0, (unint64_t *)v35, (uint64_t *)v38, 1uLL);
  v10 = (uint64_t)v9;
  if (!v9)
    goto LABEL_28;
  if ((v9 & 7) != 0)
    goto LABEL_33;
  v11 = v9 - 16;
  v12 = *((_QWORD *)v9 - 1);
  v13 = ((*(_QWORD *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8)
      + ((*(_QWORD *)(v2 + 48) + v2 - ((*(_QWORD *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8) - 8) & 0xFFFFFFFFFFFFFFF8);
  if ((char *)(v13 + 8) != v9 && ((*(_QWORD *)&v11[8 * v12 + 8] & 0x4000000000000000) != 0) != v12 >> 63)
    goto LABEL_36;
  if ((v12 & 0x8000000000000000) == 0)
  {
    v24 = "priv_is_allocated_block(unique_block)";
    v25 = 545;
    goto LABEL_39;
  }
  if ((v11 & 7) != 0)
  {
LABEL_33:
    v24 = "uint_ptr % Alignment == 0";
    v25 = 106;
    v26 = "mem_algo_common.hpp";
    v27 = "assert_alignment";
    goto LABEL_40;
  }
  v14 = &v11[8 * v12];
  v15 = *((_QWORD *)v14 + 1);
  if ((char *)(v13 - 8) != v14 && ((*(_QWORD *)&v14[8 * v15 + 8] & 0x4000000000000000) != 0) != v15 >> 63)
  {
LABEL_36:
    v24 = "allocated == next_block_prev_allocated";
    v25 = 1200;
    v26 = "rbtree_best_fit.hpp";
    v27 = "priv_is_allocated_block";
    goto LABEL_40;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
    v24 = "!priv_is_allocated_block(last_block)";
    v25 = 548;
    goto LABEL_39;
  }
  if ((v14 & 7) != 0)
    goto LABEL_33;
LABEL_19:
  v37 = v14 - (char *)&v37 + 16;
  v16 = (char *)&v37 - (char *)v35;
  if (v14 - (char *)&v37 == -15)
    v16 = 0;
  v17 = v16 + v14 - (char *)&v37 + 16;
  v18 = (char *)v35 - (char *)v38;
  if (v17 == 1)
    v18 = 0;
  v38[0] = (const char *)(v18 + v17);
  boost::intrusive::bstree_impl<boost::intrusive::bhtraits<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::block_ctrl,boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>,(boost::intrusive::link_mode_type)0,boost::intrusive::dft_tag,3u>,void,void,unsigned long,true,(boost::intrusive::algo_types)5,void>::erase((char *)v35, (char *)v2, (char *)v38);
  if ((v14 & 7) != 0)
    goto LABEL_33;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v14 + 1) & 0xC000000000000000 | ((unint64_t)(v14 - v5) >> 3);
  *(_QWORD *)v5 = (unint64_t)(v14 - v5) >> 3;
  v19 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = v19 | 0x8000000000000000;
  if ((v19 & 0x3FFFFFFFFFFFFFFFLL) != (v8 & 0x3FFFFFFFFFFFFFFFLL) - (v15 & 0x3FFFFFFFFFFFFFFFLL))
  {
    v24 = "new_end_block->m_size == (old_end_block_size - last_block_size)";
    v25 = 584;
LABEL_39:
    v26 = "rbtree_best_fit.hpp";
    v27 = "shrink_to_fit";
    goto LABEL_40;
  }
  v20 = (unint64_t)&v14[-v2 + 16] & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v2 + 48) = v20;
  if ((char *)(((*(_QWORD *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8)
              + ((v20 + v2 - ((*(_QWORD *)(v2 + 32) + v3) & 0xFFFFFFFFFFFFFFF8) - 8) & 0xFFFFFFFFFFFFFFF8)
              - 8) != v14)
  {
    v24 = "priv_end_block() == new_end_block";
    v25 = 588;
    goto LABEL_39;
  }
  if (v10)
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate((char *)v2, v10);
LABEL_28:
  v21 = *(_QWORD *)(v33 + 48) + 8;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(v34);
  LOWORD(v33) = 420;
  boost::interprocess::ipcdetail::file_wrapper::priv_open_or_create<char>(v35, 2, a1, 2, (mode_t *)&v33);
  if (v21 < 0)
  {
    *__error() = 22;
    goto LABEL_45;
  }
  v22 = v35[0];
  result = ftruncate(v35[0], v21);
  if ((_DWORD)result)
  {
LABEL_45:
    v28 = __error();
    v29 = 0;
    v30 = *v28;
    LODWORD(v33) = *v28;
    while (*(_DWORD *)&boost::interprocess::ec_table[v29] != v30)
    {
      v29 += 8;
      if (v29 == 128)
      {
        v31 = 1;
        goto LABEL_50;
      }
    }
    v31 = *(_DWORD *)&boost::interprocess::ec_table[v29 + 4];
LABEL_50:
    HIDWORD(v33) = v31;
    exception = __cxa_allocate_exception(0x28uLL);
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v33);
  }
  if (v22 != -1)
    return close(v22);
  return result;
}

void sub_1A176B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  boost::interprocess::ipcdetail::file_wrapper::~file_wrapper((boost::interprocess::ipcdetail::file_wrapper *)&a14);
  _Unwind_Resume(a1);
}

void sub_1A176B0B8()
{
  char **v0;

  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(v0);
  JUMPOUT(0x1A176B0C4);
}

void pf::SceneTaxonomyNode::~SceneTaxonomyNode(pf::SceneTaxonomyNode *this)
{
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)this + 208);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)this + 144);
  boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)this + 80);
}

char *boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_named_construct<char>(uint64_t a1, char a2, char *__s, uint64_t a4, _QWORD *a5)
{
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  int64_t v19;
  size_t v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  int v30;
  char *v31;
  char v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  int64_t v44;
  int64_t v45;
  unsigned int v46;
  uint64_t v47;
  size_t v48;
  int64x2_t *v49;
  int64x2_t *v50;
  int64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  int64_t v57;
  BOOL v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __int8 *v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  int64_t v74;
  int64_t v75;
  int64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  uint64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int64_t v90;
  char *v91;
  int64_t v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  int64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  uint64_t v107;
  int64_t v108;
  const char *v110;
  int v111;
  const char *v112;
  const char *v113;
  _QWORD *exception;
  unsigned int v115;
  void (***v116)(_QWORD, char *, uint64_t, _QWORD *);
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  void *__src;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  int64_t v127;
  _QWORD v128[2];
  char v129[8];
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD v136[4];
  uint64_t v137;
  _QWORD v138[2];

  __src = __s;
  v8 = strlen(__s);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(unsigned __int8 *)(a4 + 8);
  v130 = 1;
  v131 = 1;
  v132 = 0;
  v129[0] = 0;
  v118 = v9;
  v119 = &v130;
  v11 = (char *)(a5 + 1);
  v133 = (char *)(a5 + 1) - (char *)&v133;
  v134 = (char *)(a5 + 1) - (char *)&v134;
  v138[0] = (char *)(a5 + 1) - (char *)v138;
  v12 = (char *)(a5 + 1) - (char *)&v137;
  v137 = v12;
  v120 = a1;
  v121 = (char *)(a5 + 1);
  if (v12 == 1)
    v11 = 0;
  v13 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFDLL;
  v14 = v11 - (char *)v136;
  if (v13 == 1)
    v14 = 0;
  v15 = v14 + v13;
  v135 = 1;
  v136[0] = v14 + v13;
  v116 = (void (***)(_QWORD, char *, uint64_t, _QWORD *))a4;
  if (v14 + v13 == 1)
  {
    v16 = 1;
    v17 = 1;
    v18 = v119;
  }
  else
  {
    v115 = v10;
    v19 = (char *)v136 - (char *)&v137;
    v16 = 1;
    do
    {
      v12 = v19 + v15;
      v137 = v19 + v15;
      v124 = (char *)v136 + v15 - (char *)&v124;
      if (v124 == 1)
        goto LABEL_137;
      v20 = v8;
      v21 = boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()(__src, v8, (uint64_t)v136 + v15);
      v17 = v21;
      if (v21)
      {
        if (v15 == 1)
          v22 = 0;
        else
          v22 = (char *)v136 + v15;
        v23 = v22 + 8;
      }
      else
      {
        if (v12 == 1)
          v24 = 0;
        else
          v24 = 40;
        v16 = v24 + v12;
        v135 = v24 + v12;
        if (v15 == 1)
          v25 = 0;
        else
          v25 = (char *)v136 + v15;
        v23 = v25 + 16;
      }
      v26 = *(_QWORD *)v23;
      v27 = v23 - (char *)&v124;
      if (v26 == 1)
        v27 = 0;
      v28 = v27 + v26;
      if (v28 == 1)
        v29 = 0;
      else
        v29 = (char *)&v124 - (char *)v136;
      v15 = v29 + v28;
      v136[0] = v29 + v28;
      v8 = v20;
    }
    while (v29 + v28 != 1);
    if (v16 == 1)
    {
      v18 = v119;
      a1 = v120;
    }
    else
    {
      v124 = (char *)&v136[-1] + v16 - (char *)&v124;
      if (v124 == 1)
LABEL_137:
        __assert_rtn("to_value_ptr", "hook_traits.hpp", 62, "!!p");
      if (!boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::intrusive_key_value_less::operator()((uint64_t)&v136[-1] + v16, __src, v20))
      {
        v32 = 0;
        v30 = 1;
        v18 = v119;
        a1 = v120;
        v8 = v20;
        v10 = v115;
        goto LABEL_36;
      }
      v18 = v119;
      a1 = v120;
      v8 = v20;
    }
    v10 = v115;
  }
  v30 = 0;
  v129[0] = v17;
  v31 = (char *)((char *)&v137 - (char *)v18);
  if (v12 == 1)
    v31 = 0;
  v130 = (uint64_t)&v31[v12];
  v32 = 1;
LABEL_36:
  v33 = (char *)&v135 - (char *)&v124;
  if (v16 == 1)
    v33 = 0;
  v34 = v33 + v16;
  v35 = (char *)&v124 - (char *)&v137;
  if (v34 == 1)
    v35 = 0;
  v36 = v35 + v34;
  v37 = (char *)&v137 - (char *)v138;
  if (v36 == 1)
    v37 = 0;
  v38 = v37 + v36;
  v39 = (char *)v138 - (char *)v128;
  if (v38 == 1)
    v39 = 0;
  v40 = v39 + v38;
  v41 = (char *)v128 - (char *)&v131;
  if (v40 == 1)
    v41 = 0;
  v42 = v41 + v40;
  v131 = v42;
  v132 = v32;
  v43 = (char *)&v131 - (char *)&v124;
  if (v42 == 1)
    v43 = 0;
  v44 = v43 + v42;
  v45 = (char *)&v124 - (char *)&v127;
  if (v44 == 1)
    v45 = 0;
  v127 = v45 + v44;
  if (v30)
  {
    exception = __cxa_allocate_exception(0x28uLL);
    v124 = 0x900000000;
    boost::interprocess::interprocess_exception::interprocess_exception(exception, &v124);
  }
  v46 = 0xF / v10 + 1;
  v47 = v118;
  v48 = v8;
  v49 = (int64x2_t *)boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(a1, v118 + (unsigned __int16)v8 + v10 * (unint64_t)v46 + 25);
  v50 = v49;
  *v49 = vdupq_n_s64(1uLL);
  v49[1].i64[0] = 1;
  v137 = (char *)v49 - (char *)&v137;
  v51 = (char *)&v137 - (char *)&v124;
  if ((char *)v49 - (char *)&v137 == 1)
    v51 = 0;
  v52 = v51 + (char *)v49 - (char *)&v137;
  v124 = v52;
  if (v52 == 1)
    v53 = 0;
  else
    v53 = (uint64_t *)((char *)&v124 + v52);
  *v53 = *v53 & 2 | 1;
  v54 = v137;
  v55 = (char *)&v137 - (char *)v128;
  v56 = -8;
  if (v137 == 1)
    v55 = 0;
  v57 = v55 + v137;
  if (v137 == 1)
    v56 = 0;
  v58 = v57 == 1;
  v59 = (char *)v128 + v57;
  if (v58)
    v59 = 0;
  *((_QWORD *)v59 + 1) = 1;
  v60 = v56 + v54;
  if (v60 == 1)
    v61 = 0;
  else
    v61 = (char *)v138 + v60;
  *((_QWORD *)v61 + 2) = 1;
  v49[1].i64[1] = v47;
  v62 = &v49[1].i8[8];
  v49[2].i16[0] = v48;
  v63 = v47;
  v64 = v10 * (unint64_t)v46;
  v49[2].i8[2] = v10;
  v49[2].i8[3] = (32 * a2) | 1;
  if (v48 != -1)
    memmove(&v62[v63 + v64], __src, v48 + 1);
  v65 = (char *)v50 - (char *)v136;
  v136[0] = (char *)v50 - (char *)v136;
  v128[0] = (char *)v50 - (char *)v128;
  v66 = v50->i64[0] & 0xFFFFFFFFFFFFFFFDLL;
  v67 = (char *)v50 - (char *)&v124;
  if (v66 == 1)
    v67 = 0;
  if (v67 + v66 != 1)
  {
    v110 = "!safemode_or_autounlink || node_algorithms::unique(to_insert)";
    v111 = 1318;
LABEL_142:
    v112 = "bstree.hpp";
    v113 = "insert_unique_commit";
LABEL_143:
    __assert_rtn(v113, v112, v111, v110);
  }
  v68 = (char *)v18 - (char *)&v135;
  if (v130 == 1)
    v68 = 0;
  v69 = v68 + v130;
  v135 = v68 + v130;
  if (!v129[0])
  {
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v124, (char *)&v135);
    v70 = (char *)&v124 - (char *)&v135;
    if (v124 == 1)
      v70 = 0;
    v69 = v70 + v124;
    v135 = v70 + v124;
  }
  v71 = v121 - (char *)v138;
  v138[0] = v121 - (char *)v138;
  v72 = (char *)&v135 - (char *)&v124;
  if (v69 == 1)
    v72 = 0;
  v73 = v72 + v69;
  v74 = (char *)v138 - (char *)v128;
  if (v71 == 1)
    v75 = 0;
  else
    v75 = (char *)v138 - (char *)v128;
  v76 = v75 + v71;
  if (v73 == 1)
    v77 = 0;
  else
    v77 = (char *)&v124 + v73;
  if (v76 == 1)
    v78 = 0;
  else
    v78 = (char *)v128 + v76;
  if (v77 != v78)
  {
    v79 = (char *)&v136[-1] + v69;
    if (v69 == 1)
      v79 = 0;
    v124 = v79 - (char *)&v124;
    if (v79 - (char *)&v124 == 1)
      goto LABEL_138;
    if (*((unsigned __int16 *)v79 + 16) < v50[2].u16[0])
    {
      v110 = "( p == this->end() || !this->comp()(*p, value))";
      v111 = 1328;
      goto LABEL_142;
    }
  }
  v80 = a5[2];
  v81 = (char *)(a5 + 2) - (char *)&v124;
  if (v80 == 1)
    v81 = 0;
  v82 = v81 + v80;
  v83 = (char *)&v124 - (char *)v138;
  if (v82 == 1)
    v83 = 0;
  v84 = v83 + v82;
  v138[0] = v84;
  v85 = (char *)&v135 - (char *)&v124;
  if (v69 == 1)
    v85 = 0;
  v86 = v85 + v69;
  if (v84 == 1)
    v74 = 0;
  v87 = v74 + v84;
  if (v86 == 1)
    v88 = 0;
  else
    v88 = (char *)&v124 + v86;
  v89 = (char *)v128 + v87;
  if (v87 == 1)
    v89 = 0;
  if (v88 != v89)
  {
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::prev_node((char *)&v124, (char *)&v135);
    v90 = (char *)&v124 - (char *)&v135;
    if (v124 == 1)
      v90 = 0;
    v135 = v90 + v124;
    if (v90 + v124 == 1)
      v91 = 0;
    else
      v91 = (char *)&v136[-1] + v90 + v124;
    v124 = v91 - (char *)&v124;
    if (v91 - (char *)&v124 != 1)
    {
      if (v50[2].u16[0] >= *((unsigned __int16 *)v91 + 16))
        goto LABEL_113;
      v110 = "( p == this->begin() || !this->comp()(value, *--p))";
      v111 = 1329;
      goto LABEL_142;
    }
LABEL_138:
    v110 = "!!p";
    v111 = 62;
    v112 = "hook_traits.hpp";
    v113 = "to_value_ptr";
    goto LABEL_143;
  }
LABEL_113:
  v134 = v121 - (char *)&v134;
  v92 = (char *)v136 - (char *)&v133;
  if (v65 == 1)
    v92 = 0;
  v93 = v92 + v65;
  v133 = v93;
  v138[0] = v121 - (char *)v138;
  v94 = (char *)&v133 - (char *)&v137;
  if (v93 == 1)
    v94 = 0;
  v95 = v94 + v93;
  v137 = v95;
  v124 = v121 - (char *)&v124;
  v96 = (char *)&v137 - (char *)v128;
  if (v95 == 1)
    v96 = 0;
  v128[0] = v96 + v95;
  boost::intrusive::bstree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::insert_commit((char *)&v124, (char *)v128, (uint64_t)v129);
  v97 = (char *)&v134 - (char *)&v124;
  if (v134 == 1)
    v97 = 0;
  v124 = v97 + v134;
  v98 = (char *)&v133 - (char *)v128;
  if (v133 == 1)
    v98 = 0;
  v128[0] = v98 + v133;
  boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::rebalance_after_insertion((char *)&v124, (char *)v128);
  ++*a5;
  v99 = (char *)v136 - (char *)&v124;
  if (v136[0] == 1)
    v99 = 0;
  v100 = (char *)&v124 - (char *)&v127;
  if (v99 + v136[0] == 1)
    v100 = 0;
  v101 = v100 + v99 + v136[0];
  v127 = v101;
  v128[0] = v50;
  v128[1] = v120;
  v102 = (char *)&v127 - (char *)v138;
  if (v101 == 1)
    v102 = 0;
  v103 = v102 + v101;
  v104 = (char *)v138 - (char *)&v123;
  if (v103 == 1)
    v104 = 0;
  v105 = v104 + v103;
  v123 = v105;
  v124 = (uint64_t)a5;
  v106 = (char *)&v123 - (char *)v138;
  if (v105 == 1)
    v106 = 0;
  v107 = v106 + v105;
  v108 = (char *)v138 - (char *)&v125;
  if (v107 == 1)
    v108 = 0;
  v125 = v108 + v107;
  v126 = 1;
  v138[0] = 0;
  (**v116)(v116, &v62[v64], 1, v138);
  v126 = 0;
  v128[0] = 0;
  boost::interprocess::value_eraser<boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>>::~value_eraser((uint64_t)&v124);
  boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::~mem_algo_deallocator((uint64_t)v128);
  return &v62[v64];
}

void sub_1A176B918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Unwind_Resume(exception_object);
}

void sub_1A176B984(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_1A176B990()
{
  __cxa_end_catch();
  JUMPOUT(0x1A176B998);
}

char *boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(uint64_t a1, unint64_t a2)
{
  char *result;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v4;
  uint64_t v5;
  unint64_t v6;

  v5 = 0;
  v6 = a2;
  result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(a1, 1, a2, &v6, &v5, 1uLL);
  if (!result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v4 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v4 = &off_1E45A10D8;
  }
  return result;
}

uint64_t boost::interprocess::value_eraser<boost::interprocess::iset_index<boost::interprocess::ipcdetail::index_config<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>>::~value_eraser(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 16))
  {
    v2 = *(char **)a1;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a1 + 8 - (_QWORD)&v41;
    if (v3 == 1)
      v4 = 0;
    v5 = v4 + v3;
    v6 = (char *)&v41 - (char *)&v33;
    if (v5 == 1)
      v6 = 0;
    v7 = v6 + v5;
    v33 = v7;
    v8 = (char *)&v33 - (char *)&v41;
    if (v7 == 1)
      v8 = 0;
    v9 = v8 + v7;
    if (v7 == 1)
      v10 = 0;
    else
      v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1)
      v11 = 0;
    else
      v11 = (char *)&v41 - (char *)&v38;
    v38 = v11 + v9;
    boost::intrusive::bstree_algorithms_base<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::next_node((char *)&v41, (char *)&v38);
    if (v41 == 1)
      v12 = 0;
    else
      v12 = (char *)&v41 - (char *)&v38;
    v38 = v12 + v41;
    v13 = v10 + v7;
    v37 = v10 + v7;
    v14 = (char *)&v37 - (char *)&v40;
    if (v10 + v7 == 1)
      v14 = 0;
    v15 = v14 + v13;
    v40 = v15;
    if (v15 == 1)
      v16 = 0;
    else
      v16 = (char *)&v40 + v15;
    v17 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFDLL;
    v18 = v16 - (char *)&v41;
    if (v17 == 1)
      v18 = 0;
    if (v18 + v17 == 1)
      __assert_rtn("erase", "bstree.hpp", 1418, "!safemode_or_autounlink || !node_algorithms::unique(to_erase)");
    v19 = (char *)&v37 - (char *)&v35;
    if (v13 == 1)
      v19 = 0;
    v35 = v19 + v13;
    v36 = v2 - (char *)&v36 + 8;
    boost::intrusive::rbtree_algorithms<boost::intrusive::rbtree_node_traits<boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,true>>::erase((char *)&v41, (char *)&v36, (char *)&v35);
    --*(_QWORD *)v2;
    v20 = (char *)&v37 - (char *)&v34;
    if (v37 == 1)
      v20 = 0;
    v21 = v20 + v37;
    v34 = v21;
    v22 = (char *)&v34 - (char *)&v41;
    if (v21 == 1)
      v22 = 0;
    v23 = v22 + v21;
    v41 = v23;
    if (v23 == 1)
      v24 = 0;
    else
      v24 = (uint64_t *)((char *)&v41 + v23);
    *v24 = *v24 & 2 | 1;
    v25 = v34;
    v26 = (char *)&v34 - (char *)&v40;
    v27 = (char *)&v34 - v39;
    if (v34 == 1)
      v26 = 0;
    v28 = v26 + v34;
    if (v34 == 1)
      v27 = 0;
    if (v28 == 1)
      v29 = 0;
    else
      v29 = (char *)&v40 + v28;
    *((_QWORD *)v29 + 1) = 1;
    v30 = v27 + v25;
    if (v30 == 1)
      v31 = 0;
    else
      v31 = &v39[v30];
    *((_QWORD *)v31 + 2) = 1;
  }
  return a1;
}

uint64_t boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>>::~mem_algo_deallocator(uint64_t a1)
{
  if (*(_QWORD *)a1)
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(*(char **)(a1 + 8), *(_QWORD *)a1);
  return a1;
}

uint64_t boost::interprocess::ipcdetail::mem_algo_deallocator<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::~mem_algo_deallocator(uint64_t a1)
{
  if (*(_QWORD *)a1)
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(*(char **)(a1 + 8), *(_QWORD *)a1);
  return a1;
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<int,false,int const&>::construct_n(uint64_t result, _DWORD *a2, uint64_t a3, _QWORD *a4)
{
  _DWORD *v4;
  uint64_t v5;

  if (a3)
  {
    v4 = *(_DWORD **)(result + 32);
    v5 = a3;
    do
    {
      *a2++ = *v4;
      --v5;
    }
    while (v5);
  }
  *a4 = a3;
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<int,false,int const&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *result;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  BOOL v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int64_t v127;
  int64_t v128;
  _BYTE *v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  _BYTE v139[8];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  _QWORD v148[4];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155[2];

  v6 = (char *)(a2 + 16);
  v147 = (char *)(a2 + 16);
  v148[0] = 1;
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node((uint64_t **)&v147);
  if (v148[0] == 1)
    v7 = 0;
  else
    v7 = (_QWORD *)((char *)v148 + v148[0]);
  if (*a3)
    v8 = *a3 - (_QWORD)v7;
  else
    v8 = 1;
  *v7 = v8;
  if (v148[0] == 1)
    __assert_rtn("release", "implementation.hpp", 1955, "node_");
  v9 = (char *)v148 - (char *)&v143 + v148[0];
  v143 = v9;
  v144 = v6;
  v10 = (char *)&v143 - (char *)&v145;
  if (v9 == 1)
    v10 = 0;
  v11 = v10 + v9;
  v145 = v11;
  v12 = (char *)&v145 - (char *)&v142;
  if (v11 == 1)
    v12 = 0;
  v13 = v12 + v11;
  v142 = v13;
  if (v13 == 1)
    v14 = 0;
  else
    v14 = (uint64_t *)((char *)&v142 + v13);
  v15 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v14);
  v136 = v15;
  if (!*(_QWORD *)(a2 + 32))
    goto LABEL_96;
  v16 = (*(_QWORD *)(a2 + 24) - 1) & v15;
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v147, a2, v16);
  v17 = (char *)&v148[-1] + (_QWORD)v147;
  if (v147 == (char *)1)
    v17 = 0;
  v18 = *(_QWORD *)v17;
  v19 = v17 - (char *)v155;
  if (v18 == 1)
    v19 = 0;
  v20 = v19 + v18;
  if (v20 == 1)
    goto LABEL_96;
  v21 = (char *)v155 + v20;
  if (v20 == -7)
    v21 = 0;
  v22 = *((_QWORD *)v21 + 1);
  v23 = v21 + 8 - (char *)&v153;
  if (v22 == 1)
    v23 = 0;
  v24 = v23 + v22;
  v153 = v23 + v22;
  if (v23 + v22 == 1)
  {
LABEL_96:
    v141 = 1;
    goto LABEL_97;
  }
  v25 = (char *)&v154 - (char *)&v153;
  while (1)
  {
    v152 = v24 + 8;
    if (v24 == -7)
      v26 = 0;
    else
      v26 = (uint64_t *)((char *)&v153 + v24);
    if (*v14 == 1)
      v27 = 0;
    else
      v27 = (_QWORD *)((char *)v14 + *v14);
    v28 = *v26;
    v29 = (uint64_t *)((char *)v26 + *v26);
    if (v28 == 1)
      v29 = 0;
    if (*v27 != *v29)
      goto LABEL_51;
    v30 = v27[9];
    v31 = (char *)v27 + v30 + 72;
    if (v30 == 1)
      v32 = 0;
    else
      v32 = v31;
    v33 = v29[9];
    v34 = (char *)v29 + v33 + 72;
    if (v33 == 1)
      v34 = 0;
    v35 = v32[8];
    if ((v35 & 1) != 0)
      v36 = v35 >> 1;
    else
      v36 = *((_QWORD *)v32 + 1) >> 1;
    v37 = v34[8];
    v38 = v37 >> 1;
    if ((v37 & 1) == 0)
      v38 = *((_QWORD *)v34 + 1) >> 1;
    if (v36 != v38)
    {
LABEL_51:
      v42 = v24 == 1;
      goto LABEL_66;
    }
    if ((v35 & 1) != 0)
    {
      v41 = v32 - (char *)&v147 + 9;
    }
    else
    {
      v39 = *((_QWORD *)v32 + 3);
      v40 = v32 + 24 - (char *)&v147;
      if (v39 == 1)
        v40 = 0;
      v41 = v40 + v39;
    }
    v43 = v41 == 1 ? 0 : (char *)&v148[-1] + v41;
    if ((v37 & 1) != 0)
    {
      v46 = v34 - (char *)&v147 + 9;
    }
    else
    {
      v44 = *((_QWORD *)v34 + 3);
      v45 = v34 + 24 - (char *)&v147;
      if (v44 == 1)
        v45 = 0;
      v46 = v45 + v44;
    }
    v47 = v46 == 1 ? 0 : (char *)&v148[-1] + v46;
    result = (char *)memcmp(v43, v47, v36);
    v42 = v24 == 1;
    if (!(_DWORD)result)
      break;
    v25 = (char *)&v154 - (char *)&v153;
LABEL_66:
    if (v42)
      v49 = 0;
    else
      v49 = 16;
    v50 = v49 + v24;
    v151 = v50;
    if (v50 == 1)
      v51 = 0;
    else
      v51 = (char *)&v151 + v50;
    if ((*((_QWORD *)v51 + 2) & 0x7FFFFFFFFFFFFFFFLL) == v16)
    {
      v52 = v42 ? 0 : 24;
      v53 = v52 + v24;
      v150 = v53;
      v54 = v53 == 1 ? 0 : -32;
      v55 = v54 + v53;
      while (1)
      {
        if (v55 == 1)
          v56 = 0;
        else
          v56 = -8;
        v57 = v56 + v55;
        if (v57 == 1)
          v58 = 0;
        else
          v58 = (char *)v155 + v57;
        v59 = *((_QWORD *)v58 + 1);
        v60 = v58 + 8 - (char *)&v147;
        if (v59 == 1)
          v60 = 0;
        v61 = v60 + v59;
        v62 = v61 == 1 ? 0 : (char *)&v147 - (char *)&v154;
        v55 = v62 + v61;
        if (v55 == 1)
          break;
        if ((*(uint64_t *)((char *)&v155[1] + v55) & 0x8000000000000000) == 0)
        {
          v63 = v25;
          goto LABEL_95;
        }
      }
      v63 = 0;
LABEL_95:
      v24 = v63 + v55;
      v153 = v63 + v55;
      if (v63 + v55 != 1)
        continue;
    }
    goto LABEL_96;
  }
  v130 = (char *)&v153 - (char *)&v141;
  if (v24 == 1)
    v130 = 0;
  v131 = v130 + v24;
  v141 = v131;
  if (v131 == 1)
  {
LABEL_97:
    v64 = (char *)&v145 - (char *)&v137;
    if (v145 == 1)
      v64 = 0;
    v65 = v64 + v145;
    v137 = v65;
    v145 = 1;
    v66 = (char *)&v137 - (char *)&v146;
    if (v65 == 1)
      v66 = 0;
    v67 = v66 + v65;
    v146 = v67;
    v68 = (char *)&v146 - (char *)v148;
    if (v67 == 1)
      v68 = 0;
    v147 = v6;
    v148[0] = v68 + v67;
    v69 = *(_QWORD *)(a2 + 32);
    v70 = v69 + 1;
    if (*(_QWORD *)(a2 + 56) == 1)
    {
      v71 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v70, *(float *)(a2 + 40));
      if (*(_QWORD *)(a2 + 24) <= v71)
        v72 = v71;
      else
        v72 = *(_QWORD *)(a2 + 24);
      boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a2, v72);
    }
    else if (*(_QWORD *)(a2 + 48) < v70)
    {
      v73 = v69 + (v69 >> 1);
      if (v73 > v70)
        v70 = v73;
      v74 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v70, *(float *)(a2 + 40));
      if (v74 != *(_QWORD *)(a2 + 24))
      {
        if (*(_QWORD *)(a2 + 56) == 1)
          __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a2, v74);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(v155, a2, *(_QWORD *)(a2 + 24));
        if (v155[0] == 1)
          v75 = 0;
        else
          v75 = (char *)v155 + v155[0];
        v76 = *(_QWORD *)v75;
        v77 = v75 - (char *)&v154;
        if (v76 == 1)
          v77 = 0;
        v78 = v77 + v76;
        v154 = v78;
        v79 = v78 == 1;
        v80 = (char *)&v155[-1] + v78;
        if (v78 == 1)
          v80 = 0;
        if (*((_QWORD *)v80 + 1) != 1)
        {
          do
          {
            v87 = !v79;
            v81 = 8;
            if (!v87)
              v81 = 0;
            v82 = v81 + v78;
            v153 = v82;
            if (v82 == 1)
              v83 = 0;
            else
              v83 = (char *)&v153 + v82;
            v84 = *((_QWORD *)v83 + 1);
            v85 = v83 + 8 - (char *)v155;
            if (v84 == 1)
              v85 = 0;
            v86 = v85 + v84;
            v155[0] = v85 + v84;
            v87 = v85 + v84 == 1;
            v88 = 24;
            if (v87)
              v88 = 0;
            v89 = v88 + v86;
            v152 = v89;
            if (v87)
              v90 = 0;
            else
              v90 = (char *)v155 + v86;
            if (v87)
              v91 = 0;
            else
              v91 = 40;
            if (v89 == 1)
              v92 = 0;
            else
              v92 = (uint64_t *)((char *)&v152 + v89);
            v93 = (*(_QWORD *)(a2 + 24) - 1) & boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v92);
            *((_QWORD *)v90 + 2) = v93 & 0x7FFFFFFFFFFFFFFFLL;
            v94 = v91 + v86;
            v95 = (char *)&v150 + v91 + v86;
            if (v91 + v86 == 1)
              v95 = 0;
            v96 = *((_QWORD *)v95 + 1);
            v97 = v95 + 8 - (char *)&v151;
            if (v96 == 1)
              v97 = 0;
            v98 = v97 + v96;
            if (v98 != 1)
            {
              v99 = (char *)&v151 + v98;
              if (*(uint64_t *)((char *)&v151 + v98 + 16) < 0)
              {
                do
                {
                  v100 = v98 - 32;
                  if (v98 == 33)
                    v101 = 0;
                  else
                    v101 = v99;
                  *((_QWORD *)v101 + 2) = v93 | 0x8000000000000000;
                  if (v98 == 33)
                    v102 = 0;
                  else
                    v102 = 40;
                  v94 = v102 + v100;
                  v103 = (char *)&v150 + v94;
                  if (v94 == 1)
                    v103 = 0;
                  v104 = *((_QWORD *)v103 + 1);
                  v105 = v103 + 8 - (char *)&v151;
                  if (v104 == 1)
                    v105 = 0;
                  v98 = v105 + v104;
                  if (v98 == 1)
                    break;
                  v99 = (char *)&v151 + v98;
                }
                while (*(uint64_t *)((char *)&v151 + v98 + 16) < 0);
                v155[0] = v100;
              }
            }
            v150 = v94;
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v151, a2, v93);
            v106 = (char *)&v151 + v151;
            if (v151 == 1)
              v106 = 0;
            if (*(_QWORD *)v106 == 1)
            {
              v107 = (char *)((char *)&v154 - v106);
              if (v154 == 1)
                v107 = 0;
              *(_QWORD *)v106 = &v107[v154];
              v108 = 1;
              if (v155[0] == 1)
                v108 = 0;
              v78 = v108 * 8 + v155[0];
              v154 = v108 * 8 + v155[0];
              v109 = (char *)&v155[v108 - 1] + v155[0];
            }
            else
            {
              if (v155[0] == 1)
                v110 = 0;
              else
                v110 = (char *)v155 + v155[0];
              v113 = *((_QWORD *)v110 + 1);
              v111 = v110 + 8;
              v112 = v113;
              v114 = v111 - (char *)&v149;
              if (v113 == 1)
                v114 = 0;
              v115 = v114 + v112;
              v149 = v115;
              if (*(_QWORD *)v106 == 1)
                v116 = 0;
              else
                v116 = &v106[*(_QWORD *)v106];
              v117 = *((_QWORD *)v116 + 1);
              v118 = v116 + 8 - v111;
              if (v117 == 1)
                v118 = 0;
              *(_QWORD *)v111 = v118 + v117;
              v78 = v154;
              v109 = (char *)&v155[-1] + v154;
              if (v154 == 1)
                v119 = 0;
              else
                v119 = (char *)&v155[-1] + v154;
              v120 = *(_QWORD *)v106;
              v121 = &v106[*(_QWORD *)v106];
              if (v120 == 1)
                v121 = 0;
              v124 = *((_QWORD *)v119 + 1);
              v122 = v119 + 8;
              v123 = v124;
              v125 = (char *)(v122 - (v121 + 8));
              if (v124 == 1)
                v125 = 0;
              *((_QWORD *)v121 + 1) = &v125[v123];
              v126 = (char *)((char *)&v149 - v122);
              if (v115 == 1)
                v126 = 0;
              *(_QWORD *)v122 = &v126[v115];
            }
            v79 = v78 == 1;
            if (v78 == 1)
              v109 = 0;
          }
          while (*((_QWORD *)v109 + 1) != 1);
        }
      }
    }
    v127 = (char *)v148 - (char *)&v154;
    if (v148[0] == 1)
      v127 = 0;
    v154 = v127 + v148[0];
    v148[0] = 1;
    result = (char *)boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique((char *)&v138, a2, (char *)&v154, v136);
    if (v148[0] != 1)
    {
      v155[0] = (char *)v148 - (char *)v155 + v148[0];
      result = std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v147, v155);
    }
    v128 = (char *)&v138 - v139;
    if (v138 == 1)
      v128 = 0;
    v129 = &v139[-a1];
    if (v128 + v138 == 1)
      v129 = 0;
    *(_QWORD *)a1 = &v129[v128 + v138];
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_198;
  }
  v132 = v131 + (char *)&v141 - (char *)&v140;
  v140 = v132;
  v133 = (char *)&v140 - (char *)&v147;
  if (v132 == 1)
    v133 = 0;
  v134 = v133 + v132;
  v135 = (char *)&v148[-1] - a1;
  if (v134 == 1)
    v135 = 0;
  *(_QWORD *)a1 = &v135[v134];
  *(_BYTE *)(a1 + 8) = 0;
LABEL_198:
  if (v145 != 1)
  {
    v147 = (char *)((char *)&v145 - (char *)&v147 + v145);
    return std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v144, (uint64_t *)&v147);
  }
  return result;
}

void sub_1A176C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1A176C5B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  __cxa_begin_catch(a1);
  v32 = *(_QWORD *)(v31 - 104);
  v33 = 40;
  v34 = v32 == 1;
  if (v32 == 1)
    v33 = 0;
  v35 = v33 + v32;
  *(_QWORD *)(v31 - 144) = v35;
  v36 = v32 + v31 - 104;
  if (v34)
    v37 = 0;
  else
    v37 = v36;
  if (v35 == 1)
    v38 = 0;
  else
    v38 = v35 + v31 - 144;
  v39 = *(_QWORD *)(v38 + 8);
  v40 = v31 - 128;
  v41 = v38 + 8 - (v31 - 128);
  if (v39 == 1)
    v41 = 0;
  v42 = v41 + v39;
  *(_QWORD *)(v31 - 128) = v42;
  for (*(_QWORD *)(v37 + 8) = 1; v42 != 1; *(_QWORD *)(v31 - 128) = v42)
  {
    v43 = v42 + v40;
    if (v42 == -31)
      v43 = 0;
    v44 = *(_QWORD *)(v43 + 8);
    *(_QWORD *)(v31 - 160) = v42 + 32;
    v45 = v43 + 8 - (v31 - 152);
    if (v44 == 1)
      v45 = 0;
    *(_QWORD *)(v31 - 152) = v45 + v44;
    v46 = v42 + v40 - (_QWORD)&a30;
    a30 = v46;
    if (v46 == 1)
      v47 = 0;
    else
      v47 = (char *)&a30 - v31 + 96;
    *(_QWORD *)(v31 - 96) = &v47[v46];
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](a13, (uint64_t *)(v31 - 96));
    --*(_QWORD *)(v30 + 32);
    v48 = *(_QWORD *)(v31 - 152);
    if (v48 == 1)
      v49 = 0;
    else
      v49 = -24;
    v42 = v49 + v48;
  }
  __cxa_rethrow();
}

void sub_1A176C6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  __cxa_end_catch();
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)&a28);
  JUMPOUT(0x1A176C6D8);
}

void sub_1A176C6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)&a28);
  JUMPOUT(0x1A176C6F0);
}

char *boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  char *result;
  _BYTE *v6;
  uint64_t *v7;
  _BYTE *v8;
  _BYTE v9[8];

  v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1)
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  v3 = **a1;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)*a1 + v3;
  result = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x18uLL);
  v6 = (_BYTE *)(v9 - (_BYTE *)v1);
  if (result - v9 == 1)
    v6 = 0;
  v7 = (uint64_t *)&v6[result - v9];
  a1[1] = v7;
  if (v7 == (uint64_t *)1)
    v8 = 0;
  else
    v8 = (char *)v1 + (_QWORD)v7;
  *(_OWORD *)v8 = xmmword_1A17B6C70;
  *((_QWORD *)v8 + 2) = 0;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != 1)
  {
    v4 = *(char **)a1;
    v6 = v2 - (_QWORD)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (*a1 == 1)
    v1 = 0;
  else
    v1 = (_QWORD *)((char *)a1 + *a1);
  v2 = *v1;
  v3 = v1[9];
  v4 = (char *)v1 + v3 + 72;
  if (v3 == 1)
    v5 = 0;
  else
    v5 = (uint64_t)v4;
  v6 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(v5);
  v7 = (v6 ^ ~v2) + ((v6 ^ v2) << 21);
  v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  return 2147483649u * (v8 ^ (v8 >> 28));
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(unint64_t a1, float a2)
{
  double v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;

  if (a2 < 0.001)
    __assert_rtn("min_buckets_for_size", "implementation.hpp", 3096, "mlf_ >= minimum_max_load_factor");
  v2 = floor((double)a1 / a2) + 1.0;
  v3 = (unint64_t)v2;
  if (v2 >= 1.84467441e19)
    v3 = -1;
  if (v3 < 5)
    return 4;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | (((v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  return (v6 | (v6 >> 16) | ((v6 | (v6 >> 16)) >> 32)) + 1;
}

char *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *result;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  double v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  _BYTE *v30;
  _BYTE v31[8];
  char v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 1;
  v5 = (char *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v34 = (uint64_t *)(a1 + 16);
    v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (_QWORD *)(a1 + 8), a2 + 1);
    v7 = (char *)&v33 - v5;
    if (v33 == (char *)1)
      v7 = 0;
    v8 = &v33[v7];
    *(_QWORD *)v5 = &v33[v7];
    if (v35 == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v9 = v35 + (char *)&v35 - (char *)&v33;
    v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1)
      v10 = 0;
    v37 = v10 + v9;
  }
  else
  {
    v11 = v4 + v5 - (char *)&v36 + 8 * *(_QWORD *)(a1 + 24);
    v36 = v11;
    v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1)
      v12 = 0;
    v13 = (uint64_t *)(v12 + v11);
    v34 = v13;
    if (v13 == (uint64_t *)1)
      v14 = 0;
    else
      v14 = (char *)&v34 + (_QWORD)v13;
    v15 = *(_QWORD *)v14;
    v16 = v14 - (char *)&v37;
    if (v15 == 1)
      v16 = 0;
    v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (_QWORD *)(a1 + 8), a2 + 1);
    result = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::destroy_buckets((_QWORD *)a1);
    v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1)
      v17 = 0;
    v8 = (char *)v34 + (_QWORD)v17;
    *(_QWORD *)(a1 + 56) = (char *)v34 + (_QWORD)v17;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    v18 = 0;
  }
  else
  {
    v19 = (double)a2 * *(float *)(a1 + 40);
    v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19)
      v18 = -1;
  }
  *(_QWORD *)(a1 + 48) = v18;
  v20 = v5 - &v32;
  v21 = &v32 - (char *)&v34;
  v22 = v5 - (char *)&v33;
  if (v8 == (char *)1)
    v20 = 0;
  v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1)
    v22 = 0;
  if (v23 == (char *)1)
    v21 = 0;
  v24 = (uint64_t *)&v23[v21];
  v25 = &v8[v22];
  v33 = v25;
  v34 = v24;
  if (v25 == (char *)1)
    v26 = 0;
  else
    v26 = (char *)&v33 + (_QWORD)v25;
  if (v24 == (uint64_t *)1)
    v27 = 0;
  else
    v27 = (char *)&v34 + (_QWORD)v24;
  while (v26 != v27)
  {
    *(_QWORD *)v26 = 1;
    v28 = v33 + 8;
    v33 = v28;
    if (v28 == (char *)1)
      v26 = 0;
    else
      v26 = (char *)&v33 + (_QWORD)v28;
    if (v34 == (uint64_t *)1)
      v27 = 0;
    else
      v27 = (char *)&v34 + (_QWORD)v34;
  }
  v29 = (char *)&v37 - v31;
  if (v37 == 1)
    v29 = 0;
  v30 = (_BYTE *)(v31 - v27);
  if (v29 + v37 == 1)
    v30 = 0;
  *(_QWORD *)v26 = &v30[v29 + v37];
  return result;
}

void sub_1A176CB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *result;
  char *v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = (*(_QWORD *)(a2 + 24) - 1) & a4;
  result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v45, a2, v7);
  if (*(_QWORD *)a3 == 1)
    v9 = 0;
  else
    v9 = &a3[*(_QWORD *)a3];
  *((_QWORD *)v9 + 2) = v7;
  if (*(_QWORD *)a3 == 1)
    v10 = 0;
  else
    v10 = &a3[*(_QWORD *)a3];
  *((_QWORD *)v10 + 2) &= ~0x8000000000000000;
  if (v45 == 1)
    v11 = 0;
  else
    v11 = (uint64_t *)((char *)&v45 + v45);
  if (*v11 == 1)
  {
    result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v46, a2, *(_QWORD *)(a2 + 24));
    if (v46 == 1)
      v12 = 0;
    else
      v12 = (char *)&v46 + v46;
    v13 = *(_QWORD *)v12;
    v14 = v12 - (char *)&v44;
    if (v13 == 1)
      v14 = 0;
    v15 = v14 + v13;
    v44 = v15;
    v16 = (char *)&v44 + v15;
    if (v15 == 1)
      v16 = 0;
    if (*((_QWORD *)v16 + 1) != 1)
    {
      v17 = (char *)&v44 - (char *)&v42;
      if (v15 == 1)
        v17 = 0;
      v18 = v17 + v15;
      v19 = (char *)&v42 + v18;
      if (v18 == 1)
        v19 = 0;
      v20 = *((_QWORD *)v19 + 1);
      v42 = v18;
      v21 = v19 + 8 - (char *)&v43;
      if (v20 == 1)
        v21 = 0;
      v43 = v21 + v20;
      v22 = (char *)&v43 + v21 + v20;
      if (v21 + v20 == 1)
        v22 = 0;
      result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v46, a2, *((_QWORD *)v22 + 2) & 0x7FFFFFFFFFFFFFFFLL);
      if (v46 == 1)
        v23 = 0;
      else
        v23 = (char *)&v46 + v46;
      v24 = a3 - v23;
      if (*(_QWORD *)a3 == 1)
        v24 = 0;
      *(_QWORD *)v23 = v24 + *(_QWORD *)a3;
      v15 = v44;
    }
    if (v45 == 1)
      v25 = 0;
    else
      v25 = (char *)&v45 + v45;
    v26 = (char *)((char *)&v44 - v25);
    if (v15 == 1)
      v26 = 0;
    *(_QWORD *)v25 = &v26[v15];
    if (v44 == 1)
      v27 = 0;
    else
      v27 = (char *)&v44 + v44;
    if (*(_QWORD *)a3 == 1)
      v28 = 0;
    else
      v28 = &a3[*(_QWORD *)a3];
    v31 = *((_QWORD *)v27 + 1);
    v29 = v27 + 8;
    v30 = v31;
    v32 = (char *)(v29 - (v28 + 8));
    if (v31 == 1)
      v32 = 0;
    *((_QWORD *)v28 + 1) = &v32[v30];
    v33 = a3 - v29;
    if (*(_QWORD *)a3 == 1)
      v33 = 0;
    *(_QWORD *)v29 = v33 + *(_QWORD *)a3;
  }
  else
  {
    v34 = (char *)v11 + *v11;
    if (*(_QWORD *)a3 == 1)
      v35 = 0;
    else
      v35 = &a3[*(_QWORD *)a3];
    v36 = *((_QWORD *)v34 + 1);
    v37 = v34 - v35;
    if (v36 == 1)
      v37 = 0;
    *((_QWORD *)v35 + 1) = v37 + v36;
    v38 = *v11;
    v39 = (char *)v11 + *v11;
    if (v38 == 1)
      v39 = 0;
    v40 = (char *)(a3 - (v39 + 8));
    if (*(_QWORD *)a3 == 1)
      v40 = 0;
    *((_QWORD *)v39 + 1) = &v40[*(_QWORD *)a3];
  }
  ++*(_QWORD *)(a2 + 32);
  v41 = a3 - a1;
  if (*(_QWORD *)a3 == 1)
    v41 = 0;
  *(_QWORD *)a1 = v41 + *(_QWORD *)a3;
  return result;
}

char *boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate(char *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v4;
  char *result;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v7;

  if (a3 >> 61)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v7 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v7 = &off_1E45A10D8;
  }
  if (*a2 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)a2 + *a2;
  result = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 8 * a3);
  *(_QWORD *)a1 = result - a1;
  return result;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t *v7;
  _OWORD *v8;
  double result;
  _BYTE v10[8];

  v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1)
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  v3 = **a1;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)*a1 + v3;
  v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x140uLL);
  v6 = (_BYTE *)(v10 - (_BYTE *)v1);
  if (v5 - v10 == 1)
    v6 = 0;
  v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1)
    v8 = 0;
  else
    v8 = (_OWORD *)((char *)v1 + (_QWORD)v7);
  result = 0.0;
  v8[16] = 0u;
  v8[17] = 0u;
  v8[14] = 0u;
  v8[15] = 0u;
  v8[12] = 0u;
  v8[13] = 0u;
  v8[10] = 0u;
  v8[11] = 0u;
  v8[8] = 0u;
  v8[9] = 0u;
  v8[6] = 0u;
  v8[7] = 0u;
  v8[4] = 0u;
  v8[5] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
  v8[18] = 0u;
  v8[19] = xmmword_1A17B6DA0;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != 1)
  {
    v4 = *(char **)a1;
    v6 = v2 - (_QWORD)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *result;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  double v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  _BYTE *v30;
  _BYTE v31[8];
  char v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 1;
  v5 = (char *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v34 = (uint64_t *)(a1 + 16);
    v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (_QWORD *)(a1 + 8), a2 + 1);
    v7 = (char *)&v33 - v5;
    if (v33 == (char *)1)
      v7 = 0;
    v8 = &v33[v7];
    *(_QWORD *)v5 = &v33[v7];
    if (v35 == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v9 = v35 + (char *)&v35 - (char *)&v33;
    v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1)
      v10 = 0;
    v37 = v10 + v9;
  }
  else
  {
    v11 = v4 + v5 - (char *)&v36 + 8 * *(_QWORD *)(a1 + 24);
    v36 = v11;
    v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1)
      v12 = 0;
    v13 = (uint64_t *)(v12 + v11);
    v34 = v13;
    if (v13 == (uint64_t *)1)
      v14 = 0;
    else
      v14 = (char *)&v34 + (_QWORD)v13;
    v15 = *(_QWORD *)v14;
    v16 = v14 - (char *)&v37;
    if (v15 == 1)
      v16 = 0;
    v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (_QWORD *)(a1 + 8), a2 + 1);
    result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((_QWORD *)a1);
    v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1)
      v17 = 0;
    v8 = (char *)v34 + (_QWORD)v17;
    *(_QWORD *)(a1 + 56) = (char *)v34 + (_QWORD)v17;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    v18 = 0;
  }
  else
  {
    v19 = (double)a2 * *(float *)(a1 + 40);
    v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19)
      v18 = -1;
  }
  *(_QWORD *)(a1 + 48) = v18;
  v20 = v5 - &v32;
  v21 = &v32 - (char *)&v34;
  v22 = v5 - (char *)&v33;
  if (v8 == (char *)1)
    v20 = 0;
  v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1)
    v22 = 0;
  if (v23 == (char *)1)
    v21 = 0;
  v24 = (uint64_t *)&v23[v21];
  v25 = &v8[v22];
  v33 = v25;
  v34 = v24;
  if (v25 == (char *)1)
    v26 = 0;
  else
    v26 = (char *)&v33 + (_QWORD)v25;
  if (v24 == (uint64_t *)1)
    v27 = 0;
  else
    v27 = (char *)&v34 + (_QWORD)v24;
  while (v26 != v27)
  {
    *(_QWORD *)v26 = 1;
    v28 = v33 + 8;
    v33 = v28;
    if (v28 == (char *)1)
      v26 = 0;
    else
      v26 = (char *)&v33 + (_QWORD)v28;
    if (v34 == (uint64_t *)1)
      v27 = 0;
    else
      v27 = (char *)&v34 + (_QWORD)v34;
  }
  v29 = (char *)&v37 - v31;
  if (v37 == 1)
    v29 = 0;
  v30 = (_BYTE *)(v31 - v27);
  if (v29 + v37 == 1)
    v30 = 0;
  *(_QWORD *)v26 = &v30[v29 + v37];
  return result;
}

void sub_1A176D238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != 1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,0>(v2 + v3);
    v4 = *(char **)a1;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v3 - (_QWORD)&v8;
    if (v5 == 1)
      v6 = 0;
    v8 = v6 + v5;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v8);
  }
  return a1;
}

char *boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(char *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  if (*(_QWORD *)a2 == 1)
    v3 = 0;
  else
    v3 = *(_QWORD *)a2 + a2;
  if (v3)
    v4 = v3 - (_QWORD)a1;
  else
    v4 = 1;
  *(_QWORD *)a1 = v4;
  a1[8] = 1;
  if (*(_QWORD *)a2 == 1)
    v5 = 0;
  else
    v5 = (char *)(*(_QWORD *)a2 + a2);
  if (v4 == 1)
    v6 = 0;
  else
    v6 = &a1[v4];
  if (v5 == v6)
  {
    boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data(a1, (_QWORD *)a2);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 8);
    if ((v7 & 1) != 0)
    {
      v15 = a2 + 9 - (_QWORD)&v20;
      v12 = &v22;
      v16 = a2 + 9 - (_QWORD)&v22 + (v7 >> 1);
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 24);
      v8 = a2 + 24;
      v9 = v10;
      v11 = v8 - (_QWORD)&v20;
      v12 = &v21;
      v13 = v8 - (_QWORD)&v21;
      v14 = v10 == 1;
      if (v10 == 1)
        v11 = 0;
      v15 = v11 + v9;
      if (v14)
        v13 = 0;
      v16 = v13 + v9 + (*(_QWORD *)(v8 - 16) >> 1);
    }
    v20 = v15;
    v17 = v12 - (char *)&v19;
    if (v16 == 1)
      v17 = 0;
    v19 = v17 + v16;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>((uint64_t)a1, &v20, (char *)&v19);
  }
  return a1;
}

uint64_t boost::unordered::unordered_set<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor,boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 == 1)
    v5 = 0;
  else
    v5 = v4 + a2 + 16;
  if (v5)
    v6 = v5 - (_QWORD)&v37;
  else
    v6 = 1;
  v37 = v6;
  if (v6 == 1)
    v7 = 0;
  else
    v7 = (char *)&v37 + v6;
  if (v7)
    v8 = v7 - (char *)&v38;
  else
    v8 = 1;
  v38 = v8;
  if (v8 == 1)
    v9 = 0;
  else
    v9 = (char *)&v38 + v8;
  if (v9)
    v10 = v9 - (char *)&v39;
  else
    v10 = 1;
  v39 = v10;
  *(_BYTE *)a1 = 0;
  if (v10 == 1)
    v11 = 0;
  else
    v11 = (char *)&v39 + v10;
  v12 = (uint64_t *)(a1 + 16);
  v13 = &v11[-a1 - 16];
  v14 = v11 == 0;
  if (v11)
    v15 = v11 - (char *)&v40;
  else
    v15 = 1;
  if (v14)
    v16 = 1;
  else
    v16 = (uint64_t)v13;
  if (v15 == 1)
    v17 = 0;
  else
    v17 = (char *)&v40 + v15;
  if (v17)
    v18 = (uint64_t)&v17[-a1 - 8];
  else
    v18 = 1;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  v19 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(*(_QWORD *)(a2 + 32), *(float *)(a2 + 40));
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = xmmword_1A17B6C70;
  if (*(_QWORD *)(a2 + 32))
  {
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::create_buckets(a1, v19);
    boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::begin(&v39, a2);
    v20 = v39;
    if (v39 != 1)
    {
      v21 = (char *)&v39 - (char *)&v38;
      do
      {
        v38 = v20 + v21;
        if (v20 + v21 == 1)
          v22 = 0;
        else
          v22 = (uint64_t *)((char *)&v39 + v20);
        v23 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::hash(v22);
        v40 = v12;
        v41 = 1;
        boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v40);
        if (v20 == 1)
          v24 = 0;
        else
          v24 = (char *)&v39 + v20;
        if (v41 == 1)
          v25 = 0;
        else
          v25 = (char *)&v41 + v41;
        v26 = *(_QWORD *)v24;
        v27 = v24 - v25;
        if (v26 == 1)
          v27 = 0;
        *(_QWORD *)v25 = v27 + v26;
        if (v41 == 1)
          __assert_rtn("release", "implementation.hpp", 1955, "node_");
        v37 = (char *)&v41 - (char *)&v37 + v41;
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::add_node_unique((char *)&v40, a1, (char *)&v37, v23);
        if (v39 == 1)
          v28 = 0;
        else
          v28 = 24;
        v36 = v28 + v39;
        v29 = (char *)&v36 + v28 + v39;
        if (v36 == 1)
          v30 = 0;
        else
          v30 = v29;
        v31 = *((_QWORD *)v30 + 1);
        v32 = v30 + 8 - (char *)&v40;
        if (v31 == 1)
          v32 = 0;
        v33 = v32 + v31;
        if (v33 == 1)
          v34 = 0;
        else
          v34 = (char *)&v40 - (char *)&v39;
        v20 = v34 + v33;
        v39 = v34 + v33;
      }
      while (v34 + v33 != 1);
    }
  }
  return a1;
}

void sub_1A176D634(_Unwind_Exception *a1)
{
  _BYTE *v1;

  boost::unordered::detail::functions<pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>::~functions(v1);
  _Unwind_Resume(a1);
}

char *boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data(char *result, _QWORD *a2)
{
  _QWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD v25[13];

  v25[12] = *MEMORY[0x1E0C80C00];
  v2 = result + 8;
  v3 = a2 + 1;
  if ((result[8] & 1) != 0)
  {
    if ((a2[1] & 1) != 0)
    {
      v14 = *((_QWORD *)result + 3);
      v15 = *(_OWORD *)v2;
      v24 = a2[3];
      *(_OWORD *)v2 = *v3;
      *((_QWORD *)result + 3) = v24;
    }
    else
    {
      v14 = *((_QWORD *)result + 3);
      *((_QWORD *)result + 3) = 1;
      result += 24;
      v15 = *(_OWORD *)v2;
      *((_QWORD *)result - 2) &= ~1uLL;
      *((_QWORD *)result - 2) = a2[1] & 0xFFFFFFFFFFFFFFFELL;
      *((_QWORD *)result - 1) = a2[2];
      v16 = a2[3];
      v17 = (char *)(a2 + 3) - result;
      if (v16 == 1)
        v17 = 0;
      *(_QWORD *)result = v17 + v16;
    }
    *v3 = v15;
    a2[3] = v14;
  }
  else if ((a2[1] & 1) != 0)
  {
    v18 = a2[3];
    a2[3] = 1;
    v19 = (char *)(a2 + 3);
    v20 = *v3;
    *((_QWORD *)v19 - 2) &= ~1uLL;
    *((_QWORD *)v19 - 2) = *((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFFELL;
    *((_QWORD *)v19 - 1) = *((_QWORD *)result + 2);
    v22 = *((_QWORD *)result + 3);
    result += 24;
    v21 = v22;
    v23 = result - v19;
    if (v22 == 1)
      v23 = 0;
    *(_QWORD *)v19 = v23 + v21;
    *(_OWORD *)v2 = v20;
    v2[2] = v18;
  }
  else
  {
    v5 = *((_QWORD *)result + 3);
    result += 24;
    v4 = v5;
    v6 = *((_QWORD *)result - 2);
    v7 = *((_QWORD *)result - 1);
    v8 = result - (char *)v25;
    if (v5 == 1)
      v8 = 0;
    v9 = v8 + v4;
    *((_QWORD *)result - 2) = a2[1] & 0xFFFFFFFFFFFFFFFELL | *((_QWORD *)result - 2) & 1;
    *((_QWORD *)result - 1) = a2[2];
    v10 = (char *)(a2 + 3);
    v11 = a2[3];
    v12 = (char *)(a2 + 3) - result;
    if (v11 == 1)
      v12 = 0;
    *(_QWORD *)result = v12 + v11;
    a2[1] = v6 & 0xFFFFFFFFFFFFFFFELL | a2[1] & 1;
    a2[2] = v7;
    v13 = (char *)((char *)v25 - v10);
    if (v9 == 1)
      v13 = 0;
    *(_QWORD *)v10 = &v13[v9];
  }
  return result;
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>(uint64_t a1, uint64_t *a2, char *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char *v12;
  uint64_t v13;
  _BOOL4 v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int64_t v78;
  unint64_t v79;
  char v80;
  int64_t v81;
  int64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  int64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int64_t v102;
  int64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  int64_t v109;
  int64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  int64_t v125;
  char *v126;
  char *v127;
  int64_t v128;
  int64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  int64_t v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int64_t v144;
  int64_t v145;
  int64_t v146;
  int64_t v147;
  uint64_t v148;
  int64_t v149;
  int64_t v150;
  char *v151;
  char *v152;
  int64_t v153;
  int64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  int64_t v158;
  char *v159;
  unint64_t v160;
  int64_t v161;
  int64_t v162;
  int64_t v163;
  int64_t v164;
  uint64_t v165;
  int64_t v166;
  int64_t v167;
  int64_t v168;
  int64_t v169;
  unint64_t v170;
  int64_t v171;
  unint64_t v172;
  int64_t v173;
  char *v174;
  char *v175;
  int64_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v182;
  unint64_t v183;
  int64_t v184;
  int64_t v185;
  unint64_t v186;
  int64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int64_t v191;
  int64_t v192;
  char *v193;
  uint64_t *v194;
  int64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  int64_t v202;
  uint64_t v203;
  uint64_t v204;
  int64_t v205;
  uint64_t v206;
  int64_t v207;
  uint64_t v208;
  int64_t v209;
  char *v210;
  char *v211;
  int64_t v212;
  int64_t v213;
  char *v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  char *v218;
  int64_t v219;
  int64_t v220;
  int64_t v221;
  int64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  int64_t v231;
  uint64_t v232;
  int64_t v233;
  uint64_t v234;
  int64_t v235;
  int64_t v236;
  int64_t v237;
  int64_t v238;
  int64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  int64_t v243;
  int64_t v244;
  char *v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  int64_t v251;
  uint64_t v252;
  int64_t v253;
  int64_t v254;
  int64_t v255;
  int64_t v256;
  int64_t v257;
  int64_t v258;
  int64_t v259;
  int64_t v260;
  int64_t v261;
  int64_t v262;
  int64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  int64_t v267;
  int64_t v268;
  char *v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  char *v273;
  int64_t v274;
  int64_t v275;
  int64_t v276;
  int64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  _BYTE *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  unint64_t v290;
  int v292;
  const char *v293;
  uint64_t v294;
  int64_t v295;
  int64_t v296;
  uint64_t v297;
  int64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int64_t v303;
  int64_t v304;
  int64_t v305;
  int64_t v306;
  int64_t v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  int64_t v311;
  int64_t v312;
  int64_t v313;
  uint64_t v314;
  uint64_t v315;
  int64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int64_t v324;
  int64_t v325;
  uint64_t v326;
  uint64_t v327;

  v4 = *(unsigned __int8 *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v8 = (char *)(a1 + 9);
    v7 = a1 + 9 - (_QWORD)&v300;
    if (v7 == 1)
      v8 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = a1 + 24 - (_QWORD)&v300;
    if (v5 == 1)
      v6 = 0;
    v7 = v6 + v5;
    v8 = (char *)&v300 + v7;
    if (v7 == 1)
      v8 = 0;
    v4 = *(_QWORD *)(a1 + 8);
  }
  v9 = v4 >> 1;
  v300 = v7;
  v10 = *a2;
  v11 = *a2 == 1;
  if (*a2 == 1)
    v12 = 0;
  else
    v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)a3 == 1;
  if (*(_QWORD *)a3 == 1)
    v15 = 0;
  else
    v15 = &a3[v13];
  v16 = 0;
  v17 = v12 == v15 || v9 == 0;
  if (!v17)
  {
    do
    {
      v8[v16] = *v12;
      v18 = *a2;
      v10 = *a2 + 1;
      *a2 = v10;
      v17 = v18 == 0;
      v11 = v18 == 0;
      if (v17)
        v12 = 0;
      else
        v12 = (char *)a2 + v10;
      v13 = *(_QWORD *)a3;
      v14 = *(_QWORD *)a3 == 1;
      v15 = &a3[*(_QWORD *)a3];
      if (*(_QWORD *)a3 == 1)
        v15 = 0;
    }
    while (v12 != v15 && v9 - 1 != v16++);
  }
  if (v12 == v15)
  {
    v28 = (char *)&v300 - (char *)&v298;
    v29 = (char *)&v298 - (char *)&v325;
    v30 = (char *)&v300 - (char *)&v296;
    if (v300 == 1)
      v28 = 0;
    v31 = v300 + v16 + v28;
    v298 = v31;
    if (v300 == 1)
      v30 = 0;
    if (v31 == 1)
      v29 = 0;
    v32 = v29 + v31;
    v325 = v32;
    v33 = (char *)&v325 - (char *)&v299;
    if (v32 == 1)
      v33 = 0;
    v34 = v33 + v32;
    v299 = v34;
    v35 = v300 + v9 + v30;
    v296 = v35;
    v36 = (char *)&v296 - (char *)&v324;
    if (v35 == 1)
      v36 = 0;
    v37 = v36 + v35;
    v324 = v37;
    v38 = (char *)&v324 - (char *)&v297;
    if (v37 == 1)
      v38 = 0;
    v39 = v38 + v37;
    v297 = v39;
    if (v34 == 1)
      v40 = 0;
    else
      v40 = (char *)&v299 + v34;
    if (v39 == 1)
      v41 = 0;
    else
      v41 = (char *)&v297 + v39;
    v42 = v40 - v41;
    if (v40 != v41)
    {
      v43 = *(unsigned __int8 *)(a1 + 8);
      if ((v43 & 1) != 0)
      {
        v44 = v43 >> 1;
        v47 = a1 - (_QWORD)&v326 + 9;
      }
      else
      {
        v43 = *(_QWORD *)(a1 + 8);
        v44 = v43 >> 1;
        v45 = *(_QWORD *)(a1 + 24);
        v46 = a1 + 24 - (_QWORD)&v326;
        if (v45 == 1)
          v46 = 0;
        v47 = v46 + v45;
      }
      v81 = (char *)&v326 - (char *)&v327;
      if (v47 == 1)
        v81 = 0;
      v82 = v81 + v47;
      if (v82 == 1)
        v83 = 0;
      else
        v83 = (char *)&v327 + v82;
      v84 = v44 + v83 - v41;
      if (v84 != -1)
      {
        memmove(v40, v41, v84 + 1);
        LOBYTE(v43) = *(_BYTE *)(a1 + 8);
      }
      v85 = v44 + v42;
      if ((v43 & 1) != 0)
      {
        if (v85 <= 0x7F)
        {
          *(_BYTE *)(a1 + 8) = (2 * v85) | 1;
          return a1;
        }
        v292 = 468;
        v293 = "priv_short_size";
      }
      else
      {
        if ((v85 & 0x8000000000000000) == 0)
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 1 | (2 * v85);
          return a1;
        }
        v292 = 476;
        v293 = "priv_long_size";
      }
      __assert_rtn(v293, "string.hpp", v292, "sz <= mask");
    }
  }
  else
  {
    v20 = (char *)a2 - (char *)&v295;
    if (v11)
      v20 = 0;
    v21 = v20 + v10;
    v22 = a3 - (char *)&v294;
    if (v14)
      v22 = 0;
    v23 = v22 + v13;
    v294 = v22 + v13;
    v295 = v21;
    v24 = *(unsigned __int8 *)(a1 + 8);
    if ((v24 & 1) != 0)
    {
      v27 = a1 - (_QWORD)&v327 + (v24 >> 1) + 9;
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 24);
      v26 = a1 + 24 - (_QWORD)&v327;
      if (v25 == 1)
        v26 = 0;
      v27 = v26 + v25 + (*(_QWORD *)(a1 + 8) >> 1);
      LODWORD(v24) = *(_QWORD *)(a1 + 8);
    }
    v48 = (char *)&v327 - (char *)&v303;
    if (v27 == 1)
      v48 = 0;
    v49 = v48 + v27;
    v303 = v49;
    v50 = (char *)&v303 - (char *)&v304;
    if (v49 == 1)
      v50 = 0;
    v304 = v50 + v49;
    v51 = (char *)&v295 - (char *)&v302;
    if (v21 == 1)
      v51 = 0;
    v52 = v51 + v21;
    v53 = -56;
    if (v23 == 1)
      v53 = 0;
    v54 = v53 + v23;
    v301 = v54;
    v302 = v52;
    v55 = (char *)&v302 + v52;
    if (v52 == 1)
      v55 = 0;
    v56 = (char *)&v301 + v54;
    if (v54 == 1)
      v56 = 0;
    if (v55 != v56)
    {
      v57 = (char *)&v302 - (char *)&v324;
      if (v52 == 1)
        v57 = 0;
      v58 = v57 + v52;
      v59 = (char *)&v301 - (char *)&v323;
      if (v54 == 1)
        v59 = 0;
      v60 = v59 + v54;
      v323 = v60;
      v324 = v58;
      v61 = (char *)&v324 - (char *)&v327;
      if (v58 == 1)
        v61 = 0;
      v62 = v61 + v58;
      v63 = (char *)&v323 - (char *)&v326;
      if (v60 == 1)
        v63 = 0;
      v64 = v63 + v60;
      if (v64 == 1)
        v65 = 0;
      else
        v65 = (char *)&v326 + v64;
      v66 = (char *)&v327 + v62;
      if (v62 == 1)
        v66 = 0;
      v67 = v65 - v66;
      if ((v24 & 1) != 0)
      {
        v70 = v24 >> 1;
        v73 = a1 - (_QWORD)&v322 + 9;
        v321 = 0;
        v322 = v73;
        v319 = 1;
        v320 = 1;
        if (22 - v70 >= v67)
          goto LABEL_169;
        v68 = 23;
      }
      else
      {
        v69 = *(_QWORD *)(a1 + 8);
        v68 = *(_QWORD *)(a1 + 16);
        v70 = v69 >> 1;
        v71 = *(_QWORD *)(a1 + 24);
        v72 = a1 + 24 - (_QWORD)&v322;
        if (v71 == 1)
          v72 = 0;
        v73 = v72 + v71;
        v322 = v73;
        v319 = 1;
        v320 = 1;
        if (v68 + ~(v69 >> 1) >= v67)
        {
          LOBYTE(v24) = v69;
          goto LABEL_169;
        }
      }
      if (*(_QWORD *)a1 == 1)
        v74 = 0;
      else
        v74 = *(_QWORD *)a1 + a1;
      v75 = *(_QWORD *)(v74 + 48);
      v76 = 2 * v68;
      if (v68 < 0)
        v76 = -1;
      v77 = v68 + v67;
      if (v76 < v75)
        v75 = v76;
      if (v77 <= v75)
        v77 = v75;
      v321 = v77;
      v78 = (char *)&v322 - (char *)&v320;
      if (v73 == 1)
        v78 = 0;
      v320 = v78 + v73;
      v79 = v70 + v67;
      if ((v24 & 1) != 0)
      {
        v80 = 1;
        v320 = 1;
      }
      else
      {
        v80 = 7;
      }
      boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v327, (_QWORD *)a1, v80, v70 + v67 + 1, &v321, &v320);
      v86 = (char *)&v327 - (char *)&v319;
      if (v327 == 1)
        v86 = 0;
      v87 = v86 + v327;
      v319 = v87;
      v73 = v322;
      if (v322 == 1)
        v88 = 0;
      else
        v88 = (char *)&v322 + v322;
      v89 = (char *)&v319 + v87;
      if (v87 == 1)
        v89 = 0;
      if (v88 != v89)
      {
        v90 = 8;
        if (v87 == 1)
          v90 = 0;
        v91 = v90 + v87;
        v318 = v91;
        if (v320 == 1)
        {
          v92 = (char *)&v322 - (char *)&v317;
          if (v322 == 1)
            v92 = 0;
          v93 = v92 + v322;
          v94 = (char *)&v304 - (char *)&v316;
          if (v304 == 1)
            v94 = 0;
          v95 = v94 + v304;
          v316 = v94 + v304;
          v317 = v92 + v322;
          v96 = (char *)&v318 - (char *)&v315;
          if (v91 == 1)
            v96 = 0;
          v97 = v96 + v91;
          v315 = v96 + v91;
          v98 = (char *)&v315 - (char *)&v326;
          if (v96 + v91 == 1)
            v98 = 0;
          v326 = v98 + v97;
          v99 = (char *)&v317 + v93;
          if (v93 == 1)
            v99 = 0;
          v100 = (char *)&v316 + v95;
          if (v95 == 1)
            v100 = 0;
          if (v99 == v100)
          {
            v101 = 0;
          }
          else
          {
            v101 = 0;
            do
            {
              if (v97 == 1)
                v102 = 0;
              else
                v102 = (char *)&v315 - (char *)&v325;
              v103 = v102 + v97;
              v325 = v103;
              if (v103 == 1)
                v104 = 0;
              else
                v104 = (char *)&v325 + v103;
              if (v104)
                v105 = v104 - (char *)&v327;
              else
                v105 = 1;
              if (v105 == 1)
                v106 = 0;
              else
                v106 = (char *)&v327 + v105;
              *v106 = *v99;
              v97 = ++v315;
              v107 = v317++;
              ++v101;
              if (v107)
                v99 = (char *)&v317 + v107 + 1;
              else
                v99 = 0;
              if (v316 == 1)
                v108 = 0;
              else
                v108 = (char *)&v316 + v316;
            }
            while (v99 != v108);
            v91 = v318;
          }
          v231 = (char *)&v302 - (char *)&v314;
          if (v302 == 1)
            v231 = 0;
          v232 = v231 + v302;
          v233 = (char *)&v301 - (char *)&v313;
          if (v301 == 1)
            v233 = 0;
          v234 = v233 + v301;
          v313 = v233 + v301;
          v314 = v231 + v302;
          v235 = (char *)&v318 - (char *)&v311;
          if (v91 == 1)
            v235 = 0;
          v236 = v91 + v101 + v235;
          v237 = (char *)&v311 - (char *)&v312;
          if (v236 == 1)
            v237 = 0;
          v238 = v237 + v236;
          v311 = v91 + v101 + v235;
          v312 = v238;
          v239 = (char *)&v312 - (char *)&v326;
          if (v238 == 1)
            v239 = 0;
          v326 = v239 + v238;
          if (v232 == 1)
            v240 = 0;
          else
            v240 = (char *)&v314 + v232;
          v241 = (char *)&v313 + v234;
          if (v234 == 1)
            v241 = 0;
          if (v240 == v241)
          {
            v242 = 0;
          }
          else
          {
            v242 = 0;
            do
            {
              if (v238 == 1)
                v243 = 0;
              else
                v243 = (char *)&v312 - (char *)&v325;
              v244 = v243 + v238;
              v325 = v244;
              if (v244 == 1)
                v245 = 0;
              else
                v245 = (char *)&v325 + v244;
              if (v245)
                v246 = v245 - (char *)&v327;
              else
                v246 = 1;
              if (v246 == 1)
                v247 = 0;
              else
                v247 = (char *)&v327 + v246;
              *v247 = *v240;
              v238 = ++v312;
              v248 = v314++;
              ++v242;
              if (v248)
                v240 = (char *)&v314 + v314;
              else
                v240 = 0;
              if (v313 == 1)
                v249 = 0;
              else
                v249 = (char *)&v313 + v313;
            }
            while (v240 != v249);
            v91 = v318;
          }
          v250 = v242 + v101;
          v251 = (char *)&v304 - (char *)&v310;
          if (v304 == 1)
            v251 = 0;
          v252 = v251 + v304;
          v253 = (char *)&v322 - (char *)&v307;
          if (v322 == 1)
            v253 = 0;
          v254 = v322 + v70 + v253;
          v307 = v254;
          v255 = (char *)&v307 - (char *)&v308;
          if (v254 == 1)
            v255 = 0;
          v256 = v255 + v254;
          v308 = v256;
          v257 = (char *)&v308 - (char *)&v309;
          if (v256 == 1)
            v257 = 0;
          v258 = v257 + v256;
          v309 = v257 + v256;
          v310 = v252;
          v259 = (char *)&v318 - (char *)&v305;
          if (v91 == 1)
            v259 = 0;
          v260 = v91 + v250 + v259;
          v261 = (char *)&v305 - (char *)&v306;
          if (v260 == 1)
            v261 = 0;
          v262 = v261 + v260;
          v305 = v260;
          v306 = v262;
          v263 = (char *)&v306 - (char *)&v326;
          if (v262 == 1)
            v263 = 0;
          v326 = v263 + v262;
          v264 = (char *)&v310 + v252;
          if (v252 == 1)
            v264 = 0;
          v265 = (char *)&v309 + v258;
          if (v258 == 1)
            v265 = 0;
          if (v264 == v265)
          {
            v266 = 0;
          }
          else
          {
            v266 = 0;
            do
            {
              if (v262 == 1)
                v267 = 0;
              else
                v267 = (char *)&v306 - (char *)&v325;
              v268 = v267 + v262;
              v325 = v268;
              if (v268 == 1)
                v269 = 0;
              else
                v269 = (char *)&v325 + v268;
              if (v269)
                v270 = v269 - (char *)&v327;
              else
                v270 = 1;
              if (v270 == 1)
                v271 = 0;
              else
                v271 = (char *)&v327 + v270;
              *v271 = *v264;
              v262 = ++v306;
              v272 = v310++;
              ++v266;
              if (v272)
                v264 = (char *)&v310 + v310;
              else
                v264 = 0;
              if (v309 == 1)
                v273 = 0;
              else
                v273 = (char *)&v309 + v309;
            }
            while (v264 != v273);
            v91 = v318;
          }
          v79 = v266 + v250;
          v274 = (char *)&v318 - (char *)&v308;
          if (v91 == 1)
            v274 = 0;
          v275 = v91 + v79 + v274;
          v308 = v275;
          v276 = (char *)&v308 - (char *)&v325;
          if (v275 == 1)
            v276 = 0;
          v277 = v276 + v275;
          v325 = v277;
          v278 = -8;
          if (v277 == 1)
            v278 = 0;
          v279 = v278 + v277;
          v280 = (char *)&v326 + v279;
          if (v279 == 1)
            v280 = 0;
          if (v280)
            v281 = v280 - (char *)&v327;
          else
            v281 = 1;
          if (v281 == 1)
            v282 = 0;
          else
            v282 = (char *)&v327 + v281;
          *v282 = 0;
          if ((*(_BYTE *)(a1 + 8) & 1) != 0)
          {
            v285 = a1 - (_QWORD)&v327 + 9;
            v286 = 23;
          }
          else
          {
            v283 = *(_QWORD *)(a1 + 24);
            v284 = a1 + 24 - (_QWORD)&v327;
            if (v283 == 1)
              v284 = 0;
            v285 = v284 + v283;
            v286 = *(_QWORD *)(a1 + 16);
          }
          v327 = v285;
          boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate((char *)a1, &v327, v286);
          if ((*(_BYTE *)(a1 + 8) & 1) != 0)
            *(_QWORD *)(a1 + 8) &= ~1uLL;
          v287 = -72;
          if (v318 == 1)
            v287 = 0;
          v288 = v287 + v318;
          v327 = v288;
          v289 = (char *)&v327 - a1 - 24;
          if (v288 == 1)
            v289 = 0;
          v230 = &v289[v288];
        }
        else
        {
          if (v91 == 1)
            v197 = 0;
          else
            v197 = (char *)&v318 + v91;
          if (v304 == 1)
            v198 = 0;
          else
            v198 = (char *)&v304 + v304;
          v199 = v198 - v88;
          if (v198 != v88)
            memmove(v197, v88, v198 - v88);
          if (v70 != v199)
            memmove(&v197[v199 + v67], v198, v70 - v199);
          v200 = (char *)&v302 - (char *)&v317;
          if (v302 == 1)
            v200 = 0;
          v201 = v200 + v302;
          v202 = (char *)&v301 - (char *)&v316;
          if (v301 == 1)
            v202 = 0;
          v203 = v202 + v301;
          v316 = v202 + v301;
          v317 = v201;
          v204 = v318;
          v205 = (char *)&v318 - (char *)&v314;
          if (v318 == 1)
            v205 = 0;
          v206 = v318 + v205 + v199;
          v314 = v206;
          v207 = (char *)&v314 - (char *)&v315;
          if (v206 == 1)
            v207 = 0;
          v208 = v207 + v206;
          v315 = v208;
          v209 = (char *)&v315 - (char *)&v326;
          if (v208 == 1)
            v209 = 0;
          v326 = v209 + v208;
          if (v201 == 1)
            v210 = 0;
          else
            v210 = (char *)&v317 + v201;
          if (v203 == 1)
            v211 = 0;
          else
            v211 = (char *)&v316 + v203;
          if (v210 != v211)
          {
            do
            {
              if (v208 == 1)
                v212 = 0;
              else
                v212 = (char *)&v315 - (char *)&v325;
              v213 = v212 + v208;
              v325 = v213;
              if (v213 == 1)
                v214 = 0;
              else
                v214 = (char *)&v325 + v213;
              if (v214)
                v215 = v214 - (char *)&v327;
              else
                v215 = 1;
              if (v215 == 1)
                v216 = 0;
              else
                v216 = (char *)&v327 + v215;
              *v216 = *v210;
              v208 = ++v315;
              v217 = v317++;
              if (v217)
                v210 = (char *)&v317 + v217 + 1;
              else
                v210 = 0;
              if (v316 == 1)
                v218 = 0;
              else
                v218 = (char *)&v316 + v316;
            }
            while (v210 != v218);
            v204 = v318;
          }
          v219 = (char *)&v318 - (char *)&v313;
          if (v204 == 1)
            v219 = 0;
          v220 = v204 + v79 + v219;
          v313 = v220;
          v221 = (char *)&v313 - (char *)&v325;
          if (v220 == 1)
            v221 = 0;
          v222 = v221 + v220;
          v325 = v222;
          v223 = -8;
          if (v222 == 1)
            v223 = 0;
          v224 = v223 + v222;
          v225 = (char *)&v326 + v224;
          if (v224 == 1)
            v225 = 0;
          if (v225)
            v226 = v225 - (char *)&v327;
          else
            v226 = 1;
          if (v226 == 1)
            v227 = 0;
          else
            v227 = (char *)&v327 + v226;
          *v227 = 0;
          if ((*(_BYTE *)(a1 + 8) & 1) != 0)
            *(_QWORD *)(a1 + 8) &= ~1uLL;
          v228 = -72;
          if (v318 == 1)
            v228 = 0;
          v327 = v228 + v318;
          v229 = (char *)&v327 - a1 - 24;
          if (v228 + v318 == 1)
            v229 = 0;
          v230 = &v229[v228 + v318];
        }
        *(_QWORD *)(a1 + 24) = v230;
        if ((v79 & 0x8000000000000000) == 0)
        {
          v290 = v321;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 1 | (2 * v79);
          *(_QWORD *)(a1 + 16) = v290;
          return a1;
        }
        goto LABEL_517;
      }
      LOBYTE(v24) = *(_BYTE *)(a1 + 8);
      if ((v24 & 1) == 0)
        *(_QWORD *)(a1 + 16) = v321;
LABEL_169:
      v109 = (char *)&v322 - (char *)&v327;
      if (v73 == 1)
        v109 = 0;
      v110 = v109 + v73;
      if (v304 == 1)
        v111 = 0;
      else
        v111 = (char *)&v304 + v304;
      v112 = (char *)&v327 + v110;
      if (v110 == 1)
        v112 = 0;
      v113 = v112 - v111 + v70;
      v114 = v113 - v67;
      if (v113 < v67)
      {
        v115 = (char *)&v302 - (char *)&v318;
        if (v302 == 1)
          v115 = 0;
        v116 = v113 + v302 + v115 + 1;
        v117 = (char *)&v318 - (char *)&v317;
        if (!(v113 + v302 + v115))
          v117 = 0;
        v118 = v117 + v116;
        v317 = v117 + v116;
        v318 = v113 + v302 + v115 + 1;
        v119 = (char *)&v301 - (char *)&v316;
        if (v301 == 1)
          v119 = 0;
        v120 = v119 + v301;
        v316 = v119 + v301;
        if (v73 == 1)
          v121 = 0;
        else
          v121 = (char *)&v322 - (char *)&v314;
        v122 = v73 + v121 + v70 + 1;
        v314 = v122;
        v123 = (char *)&v314 - (char *)&v315;
        if (v122 == 1)
          v123 = 0;
        v124 = v123 + v122;
        v315 = v124;
        v125 = (char *)&v315 - (char *)&v326;
        if (v124 == 1)
          v125 = 0;
        v326 = v125 + v124;
        if (v118 == 1)
          v126 = 0;
        else
          v126 = (char *)&v317 + v118;
        if (v120 == 1)
          v127 = 0;
        else
          v127 = (char *)&v316 + v120;
        if (v126 != v127)
        {
          do
          {
            if (v124 == 1)
              v128 = 0;
            else
              v128 = (char *)&v315 - (char *)&v325;
            v129 = v128 + v124;
            v325 = v129;
            if (v129 == 1)
              v130 = 0;
            else
              v130 = (char *)&v325 + v129;
            if (v130)
              v131 = v130 - (char *)&v327;
            else
              v131 = 1;
            if (v131 == 1)
              v132 = 0;
            else
              v132 = (char *)&v327 + v131;
            *v132 = *v126;
            v124 = ++v315;
            v133 = v317++;
            if (v133)
              v126 = (char *)&v317 + v133 + 1;
            else
              v126 = 0;
            if (v316 == 1)
              v134 = 0;
            else
              v134 = (char *)&v316 + v316;
          }
          while (v126 != v134);
          LOBYTE(v24) = *(_BYTE *)(a1 + 8);
        }
        v135 = v67 - v113 + v70;
        if ((v24 & 1) != 0)
        {
          if (v135 >= 0x80)
            goto LABEL_518;
          v137 = (2 * v135) | 1;
          *(_BYTE *)(a1 + 8) = v137;
        }
        else
        {
          if ((v135 & 0x8000000000000000) != 0)
            goto LABEL_517;
          v136 = *(_QWORD *)(a1 + 8) & 1 | (2 * v135);
          *(_QWORD *)(a1 + 8) = v136;
          v137 = v136;
        }
        v161 = (char *)&v304 - (char *)&v313;
        if (v304 == 1)
          v161 = 0;
        v162 = v161 + v304;
        v313 = v161 + v304;
        v163 = (char *)&v322 - (char *)&v310;
        v164 = (char *)&v310 - (char *)&v311;
        if (v322 == 1)
          v163 = 0;
        v165 = v322 + v70 + 1 + v163;
        v310 = v165;
        if (v322 == 1)
          v166 = 0;
        else
          v166 = (char *)&v322 - (char *)&v308;
        if (v165 == 1)
          v164 = 0;
        v167 = v164 + v165;
        v168 = (char *)&v311 - (char *)&v312;
        if (v167 == 1)
          v168 = 0;
        v169 = v168 + v167;
        v311 = v167;
        v312 = v169;
        v170 = v322 + v135 + v166;
        v308 = v170;
        v171 = (char *)&v308 - (char *)&v309;
        if (v170 == 1)
          v171 = 0;
        v172 = v171 + v170;
        v309 = v172;
        v173 = (char *)&v309 - (char *)&v326;
        if (v172 == 1)
          v173 = 0;
        v326 = v173 + v172;
        v174 = (char *)&v313 + v162;
        if (v162 == 1)
          v174 = 0;
        v175 = (char *)&v312 + v169;
        if (v169 == 1)
          v175 = 0;
        if (v174 != v175)
        {
          do
          {
            if (v172 == 1)
              v176 = 0;
            else
              v176 = (char *)&v309 - (char *)&v325;
            v177 = v176 + v172;
            v325 = v177;
            if (v177 == 1)
              v178 = 0;
            else
              v178 = (char *)&v325 + v177;
            if (v178)
              v179 = v178 - (char *)&v327;
            else
              v179 = 1;
            if (v179 == 1)
              v180 = 0;
            else
              v180 = (char *)&v327 + v179;
            *v180 = *v174;
            v172 = ++v309;
            if (v313++)
              v174 = (char *)&v313 + v313;
            else
              v174 = 0;
            if (v312 == 1)
              v182 = 0;
            else
              v182 = (char *)&v312 + v312;
          }
          while (v174 != v182);
          v137 = *(_BYTE *)(a1 + 8);
        }
        v183 = v70 + v67;
        if ((v137 & 1) == 0)
        {
          if ((v183 & 0x8000000000000000) == 0)
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 1 | (2 * v183);
LABEL_331:
            v195 = (char *)&v302 - (char *)&v327;
            if (v302 == 1)
              v195 = 0;
            v327 = v195 + v302;
            v196 = -64;
            if (v318 == 1)
              v196 = 0;
            v326 = v196 + v318;
            if (v304 == 1)
              v193 = 0;
            else
              v193 = (char *)&v304 + v304;
            v194 = &v326;
LABEL_339:
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::priv_copy<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>,char *>(&v327, v194, v193);
            return a1;
          }
LABEL_517:
          __assert_rtn("priv_long_size", "string.hpp", 476, "sz <= mask");
        }
        if (v183 < 0x80)
        {
          *(_BYTE *)(a1 + 8) = (2 * v183) | 1;
          goto LABEL_331;
        }
LABEL_518:
        __assert_rtn("priv_short_size", "string.hpp", 468, "sz <= mask");
      }
      v138 = (char *)&v322 - (char *)&v317;
      v139 = -8;
      v140 = (char *)&v322 - (char *)&v315;
      if (v73 == 1)
        v138 = 0;
      v141 = v70 + v73 + v138 + 1;
      v317 = v141;
      if (v73 == 1)
        v140 = 0;
      if (v141 == 1)
        v139 = 0;
      v142 = v139 + v141;
      v318 = v142;
      v143 = v70 - v67 + v73 + v140 + 1;
      v315 = v143;
      v144 = (char *)&v315 - (char *)&v316;
      if (!(v70 - v67 + v73 + v140))
        v144 = 0;
      v145 = v144 + v143;
      v316 = v144 + v143;
      v146 = (char *)&v318 - (char *)&v314;
      v147 = (char *)&v318 - (char *)&v313;
      if (v142 == 1)
        v146 = 0;
      v148 = v146 + v142;
      if (v142 == 1)
        v147 = 0;
      v149 = v147 + v142;
      v313 = v149;
      v314 = v148;
      v150 = (char *)&v313 - (char *)&v326;
      if (v149 == 1)
        v150 = 0;
      v326 = v150 + v149;
      v151 = (char *)&v316 + v145;
      if (v145 == 1)
        v151 = 0;
      v152 = (char *)&v314 + v148;
      if (v148 == 1)
        v152 = 0;
      if (v151 != v152)
      {
        do
        {
          if (v149 == 1)
            v153 = 0;
          else
            v153 = (char *)&v313 - (char *)&v325;
          v154 = v153 + v149;
          v325 = v154;
          if (v154 == 1)
            v155 = 0;
          else
            v155 = (char *)&v325 + v154;
          if (v155)
            v156 = v155 - (char *)&v327;
          else
            v156 = 1;
          if (v156 == 1)
            v157 = 0;
          else
            v157 = (char *)&v327 + v156;
          *v157 = *v151;
          v149 = ++v313;
          v158 = v316++;
          if (v158)
            v151 = (char *)&v316 + v158 + 1;
          else
            v151 = 0;
          if (v314 == 1)
            v159 = 0;
          else
            v159 = (char *)&v314 + v314;
        }
        while (v151 != v159);
        LOBYTE(v24) = *(_BYTE *)(a1 + 8);
      }
      v160 = v70 + v67;
      if ((v24 & 1) != 0)
      {
        if (v160 >= 0x80)
          goto LABEL_518;
        *(_BYTE *)(a1 + 8) = (2 * v160) | 1;
      }
      else
      {
        if ((v160 & 0x8000000000000000) != 0)
          goto LABEL_517;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 1 | (2 * v160);
      }
      v184 = v304;
      v185 = (char *)&v304 - (char *)&v326;
      if (v304 == 1)
        v185 = 0;
      v186 = v304 + v67 + v185;
      v187 = (char *)&v326 - (char *)&v327;
      if (v186 == 1)
        v187 = 0;
      v188 = v187 + v186;
      v326 = v186;
      v327 = v188;
      if (v114 != -1)
      {
        if (v304 == 1)
          v189 = 0;
        else
          v189 = (char *)&v304 + v304;
        if (v188 == 1)
          v190 = 0;
        else
          v190 = (char *)&v327 + v188;
        memmove(v190, v189, v114 + 1);
        v184 = v304;
      }
      v191 = (char *)&v302 - (char *)&v327;
      if (v302 == 1)
        v191 = 0;
      v327 = v191 + v302;
      v192 = (char *)&v301 - (char *)&v325;
      if (v301 == 1)
        v192 = 0;
      v325 = v192 + v301;
      if (v184 == 1)
        v193 = 0;
      else
        v193 = (char *)&v304 + v184;
      v194 = &v325;
      goto LABEL_339;
    }
  }
  return a1;
}

uint64_t *boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::priv_copy<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>,char *>(uint64_t *result, _QWORD *a2, char *a3)
{
  char *v3;
  BOOL i;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (char *)result + *result;
  for (i = *result == 1; ; i = v7 == 0)
  {
    v5 = i ? 0 : v3;
    v6 = *a2 == 1 ? 0 : (char *)a2 + *a2;
    if (v5 == v6)
      break;
    *a3++ = *v5;
    v7 = *result;
    v8 = *result + 1;
    *result = v8;
    v3 = (char *)result + v8;
  }
  return result;
}

double boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::table(uint64_t a1, _QWORD *a2)
{
  char *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double result;
  _BYTE v9[8];

  *(_BYTE *)a1 = 0;
  if (*a2 == 1)
    v2 = 0;
  else
    v2 = (char *)a2 + *a2;
  if (v2)
    v3 = v2 - v9;
  else
    v3 = 1;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = &v9[v3];
  v5 = (uint64_t)&v4[-a1 - 8];
  if (!v4)
    v5 = 1;
  *(_QWORD *)(a1 + 8) = v5;
  if (*a2 == 1)
    v6 = 0;
  else
    v6 = (char *)a2 + *a2;
  v7 = (uint64_t)&v6[-a1 - 16];
  if (!v6)
    v7 = 1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = xmmword_1A17B6DB0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1A17B6C70;
  return result;
}

BOOL pf::SceneTaxonomyLineParser::parseSHA(pf::SceneTaxonomyLineParser *this, char *a2)
{
  int v2;
  uint64_t v3;
  char *v5;
  uint8_t buf[8];
  __int128 v7;
  unint64_t v8;
  char *v9;
  char **v10;

  v5 = a2;
  v2 = *((unsigned __int8 *)this + 48);
  if (*((_BYTE *)this + 48))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "only one SHA line allowed", buf, 2u);
    }
  }
  else
  {
    *((_BYTE *)this + 48) = 1;
    v3 = *((_QWORD *)this + 7);
    v7 = xmmword_1A17B6C50;
    *(_QWORD *)buf = &off_1E45A12B0;
    v8 = 0x80000001A17B7D41 & 0x7FFFFFFFFFFFFFFFLL;
    v9 = (char *)this + 96;
    v10 = &v5;
    boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v3, "digest", (uint64_t)buf);
  }
  return v2 == 0;
}

uint64_t pf::SceneTaxonomyLineParser::parseNode(pf::SceneTaxonomyLineParser *this, char *__s)
{
  uint64_t v2;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  uint64_t **v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t *v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  NSObject *v35;
  const char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  BOOL v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  int64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  int64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  unsigned __int8 v135;
  uint64_t v136;
  char v137;
  uint8_t buf[80];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  char v152;
  uint64_t v153;
  int64_t v154;
  int64_t v155;
  char *v156;
  uint64_t v157;
  _QWORD v158[4];
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD v166[2];
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 49))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "all node lines must come before any edges", buf, 2u);
    }
    return 0;
  }
  v6 = strrchr(__s, 44);
  if (v6)
  {
    v7 = v6;
    v149 = 0;
    v150 = 0;
    v148 = 0;
    v146 = 0.0;
    v147 = 0.0;
    v144 = 0.0;
    v145 = 0.0;
    v142 = 0.0;
    v143 = 0.0;
    v8 = sscanf(__s, "%ld,%ld,%d,%lf,%lf,%lf,%lf,%lf,%lf", &v150, &v149, &v148, &v147, &v146, &v145, &v144, &v143, &v142);
    v2 = 0;
    if (v8 != 9)
      return v2;
    v9 = v7 + 1;
    v10 = *((unsigned __int8 *)this + 16);
    v11 = v10 == 0;
    v12 = v10 != 0;
    if (v11)
      v13 = v148 != 0;
    else
      v13 = v12;
    pf::SceneTaxonomyNode::SceneTaxonomyNode((uint64_t)buf, v150, v149, v13, (_QWORD *)this + 15, v147, v144, v145, v146, v143, v142, v144);
    v14 = *((_QWORD *)this + 20);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)v166, v9, (_QWORD *)this + 12);
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::emplace_unique<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode&>((uint64_t)&v136, v14, (uint64_t)v166, (uint64_t)v166, (uint64_t)buf);
    v15 = (uint64_t **)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)v166);
    if (v137)
    {
      if (v136 == 1)
        v16 = 0;
      else
        v16 = (char *)&v136 + v136;
      *((_QWORD *)v16 + 13) = -104;
      if (v150 < 1)
        goto LABEL_186;
      v17 = *((_QWORD *)this + 21);
      *(_QWORD *)&v166[0] = v17 + 16;
      *((_QWORD *)&v166[0] + 1) = 1;
      boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(v15);
      if (*((_QWORD *)&v166[0] + 1) == 1)
        v18 = 0;
      else
        v18 = (uint64_t *)((char *)v166 + *((_QWORD *)&v166[0] + 1) + 8);
      *v18 = v150;
      v18[1] = v16 - (char *)(v18 + 1) + 32;
      if (*((_QWORD *)&v166[0] + 1) == 1)
        __assert_rtn("release", "implementation.hpp", 1955, "node_");
      v19 = (char *)v166 + 8 - (char *)&v155 + *((_QWORD *)&v166[0] + 1);
      v155 = v19;
      v156 = (char *)(v17 + 16);
      v20 = -16;
      if (v19 == 1)
        v20 = 0;
      v21 = v20 + v19;
      v157 = v21;
      v22 = (char *)&v157 - (char *)&v154;
      if (v21 == 1)
        v22 = 0;
      v23 = v22 + v21;
      v154 = v23;
      v24 = v23 == 1 ? 0 : (unint64_t *)((char *)&v154 + v23);
      v25 = *v24;
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::find_node_impl<unsigned long long,std::equal_to<unsigned long long>>(&v153, v17, *v24, (uint64_t *)v24);
      if (v153 == 1)
      {
        v26 = (char *)&v157 - (char *)&v151;
        if (v157 == 1)
          v26 = 0;
        v27 = v26 + v157;
        v151 = v27;
        v157 = 1;
        v28 = (char *)&v151 - (char *)v158;
        if (v27 == 1)
          v28 = 0;
        v29 = v28 + v27;
        v158[0] = v29;
        v30 = (char *)v158 - ((char *)v166 + 8);
        if (v29 == 1)
          v30 = 0;
        *(_QWORD *)&v166[0] = v17 + 16;
        *((_QWORD *)&v166[0] + 1) = v30 + v29;
        v31 = *(_QWORD *)(v17 + 32);
        v32 = v31 + 1;
        if (*(_QWORD *)(v17 + 56) == 1)
        {
          v33 = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(v32, *(float *)(v17 + 40));
          v34 = *(_QWORD *)(v17 + 24) <= v33 ? v33 : *(_QWORD *)(v17 + 24);
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(v17, v34);
        }
        else if (*(_QWORD *)(v17 + 48) < v32)
        {
          v42 = v31 + (v31 >> 1);
          if (v42 > v32)
            v32 = v42;
          v43 = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(v32, *(float *)(v17 + 40));
          if (v43 != *(_QWORD *)(v17 + 24))
          {
            if (*(_QWORD *)(v17 + 56) == 1)
              __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(v17, v43);
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *(_QWORD *)(v17 + 24));
            if (v165 == 1)
              v44 = 0;
            else
              v44 = (char *)&v165 + v165;
            v45 = *(_QWORD *)v44;
            v46 = v44 - (char *)&v164;
            if (v45 == 1)
              v46 = 0;
            v47 = v46 + v45;
            v164 = v47;
            v48 = v47 == 1;
            v49 = (char *)&v164 + v47;
            if (v47 == 1)
              v49 = 0;
            if (*((_QWORD *)v49 + 2) != 1)
            {
              do
              {
                v11 = !v48;
                v50 = 8;
                if (!v11)
                  v50 = 0;
                v51 = v50 + v47;
                v163 = v51;
                if (v51 == 1)
                  v52 = 0;
                else
                  v52 = (char *)&v163 + v51;
                v53 = *((_QWORD *)v52 + 2);
                v54 = v52 + 16 - (char *)&v165;
                if (v53 == 1)
                  v54 = 0;
                v55 = v54 + v53;
                v165 = v55;
                v56 = 24;
                if (v55 == 1)
                  v56 = 0;
                v57 = v56 + v55;
                v162 = v57;
                v58 = (char *)&v165 + v55;
                if (v55 == 1)
                {
                  v58 = 0;
                  v59 = 0;
                }
                else
                {
                  v59 = 40;
                }
                if (v57 == 1)
                  v60 = 0;
                else
                  v60 = (uint64_t *)((char *)&v162 + v57);
                v61 = *v60 % *(_QWORD *)(v17 + 24);
                *((_QWORD *)v58 + 3) = v61 & 0x7FFFFFFFFFFFFFFFLL;
                v62 = v59 + v55;
                v63 = (char *)&v160 + v62;
                if (v62 == 1)
                  v63 = 0;
                v64 = *((_QWORD *)v63 + 2);
                v65 = v63 + 16 - (char *)&v161;
                if (v64 == 1)
                  v65 = 0;
                v66 = v65 + v64;
                if (v66 != 1)
                {
                  v67 = (char *)&v161 + v66;
                  if (*(uint64_t *)((char *)&v161 + v66 + 24) < 0)
                  {
                    do
                    {
                      v68 = v66 - 32;
                      if (v66 == 33)
                        v69 = 0;
                      else
                        v69 = v67;
                      *((_QWORD *)v69 + 3) = v61 | 0x8000000000000000;
                      if (v66 == 33)
                        v70 = 0;
                      else
                        v70 = 40;
                      v62 = v70 + v68;
                      v71 = (char *)&v160 + v62;
                      if (v62 == 1)
                        v71 = 0;
                      v72 = *((_QWORD *)v71 + 2);
                      v73 = v71 + 16 - (char *)&v161;
                      if (v72 == 1)
                        v73 = 0;
                      v66 = v73 + v72;
                      if (v66 == 1)
                        break;
                      v67 = (char *)&v161 + v66;
                    }
                    while (*(uint64_t *)((char *)&v161 + v66 + 24) < 0);
                    v165 = v68;
                  }
                }
                v160 = v62;
                boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v161, v17, v61);
                v74 = (char *)&v161 + v161;
                if (v161 == 1)
                  v74 = 0;
                if (*(_QWORD *)v74 == 1)
                {
                  v75 = (char *)((char *)&v164 - v74);
                  if (v164 == 1)
                    v75 = 0;
                  *(_QWORD *)v74 = &v75[v164];
                  v76 = 8;
                  if (v165 == 1)
                    v76 = 0;
                  v47 = v76 + v165;
                  v164 = v76 + v165;
                  v77 = (char *)&v164 + v76 + v165;
                }
                else
                {
                  if (v165 == 1)
                    v78 = 0;
                  else
                    v78 = (char *)&v165 + v165;
                  v81 = *((_QWORD *)v78 + 2);
                  v79 = v78 + 16;
                  v80 = v81;
                  v82 = v79 - (char *)&v159;
                  if (v81 == 1)
                    v82 = 0;
                  v83 = v82 + v80;
                  v159 = v83;
                  if (*(_QWORD *)v74 == 1)
                    v84 = 0;
                  else
                    v84 = &v74[*(_QWORD *)v74];
                  v85 = *((_QWORD *)v84 + 2);
                  v86 = v84 + 16 - v79;
                  if (v85 == 1)
                    v86 = 0;
                  *(_QWORD *)v79 = v86 + v85;
                  v47 = v164;
                  v77 = (char *)&v164 + v164;
                  if (v164 == 1)
                    v87 = 0;
                  else
                    v87 = (char *)&v164 + v164;
                  v88 = *(_QWORD *)v74;
                  v89 = &v74[*(_QWORD *)v74];
                  if (v88 == 1)
                    v89 = 0;
                  v92 = *((_QWORD *)v87 + 2);
                  v90 = v87 + 16;
                  v91 = v92;
                  v93 = (char *)(v90 - (v89 + 16));
                  if (v92 == 1)
                    v93 = 0;
                  *((_QWORD *)v89 + 2) = &v93[v91];
                  v94 = (char *)((char *)&v159 - v90);
                  if (v83 == 1)
                    v94 = 0;
                  *(_QWORD *)v90 = &v94[v83];
                }
                v48 = v47 == 1;
                if (v47 == 1)
                  v77 = 0;
              }
              while (*((_QWORD *)v77 + 2) != 1);
            }
          }
        }
        v95 = (char *)v166 + 8 - (char *)&v160;
        if (*((_QWORD *)&v166[0] + 1) == 1)
          v95 = 0;
        v160 = v95 + *((_QWORD *)&v166[0] + 1);
        *((_QWORD *)&v166[0] + 1) = 1;
        v96 = v25 % *(_QWORD *)(v17 + 24);
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v164, v17, v96);
        v97 = v160;
        v98 = (char *)&v160 + v160;
        if (v160 == 1)
          v98 = 0;
        *((_QWORD *)v98 + 3) = v96 & 0x7FFFFFFFFFFFFFFFLL;
        v99 = v164 == 1 ? 0 : (char *)&v164 + v164;
        if (*(_QWORD *)v99 == 1)
        {
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *(_QWORD *)(v17 + 24));
          if (v165 == 1)
            v100 = 0;
          else
            v100 = (char *)&v165 + v165;
          v101 = *(_QWORD *)v100;
          v102 = v100 - (char *)&v163;
          if (v101 == 1)
            v102 = 0;
          v103 = v102 + v101;
          v163 = v103;
          v104 = (char *)&v163 + v103;
          if (v103 == 1)
            v104 = 0;
          if (*((_QWORD *)v104 + 2) != 1)
          {
            v105 = 16;
            if (v103 == 1)
              v105 = 0;
            v106 = v105 + v103;
            v107 = (char *)&v161 + v106;
            if (v106 == 1)
              v107 = 0;
            v108 = *((_QWORD *)v107 + 2);
            v161 = v106;
            v109 = v107 + 16 - (char *)&v162;
            if (v108 == 1)
              v109 = 0;
            v162 = v109 + v108;
            v110 = (char *)&v162 + v109 + v108;
            if (v109 + v108 == 1)
              v110 = 0;
            boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v165, v17, *((_QWORD *)v110 + 3) & 0x7FFFFFFFFFFFFFFFLL);
            if (v165 == 1)
              v111 = 0;
            else
              v111 = (char *)&v165 + v165;
            v112 = (char *)((char *)&v160 - v111);
            if (v160 == 1)
              v112 = 0;
            *(_QWORD *)v111 = &v112[v160];
            v103 = v163;
          }
          if (v164 == 1)
            v113 = 0;
          else
            v113 = (char *)&v164 + v164;
          v114 = (char *)((char *)&v163 - v113);
          if (v103 == 1)
            v114 = 0;
          *(_QWORD *)v113 = &v114[v103];
          v115 = (char *)&v163 + v163;
          if (v163 == 1)
            v115 = 0;
          v97 = v160;
          v116 = (char *)&v160 + v160;
          v119 = *((_QWORD *)v115 + 2);
          v117 = v115 + 16;
          v118 = v119;
          v120 = (char *)((char *)&v160 - v117);
          if (v160 == 1)
          {
            v116 = 0;
            v120 = 0;
          }
          v121 = v117 - (v116 + 16);
          if (v118 == 1)
            v121 = 0;
          *((_QWORD *)v116 + 2) = v121 + v118;
          *(_QWORD *)v117 = &v120[v97];
        }
        else
        {
          v122 = &v99[*(_QWORD *)v99];
          v123 = *((_QWORD *)v122 + 2);
          v124 = v122 - v98;
          if (v123 == 1)
            v124 = 0;
          *((_QWORD *)v98 + 2) = v124 + v123;
          v125 = *(_QWORD *)v99;
          v126 = &v99[*(_QWORD *)v99];
          if (v125 == 1)
            v127 = 0;
          else
            v127 = v126;
          v128 = (char *)((char *)&v160 - (v127 + 16));
          if (v97 == 1)
            v128 = 0;
          *((_QWORD *)v127 + 2) = &v128[v97];
        }
        ++*(_QWORD *)(v17 + 32);
        v129 = -24;
        if (v97 == 1)
          v129 = 0;
        v130 = v129 + v97;
        v163 = v130;
        if (*((_QWORD *)&v166[0] + 1) != 1)
        {
          v165 = (char *)v166 + 8 - (char *)&v165 + *((_QWORD *)&v166[0] + 1);
          std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](*(char **)&v166[0], &v165);
          v130 = v163;
        }
        v131 = (char *)&v163 - &v152;
        if (v130 == 1)
          v131 = 0;
        v132 = v131 + v130;
        v133 = &v152 - (char *)&v134;
        if (v132 == 1)
          v133 = 0;
        v134 = v133 + v132;
        v37 = 1;
        v135 = 1;
      }
      else
      {
        v37 = 0;
        v38 = v153 + (char *)&v153 - (char *)&v165;
        v165 = v38;
        v39 = -8;
        if (v38 == 1)
          v39 = 0;
        v40 = v39 + v38;
        v41 = (char *)v166 - (char *)&v134;
        if (v40 == 1)
          v41 = 0;
        v134 = v41 + v40;
        v135 = 0;
      }
      if (v157 != 1)
      {
        *(_QWORD *)&v166[0] = v157 - 96;
        std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v156, (uint64_t *)v166);
        v37 = v135;
      }
      if (v37)
      {
LABEL_186:
        v2 = 1;
LABEL_189:
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v141);
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v140);
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::~table((uint64_t)&v139);
        return v2;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
LABEL_188:
        v2 = 0;
        goto LABEL_189;
      }
      LODWORD(v166[0]) = 136446210;
      *(_QWORD *)((char *)v166 + 4) = v9;
      v35 = MEMORY[0x1E0C81028];
      v36 = "scene already in the index: %{public}s";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_188;
      LODWORD(v166[0]) = 136446210;
      *(_QWORD *)((char *)v166 + 4) = v9;
      v35 = MEMORY[0x1E0C81028];
      v36 = "name already in the index: %{public}s";
    }
    _os_log_error_impl(&dword_1A16EE000, v35, OS_LOG_TYPE_ERROR, v36, (uint8_t *)v166, 0xCu);
    goto LABEL_188;
  }
  return 0;
}

void sub_1A176F734(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v5 = *(_QWORD *)(v4 - 160);
    v6 = 40;
    v7 = v5 == 1;
    if (v5 == 1)
      v6 = 0;
    v8 = v6 + v5;
    *(_QWORD *)(v4 - 200) = v8;
    v9 = v5 + v4 - 160;
    if (v7)
      v10 = 0;
    else
      v10 = v9;
    if (v8 == 1)
      v11 = 0;
    else
      v11 = v8 + v4 - 200;
    v12 = *(_QWORD *)(v11 + 16);
    v13 = v11 + 16 - (v4 - 184);
    if (v12 == 1)
      v13 = 0;
    v14 = v13 + v12;
    *(_QWORD *)(v4 - 184) = v14;
    for (*(_QWORD *)(v10 + 16) = 1; v14 != 1; *(_QWORD *)(v4 - 184) = v14)
    {
      v15 = v14 + v4 - 184;
      if (v14 == -31)
        v15 = 0;
      v16 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v4 - 216) = v14 + 32;
      v17 = v15 + 16 - (v4 - 208);
      if (v16 == 1)
        v17 = 0;
      *(_QWORD *)(v4 - 208) = v17 + v16;
      v18 = v14 + 40;
      *(_QWORD *)(v4 - 224) = v18;
      if (v18 == 1)
        v19 = 0;
      else
        v19 = -72;
      *(_QWORD *)(v4 - 152) = v19 + v18;
      std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v3, (uint64_t *)(v4 - 152));
      --*(_QWORD *)(v2 + 32);
      v20 = *(_QWORD *)(v4 - 208);
      if (v20 == 1)
        v21 = 0;
      else
        v21 = -24;
      v14 = v21 + v20;
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1A176F844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  __cxa_end_catch();
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(v27 - 144);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(v27 - 248);
  pf::SceneTaxonomyNode::~SceneTaxonomyNode((pf::SceneTaxonomyNode *)&a27);
  _Unwind_Resume(a1);
}

char *pf::SceneTaxonomyLineParser::parseEdge(pf::SceneTaxonomyLineParser *this, char *__s)
{
  char *result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 49))
    *((_BYTE *)this + 49) = 1;
  result = strrchr(__s, 44);
  if (result)
  {
    *result = 0;
    v5 = result + 1;
    v6 = *((_QWORD *)this + 20);
    v7 = *((_QWORD *)this + 16);
    if (v7)
      v8 = v7 - (_QWORD)&v14;
    else
      v8 = 1;
    v14 = v8;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, __s, &v14);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v15, v6, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    v9 = *((_QWORD *)this + 20);
    v10 = *((_QWORD *)this + 16);
    if (v10)
      v11 = v10 - (_QWORD)&v13;
    else
      v11 = 1;
    v13 = v11;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, v5, &v13);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v14, v9, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    if (v15 == 1)
      v12 = 0;
    else
      v12 = &buf[v15 - 8];
    if (v12 && v14 != 1 && (uint64_t *)((char *)&v14 + v14))
    {
      pf::SceneTaxonomyNode::addChild((pf::SceneTaxonomyNode *)(v12 + 32), (pf::SceneTaxonomyNode *)((char *)&v14 + v14 + 32));
      return (char *)1;
    }
    else
    {
      result = (char *)os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        *(_DWORD *)buf = 136315394;
        v17 = __s;
        v18 = 2080;
        v19 = v5;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "failed to find edge in name map: %s -> %s", buf, 0x16u);
        return 0;
      }
    }
  }
  return result;
}

void sub_1A176FA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pf::SceneTaxonomyLineParser::parseDetectors(pf::SceneTaxonomyLineParser *this, char *__s)
{
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  uint64_t v21;
  char *__lasts;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint8_t buf[4];
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 49))
    *((_BYTE *)this + 49) = 1;
  result = (uint64_t)strrchr(__s, 58);
  if (result)
  {
    *(_BYTE *)result = 0;
    v5 = (char *)(result + 1);
    v24 = 1;
    v6 = *((_QWORD *)this + 20);
    v7 = *((_QWORD *)this + 16);
    if (v7)
      v8 = v7 - (_QWORD)&v25;
    else
      v8 = 1;
    v25 = (char *)v8;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, __s, &v25);
    boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v23, v6, (uint64_t)buf);
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
    if (v23 == 1)
      v9 = 0;
    else
      v9 = (char *)&v23 + v23;
    if (v9)
    {
      __lasts = 0;
      v10 = strtok_r(v5, ",", &__lasts);
      if (!v10)
        return 1;
      v11 = v10;
      v12 = (uint64_t)(v9 + 240);
      while (1)
      {
        v13 = *((_QWORD *)this + 20);
        v14 = *((_QWORD *)this + 16);
        v15 = (char *)(v14 ? v14 - (_QWORD)&v25 : 1);
        v25 = v15;
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)buf, v11, &v25);
        boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find((char *)&v21, v13, (uint64_t)buf);
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)buf);
        v16 = v21 == 1 ? 0 : (char *)&v21 + v21;
        v17 = v24 == 1 ? 0 : (char *)&v24 + v24;
        if (v16 == v17)
          break;
        v25 = v16 + 32;
        boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::emplace_unique<pf::SceneTaxonomyNode*>((uint64_t)buf, v12, &v25);
        v11 = strtok_r(0, ",", &__lasts);
        if (!v11)
          return 1;
      }
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446466;
      v27 = __s;
      v28 = 2082;
      v29 = v11;
      v18 = MEMORY[0x1E0C81028];
      v19 = "failed to find detector for key '%{public}s' in name map: %{public}s";
      v20 = 22;
    }
    else
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      *(_DWORD *)buf = 136446210;
      v27 = __s;
      v18 = MEMORY[0x1E0C81028];
      v19 = "failed to find detector key in name map: %{public}s";
      v20 = 12;
    }
    _os_log_error_impl(&dword_1A16EE000, v18, OS_LOG_TYPE_ERROR, v19, buf, v20);
    return 0;
  }
  return result;
}

void sub_1A176FD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::find(char *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *result;
  char *v9;
  uint64_t v10;

  v6 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()(a3);
  v7 = 265 * ((~v6 + (v6 << 21)) ^ ((~v6 + (v6 << 21)) >> 24));
  result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v10, a2, 2147483649u * ((21 * (v7 ^ (v7 >> 14))) ^ ((21 * (v7 ^ (v7 >> 14))) >> 28)), a3);
  v9 = (char *)((char *)&v10 - a1);
  if (v10 == 1)
    v9 = 0;
  *(_QWORD *)a1 = &v9[v10];
  return result;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t *v7;
  _BYTE *v8;
  double result;
  _BYTE v10[8];

  v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1)
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  v3 = **a1;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)*a1 + v3;
  v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x20uLL);
  v6 = (_BYTE *)(v10 - (_BYTE *)v1);
  if (v5 - v10 == 1)
    v6 = 0;
  v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1)
    v8 = 0;
  else
    v8 = (char *)v1 + (_QWORD)v7;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *(_QWORD *)&result = 1;
  *((_OWORD *)v8 + 1) = xmmword_1A17B6DA0;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != 1)
  {
    v4 = *(char **)a1;
    v6 = v2 - (_QWORD)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

uint64_t boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::min_buckets_for_size(unint64_t a1, float a2)
{
  double v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;

  if (a2 < 0.001)
    __assert_rtn("min_buckets_for_size", "implementation.hpp", 3096, "mlf_ >= minimum_max_load_factor");
  v2 = floor((double)a1 / a2) + 1.0;
  if (v2 >= 1.84467441e19)
    v3 = -1;
  else
    v3 = (unint64_t)v2;
  v4 = 38;
  v5 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[8 * (v4 >> 1)];
    v9 = *(_QWORD *)v7;
    v8 = v7 + 8;
    v4 += ~(v4 >> 1);
    if (v9 < v3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = (char *)&unk_1A17B7B48;
  if (v5 != "N5boost12interprocess9ipcdetail8CtorArgNINS_9container12basic_stringIcNSt3__111char_traitsIcEENS0_9allocato"
             "rIcNS0_15segment_managerIcNS0_15rbtree_best_fitINS0_17null_mutex_familyENS0_10offset_ptrIvlmLm0EEELm0EEENS0"
             "_10iset_indexEEEEEEELb0EJRPcRSH_EEE")
    v10 = v5;
  return *(_QWORD *)v10;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *result;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  double v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  _BYTE *v30;
  _BYTE v31[8];
  char v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 1;
  v5 = (char *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v34 = (uint64_t *)(a1 + 16);
    v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (_QWORD *)(a1 + 8), a2 + 1);
    v7 = (char *)&v33 - v5;
    if (v33 == (char *)1)
      v7 = 0;
    v8 = &v33[v7];
    *(_QWORD *)v5 = &v33[v7];
    if (v35 == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v9 = v35 + (char *)&v35 - (char *)&v33;
    v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1)
      v10 = 0;
    v37 = v10 + v9;
  }
  else
  {
    v11 = v4 + v5 - (char *)&v36 + 8 * *(_QWORD *)(a1 + 24);
    v36 = v11;
    v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1)
      v12 = 0;
    v13 = (uint64_t *)(v12 + v11);
    v34 = v13;
    if (v13 == (uint64_t *)1)
      v14 = 0;
    else
      v14 = (char *)&v34 + (_QWORD)v13;
    v15 = *(_QWORD *)v14;
    v16 = v14 - (char *)&v37;
    if (v15 == 1)
      v16 = 0;
    v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (_QWORD *)(a1 + 8), a2 + 1);
    result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>>>::destroy_buckets((_QWORD *)a1);
    v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1)
      v17 = 0;
    v8 = (char *)v34 + (_QWORD)v17;
    *(_QWORD *)(a1 + 56) = (char *)v34 + (_QWORD)v17;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    v18 = 0;
  }
  else
  {
    v19 = (double)a2 * *(float *)(a1 + 40);
    v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19)
      v18 = -1;
  }
  *(_QWORD *)(a1 + 48) = v18;
  v20 = v5 - &v32;
  v21 = &v32 - (char *)&v34;
  v22 = v5 - (char *)&v33;
  if (v8 == (char *)1)
    v20 = 0;
  v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1)
    v22 = 0;
  if (v23 == (char *)1)
    v21 = 0;
  v24 = (uint64_t *)&v23[v21];
  v25 = &v8[v22];
  v33 = v25;
  v34 = v24;
  if (v25 == (char *)1)
    v26 = 0;
  else
    v26 = (char *)&v33 + (_QWORD)v25;
  if (v24 == (uint64_t *)1)
    v27 = 0;
  else
    v27 = (char *)&v34 + (_QWORD)v24;
  while (v26 != v27)
  {
    *(_QWORD *)v26 = 1;
    v28 = v33 + 8;
    v33 = v28;
    if (v28 == (char *)1)
      v26 = 0;
    else
      v26 = (char *)&v33 + (_QWORD)v28;
    if (v34 == (uint64_t *)1)
      v27 = 0;
    else
      v27 = (char *)&v34 + (_QWORD)v34;
  }
  v29 = (char *)&v37 - v31;
  if (v37 == 1)
    v29 = 0;
  v30 = (_BYTE *)(v31 - v27);
  if (v29 + v37 == 1)
    v30 = 0;
  *(_QWORD *)v26 = &v30[v29 + v37];
  return result;
}

void sub_1A17701EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,char *&,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a4 = 0;
  if (a3)
  {
    v7 = result;
    do
    {
      v8 = a2 + 32;
      result = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(a2, **(char ***)(v7 + 40), *(_QWORD **)(v7 + 32));
      v9 = *a4 + 1;
      *a4 = v9;
      a2 = v8;
    }
    while (v9 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,char *&,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

pf::SceneTaxonomyLineParser *pf::SceneTaxonomyLineParser::SceneTaxonomyLineParser(pf::SceneTaxonomyLineParser *this, const char *a2, const char *a3, size_t a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v21)();
  __int128 v22;
  unint64_t v23;
  char *v24;

  *(_QWORD *)this = &off_1E45A0F30;
  *((_QWORD *)this + 1) = a2;
  *((_BYTE *)this + 16) = a5;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = a4;
  *((_QWORD *)this + 5) = 0;
  *((_WORD *)this + 24) = 0;
  v8 = (uint64_t *)((char *)this + 56);
  LOWORD(v21) = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 56, a2, 0x300000uLL, (mode_t *)&v21);
  v9 = *((_QWORD *)this + 7);
  v10 = v9 - ((_QWORD)this + 96);
  v11 = v9 - ((_QWORD)this + 112);
  v12 = v9 - ((_QWORD)this + 120);
  v13 = v9 == 0;
  if (v9)
  {
    v14 = v9 - ((_QWORD)this + 104);
  }
  else
  {
    v10 = 1;
    v14 = 1;
  }
  *((_QWORD *)this + 12) = v10;
  *((_QWORD *)this + 13) = v14;
  if (v13)
    v15 = 1;
  else
    v15 = v11;
  if (v13)
    v16 = 1;
  else
    v16 = v12;
  *((_QWORD *)this + 14) = v15;
  *((_QWORD *)this + 15) = v16;
  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_heap_memory((uint64_t)this + 128);
  v17 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(*v8, a4 + 8);
  *((_QWORD *)this + 3) = v17;
  memcpy(v17, a3, a4);
  *((_QWORD *)this + 5) = *((_QWORD *)this + 3) + a4;
  v18 = *((_QWORD *)this + 7);
  v22 = xmmword_1A17B6C60;
  v21 = off_1E45A1370;
  v23 = 0x80000001A17B7558 & 0x7FFFFFFFFFFFFFFFLL;
  v24 = (char *)this + 104;
  *((_QWORD *)this + 20) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v18, "names", (uint64_t)&v21);
  v19 = *((_QWORD *)this + 7);
  v22 = xmmword_1A17B6C60;
  v21 = off_1E45A0AB0;
  v23 = 0x80000001A17B790ALL & 0x7FFFFFFFFFFFFFFFLL;
  v24 = (char *)this + 112;
  *((_QWORD *)this + 21) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v19, "scenes", (uint64_t)&v21);
  return this;
}

void sub_1A1770404(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  boost::interprocess::basic_managed_heap_memory<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::~basic_managed_heap_memory(v2);
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 64));
  *(_QWORD *)(v1 + 56) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file(uint64_t a1, const char *a2, unint64_t a3, mode_t *a4)
{
  const char *v6;

  v6 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 29) = 0;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::priv_open_or_create<char const*,boost::interprocess::ipcdetail::create_open_func<boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>>>((char **)(a1 + 8), 2, &v6, a3, 2, a4, (uint64_t *)a1, 2);
  return a1;
}

void sub_1A177049C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  boost::interprocess::mapped_region *v2;

  boost::interprocess::mapped_region::~mapped_region(v2);
  *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE v21[8];
  _BYTE v22[8];

  *a4 = 0;
  if (a3)
  {
    do
    {
      v4 = *(uint64_t **)(result + 32);
      v5 = *v4;
      v6 = (char *)v4 + *v4;
      if (v5 == 1)
        v6 = 0;
      if (v6)
        v7 = v6 - v21;
      else
        v7 = 1;
      *(_BYTE *)a2 = 0;
      if (v7 == 1)
        v8 = 0;
      else
        v8 = &v21[v7];
      v9 = (uint64_t)&v8[-a2 - 16];
      v10 = v8 == 0;
      if (v8)
        v11 = v8 - v22;
      else
        v11 = 1;
      if (v10)
        v9 = 1;
      if (v11 == 1)
        v12 = 0;
      else
        v12 = &v22[v11];
      if (v12)
        v13 = (uint64_t)&v12[-a2 - 8];
      else
        v13 = 1;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v9;
      v14 = (char *)&boost::unordered::detail::prime_list_template<unsigned long>::value;
      v15 = 38;
      do
      {
        v16 = v15 >> 1;
        v17 = (unint64_t *)&v14[8 * (v15 >> 1)];
        v19 = *v17;
        v18 = (char *)(v17 + 1);
        v15 += ~(v15 >> 1);
        if (v19 < 0xB)
          v14 = v18;
        else
          v15 = v16;
      }
      while (v15);
      if (v14 == "N5boost12interprocess9ipcdetail8CtorArgNINS_9container12basic_stringIcNSt3__111char_traitsIcEENS0_9all"
                  "ocatorIcNS0_15segment_managerIcNS0_15rbtree_best_fitINS0_17null_mutex_familyENS0_10offset_ptrIvlmLm0EE"
                  "ELm0EEENS0_10iset_indexEEEEEEELb0EJRPcRSH_EEE")
        v14 = (char *)&unk_1A17B7B48;
      *(_QWORD *)(a2 + 24) = *(_QWORD *)v14;
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
      a2 += 64;
      v20 = *a4 + 1;
      *a4 = v20;
    }
    while (v20 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<unsigned long long,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::hash<unsigned long long>,std::equal_to<unsigned long long>,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<unsigned long long const,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v16[8];
  _BYTE v17[8];

  *a4 = 0;
  if (a3)
  {
    v4 = -16 - a2;
    do
    {
      v5 = *(uint64_t **)(result + 32);
      v6 = *v5;
      v7 = (char *)v5 + *v5;
      if (v6 == 1)
        v7 = 0;
      if (v7)
        v8 = v7 - v16;
      else
        v8 = 1;
      *(_BYTE *)a2 = 0;
      if (v8 == 1)
        v9 = 0;
      else
        v9 = &v16[v8];
      v10 = v9 - v17;
      v11 = v9 == 0;
      if (!v9)
        v10 = 1;
      v12 = (uint64_t)&v9[v4];
      if (v11)
        v12 = 1;
      if (v10 == 1)
        v13 = 0;
      else
        v13 = &v17[v10];
      if (v13)
        v14 = (uint64_t)&v13[v4 + 8];
      else
        v14 = 1;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = xmmword_1A17B6DB0;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
      v15 = *a4 + 1;
      *a4 = v15;
      v4 -= 64;
      a2 += 64;
    }
    while (v15 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneTaxonomyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::allocator<std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneTaxonomyNode>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

void sub_1A1771510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

const __CFString *PFStoryOverallDurationKindLocalizationKey(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("??");
  else
    return off_1E45A3750[a1];
}

const __CFString *PFStoryOverallDurationKindDescription(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("??");
  else
    return off_1E45A3750[a1];
}

id PFStoryOverallDurationInfoDescription(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  __CFString *v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void *v8;
  _OWORD v10[4];
  uint64_t v11;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("{ "));
  if (*(_QWORD *)a1 > 5uLL)
    v3 = CFSTR("??");
  else
    v3 = off_1E45A3750[*(_QWORD *)a1];
  v4 = v3;
  objc_msgSend(v2, "appendString:", v4);

  if (*(_QWORD *)a1 == 2)
  {
    v5 = *(_OWORD *)(a1 + 24);
    v6 = *(_OWORD *)(a1 + 56);
    v10[2] = *(_OWORD *)(a1 + 40);
    v10[3] = v6;
    v11 = *(_QWORD *)(a1 + 72);
    v10[0] = *(_OWORD *)(a1 + 8);
    v10[1] = v5;
    PFStoryDurationInfoDescription((uint64_t)v10);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "appendFormat:", CFSTR(" %@"), v7);

  }
  objc_msgSend(v2, "appendString:", CFSTR(" }"));
  v8 = (void *)objc_msgSend(v2, "copy");

  return v8;
}

__CFString *PFBitmaskDescription(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  __CFString *v10;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x2020000000;
    v21 = 0;
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __PFBitmaskDescription_block_invoke;
    v13[3] = &unk_1E45A3788;
    v17 = a1;
    v8 = v7;
    v14 = v8;
    v15 = v6;
    v16 = &v18;
    objc_msgSend(v5, "enumerateObjectsUsingBlock:", v13);
    v9 = a1 & ~v19[3];
    if (v9)
    {
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("UNKNOWN(%lu)"), v9);
      objc_msgSend(v8, "addObject:", v12);

      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v23 = v9;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Unknown bitmask description (%lu)", buf, 0xCu);
      }
    }
    objc_msgSend(v8, "componentsJoinedByString:", CFSTR("|"));
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

    _Block_object_dispose(&v18, 8);
  }
  else
  {
    v10 = CFSTR("None");
  }

  return v10;
}

void sub_1A1774070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A1774808(_Unwind_Exception *a1, int a2)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  if (a2)
  {
    if (a2 == 2)
    {
      v2 = objc_begin_catch(a1);
      v3 = (void *)MEMORY[0x1E0CB35C8];
      STACK[0x240] = *MEMORY[0x1E0CB2D50];
      v4 = objc_alloc(MEMORY[0x1E0CB3940]);
      objc_msgSend(v2, "description");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (void *)objc_msgSend(v4, "initWithFormat:", CFSTR("Malformed recipe: %@"));
      STACK[0x248] = (unint64_t)v5;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &STACK[0x248], &STACK[0x240], 1);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("PFStoryRecipeErrorDomain"), 1, v6);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = *(void **)(STACK[0x218] + 40);
      *(_QWORD *)(STACK[0x218] + 40) = v7;

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(a1);
    }
    JUMPOUT(0x1A1774778);
  }
  _Unwind_Resume(a1);
}

void sub_1A1774AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v11;
  void *v12;
  void *v13;
  void *v14;

  if (a2)
  {
    if (a2 == 2)
    {
      v11 = objc_begin_catch(exception_object);
      v12 = (void *)MEMORY[0x1E0CB35C8];
      a10 = *MEMORY[0x1E0CB2D68];
      objc_msgSend(v11, "description");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      a11 = (uint64_t)v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a11, &a10, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("PFStoryRecipeErrorDomain"), 1, v14);
      objc_claimAutoreleasedReturnValue();

      objc_end_catch();
    }
    else
    {
      objc_begin_catch(exception_object);
    }
    JUMPOUT(0x1A1774A7CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1774E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1A1775044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7417(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7418(uint64_t a1)
{

}

uint64_t PFSharedLibraryModeIsOn(unint64_t a1)
{
  return (a1 < 5) & (0x16u >> a1);
}

uint64_t PFSharedLibraryModeCanBeAutoUpdated(unint64_t a1)
{
  return (a1 < 6) & (0x31u >> a1);
}

BOOL PFSharedLibraryModeIsAutoState(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

const __CFString *PFSharedLibraryModeDescription(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_1E45A39B0[a1];
}

BOOL PFLocationAccessUnknownWithAuthorizationStatus(int a1)
{
  return (a1 + 1) < 2;
}

BOOL PFCanAccessLocationWithAuthorizationStatus(int a1)
{
  return (a1 - 3) < 2;
}

const __CFString *PFStoryRecipeSongCategoryDescription(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("??");
  else
    return off_1E45A3A30[a1];
}

const __CFString *PFStoryRecipeSongSubcategoryDescription(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("??");
  else
    return off_1E45A3A48[a1];
}

const __CFString *PFStoryRecipeSongPaceDescription(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("??");
  else
    return off_1E45A3A08[a1];
}

uint64_t PFStoryRecipeSongPaceFromVisualTempo(void *a1, double a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  v3 = a1;
  objc_msgSend(v3, "slowVisualTempoTarget");
  v5 = v4;
  objc_msgSend(v3, "mediumVisualTempoTarget");
  v7 = (v5 + v6) * 0.5;
  objc_msgSend(v3, "mediumVisualTempoTarget");
  v9 = v8;
  objc_msgSend(v3, "fastVisualTempoTarget");
  v11 = v10;

  v12 = 3;
  if ((v9 + v11) * 0.5 > a2)
    v12 = 2;
  if (v7 > a2)
    return 1;
  else
    return v12;
}

void sub_1A1777810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A1777CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_6(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_5(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke_7(uint64_t a1, void *a2)
{
  id v2;
  char isKindOfClass;

  v2 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

uint64_t __Block_byref_object_copy__7808(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7809(uint64_t a1)
{

}

_QWORD *PFParallaxStyleCategoryBlackWhite_block_invoke_3(uint64_t a1, void *a2, _QWORD *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    +[PFParallaxColor colorWithRGBValues:error:](PFParallaxColor, "colorWithRGBValues:error:", v4, a3);
    a3 = (_QWORD *)objc_claimAutoreleasedReturnValue();
  }
  else if (a3)
  {
    v5 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid color values: %@"), v4, *MEMORY[0x1E0CB2938]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v10[0] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PhotosFormats"), 7, v7);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    a3 = 0;
  }

  return a3;
}

id PFParallaxStyleCategoryBlackWhite_block_invoke_4(int a1, id a2)
{
  return a2;
}

uint64_t PFParallaxStyleCategoryBlackWhite_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "RGBValues");
}

id PFParallaxStyleCategoryBlackWhite_block_invoke_2(int a1, id a2)
{
  return a2;
}

id PFParallaxLayerStyleSupportedKinds()
{
  if (PFParallaxLayerStyleSupportedKinds_onceToken != -1)
    dispatch_once(&PFParallaxLayerStyleSupportedKinds_onceToken, &__block_literal_global_7852);
  return (id)PFParallaxLayerStyleSupportedKinds_supportedKinds;
}

id PFParallaxStyleFrequencyTable()
{
  if (PFParallaxStyleFrequencyTable_onceToken[0] != -1)
    dispatch_once(PFParallaxStyleFrequencyTable_onceToken, &__block_literal_global_32_7853);
  return (id)PFParallaxStyleFrequencyTable_frequencyTable;
}

const __CFString *PFDefaultParallaxStyleKindForCategory(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  v2 = CFSTR("Original");
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TrueColors")) & 1) == 0)
  {
    if ((objc_msgSend(v1, "isEqualToString:", CFSTR("WarmColors")) & 1) != 0)
    {
      v2 = CFSTR("ColorWashDuotone");
    }
    else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CoolColors")) & 1) != 0)
    {
      v2 = CFSTR("ColorWashSingle");
    }
    else if (objc_msgSend(v1, "isEqualToString:", CFSTR("BlackWhite")))
    {
      v2 = CFSTR("BlackWhiteMono");
    }
  }

  return v2;
}

uint64_t PFMetadataImageSourceIsSpatialMedia(uint64_t a1)
{
  PFMetadata *v1;
  uint64_t v2;

  v1 = -[PFMetadata initWithImageSource:contentType:options:timeZoneLookup:cacheImageSource:]([PFMetadata alloc], "initWithImageSource:contentType:options:timeZoneLookup:cacheImageSource:", a1, 0, 13, 0, 1);
  v2 = -[PFMetadata isSpatialMedia](v1, "isSpatialMedia");

  return v2;
}

void sub_1A177BF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8091(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8092(uint64_t a1)
{

}

double PFMessagesStackLayoutGeometryGetScale(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_1A177EE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A177EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1A17804B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8436(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8437(uint64_t a1)
{

}

void sub_1A1780B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PFVideoComplementMetadataForVideoAtPath(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0C8AF90];
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "assetWithURL:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  PFVideoComplementMetadataForVideoAVAsset(v5, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PFVideoComplementMetadataForVideoAVAsset(void *a1, _QWORD *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v5 = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v3 = v5;
  v4 = v6;
  PFVideoComplementMetadataForVideoAVAssetWithKnownValues(a1, 0, &v5, &v3, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id PFVideoComplementMetadataForVideoAVAssetWithKnownValues(void *a1, void *a2, __int128 *a3, __int128 *a4, _QWORD *a5)
{
  id v9;
  id v10;
  void *v11;
  __int128 *v12;
  __int128 *v13;
  _BOOL4 v14;
  void *v15;
  id v16;
  BOOL v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = a1;
  v10 = a2;
  v11 = v10;
  v26 = *a3;
  v27 = *((_QWORD *)a3 + 2);
  v24 = *a4;
  v25 = *((_QWORD *)a4 + 2);
  if ((BYTE12(v26) & 1) != 0)
    v12 = 0;
  else
    v12 = &v26;
  if ((BYTE12(v24) & 1) != 0)
    v13 = 0;
  else
    v13 = &v24;
  if (!v10)
  {
    v23 = 0;
    v18 = _PFReadMetadataFromVideoAVAsset(v9, &v23, (uint64_t)v12, (uint64_t)v13, a5);
    v16 = v23;
    v15 = 0;
    if (!v18)
      goto LABEL_10;
    goto LABEL_9;
  }
  v14 = _PFReadMetadataFromVideoAVAsset(v9, 0, (uint64_t)v12, (uint64_t)v13, a5);
  v15 = 0;
  v16 = v11;
  if (v14)
  {
LABEL_9:
    v15 = (void *)objc_opt_new();
    objc_msgSend(v15, "setPairingIdentifier:", v16);
    v21 = v24;
    v22 = v25;
    objc_msgSend(v15, "setImageDisplayTime:", &v21);
    v19 = v26;
    v20 = v27;
    objc_msgSend(v15, "setVideoDuration:", &v19);
  }
LABEL_10:

  return v15;
}

BOOL _PFReadMetadataFromVideoAVAsset(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v8;
  CMTimeValue v9;
  CMTimeScale v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  const opaqueCMFormatDescription *v26;
  void *v27;
  int v28;
  void *v29;
  void *v30;
  id v31;
  _BOOL8 v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  opaqueCMSampleBuffer *v38;
  opaqueCMSampleBuffer *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  _BOOL4 v52;
  id v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  void *v58;
  double v59;
  double v60;
  id v62;
  void *v63;
  _QWORD *v64;
  id v65;
  void *v66;
  NSObject *v67;
  id v68;
  void *context;
  uint64_t v70;
  _QWORD *v71;
  os_signpost_id_t spid;
  void *v73;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  id v77;
  id v78;
  __int128 v79;
  CMTimeEpoch v80;
  CMTime v81;
  id v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  const __CFString *v88;
  CMTimeValue v89;
  CMTimeScale v90;
  uint8_t buf[4];
  id v92;
  __int16 v93;
  double v94;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v79 = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v80 = epoch;
  v9 = *MEMORY[0x1E0CA2E18];
  v89 = *MEMORY[0x1E0CA2E18];
  v10 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v90 = v10;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = os_log_create("com.apple.photos.backend", "PhotosFormats");
  v12 = os_signpost_id_make_with_pointer(v11, v8);
  v13 = v11;
  v14 = v13;
  spid = v12;
  v15 = v12 - 1;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v14, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A17C945B, buf, 2u);
  }

  if (!v8)
  {
    v29 = (void *)MEMORY[0x1E0CB35C8];
    v87 = *MEMORY[0x1E0CB2938];
    v88 = CFSTR("nil avasset");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v88, &v87, 1);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PhotosFormats"), -1, v30);
    v31 = (id)objc_claimAutoreleasedReturnValue();

    v32 = 0;
    v33 = 0;
    goto LABEL_58;
  }
  context = (void *)MEMORY[0x1A1B0CDDC]();
  if (a3)
    objc_msgSend(v8, "duration");
  v70 = a4;
  v71 = a2;
  if (!a4)
  {
    v31 = 0;
    v28 = 1;
    goto LABEL_45;
  }
  v16 = v14;
  v17 = v16;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v17, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A17C945B, buf, 2u);
  }
  v67 = v17;

  v18 = v8;
  value = v9;
  timescale = v10;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v68 = v18;
  +[PFMediaUtilities tracksWithMediaType:forAsset:](PFMediaUtilities, "tracksWithMediaType:forAsset:", *MEMORY[0x1E0C8A7D0]);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = (void *)objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
  if (!v20)
  {
    v66 = 0;
    v28 = 1;
    goto LABEL_40;
  }
  v64 = a5;
  v65 = v8;
  v21 = *(_QWORD *)v84;
  v22 = *MEMORY[0x1E0CA4CC0];
LABEL_13:
  v23 = 0;
  while (1)
  {
    if (*(_QWORD *)v84 != v21)
      objc_enumerationMutation(v19);
    v24 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v23);
    objc_msgSend(v24, "formatDescriptions");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = (const opaqueCMFormatDescription *)objc_msgSend(v25, "firstObject");

    if (!v26)
      goto LABEL_19;
    CMMetadataFormatDescriptionGetIdentifiers(v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v27, "containsObject:", v22) & 1) != 0)
      break;

LABEL_19:
    if (v20 == (void *)++v23)
    {
      v20 = (void *)objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v83, buf, 16);
      if (v20)
        goto LABEL_13;
      v66 = 0;
      v28 = 1;
      a5 = v64;
      v8 = v65;
      goto LABEL_40;
    }
  }
  v34 = v24;

  if (!v34)
  {
    v66 = 0;
    v20 = 0;
    v28 = 1;
    a5 = v64;
    v8 = v65;
    goto LABEL_41;
  }
  v66 = v34;
  objc_msgSend(MEMORY[0x1E0C8B000], "assetReaderTrackOutputWithTrack:outputSettings:", v34, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v82 = 0;
  objc_msgSend(MEMORY[0x1E0C8AFD0], "assetReaderWithAsset:error:", v68, &v82);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = v82;
  v37 = v36;
  v8 = v65;
  v63 = v35;
  if (v35)
  {
    v62 = v36;
    objc_msgSend(v35, "addOutput:", v19);
    objc_msgSend(v35, "startReading");
    do
    {
      v38 = (opaqueCMSampleBuffer *)objc_msgSend(v19, "copyNextSampleBuffer");
      if (!v38)
        break;
      v39 = v38;
      if (CMSampleBufferGetNumSamples(v38))
      {
        v40 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C8B3B0]), "initWithSampleBuffer:", v39);
        v41 = (void *)MEMORY[0x1E0C8B220];
        objc_msgSend(v40, "items");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v41, "metadataItemsFromArray:filteredByIdentifier:", v42, v22);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "firstObject");
        v44 = (void *)objc_claimAutoreleasedReturnValue();

        if (v44)
        {
          CMSampleBufferGetOutputPresentationTimeStamp(&v81, v39);
          value = v81.value;
          flags = v81.flags;
          timescale = v81.timescale;
          epoch = v81.epoch;
        }

      }
      CFRelease(v39);
    }
    while ((flags & 1) == 0);
    objc_msgSend(v63, "cancelReading");
    v37 = v62;
  }
  v28 = flags & 1;
  a5 = v64;
  if ((flags & 1) != 0)
  {
    v45 = v37;
    v20 = 0;
  }
  else
  {
    v46 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Invalid still image display time"), *MEMORY[0x1E0CB2938]);
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v37, *MEMORY[0x1E0CB3388]);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.PhotosFormats"), -1, v46);
    v45 = v37;
    v20 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_40:

LABEL_41:
  v89 = value;
  v90 = timescale;
  v47 = objc_retainAutorelease(v20);

  v31 = v47;
  v48 = v67;
  v49 = v48;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v49, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A17C945B, buf, 2u);
  }

LABEL_45:
  if (v71)
  {
    v50 = v14;
    v51 = v50;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A16EE000, v51, OS_SIGNPOST_INTERVAL_BEGIN, spid, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A17C945B, buf, 2u);
    }

    v77 = v31;
    v78 = 0;
    v52 = +[PFVideoMetadata readMetadataType:fromAVAsset:value:error:](PFVideoMetadata, "readMetadataType:fromAVAsset:value:error:", 1, v8, &v78, &v77);
    v33 = v78;
    v53 = v77;

    if (v28)
      v28 = v52;
    else
      v28 = 0;
    v54 = v51;
    v55 = v54;
    if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1A16EE000, v55, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A17C945B, buf, 2u);
    }

    v31 = v53;
  }
  else
  {
    v33 = 0;
  }
  objc_autoreleasePoolPop(context);
  v32 = v28 != 0;
  a4 = v70;
  a2 = v71;
LABEL_58:
  v56 = v14;
  v57 = v56;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v56))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v57, OS_SIGNPOST_INTERVAL_END, spid, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A17C945B, buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v58, "timeIntervalSinceDate:", v73);
  v60 = v59;

  if (v60 > 3.0 && os_log_type_enabled(v57, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138412546;
    v92 = v8;
    v93 = 2048;
    v94 = v60;
    _os_log_fault_impl(&dword_1A16EE000, v57, OS_LOG_TYPE_FAULT, "Slow metadata read for AVAsset %@: %.3fs", buf, 0x16u);
  }
  if (a3)
  {
    *(_OWORD *)a3 = v79;
    *(_QWORD *)(a3 + 16) = v80;
  }
  if (a4)
  {
    *(_QWORD *)a4 = v89;
    *(_DWORD *)(a4 + 8) = v90;
    *(_DWORD *)(a4 + 12) = flags;
    *(_QWORD *)(a4 + 16) = epoch;
  }
  if (a2)
    *a2 = objc_retainAutorelease(v33);
  if (a5)
    *a5 = objc_retainAutorelease(v31);

  return v32;
}

void sub_1A178177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1A17818C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t PFIsLivePhotoBundleType(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  if (v1)
  {
    +[PFUniformTypeUtilities livePhotoBundleType](PFUniformTypeUtilities, "livePhotoBundleType");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[PFUniformTypeUtilities livePhotoBundlePrivateType](PFUniformTypeUtilities, "livePhotoBundlePrivateType");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2 && (objc_msgSend(v1, "conformsToType:", v2) & 1) != 0)
    {
      v4 = 1;
    }
    else if (v3)
    {
      v4 = objc_msgSend(v1, "conformsToType:", v3);
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

UTType *PFCurrentPlatformLivePhotoBundleType()
{
  return +[PFUniformTypeUtilities livePhotoBundleType](PFUniformTypeUtilities, "livePhotoBundleType");
}

id PFAllPlatformsLivePhotoBundleTypes()
{
  if (PFAllPlatformsLivePhotoBundleTypes_onceToken[0] != -1)
    dispatch_once(PFAllPlatformsLivePhotoBundleTypes_onceToken, &__block_literal_global_8541);
  return (id)PFAllPlatformsLivePhotoBundleTypes_typeIdentifiers;
}

BOOL _PFReadLivePhotoMetadataFromMetadata(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v9;
  void *v10;
  NSObject *v11;
  os_signpost_id_t v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  double v27;
  double v28;
  NSObject *v29;
  void *v31;
  uint64_t v32;
  const __CFString *v33;
  _BYTE buf[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = os_log_create("com.apple.photos.backend", "PhotosFormats");
  v12 = os_signpost_id_make_with_pointer(v11, v9);
  v13 = v11;
  v14 = v13;
  v15 = v12 - 1;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A17C945B, buf, 2u);
  }

  if (v9)
  {
    if (a3)
    {
      objc_msgSend(v9, "duration");
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    }
    if (a4)
    {
      v16 = v14;
      v17 = v16;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      {

        objc_msgSend(v9, "stillImageDisplayTime");
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
        v21 = v17;
      }
      else
      {
        if (os_signpost_enabled(v16))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A16EE000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A17C945B, buf, 2u);
        }

        objc_msgSend(v9, "stillImageDisplayTime");
        *(_OWORD *)a4 = *(_OWORD *)buf;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
        v18 = v17;
        if (os_signpost_enabled(v18))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A16EE000, v18, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata.displaytime", (const char *)&unk_1A17C945B, buf, 2u);
        }
      }

    }
    if (a2)
    {
      v22 = v14;
      v23 = v22;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      {

        objc_msgSend(v9, "livePhotoPairingIdentifier");
        *a2 = (id)objc_claimAutoreleasedReturnValue();
        v20 = v23;
      }
      else
      {
        if (os_signpost_enabled(v22))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A16EE000, v23, OS_SIGNPOST_INTERVAL_BEGIN, v12, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A17C945B, buf, 2u);
        }

        objc_msgSend(v9, "livePhotoPairingIdentifier");
        *a2 = (id)objc_claimAutoreleasedReturnValue();
        v20 = v23;
        if (os_signpost_enabled(v20))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1A16EE000, v20, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata.assetid", (const char *)&unk_1A17C945B, buf, 2u);
        }
      }
      goto LABEL_24;
    }
  }
  else if (a5)
  {
    v19 = (void *)MEMORY[0x1E0CB35C8];
    v32 = *MEMORY[0x1E0CB2938];
    v33 = CFSTR("nil metadata");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
    v20 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PhotosFormats"), -1, v20);
    *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_24:

  }
  v24 = v14;
  v25 = v24;
  if (v15 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1A16EE000, v25, OS_SIGNPOST_INTERVAL_END, v12, "com.apple.photos.photosformats.videometadata", (const char *)&unk_1A17C945B, buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v26, "timeIntervalSinceDate:", v10);
  v28 = v27;

  if (v28 > 3.0)
  {
    v29 = v25;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      objc_msgSend(v9, "fileURL");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v28;
      _os_log_fault_impl(&dword_1A16EE000, v29, OS_LOG_TYPE_FAULT, "Slow metadata read for AVAsset %@: %.3fs", buf, 0x16u);

    }
  }

  return v9 != 0;
}

void PFReadImageDisplayTimeFromVideoFileAtPath(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  id v4;
  PFMetadata *v5;
  void *v6;
  PFMetadata *v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;

  v3 = (__int128 *)MEMORY[0x1E0CA2E18];
  v9 = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v4 = a1;
  v5 = [PFMetadata alloc];
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v4, v9, v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[PFMetadata initWithAVURL:timeZoneLookup:](v5, "initWithAVURL:timeZoneLookup:", v6, 0);
  if (_PFReadLivePhotoMetadataFromMetadata(v7, 0, 0, (uint64_t)&v9, 0))
    v8 = &v9;
  else
    v8 = v3;
  *(_OWORD *)a2 = *v8;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v8 + 2);

}

id PFReadPairingIdentifierFromVideoAtPath(void *a1)
{
  id v1;
  PFMetadata *v2;
  void *v3;
  PFMetadata *v4;
  _BOOL4 v5;
  id v6;
  void *v7;
  id v8;
  id v10;

  v1 = a1;
  v2 = [PFMetadata alloc];
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = -[PFMetadata initWithAVURL:timeZoneLookup:](v2, "initWithAVURL:timeZoneLookup:", v3, 0);
  v10 = 0;
  v5 = _PFReadLivePhotoMetadataFromMetadata(v4, &v10, 0, 0, 0);
  v6 = v10;
  v7 = v6;
  v8 = 0;
  if (v5)
    v8 = v6;

  return v8;
}

id PFVideoComplementMetadataForVideoAVAssetPreloadingValues(void *a1, _QWORD *a2)
{
  id v3;
  PFMetadata *v4;
  _BOOL4 v5;
  id v6;
  void *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v14 = v16;
  v15 = v17;
  v3 = a1;
  v4 = -[PFMetadata initWithAVAsset:timeZoneLookup:]([PFMetadata alloc], "initWithAVAsset:timeZoneLookup:", v3, 0);

  v13 = 0;
  v5 = _PFReadLivePhotoMetadataFromMetadata(v4, &v13, (uint64_t)&v16, (uint64_t)&v14, a2);
  v6 = v13;
  v7 = 0;
  if (v5)
  {
    v7 = (void *)objc_opt_new();
    objc_msgSend(v7, "setPairingIdentifier:", v6);
    v11 = v14;
    v12 = v15;
    objc_msgSend(v7, "setImageDisplayTime:", &v11);
    v9 = v16;
    v10 = v17;
    objc_msgSend(v7, "setVideoDuration:", &v9);
  }

  return v7;
}

id PFReadPairingIdentifierFromImageAtPath(uint64_t a1)
{
  void *v1;
  id v2;
  id v4;

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 0;
  +[PFImageMetadata readMetadataType:fromFileURL:value:error:](PFImageMetadata, "readMetadataType:fromFileURL:value:error:", 1, v1, &v4, 0);
  v2 = v4;

  return v2;
}

id PFReadPairingIdentifierFromCGImageProperties(uint64_t a1)
{
  id v2;

  v2 = 0;
  +[PFImageMetadata readMetadataType:fromCGImageProperties:value:error:](PFImageMetadata, "readMetadataType:fromCGImageProperties:value:error:", 1, a1, &v2, 0);
  return v2;
}

id PFRemovePairingIdentifierFromCGImageProperties(uint64_t a1)
{
  return +[PFImageMetadata imagePropertiesByRemovingKey:dictionaryKey:fromImageProperties:](PFImageMetadata, "imagePropertiesByRemovingKey:dictionaryKey:fromImageProperties:", *MEMORY[0x1E0C89C70], *MEMORY[0x1E0CBCF70], a1);
}

uint64_t PFParallaxLayerIDIsForeground(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR("foreground"));
}

uint64_t PFParallaxLayerIDIsBackground(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR("background"));
}

uint64_t PFParallaxLayerIDIsBackfill(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasSuffix:", CFSTR("backfill"));
}

uint64_t PFParallaxLayerIDIsBackgroundLandscape(void *a1, const char *a2)
{
  return objc_msgSend(a1, "containsString:", CFSTR("background-landscape"));
}

uint64_t PFParallaxLayerIDIsForegroundLandscape(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasSuffix:", CFSTR("foreground-landscape"));
}

uint64_t PFParallaxLayerIDIsInactive(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("inactive"));
}

uint64_t PFParallaxLayerIDIsSettlingVideo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("settling-video"));
}

uint64_t PFParallaxLayerIDIsDebug(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasPrefix:", CFSTR("debug"));
}

double PFOrientationTransformImageSize(uint64_t a1, double a2, double a3)
{
  if ((unint64_t)(a1 - 5) >= 4)
    return a2;
  return a3;
}

__CFString *PFOrientationName(uint64_t a1)
{
  uint64_t v1;

  if ((unint64_t)(a1 - 1) >= 8)
    v1 = 0;
  else
    v1 = a1;
  return PFOrientationName_names[v1];
}

BOOL PFOrientationIsValid(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 8;
}

uint64_t PFOrientationInverse(unint64_t a1)
{
  if (a1 > 8)
    return 8;
  else
    return qword_1A17B7E98[a1];
}

void sub_1A178B424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A178B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A178BBAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1A178BCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A178BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__9597(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9598(uint64_t a1)
{

}

BOOL _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  _BOOL8 v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *, _BYTE *);
  void *v17;
  id v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v3 = a1;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = objc_msgSend(v3, "numberOfAssets");
  if (v5 >= 1)
  {
    v6 = v5;
    for (i = 0; i != v6; ++i)
    {
      objc_msgSend(v3, "assetAtIndex:", i);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "kind") == a2)
        objc_msgSend(v4, "addObject:", v8);

    }
  }
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 1;
  objc_msgSend(v4, "objectEnumerator");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x1E0C809B0];
  v15 = 3221225472;
  v16 = ___PFStoryRecipeAssetEnumerationIsConsistentForAssetKind_block_invoke;
  v17 = &unk_1E45A4038;
  v10 = v9;
  v18 = v10;
  v19 = &v20;
  objc_msgSend(v3, "enumerateAssetsWithKind:usingBlock:", a2, &v14);
  if (*((_BYTE *)v21 + 24))
  {
    objc_msgSend(v10, "nextObject", v14, v15, v16, v17);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *((_BYTE *)v21 + 24) = v11 == 0;

    v12 = *((_BYTE *)v21 + 24) != 0;
  }
  else
  {
    v12 = 0;
    *((_BYTE *)v21 + 24) = 0;
  }

  _Block_object_dispose(&v20, 8);
  return v12;
}

void sub_1A178CCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _PFStoryRecipeAssetIdentifiersAreUnique(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;

  v1 = a1;
  v2 = objc_msgSend(v1, "numberOfAssets");
  v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  if (v2 < 1)
  {
LABEL_9:
    v6 = 1;
    goto LABEL_10;
  }
  objc_msgSend(v1, "assetAtIndex:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "identifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v3, "containsObject:", v5) & 1) == 0)
  {
    v7 = 1;
    while (1)
    {
      v8 = v7;
      objc_msgSend(v3, "addObject:", v5);

      if (v2 == v8)
        goto LABEL_9;
      objc_msgSend(v1, "assetAtIndex:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "identifier");
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = objc_msgSend(v3, "containsObject:", v5);
      v7 = v8 + 1;
      if ((v10 & 1) != 0)
      {
        v6 = v8 >= v2;
        goto LABEL_8;
      }
    }
  }
  v6 = 0;
LABEL_8:

LABEL_10:
  return v6;
}

BOOL _PFStoryRecipeCurrentStyleRefersToExistingSongAsset(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;

  v1 = a1;
  objc_msgSend(v1, "currentStyle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = ___PFStoryRecipeCurrentStyleRefersToExistingSongAsset_block_invoke;
    v8[3] = &unk_1E45A4060;
    v4 = v3;
    v9 = v4;
    objc_msgSend(v1, "enumerateAssetsWithKind:usingBlock:", 2, v8);
    objc_msgSend(v2, "songAssetIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = !v5 || objc_msgSend(v4, "containsObject:", v5);

  }
  else
  {
    v6 = 1;
  }

  return v6;
}

BOOL PFStoryRecipeIsConsistent(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(v1, 1)
    && _PFStoryRecipeAssetEnumerationIsConsistentForAssetKind(v1, 2)
    && _PFStoryRecipeAssetIdentifiersAreUnique(v1)
    && _PFStoryRecipeCurrentStyleRefersToExistingSongAsset(v1);

  return v2;
}

void pf::TimezoneArchiveLineParser::~TimezoneArchiveLineParser(pf::TimezoneArchiveLineParser *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E45A0F90;
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 6);
  *((_QWORD *)this + 5) = 0;
}

{
  void *v2;

  *(_QWORD *)this = &off_1E45A0F90;
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)this + 6);
  *((_QWORD *)this + 5) = 0;
  JUMPOUT(0x1A1B0C908);
}

BOOL pf::TimezoneArchiveLineParser::parseLine(pf::TimezoneArchiveLineParser *this, char *__s)
{
  char *v4;
  char *v5;
  int v6;
  _BOOL8 v7;
  __int16 v8;
  __int16 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v28;

  v4 = strrchr(__s, 44);
  if (!v4)
    return 0;
  v5 = v4;
  v28 = 0;
  v6 = sscanf(__s, "%f,%f", (char *)&v28 + 4, &v28);
  v7 = v6 == 2;
  if (v6 == 2)
  {
    v8 = pf::TimezoneArchiveLineParser::timeZoneNameIndex(this, v5 + 1);
    v9 = v8;
    v10 = v28;
    v12 = *((_QWORD *)this + 12);
    v11 = *((_QWORD *)this + 13);
    if (v12 >= v11)
    {
      v14 = *((_QWORD *)this + 11);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 2);
      v16 = v15 + 1;
      if (v15 + 1 > 0x1555555555555555)
        std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 2);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0xAAAAAAAAAAAAAAALL)
        v18 = 0x1555555555555555;
      else
        v18 = v16;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>(v18);
      v20 = &v19[12 * v15];
      v22 = &v19[12 * v21];
      *(_DWORD *)v20 = HIDWORD(v10);
      *((_DWORD *)v20 + 1) = v10;
      *((_WORD *)v20 + 4) = v9;
      v13 = v20 + 12;
      v24 = (_DWORD *)*((_QWORD *)this + 11);
      v23 = (_DWORD *)*((_QWORD *)this + 12);
      if (v23 != v24)
      {
        do
        {
          v25 = *(_QWORD *)(v23 - 3);
          v23 -= 3;
          v26 = v23[2];
          *(_QWORD *)(v20 - 12) = v25;
          v20 -= 12;
          *((_DWORD *)v20 + 2) = v26;
        }
        while (v23 != v24);
        v23 = (_DWORD *)*((_QWORD *)this + 11);
      }
      *((_QWORD *)this + 11) = v20;
      *((_QWORD *)this + 12) = v13;
      *((_QWORD *)this + 13) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_DWORD *)v12 = HIDWORD(v28);
      *(_DWORD *)(v12 + 4) = v10;
      v13 = (char *)(v12 + 12);
      *(_WORD *)(v12 + 8) = v8;
    }
    *((_QWORD *)this + 12) = v13;
  }
  return v7;
}

void pf::TimezoneArchiveLineParser::finalize(pf::TimezoneArchiveLineParser *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE buf[24];
  unint64_t v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 40;
  v2 = *((_QWORD *)this + 5);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4EF0] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)&buf[8] = vdupq_n_s64(4uLL);
  *(_QWORD *)buf = off_1E45A13D0;
  v16 = v4;
  v17 = (uint64_t *)&TIMEZONE_RTREE_MAP_VERSION;
  boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v2, "version", (uint64_t)buf);
  v5 = *(_QWORD *)v3;
  if (*(_QWORD *)v3)
    v6 = *(_QWORD *)v3 - (_QWORD)&v14;
  else
    v6 = 1;
  v7 = *((_QWORD *)this + 12);
  v13 = *((_QWORD *)this + 11);
  v14 = v6;
  v12 = v7;
  *(_OWORD *)&buf[8] = xmmword_1A17B6C50;
  *(_QWORD *)buf = off_1E45A1280;
  v16 = 0x80000001A17B8556 & 0x7FFFFFFFFFFFFFFFLL;
  v17 = &v14;
  v18 = &v9;
  v19 = &v10;
  v20 = &v11;
  v21 = &v12;
  v22 = &v13;
  boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v5, "rtree", (uint64_t)buf);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  v8 = PFChecksumArchiveData((char *)(*(_QWORD *)v3 - 8), *(_QWORD *)(*(_QWORD *)v3 + 48) + 8, *((char **)this + 2), *((_QWORD *)this + 3));
  **((_QWORD **)this + 4) = v8;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFTimeZoneLookup checksum %016llx", buf, 0xCu);
  }
}

void boost::interprocess::ipcdetail::CtorArgN<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t a1, const char *a2, unint64_t a3, unint64_t *a4)
{
  float v4;
  unint64_t v6;
  char *v7;
  float *v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  int8x16_t *v27;
  unint64_t i;
  unint64_t v29;
  uint64_t *v30;
  BOOL v31;
  int64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int8x16_t v39;
  uint64_t v40;
  uint64x2_t v41;
  float v42;
  float v43;
  float v44;
  float v45;
  char v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;

  *a4 = 0;
  if (a3)
  {
    v6 = a3;
    v7 = (char *)a2;
    do
    {
      v9 = **(float ***)(a1 + 72);
      v10 = **(float ***)(a1 + 64);
      v11 = *(uint64_t **)(a1 + 32);
      v12 = *v11;
      v13 = (char *)v11 + *v11;
      if (v12 == 1)
        v13 = 0;
      *((_QWORD *)v7 + 3) = 1;
      if (v13)
        v14 = v13 - v7;
      else
        v14 = 1;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = v14;
      if ((char *)v10 - (char *)v9 > 11)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
        v47 = 0;
        v48 = 0;
        v49 = 0;
        if (v16 >> 59)
          boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
        v47 = (uint64_t *)operator new(0xAAAAAAAAAAAAAAB0 * (v10 - v9));
        v49 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
        v46 = 0;
        if (v9 != v10)
        {
          v18 = 0;
          v20 = v43;
          v19 = v44;
          v21 = (uint64_t)v9;
          v22 = v9;
          v23 = v45;
          do
          {
            v24 = *v22;
            if (v18)
            {
              if (v24 < v4)
                v4 = *v22;
              if (v24 > v19)
                v19 = *v22;
              v25 = v22[1];
              if (v25 < v20)
                v20 = v22[1];
              if (v25 > v23)
                v23 = v22[1];
            }
            else
            {
              v23 = v22[1];
              v18 = 1;
              v20 = v23;
              v19 = *v22;
              v4 = *v22;
            }
            v39.i64[0] = *(_QWORD *)v22;
            v39.i64[1] = v21;
            v26 = v48;
            v27 = (int8x16_t *)&v47[2 * v48];
            if (v48 == v49)
            {
              boost::container::vector<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>,boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>*,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>>(&v41, (char *)&v47, v27, &v39);
              if (!v41.i64[0])
              {
                v46 = v18;
                v42 = v4;
                v43 = v20;
                v44 = v19;
                v45 = v23;
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              }
            }
            else
            {
              *v27 = v39;
              v48 = v26 + 1;
            }
            v22 += 3;
            v21 += 12;
          }
          while (v22 != v10);
          v46 = v18;
          v42 = v4;
          v43 = v20;
          v44 = v19;
          v45 = v23;
          v6 = a3;
        }
        if (v16 < 0x21)
        {
          v15 = 0;
          v29 = 1;
        }
        else
        {
          v15 = 0;
          for (i = 32; i < v16; i *= 32)
          {
            v29 = i;
            ++v15;
          }
        }
        v41.i64[0] = v29;
        v41.i64[1] = v29 >> 2;
        v30 = v47;
        v37 = v47;
        v38 = v47;
        if (v47)
          v31 = 1;
        else
          v31 = v48 == 0;
        if (!v31)
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        v37 = &v47[2 * v48];
        if (v9 == v10)
          __assert_rtn("get", "pack_create.hpp", 273, "(m_initialized)&&(\"uninitialized envelope accessed\")");
        boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(&v39, &v38, &v37, &v42, 0xAAAAAAAAAAAAAAABLL * (v10 - v9), &v41, v7);
        v32 = (char *)&v39 - (char *)&v36 + 16;
        if (v40 == 1)
          v32 = 0;
        v17 = v32 + v40;
        v36 = v32 + v40;
        if (v49)
        {
          operator delete(v30);
          v17 = v36;
        }
        if (v17 != 1)
        {
          v33 = (char *)((char *)&v36 - (v7 + 24));
          goto LABEL_48;
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
        v17 = 1;
      }
      v33 = 0;
LABEL_48:
      *((_QWORD *)v7 + 2) = v15;
      *((_QWORD *)v7 + 3) = &v33[v17];
      *((_QWORD *)v7 + 1) = v16;
      v7 += 32;
      v34 = *a4 + 1;
      *a4 = v34;
    }
    while (v34 < v6);
  }
}

void sub_1A178D6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (a25)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::destroy_n(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  *a4 = 0;
  if (a3)
  {
    v7 = 0;
    v8 = a2 - (_QWORD)&v21;
    do
    {
      v9 = (_QWORD *)(a2 + v7);
      v10 = *(_QWORD *)(a2 + v7 + 24);
      if (v10 != 1)
      {
        v11 = v8 + v7;
        v12 = v8 + v7 + v10;
        v13 = v12 == -23;
        v21 = v12 + 24;
        if (v12 == -23)
          v14 = 0;
        else
          v14 = -8;
        v15 = v12 + v14;
        v16 = v14 + v10;
        v17 = (uint64_t)v9 + v10 + 24;
        if (v13)
          v18 = 0;
        else
          v18 = (_DWORD *)v17;
        if (v15 == -23)
          v19 = 0;
        else
          v19 = (char *)&v22 - (char *)v23;
        v22 = v11 + v16 + 24;
        v23[0] = v11 + v16 + v19 + 24;
        v23[1] = a2 + v7;
        boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v18, (uint64_t)v23);
        v9[3] = 1;
      }
      v9[1] = 0;
      v9[2] = 0;
      v20 = *a4 + 1;
      *a4 = v20;
      v7 += 32;
    }
    while (v20 < a3);
  }
}

void boost::interprocess::ipcdetail::CtorArgN<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

void *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(_DWORD *a1, uint64_t a2)
{
  int v2;
  char *v3;
  _DWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *result;
  int64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(boost::bad_get *__hidden);

  v3 = (char *)(a1 + 2);
  v2 = *a1;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      if (v2 < 0)
        v3 = *(char **)v3;
      if (*(_QWORD *)a2 == 1)
        v5 = 0;
      else
        v5 = (_DWORD *)(*(_QWORD *)a2 + a2);
      v6 = (char *)boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v5);
      if (!v6)
      {
        v20 = &off_1E45A1430;
        boost::throw_exception<boost::bad_get>();
      }
      if (v6 != v3)
        __assert_rtn("operator()", "destroy.hpp", 62, "(&l == &rtree::get<leaf>(*m_current_node))&&(\"invalid pointers\")");
      v7 = *(_QWORD **)(a2 + 8);
      v8 = a2 - (_QWORD)&v18;
      if (*(_QWORD *)a2 == 1)
        v8 = 0;
      v9 = v8 + *(_QWORD *)a2;
      v18 = v9;
      v10 = (char *)&v18 - (char *)&v19;
      if (v9 == 1)
        v10 = 0;
      v11 = v10 + v9;
      v19 = v11;
      if (v11 == 1)
        v12 = 0;
      else
        v12 = (char *)&v19 + v11;
      if (v12)
        v13 = v12 - (char *)&v20;
      else
        v13 = 1;
      v20 = (void (**)(boost::bad_get *__hidden))v13;
      result = boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v20);
      v15 = (char *)&v19 - (char *)&v20;
      if (v19 == 1)
        v15 = 0;
      v16 = v15 + v19;
      v20 = (void (**)(boost::bad_get *__hidden))(v15 + v19);
      if (v15 + v19 != 1 && (void (***)(boost::bad_get *__hidden))((char *)&v20 + v16))
      {
        if (*v7 == 1)
          v17 = 0;
        else
          v17 = (char *)v7 + *v7;
        result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v17, (uint64_t)&v20 + v16);
      }
      break;
    case 1:
      if (v2 < 0)
        result = boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::operator()((char *)a2, *(char **)v3);
      else
        result = boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::operator()((char *)a2, v3);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

void sub_1A178D9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

char *boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::operator()(char *a1, char *a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  int64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *result;
  int64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  void (**v27)(boost::bad_get *__hidden);

  if (*(_QWORD *)a1 == 1)
    v4 = 0;
  else
    v4 = &a1[*(_QWORD *)a1];
  v5 = (char *)boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v4);
  if (!v5)
  {
    v27 = &off_1E45A1430;
    boost::throw_exception<boost::bad_get>();
  }
  if (v5 != a2)
    __assert_rtn("operator()", "destroy.hpp", 41, "(&n == &rtree::get<internal_node>(*m_current_node))&&(\"invalid pointers\")");
  v6 = a1 - (char *)&v25;
  if (*(_QWORD *)a1 == 1)
    v6 = 0;
  v7 = v6 + *(_QWORD *)a1;
  v25 = v7;
  if (*(_QWORD *)a2)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)&a2[v8 + 24];
      v10 = a2 - a1 + 24 + v8;
      if (v9 == 1)
        v10 = 0;
      v11 = v10 + v9;
      *(_QWORD *)a1 = v11;
      if (v11 == 1)
        v12 = 0;
      else
        v12 = &a1[v11];
      boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v12, a1);
      *(_QWORD *)&a2[v8 + 24] = 1;
      v8 += 24;
    }
    while (&a2[v8 + 8] != &a2[24 * *(_QWORD *)a2 + 8]);
    v7 = v25;
  }
  v13 = (_QWORD *)*((_QWORD *)a1 + 1);
  v14 = (char *)&v25 - (char *)&v24;
  if (v7 == 1)
    v14 = 0;
  v15 = v14 + v7;
  v24 = v15;
  v16 = (char *)&v24 - (char *)&v26;
  if (v15 == 1)
    v16 = 0;
  v17 = v16 + v15;
  v26 = v17;
  if (v17 == 1)
    v18 = 0;
  else
    v18 = (char *)&v26 + v17;
  if (v18)
    v19 = v18 - (char *)&v27;
  else
    v19 = 1;
  v27 = (void (**)(boost::bad_get *__hidden))v19;
  result = (char *)boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v27);
  v21 = (char *)&v26 - (char *)&v27;
  if (v26 == 1)
    v21 = 0;
  v22 = v21 + v26;
  v27 = (void (**)(boost::bad_get *__hidden))(v21 + v26);
  if (v21 + v26 != 1 && (void (***)(boost::bad_get *__hidden))((char *)&v27 + v22))
  {
    if (*v13 == 1)
      v23 = 0;
    else
      v23 = (char *)v13 + *v13;
    return boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v23, (uint64_t)&v27 + v22);
  }
  return result;
}

void sub_1A178DB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  std::exception::~exception(&a12);
  _Unwind_Resume(a1);
}

void boost::detail::variant::forced_return<void>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

_QWORD *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  _QWORD *v4;

  v3 = *a1;
  v1 = a1 + 2;
  v2 = v3;
  v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      return v4;
    case 1:
      if (v2 < 0)
        v4 = (_QWORD *)*v1;
      else
        v4 = v1;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v4;
}

void boost::throw_exception<boost::bad_get>()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  exception[4] = 0;
  exception[5] = 0;
  *((_DWORD *)exception + 12) = -1;
  *exception = &off_1E45A0FC0;
  exception[1] = &unk_1E45A0FF0;
  exception[2] = &unk_1E45A1018;
  exception[3] = 0;
}

_QWORD *boost::interprocess::allocator<boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(_QWORD *result)
{
  char *v1;
  int v3;
  int v4;

  v1 = (char *)result + *result;
  if (*result == 1 || v1 == 0)
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  v3 = *(_DWORD *)v1;
  v4 = v3 ^ (v3 >> 31);
  if (v4 == 1)
  {
    if (v3 < 0)
    {
      result = (_QWORD *)*((_QWORD *)v1 + 1);
      if (result)
        goto LABEL_16;
    }
  }
  else
  {
    if (v4)
      boost::detail::variant::forced_return<void>();
    if (v3 < 0)
    {
      result = (_QWORD *)*((_QWORD *)v1 + 1);
      if (result)
LABEL_16:
        JUMPOUT(0x1A1B0C908);
    }
  }
  return result;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_get>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = &off_1E45A1430;
  *(_QWORD *)v2 = &unk_1E45A1400;
  *(_QWORD *)(v2 + 16) = &unk_1E45A1480;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_1E45A0FC0;
  *(_QWORD *)(v2 + 8) = &unk_1E45A0FF0;
  *(_QWORD *)(v2 + 16) = &unk_1E45A1018;
  boost::exception_detail::copy_boost_exception(v2 + 16, a1 + 16);
  return v2;
}

void sub_1A178DE34(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::exception *v2;

  std::exception::~exception(v2);
  MEMORY[0x1A1B0C908](v1, 0x10F1C40C404A9A7);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A178DEB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x1A1B0C908);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  *(_QWORD *)(a1 + 8) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x1A1B0C908);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

{
  *a1 = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 8) = &off_1E45A1430;
  *(_QWORD *)a1 = &unk_1E45A1400;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_1E45A1480;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_1E45A0FC0;
  *(_QWORD *)(a1 + 8) = &unk_1E45A0FF0;
  *(_QWORD *)(a1 + 16) = &unk_1E45A1018;
  return a1;
}

void sub_1A178E0B8(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1A178E1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1A1B0C908);
}

_QWORD *boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1)
{
  _QWORD *v1;
  int v2;
  int v3;
  _QWORD *v4;

  v3 = *a1;
  v1 = a1 + 2;
  v2 = v3;
  v4 = 0;
  switch(v3 ^ (v3 >> 31))
  {
    case 0:
      if (v2 < 0)
        v4 = (_QWORD *)*v1;
      else
        v4 = v1;
      break;
    case 1:
      return v4;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v4;
}

void boost::container::vector<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>,boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>*,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>>>>(_QWORD *a1, char *a2, _BYTE *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v13;
  _OWORD *v14;
  _OWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;

  v4 = *((_QWORD *)a2 + 2);
  if (v4 != *((_QWORD *)a2 + 1))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  v5 = 0x7FFFFFFFFFFFFFFLL;
  if (v4 == 0x7FFFFFFFFFFFFFFLL)
    goto LABEL_25;
  if (v4 >> 61 > 4)
    v6 = -1;
  else
    v6 = 8 * v4;
  if (v4 >> 61)
    v7 = v6;
  else
    v7 = 8 * v4 / 5;
  if (v7 < 0x7FFFFFFFFFFFFFFLL)
    v5 = v7;
  v8 = v4 + 1 > v5 ? v4 + 1 : v5;
  if (v8 >> 59)
LABEL_25:
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  v13 = *(_BYTE **)a2;
  v14 = operator new(16 * v8);
  v15 = v14;
  v16 = *(_BYTE **)a2;
  v17 = *((_QWORD *)a2 + 1);
  v18 = v14;
  if (*(_QWORD *)a2)
  {
    v18 = v14;
    if (v16 != a3)
    {
      memmove(v14, *(const void **)a2, a3 - v16);
      v18 = (_OWORD *)((char *)v15 + a3 - v16);
    }
  }
  *v18 = *a4;
  if (a3)
  {
    v19 = &v16[16 * v17];
    if (v19 != a3)
      memmove(v18 + 1, a3, v19 - a3);
  }
  if (v16)
  {
    operator delete(v16);
    v17 = *((_QWORD *)a2 + 1);
  }
  *(_QWORD *)a2 = v15;
  *((_QWORD *)a2 + 1) = v17 + 1;
  *((_QWORD *)a2 + 2) = v8;
  *a1 = (char *)v15 + a3 - v13;
}

char *boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(int8x16_t *a1, uint64_t **a2, uint64_t **a3, float *a4, unint64_t a5, uint64x2_t *a6, _QWORD *a7)
{
  uint64_t v7;
  uint64_t v15;
  char *v16;
  char *v18;
  int64_t v19;
  int64_t v20;
  _DWORD *v21;
  int64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  uint64_t v37;
  char *v38;
  char *v40;
  int64_t v41;
  int64_t v42;
  _DWORD *v43;
  int64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  int64_t v51;
  char *v52;
  int8x16_t *v53;
  uint64_t *v54;
  int64_t v55;
  int64_t v56;
  char *v57;
  const std::runtime_error *v59;
  const std::runtime_error *v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  int64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  int64_t v68;
  int64_t v69;
  uint64x2_t v70;
  int64_t v71;
  int64_t v72;
  int8x16_t v73;
  uint64_t v74;
  _QWORD v75[2];

  v7 = (char *)*a3 - (char *)*a2;
  if (v7 < 1 || v7 >> 4 != a5)
    __assert_rtn("per_level", "pack_create.hpp", 300, "(0 < std::distance(first, last) && static_cast<size_type>(std::distance(first, last)) == values_count)&&(\"unexpected parameters\")");
  if (a6->i64[0] > 1uLL)
  {
    v70 = vshrq_n_u64(*a6, 5uLL);
    if (*a7 == 1)
      v37 = 0;
    else
      v37 = (uint64_t)a7 + *a7;
    v38 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v37, 0x328uLL);
    v69 = v38 - (char *)&v69;
    if (v38 - (char *)&v69 == 1 || v38 == 0)
    {
      v59 = (const std::runtime_error *)MEMORY[0x1A1B0C890](v75, "boost::geometry::index::rtree node creation failed");
      v73.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/bfb0587d-5ed3-11ef-a313-86b8363ea862/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/boost/geometry/index/detail/exception.hpp";
      v73.i64[1] = (uint64_t)"void boost::geometry::index::detail::throw_runtime_error(const char *)";
      v74 = 28;
      boost::throw_exception<std::runtime_error>(v59, &v73);
    }
    if (v38 - (char *)&v73 == 1)
      v40 = 0;
    else
      v40 = v38;
    *((_QWORD *)v40 + 1) = 0;
    *(_DWORD *)v40 = 1;
    v41 = (char *)&v69 - (char *)&v68;
    if (v69 == 1)
      v41 = 0;
    v42 = v41 + v69;
    v68 = v42;
    if (v69 == 1)
      v43 = 0;
    else
      v43 = (_DWORD *)((char *)&v69 + v69);
    if (v42 == 1)
      v44 = 0;
    else
      v44 = (char *)&v68 - (char *)v75;
    v75[0] = v44 + v42;
    v75[1] = a7;
    v45 = boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v43);
    if (!v45)
    {
      v73.i64[0] = (uint64_t)&off_1E45A1430;
      boost::throw_exception<boost::bad_get>();
    }
    v46 = a6->i64[0];
    v47 = a5 / a6->i64[0];
    v48 = a5 % a6->i64[0];
    if (v48)
    {
      v49 = a6->u64[1];
      if (v48 >= v49 || (v47 = (a5 - v49) / v46, a5 - v49 == v47 * v46))
        ++v47;
      else
        v47 += 2;
    }
    if (v47 >= 0x22)
      __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
    BYTE1(v74) = 0;
    v54 = *a2;
    v66 = *a3;
    v67 = v54;
    boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v67, &v66, a4, a5, (unint64_t *)a6, (uint64_t)&v70, v45, (uint64_t)&v73, (uint64_t)a7);
    v75[0] = 1;
    if (!BYTE1(v74))
      __assert_rtn("get", "pack_create.hpp", 273, "(m_initialized)&&(\"uninitialized envelope accessed\")");
    v55 = (char *)&v69 - (char *)&v65;
    if (v69 == 1)
      v55 = 0;
    v56 = v55 + v69;
    v65 = v55 + v69;
    *a1 = v73;
    v57 = (char *)((char *)&v65 - (char *)&a1[1]);
    if (v56 == 1)
      v57 = 0;
    a1[1].i64[0] = (uint64_t)&v57[v56];
    v53 = (int8x16_t *)v75;
  }
  else
  {
    if (a5 >= 0x21)
      __assert_rtn("per_level", "pack_create.hpp", 306, "(values_count <= parameters.get_max_elements())&&(\"too big number of elements\")");
    if (*a7 == 1)
      v15 = 0;
    else
      v15 = (uint64_t)a7 + *a7;
    v16 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v15, 0x328uLL);
    v70.i64[0] = v16 - (char *)&v70;
    if (v16 - (char *)&v70 == 1 || v16 == 0)
    {
      v60 = (const std::runtime_error *)MEMORY[0x1A1B0C890](v75, "boost::geometry::index::rtree node creation failed");
      v73.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/bfb0587d-5ed3-11ef-a313-86b8363ea862/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/boost/geometry/index/detail/exception.hpp";
      v73.i64[1] = (uint64_t)"void boost::geometry::index::detail::throw_runtime_error(const char *)";
      v74 = 28;
      boost::throw_exception<std::runtime_error>(v60, &v73);
    }
    if (v16 - (char *)&v73 == 1)
      v18 = 0;
    else
      v18 = v16;
    *((_QWORD *)v18 + 1) = 0;
    *(_DWORD *)v18 = 0;
    if (v70.i64[0] == 1)
      v19 = 0;
    else
      v19 = (char *)&v70 - (char *)&v72;
    v20 = v19 + v70.i64[0];
    if (v70.i64[0] == 1)
      v21 = 0;
    else
      v21 = (__int32 *)((char *)v70.i32 + v70.i64[0]);
    if (v20 == 1)
      v22 = 0;
    else
      v22 = (char *)&v72 - (char *)&v73;
    v72 = v20;
    v73.i64[0] = v22 + v20;
    v73.i64[1] = (uint64_t)a7;
    v23 = boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::detail::variant::get_visitor<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v21);
    v24 = v23;
    if (!v23)
    {
      v75[0] = &off_1E45A1430;
      boost::throw_exception<boost::bad_get>();
    }
    v25 = (uint64_t *)(*a2)[1];
    v63 = *v25;
    boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(v23, v25);
    v26 = *a2;
    if (!*a2)
      __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    v27.i64[0] = v63;
    v27.i64[1] = v63;
    while (1)
    {
      *a2 = v26 + 2;
      if (v26 + 2 == *a3)
        break;
      v64 = (float32x4_t)v27;
      v28 = v26[3];
      v27.i32[0] = *(_DWORD *)v28;
      v61 = (float32x4_t)v27;
      v27.i32[0] = *(_DWORD *)(v28 + 4);
      v62 = (float32x4_t)v27;
      boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(v24, (uint64_t *)v28);
      v29 = (int8x16_t)v64;
      v29.i32[0] = v61.i32[0];
      v30 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v64, v61), 0), v29, (int8x16_t)v64);
      v31 = (int8x16_t)v30;
      v31.i32[2] = v61.i32[0];
      v32 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v61, (float32x4_t)vdupq_laneq_s32(v30, 2)), 0), v31, (int8x16_t)v30);
      v33 = v32;
      v33.i32[1] = v62.i32[0];
      v34 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1), v62), 0), v33, v32);
      v35 = (int8x16_t)v34;
      v35.i32[3] = v62.i32[0];
      v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v62, (float32x4_t)vdupq_laneq_s32(v34, 3)), 0), v35, (int8x16_t)v34);
      v26 = *a2;
      if (!*a2)
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
    }
    v73.i64[0] = 1;
    v50 = (char *)&v70 - (char *)&v71;
    if (v70.i64[0] == 1)
      v50 = 0;
    v51 = v50 + v70.i64[0];
    v71 = v50 + v70.i64[0];
    *a1 = v27;
    v52 = (char *)((char *)&v71 - (char *)&a1[1]);
    if (v51 == 1)
      v52 = 0;
    a1[1].i64[0] = (uint64_t)&v52[v51];
    v53 = &v73;
  }
  return boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(v53->i8);
}

void sub_1A178E8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer((char *)(v1 - 104));
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::runtime_error>(const std::runtime_error *a1, int8x16_t *a2)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_1E45A1400;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *(_QWORD *)exception = &off_1E45A1038;
  *((_QWORD *)exception + 1) = &unk_1E45A1068;
  *((_QWORD *)exception + 3) = &unk_1E45A1090;
  *((_QWORD *)exception + 4) = 0;
  *((_DWORD *)exception + 14) = a2[1].i32[0];
  *(int8x16_t *)(exception + 40) = vextq_s8(*a2, *a2, 8uLL);
}

_QWORD *boost::geometry::index::detail::varray<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,33ul>::push_back(_QWORD *result, uint64_t *a2)
{
  char *v2;
  uint64_t v3;

  if ((unint64_t)(*result - 33) <= 0xFFFFFFFFFFFFFFDDLL)
    __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
  v2 = (char *)result + 12 * *result;
  v3 = *a2;
  *((_DWORD *)v2 + 4) = *((_DWORD *)a2 + 2);
  *((_QWORD *)v2 + 1) = v3;
  ++*result;
  return result;
}

char *boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(char *a1)
{
  char *v2;
  int64_t v4;
  uint64_t v5;
  int64_t v6;
  BOOL v7;
  int64_t v8;
  char *v9;
  int64_t v10;
  int64_t v12;
  int64_t v13;
  _QWORD v14[2];

  v2 = &a1[*(_QWORD *)a1];
  if (*(_QWORD *)a1 != 1 && v2 != 0)
  {
    v4 = a1 - (char *)&v12 + *(_QWORD *)a1;
    v12 = v4;
    v5 = *((_QWORD *)a1 + 1);
    v6 = (char *)&v12 - (char *)&v13;
    v7 = v4 == 1;
    if (v4 == 1)
      v6 = 0;
    v8 = v6 + v4;
    if (v7)
      v9 = 0;
    else
      v9 = v2;
    if (v8 == 1)
      v10 = 0;
    else
      v10 = (char *)&v13 - (char *)v14;
    v13 = v8;
    v14[0] = v10 + v8;
    v14[1] = v5;
    boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>>(v9, (uint64_t)v14);
  }
  *(_QWORD *)a1 = 1;
  return a1;
}

char *boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(uint64_t **a1, uint64_t **a2, float *a3, unint64_t a4, unint64_t *a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  unint64_t *v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  float v44;
  float v45;
  uint64_t *v46;
  uint64_t *v47;
  float v48;
  uint64_t j;
  float v50;
  float *v51;
  float v52;
  unint64_t v53;
  float v54;
  uint64_t *v55;
  uint64_t *v56;
  float *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *k;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  _QWORD *v68;
  char *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  uint64_t *v78;
  float *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  int v83;
  float v84;
  float *v85;
  uint64_t *v86;
  float v87;
  float *v88;
  uint64_t v89;
  float v90;
  float *v91;
  float v92;
  uint64_t *v93;
  float v94;
  float *v95;
  uint64_t *v96;
  float v97;
  uint64_t v98;
  float v99;
  float *v100;
  float v101;
  float v102;
  float v103;
  float i;
  float v105;
  float v106;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  uint64_t *v115;
  uint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t **v119;
  uint64_t **v120;
  float *v131;
  uint64_t *v132;
  uint64_t *v133;
  float *v134;
  float *v135;
  uint64_t *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t *v139;
  uint64_t *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146[2];

  v9 = *a2;
  v132 = *a1;
  if ((char *)*a2 - (char *)*a1 < 16 || ((char *)*a2 - (char *)*a1) >> 4 != a4)
    __assert_rtn("per_level_packets", "pack_create.hpp", 389, "(0 < std::distance(first, last) && static_cast<size_type>(std::distance(first, last)) == values_count)&&(\"unexpected parameters\")");
  v11 = a5;
  v13 = a5[1];
  v14 = a4 - v13;
  if (a4 < v13)
    __assert_rtn("per_level_packets", "pack_create.hpp", 392, "(subtree_counts.minc <= values_count)&&(\"too small number of elements\")");
  v15 = a8;
  v16 = a7;
  v17 = a6;
  v19 = a9;
  v20 = *a5;
  if (*a5 >= a4)
  {
    v139 = *a2;
    v140 = v132;
    boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>>(&v141, &v140, &v139, a3, a4, a6, a9);
    v64 = v142;
    v65 = (char *)&v142 - (char *)&v137;
    if (v142 == 1)
      v65 = 0;
    v66 = v65 + v142;
    v67 = (char *)&v137 - (char *)&v138;
    if (v66 == 1)
      v67 = 0;
    v137 = v66;
    *(_QWORD *)&v138 = v67 + v66;
    *((_QWORD *)&v138 + 1) = a9;
    if ((unint64_t)(*v16 - 33) <= 0xFFFFFFFFFFFFFFDDLL)
      __assert_rtn("check_capacity", "varray.hpp", 79, "(s <= v.capacity())&&(\"size too big\")");
    v68 = &v16[3 * *v16];
    *(_OWORD *)(v68 + 1) = v141;
    v69 = (char *)((char *)&v142 - (char *)(v68 + 3));
    if (v64 == 1)
      v69 = 0;
    v68[3] = &v69[v64];
    ++*v16;
    *(_QWORD *)&v138 = 1;
    if (*(_BYTE *)(v15 + 17))
    {
      v70 = *(float *)&v141;
      v71 = *(float *)v15;
      if (*(float *)&v141 < *(float *)v15)
      {
        *(_DWORD *)v15 = v141;
        v71 = v70;
      }
      v72 = *(float *)(v15 + 8);
      if (v70 > v72)
      {
        *(float *)(v15 + 8) = v70;
        v72 = v70;
      }
      v73 = *((float *)&v141 + 1);
      v74 = *(float *)(v15 + 4);
      if (*((float *)&v141 + 1) < v74)
      {
        *(_DWORD *)(v15 + 4) = DWORD1(v141);
        v74 = v73;
      }
      v75 = *(float *)(v15 + 12);
      if (v73 > v75)
      {
        *(float *)(v15 + 12) = v73;
        v75 = v73;
      }
      v76 = *((float *)&v141 + 2);
      if (*((float *)&v141 + 2) < v71)
        *(_DWORD *)v15 = DWORD2(v141);
      if (v76 > v72)
        *(float *)(v15 + 8) = v76;
      v77 = *((float *)&v141 + 3);
      if (*((float *)&v141 + 3) < v74)
        *(_DWORD *)(v15 + 4) = HIDWORD(v141);
      if (v77 > v75)
        *(float *)(v15 + 12) = v77;
    }
    else
    {
      *(_OWORD *)v15 = v141;
      *(_BYTE *)(v15 + 17) = 1;
    }
    return boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer((char *)&v138);
  }
  v21 = a2;
  v22 = a4 / v20 * v20;
  v23 = ((a4 / v20) >> 1) * v20;
  v24 = a4 % v20;
  v25 = v14 / v20;
  v26 = v14 % v20;
  v27 = v20 > v14;
  v28 = ((v14 / v20 + 2) >> 1) * v20;
  if (v27)
    v28 = v26;
  v29 = ((v25 + 1) >> 1) * v20;
  if (!v26)
    v28 = v29;
  v30 = ((a4 / v20 + 1) >> 1) * v20;
  if (v13 <= v24)
    v31 = v30;
  else
    v31 = v28;
  if (a4 == v22)
    v32 = v23;
  else
    v32 = v31;
  if (!v132 && v32)
    __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  v33 = (float *)&v132[2 * v32];
  v35 = *a3;
  v34 = a3[1];
  v36 = a3[2] - *a3;
  v37 = a3[3] - v34;
  v131 = v33;
  if (v36 >= v37)
  {
    if (v33 != (float *)v9)
    {
      v118 = v32;
      v120 = a1;
      v78 = *a1;
      v79 = v33;
      while (1)
      {
        v80 = ((char *)v9 - (char *)v78) >> 4;
        if (v80 < 2)
          goto LABEL_184;
        if (v80 == 3)
          break;
        if (v80 == 2)
        {
          if (!v9)
            __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
          if (!v78)
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          if (*((float *)v9 - 4) < *(float *)v78)
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v9 - 2);
          goto LABEL_184;
        }
        if ((char *)v9 - (char *)v78 <= 127)
        {
          if (!v9)
            __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
          while (2)
          {
            if (v78 == v9 - 2)
              goto LABEL_184;
            v109 = v9;
            if (v78 == v9)
            {
LABEL_207:
              if (v109 != v78)
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v109);
              if (!v78)
                __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
            }
            else
            {
              if (!v78)
                __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
              v110 = v78 + 2;
              if (v78 + 2 != v9)
              {
                v111 = *(float *)v78;
                v109 = v78;
                v112 = (float *)(v78 + 2);
                do
                {
                  v113 = *v112;
                  v112 += 4;
                  v114 = v113;
                  if (v113 < v111)
                  {
                    v111 = v114;
                    v109 = v110;
                  }
                  v110 = (uint64_t *)v112;
                }
                while (v112 != (float *)v9);
                goto LABEL_207;
              }
            }
            v78 += 2;
            continue;
          }
        }
        if (!v78)
          __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
        v81 = &v78[2 * (v80 >> 1)];
        v144 = v81;
        v145 = v78;
        if (!v9)
          __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
        v82 = v9 - 2;
        v143 = v9 - 2;
        v83 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(&v145, &v144, &v143);
        v84 = *(float *)v78;
        if (*(float *)v78 < *(float *)v81)
        {
LABEL_124:
          v88 = (float *)(v78 + 2);
          v89 = 1;
          if (v78 + 2 < v82)
          {
            while (1)
            {
              v90 = *(float *)v81;
              if (*(float *)&v78[2 * v89] < *(float *)v81)
              {
                v91 = &v88[4 * v89];
                do
                {
                  ++v89;
                  v92 = *v91;
                  v91 += 4;
                }
                while (v92 < v90);
              }
              v93 = &v78[2 * v89];
              do
              {
                v94 = *((float *)v82 - 4);
                v82 -= 2;
              }
              while (v94 >= v90);
              if (v93 >= v82)
                break;
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v78[2 * v89], v82);
              ++v83;
              if (v81 == v93)
                v81 = v82;
              ++v89;
            }
            v79 = v131;
          }
          v95 = (float *)&v78[2 * v89];
          if (v95 != (float *)v81 && *(float *)v81 < *v95)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v78[2 * v89], v81);
            ++v83;
          }
          if (v79 == v95)
            goto LABEL_184;
          if (!v83)
          {
            if (v79 >= v95)
            {
              v100 = v95 + 4;
              if (v95 + 4 == (float *)v9)
                goto LABEL_184;
              v101 = *v95;
              while (1)
              {
                v102 = v101;
                v101 = *v100;
                if (*v100 < v102)
                  break;
                v100 += 4;
                if (v100 == (float *)v9)
                  goto LABEL_184;
              }
            }
            else
            {
              if (v89 == 1)
                goto LABEL_184;
              v97 = *(float *)v78;
              v98 = 16 * v89 - 16;
              while (1)
              {
                v99 = v97;
                v97 = *v88;
                if (*v88 < v99)
                  break;
                v88 += 4;
                v98 -= 16;
                if (!v98)
                  goto LABEL_184;
              }
            }
          }
          if (v79 >= v95)
            v96 = (uint64_t *)(v95 + 4);
          else
            v96 = v78;
          if (v79 < v95)
            v9 = &v78[2 * v89];
        }
        else
        {
          v85 = (float *)(v9 - 4);
          while (v85 != (float *)v78)
          {
            v86 = (uint64_t *)v85;
            v87 = *v85;
            v85 -= 4;
            if (v87 < *(float *)v81)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v78, v86);
              ++v83;
              v82 = v86;
              v79 = v131;
              goto LABEL_124;
            }
          }
          v96 = v78 + 2;
          if (v84 >= *(float *)v82)
          {
            v79 = v131;
            if (v96 == v82)
              goto LABEL_184;
            while (v84 >= *(float *)v96)
            {
              v96 += 2;
              if (v96 == v82)
                goto LABEL_184;
            }
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v96, v9 - 2);
            v96 += 2;
          }
          else
          {
            v79 = v131;
          }
          if (v96 == v82)
            goto LABEL_184;
          while (1)
          {
            v103 = *(float *)v78;
            for (i = *(float *)v96; v103 >= i; i = v105)
            {
              v105 = *((float *)v96 + 4);
              v96 += 2;
            }
            do
            {
              v106 = *((float *)v82 - 4);
              v82 -= 2;
            }
            while (v103 < v106);
            if (v96 >= v82)
              break;
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v96, v82);
            v96 += 2;
          }
          if (v79 < (float *)v96)
            goto LABEL_184;
        }
        v78 = v96;
        if (v79 == (float *)v9)
          goto LABEL_184;
      }
      *(_QWORD *)&v141 = v78;
      if (!v78)
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      *(_QWORD *)&v138 = v78 + 2;
      if (!v9)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v146[0] = v9 - 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t **)&v141, (uint64_t **)&v138, v146);
LABEL_184:
      if (!v132)
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      v35 = *a3;
      v36 = a3[2] - *a3;
      v16 = a7;
      v15 = a8;
      v19 = a9;
      v17 = a6;
      v21 = a2;
      v11 = a5;
      v32 = v118;
      a1 = v120;
    }
    v141 = *(_OWORD *)a3;
    v138 = v141;
    *((float *)&v141 + 2) = v35 + (float)(v36 * 0.5);
    *(float *)&v138 = *((float *)&v141 + 2);
    goto LABEL_197;
  }
  if (v33 == (float *)v9)
    goto LABEL_196;
  v117 = v32;
  v119 = a1;
  v38 = *a1;
  v39 = (unint64_t)v33;
  while (1)
  {
    v40 = ((char *)v9 - (char *)v38) >> 4;
    if (v40 < 2)
      goto LABEL_194;
    if (v40 == 3)
    {
      *(_QWORD *)&v141 = v38;
      if (!v38)
        __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
      *(_QWORD *)&v138 = v38 + 2;
      if (!v9)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      v146[0] = v9 - 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t *)&v141, (uint64_t *)&v138, (uint64_t *)v146);
      goto LABEL_194;
    }
    if (v40 == 2)
    {
      if (!v9)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      if (!v38)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      if (*((float *)v9 - 3) < *((float *)v38 + 1))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v9 - 2);
      goto LABEL_194;
    }
    if ((char *)v9 - (char *)v38 <= 127)
    {
      if (!v9)
        __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
      while (2)
      {
        if (v38 == v9 - 2)
          goto LABEL_194;
        v115 = v9;
        if (v38 == v9)
        {
LABEL_219:
          if (v115 != v38)
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v115);
          if (!v38)
            __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
        }
        else
        {
          if (!v38)
            __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
          v116 = v38 + 2;
          v115 = v38;
          if (v38 + 2 != v9)
          {
            do
            {
              if (*((float *)v116 + 1) < *((float *)v115 + 1))
                v115 = v116;
              v116 += 2;
            }
            while (v116 != v9);
            goto LABEL_219;
          }
        }
        v38 += 2;
        continue;
      }
    }
    if (!v38)
      __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
    v41 = &v38[2 * (v40 >> 1)];
    v144 = v41;
    v145 = v38;
    if (!v9)
      __assert_rtn("operator--", "vector.hpp", 174, "!!m_ptr");
    v42 = v9 - 2;
    v143 = v9 - 2;
    v43 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>((uint64_t *)&v145, (uint64_t *)&v144, (uint64_t *)&v143);
    v44 = *((float *)v38 + 1);
    v45 = *((float *)v41 + 1);
    if (v44 < v45)
      break;
    v46 = v9 - 4;
    while (v46 != v38)
    {
      v47 = v46;
      v48 = *((float *)v46 + 1);
      v46 -= 2;
      if (v48 < v45)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v38, v47);
        ++v43;
        v42 = v47;
        v39 = (unint64_t)v131;
        goto LABEL_34;
      }
    }
    v59 = v38 + 2;
    if (v44 >= *((float *)v9 - 3))
    {
      v39 = (unint64_t)v131;
      if (v59 == v42)
        goto LABEL_194;
      while (v44 >= *((float *)v59 + 1))
      {
        v59 += 2;
        if (v59 == v42)
          goto LABEL_194;
      }
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v59, v9 - 2);
      v59 += 2;
    }
    else
    {
      v39 = (unint64_t)v131;
    }
    if (v59 == v42)
      goto LABEL_194;
    while (1)
    {
      v61 = *((float *)v38 + 1);
      if (v61 >= *((float *)v59 + 1))
      {
        do
        {
          v56 = v59 + 2;
          v62 = *((float *)v59 + 5);
          v59 += 2;
        }
        while (v61 >= v62);
      }
      else
      {
        v56 = v59;
      }
      do
      {
        v63 = *((float *)v42 - 3);
        v42 -= 2;
      }
      while (v61 < v63);
      if (v56 >= v42)
        break;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v56, v42);
      v59 = v56 + 2;
    }
    if (v39 < (unint64_t)v56)
      goto LABEL_194;
LABEL_85:
    v38 = v56;
    if ((uint64_t *)v39 == v9)
      goto LABEL_194;
  }
LABEL_34:
  if (v38 + 2 >= v42)
  {
    j = 1;
  }
  else
  {
    for (j = 1; ; ++j)
    {
      v50 = *((float *)v41 + 1);
      if (*((float *)&v38[2 * j] + 1) < v50)
      {
        v51 = (float *)&v38[2 * j + 2] + 1;
        do
        {
          ++j;
          v52 = *v51;
          v51 += 4;
        }
        while (v52 < v50);
      }
      v53 = (unint64_t)&v38[2 * j];
      do
      {
        v54 = *((float *)v42 - 3);
        v42 -= 2;
      }
      while (v54 >= v50);
      if (v53 >= (unint64_t)v42)
        break;
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v38[2 * j], v42);
      ++v43;
      if (v41 == (uint64_t *)v53)
        v41 = v42;
      if (!v41)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    v39 = (unint64_t)v131;
  }
  v55 = &v38[2 * j];
  if (v55 != v41)
  {
    if (!v41)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*((float *)v41 + 1) < *((float *)v55 + 1))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(&v38[2 * j], v41);
      ++v43;
    }
  }
  if ((uint64_t *)v39 == v55)
    goto LABEL_194;
  if (v43)
  {
LABEL_54:
    if (v39 >= (unint64_t)v55)
      v56 = v55 + 2;
    else
      v56 = v38;
    if (v39 < (unint64_t)v55)
      v9 = &v38[2 * j];
    goto LABEL_85;
  }
  if (v39 < (unint64_t)v55)
  {
    if (j == 1)
      goto LABEL_194;
    v57 = (float *)v38 + 5;
    v58 = 16 * j - 16;
    while (*v57 >= *(v57 - 4))
    {
      v57 += 4;
      v58 -= 16;
      if (!v58)
        goto LABEL_194;
    }
    goto LABEL_54;
  }
  for (k = v55 + 2; k != v9; k += 2)
  {
    if (*((float *)k + 1) < *((float *)k - 3))
      goto LABEL_54;
  }
LABEL_194:
  if (!v132)
    __assert_rtn("operator++", "vector.hpp", 168, "!!m_ptr");
  v34 = a3[1];
  v37 = a3[3] - v34;
  v16 = a7;
  v15 = a8;
  v19 = a9;
  v17 = a6;
  v21 = a2;
  v11 = a5;
  v32 = v117;
  a1 = v119;
LABEL_196:
  *(_QWORD *)&v141 = *(_QWORD *)a3;
  *((float *)&v141 + 2) = a3[2];
  v138 = *(_OWORD *)a3;
  *((float *)&v141 + 3) = v34 + (float)(v37 * 0.5);
  *((float *)&v138 + 1) = *((float *)&v141 + 3);
LABEL_197:
  v108 = *a1;
  v135 = v131;
  v136 = v108;
  boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v136, &v135, &v141, v32, v11, v17, v16, v15, v19);
  v133 = *v21;
  v134 = v131;
  return (char *)boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::per_level_packets<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>*>> *,false>,boost::geometry::index::detail::rtree::pack<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::expandable_box<boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::default_strategy>>(&v134, &v133, &v138, a4 - v32, v11, v17, v16, v15, v19);
}

void sub_1A178F918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  boost::geometry::index::detail::rtree::subtree_destroyer<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder>::~subtree_destroyer(va);
  _Unwind_Resume(a1);
}

uint64_t *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!result)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (!a2)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<1ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  if (!*a2)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v5 = *a1;
  if (!v5)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v8 = *(float *)(v3 + 4);
  v9 = *a3;
  if (v8 < *(float *)(v5 + 4))
  {
    if (!v9)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*(float *)(v9 + 4) < v8)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v5, (uint64_t *)v9);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v5, (uint64_t *)v3);
    v10 = *a3;
    if (!*a3)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    v11 = *a2;
    if (!*a2)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
LABEL_14:
    if (*(float *)(v10 + 4) < *(float *)(v11 + 4))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v11, (uint64_t *)v10);
      return 2;
    }
    return 1;
  }
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (*(float *)(v9 + 4) < v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>((uint64_t *)v3, (uint64_t *)v9);
    v10 = *a2;
    if (!*a2)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    v11 = *a1;
    if (!*a1)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    goto LABEL_14;
  }
  return 0;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::pack_utils::point_entries_comparer<0ul> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false>>(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t *v5;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v3 = *a2;
  if (!*a2)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v5 = *a1;
  if (!v5)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  v8 = *(float *)v3;
  v9 = *a3;
  if (*(float *)v3 < *(float *)v5)
  {
    if (!v9)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    if (*(float *)v9 < v8)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v5, v9);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v5, v3);
    v10 = *a3;
    if (!*a3)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    v11 = *a2;
    if (!*a2)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
LABEL_14:
    if (*(float *)v10 < *(float *)v11)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v11, v10);
      return 2;
    }
    return 1;
  }
  if (!v9)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  if (*(float *)v9 < v8)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &,boost::container::vec_iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,std::__wrap_iter<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> *>> *,false> &>(v3, v9);
    v10 = *a2;
    if (!*a2)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    v11 = *a1;
    if (!*a1)
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    goto LABEL_14;
  }
  return 0;
}

uint64_t boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::runtime_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E45A1400;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 24) = &unk_1E45A1480;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E45A1038;
  *(_QWORD *)(v2 + 8) = &unk_1E45A1068;
  *(_QWORD *)(v2 + 24) = &unk_1E45A1090;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1A178FED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1A1B0C908](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::runtime_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::runtime_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1A178FF54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1A1B0C908);
}

void `non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1A1B0C908);
}

void `non-virtual thunk to'boost::wrapexcept<std::runtime_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  *a1 = &unk_1E45A1480;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::wrapexcept<std::runtime_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E45A1400;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E45A1480;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E45A1038;
  *(_QWORD *)(a1 + 8) = &unk_1E45A1068;
  *(_QWORD *)(a1 + 24) = &unk_1E45A1090;
  return a1;
}

void sub_1A179014C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t pf::TimezoneArchiveLineParser::timeZoneNameIndex(pf::TimezoneArchiveLineParser *this, char *a2)
{
  unint64_t v2;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unint64_t v19;
  unsigned __int8 **v20;
  unsigned __int8 *j;
  unint64_t v22;
  char *v23;
  std::string *v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v54;
  void *v55[2];
  uint64_t v56;
  uint64_t v57;
  void *__p[2];
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v55, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  v6 = *(int8x8_t *)((char *)this + 120);
  if (!*(_QWORD *)&v6)
    goto LABEL_18;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v2 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v9 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v9 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v10 = *(uint64_t ***)(*((_QWORD *)this + 14) + 8 * v9);
  if (v10)
  {
    for (i = *v10; i; i = (uint64_t *)*i)
    {
      v12 = i[1];
      if (v12 == v7)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
          break;
      }
      else
      {
        if (v2 > 1)
        {
          if (v12 >= *(_QWORD *)&v6)
            v12 %= *(_QWORD *)&v6;
        }
        else
        {
          v12 &= *(_QWORD *)&v6 - 1;
        }
        if (v12 != v9)
          goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    i = 0;
  }
  if (v59 < 0)
  {
    operator delete(__p[0]);
    if (i)
      goto LABEL_21;
  }
  else if (i)
  {
LABEL_21:
    v13 = *((_WORD *)i + 20);
    goto LABEL_111;
  }
  v14 = *((_QWORD *)this + 10);
  v13 = *(_WORD *)(v14 + 16);
  v15 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v55);
  v16 = v15;
  v17 = *((_QWORD *)this + 15);
  if (v17)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.u32[0];
    if (v18.u32[0] > 1uLL)
    {
      v2 = v15;
      if (v15 >= v17)
        v2 = v15 % v17;
    }
    else
    {
      v2 = (v17 - 1) & v15;
    }
    v20 = *(unsigned __int8 ***)(*((_QWORD *)this + 14) + 8 * v2);
    if (v20)
    {
      for (j = *v20; j; j = *(unsigned __int8 **)j)
      {
        v22 = *((_QWORD *)j + 1);
        if (v22 == v16)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)v55))
            goto LABEL_99;
        }
        else
        {
          if (v19 > 1)
          {
            if (v22 >= v17)
              v22 %= v17;
          }
          else
          {
            v22 &= v17 - 1;
          }
          if (v22 != v2)
            break;
        }
      }
    }
  }
  v23 = (char *)operator new(0x30uLL);
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = v16;
  v24 = (std::string *)(v23 + 16);
  if (SHIBYTE(v56) < 0)
  {
    std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v55[0], (std::string::size_type)v55[1]);
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)v55;
    *((_QWORD *)v23 + 4) = v56;
  }
  v25 = (_QWORD *)((char *)this + 128);
  *((_WORD *)v23 + 20) = v13;
  v26 = (float)(unint64_t)(*((_QWORD *)this + 17) + 1);
  v27 = *((float *)this + 36);
  if (!v17 || (float)(v27 * (float)v17) < v26)
  {
    v28 = 1;
    if (v17 >= 3)
      v28 = (v17 & (v17 - 1)) != 0;
    v29 = v28 | (2 * v17);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = (int8x8_t)v30;
    else
      prime = (int8x8_t)v29;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v17 = *((_QWORD *)this + 15);
    if (*(_QWORD *)&prime > v17)
      goto LABEL_55;
    if (*(_QWORD *)&prime < v17)
    {
      v38 = vcvtps_u32_f32((float)*((unint64_t *)this + 17) / *((float *)this + 36));
      if (v17 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (*(_QWORD *)&prime <= v38)
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime >= v17)
      {
        v17 = *((_QWORD *)this + 15);
      }
      else
      {
        if (prime)
        {
LABEL_55:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * *(_QWORD *)&prime);
          v33 = (void *)*((_QWORD *)this + 14);
          *((_QWORD *)this + 14) = v32;
          if (v33)
            operator delete(v33);
          v34 = 0;
          *((int8x8_t *)this + 15) = prime;
          do
            *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v34++) = 0;
          while (*(_QWORD *)&prime != v34);
          v35 = (_QWORD *)*v25;
          if (*v25)
          {
            v36 = v35[1];
            v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&prime)
                v36 %= *(_QWORD *)&prime;
            }
            else
            {
              v36 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v36) = v25;
            v41 = (_QWORD *)*v35;
            if (*v35)
            {
              do
              {
                v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(_QWORD *)&prime)
                    v42 %= *(_QWORD *)&prime;
                }
                else
                {
                  v42 &= *(_QWORD *)&prime - 1;
                }
                if (v42 != v36)
                {
                  v43 = *((_QWORD *)this + 14);
                  if (!*(_QWORD *)(v43 + 8 * v42))
                  {
                    *(_QWORD *)(v43 + 8 * v42) = v35;
                    goto LABEL_80;
                  }
                  *v35 = *v41;
                  *v41 = **(_QWORD **)(*((_QWORD *)this + 14) + 8 * v42);
                  **(_QWORD **)(*((_QWORD *)this + 14) + 8 * v42) = v41;
                  v41 = v35;
                }
                v42 = v36;
LABEL_80:
                v35 = v41;
                v41 = (_QWORD *)*v41;
                v36 = v42;
              }
              while (v41);
            }
          }
          v17 = (unint64_t)prime;
          goto LABEL_84;
        }
        v54 = (void *)*((_QWORD *)this + 14);
        *((_QWORD *)this + 14) = 0;
        if (v54)
          operator delete(v54);
        v17 = 0;
        *((_QWORD *)this + 15) = 0;
      }
    }
LABEL_84:
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17)
        v2 = v16 % v17;
      else
        v2 = v16;
    }
    else
    {
      v2 = (v17 - 1) & v16;
    }
  }
  v44 = *((_QWORD *)this + 14);
  v45 = *(_QWORD **)(v44 + 8 * v2);
  if (v45)
  {
    *(_QWORD *)v23 = *v45;
  }
  else
  {
    *(_QWORD *)v23 = *v25;
    *v25 = v23;
    *(_QWORD *)(v44 + 8 * v2) = v25;
    if (!*(_QWORD *)v23)
      goto LABEL_98;
    v46 = *(_QWORD *)(*(_QWORD *)v23 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v46 >= v17)
        v46 %= v17;
    }
    else
    {
      v46 &= v17 - 1;
    }
    v45 = (_QWORD *)(*((_QWORD *)this + 14) + 8 * v46);
  }
  *v45 = v23;
LABEL_98:
  ++*((_QWORD *)this + 17);
  v14 = *((_QWORD *)this + 10);
LABEL_99:
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)__p, a2, (_QWORD *)this + 19);
  v47 = *(_QWORD *)(v14 + 8);
  if (v47 == 1)
    v48 = 0;
  else
    v48 = v47 + v14 + 8;
  v49 = *(_QWORD *)(v14 + 16);
  v50 = v48 + 32 * v49;
  if (v49 == *(_QWORD *)(v14 + 24))
  {
    boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>*,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v57, v14, v50, (uint64_t)__p);
    boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,long,unsigned long,0ul>,false>::operator*(v57);
  }
  else
  {
    if (v48)
      v51 = v50 - (_QWORD)&v57;
    else
      v51 = 1;
    v57 = v51;
    if (v51 == 1)
      v52 = 0;
    else
      v52 = (char *)&__p[-1] + v51;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v52, (uint64_t)__p);
    ++*(_QWORD *)(v14 + 16);
  }
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)__p);
LABEL_111:
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  return v13;
}

void sub_1A1790738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>*,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int64_t v62;
  __int8 *v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  int64_t v138;
  uint64_t v139;
  _BYTE *v140;
  int v141;
  const char *v142;
  int v143;
  const char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  _BYTE v164[8];
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int64x2_t v176;
  uint64_t v177;
  _QWORD v178[2];
  uint64_t vars0;

  v5 = (char *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != *(_QWORD *)(a2 + 16))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (*(_QWORD *)a2 == 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 + a2;
  v9 = *(_QWORD *)(v8 + 48) >> 5;
  if (v9 == v6)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  if (v6 >> 61 > 4)
    v13 = -1;
  else
    v13 = 8 * v6;
  if (v6 >> 61)
    v14 = v13;
  else
    v14 = 8 * v6 / 5;
  v15 = v6 + 1;
  if (v14 < v9)
    v9 = v14;
  if (v15 > v9)
    v16 = v6 + 1;
  else
    v16 = v9;
  v17 = v5 - (char *)&v166;
  if (v4 == 1)
    v17 = 0;
  v166 = v17 + v4;
  v167 = v16;
  boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v165, (_QWORD *)a2, v15, &v167, &v166);
  if (v166 == 1)
  {
    v161 = v4;
    if (v165 == 1)
      v18 = 0;
    else
      v18 = (char *)&v165 + v165;
    v19 = v18 - (char *)&v174;
    if (!v18)
      v19 = 1;
    v20 = v18 - (char *)&v175;
    if (!v18)
      v20 = 1;
    v21 = v18 - (char *)&v168;
    if (!v18)
      v21 = 1;
    v22 = (char *)&v168 - (char *)&v169;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    v64 = v23 == 1;
    v159 = v5;
    v25 = &v5[v23];
    if (v64)
      v26 = 0;
    else
      v26 = (uint64_t)v25;
    if (v21 == 1)
      v22 = 0;
    v168 = v21;
    v169 = v22 + v21;
    v170 = a2;
    v171 = v167;
    v155 = v167;
    v27 = v26 + 32 * v24;
    v174 = v19;
    v175 = v20;
    v28 = (char *)&v175 - (char *)&v176;
    if (v20 == 1)
      v28 = 0;
    v29 = v28 + v20;
    v30 = (char *)&v174 - (char *)&v176.u64[1];
    if (v19 == 1)
      v30 = 0;
    v176.i64[0] = v29;
    v176.i64[1] = v30 + v19;
    v177 = a2;
    if (v26 == a3)
    {
      v33 = v18;
    }
    else
    {
      v153 = a1;
      v31 = v18 - (char *)v178;
      v32 = v26;
      v33 = v18;
      do
      {
        if (v33)
          v34 = v31;
        else
          v34 = 1;
        v178[0] = v34;
        if (v34 == 1)
          v35 = 0;
        else
          v35 = (char *)v178 + v34;
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v35, v32);
        v32 += 32;
        v33 += 32;
        v31 += 32;
      }
      while (v32 != a3);
      a1 = v153;
    }
    v53 = v33 - (char *)&v173;
    v54 = (char *)&v173 - (char *)&v176.u64[1];
    v55 = v33 - (char *)v178;
    if (!v33)
      v53 = 1;
    v173 = v53;
    if (!v33)
      v55 = 1;
    if (v53 == 1)
      v54 = 0;
    v176.i64[1] = v54 + v53;
    v178[0] = v55;
    if (v55 == 1)
      v56 = 0;
    else
      v56 = (char *)v178 + v55;
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v56, a4);
    v172 = v33 - (char *)&v172 + 32;
    v57 = (char *)&v172 - (char *)&v176.u64[1];
    if (v33 - (char *)&v172 == -31)
      v57 = 0;
    v176.i64[1] = v57 + v33 - (char *)&v172 + 32;
    if (v27 != a3)
    {
      v58 = v33 + 32;
      v59 = 96 - (_QWORD)&vars0;
      v60 = a3;
      do
      {
        v178[0] = &v58[v59];
        if (&v58[v59] == (char *)1)
          v61 = 0;
        else
          v61 = v58;
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v61, v60);
        v60 += 32;
        v58 += 32;
      }
      while (v60 != v27);
    }
    v176 = vdupq_n_s64(1uLL);
    boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(v176.i64);
    v169 = 1;
    v5 = v159;
    if (v26)
    {
      v62 = v159 - (char *)&v176;
      if (*(_QWORD *)v159 == 1)
        v62 = 0;
      v176.i64[0] = v62 + *(_QWORD *)v159;
      v63 = &v176.i8[v176.i64[0]];
      v64 = v176.i64[0] == 1 || v63 == 0;
      if (!v64)
      {
        if (*(_QWORD *)a2 == 1)
          v65 = 0;
        else
          v65 = (char *)(*(_QWORD *)a2 + a2);
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v65, (uint64_t)v63);
      }
    }
    v66 = v18 - (char *)&v176;
    if (!v18)
      v66 = 1;
    v67 = (char *)((char *)&v176 - v159);
    if (v66 == 1)
      v67 = 0;
    v68 = &v67[v66];
    v69 = *(_QWORD *)(a2 + 16) + 1;
    *(_QWORD *)(a2 + 8) = v68;
    *(_QWORD *)(a2 + 16) = v69;
    *(_QWORD *)(a2 + 24) = v155;
    result = (uint64_t)boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&v169);
    v4 = v161;
    goto LABEL_233;
  }
  if (*(_QWORD *)v5 == 1)
    v36 = 0;
  else
    v36 = (uint64_t)&v5[*(_QWORD *)v5];
  if (v165 == 1)
    v37 = 0;
  else
    v37 = (char *)&v165 + v165;
  v38 = v167;
  v39 = v36 - (_QWORD)v37;
  if ((char *)v36 != v37)
  {
    v40 = *(_QWORD *)(a2 + 16);
    v41 = v36 + 32 * v40;
    v42 = v37 - (char *)&v176;
    if (!v37)
      v42 = 1;
    v43 = (char *)((char *)&v176 - v5);
    if (v42 == 1)
      v43 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v38;
    *(_QWORD *)(a2 + 8) = &v43[v42];
    v44 = (a3 - v36) >> 5;
    v45 = v39 >> 5;
    v46 = v36 - (_QWORD)&v175;
    if (!v36)
      v46 = 1;
    v47 = -8;
    if (v46 == 1)
      v47 = 0;
    v175 = v46;
    v176.i64[0] = v47 + v46;
    v176.i64[1] = a2;
    v177 = v40;
    v156 = v39 >> 5;
    v157 = a4;
    v160 = v5;
    v162 = v4;
    v151 = v40;
    if (v45 >= v44 + 1)
    {
      v147 = v44 + 1;
      v150 = (a3 - v36) >> 5;
      if (v36 == a3)
      {
        v79 = v37;
      }
      else
      {
        v77 = v37 - (char *)&v169;
        v78 = v36;
        v79 = v37;
        do
        {
          if (v79)
            v80 = v77;
          else
            v80 = 1;
          v169 = v80;
          if (v80 == 1)
            v81 = 0;
          else
            v81 = (char *)&v169 + v80;
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v81, v78);
          v78 += 32;
          v79 += 32;
          v77 += 32;
        }
        while (v78 != a3);
      }
      *(_QWORD *)(a2 + 16) = v150;
      v95 = v79 - (char *)&v169;
      if (!v79)
        v95 = 1;
      v169 = v95;
      if (v95 == 1)
        v96 = 0;
      else
        v96 = (char *)&v169 + v95;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v96, v157);
      *(_QWORD *)(a2 + 16) = v147;
      v97 = v151 + 1;
      if (v151 + 1 <= v156)
      {
        if (v151 != v150)
        {
          if (v41 != a3)
          {
            v106 = &v37[32 * v147];
            v107 = &v37[32 * v150] - (char *)&v169 + 32;
            v108 = a3;
            do
            {
              if (v106)
                v109 = v107;
              else
                v109 = 1;
              v169 = v109;
              if (v109 == 1)
                v110 = 0;
              else
                v110 = (char *)&v169 + v109;
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v110, v108);
              v108 += 32;
              v106 += 32;
              v107 += 32;
            }
            while (v108 != v41);
          }
          *(_QWORD *)(a2 + 16) = v97;
        }
        v176.i64[0] = 1;
        v177 = 0;
        v4 = v162;
      }
      else
      {
        v152 = v151 + 1 - v156;
        v158 = v97;
        if (v156 != v147)
        {
          v98 = &v37[32 * v147];
          v99 = v150 - v156 + 1;
          v100 = &v37[32 * v150] - (char *)&v169 + 32;
          v101 = a3;
          do
          {
            if (v98)
              v102 = v100;
            else
              v102 = 1;
            v169 = v102;
            if (v102 == 1)
              v103 = 0;
            else
              v103 = (char *)&v169 + v102;
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v103, v101);
            v101 += 32;
            v98 += 32;
            v100 += 32;
          }
          while (!__CFADD__(v99++, 1));
        }
        v177 -= v152;
        v176.i64[0] += 32 * v152;
        v5 = v160;
        *(_QWORD *)(a2 + 16) = v158;
        v105 = a3 + 32 * (v156 - v147);
        v4 = v162;
        if (v105 != v36)
        {
          while (v105 != v41)
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v36, v105);
            v105 += 32;
            v36 += 32;
          }
        }
        v176.i64[0] = 1;
        v177 = 0;
      }
      goto LABEL_232;
    }
    v154 = a1;
    v145 = v36 - (_QWORD)v37;
    if (v45 <= v44)
    {
      if ((char *)v36 != v37)
      {
        v82 = v37 - (char *)&v169;
        v83 = v39 >> 5;
        v84 = v36;
        v85 = v37;
        do
        {
          --v83;
          if (v85)
            v86 = v82;
          else
            v86 = 1;
          v169 = v86;
          if (v86 == 1)
            v87 = 0;
          else
            v87 = (char *)&v169 + v86;
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v87, v84);
          v84 += 32;
          v85 += 32;
          v82 += 32;
        }
        while (v83);
      }
      v176.i64[0] = 1;
      v177 = 0;
      v88 = v151;
      if ((char *)v36 != v37)
        v88 = v151 + 1;
      *(_QWORD *)(a2 + 16) = v88;
      if (v36 + 32 * v156 == a3)
      {
        v90 = v36;
        a1 = v154;
        v91 = v157;
        v92 = v36 - (_QWORD)v37;
      }
      else
      {
        v89 = 32 * v156;
        v90 = v36;
        a1 = v154;
        v91 = v157;
        v92 = v36 - (_QWORD)v37;
        do
          v90 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v90, v90 + v89)+ 32;
        while (v90 + v89 != a3);
      }
      v5 = v160;
      if ((char *)v36 == v37)
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
      v130 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v90, v91);
      if (v92 >= 0x40 && v41 != a3)
      {
        v131 = v130 + 32;
        v132 = a3;
        do
        {
          v133 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v131, v132);
          v132 += 32;
          v131 = v133 + 32;
        }
        while (v132 != v41);
      }
      goto LABEL_232;
    }
    v146 = v45 - v44;
    v149 = (a3 - v36) >> 5;
    if (v36 == a3)
    {
      v50 = v37;
    }
    else
    {
      v48 = v37 - (char *)&v169;
      v49 = v36;
      v50 = v37;
      do
      {
        if (v50)
          v51 = v48;
        else
          v51 = 1;
        v169 = v51;
        if (v51 == 1)
          v52 = 0;
        else
          v52 = (char *)&v169 + v51;
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v52, v49);
        v49 += 32;
        v50 += 32;
        v48 += 32;
      }
      while (v49 != a3);
    }
    *(_QWORD *)(a2 + 16) = v149;
    if (v146 == 1)
    {
      v111 = v50 - (char *)&v169;
      if (!v50)
        v111 = 1;
      v169 = v111;
      if (v111 == 1)
        v112 = 0;
      else
        v112 = (char *)&v169 + v111;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v112, v157);
      *(_QWORD *)(a2 + 16) = v156 + v151;
      v176.i64[0] = 1;
      v177 = 0;
      if ((char *)v36 != v37)
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
      if (a3 - v36 == 32)
      {
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v36, v157);
        v148 = 1 - v156;
        v113 = 1 - v156 - (v151 - v149);
        if (1 - v156 > v151 - v149)
        {
          if (v41 != a3)
          {
            v114 = v41 + 32 * v113;
            v115 = v36 + 32 * v149 - (_QWORD)&v169 - 32 * v156 + 32;
            v116 = a3;
            do
            {
              if (v114)
                v117 = v115;
              else
                v117 = 1;
              v169 = v117;
              if (v117 == 1)
                v118 = 0;
              else
                v118 = (char *)&v169 + v117;
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v118, v116);
              v116 += 32;
              v114 += 32;
              v115 += 32;
            }
            while (v116 != v41);
          }
          a1 = v154;
          v119 = v41 + 32 * v113 - (_QWORD)&v174;
          if (!v36)
            v119 = 1;
          v174 = v119;
          v120 = (char *)&v174 - (char *)&v169;
          if (v119 == 1)
            v120 = 0;
          v169 = v120 + v119;
          v170 = a2;
          v171 = (v41 - a3) >> 5;
          if (v151 - v149 == 1)
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v157);
            v4 = v162;
            if (v113 == 1)
            {
              v121 = v41 - (_QWORD)v178;
              if (!v36)
                v121 = 1;
              v178[0] = v121;
              if (v121 == 1)
                v122 = 0;
              else
                v122 = (char *)v178 + v121;
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v122, v157);
              *(_QWORD *)(a2 + 16) += v148;
              v169 = 1;
              v171 = 0;
              boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v169);
              v5 = v160;
LABEL_232:
              result = (uint64_t)boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v176);
              goto LABEL_233;
            }
            v143 = 209;
            v144 = "uninitialized_copy_n_and_update";
          }
          else
          {
            v143 = 215;
            v144 = "copy_n_and_update";
          }
          __assert_rtn(v144, "advanced_insert_int.hpp", v143, "n == 1");
        }
        v123 = v41 + 32 * v156;
        v124 = v123 - 32;
        if (v145 != 32)
        {
          v125 = 0;
          do
          {
            v126 = v36 + 32 * v151 - (_QWORD)&v169 + v125;
            if (!(v41 + v125))
              v126 = 1;
            v169 = v126;
            if (v126 == 1)
              v127 = 0;
            else
              v127 = (char *)&v169 + v126;
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v127, v123 + v125 - 32);
            v125 += 32;
          }
          while (32 * v156 + v125 != 32);
        }
        *(_QWORD *)(a2 + 16) += v148;
        v5 = v160;
        v4 = v162;
        if (v124 != a3)
        {
          v128 = v36 + 32 * v151 - 32;
          v129 = 32 * v156;
          do
            v128 = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v128, v128 + v129 - 32)- 32;
          while (v128 + v129 != a3);
        }
        boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v157);
        goto LABEL_232;
      }
      v141 = 215;
      v142 = "copy_n_and_update";
    }
    else
    {
      v141 = 209;
      v142 = "uninitialized_copy_n_and_update";
    }
    __assert_rtn(v142, "advanced_insert_int.hpp", v141, "n == 1");
  }
  *(_QWORD *)(a2 + 24) = v167;
  v71 = *(_QWORD *)(a2 + 16);
  if (v71 == v38)
    __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
  v72 = v36 + 32 * v71;
  if (v72 == a3)
  {
    v93 = a3 - (_QWORD)&v176;
    if (!v36)
      v93 = 1;
    v176.i64[0] = v93;
    if (v93 == 1)
      v94 = 0;
    else
      v94 = &v176.i8[v93];
    result = (uint64_t)boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v94, a4);
    ++*(_QWORD *)(a2 + 16);
  }
  else
  {
    v73 = a4;
    v74 = v72 - 32;
    v75 = v72 - (_QWORD)&v176;
    if (!v36)
      v75 = 1;
    v176.i64[0] = v75;
    if (v75 == 1)
      v76 = 0;
    else
      v76 = &v176.i8[v75];
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v76, v74);
    ++*(_QWORD *)(a2 + 16);
    for (; v74 != a3; v74 -= 32)
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v74, v74 - 32);
    result = boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(a3, v73);
  }
LABEL_233:
  v134 = &v5[v4];
  if (v4 == 1)
    v134 = 0;
  v135 = a3 - (_QWORD)v134;
  v136 = v5 - &v163;
  if (*(_QWORD *)v5 == 1)
    v136 = 0;
  v137 = *(_QWORD *)v5 + v135 + v136;
  v138 = &v163 - v164;
  if (v137 == 1)
    v138 = 0;
  v139 = v138 + v137;
  v140 = (_BYTE *)(v164 - (_BYTE *)a1);
  if (v139 == 1)
    v140 = 0;
  *a1 = &v140[v139];
  return result;
}

void sub_1A1791484(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

char *boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(char *a1, _QWORD *a2, unint64_t a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *result;
  uint64_t v14;
  uint64_t v15;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v17;
  uint64_t v18;
  unint64_t v19;

  if (*a5 == 1)
    v6 = 0;
  else
    v6 = (uint64_t)a5 + *a5;
  if (*a2 == 1)
    v7 = 0;
  else
    v7 = (uint64_t)a2 + *a2;
  v18 = v6;
  v8 = *a4;
  v9 = *(_QWORD *)(v7 + 48) >> 5;
  if (v9 < a3 || v8 > v9)
    goto LABEL_18;
  v19 = 32 * v8;
  result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v7, 23, 32 * a3, &v19, &v18, 0x20uLL);
  *a4 = v19 >> 5;
  if ((result & 7) != 0)
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  if (!result)
  {
LABEL_18:
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v17 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v17 = &off_1E45A10D8;
  }
  v14 = v18;
  *(_QWORD *)a1 = result - a1;
  if (v14)
    v15 = v14 - (_QWORD)a5;
  else
    v15 = 1;
  *a5 = v15;
  return result;
}

_QWORD *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    v4 = (uint64_t *)a1[1];
    v5 = *v4;
    v6 = (char *)v4 + *v4;
    if (v5 == 1)
      v7 = 0;
    else
      v7 = v6;
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = a1 + 1;
  v2 = a1[1];
  if (*a1 == 1)
    v4 = 0;
  else
    v4 = (char *)a1 + *a1;
  if (v2 == 1)
    v5 = 0;
  else
    v5 = (char *)v3 + v2;
  if (v4 != v5)
  {
    do
    {
      if (v4)
        v6 = v4 - (char *)&v11;
      else
        v6 = 1;
      v11 = v6;
      boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v11);
      v7 = a1[1];
      v8 = *a1 + 32;
      *a1 = v8;
      if (v8 == 1)
        v4 = 0;
      else
        v4 = (char *)a1 + v8;
      if (v7 == 1)
        v9 = 0;
      else
        v9 = (char *)v3 + v7;
    }
    while (v4 != v9);
  }
  return a1;
}

uint64_t boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = (uint64_t)a1 + *a1;
  if (v1 == 1 || v2 == 0)
    __assert_rtn("destroy", "allocator.hpp", 269, "ptr != 0");
  return boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v2);
}

uint64_t boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[8];

  if (a1 != a2)
  {
    if (*(_QWORD *)a1 == 1)
      v3 = 0;
    else
      v3 = *(_QWORD *)a1 + a1;
    if (*(_QWORD *)a2 == 1)
      v4 = 0;
    else
      v4 = *(_QWORD *)a2 + a2;
    if (v3 == v4)
    {
      if ((*(_BYTE *)(a1 + 8) & 1) != 0)
      {
        v20 = (_BYTE *)(a1 + 9);
        if (a1 + 9 - (_QWORD)v25 == 1)
          v20 = 0;
        *v20 = 0;
        *(_BYTE *)(a1 + 8) &= 1u;
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 24);
        v16 = a1 - (_QWORD)&v22;
        if (v15 == 1)
          v16 = 0;
        v17 = v16 + v15;
        if (v17 == 1)
          v18 = 0;
        else
          v18 = &v25[v17];
        *v18 = 0;
        *(_QWORD *)(a1 + 8) &= 1uLL;
      }
      boost::container::dtl::basic_string_base<boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::swap_data((char *)a1, (_QWORD *)a2);
    }
    else
    {
      v5 = *(unsigned __int8 *)(a2 + 8);
      if ((v5 & 1) != 0)
      {
        v13 = a2 + 9 - (_QWORD)&v23;
        v10 = v25;
        v14 = a2 + 9 - (_QWORD)v25 + (v5 >> 1);
      }
      else
      {
        v8 = *(_QWORD *)(a2 + 24);
        v6 = a2 + 24;
        v7 = v8;
        v9 = v6 - (_QWORD)&v23;
        v10 = &v24;
        v11 = v6 - (_QWORD)&v24;
        v12 = v8 == 1;
        if (v8 == 1)
          v9 = 0;
        v13 = v9 + v7;
        if (v12)
          v11 = 0;
        v14 = v11 + v7 + (*(_QWORD *)(v6 - 16) >> 1);
      }
      v23 = v13;
      v19 = v10 - (char *)&v22;
      if (v14 == 1)
        v19 = 0;
      v22 = v19 + v14;
      boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::assign<boost::interprocess::offset_ptr<char,long,unsigned long,0ul>>(a1, &v23, (char *)&v22);
    }
  }
  return a1;
}

_QWORD *boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[2];
  if (v2)
  {
    if (*a1 == 1)
      v3 = 0;
    else
      v3 = (char *)a1 + *a1;
    v4 = v3 - (char *)&v7;
    do
    {
      a1[2] = v2 - 1;
      if (v3)
        v5 = v4;
      else
        v5 = 1;
      v7 = v5;
      boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v7);
      v3 += 32;
      v2 = a1[2];
      v4 += 32;
    }
    while (v2);
  }
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned short>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1A1792B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_1A17930E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p)
{
  if (__p)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);

  _Unwind_Resume(a1);
}

void sub_1A17931F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1A1793618(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v15;
  uint64_t v16;

  std::unique_ptr<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::reset[abi:ne180100]((uint64_t *)&buf);
  if (a2 == 1)
  {
    v15 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error reading timezone index: %s.", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1A17933C8);
  }
  _Unwind_Resume(a1);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::destroy_n(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  char *v15;
  unint64_t v16;
  uint64_t v17;

  *a4 = 0;
  if (a3)
  {
    do
    {
      v7 = (char *)(a2 + 1);
      v8 = a2[2];
      if (v8)
      {
        if (*(_QWORD *)v7 == 1)
          v9 = 0;
        else
          v9 = &v7[*(_QWORD *)v7];
        v10 = v9 - (char *)&v17;
        do
        {
          if (v9)
            v11 = v10;
          else
            v11 = 1;
          v17 = v11;
          boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v17);
          v9 += 32;
          v10 += 32;
          --v8;
        }
        while (v8);
      }
      if (a2[3])
      {
        v12 = v7 - (char *)&v17;
        if (*(_QWORD *)v7 == 1)
          v12 = 0;
        v17 = v12 + *(_QWORD *)v7;
        v13 = (char *)&v17 + v17;
        if (v17 != 1 && v13 != 0)
        {
          if (*a2 == 1)
            v15 = 0;
          else
            v15 = (char *)a2 + *a2;
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
        }
      }
      a2 += 4;
      v16 = *a4 + 1;
      *a4 = v16;
    }
    while (v16 < a3);
  }
}

void boost::interprocess::ipcdetail::placement_destroy<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>>::~placement_destroy()
{
  JUMPOUT(0x1A1B0C908);
}

pf::TimezoneArchiveLineParser *pf::TimezoneArchiveLineParser::TimezoneArchiveLineParser(pf::TimezoneArchiveLineParser *this, const char *a2, const char *a3, size_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  int64_t v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD v93[3];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];

  *(_QWORD *)this = &off_1E45A0F90;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  v7 = (uint64_t *)((char *)this + 40);
  *(_WORD *)v86 = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 40, a2, 0xA00000uLL, (mode_t *)v86);
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 36) = 1065353216;
  v8 = *((_QWORD *)this + 5);
  v9 = v8 - ((_QWORD)this + 152);
  if (!v8)
    v9 = 1;
  *((_QWORD *)this + 19) = v9;
  v10 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v8, a4 + 8);
  *((_QWORD *)this + 2) = v10;
  *((_QWORD *)this + 4) = &v10[a4];
  memcpy(v10, a3, a4);
  v11 = (char *)*((_QWORD *)this + 11);
  if ((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 13) - (_QWORD)v11) >> 2)) >> 5 <= 0x36A)
  {
    v12 = (char *)*((_QWORD *)this + 12);
    v13 = (char *)operator new(0x52080uLL);
    v14 = &v13[12 * ((v12 - v11) / 12)];
    v15 = v14;
    if (v12 != v11)
    {
      v15 = &v13[12 * ((v12 - v11) / 12)];
      do
      {
        v16 = *(_QWORD *)(v12 - 12);
        v12 -= 12;
        v17 = *((_DWORD *)v12 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v12 != v11);
    }
    *((_QWORD *)this + 11) = v15;
    *((_QWORD *)this + 12) = v14;
    *((_QWORD *)this + 13) = v13 + 336000;
    if (v11)
      operator delete(v11);
  }
  v18 = *v7;
  if (*v7)
    v19 = *v7 - (_QWORD)&v85;
  else
    v19 = 1;
  *(_OWORD *)&v86[8] = xmmword_1A17B6C50;
  v85 = v19;
  *(_QWORD *)v86 = off_1E45A12E0;
  v87 = 0x80000001A17B8193 & 0x7FFFFFFFFFFFFFFFLL;
  v88 = &v85;
  v20 = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v18, "timezones", (uint64_t)v86);
  v21 = v20;
  *((_QWORD *)this + 10) = v20;
  if (*((_QWORD *)v20 + 3) <= 0x16BuLL)
  {
    v23 = v20 + 8;
    v22 = *((_QWORD *)v20 + 1);
    v24 = v20 + 8 - (char *)&v90;
    if (v22 == 1)
      v24 = 0;
    v90 = v24 + v22;
    v91 = 364;
    boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command((char *)&v89, v20, 0x16CuLL, &v91, &v90);
    v25 = *(_QWORD *)v23;
    if (v90 == 1)
    {
      if (v89 == 1)
        v26 = 0;
      else
        v26 = (char *)&v89 + v89;
      v27 = v26 - (char *)&v95;
      if (!v26)
        v27 = 1;
      v28 = v26 - (char *)&v96;
      if (!v26)
        v28 = 1;
      v29 = v26 - (char *)&v92;
      if (!v26)
        v29 = 1;
      if (v25 == 1)
        v30 = 0;
      else
        v30 = (uint64_t)&v23[v25];
      v31 = v21[2];
      v32 = v91;
      v33 = (char *)&v92 - (char *)v93;
      if (v29 == 1)
        v33 = 0;
      v92 = v29;
      v93[0] = v33 + v29;
      v93[1] = v21;
      v93[2] = v91;
      v95 = v27;
      v96 = v28;
      v34 = (char *)&v96 - v86;
      if (v28 == 1)
        v34 = 0;
      v35 = v34 + v28;
      v36 = (char *)&v95 - &v86[8];
      if (v27 == 1)
        v36 = 0;
      *(_QWORD *)v86 = v35;
      *(_QWORD *)&v86[8] = v36 + v27;
      *(_QWORD *)&v86[16] = v21;
      v83 = v30;
      if (v31)
      {
        v81 = v91;
        v37 = 32 * v31;
        v38 = v26 - (char *)v97;
        v39 = v26;
        do
        {
          if (v39)
            v40 = v38;
          else
            v40 = 1;
          v97[0] = v40;
          if (v40 == 1)
            v41 = 0;
          else
            v41 = (char *)v97 + v40;
          boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v41, v30);
          v30 += 32;
          v39 += 32;
          v38 += 32;
          v37 -= 32;
        }
        while (v37);
        v97[0] = v39 - (char *)v97;
        v42 = v39 - (char *)&v94;
        v32 = v81;
      }
      else
      {
        if (!v26)
        {
          v97[0] = 1;
          v94 = 1;
          goto LABEL_107;
        }
        v97[0] = v26 - (char *)v97;
        v42 = v26 - (char *)&v94;
      }
      v94 = v42;
LABEL_107:
      *(int64x2_t *)v86 = vdupq_n_s64(1uLL);
      boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range((uint64_t *)v86);
      v93[0] = 1;
      if (v83)
      {
        v72 = v23 - v86;
        if (*(_QWORD *)v23 == 1)
          v72 = 0;
        v73 = v72 + *(_QWORD *)v23;
        *(_QWORD *)v86 = v73;
        if (v73 != 1 && &v86[v73])
        {
          if (*v21 == 1)
            v74 = 0;
          else
            v74 = (char *)v21 + *v21;
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v74, (uint64_t)&v86[v73]);
        }
      }
      v75 = v26 - v86;
      if (!v26)
        v75 = 1;
      v76 = (_BYTE *)(v86 - v23);
      if (v75 == 1)
        v76 = 0;
      v21[1] = &v76[v75];
      v21[3] = v32;
      boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v93);
      return this;
    }
    if (v25 == 1)
      v43 = 0;
    else
      v43 = (uint64_t)&v23[v25];
    if (v89 == 1)
      v44 = 0;
    else
      v44 = (char *)&v89 + v89;
    if ((char *)v43 == v44)
    {
      v21[3] = v91;
    }
    else
    {
      v45 = v21[2];
      v46 = 32 * v45;
      v47 = v91;
      v48 = v44 - v86;
      if (!v44)
        v48 = 1;
      v49 = (_BYTE *)(v86 - v23);
      if (v48 == 1)
        v49 = 0;
      v21[2] = 0;
      v21[3] = v47;
      v21[1] = &v49[v48];
      v50 = v43 - (_QWORD)v97;
      if (!v43)
        v50 = 1;
      v97[0] = v50;
      v51 = (char *)v97 - v86;
      if (v50 == 1)
        v51 = 0;
      *(_QWORD *)v86 = v51 + v50;
      *(_QWORD *)&v86[8] = v21;
      *(_QWORD *)&v86[16] = v45;
      v82 = v45;
      v84 = (v43 - (uint64_t)v44) >> 5;
      if (v84 >= v46 >> 5)
      {
        v80 = (uint64_t)(32 * v45) >> 5;
        if (v45)
        {
          v58 = v44 - (char *)v93;
          v59 = 32 * v45;
          v60 = v43;
          v61 = v44;
          do
          {
            if (v61)
              v62 = v58;
            else
              v62 = 1;
            v93[0] = v62;
            if (v62 == 1)
              v63 = 0;
            else
              v63 = (char *)v93 + v62;
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v63, v60);
            v60 += 32;
            v61 += 32;
            v58 += 32;
            v59 -= 32;
          }
          while (v59);
        }
        v21[2] = v80;
        if (v82 <= v84)
        {
          if (v80 != v82)
            v21[2] = v82;
        }
        else
        {
          v78 = v82 - v84;
          v79 = v84 - v80;
          if (v84 != v80)
          {
            v64 = v43 + 32 * v82;
            v65 = &v44[32 * v80];
            v66 = v80 - v84;
            v67 = v65 - (char *)v93;
            do
            {
              if (v65)
                v68 = v67;
              else
                v68 = 1;
              v93[0] = v68;
              if (v68 == 1)
                v69 = 0;
              else
                v69 = (char *)v93 + v68;
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v69, v64);
              v64 += 32;
              v65 += 32;
              v67 += 32;
            }
            while (!__CFADD__(v66++, 1));
          }
          *(_QWORD *)&v86[16] -= v78;
          *(_QWORD *)v86 += 32 * v78;
          v21[2] = v82;
          if (v43 + 32 * v82 + 32 * v79 != v43 && v79)
          {
            v71 = 32 * v80 - 32 * v84;
            do
            {
              boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v43, v43 + v46 + 32 * v84 - 32 * v80);
              v43 += 32;
              v71 -= 32;
            }
            while (v71);
          }
        }
        *(_QWORD *)v86 = 1;
        *(_QWORD *)&v86[16] = 0;
      }
      else
      {
        if ((char *)v43 != v44)
        {
          v52 = v44 - (char *)v93;
          v53 = (v43 - (uint64_t)v44) >> 5;
          v54 = v43;
          do
          {
            --v53;
            if (v44)
              v55 = v52;
            else
              v55 = 1;
            v93[0] = v55;
            if (v55 == 1)
              v56 = 0;
            else
              v56 = (char *)v93 + v55;
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v56, v54);
            v54 += 32;
            v44 += 32;
            v52 += 32;
          }
          while (v53);
        }
        *(_QWORD *)v86 = 1;
        *(_QWORD *)&v86[16] = 0;
        v21[2] = v82;
        if (v82 != v84)
        {
          v57 = 32 * v84;
          do
          {
            boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::operator=(v43, v43 + v57);
            v43 += 32;
            v46 -= 32;
          }
          while (v57 != v46);
        }
      }
      boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(v86);
    }
  }
  return this;
}

void sub_1A1793FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void **v28;
  void *v30;

  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&a27);
  std::__hash_table<std::__hash_value_type<std::string,unsigned short>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned short>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned short>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned short>>>::~__hash_table((uint64_t)(v28 + 3));
  v30 = *v28;
  if (*v28)
  {
    *(_QWORD *)(v27 + 96) = v30;
    operator delete(v30);
  }
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v27 + 48));
  *(_QWORD *)(v27 + 40) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;

  *a4 = 0;
  if (a3)
  {
    v4 = -(uint64_t)a2;
    do
    {
      v5 = *(uint64_t **)(result + 32);
      v6 = *v5;
      v7 = (char *)v5 + *v5;
      if (v6 == 1)
        v7 = 0;
      if (v7)
        v8 = (uint64_t)&v7[v4];
      else
        v8 = 1;
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::allocator<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

void boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::search_value(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  while (1)
  {
    while (1)
    {
      v2 = *(_QWORD **)(a1 + 24);
      if (!v2)
        break;
      if (*(_QWORD **)(a1 + 32) != (_QWORD *)((char *)v2 + 12 * *v2 + 8))
        return;
      *(_QWORD *)(a1 + 24) = 0;
    }
    v3 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 == v3)
      break;
    v5 = *(_QWORD *)(v3 - 16);
    v6 = *(_QWORD *)(v3 - 8);
    v4 = (_QWORD *)(v3 - 16);
    if (v5 == v6)
    {
      *(_QWORD *)(a1 + 8) = v4;
    }
    else
    {
      *v4 = v5 + 24;
      v7 = *(_QWORD *)(v5 + 16);
      v8 = (_DWORD *)(v7 + v5 + 16);
      if (v7 == 1)
        v9 = 0;
      else
        v9 = v8;
      boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(v9, (char **)a1);
    }
  }
}

void boost::variant<boost::geometry::index::detail::rtree::variant_leaf<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::variant_internal_node<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::rtree::node_variant_static_tag>>::apply_visitor<boost::geometry::index::detail::rtree::visitors::iterator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::detail::rtree::options<boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::detail::rtree::insert_default_tag,boost::geometry::index::detail::rtree::choose_by_content_diff_tag,boost::geometry::index::detail::rtree::split_default_tag,boost::geometry::index::detail::rtree::quadratic_tag,boost::geometry::index::detail::rtree::node_variant_static_tag>,boost::geometry::index::detail::translator<boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::allocators<boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::model::box<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>,boost::geometry::index::detail::rtree::node_variant_static_tag>>>(_DWORD *a1, char **a2)
{
  int v2;
  char *v3;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;

  v3 = (char *)(a1 + 2);
  v2 = *a1;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      if (v2 < 0)
        v3 = *(char **)v3;
      a2[3] = v3;
      a2[4] = v3 + 8;
      break;
    case 1:
      if (v2 < 0)
        v3 = *(char **)v3;
      v6 = *(char **)v3;
      v5 = v3 + 8;
      v7 = &v5[3 * (_QWORD)v6];
      v9 = a2[1];
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v9 >= v8)
      {
        v11 = *a2;
        v12 = (v9 - *a2) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<pf::SceneTaxonomyNode const*>::__throw_length_error[abi:ne180100]();
        v14 = v8 - (_QWORD)v11;
        if (v14 >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v16 = (char *)operator new(16 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[16 * v12];
        *(_QWORD *)v17 = v5;
        *((_QWORD *)v17 + 1) = v7;
        v10 = v17 + 16;
        if (v9 != v11)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v9 - 1);
            v17 -= 16;
            v9 -= 16;
          }
          while (v9 != v11);
          v9 = *a2;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = &v16[16 * v15];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_QWORD *)v9 = v5;
        *((_QWORD *)v9 + 1) = v7;
        v10 = v9 + 16;
      }
      a2[1] = v10;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::container::throw_out_of_range(boost::container *this, const char *a2)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_1E45A1458;
  exception[1] = "vector::at out of range";
}

_QWORD *boost::geometry::index::detail::rtree::visitors::distance_query<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder,boost::geometry::index::detail::predicates::nearest<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>>::~distance_query(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::visitors::branch_data_comp &,std::__wrap_iter<boost::geometry::index::detail::rtree::visitors::distance_query<boost::geometry::index::rtree<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::geometry::index::quadratic<32ul,8ul>,boost::geometry::index::indexable<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::geometry::index::equal_to<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>>,boost::interprocess::allocator<std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::members_holder,boost::geometry::index::detail::predicates::nearest<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>>>::branch_data *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 *v6;
  double v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  double *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD v25[2];

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 24 * (v3 >> 1);
    v6 = (__int128 *)(a2 - 24);
    v7 = *(double *)(a2 - 24);
    if (*(double *)v5 > v7 || *(double *)v5 == v7 && *(_QWORD *)(result + 24 * v4 + 8) > *(_QWORD *)(a2 - 16))
    {
      v24 = *v6;
      v10 = *(_QWORD *)(a2 - 8);
      v8 = (char *)(a2 - 8);
      v9 = v10;
      v11 = v8 - (char *)v25;
      if (v10 == 1)
        v11 = 0;
      v25[0] = v11 + v9;
      *v6 = *(_OWORD *)v5;
      v12 = result + 24 * v4;
      v15 = *(_QWORD *)(v12 + 16);
      v13 = (char *)(v12 + 16);
      v14 = v15;
      v16 = v13 - v8;
      if (v15 == 1)
        v16 = 0;
      *(_QWORD *)v8 = v16 + v14;
      if (v3 >= 2)
      {
        while (1)
        {
          v18 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v17 = (double *)(result + 24 * v4);
          if (*v17 <= *(double *)&v24
            && (*v17 != *(double *)&v24 || *(_QWORD *)(result + 24 * v4 + 8) <= *((_QWORD *)&v24 + 1)))
          {
            break;
          }
          *(_OWORD *)v5 = *(_OWORD *)v17;
          v19 = result + 24 * v4;
          v21 = *(_QWORD *)(v19 + 16);
          v13 = (char *)(v19 + 16);
          v20 = v21;
          v22 = &v13[-v5 - 16];
          if (v21 == 1)
            v22 = 0;
          *(_QWORD *)(v5 + 16) = &v22[v20];
          v5 = result + 24 * v4;
          if (v18 <= 1)
            goto LABEL_17;
        }
      }
      v17 = (double *)v5;
LABEL_17:
      *(_OWORD *)v17 = v24;
      v23 = (char *)((char *)v25 - v13);
      if (v25[0] == 1)
        v23 = 0;
      *(_QWORD *)v13 = &v23[v25[0]];
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> const*>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::geometry::index::detail::rtree::visitors::pair_first_less &,std::__wrap_iter<std::pair<double,std::pair<boost::geometry::model::point<float,2ul,boost::geometry::cs::cartesian>,unsigned short> const*> *>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = (double *)(result + 16 * (v3 >> 1));
    v6 = (double *)(a2 - 16);
    v7 = *(double *)(a2 - 16);
    v8 = *v5;
    if (*v5 < v7)
    {
      v9 = *(_QWORD *)(a2 - 8);
      do
      {
        v10 = v6;
        v6 = v5;
        *v10 = v8;
        v10[1] = v5[1];
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (double *)(result + 16 * v4);
        v8 = *v5;
      }
      while (*v5 < v7);
      *v6 = v7;
      *((_QWORD *)v6 + 1) = v9;
    }
  }
  return result;
}

void pf::SceneGeographyLineParser::~SceneGeographyLineParser(char **this)
{
  *this = (char *)&off_1E45A0F60;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(this + 7);
  this[6] = 0;
}

{
  *this = (char *)&off_1E45A0F60;
  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl(this + 7);
  this[6] = 0;
  JUMPOUT(0x1A1B0C908);
}

uint64_t pf::SceneGeographyLineParser::parseLine(pf::SceneGeographyLineParser *this, char *__str, unint64_t a3)
{
  uint64_t result;
  NSObject *v4;
  const char *v5;
  uint32_t v6;
  int v7;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3 > 1)
  {
    v7 = __str[1];
    if (v7 == 58)
    {
      v11 = *__str;
      v9 = __str + 2;
      v10 = v11;
      if (v11 <= 111)
      {
        if (v10 == 99)
          return 1;
        if (v10 == 102)
          return pf::SceneGeographyLineParser::parseFloatMap(this, v9);
      }
      else
      {
        switch(v10)
        {
          case 'p':
            return pf::SceneGeographyLineParser::parsePOI(this, v9);
          case 's':
            return pf::SceneGeographyLineParser::parseScenes(this, v9);
          case 'v':
            v12 = strtol(v9, 0, 10);
            result = 1;
            if (v12 >= 2)
              *((_BYTE *)this + 41) = 1;
            return result;
        }
      }
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v13 = 67109120;
      v14 = v10;
      v4 = MEMORY[0x1E0C81028];
      v5 = "unexpected line type, first character: %c";
    }
    else
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      v13 = 67109120;
      v14 = v7;
      v4 = MEMORY[0x1E0C81028];
      v5 = "unexpected second character: %c (expected ':')";
    }
    v6 = 8;
    goto LABEL_23;
  }
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    LOWORD(v13) = 0;
    v4 = MEMORY[0x1E0C81028];
    v5 = "short line: expected 2 characters or longer";
    v6 = 2;
LABEL_23:
    _os_log_error_impl(&dword_1A16EE000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v13, v6);
    return 0;
  }
  return result;
}

void pf::SceneGeographyLineParser::finalize(pf::SceneGeographyLineParser *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE buf[24];
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*((_QWORD *)this + 14);
  v3 = *((_QWORD *)v2 + 3);
  if (v3)
  {
    if (*((_QWORD *)v2 + 2))
    {
      *(_QWORD *)buf = *((_QWORD *)v2 + 2);
      v4 = *((_QWORD *)v2 + 1);
      v5 = v2 - (char *)&v23;
      if (v4 == 1)
        v5 = 0;
      v24 = v5 + v4;
      boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v23, v2, 24, v3, (unint64_t *)buf, &v24);
      if (v23 != 1)
        *((_QWORD *)v2 + 3) = *(_QWORD *)buf;
    }
    else
    {
      v6 = v2 + 8;
      v7 = *((_QWORD *)v2 + 1);
      if (v7 != 1)
      {
        *(_QWORD *)buf = v7 + v6 - buf;
        v8 = (uint64_t)&v6[v7];
        if (*(_QWORD *)buf != 1 && v8 != 0)
        {
          if (*(_QWORD *)v2 == 1)
            v10 = 0;
          else
            v10 = &v2[*(_QWORD *)v2];
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v10, v8);
        }
      }
      *((_QWORD *)v2 + 1) = 1;
      *((_QWORD *)v2 + 3) = 0;
    }
  }
  v11 = (char *)*((_QWORD *)this + 15);
  v12 = *((_QWORD *)v11 + 3);
  if (v12)
  {
    if (*((_QWORD *)v11 + 2))
    {
      *(_QWORD *)buf = *((_QWORD *)v11 + 2);
      v13 = *((_QWORD *)v11 + 1);
      v14 = v11 - (char *)&v23;
      if (v13 == 1)
        v14 = 0;
      v24 = v14 + v13;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v23, v11, 24, v12, (unint64_t *)buf, &v24);
      if (v23 != 1)
        *((_QWORD *)v11 + 3) = *(_QWORD *)buf;
    }
    else
    {
      v15 = v11 + 8;
      v16 = *((_QWORD *)v11 + 1);
      if (v16 != 1)
      {
        *(_QWORD *)buf = v16 + v15 - buf;
        v17 = (uint64_t)&v15[v16];
        if (*(_QWORD *)buf != 1 && v17 != 0)
        {
          if (*(_QWORD *)v11 == 1)
            v19 = 0;
          else
            v19 = &v11[*(_QWORD *)v11];
          boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v19, v17);
        }
      }
      *((_QWORD *)v11 + 1) = 1;
      *((_QWORD *)v11 + 3) = 0;
    }
  }
  v20 = *((_QWORD *)this + 6);
  v21 = *(_QWORD *)(MEMORY[0x1E0DE4EF0] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)&buf[8] = vdupq_n_s64(4uLL);
  *(_QWORD *)buf = off_1E45A13D0;
  v26 = v21;
  v27 = &PF_SCENE_GEOGRAPHY_VERSION;
  boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v20, "version", (uint64_t)buf);
  boost::interprocess::ipcdetail::basic_managed_memory_impl<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index,8ul>::shrink_to_fit<boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>,char>(*((char **)this + 1));
  v22 = PFChecksumArchiveData((char *)(*((_QWORD *)this + 6) - 8), *(_QWORD *)(*((_QWORD *)this + 6) + 48) + 8, *((char **)this + 2), *((_QWORD *)this + 3));
  **((_QWORD **)this + 4) = v22;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v22;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFSceneGeography checksum %016llx", buf, 0xCu);
  }
}

void sub_1A17949C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

char *boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, _QWORD *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v20;
  uint64_t v21;
  unint64_t v22;

  v9 = 0;
  result = 0;
  v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1)
    v11 = 0;
  if (*a2 == 1)
    v12 = 0;
  else
    v12 = (uint64_t)a2 + *a2;
  v21 = v11;
  v13 = *a5;
  v14 = *(_QWORD *)(v12 + 48) >> 5;
  if (v14 >= a4 && v13 <= v14)
  {
    v22 = 32 * v13;
    result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 32 * a4, &v22, &v21, 0x20uLL);
    v9 = v21;
    *a5 = v22 >> 5;
  }
  if ((result & 7) != 0)
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v20 = &off_1E45A10D8;
  }
  v17 = result - (char *)a1;
  if (!result)
    v17 = 1;
  *a1 = v17;
  v18 = v9 - (_QWORD)a6;
  if (!v9)
    v18 = 1;
  *a6 = v18;
  return result;
}

char *boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, _QWORD *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v20;
  uint64_t v21;
  unint64_t v22;

  v9 = 0;
  result = 0;
  v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1)
    v11 = 0;
  if (*a2 == 1)
    v12 = 0;
  else
    v12 = (uint64_t)a2 + *a2;
  v21 = v11;
  v13 = *a5;
  v14 = *(_QWORD *)(v12 + 48) >> 3;
  if (v14 >= a4 && v13 <= v14)
  {
    v22 = 8 * v13;
    result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 8 * a4, &v22, &v21, 8uLL);
    v9 = v21;
    *a5 = v22 >> 3;
  }
  if ((result & 7) != 0)
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v20 = &off_1E45A10D8;
  }
  v17 = result - (char *)a1;
  if (!result)
    v17 = 1;
  *a1 = v17;
  v18 = v9 - (_QWORD)a6;
  if (!v9)
    v18 = 1;
  *a6 = v18;
  return result;
}

BOOL pf::SceneGeographyLineParser::parseFloatMap(pf::SceneGeographyLineParser *this, char *a2)
{
  _BOOL8 v2;
  double v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double *v12;
  double v14;
  char *v15;
  _BYTE buf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "all floatmap entries lines must come before any POI entries", buf, 2u);
    }
    return 0;
  }
  else
  {
    v15 = 0;
    v5 = strtod(a2, &v15);
    v14 = v5;
    v2 = v15 != a2;
    if (v15 == a2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = a2;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "failed to read floatmap - failed to parse double: %s", buf, 0xCu);
      }
    }
    else
    {
      v6 = (_QWORD *)*((_QWORD *)this + 14);
      v7 = v6[1];
      if (v7 == 1)
        v8 = 0;
      else
        v8 = (char *)v6 + v7 + 8;
      v9 = v6[2];
      v10 = &v8[8 * v9];
      if (v9 == v6[3])
      {
        boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,double *,double &>>(buf, (uint64_t)v6, v10, &v14);
        boost::container::vec_iterator<boost::interprocess::offset_ptr<double,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)buf);
      }
      else
      {
        if (v8)
          v11 = v10 - buf;
        else
          v11 = 1;
        if (v11 == 1)
          v12 = 0;
        else
          v12 = (double *)&buf[v11];
        *v12 = v5;
        v6[2] = v9 + 1;
      }
    }
  }
  return v2;
}

uint64_t pf::SceneGeographyLineParser::parseScenes(pf::SceneGeographyLineParser *this, char *__str)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  int64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  char *__lasts;
  uint8_t buf[8];
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *__endptr;
  _BYTE v33[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 40))
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "all scene entries lines must come before any POI entries", buf, 2u);
    }
    return 0;
  }
  v4 = *((_QWORD *)this + 12);
  v5 = (char *)this + v4 + 96;
  if (v4 == 1)
    v5 = 0;
  if (v5)
    v6 = v5 - (char *)buf;
  else
    v6 = 1;
  *(_QWORD *)buf = v6;
  v28 = 1;
  v29 = 0;
  v30 = 0;
  __lasts = 0;
  v7 = strtok_r(__str, ",", &__lasts);
  if (!v7)
  {
LABEL_29:
    if (v30)
    {
      if (v29)
      {
        *(_QWORD *)v33 = v29;
        v16 = (char *)&v28 - (char *)&__endptr;
        if (v28 == 1)
          v16 = 0;
        __endptr = (char *)(v16 + v28);
        boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v31, buf, 24, v30, (unint64_t *)v33, (uint64_t *)&__endptr);
        if (v31 != 1)
          v30 = *(_QWORD *)v33;
      }
      else
      {
        if (v28 != 1)
        {
          *(_QWORD *)v33 = v28 + (char *)&v28 - v33;
          if (*(_QWORD *)v33 != 1)
          {
            if ((uint64_t *)((char *)&v28 + v28))
            {
              if (*(_QWORD *)buf == 1)
                v17 = 0;
              else
                v17 = (char *)&buf[*(_QWORD *)buf];
              boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v17, (uint64_t)&v28 + v28);
            }
          }
        }
        v28 = 1;
        v30 = 0;
      }
    }
    v18 = (_QWORD *)*((_QWORD *)this + 15);
    v19 = v18[1];
    v20 = (char *)v18 + v19 + 8;
    if (v19 == 1)
      v20 = 0;
    v21 = v18[2];
    v22 = &v20[32 * v21];
    if (v21 == v18[3])
    {
      boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>*,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>&>>(v33, (uint64_t)v18, v22, (char *)buf);
      boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)v33);
    }
    else
    {
      if (v20)
        v23 = v22 - v33;
      else
        v23 = 1;
      *(_QWORD *)v33 = v23;
      if (v23 == 1)
        v24 = 0;
      else
        v24 = (uint64_t *)&v33[v23];
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v24, buf);
      ++v18[2];
    }
    v2 = 1;
    goto LABEL_57;
  }
  v8 = v7;
  v9 = 1;
  while ((v9 & 1) != 0)
  {
LABEL_26:
    v8 = strtok_r(0, ",", &__lasts);
    v9 = 0;
    if (!v8)
      goto LABEL_29;
  }
  __endptr = 0;
  v10 = strtol(v8, &__endptr, 10);
  if (v10 <= 4294967294 && v8 != __endptr)
  {
    LODWORD(v31) = v10;
    v11 = v29;
    if (v28 == 1)
      v12 = 0;
    else
      v12 = (char *)&v28 + v28;
    v13 = &v12[4 * v29];
    if (v29 == v30)
    {
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned int *,unsigned int>>(v33, (uint64_t)buf, v13, &v31);
      boost::container::vec_iterator<boost::interprocess::offset_ptr<unsigned int,long,unsigned long,0ul>,false>::operator*(*(uint64_t *)v33);
    }
    else
    {
      if (v12)
        v14 = v13 - v33;
      else
        v14 = 1;
      if (v14 == 1)
        v15 = 0;
      else
        v15 = &v33[v14];
      *v15 = v10;
      v29 = v11 + 1;
    }
    goto LABEL_26;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v33 = 136315138;
    *(_QWORD *)&v33[4] = v8;
    _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "invalid scene ID: %s", v33, 0xCu);
  }
  v2 = 0;
LABEL_57:
  boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)buf);
  return v2;
}

void sub_1A1795134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(va);
  _Unwind_Resume(a1);
}

uint64_t pf::SceneGeographyLineParser::parsePOI(pf::SceneGeographyLineParser *this, char *__s)
{
  char *v2;
  char *v4;
  const char *v5;
  char *v6;
  char *v7;
  const char *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int64_t v31;
  int64_t v32;
  int64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  BOOL v52;
  char *v53;
  int64_t v54;
  int64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  int64_t v62;
  uint64_t v63;
  _BYTE *v64;
  int64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  int64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  int64_t v84;
  char *v85;
  _BYTE *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  uint64_t *v107;
  char *v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  char *v112;
  int64_t v113;
  int64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  int64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  int64_t v140;
  char *v141;
  _QWORD *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _WORD *v156;
  unint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  const char *v162;
  uint32_t v163;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int64_t v170;
  int64_t v171;
  int64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char v177;
  int64_t v178;
  uint64_t v179;
  int64_t v180;
  char *__endptr;
  _QWORD v182[3];
  uint64_t v183;
  int64_t v184;
  int64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *__lasts;
  uint64_t v189;
  _BYTE v190[12];
  __int16 v191;
  uint64_t v192;
  uint8_t buf[16];
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;

  v2 = __s;
  v198 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 40))
    *((_BYTE *)this + 40) = 1;
  v4 = strchr(__s, 44);
  if (!v4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v2;
    v11 = MEMORY[0x1E0C81028];
LABEL_57:
    _os_log_error_impl(&dword_1A16EE000, v11, OS_LOG_TYPE_ERROR, "error parsing POI line: %s", buf, 0xCu);
    return 0;
  }
  *v4 = 0;
  v5 = v4 + 1;
  v6 = strchr(v4 + 1, 44);
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v2;
    v11 = MEMORY[0x1E0C81028];
    goto LABEL_57;
  }
  v7 = v6;
  if (!*((_BYTE *)this + 41))
  {
    v10 = v5;
    goto LABEL_13;
  }
  *v6 = 0;
  v8 = v6 + 1;
  v9 = strchr(v6 + 1, 44);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v2;
      v11 = MEMORY[0x1E0C81028];
      goto LABEL_57;
    }
    return 0;
  }
  v10 = v8;
  v7 = v9;
LABEL_13:
  *v7 = 0;
  v12 = v7 + 1;
  *(_QWORD *)buf = strtod(v5, 0);
  *(_QWORD *)&buf[8] = strtod(v10, 0);
  v13 = (char *)&v194;
  v14 = *((_QWORD *)this + 13);
  if (v14 == 1)
    v15 = 0;
  else
    v15 = (char *)this + v14 + 104;
  if (v15)
    v16 = v15 - (char *)&v194;
  else
    v16 = 1;
  v194 = v16;
  v195 = 1;
  v196 = 0;
  v197 = 0;
  v17 = *((_QWORD *)this + 16);
  v175 = (char *)&v194;
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string((uint64_t)v190, v2, (_QWORD *)this + 11);
  v18 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v190);
  v19 = 265 * ((~v18 + (v18 << 21)) ^ ((~v18 + (v18 << 21)) >> 24));
  v20 = 2147483649u * ((21 * (v19 ^ (v19 >> 14))) ^ ((21 * (v19 ^ (v19 >> 14))) >> 28));
  boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::find_node_impl<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>(&v179, v17, v20, (uint64_t)v190);
  if (v179 == 1)
  {
    v173 = v20;
    v174 = v2;
    __endptr = (char *)(v17 + 16);
    v182[0] = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node((uint64_t **)&__endptr);
    if (v182[0] == 1)
      v21 = 0;
    else
      v21 = (char *)v182 + v182[0];
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::basic_string(v21, (uint64_t)v190);
    *((_OWORD *)v21 + 2) = *(_OWORD *)buf;
    v22 = v21 + 48;
    v23 = v196;
    if (v194 == 1)
      v24 = 0;
    else
      v24 = (char *)&v194 + v194;
    if (v24)
      v25 = v24 - v22;
    else
      v25 = 1;
    *((_QWORD *)v21 + 6) = v25;
    *((_QWORD *)v21 + 7) = 1;
    v26 = v21 + 56;
    *((_QWORD *)v21 + 8) = v23;
    *((_QWORD *)v21 + 9) = 0;
    if (v23)
    {
      __lasts = v23;
      v189 = 1;
      boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v187, v22, 1, (unint64_t)v23, (unint64_t *)&__lasts, &v189);
      v27 = (char *)((char *)&v187 - v26);
      if (v187 == 1)
        v27 = 0;
      v28 = &v27[v187];
      *((_QWORD *)v21 + 7) = v28;
      *((_QWORD *)v21 + 9) = __lasts;
      if (v196)
      {
        if (v28 == (char *)1)
          v29 = 0;
        else
          v29 = &v26[(_QWORD)v28];
        if (v195 == 1)
          v30 = 0;
        else
          v30 = (char *)&v195 + v195;
        memmove(v29, v30, 2 * (_QWORD)v196);
      }
    }
    if (v182[0] == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v31 = (char *)v182 - (char *)&v178 + v182[0];
    v178 = v31;
    v32 = (char *)&v178 - (char *)&v180;
    if (v31 == 1)
      v32 = 0;
    v33 = v32 + v31;
    v180 = v33;
    __endptr = (char *)(v17 + 16);
    v34 = (char *)v182;
    v35 = (char *)&v180 - (char *)v182;
    if (v33 == 1)
      v35 = 0;
    v182[0] = v35 + v33;
    v36 = *(_QWORD *)(v17 + 32);
    v37 = v36 + 1;
    v13 = v175;
    if (*(_QWORD *)(v17 + 56) == 1)
    {
      v38 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v37, *(float *)(v17 + 40));
      v39 = v173;
      if (*(_QWORD *)(v17 + 24) <= v38)
        v40 = v38;
      else
        v40 = *(_QWORD *)(v17 + 24);
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(v17, v40);
    }
    else
    {
      v39 = v173;
      if (*(_QWORD *)(v17 + 48) < v37)
      {
        v46 = v36 + (v36 >> 1);
        if (v46 > v37)
          v37 = v46;
        v47 = boost::unordered::detail::table<boost::unordered::detail::set<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,pf::SceneTaxonomyNodeFunctor,pf::SceneTaxonomyNodeFunctor>>::min_buckets_for_size(v37, *(float *)(v17 + 40));
        if (v47 != *(_QWORD *)(v17 + 24))
        {
          if (*(_QWORD *)(v17 + 56) == 1)
            __assert_rtn("rehash_impl", "implementation.hpp", 4578, "this->buckets_");
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(v17, v47);
          boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *(_QWORD *)(v17 + 24));
          v169 = (char *)v182;
          if (v189 == 1)
            v48 = 0;
          else
            v48 = &v190[v189 - 8];
          v49 = *(_QWORD *)v48;
          v50 = v48 - (char *)&__lasts;
          if (v49 == 1)
            v50 = 0;
          v51 = (char *)(v50 + v49);
          __lasts = v51;
          v52 = v51 == (char *)1;
          v53 = (char *)&__lasts + (_QWORD)v51;
          if (v51 == (char *)1)
            v53 = 0;
          if (*((_QWORD *)v53 + 10) != 1)
          {
            v172 = (char *)&__lasts - (char *)&v187;
            v54 = (char *)&v185 - (char *)&v189;
            v170 = (char *)&v189 - (char *)&__lasts;
            v171 = (char *)&v189 - (char *)&v186;
            do
            {
              v61 = !v52;
              v55 = v172;
              if (!v61)
                v55 = 0;
              v187 = (uint64_t)&v51[v55];
              v56 = &v51[v55 + (_QWORD)&v187];
              if (v187 == 1)
                v57 = 0;
              else
                v57 = v56;
              v58 = *((_QWORD *)v57 + 10);
              v59 = v57 + 80 - (char *)&v189;
              if (v58 == 1)
                v59 = 0;
              v60 = v59 + v58;
              v189 = v59 + v58;
              v61 = v59 + v58 == 1;
              v62 = v171;
              if (v61)
                v62 = 0;
              v63 = v62 + v60;
              v186 = v63;
              if (v61)
                v64 = 0;
              else
                v64 = &v190[v60 - 8];
              if (v61)
                v65 = 0;
              else
                v65 = (char *)&v189 - (char *)&v184;
              if (v63 == 1)
                v66 = 0;
              else
                v66 = (char *)&v186 + v63;
              v67 = boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>::operator()((uint64_t)v66);
              v68 = 265 * ((~v67 + (v67 << 21)) ^ ((~v67 + (v67 << 21)) >> 24));
              v69 = (*(_QWORD *)(v17 + 24) - 1) & (2147483649u
                                                   * ((21 * (v68 ^ (v68 >> 14))) ^ ((21 * (v68 ^ (v68 >> 14))) >> 28)));
              *((_QWORD *)v64 + 11) = v69 & 0x7FFFFFFFFFFFFFFFLL;
              v70 = v65 + v60;
              v71 = (char *)&v184 + v65 + v60;
              if (v65 + v60 == 1)
                v71 = 0;
              v72 = *((_QWORD *)v71 + 10);
              v73 = v71 + 80 - (char *)&v185;
              if (v72 == 1)
                v73 = 0;
              v74 = v73 + v72;
              if (v74 != 1)
              {
                v75 = (char *)&v185 + v74;
                if (*(int64_t *)((char *)&v185 + v74 + 88) < 0)
                {
                  do
                  {
                    v76 = v74 + v54;
                    if (v74 + v54 == 1)
                      v77 = 0;
                    else
                      v77 = v75;
                    *((_QWORD *)v77 + 11) = v69 | 0x8000000000000000;
                    if (v74 + v54 == 1)
                      v78 = 0;
                    else
                      v78 = (char *)&v189 - (char *)&v184;
                    v70 = v78 + v76;
                    v79 = (char *)&v184 + v70;
                    if (v70 == 1)
                      v79 = 0;
                    v80 = *((_QWORD *)v79 + 10);
                    v81 = v79 + 80 - (char *)&v185;
                    if (v80 == 1)
                      v81 = 0;
                    v74 = v81 + v80;
                    if (v74 == 1)
                      break;
                    v75 = (char *)&v185 + v74;
                  }
                  while (*(int64_t *)((char *)&v185 + v74 + 88) < 0);
                  v189 = v76;
                }
              }
              v184 = v70;
              boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v185, v17, v69);
              v82 = (char *)&v185 + v185;
              if (v185 == 1)
                v82 = 0;
              if (*(_QWORD *)v82 == 1)
              {
                v83 = (char *)&__lasts - v82;
                if (__lasts == (char *)1)
                  v83 = 0;
                *(_QWORD *)v82 = &__lasts[v83];
                v84 = v170;
                if (v189 == 1)
                  v84 = 0;
                v51 = (char *)(v84 + v189);
                __lasts = (char *)(v84 + v189);
                v85 = (char *)&__lasts + v84 + v189;
              }
              else
              {
                if (v189 == 1)
                  v86 = 0;
                else
                  v86 = &v190[v189 - 8];
                v89 = *((_QWORD *)v86 + 10);
                v87 = v86 + 80;
                v88 = v89;
                v90 = v87 - (char *)&v183;
                if (v89 == 1)
                  v90 = 0;
                v91 = v90 + v88;
                v183 = v91;
                if (*(_QWORD *)v82 == 1)
                  v92 = 0;
                else
                  v92 = &v82[*(_QWORD *)v82];
                v93 = *((_QWORD *)v92 + 10);
                v94 = v92 + 80 - v87;
                if (v93 == 1)
                  v94 = 0;
                *(_QWORD *)v87 = v94 + v93;
                v51 = __lasts;
                v85 = (char *)&__lasts + (_QWORD)__lasts;
                if (__lasts == (char *)1)
                  v95 = 0;
                else
                  v95 = (char *)&__lasts + (_QWORD)__lasts;
                v96 = *(_QWORD *)v82;
                v97 = &v82[*(_QWORD *)v82];
                if (v96 == 1)
                  v97 = 0;
                v100 = *((_QWORD *)v95 + 10);
                v98 = v95 + 80;
                v99 = v100;
                v101 = (char *)(v98 - (v97 + 80));
                if (v100 == 1)
                  v101 = 0;
                *((_QWORD *)v97 + 10) = &v101[v99];
                v102 = (char *)((char *)&v183 - v98);
                if (v91 == 1)
                  v102 = 0;
                *(_QWORD *)v98 = &v102[v91];
              }
              v52 = v51 == (char *)1;
              if (v51 == (char *)1)
                v85 = 0;
            }
            while (*((_QWORD *)v85 + 10) != 1);
          }
          v13 = v175;
          v39 = v173;
          v34 = v169;
        }
      }
    }
    v103 = v34 - (char *)&v184;
    if (v182[0] == 1)
      v103 = 0;
    v184 = v103 + v182[0];
    v182[0] = 1;
    v104 = (*(_QWORD *)(v17 + 24) - 1) & v39;
    boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&__lasts, v17, v104);
    v105 = v184;
    v106 = (char *)&v184 + v184;
    if (v184 == 1)
      v106 = 0;
    *((_QWORD *)v106 + 11) = v104 & 0x7FFFFFFFFFFFFFFFLL;
    if (__lasts == (char *)1)
      v107 = 0;
    else
      v107 = (uint64_t *)((char *)&__lasts + (_QWORD)__lasts);
    if (*v107 == 1)
    {
      boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *(_QWORD *)(v17 + 24));
      if (v189 == 1)
        v108 = 0;
      else
        v108 = &v190[v189 - 8];
      v109 = *(_QWORD *)v108;
      v110 = v108 - (char *)&v187;
      if (v109 == 1)
        v110 = 0;
      v111 = v110 + v109;
      v187 = v111;
      v112 = (char *)&v187 + v111;
      if (v111 == 1)
        v112 = 0;
      v2 = v174;
      if (*((_QWORD *)v112 + 10) != 1)
      {
        v113 = (char *)&v187 - (char *)&v185;
        if (v111 == 1)
          v113 = 0;
        v114 = v113 + v111;
        v115 = (char *)&v185 + v114;
        if (v114 == 1)
          v115 = 0;
        v116 = *((_QWORD *)v115 + 10);
        v185 = v114;
        v117 = v115 + 80 - (char *)&v186;
        if (v116 == 1)
          v117 = 0;
        v186 = v117 + v116;
        v118 = (char *)&v186 + v117 + v116;
        if (v117 + v116 == 1)
          v118 = 0;
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::get_bucket_pointer(&v189, v17, *((_QWORD *)v118 + 11) & 0x7FFFFFFFFFFFFFFFLL);
        if (v189 == 1)
          v119 = 0;
        else
          v119 = &v190[v189 - 8];
        v120 = (char *)((char *)&v184 - v119);
        if (v184 == 1)
          v120 = 0;
        *(_QWORD *)v119 = &v120[v184];
        v111 = v187;
        v2 = v174;
      }
      if (__lasts == (char *)1)
        v121 = 0;
      else
        v121 = (char *)&__lasts + (_QWORD)__lasts;
      v122 = (char *)((char *)&v187 - v121);
      if (v111 == 1)
        v122 = 0;
      *(_QWORD *)v121 = &v122[v111];
      v123 = (char *)&v187 + v187;
      if (v187 == 1)
        v123 = 0;
      v105 = v184;
      v124 = (char *)&v184 + v184;
      v127 = *((_QWORD *)v123 + 10);
      v125 = v123 + 80;
      v126 = v127;
      v128 = (char *)((char *)&v184 - v125);
      if (v184 == 1)
      {
        v124 = 0;
        v128 = 0;
      }
      v129 = v125 - (v124 + 80);
      if (v126 == 1)
        v129 = 0;
      *((_QWORD *)v124 + 10) = v129 + v126;
      *(_QWORD *)v125 = &v128[v105];
    }
    else
    {
      v130 = (char *)v107 + *v107;
      v131 = *((_QWORD *)v130 + 10);
      v132 = v130 - v106;
      if (v131 == 1)
        v132 = 0;
      *((_QWORD *)v106 + 10) = v132 + v131;
      v133 = *v107;
      v134 = (char *)v107 + *v107;
      if (v133 == 1)
        v135 = 0;
      else
        v135 = v134;
      v136 = (char *)((char *)&v184 - (v135 + 80));
      if (v105 == 1)
        v136 = 0;
      *((_QWORD *)v135 + 10) = &v136[v105];
      v2 = v174;
    }
    ++*(_QWORD *)(v17 + 32);
    v137 = (char *)&v184 - (char *)&v189;
    if (v105 == 1)
      v137 = 0;
    v189 = v137 + v105;
    boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp((uint64_t)&__endptr);
    v138 = (char *)&v189 - (char *)&__endptr;
    if (v189 == 1)
      v138 = 0;
    v139 = v138 + v189;
    v140 = (char *)&__endptr - (char *)&v176;
    if (v139 == 1)
      v140 = 0;
    v176 = v140 + v139;
    v177 = 1;
  }
  else
  {
    v41 = v179 + (char *)&v179 - (char *)&v189;
    v42 = (char *)&v189 - (char *)&__endptr;
    if (v41 == 1)
      v42 = 0;
    v43 = v42 + v41;
    v44 = (char *)&__endptr - (char *)&v176;
    if (v43 == 1)
      v44 = 0;
    v176 = v44 + v43;
    v177 = 0;
  }
  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string((uint64_t)v190);
  if (!v177)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v190 = 136446210;
      *(_QWORD *)&v190[4] = v2;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "POI hash already in the index: %{public}s", v190, 0xCu);
    }
    v45 = 0;
    goto LABEL_250;
  }
  v141 = v2;
  if (v176 == 1)
    v142 = 0;
  else
    v142 = (uint64_t *)((char *)&v176 + v176);
  __lasts = 0;
  v143 = strtok_r(v12, ",", &__lasts);
  if (!v143)
  {
LABEL_230:
    v157 = v142[9];
    if (v157)
    {
      v158 = v142 + 6;
      if (!v142[8])
      {
        v165 = (char *)(v142 + 7);
        v166 = v142[7];
        if (v166 != 1)
        {
          *(_QWORD *)v190 = v166 + v165 - v190;
          if (*(_QWORD *)v190 != 1)
          {
            v167 = (uint64_t)&v165[v166];
            if (v167)
            {
              if (*v158 == 1)
                v168 = 0;
              else
                v168 = (char *)v158 + *v158;
              boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v168, v167);
            }
          }
        }
        v45 = 1;
        v142[7] = 1;
        v142[9] = 0;
        goto LABEL_249;
      }
      *(_QWORD *)v190 = v142[8];
      v159 = v142[7];
      v160 = (char *)(v142 + 7) - (char *)&__endptr;
      if (v159 == 1)
        v160 = 0;
      __endptr = (char *)(v160 + v159);
      boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v189, v158, 24, v157, (unint64_t *)v190, (uint64_t *)&__endptr);
      if (v189 != 1)
        v142[9] = *(_QWORD *)v190;
    }
    v45 = 1;
    goto LABEL_249;
  }
  v144 = v143;
  while (1)
  {
    __endptr = 0;
    v145 = strtol(v144, &__endptr, 10);
    v146 = strrchr(v144, 58);
    if (!v146 || v144 == __endptr)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_248;
      *(_DWORD *)v190 = 136315138;
      *(_QWORD *)&v190[4] = v141;
      v161 = MEMORY[0x1E0C81028];
      v162 = "malformed POI line: %s";
LABEL_241:
      v163 = 12;
      goto LABEL_247;
    }
    *v146 = 0;
    v147 = v146 + 1;
    v148 = strtol(v146 + 1, &__endptr, 10);
    if (v147 == __endptr)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_248;
      *(_DWORD *)v190 = 136315138;
      *(_QWORD *)&v190[4] = v141;
      v161 = MEMORY[0x1E0C81028];
      v162 = "malformed POI line: %s";
      goto LABEL_241;
    }
    if (v145 > 255 || (unint64_t)v145 >= *(_QWORD *)(*((_QWORD *)this + 15) + 16))
      break;
    v149 = v148;
    if (v148 > 255 || (unint64_t)v148 >= *(_QWORD *)(*((_QWORD *)this + 14) + 16))
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        goto LABEL_248;
      *(_DWORD *)v190 = 136315394;
      *(_QWORD *)&v190[4] = v141;
      v191 = 2048;
      v192 = v149;
      v161 = MEMORY[0x1E0C81028];
      v162 = "malformed POI line: %s; tfIDF out of range: %ld";
      goto LABEL_246;
    }
    v150 = v145 | (unsigned __int16)((_WORD)v148 << 8);
    LOWORD(v189) = v150;
    v151 = v142[7];
    v152 = v142[8];
    if (v151 == 1)
      v153 = 0;
    else
      v153 = (char *)v142 + v151 + 56;
    v154 = &v153[2 * v152];
    if (v152 == v142[9])
    {
      boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned char,unsigned char>*,std::pair<unsigned char,unsigned char>>>(v190, (uint64_t)(v142 + 6), v154, (uint64_t)&v189);
      if (*(_QWORD *)v190 == 1)
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    else
    {
      if (v153)
        v155 = v154 - v190;
      else
        v155 = 1;
      if (v155 == 1)
        v156 = 0;
      else
        v156 = &v190[v155];
      *v156 = v150;
      ++v142[8];
    }
    v144 = strtok_r(0, ",", &__lasts);
    if (!v144)
      goto LABEL_230;
  }
  if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    goto LABEL_248;
  *(_DWORD *)v190 = 136315394;
  *(_QWORD *)&v190[4] = v141;
  v191 = 2048;
  v192 = v145;
  v161 = MEMORY[0x1E0C81028];
  v162 = "malformed POI line: %s; scene ID out of range: %ld";
LABEL_246:
  v163 = 22;
LABEL_247:
  _os_log_error_impl(&dword_1A16EE000, v161, OS_LOG_TYPE_ERROR, v162, v190, v163);
LABEL_248:
  v45 = 0;
LABEL_249:
  v13 = v175;
LABEL_250:
  boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(v13);
  return v45;
}

void sub_1A1795FDC()
{
  uint64_t v0;

  boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v0);
  JUMPOUT(0x1A1796128);
}

void sub_1A1795FF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v33 = (char *)&a31 - (char *)&a28;
    if (a31 == 1)
      v33 = 0;
    v34 = v33 + a31;
    a28 = v34;
    if (a31 == 1)
      v35 = 0;
    else
      v35 = (char *)&a31 + a31;
    if (v34 == 1)
      v36 = 0;
    else
      v36 = (char *)&a28 + v34;
    v37 = *((_QWORD *)v36 + 10);
    v38 = v36 + 80 - (char *)&a32;
    if (v37 == 1)
      v38 = 0;
    v39 = v38 + v37;
    a32 = v39;
    *((_QWORD *)v35 + 10) = 1;
    if (v39 != 1)
    {
      v40 = (char *)&a32 - (char *)&a25;
      do
      {
        a25 = v39 + v40;
        if (v39 + v40 == 1)
          v41 = 0;
        else
          v41 = (char *)&a32 + v39;
        v42 = *((_QWORD *)v41 + 10);
        v43 = v41 + 80 - (char *)&a26;
        if (v42 == 1)
          v43 = 0;
        a26 = v43 + v42;
        a24 = (char *)&a32 - (char *)&a24 + v39;
        boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_node(v32, (char *)&a24);
        --*(_QWORD *)(v32 + 32);
        if (a26 == 1)
          v44 = 0;
        else
          v44 = (char *)&a26 - (char *)&a32;
        v39 = v44 + a26;
        a32 = v44 + a26;
      }
      while (v44 + a26 != 1);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1A1796140);
}

void sub_1A17960E8()
{
  __cxa_end_catch();
  JUMPOUT(0x1A1796118);
}

void sub_1A17960F4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1A1796140);
}

void sub_1A1796104()
{
  JUMPOUT(0x1A1796130);
}

void sub_1A179610C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16)
{
  boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector(a16);
  _Unwind_Resume(a1);
}

char *boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, _QWORD *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v20;
  uint64_t v21;
  unint64_t v22;

  v9 = 0;
  result = 0;
  v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1)
    v11 = 0;
  if (*a2 == 1)
    v12 = 0;
  else
    v12 = (uint64_t)a2 + *a2;
  v21 = v11;
  v13 = *a5;
  v14 = *(_QWORD *)(v12 + 48) >> 1;
  if (v14 >= a4 && v13 <= v14)
  {
    v22 = 2 * v13;
    result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 2 * a4, &v22, &v21, 2uLL);
    v9 = v21;
    *a5 = v22 >> 1;
  }
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v20 = &off_1E45A10D8;
  }
  v17 = result - (char *)a1;
  if (!result)
    v17 = 1;
  *a1 = v17;
  v18 = v9 - (_QWORD)a6;
  if (!v9)
    v18 = 1;
  *a6 = v18;
  return result;
}

void *boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<unsigned char,unsigned char>*,std::pair<unsigned char,unsigned char>>>(_QWORD *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *result;
  uint64_t v19;
  _WORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _WORD *v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  int64_t v41;
  _BYTE *v42;
  int64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _WORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  __int16 v72;
  uint64_t v73;
  _WORD *v74;
  char *v75;
  __int16 v76;
  char *v77;
  char *v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _WORD *v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  BOOL v93;
  uint64_t v94;
  _WORD *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  _BYTE *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  char v110;
  _BYTE v111[8];
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD v116[3];
  uint64_t v117;

  v5 = (char *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != *(_QWORD *)(a2 + 16))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (*(_QWORD *)a2 == 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 + a2;
  v9 = *(_QWORD *)(v8 + 48) >> 1;
  if (v9 == v6)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  if (v6 >> 61 > 4)
    v13 = -1;
  else
    v13 = 8 * v6;
  if (v6 >> 61)
    v14 = v13;
  else
    v14 = 8 * v6 / 5;
  v15 = v6 + 1;
  if (v14 < v9)
    v9 = v14;
  if (v15 > v9)
    v16 = v6 + 1;
  else
    v16 = v9;
  v17 = v5 - (char *)&v113;
  if (v4 == 1)
    v17 = 0;
  v113 = v17 + v4;
  v114 = v16;
  result = boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v112, (_QWORD *)a2, 7, v15, &v114, &v113);
  if (v113 == 1)
  {
    v108 = a1;
    v19 = v4;
    v20 = (_WORD *)a4;
    if (v112 == 1)
      v21 = 0;
    else
      v21 = (char *)&v112 + v112;
    v22 = v114;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    if (v23 == 1)
      v25 = 0;
    else
      v25 = &v5[v23];
    v26 = (char *)&v115 - (char *)v116;
    v27 = v21 - (char *)&v115;
    if (!v21)
      v27 = 1;
    v115 = v27;
    if (v27 == 1)
      v26 = 0;
    v116[0] = v26 + v27;
    v116[1] = a2;
    v116[2] = v114;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      v28 = &v21[a3 - v25];
    }
    else
    {
      v28 = v21;
    }
    v29 = v28 - (char *)&v117;
    if (!v28)
      v29 = 1;
    v30 = (_WORD *)((char *)&v117 + v29);
    if (v29 == 1)
      v30 = 0;
    *v30 = *v20;
    if (a3)
    {
      v31 = &v25[2 * v24];
      if (v31 != a3)
        memmove(v28 + 2, a3, v31 - a3);
    }
    v116[0] = 1;
    v4 = v19;
    a1 = v108;
    if (v25)
    {
      v32 = v5 - (char *)&v117;
      if (*(_QWORD *)v5 == 1)
        v32 = 0;
      v33 = v32 + *(_QWORD *)v5;
      v117 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v117 + v33))
      {
        if (*(_QWORD *)a2 == 1)
          v34 = 0;
        else
          v34 = (char *)(*(_QWORD *)a2 + a2);
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v117 + v33);
      }
    }
    v35 = v21 - (char *)&v117;
    if (!v21)
      v35 = 1;
    v36 = (char *)((char *)&v117 - v5);
    if (v35 == 1)
      v36 = 0;
    v37 = &v36[v35];
    v38 = *(_QWORD *)(a2 + 16) + 1;
    *(_QWORD *)(a2 + 8) = v37;
    *(_QWORD *)(a2 + 16) = v38;
    *(_QWORD *)(a2 + 24) = v22;
    result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v116);
    goto LABEL_55;
  }
  if (*(_QWORD *)v5 == 1)
    v46 = 0;
  else
    v46 = &v5[*(_QWORD *)v5];
  if (v112 == 1)
    v47 = 0;
  else
    v47 = (char *)&v112 + v112;
  v48 = v114;
  v49 = v46 - v47;
  if (v46 == v47)
  {
    *(_QWORD *)(a2 + 24) = v114;
    v69 = *(_QWORD *)(a2 + 16);
    if (v69 == v48)
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    v70 = &v46[2 * v69];
    if (v70 == a3)
    {
      v94 = a3 - (char *)v116;
      if (!v46)
        v94 = 1;
      v95 = (_WORD *)((char *)v116 + v94);
      if (v94 == 1)
        v95 = 0;
      *v95 = *(_WORD *)a4;
      ++*(_QWORD *)(a2 + 16);
    }
    else
    {
      v71 = v70 - 2;
      v72 = *((_WORD *)v70 - 1);
      v73 = v70 - (char *)v116;
      if (!v46)
        v73 = 1;
      if (v73 == 1)
        v74 = 0;
      else
        v74 = (_WORD *)((char *)v116 + v73);
      *v74 = v72;
      ++*(_QWORD *)(a2 + 16);
      if (v71 != a3)
      {
        v75 = v71;
        do
        {
          v76 = *((_WORD *)v75 - 1);
          v75 -= 2;
          *(_WORD *)v71 = v76;
          v71 = v75;
        }
        while (v75 != a3);
      }
      *a3 = *(_BYTE *)a4;
      a3[1] = *(_BYTE *)(a4 + 1);
    }
    goto LABEL_55;
  }
  v107 = (char *)a4;
  v109 = a1;
  v50 = *(_QWORD *)(a2 + 16);
  v51 = &v46[2 * v50];
  v52 = v47 - (char *)v116;
  if (!v47)
    v52 = 1;
  v53 = (char *)((char *)v116 - v5);
  if (v52 == 1)
    v53 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v48;
  *(_QWORD *)(a2 + 8) = &v53[v52];
  v54 = (a3 - v46) >> 1;
  v55 = v49 >> 1;
  v56 = v54 + 1;
  v57 = v46 - (char *)&v117;
  if (!v46)
    v57 = 1;
  v117 = v57;
  if (v55 >= v56)
  {
    if (v46 == a3 || !v46)
    {
      v77 = v47;
    }
    else
    {
      v77 = v47;
      if (v47)
      {
        v78 = v46;
        v79 = a3 - v46;
        v80 = v50;
        v81 = v49 >> 1;
        result = memmove(v47, v78, v79);
        v55 = v81;
        v50 = v80;
        v77 = &v47[2 * v54];
      }
    }
    *(_QWORD *)(a2 + 16) = v54;
    if (v77)
      v82 = v77 - (char *)v116;
    else
      v82 = 1;
    if (v82 == 1)
      v83 = 0;
    else
      v83 = (_WORD *)((char *)v116 + v82);
    *v83 = *(_WORD *)v107;
    *(_QWORD *)(a2 + 16) = v56;
    v84 = v50 + 1;
    if (v55 >= v50 + 1)
    {
      v93 = v50 == v54;
      a1 = v109;
      if (v93)
        goto LABEL_55;
      v85 = v51 - a3;
      if (v51 == a3 || !a3 || !v47)
        goto LABEL_142;
    }
    else
    {
      v85 = v51 - a3;
      a1 = v109;
      if (v51 == a3)
        goto LABEL_142;
    }
    result = memmove(&v47[2 * v56], a3, v85);
LABEL_142:
    *(_QWORD *)(a2 + 16) = v84;
    goto LABEL_55;
  }
  v58 = v55 - v54;
  if (v55 <= v54)
  {
    v86 = v49 >> 1;
    v87 = v50;
    if (v46 == v47)
    {
      v88 = v50;
    }
    else
    {
      result = memmove(v47, v46, v46 - v47);
      v49 = v46 - v47;
      v88 = v87 + 1;
    }
    *(_QWORD *)(a2 + 16) = v88;
    v89 = v86;
    v90 = &v46[2 * v86];
    a1 = v109;
    if (v90 == a3)
    {
      v92 = v46;
    }
    else
    {
      v91 = 2 * v89;
      v92 = v46;
      do
      {
        *(_WORD *)v92 = *(_WORD *)&v92[v91];
        v92 += 2;
      }
      while (&v92[v91] != a3);
    }
    if (v46 == v47)
      goto LABEL_164;
    *v92 = *v107;
    v92[1] = v107[1];
    if ((unint64_t)v49 >= 4 && v51 != a3)
    {
      v101 = v92 + 3;
      v102 = a3;
      do
      {
        *(v101 - 1) = *v102;
        *v101 = v102[1];
        v101 += 2;
        v102 += 2;
      }
      while (v102 != v51);
    }
  }
  else
  {
    v105 = v49 >> 1;
    v106 = v50;
    v104 = v46 - v47;
    if (v46 && v47)
    {
      v59 = v47;
      if (v46 != a3)
      {
        result = memmove(v47, v46, a3 - v46);
        v59 = &v47[2 * v54];
      }
    }
    else
    {
      v59 = v47;
    }
    *(_QWORD *)(a2 + 16) = v54;
    if (v58 != 1)
      goto LABEL_166;
    if (v59)
      v60 = v59 - (char *)v116;
    else
      v60 = 1;
    if (v60 == 1)
      v61 = 0;
    else
      v61 = (_WORD *)((char *)v116 + v60);
    *v61 = *(_WORD *)v107;
    v62 = v105 + v106;
    *(_QWORD *)(a2 + 16) = v105 + v106;
    if (v46 != v47 || a3 - v46 != 2)
LABEL_164:
      __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
    *v46 = *v107;
    v46[1] = v107[1];
    v63 = 1 - v105;
    v64 = v106 - v54;
    v65 = 1 - v105 - v64;
    if (1 - v105 > v64)
    {
      if (v51 != a3 && a3 && v46)
        result = memmove(&v51[2 * v65], a3, v51 - a3);
      v66 = &v51[2 * v65] - (char *)&v115;
      if (!v46)
        v66 = 1;
      v115 = v66;
      if (v64 == 1)
      {
        *a3 = *v107;
        a3[1] = v107[1];
        if (v65 == 1)
        {
          v67 = v51 - (char *)v116;
          if (!v46)
            v67 = 1;
          v68 = (_WORD *)((char *)v116 + v67);
          if (v67 == 1)
            v68 = 0;
          *v68 = *(_WORD *)v107;
          *(_QWORD *)(a2 + 16) += v63;
          a1 = v109;
          goto LABEL_55;
        }
LABEL_166:
        __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
      }
      goto LABEL_164;
    }
    v103 = v4;
    v96 = &v51[2 * v105];
    v97 = v96 - 2;
    if (v46)
    {
      v98 = v107;
      if (v104 != 2)
      {
        result = memmove(v51, v96 - 2, v51 - v97);
        v62 = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
      v98 = v107;
    }
    *(_QWORD *)(a2 + 16) = v62 + v63;
    if (v97 != a3)
    {
      v99 = 2 * v105;
      v100 = &v46[2 * v106 - 2];
      do
      {
        *(_WORD *)v100 = *(_WORD *)&v100[v99 - 2];
        v100 -= 2;
      }
      while (&v100[v99] != a3);
    }
    *a3 = *v98;
    a3[1] = v98[1];
    a1 = v109;
    v4 = v103;
  }
LABEL_55:
  v39 = &v5[v4];
  if (v4 == 1)
    v39 = 0;
  v40 = (_BYTE *)(a3 - v39);
  v41 = v5 - &v110;
  if (*(_QWORD *)v5 == 1)
    v41 = 0;
  v42 = &v40[*(_QWORD *)v5 + v41];
  v43 = &v110 - v111;
  if (v42 == (_BYTE *)1)
    v43 = 0;
  v44 = (uint64_t)&v42[v43];
  v45 = (_BYTE *)(v111 - (_BYTE *)a1);
  if (v44 == 1)
    v45 = 0;
  *a1 = &v45[v44];
  return result;
}

void sub_1A1796A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    v4 = (uint64_t *)a1[1];
    v5 = *v4;
    v6 = (char *)v4 + *v4;
    if (v5 == 1)
      v7 = 0;
    else
      v7 = v6;
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

double boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t *v7;
  _OWORD *v8;
  double result;
  _BYTE v10[8];

  v1 = a1 + 1;
  if (a1[1] != (uint64_t *)1)
    __assert_rtn("create_node", "implementation.hpp", 1984, "!node_");
  v3 = **a1;
  if (v3 == 1)
    v4 = 0;
  else
    v4 = (uint64_t)*a1 + v3;
  v5 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v4, 0x60uLL);
  v6 = (_BYTE *)(v10 - (_BYTE *)v1);
  if (v5 - v10 == 1)
    v6 = 0;
  v7 = (uint64_t *)&v6[v5 - v10];
  a1[1] = v7;
  if (v7 == (uint64_t *)1)
    v8 = 0;
  else
    v8 = (_OWORD *)((char *)v1 + (_QWORD)v7);
  result = 0.0;
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
  v8[4] = 0u;
  v8[5] = xmmword_1A17B6DA0;
  return result;
}

uint64_t boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 != 1)
  {
    v4 = *(char **)a1;
    v6 = v2 - (_QWORD)&v6 + v3;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v4, &v6);
  }
  return a1;
}

char *boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::create_buckets(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *result;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  double v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  _BYTE *v30;
  _BYTE v31[8];
  char v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = 1;
  v5 = (char *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4 == 1)
  {
    v34 = (uint64_t *)(a1 + 16);
    v35 = 1;
    boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::create_node(&v34);
    result = boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v33, (_QWORD *)(a1 + 8), a2 + 1);
    v7 = (char *)&v33 - v5;
    if (v33 == (char *)1)
      v7 = 0;
    v8 = &v33[v7];
    *(_QWORD *)v5 = &v33[v7];
    if (v35 == 1)
      __assert_rtn("release", "implementation.hpp", 1955, "node_");
    v9 = v35 + (char *)&v35 - (char *)&v33;
    v10 = (char *)&v33 - (char *)&v37;
    if (v9 == 1)
      v10 = 0;
    v37 = v10 + v9;
  }
  else
  {
    v11 = v4 + v5 - (char *)&v36 + 8 * *(_QWORD *)(a1 + 24);
    v36 = v11;
    v12 = (char *)&v36 - (char *)&v34;
    if (v11 == 1)
      v12 = 0;
    v13 = (uint64_t *)(v12 + v11);
    v34 = v13;
    if (v13 == (uint64_t *)1)
      v14 = 0;
    else
      v14 = (char *)&v34 + (_QWORD)v13;
    v15 = *(_QWORD *)v14;
    v16 = v14 - (char *)&v37;
    if (v15 == 1)
      v16 = 0;
    v37 = v16 + v15;
    boost::interprocess::allocator<boost::unordered::detail::bucket<boost::interprocess::offset_ptr<boost::unordered::detail::node<boost::interprocess::allocator<boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::interprocess::offset_ptr<pf::SceneTaxonomyNode,long,unsigned long,0ul>>,long,unsigned long,0ul>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocate((char *)&v34, (_QWORD *)(a1 + 8), a2 + 1);
    result = boost::unordered::detail::table<boost::unordered::detail::map<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>>>::destroy_buckets((_QWORD *)a1);
    v17 = (char *)((char *)&v34 - v5);
    if (v34 == (uint64_t *)1)
      v17 = 0;
    v8 = (char *)v34 + (_QWORD)v17;
    *(_QWORD *)(a1 + 56) = (char *)v34 + (_QWORD)v17;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (v8 == (char *)1)
  {
    v18 = 0;
  }
  else
  {
    v19 = (double)a2 * *(float *)(a1 + 40);
    v18 = vcvtpd_u64_f64(v19);
    if (ceil(v19) >= 1.84467441e19)
      v18 = -1;
  }
  *(_QWORD *)(a1 + 48) = v18;
  v20 = v5 - &v32;
  v21 = &v32 - (char *)&v34;
  v22 = v5 - (char *)&v33;
  if (v8 == (char *)1)
    v20 = 0;
  v23 = &v8[8 * a2 + v20];
  if (v8 == (char *)1)
    v22 = 0;
  if (v23 == (char *)1)
    v21 = 0;
  v24 = (uint64_t *)&v23[v21];
  v25 = &v8[v22];
  v33 = v25;
  v34 = v24;
  if (v25 == (char *)1)
    v26 = 0;
  else
    v26 = (char *)&v33 + (_QWORD)v25;
  if (v24 == (uint64_t *)1)
    v27 = 0;
  else
    v27 = (char *)&v34 + (_QWORD)v24;
  while (v26 != v27)
  {
    *(_QWORD *)v26 = 1;
    v28 = v33 + 8;
    v33 = v28;
    if (v28 == (char *)1)
      v26 = 0;
    else
      v26 = (char *)&v33 + (_QWORD)v28;
    if (v34 == (uint64_t *)1)
      v27 = 0;
    else
      v27 = (char *)&v34 + (_QWORD)v34;
  }
  v29 = (char *)&v37 - v31;
  if (v37 == 1)
    v29 = 0;
  v30 = (_BYTE *)(v31 - v27);
  if (v29 + v37 == 1)
    v30 = 0;
  *(_QWORD *)v26 = &v30[v29 + v37];
  return result;
}

void sub_1A1796E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::unordered::detail::node_constructor<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_constructor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::unordered::detail::node_tmp<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~node_tmp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != 1)
  {
    v4 = v2 + v3;
    boost::container::vector<std::pair<unsigned char,unsigned char>,boost::interprocess::allocator<std::pair<unsigned char,unsigned char>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::~vector((char *)(v2 + v3 + 48));
    boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~basic_string(v4);
    v5 = *(char **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v3 - (_QWORD)&v9;
    if (v6 == 1)
      v7 = 0;
    v9 = v7 + v6;
    std::allocator_traits<boost::interprocess::allocator<boost::unordered::detail::node<boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,std::pair<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>> const,pf::SceneGeographyNode>>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::deallocate[abi:ne180100](v5, &v9);
  }
  return a1;
}

void *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,unsigned int *,unsigned int>>(_QWORD *a1, uint64_t a2, char *a3, _DWORD *a4)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *result;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _DWORD *v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _DWORD *v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _DWORD *v64;
  int v65;
  char *v66;
  char *v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  _DWORD *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  int64_t v85;
  char *v86;
  int64_t v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *__dst;
  _DWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  char v96;
  _BYTE v97[8];
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;

  v5 = (char *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != *(_QWORD *)(a2 + 16))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (*(_QWORD *)a2 == 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 + a2;
  v9 = *(_QWORD *)(v8 + 48) >> 2;
  if (v9 == v6)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  if (v6 >> 61 > 4)
    v13 = -1;
  else
    v13 = 8 * v6;
  if (v6 >> 61)
    v14 = v13;
  else
    v14 = 8 * v6 / 5;
  v15 = v6 + 1;
  if (v14 < v9)
    v9 = v14;
  if (v15 > v9)
    v16 = v6 + 1;
  else
    v16 = v9;
  v17 = v5 - (char *)&v99;
  if (v4 == 1)
    v17 = 0;
  v99 = v17 + v4;
  v100 = v16;
  result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v98, (_QWORD *)a2, 7, v15, &v100, &v99);
  if (v99 == 1)
  {
    v94 = a1;
    v19 = v4;
    v20 = a4;
    if (v98 == 1)
      v21 = 0;
    else
      v21 = (char *)&v98 + v98;
    v22 = v100;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    if (v23 == 1)
      v25 = 0;
    else
      v25 = &v5[v23];
    v26 = (char *)&v101 - (char *)v102;
    v27 = v21 - (char *)&v101;
    if (!v21)
      v27 = 1;
    v101 = v27;
    if (v27 == 1)
      v26 = 0;
    v102[0] = v26 + v27;
    v102[1] = a2;
    v102[2] = v100;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      v28 = &v21[a3 - v25];
    }
    else
    {
      v28 = v21;
    }
    v29 = v28 - (char *)&v103;
    if (!v28)
      v29 = 1;
    v30 = (_DWORD *)((char *)&v103 + v29);
    if (v29 == 1)
      v30 = 0;
    *v30 = *v20;
    if (a3)
    {
      v31 = &v25[4 * v24];
      if (v31 != a3)
        memmove(v28 + 4, a3, v31 - a3);
    }
    v102[0] = 1;
    v4 = v19;
    a1 = v94;
    if (v25)
    {
      v32 = v5 - (char *)&v103;
      if (*(_QWORD *)v5 == 1)
        v32 = 0;
      v33 = v32 + *(_QWORD *)v5;
      v103 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v103 + v33))
      {
        if (*(_QWORD *)a2 == 1)
          v34 = 0;
        else
          v34 = (char *)(*(_QWORD *)a2 + a2);
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v103 + v33);
      }
    }
    v35 = v21 - (char *)&v103;
    if (!v21)
      v35 = 1;
    v36 = (char *)((char *)&v103 - v5);
    if (v35 == 1)
      v36 = 0;
    v37 = &v36[v35];
    v38 = *(_QWORD *)(a2 + 16) + 1;
    *(_QWORD *)(a2 + 8) = v37;
    *(_QWORD *)(a2 + 16) = v38;
    *(_QWORD *)(a2 + 24) = v22;
    result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v102);
    goto LABEL_151;
  }
  if (*(_QWORD *)v5 == 1)
    v39 = 0;
  else
    v39 = &v5[*(_QWORD *)v5];
  if (v98 == 1)
    v40 = 0;
  else
    v40 = (char *)&v98 + v98;
  v41 = v100;
  if (v39 == v40)
  {
    *(_QWORD *)(a2 + 24) = v100;
    v61 = *(_QWORD *)(a2 + 16);
    if (v61 == v41)
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    v62 = &v39[4 * v61];
    if (v62 != a3)
    {
      v63 = v62 - (char *)v102;
      if (!v39)
        v63 = 1;
      v64 = (_DWORD *)((char *)v102 + v63);
      if (v63 == 1)
        v64 = 0;
      *v64 = *((_DWORD *)v62 - 1);
      *(_QWORD *)(a2 + 16) = v61 + 1;
      if (v62 - 4 != a3)
        result = memmove(a3 + 4, a3, v62 - 4 - a3);
      v65 = *a4;
      goto LABEL_150;
    }
    v79 = a3 - (char *)v102;
    if (!v39)
      v79 = 1;
    v80 = (_DWORD *)((char *)v102 + v79);
    if (v79 == 1)
      v80 = 0;
    *v80 = *a4;
    v60 = v61 + 1;
    goto LABEL_143;
  }
  v93 = a4;
  v95 = a1;
  v42 = *(_QWORD *)(a2 + 16);
  __dst = &v39[4 * v42];
  v43 = v40 - (char *)v102;
  if (!v40)
    v43 = 1;
  v44 = (char *)((char *)v102 - v5);
  if (v43 == 1)
    v44 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 8) = &v44[v43];
  v45 = (a3 - v39) >> 2;
  v46 = (v39 - v40) >> 2;
  v47 = v45 + 1;
  v48 = v39 - (char *)&v103;
  if (!v39)
    v48 = 1;
  v103 = v48;
  if (v46 >= v47)
  {
    if (v39 == a3 || !v39)
    {
      v66 = v40;
    }
    else
    {
      v66 = v40;
      if (v40)
      {
        v67 = v39;
        v68 = a3 - v39;
        v69 = v42;
        result = memmove(v40, v67, v68);
        v42 = v69;
        v66 = &v40[4 * v45];
      }
    }
    if (v66)
      v70 = v66 - (char *)v102;
    else
      v70 = 1;
    if (v70 == 1)
      v71 = 0;
    else
      v71 = (_DWORD *)((char *)v102 + v70);
    *v71 = *v93;
    *(_QWORD *)(a2 + 16) = v47;
    v72 = v42 + 1;
    if (v46 >= v42 + 1)
    {
      v57 = v42 == v45;
      a1 = v95;
      if (v57)
        goto LABEL_151;
      v73 = __dst - a3;
      if (__dst == a3 || !a3 || !v40)
        goto LABEL_137;
    }
    else
    {
      v73 = __dst - a3;
      a1 = v95;
      if (__dst == a3)
        goto LABEL_137;
    }
    result = memmove(&v40[4 * v47], a3, v73);
LABEL_137:
    *(_QWORD *)(a2 + 16) = v72;
    goto LABEL_151;
  }
  if (v46 > v45)
  {
    v90 = v42;
    v91 = v39 - v40;
    if (v39 && v40)
    {
      v49 = v40;
      if (v39 != a3)
      {
        result = memmove(v40, v39, a3 - v39);
        v49 = &v40[4 * v45];
      }
    }
    else
    {
      v49 = v40;
    }
    *(_QWORD *)(a2 + 16) = v45;
    if (v46 - v45 != 1)
LABEL_164:
      __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 209, "n == 1");
    if (v49)
      v50 = v49 - (char *)v102;
    else
      v50 = 1;
    if (v50 == 1)
      v51 = 0;
    else
      v51 = (_DWORD *)((char *)v102 + v50);
    *v51 = *v93;
    *(_QWORD *)(a2 + 16) = v46 + v90;
    if (v39 == v40 && a3 - v39 == 4)
    {
      *(_DWORD *)v39 = *v93;
      v52 = 1 - v46;
      v53 = v90 - v45;
      v54 = 1 - v46 >= v90 - v45;
      v55 = 1 - v46 - (v90 - v45);
      if (v55 == 0 || !v54)
      {
        v81 = &__dst[4 * v46];
        v82 = v81 - 4;
        if (v39 && v91 != 4)
          result = memmove(__dst, v81 - 4, __dst - v82);
        *(_QWORD *)(a2 + 16) += v52;
        a1 = v95;
        if (v82 != a3)
          result = memmove(&__dst[-(v82 - a3)], a3, v82 - a3);
        v65 = *v93;
LABEL_150:
        *(_DWORD *)a3 = v65;
        goto LABEL_151;
      }
      if (__dst != a3 && a3 && v39)
        result = memmove(&__dst[4 * v55], a3, __dst - a3);
      v56 = &__dst[4 * v55] - (char *)&v101;
      if (!v39)
        v56 = 1;
      v101 = v56;
      if (v53 == 1)
      {
        *(_DWORD *)a3 = *v93;
        v57 = v55 == 1;
        a1 = v95;
        if (!v57)
          goto LABEL_164;
        v58 = __dst - (char *)v102;
        if (!v39)
          v58 = 1;
        v59 = (_DWORD *)((char *)v102 + v58);
        if (v58 == 1)
          v59 = 0;
        *v59 = *v93;
        v60 = *(_QWORD *)(a2 + 16) + v52;
LABEL_143:
        *(_QWORD *)(a2 + 16) = v60;
        goto LABEL_151;
      }
    }
LABEL_162:
    __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 215, "n == 1");
  }
  v74 = v42;
  if (v39 == v40)
  {
    v75 = v42;
  }
  else
  {
    result = memmove(v40, v39, v39 - v40);
    v75 = v74 + 1;
  }
  *(_QWORD *)(a2 + 16) = v75;
  a1 = v95;
  if (v39)
  {
    v76 = &v39[4 * v46];
    v77 = v39;
    if (v76 != a3)
    {
      v78 = a3 - v76;
      result = memmove(v39, v76, a3 - v76);
      v77 = &v39[v78];
    }
  }
  else
  {
    v77 = 0;
  }
  if (v39 == v40)
    goto LABEL_162;
  *(_DWORD *)v77 = *v93;
  if ((unint64_t)(v39 - v40) >= 5 && a3 && __dst != a3)
    result = memmove(v77 + 4, a3, __dst - a3);
LABEL_151:
  v83 = &v5[v4];
  if (v4 == 1)
    v83 = 0;
  v84 = (char *)(a3 - v83);
  v85 = v5 - &v96;
  if (*(_QWORD *)v5 == 1)
    v85 = 0;
  v86 = &v84[*(_QWORD *)v5 + v85];
  v87 = &v96 - v97;
  if (v86 == (char *)1)
    v87 = 0;
  v88 = &v86[v87];
  v89 = v97 - (_BYTE *)a1;
  if (v88 == (char *)1)
    v89 = 0;
  *a1 = &v88[v89];
  return result;
}

void sub_1A17975EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<unsigned int,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

uint64_t *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = a2[2];
  if (*a2 == 1)
    v5 = 0;
  else
    v5 = (char *)a2 + *a2;
  if (v5)
    v6 = v5 - (char *)a1;
  else
    v6 = 1;
  *a1 = v6;
  v7 = 1;
  a1[1] = 1;
  v8 = (char *)(a1 + 1);
  a1[2] = v4;
  a1[3] = 0;
  if (v4)
  {
    v16 = v4;
    v17 = 1;
    boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v15, a1, 1, v4, &v16, &v17);
    v9 = (char *)((char *)&v15 - v8);
    if (v15 == 1)
      v9 = 0;
    v7 = (uint64_t)&v9[v15];
    a1[1] = (uint64_t)&v9[v15];
    a1[3] = v16;
  }
  v10 = a2[2];
  if (v10)
  {
    if (v7 == 1)
      v11 = 0;
    else
      v11 = &v8[v7];
    v12 = a2[1];
    if (v12 == 1)
      v13 = 0;
    else
      v13 = (char *)a2 + v12 + 8;
    memmove(v11, v13, 4 * v10);
  }
  return a1;
}

char *boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>*,boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>&>>(_QWORD *a1, uint64_t a2, char *a3, char *a4)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char *v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *result;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __int8 *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t *v176;
  unint64_t v177;
  char *v178;
  int64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  int64_t v200;
  char *v201;
  int64_t v202;
  char *v203;
  int64_t v204;
  int v205;
  const char *v206;
  int v207;
  const char *v208;
  int64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  char v215;
  _BYTE v216[8];
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int64x2_t v228;
  uint64_t v229;
  _QWORD v230[2];

  v4 = (char *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != *(_QWORD *)(a2 + 16))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (*(_QWORD *)a2 == 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 + a2;
  v9 = *(_QWORD *)(v8 + 48) >> 5;
  if (v9 == v6)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  if (v6 >> 61 > 4)
    v13 = -1;
  else
    v13 = 8 * v6;
  if (v6 >> 61)
    v14 = v13;
  else
    v14 = 8 * v6 / 5;
  v15 = v6 + 1;
  if (v14 < v9)
    v9 = v14;
  if (v15 > v9)
    v16 = v6 + 1;
  else
    v16 = v9;
  v17 = v4 - (char *)&v218;
  if (v5 == 1)
    v17 = 0;
  v218 = v17 + v5;
  v219 = v16;
  boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v217, (_QWORD *)a2, 7, v15, &v219, &v218);
  if (v218 == 1)
  {
    v18 = a4;
    if (v217 == 1)
      v19 = 0;
    else
      v19 = (char *)&v217 + v217;
    v20 = v19 - (char *)&v226;
    if (!v19)
      v20 = 1;
    v21 = v19 - (char *)&v227;
    if (!v19)
      v21 = 1;
    v22 = v19 - (char *)&v220;
    v23 = v219;
    if (!v19)
      v22 = 1;
    v24 = (char *)&v220 - (char *)&v221;
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = v25 == 1;
    v28 = &v4[v25];
    if (v27)
      v29 = 0;
    else
      v29 = v28;
    if (v22 == 1)
      v24 = 0;
    v220 = v22;
    v221 = v24 + v22;
    v222 = a2;
    v223 = v219;
    v226 = v20;
    v227 = v21;
    v30 = (char *)&v227 - (char *)&v228;
    if (v21 == 1)
      v30 = 0;
    v228.i64[0] = v30 + v21;
    v229 = a2;
    if (v29 == a3)
    {
      v34 = v19;
    }
    else
    {
      v31 = v19 - (char *)v230;
      v32 = v29;
      v33 = v29;
      v34 = v19;
      do
      {
        if (v34)
          v35 = v31;
        else
          v35 = 1;
        if (v35 == 1)
          v36 = 0;
        else
          v36 = (char *)v230 + v35;
        if (*(_QWORD *)v33 == 1)
          v37 = 0;
        else
          v37 = &v32[*(_QWORD *)v33];
        if (v37)
          v38 = v37 - v36;
        else
          v38 = 1;
        *(_QWORD *)v36 = v38;
        v39 = *((_QWORD *)v33 + 1);
        v40 = v32 - v36;
        if (v39 == 1)
          v40 = 0;
        *((_QWORD *)v36 + 1) = v40 + v39;
        *((_OWORD *)v36 + 1) = *((_OWORD *)v33 + 1);
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = 0;
        *((_QWORD *)v33 + 1) = 1;
        v34 += 32;
        v32 += 32;
        v31 += 32;
        v33 += 32;
      }
      while (v33 != a3);
    }
    v64 = v34 - (char *)&v225;
    v65 = (char *)&v225 - (char *)&v228.u64[1];
    v66 = v34 - (char *)v230;
    if (!v34)
      v64 = 1;
    v225 = v64;
    if (!v34)
      v66 = 1;
    if (v64 == 1)
      v65 = 0;
    v228.i64[1] = v65 + v64;
    v230[0] = v66;
    if (v66 == 1)
      v67 = 0;
    else
      v67 = (_QWORD *)((char *)v230 + v66);
    boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v67, v18);
    v68 = &v29[32 * v26];
    v224 = v34 - (char *)&v224 + 32;
    if (v68 != a3)
    {
      v69 = a3;
      v70 = a3;
      do
      {
        v27 = &v228.i8[1] == v34;
        v34 += 32;
        if (v27)
          v71 = 0;
        else
          v71 = v34;
        if (*(_QWORD *)v70 == 1)
          v72 = 0;
        else
          v72 = &v69[*(_QWORD *)v70];
        if (v72)
          v73 = v72 - v71;
        else
          v73 = 1;
        *(_QWORD *)v71 = v73;
        v74 = *((_QWORD *)v70 + 1);
        v75 = v69 - v71;
        if (v74 == 1)
          v75 = 0;
        *((_QWORD *)v71 + 1) = v75 + v74;
        *((_OWORD *)v71 + 1) = *((_OWORD *)v70 + 1);
        *((_QWORD *)v70 + 2) = 0;
        *((_QWORD *)v70 + 3) = 0;
        *((_QWORD *)v70 + 1) = 1;
        v69 += 32;
        v70 += 32;
      }
      while (v70 != v68);
    }
    v228 = vdupq_n_s64(1uLL);
    boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(v228.i64);
    v221 = 1;
    if (v29)
    {
      v76 = v4 - (char *)&v228;
      if (*(_QWORD *)v4 == 1)
        v76 = 0;
      v77 = v76 + *(_QWORD *)v4;
      v228.i64[0] = v77;
      if (v77 != 1 && &v228.i8[v77])
      {
        if (*(_QWORD *)a2 == 1)
          v78 = 0;
        else
          v78 = (char *)(*(_QWORD *)a2 + a2);
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v78, (uint64_t)v228.i64 + v77);
      }
    }
    v79 = v19 - (char *)&v228;
    if (!v19)
      v79 = 1;
    v80 = (char *)((char *)&v228 - v4);
    if (v79 == 1)
      v80 = 0;
    v81 = &v80[v79];
    v82 = *(_QWORD *)(a2 + 16) + 1;
    *(_QWORD *)(a2 + 8) = v81;
    *(_QWORD *)(a2 + 16) = v82;
    *(_QWORD *)(a2 + 24) = v23;
    result = (char *)boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(&v221);
    goto LABEL_339;
  }
  if (*(_QWORD *)v4 == 1)
    v41 = 0;
  else
    v41 = &v4[*(_QWORD *)v4];
  if (v217 == 1)
    v42 = 0;
  else
    v42 = (char *)&v217 + v217;
  v43 = v219;
  v44 = v41 - v42;
  if (v41 != v42)
  {
    v213 = a1;
    v214 = a4;
    v45 = *(_QWORD *)(a2 + 16);
    v46 = &v41[32 * v45];
    v47 = v42 - (char *)&v228;
    if (!v42)
      v47 = 1;
    v48 = (char *)((char *)&v228 - v4);
    if (v47 == 1)
      v48 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v43;
    *(_QWORD *)(a2 + 8) = &v48[v47];
    v49 = (a3 - v41) >> 5;
    v50 = v44 >> 5;
    v51 = v49 + 1;
    v52 = v41 - (char *)&v227;
    if (!v41)
      v52 = 1;
    v227 = v52;
    v53 = (char *)&v227 - (char *)&v228;
    if (v52 == 1)
      v53 = 0;
    v228.i64[0] = v53 + v52;
    v228.i64[1] = a2;
    v229 = v45;
    if (v50 >= v51)
    {
      v211 = v44 >> 5;
      v100 = v45;
      if (v41 == a3)
      {
        v104 = v42;
      }
      else
      {
        v101 = v42 - (char *)&v221;
        v102 = v41;
        v103 = v41;
        v104 = v42;
        do
        {
          if (v104)
            v105 = v101;
          else
            v105 = 1;
          if (v105 == 1)
            v106 = 0;
          else
            v106 = (char *)&v221 + v105;
          if (*(_QWORD *)v103 == 1)
            v107 = 0;
          else
            v107 = &v102[*(_QWORD *)v103];
          if (v107)
            v108 = v107 - v106;
          else
            v108 = 1;
          *(_QWORD *)v106 = v108;
          v109 = *((_QWORD *)v103 + 1);
          v110 = v102 - v106;
          if (v109 == 1)
            v110 = 0;
          *((_QWORD *)v106 + 1) = v110 + v109;
          *((_OWORD *)v106 + 1) = *((_OWORD *)v103 + 1);
          *((_QWORD *)v103 + 2) = 0;
          *((_QWORD *)v103 + 3) = 0;
          *((_QWORD *)v103 + 1) = 1;
          v104 += 32;
          v102 += 32;
          v101 += 32;
          v103 += 32;
        }
        while (v103 != a3);
      }
      *(_QWORD *)(a2 + 16) = v49;
      v127 = v104 - (char *)&v221;
      if (!v104)
        v127 = 1;
      v221 = v127;
      if (v127 == 1)
        v128 = 0;
      else
        v128 = (uint64_t *)((char *)&v221 + v127);
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v128, v214);
      *(_QWORD *)(a2 + 16) = v51;
      v129 = v100 + 1;
      v130 = v100 + 1 - v211;
      if (v100 + 1 <= v211)
      {
        if (v100 != v49)
        {
          if (v46 != a3)
          {
            v144 = &v42[32 * v51];
            v145 = &v42[32 * v49] - (char *)&v221 + 32;
            v146 = a3;
            v147 = a3;
            do
            {
              if (v144)
                v148 = v145;
              else
                v148 = 1;
              if (v148 == 1)
                v149 = 0;
              else
                v149 = (char *)&v221 + v148;
              if (*(_QWORD *)v147 == 1)
                v150 = 0;
              else
                v150 = &v146[*(_QWORD *)v147];
              if (v150)
                v151 = v150 - v149;
              else
                v151 = 1;
              *(_QWORD *)v149 = v151;
              v152 = *((_QWORD *)v147 + 1);
              v153 = v146 - v149;
              if (v152 == 1)
                v153 = 0;
              *((_QWORD *)v149 + 1) = v153 + v152;
              *((_OWORD *)v149 + 1) = *((_OWORD *)v147 + 1);
              *((_QWORD *)v147 + 2) = 0;
              *((_QWORD *)v147 + 3) = 0;
              *((_QWORD *)v147 + 1) = 1;
              v144 += 32;
              v146 += 32;
              v145 += 32;
              v147 += 32;
            }
            while (v147 != v46);
          }
          *(_QWORD *)(a2 + 16) = v129;
        }
        v228.i64[0] = 1;
        v229 = 0;
        a1 = v213;
      }
      else
      {
        if (v211 != v51)
        {
          v131 = &v42[32 * v51];
          v132 = v49 - v211 + 1;
          v133 = &v42[32 * v49] - (char *)&v221 + 32;
          v134 = a3;
          v135 = a3;
          do
          {
            if (v131)
              v136 = v133;
            else
              v136 = 1;
            if (v136 == 1)
              v137 = 0;
            else
              v137 = (char *)&v221 + v136;
            if (*(_QWORD *)v135 == 1)
              v138 = 0;
            else
              v138 = &v134[*(_QWORD *)v135];
            if (v138)
              v139 = v138 - v137;
            else
              v139 = 1;
            *(_QWORD *)v137 = v139;
            v140 = *((_QWORD *)v135 + 1);
            v141 = v134 - v137;
            if (v140 == 1)
              v141 = 0;
            *((_QWORD *)v137 + 1) = v141 + v140;
            *((_OWORD *)v137 + 1) = *((_OWORD *)v135 + 1);
            *((_QWORD *)v135 + 2) = 0;
            *((_QWORD *)v135 + 3) = 0;
            v131 += 32;
            *((_QWORD *)v135 + 1) = 1;
            v134 += 32;
            v133 += 32;
            v135 += 32;
          }
          while (!__CFADD__(v132++, 1));
        }
        v229 -= v130;
        v228.i64[0] += 32 * v130;
        *(_QWORD *)(a2 + 16) = v129;
        v143 = &a3[32 * (v211 - v51)];
        a1 = v213;
        if (v143 != v41)
        {
          while (v143 != v46)
          {
            if (v143 != v41)
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v41, v143);
            v143 += 32;
            v41 += 32;
          }
        }
        v228.i64[0] = 1;
        v229 = 0;
      }
      goto LABEL_338;
    }
    if (v50 <= v49)
    {
      if (v41 != v42)
      {
        v111 = v42 - (char *)&v221;
        v112 = v41;
        v113 = v44 >> 5;
        v114 = v41;
        v115 = v42;
        do
        {
          if (v115)
            v116 = v111;
          else
            v116 = 1;
          v221 = v116;
          if (v116 == 1)
            v117 = 0;
          else
            v117 = (char *)&v221 + v116;
          if (*(_QWORD *)v114 == 1)
            v118 = 0;
          else
            v118 = &v112[*(_QWORD *)v114];
          if (v118)
            v119 = v118 - v117;
          else
            v119 = 1;
          *(_QWORD *)v117 = v119;
          v120 = *((_QWORD *)v114 + 1);
          v121 = v112 - v117;
          if (v120 == 1)
            v121 = 0;
          *((_QWORD *)v117 + 1) = v121 + v120;
          *((_OWORD *)v117 + 1) = *((_OWORD *)v114 + 1);
          *((_QWORD *)v114 + 2) = 0;
          *((_QWORD *)v114 + 3) = 0;
          v115 += 32;
          *((_QWORD *)v114 + 1) = 1;
          v112 += 32;
          v111 += 32;
          v114 += 32;
          --v113;
        }
        while (v113);
      }
      v228.i64[0] = 1;
      v229 = 0;
      if (v41 == v42)
        v122 = v45;
      else
        v122 = v45 + 1;
      *(_QWORD *)(a2 + 16) = v122;
      a1 = v213;
      if (&v41[32 * v50] == a3)
      {
        v124 = v41;
      }
      else
      {
        v123 = 32 * v50;
        v124 = v41;
        do
        {
          if (v123)
            boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v124, &v124[v123]);
          v124 += 32;
        }
        while (&v124[v123] != a3);
      }
      if (v41 == v42)
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
      if (v124 != v214)
      {
        v194 = *((_QWORD *)v214 + 1);
        if (v194 == 1)
          v195 = 0;
        else
          v195 = &v214[v194 + 8];
        boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(v124, v195, &v195[4 * *((_QWORD *)v214 + 2)]);
      }
      if ((unint64_t)(v41 - v42) >= 0x40 && v46 != a3)
      {
        v196 = v124 + 32;
        v197 = a3;
        do
        {
          if (v197 != v196)
            boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v196, v197);
          v197 += 32;
          v196 += 32;
        }
        while (v197 != v46);
      }
      goto LABEL_338;
    }
    v209 = v41 - v42;
    if (v41 == a3)
    {
      v57 = v42;
    }
    else
    {
      v54 = v42 - (char *)&v221;
      v55 = v41;
      v56 = v41;
      v57 = v42;
      do
      {
        if (v57)
          v58 = v54;
        else
          v58 = 1;
        v221 = v58;
        if (v58 == 1)
          v59 = 0;
        else
          v59 = (char *)&v221 + v58;
        if (*(_QWORD *)v56 == 1)
          v60 = 0;
        else
          v60 = &v55[*(_QWORD *)v56];
        if (v60)
          v61 = v60 - v59;
        else
          v61 = 1;
        *(_QWORD *)v59 = v61;
        v62 = *((_QWORD *)v56 + 1);
        v63 = v55 - v59;
        if (v62 == 1)
          v63 = 0;
        *((_QWORD *)v59 + 1) = v63 + v62;
        *((_OWORD *)v59 + 1) = *((_OWORD *)v56 + 1);
        *((_QWORD *)v56 + 2) = 0;
        *((_QWORD *)v56 + 3) = 0;
        *((_QWORD *)v56 + 1) = 1;
        v57 += 32;
        v55 += 32;
        v54 += 32;
        v56 += 32;
      }
      while (v56 != a3);
    }
    v210 = v45;
    v212 = v44 >> 5;
    *(_QWORD *)(a2 + 16) = v49;
    if (v50 - v49 == 1)
    {
      if (v57)
        v154 = v57 - (char *)&v221;
      else
        v154 = 1;
      v221 = v154;
      if (v154 == 1)
        v155 = 0;
      else
        v155 = (uint64_t *)((char *)&v221 + v154);
      boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v155, v214);
      *(_QWORD *)(a2 + 16) = v212 + v210;
      v228.i64[0] = 1;
      v229 = 0;
      if (v41 != v42)
        __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
      if (a3 - v41 == 32)
      {
        if (v214 != v41)
        {
          v156 = *((_QWORD *)v214 + 1);
          v157 = &v214[v156 + 8];
          if (v156 == 1)
            v158 = 0;
          else
            v158 = v157;
          boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(v41, v158, &v158[4 * *((_QWORD *)v214 + 2)]);
        }
        v159 = 1 - v212;
        v160 = 1 - v212 - (v210 - v49);
        if (1 - v212 > v210 - v49)
        {
          if (v46 != a3)
          {
            v161 = &v41[32 * v49] - (char *)&v221 - 32 * v212 + 32;
            v162 = a3;
            v163 = a3;
            v164 = &v46[32 * v160];
            do
            {
              if (v164)
                v165 = v161;
              else
                v165 = 1;
              if (v165 == 1)
                v166 = 0;
              else
                v166 = (char *)&v221 + v165;
              if (*(_QWORD *)v163 == 1)
                v167 = 0;
              else
                v167 = &v162[*(_QWORD *)v163];
              if (v167)
                v168 = v167 - v166;
              else
                v168 = 1;
              *(_QWORD *)v166 = v168;
              v169 = *((_QWORD *)v163 + 1);
              v170 = v162 - v166;
              if (v169 == 1)
                v170 = 0;
              *((_QWORD *)v166 + 1) = v170 + v169;
              *((_OWORD *)v166 + 1) = *((_OWORD *)v163 + 1);
              *((_QWORD *)v163 + 2) = 0;
              *((_QWORD *)v163 + 3) = 0;
              *((_QWORD *)v163 + 1) = 1;
              v164 += 32;
              v162 += 32;
              v161 += 32;
              v163 += 32;
            }
            while (v163 != v46);
          }
          v171 = &v46[32 * v160] - (char *)&v226;
          if (!v41)
            v171 = 1;
          v226 = v171;
          v172 = (char *)&v226 - (char *)&v221;
          if (v171 == 1)
            v172 = 0;
          v221 = v172 + v171;
          v222 = a2;
          v223 = (v46 - a3) >> 5;
          if (v210 - v49 == 1)
          {
            a1 = v213;
            if (v214 != a3)
            {
              v173 = *((_QWORD *)v214 + 1);
              if (v173 == 1)
                v174 = 0;
              else
                v174 = &v214[v173 + 8];
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v174, &v174[4 * *((_QWORD *)v214 + 2)]);
            }
            if (v160 == 1)
            {
              v175 = v46 - (char *)v230;
              if (!v41)
                v175 = 1;
              v230[0] = v175;
              if (v175 == 1)
                v176 = 0;
              else
                v176 = (_QWORD *)((char *)v230 + v175);
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v176, v214);
              *(_QWORD *)(a2 + 16) += v159;
              v221 = 1;
              v223 = 0;
              boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v221);
LABEL_338:
              result = (char *)boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(&v228);
              goto LABEL_339;
            }
            v207 = 181;
            v208 = "uninitialized_copy_n_and_update";
          }
          else
          {
            v207 = 187;
            v208 = "copy_n_and_update";
          }
          __assert_rtn(v208, "advanced_insert_int.hpp", v207, "n == 1");
        }
        if (v209 != 32)
        {
          v177 = 0;
          v178 = &v41[32 * v210];
          v179 = v178 - (char *)&v221;
          v180 = (uint64_t)&v178[32 * v212 - 32];
          do
          {
            v181 = &v41[32 * v210 + 32 * v212 + v177];
            v182 = v179 + v177;
            if (!&v46[v177])
              v182 = 1;
            if (v182 == 1)
              v183 = 0;
            else
              v183 = (char *)&v221 + v182;
            v184 = *((_QWORD *)v181 - 4);
            if (v184 == 1)
              v185 = 0;
            else
              v185 = v180 + v177 + v184;
            if (v185)
              v186 = v185 - (_QWORD)v183;
            else
              v186 = 1;
            *(_QWORD *)v183 = v186;
            v187 = *((_QWORD *)v181 - 3);
            v188 = v180 + v177 - (_QWORD)v183;
            if (v187 == 1)
              v188 = 0;
            *((_QWORD *)v183 + 1) = v188 + v187;
            *((_OWORD *)v183 + 1) = *((_OWORD *)v181 - 1);
            *((_QWORD *)v181 - 2) = 0;
            *((_QWORD *)v181 - 1) = 0;
            *((_QWORD *)v181 - 3) = 1;
            v177 += 32;
          }
          while (32 - 32 * v212 != v177);
        }
        *(_QWORD *)(a2 + 16) += v159;
        a1 = v213;
        if (&v46[32 * v212 - 32] != a3)
        {
          v189 = &v41[32 * v210 - 32];
          v190 = 32 * v212;
          do
          {
            if (v190 != 32)
              boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(v189, &v189[v190 - 32]);
            v189 -= 32;
          }
          while (&v189[v190] != a3);
        }
        if (v214 != a3)
        {
          v191 = *((_QWORD *)v214 + 1);
          v192 = &v214[v191 + 8];
          if (v191 == 1)
            v193 = 0;
          else
            v193 = v192;
          boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v193, &v193[4 * *((_QWORD *)v214 + 2)]);
        }
        goto LABEL_338;
      }
      v205 = 187;
      v206 = "copy_n_and_update";
    }
    else
    {
      v205 = 181;
      v206 = "uninitialized_copy_n_and_update";
    }
    __assert_rtn(v206, "advanced_insert_int.hpp", v205, "n == 1");
  }
  *(_QWORD *)(a2 + 24) = v219;
  v84 = *(_QWORD *)(a2 + 16);
  if (v84 == v43)
    __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
  v85 = &v41[32 * v84];
  if (v85 == a3)
  {
    v125 = a3 - (char *)&v228;
    if (!v41)
      v125 = 1;
    v228.i64[0] = v125;
    if (v125 == 1)
      v126 = 0;
    else
      v126 = (uint64_t *)((char *)v228.i64 + v125);
    result = (char *)boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::vector(v126, a4);
    ++*(_QWORD *)(a2 + 16);
  }
  else
  {
    result = v85 - 32;
    v86 = *((_QWORD *)v85 - 4);
    v87 = v85 - (char *)&v228;
    if (!v41)
      v87 = 1;
    v88 = &v228.i8[v87];
    if (v87 == 1)
      v88 = 0;
    if (v86 == 1)
      v89 = 0;
    else
      v89 = &result[v86];
    if (v89)
      v90 = v89 - v88;
    else
      v90 = 1;
    *(_QWORD *)v88 = v90;
    v93 = *((_QWORD *)v85 - 3);
    v91 = v85 - 24;
    v92 = v93;
    v94 = v91 - (v88 + 8);
    if (v93 == 1)
      v94 = 0;
    *((_QWORD *)v88 + 1) = v94 + v92;
    *((_OWORD *)v88 + 1) = *(_OWORD *)(v91 + 8);
    *((_QWORD *)v91 + 1) = 0;
    *((_QWORD *)v91 + 2) = 0;
    *(_QWORD *)v91 = 1;
    ++*(_QWORD *)(a2 + 16);
    if (result != a3)
    {
      do
      {
        v95 = result - 32;
        boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(result, (_QWORD *)result - 4);
        result = v95;
      }
      while (v95 != a3);
    }
    if (a4 != a3)
    {
      v97 = *((_QWORD *)a4 + 1);
      v96 = a4 + 8;
      v98 = (char *)v96 + v97;
      if (v97 == 1)
        v99 = 0;
      else
        v99 = v98;
      result = (char *)boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(a3, v99, &v99[4 * v96[1]]);
    }
  }
LABEL_339:
  v198 = &v4[v5];
  if (v5 == 1)
    v198 = 0;
  v199 = (char *)(a3 - v198);
  v200 = v4 - &v215;
  if (*(_QWORD *)v4 == 1)
    v200 = 0;
  v201 = &v199[*(_QWORD *)v4 + v200];
  v202 = &v215 - v216;
  if (v201 == (char *)1)
    v202 = 0;
  v203 = &v201[v202];
  v204 = v216 - (_BYTE *)a1;
  if (v203 == (char *)1)
    v204 = 0;
  *a1 = &v203[v204];
  return result;
}

void sub_1A17985CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n((_QWORD *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

_QWORD *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    v4 = (uint64_t *)a1[1];
    v5 = *v4;
    v6 = (char *)v4 + *v4;
    if (v5 == 1)
      v7 = 0;
    else
      v7 = v6;
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

uint64_t *boost::container::dtl::scoped_destructor_range<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_range(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = a1 + 1;
  v2 = a1[1];
  if (*a1 == 1)
    v4 = 0;
  else
    v4 = (char *)a1 + *a1;
  if (v2 == 1)
    v5 = 0;
  else
    v5 = (char *)v3 + v2;
  if (v4 != v5)
  {
    do
    {
      if (v4)
        v6 = v4 - (char *)&v11;
      else
        v6 = 1;
      v11 = v6;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v11);
      v7 = a1[1];
      v8 = *a1 + 32;
      *a1 = v8;
      if (v8 == 1)
        v4 = 0;
      else
        v4 = (char *)a1 + v8;
      if (v7 == 1)
        v9 = 0;
      else
        v9 = (char *)v3 + v7;
    }
    while (v4 != v9);
  }
  return a1;
}

char *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_move_assign<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *result;
  char *v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[8];
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;

  v4 = a2 + 2;
  v3 = a2[2];
  if (a1 == a2 && v3)
    __assert_rtn("priv_move_assign", "vector.hpp", 2480, "this != &x || x.size() == 0");
  v6 = (char *)(a2 + 1);
  v5 = a2[1];
  v7 = (char *)(a2 + 1) - (char *)&v46;
  if (v5 == 1)
    v7 = 0;
  v46 = v7 + v5;
  if (*a2 == 1)
    result = 0;
  else
    result = (char *)a2 + *a2;
  if (*a1 == 1)
    v9 = 0;
  else
    v9 = (char *)a1 + *a1;
  if (result != v9)
  {
    v10 = v6 - (char *)&v52;
    if (v5 == 1)
      v10 = 0;
    v11 = v10 + v5;
    if (v10 + v5 == 1)
      v12 = 0;
    else
      v12 = (char *)&v52 - (char *)&v45;
    v13 = v12 + v11;
    v52 = v11;
    v14 = (char *)&v52 - (char *)&v44;
    if (v11 == 1)
      v14 = 0;
    v15 = v14 + v11;
    v44 = v15;
    v45 = v12 + v11;
    if (v15 == 1 && v3 != 0)
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    v17 = (char *)&v45 - v47;
    if (v13 == 1)
      v17 = 0;
    v18 = v17 + v13;
    if (v18 == 1)
      v19 = 0;
    else
      v19 = &v47[v18];
    v20 = v15 + 4 * v3;
    v44 = v20;
    v21 = (char *)&v44 - (char *)&v52;
    if (v20 == 1)
      v21 = 0;
    v22 = v21 + v20;
    if (v22 == 1)
      v23 = 0;
    else
      v23 = (char *)&v52 + v22;
    v24 = v23 - v19;
    v25 = (v23 - v19) >> 2;
    if (v25 > a1[3])
    {
      v27 = (char *)(a1 + 1);
      v26 = a1[1];
      v28 = (char *)(a1 + 1) - (char *)&v50;
      if (v26 == 1)
        v28 = 0;
      v50 = v28 + v26;
      v51 = (v23 - v19) >> 2;
      result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v49, a1, 3, v51, &v51, &v50);
      if (v50 == 1)
      {
        v29 = v27 - (char *)&v48;
        if (*(_QWORD *)v27 == 1)
          v29 = 0;
        v30 = v29 + *(_QWORD *)v27;
        v48 = v30;
        if (v30 != 1)
        {
          a1[2] = 0;
          v52 = v30 + (char *)&v48 - (char *)&v52;
          if (v52 != 1)
          {
            if ((int64_t *)((char *)&v48 + v30))
            {
              if (*a1 == 1)
                v31 = 0;
              else
                v31 = (char *)a1 + *a1;
              result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v31, (uint64_t)&v48 + v30);
            }
          }
        }
        v32 = 0;
        v33 = (char *)((char *)&v49 - v27);
        if (v49 == 1)
          v33 = 0;
        v34 = &v33[v49];
        v35 = v51;
        a1[2] = 0;
        a1[3] = v35;
        a1[1] = v34;
        if (v34 == (char *)1)
          v36 = 0;
        else
          v36 = &v27[(_QWORD)v34];
        if (v19 && v19 != v23 && v36)
        {
          result = (char *)memmove(v36, v19, v23 - v19);
          v37 = &v36[4 * v25];
          v32 = a1[2];
        }
        else
        {
          v37 = v36;
        }
        a1[2] = v32 + ((v37 - v36) >> 2);
        goto LABEL_76;
      }
      a1[3] = v51;
    }
    v41 = a1[1];
    if (v41 == 1)
      v42 = 0;
    else
      v42 = (char *)a1 + v41 + 8;
    v43 = a1[2];
    if (v25 <= v43)
    {
      if (v23 == v19)
      {
LABEL_75:
        a1[2] = v25;
        goto LABEL_76;
      }
    }
    else
    {
      if (v43)
      {
        result = (char *)memmove(v42, v19, 4 * v43);
        v19 += 4 * v43;
        v42 += 4 * v43;
      }
      if (v25 == v43)
        goto LABEL_75;
      v24 = 4 * (v25 - v43);
    }
    result = (char *)memmove(v42, v19, v24);
    goto LABEL_75;
  }
  v39 = (char *)(a1 + 1);
  v38 = a1[1];
  a1[2] = 0;
  if (v38 != 1)
  {
    v52 = v38 + v39 - (char *)&v52;
    if (v52 != 1)
    {
      if (&v39[v38])
        result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(result, (uint64_t)&v39[v38]);
    }
  }
  v40 = (char *)(v6 - v39);
  if (*(_QWORD *)v6 == 1)
    v40 = 0;
  a1[1] = &v40[*(_QWORD *)v6];
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  *(_QWORD *)v6 = 1;
  v4[1] = 0;
LABEL_76:
  *v4 = 0;
  return result;
}

_QWORD *boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::assign<unsigned int *>(_QWORD *result, char *__src, char *a3)
{
  char *v4;
  _QWORD *v5;
  size_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  void *v26;
  const void *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v4 = __src;
  v5 = result;
  v6 = a3 - __src;
  v7 = (a3 - __src) >> 2;
  if (v7 <= result[3])
    goto LABEL_27;
  v9 = (char *)(result + 1);
  v8 = result[1];
  v10 = (char *)(result + 1) - (char *)&v30;
  if (v8 == 1)
    v10 = 0;
  v30 = v10 + v8;
  v31 = (a3 - __src) >> 2;
  result = boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v29, result, 3, v7, (unint64_t *)&v31, &v30);
  if (v30 != 1)
  {
    v5[3] = v31;
LABEL_27:
    v22 = v5[1];
    if (v22 == 1)
      v23 = 0;
    else
      v23 = (char *)v5 + v22 + 8;
    v24 = v5[2];
    if (v7 <= v24)
    {
      if (a3 == v4)
      {
LABEL_38:
        v5[2] = v7;
        return result;
      }
      v26 = v23;
      v27 = v4;
      v25 = v6;
    }
    else
    {
      if (v24)
      {
        result = memmove(v23, v4, 4 * v24);
        v4 += 4 * v24;
        v23 += 4 * v24;
      }
      if (v7 == v24)
        goto LABEL_38;
      v25 = 4 * (v7 - v24);
      v26 = v23;
      v27 = v4;
    }
    result = memmove(v26, v27, v25);
    goto LABEL_38;
  }
  v11 = v9 - (char *)&v28;
  if (*(_QWORD *)v9 == 1)
    v11 = 0;
  v12 = v11 + *(_QWORD *)v9;
  v28 = v12;
  if (v12 != 1)
  {
    v5[2] = 0;
    v32 = v12 + (char *)&v28 - (char *)&v32;
    v13 = (char *)&v28 + v12;
    if (v32 != 1 && v13 != 0)
    {
      if (*v5 == 1)
        v15 = 0;
      else
        v15 = (char *)v5 + *v5;
      result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v15, (uint64_t)v13);
    }
  }
  v16 = 0;
  v17 = (char *)((char *)&v29 - v9);
  if (v29 == 1)
    v17 = 0;
  v18 = &v17[v29];
  v19 = v31;
  v5[2] = 0;
  v5[3] = v19;
  v5[1] = v18;
  if (v18 == (char *)1)
    v20 = 0;
  else
    v20 = &v9[(_QWORD)v18];
  if (v4 && v4 != a3 && v20)
  {
    result = memmove(v20, v4, v6);
    v21 = &v20[4 * v7];
    v16 = v5[2];
  }
  else
  {
    v21 = v20;
  }
  v5[2] = v16 + ((v21 - v20) >> 2);
  return result;
}

_QWORD *boost::container::dtl::scoped_destructor_n<boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_destructor_n(_QWORD *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[2];
  if (v2)
  {
    if (*a1 == 1)
      v3 = 0;
    else
      v3 = (char *)a1 + *a1;
    v4 = v3 - (char *)&v7;
    do
    {
      a1[2] = v2 - 1;
      if (v3)
        v5 = v4;
      else
        v5 = 1;
      v7 = v5;
      boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::destroy(&v7);
      v3 += 32;
      v2 = a1[2];
      v4 += 32;
    }
    while (v2);
  }
  return a1;
}

char *boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(uint64_t *a1, _QWORD *a2, char a3, unint64_t a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  char *result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  boost::interprocess::interprocess_exception *exception;
  boost::interprocess::interprocess_exception *v20;
  uint64_t v21;
  unint64_t v22;

  v9 = 0;
  result = 0;
  v11 = (uint64_t)a6 + *a6;
  if (*a6 == 1)
    v11 = 0;
  if (*a2 == 1)
    v12 = 0;
  else
    v12 = (uint64_t)a2 + *a2;
  v21 = v11;
  v13 = *a5;
  v14 = *(_QWORD *)(v12 + 48) >> 2;
  if (v14 >= a4 && v13 <= v14)
  {
    v22 = 4 * v13;
    result = boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_allocate(v12, a3 | 0x10u, 4 * a4, &v22, &v21, 4uLL);
    v9 = v21;
    *a5 = v22 >> 2;
  }
  if ((result & 3) != 0)
    __assert_rtn("allocation_command", "rbtree_best_fit.hpp", 698, "0 == ((std::size_t)ret % ::boost::container::dtl::alignment_of<T>::value)");
  if ((a3 & 0x10) == 0 && !result)
  {
    exception = (boost::interprocess::interprocess_exception *)__cxa_allocate_exception(0x28uLL);
    v20 = boost::interprocess::interprocess_exception::interprocess_exception(exception, "::boost::interprocess::bad_alloc");
    *(_QWORD *)v20 = &off_1E45A10D8;
  }
  v17 = result - (char *)a1;
  if (!result)
    v17 = 1;
  *a1 = v17;
  v18 = v9 - (_QWORD)a6;
  if (!v9)
    v18 = 1;
  *a6 = v18;
  return result;
}

_QWORD *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    v4 = (uint64_t *)a1[1];
    v5 = *v4;
    v6 = (char *)v4 + *v4;
    if (v5 == 1)
      v7 = 0;
    else
      v7 = v6;
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

void *boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,double *,double &>>(_QWORD *a1, uint64_t a2, char *a3, _QWORD *a4)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *result;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  int64_t v85;
  char *v86;
  int64_t v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *__dst;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  char v96;
  _BYTE v97[8];
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;

  v5 = (char *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 != *(_QWORD *)(a2 + 16))
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  if (*(_QWORD *)a2 == 1)
    v8 = 0;
  else
    v8 = *(_QWORD *)a2 + a2;
  v9 = *(_QWORD *)(v8 + 48) >> 3;
  if (v9 == v6)
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", (const char *)a2);
  if (v6 >> 61 > 4)
    v13 = -1;
  else
    v13 = 8 * v6;
  if (v6 >> 61)
    v14 = v13;
  else
    v14 = 8 * v6 / 5;
  v15 = v6 + 1;
  if (v14 < v9)
    v9 = v14;
  if (v15 > v9)
    v16 = v6 + 1;
  else
    v16 = v9;
  v17 = v5 - (char *)&v99;
  if (v4 == 1)
    v17 = 0;
  v99 = v17 + v4;
  v100 = v16;
  result = boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>::allocation_command(&v98, (_QWORD *)a2, 7, v15, &v100, &v99);
  if (v99 == 1)
  {
    v94 = a1;
    v19 = v4;
    v20 = a4;
    if (v98 == 1)
      v21 = 0;
    else
      v21 = (char *)&v98 + v98;
    v22 = v100;
    v23 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    if (v23 == 1)
      v25 = 0;
    else
      v25 = &v5[v23];
    v26 = (char *)&v101 - (char *)v102;
    v27 = v21 - (char *)&v101;
    if (!v21)
      v27 = 1;
    v101 = v27;
    if (v27 == 1)
      v26 = 0;
    v102[0] = v26 + v27;
    v102[1] = a2;
    v102[2] = v100;
    if (v25 && v25 != a3 && v21)
    {
      memmove(v21, v25, a3 - v25);
      v28 = &v21[a3 - v25];
    }
    else
    {
      v28 = v21;
    }
    v29 = v28 - (char *)&v103;
    if (!v28)
      v29 = 1;
    v30 = (uint64_t *)((char *)&v103 + v29);
    if (v29 == 1)
      v30 = 0;
    *v30 = *v20;
    if (a3)
    {
      v31 = &v25[8 * v24];
      if (v31 != a3)
        memmove(v28 + 8, a3, v31 - a3);
    }
    v102[0] = 1;
    v4 = v19;
    a1 = v94;
    if (v25)
    {
      v32 = v5 - (char *)&v103;
      if (*(_QWORD *)v5 == 1)
        v32 = 0;
      v33 = v32 + *(_QWORD *)v5;
      v103 = v33;
      if (v33 != 1 && (uint64_t *)((char *)&v103 + v33))
      {
        if (*(_QWORD *)a2 == 1)
          v34 = 0;
        else
          v34 = (char *)(*(_QWORD *)a2 + a2);
        boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v34, (uint64_t)&v103 + v33);
      }
    }
    v35 = v21 - (char *)&v103;
    if (!v21)
      v35 = 1;
    v36 = (char *)((char *)&v103 - v5);
    if (v35 == 1)
      v36 = 0;
    v37 = &v36[v35];
    v38 = *(_QWORD *)(a2 + 16) + 1;
    *(_QWORD *)(a2 + 8) = v37;
    *(_QWORD *)(a2 + 16) = v38;
    *(_QWORD *)(a2 + 24) = v22;
    result = boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(v102);
    goto LABEL_151;
  }
  if (*(_QWORD *)v5 == 1)
    v39 = 0;
  else
    v39 = &v5[*(_QWORD *)v5];
  if (v98 == 1)
    v40 = 0;
  else
    v40 = (char *)&v98 + v98;
  v41 = v100;
  if (v39 == v40)
  {
    *(_QWORD *)(a2 + 24) = v100;
    v61 = *(_QWORD *)(a2 + 16);
    if (v61 == v41)
      __assert_rtn("priv_insert_forward_range_expand_forward", "vector.hpp", 2966, "this->room_enough()");
    v62 = &v39[8 * v61];
    if (v62 != a3)
    {
      v63 = v62 - (char *)v102;
      if (!v39)
        v63 = 1;
      v64 = (_QWORD *)((char *)v102 + v63);
      if (v63 == 1)
        v64 = 0;
      *v64 = *((_QWORD *)v62 - 1);
      *(_QWORD *)(a2 + 16) = v61 + 1;
      if (v62 - 8 != a3)
        result = memmove(a3 + 8, a3, v62 - 8 - a3);
      v65 = *a4;
      goto LABEL_150;
    }
    v79 = a3 - (char *)v102;
    if (!v39)
      v79 = 1;
    v80 = (_QWORD *)((char *)v102 + v79);
    if (v79 == 1)
      v80 = 0;
    *v80 = *a4;
    v60 = v61 + 1;
    goto LABEL_143;
  }
  v93 = a4;
  v95 = a1;
  v42 = *(_QWORD *)(a2 + 16);
  __dst = &v39[8 * v42];
  v43 = v40 - (char *)v102;
  if (!v40)
    v43 = 1;
  v44 = (char *)((char *)v102 - v5);
  if (v43 == 1)
    v44 = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 8) = &v44[v43];
  v45 = (a3 - v39) >> 3;
  v46 = (v39 - v40) >> 3;
  v47 = v45 + 1;
  v48 = v39 - (char *)&v103;
  if (!v39)
    v48 = 1;
  v103 = v48;
  if (v46 >= v47)
  {
    if (v39 == a3 || !v39)
    {
      v66 = v40;
    }
    else
    {
      v66 = v40;
      if (v40)
      {
        v67 = v39;
        v68 = a3 - v39;
        v69 = v42;
        result = memmove(v40, v67, v68);
        v42 = v69;
        v66 = &v40[8 * v45];
      }
    }
    if (v66)
      v70 = v66 - (char *)v102;
    else
      v70 = 1;
    if (v70 == 1)
      v71 = 0;
    else
      v71 = (_QWORD *)((char *)v102 + v70);
    *v71 = *v93;
    *(_QWORD *)(a2 + 16) = v47;
    v72 = v42 + 1;
    if (v46 >= v42 + 1)
    {
      v57 = v42 == v45;
      a1 = v95;
      if (v57)
        goto LABEL_151;
      v73 = __dst - a3;
      if (__dst == a3 || !a3 || !v40)
        goto LABEL_137;
    }
    else
    {
      v73 = __dst - a3;
      a1 = v95;
      if (__dst == a3)
        goto LABEL_137;
    }
    result = memmove(&v40[8 * v47], a3, v73);
LABEL_137:
    *(_QWORD *)(a2 + 16) = v72;
    goto LABEL_151;
  }
  if (v46 > v45)
  {
    v90 = v42;
    v91 = v39 - v40;
    if (v39 && v40)
    {
      v49 = v40;
      if (v39 != a3)
      {
        result = memmove(v40, v39, a3 - v39);
        v49 = &v40[8 * v45];
      }
    }
    else
    {
      v49 = v40;
    }
    *(_QWORD *)(a2 + 16) = v45;
    if (v46 - v45 != 1)
LABEL_164:
      __assert_rtn("uninitialized_copy_n_and_update", "advanced_insert_int.hpp", 181, "n == 1");
    if (v49)
      v50 = v49 - (char *)v102;
    else
      v50 = 1;
    if (v50 == 1)
      v51 = 0;
    else
      v51 = (_QWORD *)((char *)v102 + v50);
    *v51 = *v93;
    *(_QWORD *)(a2 + 16) = v46 + v90;
    if (v39 == v40 && a3 - v39 == 8)
    {
      *(_QWORD *)v39 = *v93;
      v52 = 1 - v46;
      v53 = v90 - v45;
      v54 = 1 - v46 >= v90 - v45;
      v55 = 1 - v46 - (v90 - v45);
      if (v55 == 0 || !v54)
      {
        v81 = &__dst[8 * v46];
        v82 = v81 - 8;
        if (v39 && v91 != 8)
          result = memmove(__dst, v81 - 8, __dst - v82);
        *(_QWORD *)(a2 + 16) += v52;
        a1 = v95;
        if (v82 != a3)
          result = memmove(&__dst[-(v82 - a3)], a3, v82 - a3);
        v65 = *v93;
LABEL_150:
        *(_QWORD *)a3 = v65;
        goto LABEL_151;
      }
      if (__dst != a3 && a3 && v39)
        result = memmove(&__dst[8 * v55], a3, __dst - a3);
      v56 = &__dst[8 * v55] - (char *)&v101;
      if (!v39)
        v56 = 1;
      v101 = v56;
      if (v53 == 1)
      {
        *(_QWORD *)a3 = *v93;
        v57 = v55 == 1;
        a1 = v95;
        if (!v57)
          goto LABEL_164;
        v58 = __dst - (char *)v102;
        if (!v39)
          v58 = 1;
        v59 = (_QWORD *)((char *)v102 + v58);
        if (v58 == 1)
          v59 = 0;
        *v59 = *v93;
        v60 = *(_QWORD *)(a2 + 16) + v52;
LABEL_143:
        *(_QWORD *)(a2 + 16) = v60;
        goto LABEL_151;
      }
    }
LABEL_162:
    __assert_rtn("copy_n_and_update", "advanced_insert_int.hpp", 187, "n == 1");
  }
  v74 = v42;
  if (v39 == v40)
  {
    v75 = v42;
  }
  else
  {
    result = memmove(v40, v39, v39 - v40);
    v75 = v74 + 1;
  }
  *(_QWORD *)(a2 + 16) = v75;
  a1 = v95;
  if (v39)
  {
    v76 = &v39[8 * v46];
    v77 = v39;
    if (v76 != a3)
    {
      v78 = a3 - v76;
      result = memmove(v39, v76, a3 - v76);
      v77 = &v39[v78];
    }
  }
  else
  {
    v77 = 0;
  }
  if (v39 == v40)
    goto LABEL_162;
  *(_QWORD *)v77 = *v93;
  if ((unint64_t)(v39 - v40) >= 9 && a3 && __dst != a3)
    result = memmove(v77 + 8, a3, __dst - a3);
LABEL_151:
  v83 = &v5[v4];
  if (v4 == 1)
    v83 = 0;
  v84 = (char *)(a3 - v83);
  v85 = v5 - &v96;
  if (*(_QWORD *)v5 == 1)
    v85 = 0;
  v86 = &v84[*(_QWORD *)v5 + v85];
  v87 = &v96 - v97;
  if (v86 == (char *)1)
    v87 = 0;
  v88 = &v86[v87];
  v89 = v97 - (_BYTE *)a1;
  if (v88 == (char *)1)
    v89 = 0;
  *a1 = &v88[v89];
  return result;
}

void sub_1A1799618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::container::vec_iterator<boost::interprocess::offset_ptr<double,long,unsigned long,0ul>,false>::operator*(uint64_t result)
{
  if (result == 1)
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  return result;
}

_QWORD *boost::container::dtl::scoped_array_deallocator<boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>::~scoped_array_deallocator(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v2 = (uint64_t)a1 + *a1;
  if (*a1 != 1 && v2 != 0)
  {
    v4 = (uint64_t *)a1[1];
    v5 = *v4;
    v6 = (char *)v4 + *v4;
    if (v5 == 1)
      v7 = 0;
    else
      v7 = v6;
    boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>::priv_deallocate(v7, v2);
  }
  return a1;
}

pf::SceneGeographyLineParser *pf::SceneGeographyLineParser::SceneGeographyLineParser(pf::SceneGeographyLineParser *this, const char *a2, const char *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t (**v17)();
  __int128 v18;
  unint64_t v19;
  uint64_t *v20;

  *(_QWORD *)this = &off_1E45A0F60;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a4;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = 0;
  LOWORD(v17) = 420;
  boost::interprocess::basic_managed_mapped_file<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::basic_managed_mapped_file((uint64_t)this + 48, a2, 0x10000000uLL, (mode_t *)&v17);
  v7 = *((_QWORD *)this + 6);
  v8 = v7 - ((_QWORD)this + 88);
  v9 = v7 - ((_QWORD)this + 96);
  if (!v7)
  {
    v8 = 1;
    v9 = 1;
  }
  *((_QWORD *)this + 11) = v8;
  *((_QWORD *)this + 12) = v9;
  if (v7)
    v10 = v7 - ((_QWORD)this + 104);
  else
    v10 = 1;
  *((_QWORD *)this + 13) = v10;
  v11 = boost::interprocess::segment_manager_base<boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>>::allocate(v7, a4 + 8);
  *((_QWORD *)this + 2) = v11;
  memcpy(v11, a3, a4);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 2) + a4;
  v12 = *((_QWORD *)this + 6);
  v18 = xmmword_1A17B6C50;
  v16 = v12;
  v17 = off_1E45A1340;
  v19 = 0x80000001A17B89D4 & 0x7FFFFFFFFFFFFFFFLL;
  v20 = &v16;
  *((_QWORD *)this + 14) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v12, "floatmap", (uint64_t)&v17);
  v13 = *((_QWORD *)this + 6);
  v18 = xmmword_1A17B6C50;
  v17 = off_1E45A1310;
  v19 = 0x80000001A17B8C67 & 0x7FFFFFFFFFFFFFFFLL;
  v20 = &v16;
  *((_QWORD *)this + 15) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v13, "scenes", (uint64_t)&v17);
  v14 = *((_QWORD *)this + 6);
  v18 = xmmword_1A17B6C60;
  v17 = off_1E45A13A0;
  v19 = 0x80000001A17B8FEDLL & 0x7FFFFFFFFFFFFFFFLL;
  v20 = &v16;
  *((_QWORD *)this + 16) = boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>::priv_generic_construct(v14, "POI", (uint64_t)&v17);
  return this;
}

void sub_1A1799858(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::interprocess::ipcdetail::managed_open_or_create_impl<boost::interprocess::ipcdetail::file_wrapper,8ul,true,false>::~managed_open_or_create_impl((char **)(v1 + 56));
  *(_QWORD *)(v1 + 48) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v16[8];
  _BYTE v17[8];
  _BYTE v18[8];

  *a4 = 0;
  if (a3)
  {
    v4 = -16 - a2;
    do
    {
      v5 = **(_QWORD **)(result + 32);
      if (v5)
        v6 = v5 - (_QWORD)v16;
      else
        v6 = 1;
      if (v6 == 1)
        v7 = 0;
      else
        v7 = &v16[v6];
      if (v7)
        v8 = v7 - v17;
      else
        v8 = 1;
      *(_BYTE *)a2 = 0;
      if (v8 == 1)
        v9 = 0;
      else
        v9 = &v17[v8];
      v10 = v9 - v18;
      v11 = v9 == 0;
      if (!v9)
        v10 = 1;
      v12 = (uint64_t)&v9[v4];
      if (v11)
        v12 = 1;
      if (v10 == 1)
        v13 = 0;
      else
        v13 = &v18[v10];
      if (v13)
        v14 = (uint64_t)&v13[v4 + 8];
      else
        v14 = 1;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = v12;
      *(_OWORD *)(a2 + 24) = xmmword_1A17B6DB0;
      *(_DWORD *)(a2 + 40) = 1065353216;
      *(_OWORD *)(a2 + 48) = xmmword_1A17B6C70;
      v15 = *a4 + 1;
      *a4 = v15;
      v4 -= 64;
      a2 += 64;
    }
    while (v15 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::unordered::unordered_map<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,pf::SceneGeographyNode,boost::hash<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,std::equal_to<boost::container::basic_string<char,std::char_traits<char>,boost::interprocess::allocator<char,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>>,boost::interprocess::allocator<pf::SceneGeographyNode,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[8];

  *a4 = 0;
  if (a3)
  {
    v4 = -(uint64_t)a2;
    do
    {
      v5 = **(_QWORD **)(result + 32);
      if (v5)
        v6 = v5 - (_QWORD)v10;
      else
        v6 = 1;
      if (v6 == 1)
        v7 = 0;
      else
        v7 = &v10[v6];
      if (v7)
        v8 = (uint64_t)&v7[v4];
      else
        v8 = 1;
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::allocator<boost::container::vector<unsigned int,boost::interprocess::allocator<unsigned int,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

uint64_t boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::construct_n(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[8];

  *a4 = 0;
  if (a3)
  {
    v4 = -(uint64_t)a2;
    do
    {
      v5 = **(_QWORD **)(result + 32);
      if (v5)
        v6 = v5 - (_QWORD)v10;
      else
        v6 = 1;
      if (v6 == 1)
        v7 = 0;
      else
        v7 = &v10[v6];
      if (v7)
        v8 = (uint64_t)&v7[v4];
      else
        v8 = 1;
      *a2 = v8;
      a2[1] = 1;
      a2[2] = 0;
      a2[3] = 0;
      v9 = *a4 + 1;
      *a4 = v9;
      v4 -= 32;
      a2 += 4;
    }
    while (v9 < a3);
  }
  return result;
}

void boost::interprocess::ipcdetail::CtorArgN<boost::container::vector<double,boost::interprocess::allocator<double,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>>,void>,false,boost::interprocess::segment_manager<char,boost::interprocess::rbtree_best_fit<boost::interprocess::null_mutex_family,boost::interprocess::offset_ptr<void,long,unsigned long,0ul>,0ul>,boost::interprocess::iset_index>* const&>::~CtorArgN()
{
  JUMPOUT(0x1A1B0C908);
}

uint64_t pf::SceneGeographyLineParser::parseVersion(pf::SceneGeographyLineParser *this, char *__str)
{
  if (strtol(__str, 0, 10) >= 2)
    *((_BYTE *)this + 41) = 1;
  return 1;
}

__CFString *PFStoryColorGradeCategoryFromValenceArousal(double a1, double a2)
{
  uint64_t v4;
  int v5;
  double *v6;
  double v7;
  double v8;

  v4 = 0;
  v5 = 0;
  v6 = (double *)&unk_1E45A41E0;
  v7 = 1.79769313e308;
  do
  {
    v8 = hypot(*(v6 - 1) - a1, *v6 - a2);
    if (v8 < v7)
    {
      v7 = v8;
      v5 = v4;
    }
    ++v4;
    v6 += 3;
  }
  while (v4 != 13);
  return *(&Vertices_9814 + 3 * v5);
}

__CFString *PFStoryColorGradeCategoryNamed(void *a1)
{
  id v1;
  unsigned int VertexIndexForColorGradeCategory;
  __CFString *v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  VertexIndexForColorGradeCategory = _GetVertexIndexForColorGradeCategory(v1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "unsupported color grade category '%@'", (uint8_t *)&v5, 0xCu);
    }
    v3 = CFSTR("undefined");
  }
  else
  {
    v3 = *(&Vertices_9814 + 3 * VertexIndexForColorGradeCategory);
  }

  return v3;
}

uint64_t _GetVertexIndexForColorGradeCategory(void *a1)
{
  id v1;
  uint64_t v2;
  id *v3;

  v1 = a1;
  v2 = 0;
  v3 = (id *)&Vertices_9814;
  while (*v3 != v1 && (objc_msgSend(*v3, "isEqualToString:", v1) & 1) == 0)
  {
    ++v2;
    v3 += 3;
    if (v2 == 13)
    {
      v2 = 0xFFFFFFFFLL;
      break;
    }
  }

  return v2;
}

double PFStoryColorGradeCategoryGetValence(void *a1)
{
  unsigned int VertexIndexForColorGradeCategory;

  VertexIndexForColorGradeCategory = _GetVertexIndexForColorGradeCategory(a1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0)
    return 0.0;
  else
    return *((double *)&Vertices_9814 + 3 * VertexIndexForColorGradeCategory + 1);
}

double PFStoryColorGradeCategoryGetArousal(void *a1)
{
  unsigned int VertexIndexForColorGradeCategory;

  VertexIndexForColorGradeCategory = _GetVertexIndexForColorGradeCategory(a1);
  if ((VertexIndexForColorGradeCategory & 0x80000000) != 0)
    return 0.0;
  else
    return *((double *)&Vertices_9814 + 3 * VertexIndexForColorGradeCategory + 2);
}

id PFStoryColorGradeSupportedCategories()
{
  if (PFStoryColorGradeSupportedCategories_onceToken[0] != -1)
    dispatch_once(PFStoryColorGradeSupportedCategories_onceToken, &__block_literal_global_9846);
  return (id)PFStoryColorGradeSupportedCategories_supportedCategories;
}

void sub_1A179A2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1A179B2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10165(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__10166(uint64_t a1)
{

}

void sub_1A179B774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A179BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1A179D680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1A179DDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A179E7E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A179EEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1A179EFB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1A17A00D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A17A01F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1A17A04C4(_Unwind_Exception *a1, int a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  uint64_t v9;

  if (a2 == 1)
  {
    v7 = __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v2, "indexName");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 16))(v7);
      *(_DWORD *)(v5 - 112) = 138543874;
      *(_QWORD *)(v5 - 108) = v8;
      *(_WORD *)(v5 - 100) = 2114;
      *(_QWORD *)(v5 - 98) = v4;
      *(_WORD *)(v5 - 90) = 2082;
      *(_QWORD *)(v5 - 88) = v9;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error making %{public}@ at %{public}@: %{public}s", (uint8_t *)(v5 - 112), 0x20u);

    }
    __cxa_end_catch();
    JUMPOUT(0x1A17A0428);
  }

  _Unwind_Resume(a1);
}

void sub_1A17A08F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1A17A0ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);

  _Unwind_Resume(a1);
}

uint64_t pf::CachingArchive::skipChecksumValidation(pf::CachingArchive *this)
{
  unsigned __int8 v1;

  v1 = atomic_load(s_skipChecksumValidation);
  return v1 & 1;
}

uint64_t pf::CachingArchive::setSkipCheckumValidation(uint64_t this)
{
  atomic_store(this, s_skipChecksumValidation);
  return this;
}

void PFCachingArchiveIndexSetSkipChecksumValidation(int a1)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  atomic_store(a1, s_skipChecksumValidation);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
  {
    v2[0] = 67109120;
    v2[1] = a1;
    _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "PFChecksum set skip: %d", (uint8_t *)v2, 8u);
  }
}

uint64_t PFArchiveFileIsAppleInternal()
{
  if (PFArchiveFileIsAppleInternal::onceToken[0] != -1)
    dispatch_once(PFArchiveFileIsAppleInternal::onceToken, &__block_literal_global_10545);
  return PFArchiveFileIsAppleInternal::isAppleInternal;
}

BOOL PFArchiveFileMagicFound(const char *a1, const char *a2, char *__little, size_t __len, const char **a5)
{
  size_t v6;
  const char *v10;
  _BOOL8 result;
  int v12;
  void *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  int v17;
  uint8_t *v18;
  uint8_t buf[4];
  const char *v20;
  uint64_t v21;

  v6 = __len;
  v21 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 144;
  if (strnstr(a1 + 144, __little, __len) == a1 + 144)
    goto LABEL_22;
  result = 0;
  if (a1 && v6)
  {
    v12 = *a2;
    v13 = (void *)a1;
    while (1)
    {
      v14 = (const char *)memchr(v13, v12, v6);
      if (!v14)
      {
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        *(_DWORD *)buf = 136446210;
        v20 = a2;
        _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Archive index missing required magic %{public}s", buf, 0xCu);
        return 0;
      }
      v10 = v14;
      if (strnstr(v14, a2, v6) == v14)
        break;
      v13 = (void *)(v10 + 1);
      if (!--v6)
        return 0;
    }
    if (strnstr(v10, __little, v6) != v10)
    {
      v15 = strlen(__little);
      if (v15 >= 0x50)
        v16 = 80;
      else
        v16 = v15;
      strlcpy((char *)buf, v10, v16);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v17 = 136446210;
        v18 = buf;
        _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unsupported archive file ABI: %{public}s", (uint8_t *)&v17, 0xCu);
      }
      return 0;
    }
    if (PFArchiveFileIsAppleInternal::onceToken[0] != -1)
      dispatch_once(PFArchiveFileIsAppleInternal::onceToken, &__block_literal_global_10545);
    if (PFArchiveFileIsAppleInternal::isAppleInternal && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v20 = (const char *)(v10 - a1);
      _os_log_fault_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Achive index found, but at different offset (%lx): update EXPECTED_MAGIC_OFFSET", buf, 0xCu);
      if (!a5)
        return 1;
      goto LABEL_23;
    }
LABEL_22:
    if (!a5)
      return 1;
LABEL_23:
    *a5 = v10;
    return 1;
  }
  return result;
}

unint64_t PFChecksumArchiveData(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v18;
  char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1 && a3 && &a1[a2] > a3)
  {
    v8 = a3 - a1;
    v9 = a4 + a3 - a1 + 8;
    v10 = 0xCBF29CE484222325;
    v11 = 0xCBF29CE484222325;
    if (a3 != a1)
    {
      v12 = a1;
      do
      {
        v13 = *v12++;
        v11 = 0x100000001B3 * (v11 ^ v13);
        --v8;
      }
      while (v8);
    }
    v14 = a2 - v9;
    if (a2 != v9)
    {
      v15 = &a3[a4 + 8];
      do
      {
        v16 = *v15++;
        v10 = 0x100000001B3 * (v10 ^ v16);
        --v14;
      }
      while (v14);
    }
    return bswap64(v10 ^ v11);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v18 = 134218752;
      v19 = a1;
      v20 = 2048;
      v21 = a3;
      v22 = 2048;
      v23 = a2;
      v24 = 2048;
      v25 = a4;
      _os_log_error_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Invalid address for checksum (%p, %p, %ld, %ld).", (uint8_t *)&v18, 0x2Au);
    }
    return 0;
  }
}

void *UTTypeForBundlePathKey(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = UTTypeForBundlePathKey_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&UTTypeForBundlePathKey_onceToken, &__block_literal_global_10893);
  objc_msgSend((id)UTTypeForBundlePathKey_utiTypesByPathKey, "objectForKeyedSubscript:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id createURLForAbsolutePathKeyInDictionary(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  int v7;
  id v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  copiedStringValueForKeyInDictionary((uint64_t)v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
  {
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v4, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v7 = 138412546;
      v8 = v3;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_1A16EE000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "[PFAssetBundle] could not create a URL for the path key %@. Path value in manifest: %@.", (uint8_t *)&v7, 0x16u);
    }
    goto LABEL_5;
  }
LABEL_6:

  return v5;
}

id copiedStringValueForKeyInDictionary(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "objectForKeyedSubscript:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v3 = (void *)objc_msgSend(v2, "copy");
  else
    v3 = 0;

  return v3;
}

id ErrorForCode(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  void *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v12;

  v5 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 < 0xFFFFFFFA)
  {
    v7 = CFSTR("unknown error");
    if (!a1)
      goto LABEL_7;
  }
  else
  {
    v7 = off_1E45A49C0[a2 + 6];
    if (!a1)
      goto LABEL_7;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@ %s"), CFSTR("zlib-error: "), v7, v8);
    goto LABEL_8;
  }
LABEL_7:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), CFSTR("zlib-error: "), v7, v12);
LABEL_8:
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v9, CFSTR("English Error String - Not Localized"));

  if (v5)
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CB3388]);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", PFZlibErrorDomain, (int)a2, v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1A17A8A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1A17A90A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1A17A9AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v62 - 176), 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose((const void *)(v62 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11321(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11322(uint64_t a1)
{

}

void AAArchiveStreamCancel(AAArchiveStream s)
{
  MEMORY[0x1E0DDE368](s);
}

int AAArchiveStreamClose(AAArchiveStream s)
{
  return MEMORY[0x1E0DDE370](s);
}

ssize_t AAArchiveStreamProcess(AAArchiveStream istream, AAArchiveStream ostream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return MEMORY[0x1E0DDE378](istream, ostream, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

int AAArchiveStreamReadBlob(AAArchiveStream s, AAFieldKey key, void *buf, size_t nbyte)
{
  return MEMORY[0x1E0DDE380](s, *(_QWORD *)key.skey, buf, nbyte);
}

int AAArchiveStreamReadHeader(AAArchiveStream s, AAHeader *header)
{
  return MEMORY[0x1E0DDE388](s, header);
}

int AAArchiveStreamWriteBlob(AAArchiveStream s, AAFieldKey key, const void *buf, size_t nbyte)
{
  return MEMORY[0x1E0DDE390](s, *(_QWORD *)key.skey, buf, nbyte);
}

int AAArchiveStreamWriteHeader(AAArchiveStream s, AAHeader header)
{
  return MEMORY[0x1E0DDE398](s, header);
}

int AAArchiveStreamWritePathList(AAArchiveStream s, AAPathList path_list, AAFieldKeySet key_set, const char *dir, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return MEMORY[0x1E0DDE3A0](s, path_list, key_set, dir, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

void AAByteStreamCancel(AAByteStream s)
{
  MEMORY[0x1E0DDE3A8](s);
}

int AAByteStreamClose(AAByteStream s)
{
  return MEMORY[0x1E0DDE3B0](s);
}

uint64_t AAByteStreamFlush()
{
  return MEMORY[0x1E0DDE3B8]();
}

ssize_t AAByteStreamWrite(AAByteStream s, const void *buf, size_t nbyte)
{
  return MEMORY[0x1E0DDE3C8](s, buf, nbyte);
}

AAByteStream AACompressionOutputStreamOpen(AAByteStream compressed_stream, AACompressionAlgorithm compression_algorithm, size_t block_size, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE3D0](compressed_stream, *(_QWORD *)&compression_algorithm, block_size, flags, *(_QWORD *)&n_threads);
}

AAByteStream AACompressionOutputStreamOpenExisting(AAByteStream compressed_stream, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE3D8](compressed_stream, flags, *(_QWORD *)&n_threads);
}

AAArchiveStream AADecodeArchiveInputStreamOpen(AAByteStream stream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE410](stream, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

AAByteStream AADecompressionInputStreamOpen(AAByteStream compressed_stream, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE418](compressed_stream, flags, *(_QWORD *)&n_threads);
}

AAArchiveStream AAEncodeArchiveOutputStreamOpen(AAByteStream stream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE420](stream, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

AAArchiveStream AAExtractArchiveOutputStreamOpen(const char *dir, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE428](dir, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

AAFieldKeySet AAFieldKeySetCreateWithString(const char *s)
{
  return (AAFieldKeySet)MEMORY[0x1E0DDE430](s);
}

void AAFieldKeySetDestroy(AAFieldKeySet key_set)
{
  MEMORY[0x1E0DDE438](key_set);
}

AAByteStream AAFileStreamOpenWithFD(int fd, int automatic_close)
{
  return (AAByteStream)MEMORY[0x1E0DDE448](*(_QWORD *)&fd, *(_QWORD *)&automatic_close);
}

AAByteStream AAFileStreamOpenWithPath(const char *path, int open_flags, mode_t open_mode)
{
  return (AAByteStream)MEMORY[0x1E0DDE450](path, *(_QWORD *)&open_flags, open_mode);
}

AAHeader AAHeaderCreate(void)
{
  return (AAHeader)MEMORY[0x1E0DDE458]();
}

void AAHeaderDestroy(AAHeader header)
{
  MEMORY[0x1E0DDE460](header);
}

int AAHeaderGetFieldBlob(AAHeader header, uint32_t i, uint64_t *size, uint64_t *offset)
{
  return MEMORY[0x1E0DDE468](header, *(_QWORD *)&i, size, offset);
}

int AAHeaderGetFieldString(AAHeader header, uint32_t i, size_t capacity, char *value, size_t *length)
{
  return MEMORY[0x1E0DDE470](header, *(_QWORD *)&i, capacity, value, length);
}

int AAHeaderGetFieldUInt(AAHeader header, uint32_t i, uint64_t *value)
{
  return MEMORY[0x1E0DDE478](header, *(_QWORD *)&i, value);
}

int AAHeaderGetKeyIndex(AAHeader header, AAFieldKey key)
{
  return MEMORY[0x1E0DDE480](header, *(_QWORD *)key.skey);
}

int AAHeaderSetFieldBlob(AAHeader header, uint32_t i, AAFieldKey key, uint64_t size)
{
  return MEMORY[0x1E0DDE490](header, *(_QWORD *)&i, *(_QWORD *)key.skey, size);
}

int AAHeaderSetFieldString(AAHeader header, uint32_t i, AAFieldKey key, const char *value, size_t length)
{
  return MEMORY[0x1E0DDE498](header, *(_QWORD *)&i, *(_QWORD *)key.skey, value, length);
}

int AAHeaderSetFieldUInt(AAHeader header, uint32_t i, AAFieldKey key, uint64_t value)
{
  return MEMORY[0x1E0DDE4A0](header, *(_QWORD *)&i, *(_QWORD *)key.skey, value);
}

AAPathList AAPathListCreateWithDirectoryContents(const char *dir, const char *path, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAPathList)MEMORY[0x1E0DDE4B0](dir, path, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

void AAPathListDestroy(AAPathList path_list)
{
  MEMORY[0x1E0DDE4B8](path_list);
}

int AEAAuthDataAppendEntry(AEAAuthData auth_data, const char *key, const uint8_t *data, size_t data_size)
{
  return MEMORY[0x1E0DDE4C8](auth_data, key, data, data_size);
}

AEAAuthData AEAAuthDataCreate(void)
{
  return (AEAAuthData)MEMORY[0x1E0DDE4D0]();
}

AEAAuthData AEAAuthDataCreateWithContext(AEAContext context)
{
  return (AEAAuthData)MEMORY[0x1E0DDE4D8](context);
}

void AEAAuthDataDestroy(AEAAuthData auth_data)
{
  MEMORY[0x1E0DDE4E0](auth_data);
}

const uint8_t *__cdecl AEAAuthDataGetEncodedData(AEAAuthData auth_data)
{
  return (const uint8_t *)MEMORY[0x1E0DDE4E8](auth_data);
}

size_t AEAAuthDataGetEncodedSize(AEAAuthData auth_data)
{
  return MEMORY[0x1E0DDE4F0](auth_data);
}

int AEAAuthDataGetEntry(AEAAuthData auth_data, uint32_t i, size_t key_capacity, char *key, size_t *key_length, size_t data_capacity, uint8_t *data, size_t *data_size)
{
  return MEMORY[0x1E0DDE4F8](auth_data, *(_QWORD *)&i, key_capacity, key, key_length, data_capacity, data, data_size);
}

uint32_t AEAAuthDataGetEntryCount(AEAAuthData auth_data)
{
  return MEMORY[0x1E0DDE500](auth_data);
}

AEAContext AEAContextCreateWithEncryptedStream(AAByteStream encrypted_stream)
{
  return (AEAContext)MEMORY[0x1E0DDE508](encrypted_stream);
}

AEAContext AEAContextCreateWithProfile(AEAProfile profile)
{
  return (AEAContext)MEMORY[0x1E0DDE510](*(_QWORD *)&profile);
}

void AEAContextDestroy(AEAContext context)
{
  MEMORY[0x1E0DDE518](context);
}

int AEAContextSetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, const uint8_t *buf, size_t buf_size)
{
  return MEMORY[0x1E0DDE528](context, *(_QWORD *)&field, *(_QWORD *)&representation, buf, buf_size);
}

int AEAContextSetFieldUInt(AEAContext context, AEAContextField field, uint64_t value)
{
  return MEMORY[0x1E0DDE530](context, *(_QWORD *)&field, value);
}

AAByteStream AEADecryptionInputStreamOpen(AAByteStream encrypted_stream, AEAContext context, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE538](encrypted_stream, context, flags, *(_QWORD *)&n_threads);
}

AAByteStream AEAEncryptionOutputStreamOpen(AAByteStream encrypted_stream, AEAContext context, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE548](encrypted_stream, context, flags, *(_QWORD *)&n_threads);
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0C91FC8](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1E0C9BC88](a1, *(_QWORD *)&intent, color, options);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BF48](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1E0C9BF50](a1);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  return (CGImageRef)MEMORY[0x1E0C9CB98](image, space);
}

uint64_t CGImageCreateDataFromMetadata()
{
  return MEMORY[0x1E0CBC2B8]();
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

void CGImageDestinationAddImageFromSource(CGImageDestinationRef idst, CGImageSourceRef isrc, size_t index, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC318](idst, isrc, index, properties);
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1E0CBC328]();
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

uint64_t CGImageMetadataCreateFromMetadataProperties()
{
  return MEMORY[0x1E0CBC3A8]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C0]();
}

CFDataRef CGImageMetadataCreateXMPData(CGImageMetadataRef metadata, CFDictionaryRef options)
{
  return (CFDataRef)MEMORY[0x1E0CBC3D8](metadata, options);
}

BOOL CGImageMetadataSetValueMatchingImageProperty(CGMutableImageMetadataRef metadata, CFStringRef dictionaryName, CFStringRef propertyName, CFTypeRef value)
{
  return MEMORY[0x1E0CBC420](metadata, dictionaryName, propertyName, value);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CFDictionaryRef CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSourceRef isrc, size_t index, CFStringRef auxiliaryImageDataType)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC500](isrc, index, auxiliaryImageDataType);
}

uint64_t CGImageSourceCopyMetadataPropertiesAtIndex()
{
  return MEMORY[0x1E0CBC518]();
}

CFDictionaryRef CGImageSourceCopyProperties(CGImageSourceRef isrc, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC528](isrc, options);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1E0CBC550]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

uint64_t CGImageSourceCreateProxyData()
{
  return MEMORY[0x1E0CBC578]();
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

uint64_t CGImageSourceCreateWithProxyData()
{
  return MEMORY[0x1E0CBC5B0]();
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F8](isrc);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1E0CBC618](isrc);
}

uint64_t CGImageSourceIsProxy()
{
  return MEMORY[0x1E0CBC650]();
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D560]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1E0C9D620](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFDictionaryRef CGSizeCreateDictionaryRepresentation(CGSize size)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9D808]((__n128)size, *(__n128 *)&size.height);
}

BOOL CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGSize *size)
{
  return MEMORY[0x1E0C9D818](dict, size);
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x1E0C9E300]((__n128)coord, *(__n128 *)&coord.longitude);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

const AudioChannelLayout *__cdecl CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioChannelLayout *)MEMORY[0x1E0C9EAA0](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetFormatList(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const AudioFormatListItem *)MEMORY[0x1E0C9EAA8](desc, sizeOut);
}

const void *__cdecl CMAudioFormatDescriptionGetMagicCookie(CMAudioFormatDescriptionRef desc, size_t *sizeOut)
{
  return (const void *)MEMORY[0x1E0C9EAB0](desc, sizeOut);
}

const AudioFormatListItem *__cdecl CMAudioFormatDescriptionGetRichestDecodableFormat(CMAudioFormatDescriptionRef desc)
{
  return (const AudioFormatListItem *)MEMORY[0x1E0C9EAC8](desc);
}

OSStatus CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef structureAllocator, void *memoryBlock, size_t blockLength, CFAllocatorRef blockAllocator, const CMBlockBufferCustomBlockSource *customBlockSource, size_t offsetToData, size_t dataLength, CMBlockBufferFlags flags, CMBlockBufferRef *blockBufferOut)
{
  return MEMORY[0x1E0C9EB88](structureAllocator, memoryBlock, blockLength, blockAllocator, customBlockSource, offsetToData, dataLength, *(_QWORD *)&flags);
}

size_t CMBlockBufferGetDataLength(CMBlockBufferRef theBuffer)
{
  return MEMORY[0x1E0C9EB98](theBuffer);
}

OSStatus CMBlockBufferGetDataPointer(CMBlockBufferRef theBuffer, size_t offset, size_t *lengthAtOffsetOut, size_t *totalLengthOut, char **dataPointerOut)
{
  return MEMORY[0x1E0C9EBA8](theBuffer, offset, lengthAtOffsetOut, totalLengthOut, dataPointerOut);
}

CFPropertyListRef CMFormatDescriptionGetExtension(CMFormatDescriptionRef desc, CFStringRef extensionKey)
{
  return (CFPropertyListRef)MEMORY[0x1E0C9EDC8](desc, extensionKey);
}

CFDictionaryRef CMFormatDescriptionGetExtensions(CMFormatDescriptionRef desc)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9EDD0](desc);
}

FourCharCode CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDD8](desc);
}

CMMediaType CMFormatDescriptionGetMediaType(CMFormatDescriptionRef desc)
{
  return MEMORY[0x1E0C9EDE0](desc);
}

OSStatus CMMetadataFormatDescriptionCreateWithMetadataSpecifications(CFAllocatorRef allocator, CMMetadataFormatType metadataType, CFArrayRef metadataSpecifications, CMMetadataFormatDescriptionRef *formatDescriptionOut)
{
  return MEMORY[0x1E0C9EE90](allocator, *(_QWORD *)&metadataType, metadataSpecifications, formatDescriptionOut);
}

CFArrayRef CMMetadataFormatDescriptionGetIdentifiers(CMMetadataFormatDescriptionRef desc)
{
  return (CFArrayRef)MEMORY[0x1E0C9EE98](desc);
}

uint64_t CMPhotoCompressionSessionAddAuxiliaryImage()
{
  return MEMORY[0x1E0D08B98]();
}

uint64_t CMPhotoCompressionSessionAddImage()
{
  return MEMORY[0x1E0D08BF0]();
}

uint64_t CMPhotoCompressionSessionCloseContainer()
{
  return MEMORY[0x1E0D08C30]();
}

uint64_t CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
  return MEMORY[0x1E0D08C38]();
}

uint64_t CMPhotoCompressionSessionCreate()
{
  return MEMORY[0x1E0D08C40]();
}

uint64_t CMPhotoCompressionSessionInvalidate()
{
  return MEMORY[0x1E0D08C68]();
}

uint64_t CMPhotoCompressionSessionOpenEmptyContainer()
{
  return MEMORY[0x1E0D08C78]();
}

uint64_t CMPhotoCompressionSessionOpenExistingContainerForModification()
{
  return MEMORY[0x1E0D08C88]();
}

uint64_t CMPhotoDecompressionContainerCreateImageForIndex()
{
  return MEMORY[0x1E0D08E58]();
}

uint64_t CMPhotoDecompressionContainerJFIFTranscode()
{
  return MEMORY[0x1E0D08F88]();
}

uint64_t CMPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1E0D08FE0]();
}

uint64_t CMPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1E0D08FE8]();
}

uint64_t CMPhotoDecompressionSessionFlushCachedBuffers()
{
  return MEMORY[0x1E0D09000]();
}

uint64_t CMPhotoSurfacePoolCreatePixelBuffer()
{
  return MEMORY[0x1E0D09220]();
}

OSStatus CMSampleBufferCreate(CFAllocatorRef allocator, CMBlockBufferRef dataBuffer, Boolean dataReady, CMSampleBufferMakeDataReadyCallback makeDataReadyCallback, void *makeDataReadyRefcon, CMFormatDescriptionRef formatDescription, CMItemCount numSamples, CMItemCount numSampleTimingEntries, const CMSampleTimingInfo *sampleTimingArray, CMItemCount numSampleSizeEntries, const size_t *sampleSizeArray, CMSampleBufferRef *sampleBufferOut)
{
  return MEMORY[0x1E0C9EF40](allocator, dataBuffer, dataReady, makeDataReadyCallback, makeDataReadyRefcon, formatDescription, numSamples, numSampleTimingEntries);
}

CMTime *__cdecl CMSampleBufferGetDuration(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFC8](retstr, sbuf);
}

CVImageBufferRef CMSampleBufferGetImageBuffer(CMSampleBufferRef sbuf)
{
  return (CVImageBufferRef)MEMORY[0x1E0C9EFD8](sbuf);
}

CMItemCount CMSampleBufferGetNumSamples(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9EFE0](sbuf);
}

CMTime *__cdecl CMSampleBufferGetOutputPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9EFF8](retstr, sbuf);
}

CMTime *__cdecl CMSampleBufferGetPresentationTimeStamp(CMTime *__return_ptr retstr, CMSampleBufferRef sbuf)
{
  return (CMTime *)MEMORY[0x1E0C9F008](retstr, sbuf);
}

size_t CMSampleBufferGetTotalSampleSize(CMSampleBufferRef sbuf)
{
  return MEMORY[0x1E0C9F040](sbuf);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F298](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x1E0C9F2D8](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F2F0](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1E0C9F320](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeMultiplyByFloat64(CMTime *__return_ptr retstr, CMTime *time, Float64 multiplier)
{
  return (CMTime *)MEMORY[0x1E0C9F388](retstr, time, multiplier);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x1E0C9F3B0](range, allocator);
}

CMTimeRange *__cdecl CMTimeRangeFromTimeToTime(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *end)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3C8](retstr, start, end);
}

CMTime *__cdecl CMTimeRangeGetEnd(CMTime *__return_ptr retstr, CMTimeRange *range)
{
  return (CMTime *)MEMORY[0x1E0C9F3D0](retstr, range);
}

CMTimeRange *__cdecl CMTimeRangeGetIntersection(CMTimeRange *__return_ptr retstr, CMTimeRange *range, CMTimeRange *otherRange)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3D8](retstr, range, otherRange);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3F0](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x1E0C9F400](retstr, lhs, rhs);
}

CGSize CMVideoFormatDescriptionGetPresentationDimensions(CMVideoFormatDescriptionRef videoDesc, Boolean usePixelAspectRatio, Boolean useCleanAperture)
{
  double v3;
  double v4;
  CGSize result;

  MEMORY[0x1E0C9F580](videoDesc, usePixelAspectRatio, useCleanAperture);
  result.height = v4;
  result.width = v3;
  return result;
}

uint64_t CMVideoFormatDescriptionGetVideoDynamicRange()
{
  return MEMORY[0x1E0C9F588]();
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  MEMORY[0x1E0CA8950](buffer, key, value, *(_QWORD *)&attachmentMode);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AB8](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1E0CA8B48]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8B80](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t CopyMetadataFromFileAtPath()
{
  return MEMORY[0x1E0CBC680]();
}

uint64_t FigAudioFormatDescriptionGetCinematicAudioEffectEligibility()
{
  return MEMORY[0x1E0C9F840]();
}

uint64_t FigHEVCBridge_GetHEVCParameterSetAtIndex()
{
  return MEMORY[0x1E0CA0C88]();
}

uint64_t FigHEVCBridge_GetSPSProfileTierLevel()
{
  return MEMORY[0x1E0CA0CA0]();
}

uint64_t FigLivePhotoMetadataComputeDeserializationSize()
{
  return MEMORY[0x1E0D03AF0]();
}

uint64_t FigLivePhotoMetadataDeserializeIntoBuffer()
{
  return MEMORY[0x1E0D03B00]();
}

uint64_t FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors()
{
  return MEMORY[0x1E0CA0E88]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MMCSSignatureAndSchemeSize()
{
  return MEMORY[0x1E0D46698]();
}

uint64_t MMCSSignatureCreateFromFileDescriptor()
{
  return MEMORY[0x1E0D466A8]();
}

uint64_t MMCSSignatureGeneratorCreate()
{
  return MEMORY[0x1E0D466B0]();
}

uint64_t MMCSSignatureGeneratorFinish()
{
  return MEMORY[0x1E0D466C8]();
}

uint64_t MMCSSignatureGeneratorUpdate()
{
  return MEMORY[0x1E0D466E0]();
}

uint64_t MTCopyStringsForMediaTypeAndSubType()
{
  return MEMORY[0x1E0CC31F0]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PFExists()
{
  return MEMORY[0x1E0D710A0]();
}

uint64_t PFFilter()
{
  return MEMORY[0x1E0D710A8]();
}

uint64_t PFLargestSalientAspectFilledCropRect()
{
  return MEMORY[0x1E0D710B8]();
}

uint64_t PFSizeWithAspectRatioFittingSize()
{
  return MEMORY[0x1E0D71138]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  return MEMORY[0x1E0CEC938](session, completeUntilPresentationTimeStamp);
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return MEMORY[0x1E0CEC948](allocator, *(_QWORD *)&width, *(_QWORD *)&height, *(_QWORD *)&codecType, encoderSpecification, sourceImageBufferAttributes, compressedDataAllocator, outputCallback);
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  return MEMORY[0x1E0CEC960](session, imageBuffer, presentationTimeStamp, duration, frameProperties, infoFlagsOut, outputHandler);
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  return MEMORY[0x1E0CEC998](session);
}

uint64_t VTCopyDecoderCapabilitiesDictionaryForCodecTypes()
{
  return MEMORY[0x1E0CEC9B0]();
}

uint64_t VTCopyHEVCDecoderCapabilitiesDictionary()
{
  return MEMORY[0x1E0CEC9B8]();
}

uint64_t VTGetDecoderCapabilitesForFormatDescription()
{
  return MEMORY[0x1E0CECB38]();
}

uint64_t VTGetHEVCCapabilitesForFormatDescription()
{
  return MEMORY[0x1E0CECB50]();
}

uint64_t VTSelectAndCreateVideoDecoderInstance()
{
  return MEMORY[0x1E0CECD58]();
}

uint64_t VTSelectAndCreateVideoEncoderInstance()
{
  return MEMORY[0x1E0CECD60]();
}

OSStatus VTSessionCopySupportedPropertyDictionary(VTSessionRef session, CFDictionaryRef *supportedPropertyDictionaryOut)
{
  return MEMORY[0x1E0CECD70](session, supportedPropertyDictionaryOut);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x1E0CECD80](session, propertyKey, propertyValue);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

uint64_t _PFAssertContinueHandler()
{
  return MEMORY[0x1E0D71158]();
}

uint64_t _PFAssertFailHandler()
{
  return MEMORY[0x1E0D71160]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E459F9F8(__p);
}

uint64_t operator delete()
{
  return off_1E459FA00();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E459FA08(__sz);
}

uint64_t operator new()
{
  return off_1E459FA10();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1E0C80B00](a1);
}

uint64_t __invert_d3()
{
  return MEMORY[0x1E0C80B18]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

simd_double2 _simd_pow_d2(simd_double2 x, simd_double2 y)
{
  simd_double2 result;

  MEMORY[0x1E0C811F0]((__n128)x, (__n128)y);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1E0DE3E88]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1E0DE3F28]();
}

uint64_t archive_read_support_filter_bzip2()
{
  return MEMORY[0x1E0DE3F50]();
}

uint64_t archive_read_support_format_raw()
{
  return MEMORY[0x1E0DE3F80]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C838E8](__x, __y);
  return result;
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1E0C84238](__rqtp, __rmtp);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1E0C84F38](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int sched_yield(void)
{
  return MEMORY[0x1E0C85270]();
}

int shmdt(const void *a1)
{
  return MEMORY[0x1E0C853B8](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1E0C855C8](__big, __little, __len);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1E0C85650](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1E0C85790](*(_QWORD *)&a1);
}

