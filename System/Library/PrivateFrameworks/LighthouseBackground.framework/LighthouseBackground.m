void VertexEdges.init(vertex:edges:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for VertexEdges();
}

uint64_t sub_24022E940(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(result + 52)) = v1;
  return result;
}

void type metadata accessor for VertexEdges()
{
  JUMPOUT(0x24268208CLL);
}

uint64_t Graph.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24022E998@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_2402304D4();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24022E9C0()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return sub_24022E9FC(v0);
}

uint64_t sub_24022E9E8()
{
  sub_2402304D4();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24022E9FC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_24022EA40())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_24022EA80()
{
  swift_beginAccess();
  type metadata accessor for VertexEdges();
}

uint64_t sub_24022EAD0()
{
  uint64_t v0;

  swift_getAssociatedConformanceWitness();
  v0 = sub_2402BD5A0();
  swift_bridgeObjectRetain();
  MEMORY[0x2426820F8](MEMORY[0x24BEE0310], v0);
  return sub_2402BD84C();
}

void sub_24022EB54()
{
  uint64_t v0;

  v0 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  MEMORY[0x24BDAC7A8](v0);
  type metadata accessor for VertexEdges();
}

void Graph.__allocating_init(name:)()
{
  swift_allocObject();
  Graph.init(name:)();
}

uint64_t sub_24022EF18()
{
  uint64_t v0;

  return v0;
}

void Graph.init(name:)()
{
  type metadata accessor for VertexEdges();
}

_QWORD *sub_24022EF74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_getTupleTypeMetadata2();
  sub_2402BD7EC();
  swift_getAssociatedConformanceWitness();
  v0[4] = sub_2402BD594();
  v0[2] = v2;
  v0[3] = v1;
  sub_2402BD7EC();
  v3 = sub_2402BD594();
  swift_beginAccess();
  v0[4] = v3;
  swift_bridgeObjectRelease();
  return v0;
}

void sub_24022F04C(uint64_t a1)
{
  MEMORY[0x24BDAC7A8](a1);
  type metadata accessor for VertexEdges();
}

void sub_24022F0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v15 = sub_2402BD9E4();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&a9 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = *(_QWORD *)(v14 - 136);
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v13, v19, v10);
  sub_2402BD564();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v18, v13, v10);
  *(_QWORD *)(v14 - 112) = v10;
  *(_QWORD *)(v14 - 104) = v12;
  v20 = *(_QWORD *)(v14 - 128);
  *(_QWORD *)(v14 - 96) = v11;
  *(_QWORD *)(v14 - 88) = v20;
  type metadata accessor for VertexEdges();
}

uint64_t sub_24022F194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + *(int *)(a1 + 52)) = v1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v3, 0, 1, v2);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_2402BD5AC();
  sub_2402BD5D0();
  return swift_endAccess();
}

void sub_24022F238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[26];

  v14[9] = a2;
  v14[10] = a1;
  v2 = MEMORY[0x24BDAC7A8](a1);
  v14[3] = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[7] = *(_QWORD *)(*(_QWORD *)(v4 + 80) - 8);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v14[2] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v14[1] = (char *)v14 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v14[4] = v10;
  v14[5] = (char *)v14 - v9;
  v13 = v11[13];
  v12 = v11[14];
  v14[15] = v11[11];
  v14[16] = v10;
  v14[17] = v13;
  v14[18] = v12;
  v14[0] = v12;
  type metadata accessor for VertexEdges();
}

uint64_t sub_24022F33C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t (*v14)(_BYTE *, uint64_t, uint64_t);
  void (*v15)(_BYTE *, uint64_t);
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  void (*v28)(uint64_t, _QWORD);
  _BYTE *v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD);
  uint64_t v32;
  _BYTE v33[96];

  v5 = sub_2402BD9E4();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 240) = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v33[-v9];
  swift_beginAccess();
  v11 = *(_QWORD *)(v1 + 32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  v13 = *(_QWORD *)(v3 - 208);
  *(_QWORD *)(v3 - 224) = v2;
  MEMORY[0x242681390](v13, v11, v2, a1, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  v14 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 48);
  LODWORD(v11) = v14(v10, 1, a1);
  v15 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v16 = v10;
  v17 = v5;
  v15(v16, v5);
  if ((_DWORD)v11 == 1)
    return 0;
  v18 = *(_QWORD *)(v3 - 232);
  swift_beginAccess();
  v19 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain();
  v20 = *(_BYTE **)(v3 - 240);
  v21 = *(_QWORD *)(v3 - 224);
  MEMORY[0x242681390](*(_QWORD *)(v3 - 216), v19, v21, a1, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  LODWORD(v19) = v14(v20, 1, a1);
  v15(v20, v17);
  if ((_DWORD)v19 == 1)
    return 0;
  v23 = v18;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v25 = *(_QWORD *)(v3 - 248);
  v26 = *(_QWORD *)(v3 - 208);
  v24(v25, v26, v21);
  v27 = sub_24022EA40();
  sub_2402BD5AC();
  v28 = (void (*)(uint64_t, _QWORD))sub_2402BD5B8();
  if (v14(v29, 1, a1))
  {
    v28(v3 - 200, 0);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v21);
    ((void (*)(uint64_t, _QWORD))v27)(v3 - 168, 0);
  }
  else
  {
    *(_QWORD *)(v3 - 240) = v27;
    v30 = *(_QWORD *)(v3 - 280);
    v24(v30, v26, v21);
    v31 = v28;
    v32 = *(_QWORD *)(v3 - 272);
    v24(v32, *(_QWORD *)(v3 - 216), v21);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v3 - 288) + 80))(v30, v32, *(_QWORD *)(v3 - 256));
    sub_2402BD840();
    sub_2402BD828();
    v31(v3 - 200, 0);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v21);
    (*(void (**)(uint64_t, _QWORD))(v3 - 240))(v3 - 168, 0);
  }
  return 1;
}

void sub_24022F634()
{
  type metadata accessor for VertexEdges();
}

uint64_t sub_24022F680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[96];

  v7 = sub_2402BD9E4();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = &v23[-v10];
  v12 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](v9);
  *(_QWORD *)(v5 - 160) = &v23[-v13];
  swift_beginAccess();
  v14 = *(_QWORD *)(v1 + 32);
  v15 = *(_QWORD *)(v2 + 80);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x242681390](*(_QWORD *)(v5 - 136), v14, v15, a1, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a1) == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
    v17 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v5 - 160);
    v19 = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(v18, v11, a1);
    *(_QWORD *)(v5 - 120) = *(_QWORD *)(v18 + *(int *)(a1 + 52));
    MEMORY[0x24BDAC7A8](v19);
    *(_QWORD *)&v23[-48] = v15;
    *(_QWORD *)&v23[-40] = v3;
    *(_QWORD *)&v23[-32] = *(_QWORD *)(v5 - 152);
    *(_QWORD *)&v23[-24] = v4;
    v20 = *(_QWORD *)(v5 - 144);
    *(_QWORD *)&v23[-16] = *(_QWORD *)(v5 - 168);
    *(_QWORD *)&v23[-8] = v20;
    v21 = sub_2402BD840();
    swift_bridgeObjectRetain();
    MEMORY[0x2426820F8](MEMORY[0x24BEE12C8], v21);
    v17 = sub_2402BD744();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v18, a1);
  }
  return v17 & 1;
}

uint64_t sub_24022F868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(v8, v7);
  swift_getAssociatedConformanceWitness();
  v9 = sub_2402BD624();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a3);
  return v9 & 1;
}

uint64_t sub_24022F948(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  result = MEMORY[0x2426815E8](a1, v4);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v15 = 0;
    v16 = result - 1;
    v17 = 1;
    MEMORY[0x24BDAC7A8](result);
    v6 = *(_QWORD *)(v3 + 88);
    v10[2] = v4;
    v10[3] = v6;
    v14 = *(_OWORD *)(v3 + 96);
    v11 = v14;
    v12 = *(_QWORD *)(v3 + 112);
    v13 = a1;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE088);
    v8 = sub_24023058C();
    return sub_24022FB18((void (*)(char *, char *))sub_240230528, (uint64_t)v10, v7, v14, MEMORY[0x24BEE4078], v8, MEMORY[0x24BEE40A8], v9);
  }
  return result;
}

uint64_t sub_24022FA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[2];

  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v17 - v13;
  v15 = *v12;
  sub_2402BD858();
  result = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    sub_2402BD858();
    return (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a7 + 80))(v14, v11, a5, a7);
  }
  return result;
}

uint64_t sub_24022FB18(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_2402BD9E4();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_2402BD738();
  v57 = sub_2402BD564();
  v53 = sub_2402BDB1C();
  sub_2402BDAF8();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_2402BD72C();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_2402BD9F0();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_2402BDB04();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_2402BD9F0();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_2402BDB04();
      sub_2402BD9F0();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

void sub_240230024(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v23 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v22 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v26 = (char *)v21 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)v21 - v11;
  sub_2402BD858();
  v29 = 1;
  v30 = a1;
  v12 = sub_2402BD840();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE098);
  MEMORY[0x2426820F8](MEMORY[0x24BEE12B8], v12);
  MEMORY[0x2426820F8](MEMORY[0x24BEE2C50], v13);
  sub_2402BD618();
  v14 = v32;
  v16 = v33;
  v15 = v34;
  swift_unknownObjectRetain();
  v17 = sub_2402BDA20();
  swift_unknownObjectRelease();
  if (v17 == sub_2402BDA38())
  {
    swift_unknownObjectRelease();
    v28 = 0;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v22, v27, v5);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v19 = swift_getAssociatedConformanceWitness();
    v20 = swift_getAssociatedConformanceWitness();
    *v23 = 1;
    v31 = v5;
    v32 = AssociatedConformanceWitness;
    v33 = v19;
    v34 = v20;
    type metadata accessor for WalkResult();
  }
  v21[1] = v4;
  v24 = v6;
  v25 = v15 >> 1;
  sub_2402BDA2C();
  if (v17 >= v16 && v25 > v17)
  {
    v28 = 0;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v14 + *(_QWORD *)(v24 + 72) * v17, v5);
    sub_24022F634();
  }
  __break(1u);
  JUMPOUT(0x240230460);
}

uint64_t Graph.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Graph.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t default argument 0 of ResetTasksRequest.init(reload:)()
{
  return 0;
}

uint64_t default argument 0 of CleanTasksRequest.init(deep:)()
{
  return 1;
}

uint64_t default argument 0 of GetNotificationsConfigRequest.init(registeredOnly:)()
{
  return 1;
}

uint64_t default argument 0 of ResetNotificationsRequest.init(reload:)()
{
  return 0;
}

uint64_t sub_2402304D4()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_240230504(uint64_t a1)
{
  uint64_t v1;

  return sub_24022F868(a1, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_240230528(uint64_t a1)
{
  uint64_t *v1;

  return sub_24022FA30(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426820E0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_24023058C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDE090;
  if (!qword_256FDE090)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDE088);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE49C8], v1);
    atomic_store(result, (unint64_t *)&qword_256FDE090);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2426820EC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_24023061C()
{
  return 40;
}

__n128 sub_240230628(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t dispatch thunk of Edge.start.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Edge.end.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of Edge.init(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t sub_240230654()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_24023065C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2402306D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_240230788(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2402307C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_240230828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_240230894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_2402308F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_240230954(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_2402309D0 + 4 * byte_2402BE730[v10]))();
  }
}

void sub_240230A54(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_240230B48()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x240230BBCLL);
}

void sub_240230B50(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x240230B58);
  JUMPOUT(0x240230BBCLL);
}

void sub_240230B98()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x240230BBCLL);
}

void sub_240230BA0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x240230BBCLL);
}

uint64_t sub_240230BA8(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x240230BBCLL);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x240230BB8);
    JUMPOUT(0x240230BB4);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t sub_240230BD4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_240230BDC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_240230C60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 1) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(_QWORD *)((v6 + v10) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v6 + v11) & 0xFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t sub_240230D38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_BYTE *sub_240230D58(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *sub_240230DD8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *sub_240230E58(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_BYTE *sub_240230ED8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (unint64_t)&a1[v5 + 1] & ~v5;
  v7 = (unint64_t)&a2[v5 + 1] & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v6, v7);
  *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_240230F58(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  BOOL v13;
  int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0xFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v7 + 1] & ~v7);
    }
    else
    {
      v12 = *a1;
      v13 = v12 >= 2;
      v14 = (v12 + 2147483646) & 0x7FFFFFFF;
      if (v13)
        return (v14 + 1);
      else
        return 0;
    }
  }
  else
  {
    if (((((*(_QWORD *)(v4 + 64) + ((v7 + 1) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_240230FE4 + 4 * byte_2402BE73F[v10]))();
  }
}

void sub_24023106C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 1) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + ((v7 + 1) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_240231174()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_24023117C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x240231184);
}

void sub_2402311C0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_2402311C8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_2402311D0@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;

  *(_WORD *)&v6[v7] = 0;
  if (!a1)
LABEL_2:
    JUMPOUT(0x2402311D8);
  if (a2 <= 0xFE)
  {
    *v6 = a1 + 1;
    goto LABEL_2;
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))((unint64_t)&v6[v5 + 1] & a3);
}

void type metadata accessor for WalkResult()
{
  JUMPOUT(0x24268208CLL);
}

uint64_t sub_240231200()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for Graph()
{
  JUMPOUT(0x24268208CLL);
}

uint64_t method lookup function for Graph()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Graph.adjacency.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Graph.adjacency.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Graph.adjacency.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Graph.vertexIndices.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of Graph.edges.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of Graph.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of Graph.addVertex(vertex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of Graph.addEdge(startIndex:endIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of Graph.hasEdge(startIndex:endIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Graph.edgesFromPath(path:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Graph.processWalk(indices:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

void type metadata accessor for BMLighthouseLedgerDediscoPrivacyEventEventPhase(uint64_t a1)
{
  sub_240231334(a1, &qword_256FDE280);
}

void type metadata accessor for CFBoolean(uint64_t a1)
{
  sub_240231334(a1, &qword_256FDE288);
}

void type metadata accessor for CFArray(uint64_t a1)
{
  sub_240231334(a1, &qword_256FDE290);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_240231334(a1, &qword_256FDE298);
}

void sub_240231334(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_24023137C()
{
  uint64_t v0;

  v0 = sub_2402BD4E0();
  __swift_allocate_value_buffer(v0, qword_2543529A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_2543529A0);
  return sub_2402BD4D4();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t LedgerState.index.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LedgerState.index.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LedgerState.index.modify())()
{
  return nullsub_1;
}

uint64_t LedgerState.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LedgerState() + 20);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for LedgerState()
{
  uint64_t result;

  result = qword_256FDE4E0;
  if (!qword_256FDE4E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t LedgerState.timestamp.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for LedgerState() + 20);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*LedgerState.timestamp.modify())()
{
  type metadata accessor for LedgerState();
  return nullsub_1;
}

uint64_t LedgerState.init(index:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for LedgerState() + 20);
  v6 = sub_2402BD48C();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t LedgerState.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  type metadata accessor for LedgerState();
  sub_2402BD48C();
  sub_240232E34(&qword_256FDE360, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  return sub_2402BD5DC();
}

uint64_t static LedgerState.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_2402BDD8C() & 1) == 0)
    return 0;
  type metadata accessor for LedgerState();
  return sub_2402BD450();
}

BOOL sub_2402316FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_240231718()
{
  return sub_2402BDE10();
}

uint64_t sub_240231744()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D617473656D6974;
  else
    return 0x7865646E69;
}

uint64_t sub_240231780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240233B24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402317A4()
{
  return 0;
}

void sub_2402317B0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2402317BC()
{
  sub_240231984();
  return sub_2402BDE88();
}

uint64_t sub_2402317E4()
{
  sub_240231984();
  return sub_2402BDE94();
}

uint64_t LedgerState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240231984();
  sub_2402BDE70();
  v8[15] = 0;
  sub_2402BDCFC();
  if (!v1)
  {
    type metadata accessor for LedgerState();
    v8[14] = 1;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDD2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_240231984()
{
  unint64_t result;

  result = qword_256FDE370;
  if (!qword_256FDE370)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEDAC, &type metadata for LedgerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE370);
  }
  return result;
}

uint64_t LedgerState.hashValue.getter()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  type metadata accessor for LedgerState();
  sub_2402BD48C();
  sub_240232E34(&qword_256FDE360, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_2402BD5DC();
  return sub_2402BDE34();
}

uint64_t LedgerState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v22 = a2;
  v4 = sub_2402BD48C();
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE378);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LedgerState();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240231984();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = a1;
  v21 = v6;
  v12 = v11;
  v14 = v23;
  v13 = v24;
  v15 = v25;
  v16 = v26;
  v28 = 0;
  *v12 = sub_2402BDC24();
  v12[1] = v17;
  v27 = 1;
  sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_2402BDC54();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v16);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)v12 + *(int *)(v9 + 20), v14, v15);
  sub_240231EBC((uint64_t)v12, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_240231F00((uint64_t)v12);
}

uint64_t sub_240231CB8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_240231CC4()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  sub_2402BD48C();
  sub_240232E34(&qword_256FDE360, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_2402BD5DC();
  return sub_2402BDE34();
}

uint64_t sub_240231D68()
{
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  sub_2402BD48C();
  sub_240232E34(&qword_256FDE360, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  return sub_2402BD5DC();
}

uint64_t sub_240231DFC()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  sub_2402BD48C();
  sub_240232E34(&qword_256FDE360, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_2402BD5DC();
  return sub_2402BDE34();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_240231EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LedgerState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_240231F00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LedgerState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_240231F3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LedgerState.init(from:)(a1, a2);
}

uint64_t sub_240231F50(_QWORD *a1)
{
  return LedgerState.encode(to:)(a1);
}

uint64_t sub_240231F64(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_2402BDD8C() & 1) != 0)
    return sub_2402BD450();
  else
    return 0;
}

uint64_t LedgerTransition.start.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LedgerTransition.start.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*LedgerTransition.start.modify())()
{
  return nullsub_1;
}

uint64_t LedgerTransition.end.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LedgerTransition.end.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*LedgerTransition.end.modify())()
{
  return nullsub_1;
}

LighthouseBackground::LedgerTransition __swiftcall LedgerTransition.init(start:end:)(Swift::String start, Swift::String end)
{
  Swift::String *v2;
  LighthouseBackground::LedgerTransition result;

  *v2 = start;
  v2[1] = end;
  result.end = end;
  result.start = start;
  return result;
}

uint64_t LedgerTransition.description.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t LedgerTransition.init<A>(codingKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_2402BDE7C();
  sub_240232228();
  v6 = (_QWORD *)sub_2402BDA14();
  result = swift_bridgeObjectRelease();
  v8 = v6[2];
  if (v8)
  {
    if (v8 != 1)
    {
      v10 = v6[4];
      v9 = v6[5];
      v12 = v6[6];
      v11 = v6[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
      *a3 = v10;
      a3[1] = v9;
      a3[2] = v12;
      a3[3] = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_240232228()
{
  unint64_t result;

  result = qword_256FDE380;
  if (!qword_256FDE380)
  {
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256FDE380);
  }
  return result;
}

uint64_t LedgerTransition.codingKey.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v5 = v1[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  a1[3] = (uint64_t)&type metadata for LedgerTransitionCodingKey;
  a1[4] = sub_240232340();
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

unint64_t sub_240232340()
{
  unint64_t result;

  result = qword_256FDE388;
  if (!qword_256FDE388)
  {
    result = MEMORY[0x2426820F8](&unk_2402BED5C, &type metadata for LedgerTransitionCodingKey);
    atomic_store(result, (unint64_t *)&qword_256FDE388);
  }
  return result;
}

uint64_t sub_240232384()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t LedgerTransition.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24023241C()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_240232460()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_2402324A0()
{
  _BYTE *v0;

  if (*v0)
    return 6581861;
  else
    return 0x7472617473;
}

uint64_t sub_2402324D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240233C18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402324F4()
{
  sub_240232D28();
  return sub_2402BDE88();
}

uint64_t sub_24023251C()
{
  sub_240232D28();
  return sub_2402BDE94();
}

uint64_t LedgerTransition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE390);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v9[1] = *(_QWORD *)(v1 + 24);
  v9[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240232D28();
  sub_2402BDE70();
  v12 = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v11 = 1;
    sub_2402BDCFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

uint64_t LedgerTransition.hashValue.getter()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t LedgerTransition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE3A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240232D28();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  v9 = sub_2402BDC24();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2402BDC24();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24023289C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

_QWORD *sub_2402328A8@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result[1];
  v4 = *a2;
  v5 = a2[1];
  *a3 = *result;
  a3[1] = v3;
  a3[2] = v4;
  a3[3] = v5;
  return result;
}

uint64_t sub_2402328BC()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240232940()
{
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2402329B0()
{
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240232A30@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return LedgerTransition.init(from:)(a1, a2);
}

uint64_t sub_240232A44(_QWORD *a1)
{
  return LedgerTransition.encode(to:)(a1);
}

uint64_t sub_240232A58()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_240232ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *v1;
  v5 = v1[1];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  a1[3] = (uint64_t)&type metadata for LedgerTransitionCodingKey;
  a1[4] = sub_240232340();
  result = swift_allocObject();
  *a1 = result;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

uint64_t sub_240232BA8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_240232BD4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

uint64_t sub_240232BE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_240232BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_2402BDD68();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_240232C48()
{
  sub_240232340();
  return sub_2402BDE88();
}

uint64_t sub_240232C70()
{
  sub_240232340();
  return sub_2402BDE94();
}

uint64_t _s20LighthouseBackground16LedgerTransitionV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_2402BDD8C(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_2402BDD8C();
  }
  return result;
}

unint64_t sub_240232D28()
{
  unint64_t result;

  result = qword_256FDE398;
  if (!qword_256FDE398)
  {
    result = MEMORY[0x2426820F8](&unk_2402BED0C, &type metadata for LedgerTransition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE398);
  }
  return result;
}

uint64_t sub_240232D6C()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t sub_240232D78()
{
  return MEMORY[0x24BEE0D08];
}

uint64_t sub_240232D84()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_240232D90(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_240232E34(&qword_256FDE3F0, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
  a1[2] = sub_240232E34(&qword_256FDE3F8, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
  result = sub_240232E34(&qword_256FDE400, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
  a1[3] = result;
  return result;
}

uint64_t sub_240232E08()
{
  return sub_240232E34(&qword_256FDE408, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
}

uint64_t sub_240232E34(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2426820F8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_240232E74(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_240232EA8();
  a1[2] = sub_240232EEC();
  result = sub_240232F30();
  a1[3] = result;
  return result;
}

unint64_t sub_240232EA8()
{
  unint64_t result;

  result = qword_256FDE468;
  if (!qword_256FDE468)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransition, &type metadata for LedgerTransition);
    atomic_store(result, (unint64_t *)&qword_256FDE468);
  }
  return result;
}

unint64_t sub_240232EEC()
{
  unint64_t result;

  result = qword_256FDE470;
  if (!qword_256FDE470)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransition, &type metadata for LedgerTransition);
    atomic_store(result, (unint64_t *)&qword_256FDE470);
  }
  return result;
}

unint64_t sub_240232F30()
{
  unint64_t result;

  result = qword_256FDE478;
  if (!qword_256FDE478)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransition, &type metadata for LedgerTransition);
    atomic_store(result, (unint64_t *)&qword_256FDE478);
  }
  return result;
}

unint64_t sub_240232F78()
{
  unint64_t result;

  result = qword_256FDE480;
  if (!qword_256FDE480)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransition, &type metadata for LedgerTransition);
    atomic_store(result, (unint64_t *)&qword_256FDE480);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LedgerState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_2402BD48C();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for LedgerState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for LedgerState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_2402BD48C();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for LedgerState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for LedgerState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for LedgerState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LedgerState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_240233260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for LedgerState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402332E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_24023335C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD48C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LedgerTransition(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for LedgerTransition()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LedgerTransition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LedgerTransition(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for LedgerTransition(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LedgerTransition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LedgerTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LedgerTransition()
{
  return &type metadata for LedgerTransition;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for LedgerTransition.CodingKeys()
{
  return &type metadata for LedgerTransition.CodingKeys;
}

uint64_t destroy for LedgerTransitionCodingKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LedgerTransitionCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LedgerTransitionCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LedgerTransitionCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LedgerTransitionCodingKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LedgerTransitionCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LedgerTransitionCodingKey()
{
  return &type metadata for LedgerTransitionCodingKey;
}

uint64_t getEnumTagSinglePayload for XPCListenerType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20LighthouseBackground16LedgerTransitionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_240233850 + 4 * byte_2402BE8B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_240233884 + 4 * asc_2402BE8B0[v4]))();
}

uint64_t sub_240233884(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24023388C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240233894);
  return result;
}

uint64_t sub_2402338A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402338A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2402338AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402338B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402338C0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2402338C8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LedgerState.CodingKeys()
{
  return &type metadata for LedgerState.CodingKeys;
}

unint64_t sub_2402338E8()
{
  unint64_t result;

  result = qword_256FDE518;
  if (!qword_256FDE518)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEBDC, &type metadata for LedgerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE518);
  }
  return result;
}

unint64_t sub_240233930()
{
  unint64_t result;

  result = qword_256FDE520;
  if (!qword_256FDE520)
  {
    result = MEMORY[0x2426820F8](&unk_2402BECE4, &type metadata for LedgerTransition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE520);
  }
  return result;
}

unint64_t sub_240233978()
{
  unint64_t result;

  result = qword_256FDE528;
  if (!qword_256FDE528)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEC54, &type metadata for LedgerTransition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE528);
  }
  return result;
}

unint64_t sub_2402339C0()
{
  unint64_t result;

  result = qword_256FDE530;
  if (!qword_256FDE530)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEC7C, &type metadata for LedgerTransition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE530);
  }
  return result;
}

unint64_t sub_240233A08()
{
  unint64_t result;

  result = qword_256FDE538;
  if (!qword_256FDE538)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEC04, &type metadata for LedgerTransitionCodingKey);
    atomic_store(result, (unint64_t *)&qword_256FDE538);
  }
  return result;
}

unint64_t sub_240233A50()
{
  unint64_t result;

  result = qword_256FDE540;
  if (!qword_256FDE540)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEC2C, &type metadata for LedgerTransitionCodingKey);
    atomic_store(result, (unint64_t *)&qword_256FDE540);
  }
  return result;
}

unint64_t sub_240233A98()
{
  unint64_t result;

  result = qword_256FDE548;
  if (!qword_256FDE548)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEB4C, &type metadata for LedgerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE548);
  }
  return result;
}

unint64_t sub_240233AE0()
{
  unint64_t result;

  result = qword_256FDE550;
  if (!qword_256FDE550)
  {
    result = MEMORY[0x2426820F8](&unk_2402BEB74, &type metadata for LedgerState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE550);
  }
  return result;
}

uint64_t sub_240233B24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_240233C18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL static XPCListenerType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t XPCListenerType.hash(into:)()
{
  return sub_2402BDE10();
}

void *static XPCListenerType.allCases.getter()
{
  return &unk_25108A9D8;
}

uint64_t XPCListenerType.hashValue.getter()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

void sub_240233D94(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AA00;
}

uint64_t XPCListener.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void XPCListener.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

id XPCListener.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 40);
}

uint64_t XPCListener.connection.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_240233DEC(char *a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  NSObject *v19;
  NSObject *v20;
  _xpc_connection_s *mach_service;
  char v22;
  const char *v23;
  void *v24;
  _xpc_connection_s *v25;
  _QWORD v26[4];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t aBlock;
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  void *v34;
  void (*v35)(_xpc_connection_s *);
  uint64_t v36;

  v7 = v6;
  v29 = sub_2402BD984();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_2402BD978();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_2402BD558();
  MEMORY[0x24BDAC7A8](v16);
  v17 = *a1;
  *(_BYTE *)(v7 + 32) = v17;
  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a6;
  v30 = a2;
  if (a4)
  {
    *(_QWORD *)(v7 + 40) = a4;
    result = swift_retain();
    v19 = a4;
    if ((v17 & 1) != 0)
    {
LABEL_3:
      v20 = a4;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 16) = 0x756F6D796E6F6E61;
      *(_QWORD *)(v7 + 24) = 0xE900000000000073;
      mach_service = xpc_connection_create(0, v20);
LABEL_7:
      *(_QWORD *)(v7 + 48) = mach_service;
      v35 = sub_2402348E0;
      v36 = v7;
      aBlock = MEMORY[0x24BDAC760];
      v32 = 1107296256;
      v33 = sub_24026CB38;
      v34 = &block_descriptor;
      v24 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      xpc_connection_set_event_handler(mach_service, v24);
      _Block_release(v24);
      swift_unknownObjectRelease();
      v25 = (_xpc_connection_s *)swift_unknownObjectRetain();
      xpc_connection_activate(v25);
      swift_unknownObjectRelease();

      swift_release();
      return v7;
    }
  }
  else
  {
    aBlock = 0;
    v32 = 0xE000000000000000;
    swift_retain();
    sub_2402BDA98();
    swift_bridgeObjectRelease();
    aBlock = 0xD00000000000001DLL;
    v32 = 0x80000002402C9150;
    v26[3] = a6;
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    v26[2] = v32;
    v26[1] = sub_24023481C();
    sub_2402BD54C();
    aBlock = MEMORY[0x24BEE4AF8];
    sub_240234858();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE580);
    sub_2402348A0(&qword_256FDE588, &qword_256FDE580, MEMORY[0x24BEE12C8]);
    sub_2402BDA44();
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BEE5750], v29);
    result = sub_2402BD990();
    v19 = result;
    v22 = *(_BYTE *)(v7 + 32);
    *(_QWORD *)(v7 + 40) = result;
    if ((v22 & 1) != 0)
      goto LABEL_3;
  }
  if (a3)
  {
    *(_QWORD *)(v7 + 16) = v30;
    *(_QWORD *)(v7 + 24) = a3;
    v23 = (const char *)(sub_2402BD690() + 32);
    v20 = a4;
    mach_service = xpc_connection_create_mach_service(v23, v19, 1uLL);
    swift_release();
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_240234198(_xpc_connection_s *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = MEMORY[0x242682320]();
  if (sub_2402BD4F8() == v4)
  {
    v12 = *(uint64_t (**)(uint64_t))(a2 + 56);
    v13 = *(void **)(a2 + 40);
    type metadata accessor for XPCIncomingConnection();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = v13;
    swift_unknownObjectRetain();
    v15 = v13;
    v16 = v12(v14);
    swift_release();
    if (v16)
    {
      swift_release();
      xpc_connection_set_target_queue(a1, v15);
      xpc_connection_activate(a1);
    }
    else
    {
      xpc_connection_cancel(a1);
    }
  }
  else if (sub_2402BD4EC() != v4)
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v5 = sub_2402BD4E0();
    __swift_project_value_buffer(v5, (uint64_t)qword_2543529A0);
    swift_unknownObjectRetain_n();
    v6 = sub_2402BD4C8();
    v7 = sub_2402BD96C();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
      v10 = sub_2402BD684();
      sub_24023D440(v10, v11, &v17);
      sub_2402BD9FC();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24022D000, v6, v7, "Received error or other non-connection type in handler for listener: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242682188](v9, -1, -1);
      MEMORY[0x242682188](v8, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t XPCListener.__allocating_init(serviceName:queue:handler:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  char v11;

  v11 = 0;
  type metadata accessor for XPCListener();
  swift_allocObject();
  return sub_240233DEC(&v11, a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for XPCListener()
{
  return objc_opt_self();
}

uint64_t XPCListener.__allocating_init(queue:handler:)(NSObject *a1, uint64_t a2, uint64_t a3)
{
  char v7;

  v7 = 1;
  type metadata accessor for XPCListener();
  swift_allocObject();
  return sub_240233DEC(&v7, 0, 0, a1, a2, a3);
}

void sub_24023452C()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 48));
}

xpc_endpoint_t sub_240234534()
{
  uint64_t v0;

  return xpc_endpoint_create(*(xpc_connection_t *)(v0 + 48));
}

uint64_t XPCListener.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t XPCListener.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t XPCListener.description.getter()
{
  _QWORD v1[2];

  sub_2402BDA98();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "<xpc listener ");
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v1[0];
}

unint64_t sub_24023469C()
{
  unint64_t result;

  result = qword_256FDE558;
  if (!qword_256FDE558)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCListenerType, &type metadata for XPCListenerType);
    atomic_store(result, (unint64_t *)&qword_256FDE558);
  }
  return result;
}

uint64_t sub_2402346E0()
{
  return sub_2402348A0(&qword_256FDE560, &qword_256FDE568, MEMORY[0x24BEE12E0]);
}

uint64_t sub_24023470C()
{
  return XPCListener.description.getter();
}

uint64_t storeEnumTagSinglePayload for XPCListenerType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_240234778 + 4 * byte_2402BEE15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2402347AC + 4 * byte_2402BEE10[v4]))();
}

uint64_t sub_2402347AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402347B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402347BCLL);
  return result;
}

uint64_t sub_2402347C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402347D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2402347D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402347DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCListenerType()
{
  return &type metadata for XPCListenerType;
}

uint64_t method lookup function for XPCListener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCListener.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XPCListener.endpoint.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

unint64_t sub_24023481C()
{
  unint64_t result;

  result = qword_256FDE570;
  if (!qword_256FDE570)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256FDE570);
  }
  return result;
}

unint64_t sub_240234858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDE578;
  if (!qword_256FDE578)
  {
    v1 = sub_2402BD978();
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_256FDE578);
  }
  return result;
}

uint64_t sub_2402348A0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2426820F8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_2402348E0(_xpc_connection_s *a1)
{
  uint64_t v1;

  sub_240234198(a1, v1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

LighthouseBackground::TaskType_optional __swiftcall TaskType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (LighthouseBackground::TaskType_optional)sub_240236E20(v1);
}

void *static TaskType.allCases.getter()
{
  return &unk_25108AA78;
}

uint64_t TaskType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x5463696D616E7964;
  else
    return 0x6154636974617473;
}

uint64_t sub_240234960(char *a1, char *a2)
{
  return sub_240234C10(*a1, *a2);
}

uint64_t sub_24023496C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x2947495428;
    else
      v3 = 0x295A53495428;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x2947495428;
      else
        v6 = 0x295A53495428;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x29525053495428;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x29525053495428)
  {
LABEL_21:
    v8 = sub_2402BDD8C();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_240234A74(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240234AD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240234B4C + 4 * byte_2402BEF84[a2]))(0x6F7272456B736154);
}

uint64_t sub_240234B4C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6F7272456B736154 && v1 == 0xE900000000000072)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_240234C10(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x5463696D616E7964;
  else
    v3 = 0x6154636974617473;
  if (v2)
    v4 = 0xEA00000000006B73;
  else
    v4 = 0xEB000000006B7361;
  if ((a2 & 1) != 0)
    v5 = 0x5463696D616E7964;
  else
    v5 = 0x6154636974617473;
  if ((a2 & 1) != 0)
    v6 = 0xEB000000006B7361;
  else
    v6 = 0xEA00000000006B73;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_240234CC0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240234D00(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240234D6C + 4 * byte_2402BEF8D[a2]))(0x417373616C43);
}

uint64_t sub_240234D6C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x417373616C43 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_240234E20(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240234E8C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240234F6C + 4 * byte_2402BEF99[a2]))(0x6C61576574617473);
}

uint64_t sub_240234F6C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C61576574617473 && v1 == 0xEC000000676E696BLL)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2402350A8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2402350E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2402351B0 + 4 * byte_2402BEFA8[a2]))(0x616E6F6974617453);
}

uint64_t sub_2402351B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x616E6F6974617453 && v1 == 0xEA00000000007972)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2402352BC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240235304(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240235374 + 4 * byte_2402BEFB5[a2]))(1684107116);
}

uint64_t sub_240235374(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684107116 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_24023542C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24023546C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2402354C0 + 4 * byte_2402BEFBF[a2]))(0x79726F6D656DLL);
}

uint64_t sub_2402354C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x79726F6D656DLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24023555C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7974696C697455;
  else
    v3 = 0x616E65746E69614DLL;
  if (v2)
    v4 = 0xEB0000000065636ELL;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x7974696C697455;
  else
    v5 = 0x616E65746E69614DLL;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEB0000000065636ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_240235608(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240235648(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2402356C0 + 4 * byte_2402BEFC8[a2]))(0x616E65746E69614DLL);
}

uint64_t sub_2402356C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x616E65746E69614DLL && v1 == 0xEB0000000065636ELL)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_24023577C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_2402357C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240235858 + 4 * byte_2402BEFD3[a2]))(0xD00000000000002ELL);
}

uint64_t sub_240235858(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD00000000000002ELL && v1 == 0x80000002402C8F10)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_240235920(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xED00006465726961;
  v3 = 0x50746C7561666564;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65726961506C6C61;
    else
      v5 = 0x65746F6D6572;
    if (v4 == 1)
      v6 = 0xE900000000000064;
    else
      v6 = 0xE600000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x50746C7561666564;
  v6 = 0xED00006465726961;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65726961506C6C61;
    else
      v3 = 0x65746F6D6572;
    if (v7 == 1)
      v2 = 0xE900000000000064;
    else
      v2 = 0xE600000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_240235A48(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x80000002402C9030;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000016;
    else
      v4 = 0xD000000000000011;
    if (v3 == 1)
      v5 = 0x80000002402C9050;
    else
      v5 = 0x80000002402C9070;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v7 = 0xD000000000000016;
      else
        v7 = 0xD000000000000011;
      if (v6 == 1)
        v2 = 0x80000002402C9050;
      else
        v2 = 0x80000002402C9070;
      if (v4 != v7)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xD000000000000019;
    v5 = 0x80000002402C9030;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  if (v4 != 0xD000000000000019)
  {
LABEL_21:
    v8 = sub_2402BDD8C();
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_240235B44(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1819047280;
  else
    v2 = 1752397168;
  if ((a2 & 1) != 0)
    v3 = 1819047280;
  else
    v3 = 1752397168;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_2402BDD8C();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_240235BB0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240235C14(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240235CC0 + 4 * byte_2402BEFE0[a2]))(0x6961576574617473);
}

uint64_t sub_240235CC0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6961576574617473 && v1 == 0xE900000000000074)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_240235DC0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240235E2C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240235ED4 + 4 * byte_2402BEFEC[a2]))(0x696146656C637963);
}

uint64_t sub_240235ED4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x696146656C637963 && v1 == 0xEC0000006572756CLL)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_240235FD0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000014;
  v3 = 0x80000002402C8B30;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001ELL;
    else
      v5 = 0xD000000000000023;
    if (v4 == 1)
      v6 = 0x80000002402C8B50;
    else
      v6 = 0x80000002402C8B70;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000014;
  v6 = 0x80000002402C8B30;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD00000000000001ELL;
    else
      v2 = 0xD000000000000023;
    if (v7 == 1)
      v3 = 0x80000002402C8B50;
    else
      v3 = 0x80000002402C8B70;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_2402360CC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x706D6F436B736174;
  else
    v3 = 0x656863536B736174;
  if (v2)
    v4 = 0xED000064656C7564;
  else
    v4 = 0xED0000646574656CLL;
  if ((a2 & 1) != 0)
    v5 = 0x706D6F436B736174;
  else
    v5 = 0x656863536B736174;
  if ((a2 & 1) != 0)
    v6 = 0xED0000646574656CLL;
  else
    v6 = 0xED000064656C7564;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

BOOL sub_240236188(char a1, char a2)
{
  return dbl_2402C0590[a1] == dbl_2402C0590[a2];
}

void sub_2402361AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240236218(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240236290 + 4 * byte_2402BEFF6[a2]))(0x546567617373656DLL);
}

uint64_t sub_240236290(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x546567617373656DLL && v1 == 0xEB00000000657079)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_240236350(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24023639C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240236430 + 4 * byte_2402BEFFF[a2]))(0x61766E496B736174);
}

uint64_t sub_240236430(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x61766E496B736174 && v1 == 0xEB0000000064696CLL)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_24023650C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240236578(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240236618 + 4 * byte_2402BF00B[a2]))(692277800);
}

uint64_t sub_240236618(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 692277800 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2402366F0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240236730(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_2402367C0 + 4 * byte_2402BF018[a2]))(0x534F6863746177);
}

uint64_t sub_2402367C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x534F6863746177 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_2402368A0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_240236904(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_240236A10 + 4 * byte_2402BF029[a2]))(0x656365526B736154);
}

uint64_t sub_240236A10(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656365526B736154 && v1 == 0xEC00000064657669)
    v2 = 1;
  else
    v2 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_240236B88()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240236C14()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_240236C7C()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::TaskType_optional sub_240236D04(Swift::String *a1)
{
  return TaskType.init(rawValue:)(*a1);
}

void sub_240236D10(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6154636974617473;
  if (*v1)
    v2 = 0x5463696D616E7964;
  v3 = 0xEA00000000006B73;
  if (*v1)
    v3 = 0xEB000000006B7361;
  *a1 = v2;
  a1[1] = v3;
}

void sub_240236D5C(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AAA0;
}

uint64_t sub_240236D6C()
{
  sub_240245A5C();
  return sub_2402BD774();
}

uint64_t sub_240236DC8()
{
  sub_240245A5C();
  return sub_2402BD75C();
}

LighthouseBackground::DynamicTaskSource_optional __swiftcall DynamicTaskSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (LighthouseBackground::DynamicTaskSource_optional)sub_240236E20(v1);
}

uint64_t sub_240236E20@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2402BDBA0();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void *static DynamicTaskSource.allCases.getter()
{
  return &unk_25108AB18;
}

uint64_t DynamicTaskSource.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1819047280;
  else
    return 1752397168;
}

uint64_t sub_240236EAC(char *a1, char *a2)
{
  return sub_240235B44(*a1, *a2);
}

uint64_t sub_240236EB8()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240236F1C()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_240236F54()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::DynamicTaskSource_optional sub_240236FB4(Swift::String *a1)
{
  return DynamicTaskSource.init(rawValue:)(*a1);
}

void sub_240236FC0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1752397168;
  if (*v1)
    v2 = 1819047280;
  *a1 = v2;
  a1[1] = 0xE400000000000000;
}

void sub_240236FE8(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AB40;
}

uint64_t sub_240236FF8()
{
  sub_240245A18();
  return sub_2402BD774();
}

uint64_t sub_240237054()
{
  sub_240245A18();
  return sub_2402BD75C();
}

void static TaskStatus.isTerminated(_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2402370F4()
{
  char v1;

  v1 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  if ((v1 & 1) == 0)
    __asm { BR              X10 }
  return 1;
}

void sub_240237370()
{
  qword_256FDE590 = (uint64_t)&unk_25108AB68;
}

uint64_t static TaskStatus.coreStates.getter()
{
  if (qword_256FDE068 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

LighthouseBackground::TaskStatus_optional __swiftcall TaskStatus.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::TaskStatus_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 11;
  if (v3 < 0xB)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static TaskStatus.allCases.getter()
{
  return &unk_25108ACB8;
}

uint64_t TaskStatus.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240237460 + 4 * byte_2402BF04A[*v0]))(0x616572436B736154, 0xEB00000000646574);
}

uint64_t sub_240237460()
{
  return 0x656365526B736154;
}

unint64_t sub_240237480()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_2402374E0()
{
  return 0x7261745320746F4ELL;
}

uint64_t sub_2402374F4()
{
  return 0x676E696E6E7552;
}

uint64_t sub_24023750C()
{
  return 0x6574656C706D6F43;
}

uint64_t sub_240237528()
{
  return 0x64656C696146;
}

uint64_t sub_24023753C()
{
  return 0x6465727265666544;
}

uint64_t sub_240237554()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2402BDE04();
  sub_24028A2E8((uint64_t)v3, v1);
  return sub_2402BDE34();
}

void sub_240237598(uint64_t a1)
{
  char *v1;

  sub_24028A2E8(a1, *v1);
}

uint64_t sub_2402375A0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_2402BDE04();
  sub_24028A2E8((uint64_t)v3, v1);
  return sub_2402BDE34();
}

LighthouseBackground::TaskStatus_optional sub_2402375E0(Swift::String *a1)
{
  return TaskStatus.init(rawValue:)(*a1);
}

uint64_t sub_2402375EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TaskStatus.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_240237610(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108ACB8;
}

void sub_240237620(char *a1)
{
  sub_2402368A0(*a1);
}

uint64_t sub_24023762C()
{
  sub_2402459D4();
  return sub_2402BD774();
}

uint64_t sub_240237688()
{
  sub_2402459D4();
  return sub_2402BD75C();
}

uint64_t PushMetadata.topic.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushMetadata.channelID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushMetadata.pushType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushMetadata.pushType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PushMetadata.pushType.modify())()
{
  return nullsub_1;
}

uint64_t PushMetadata.pushPriority.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushMetadata.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PushMetadata(0) + 32);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for PushMetadata(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FDE800);
}

uint64_t PushMetadata.init(topic:channelID:pushType:pushPriority:creationDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  char *v10;
  uint64_t v11;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  v10 = (char *)a9 + *(int *)(type metadata accessor for PushMetadata(0) + 32);
  v11 = sub_2402BD48C();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a10, v11);
}

uint64_t sub_240237880()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402378AC + 4 * byte_2402BF055[*v0]))(0x6369706F74, 0xE500000000000000);
}

uint64_t sub_2402378AC()
{
  return 0x496C656E6E616863;
}

uint64_t sub_2402378C8()
{
  return 0x6570795468737570;
}

uint64_t sub_2402378E0()
{
  return 0x6F69725068737570;
}

uint64_t sub_240237900()
{
  return 0x6E6F697461657263;
}

uint64_t sub_240237920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240244D3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_240237944(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_240237950()
{
  sub_240237B6C();
  return sub_2402BDE88();
}

uint64_t sub_240237978()
{
  sub_240237B6C();
  return sub_2402BDE94();
}

uint64_t PushMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE598);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240237B6C();
  sub_2402BDE70();
  v8[15] = 0;
  sub_2402BDCFC();
  if (!v1)
  {
    v8[14] = 1;
    sub_2402BDCFC();
    v8[13] = 2;
    sub_2402BDCFC();
    v8[12] = 3;
    sub_2402BDCFC();
    type metadata accessor for PushMetadata(0);
    v8[11] = 4;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDD2C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_240237B6C()
{
  unint64_t result;

  result = qword_256FDE5A0;
  if (!qword_256FDE5A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0538, &type metadata for PushMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE5A0);
  }
  return result;
}

uint64_t PushMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v22 = a2;
  v23 = sub_2402BD48C();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5A8);
  v4 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PushMetadata(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240237B6C();
  v10 = v26;
  sub_2402BDE64();
  if (v10)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v26 = v7;
  v11 = v4;
  v12 = v24;
  v31 = 0;
  *v9 = sub_2402BDC24();
  v9[1] = v13;
  v30 = 1;
  v9[2] = sub_2402BDC24();
  v9[3] = v14;
  v29 = 2;
  v9[4] = sub_2402BDC24();
  v9[5] = v15;
  v28 = 3;
  v16 = sub_2402BDC24();
  v20[1] = 0;
  v9[6] = v16;
  v9[7] = v17;
  v27 = 4;
  sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v18 = v23;
  sub_2402BDC54();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v25);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v9 + *(int *)(v26 + 32), v12, v18);
  sub_240238BF0((uint64_t)v9, v22, type metadata accessor for PushMetadata);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_240238C34((uint64_t)v9, type metadata accessor for PushMetadata);
}

uint64_t sub_240237F24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PushMetadata.init(from:)(a1, a2);
}

uint64_t sub_240237F38(_QWORD *a1)
{
  return PushMetadata.encode(to:)(a1);
}

uint64_t PullMetadata.creationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PullMetadata.init(creationDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_240237FC0()
{
  return 1;
}

uint64_t sub_240237FC8()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_240238008()
{
  return sub_2402BDE10();
}

uint64_t sub_24023802C()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_240238068()
{
  return 0x6E6F697461657263;
}

uint64_t sub_240238088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_240238134(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_240238140()
{
  sub_2402382A0();
  return sub_2402BDE88();
}

uint64_t sub_240238168()
{
  sub_2402382A0();
  return sub_2402BDE94();
}

uint64_t PullMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402382A0();
  sub_2402BDE70();
  sub_2402BD48C();
  sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_2402382A0()
{
  unint64_t result;

  result = qword_256FDE5B8;
  if (!qword_256FDE5B8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C04E8, &type metadata for PullMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE5B8);
  }
  return result;
}

uint64_t PullMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = sub_2402BD48C();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PullMetadata(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402382A0();
  sub_2402BDE64();
  if (!v2)
  {
    sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    sub_24023DBCC((uint64_t)v11, v15, type metadata accessor for PullMetadata);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PullMetadata(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FDE8A0);
}

uint64_t sub_2402384C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PullMetadata.init(from:)(a1, a2);
}

uint64_t sub_2402384D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402382A0();
  sub_2402BDE70();
  sub_2402BD48C();
  sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TaskMetadata.pushMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2402391FC(v1, a1, &qword_256FDE5C8);
}

uint64_t TaskMetadata.pullMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C124(type metadata accessor for TaskMetadata, (uint64_t)&unk_256FDE5D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2402391FC, a1);
}

uint64_t type metadata accessor for TaskMetadata(uint64_t a1)
{
  return sub_24023DB98(a1, (uint64_t *)&unk_256FDE930);
}

uint64_t TaskMetadata.init(pushMetadata:pullMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_240238F2C(a1, a3, &qword_256FDE5C8);
  v5 = type metadata accessor for TaskMetadata(0);
  return sub_240238F2C(a2, a3 + *(int *)(v5 + 20), &qword_256FDE5D0);
}

uint64_t sub_24023868C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6174654D6C6C7570;
  else
    return 0x6174654D68737570;
}

uint64_t sub_2402386C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240244F8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402386EC()
{
  sub_2402388C0();
  return sub_2402BDE88();
}

uint64_t sub_240238714()
{
  sub_2402388C0();
  return sub_2402BDE94();
}

uint64_t TaskMetadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402388C0();
  sub_2402BDE70();
  v8[15] = 0;
  type metadata accessor for PushMetadata(0);
  sub_240232E34(&qword_256FDE5E8, type metadata accessor for PushMetadata, (uint64_t)&protocol conformance descriptor for PushMetadata);
  sub_2402BDCD8();
  if (!v1)
  {
    type metadata accessor for TaskMetadata(0);
    v8[14] = 1;
    type metadata accessor for PullMetadata(0);
    sub_240232E34(&qword_256FDE5F0, type metadata accessor for PullMetadata, (uint64_t)&protocol conformance descriptor for PullMetadata);
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2402388C0()
{
  unint64_t result;

  result = qword_256FDE5E0;
  if (!qword_256FDE5E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0498, &type metadata for TaskMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE5E0);
  }
  return result;
}

uint64_t TaskMetadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v22 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5F8);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskMetadata(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402388C0();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = a1;
  v14 = v8;
  v15 = (uint64_t)v13;
  v16 = (uint64_t)v23;
  type metadata accessor for PushMetadata(0);
  v27 = 0;
  sub_240232E34(&qword_256FDE600, type metadata accessor for PushMetadata, (uint64_t)&protocol conformance descriptor for PushMetadata);
  v18 = (uint64_t)v24;
  v17 = v25;
  sub_2402BDC00();
  sub_240238F2C(v18, v15, &qword_256FDE5C8);
  type metadata accessor for PullMetadata(0);
  v26 = 1;
  sub_240232E34(&qword_256FDE608, type metadata accessor for PullMetadata, (uint64_t)&protocol conformance descriptor for PullMetadata);
  sub_2402BDC00();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  sub_240238F2C(v16, v15 + *(int *)(v11 + 20), &qword_256FDE5D0);
  sub_240238BF0(v15, v22, type metadata accessor for TaskMetadata);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return sub_240238C34(v15, type metadata accessor for TaskMetadata);
}

uint64_t sub_240238BF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_240238C34(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_240238C70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskMetadata.init(from:)(a1, a2);
}

uint64_t sub_240238C84(_QWORD *a1)
{
  return TaskMetadata.encode(to:)(a1);
}

uint64_t TaskDefinition.criteria.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[224];

  sub_240238F2C(v1 + 32, (uint64_t)v4, &qword_2543524F0);
  sub_240238F2C((uint64_t)v4, a1, &qword_2543524F0);
  return sub_240238DD4((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238CFC);
}

uint64_t sub_240238CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a9 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t TaskDefinition.criteria.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[224];
  _BYTE v5[224];

  sub_240238F2C(a1, (uint64_t)v4, &qword_2543524F0);
  v2 = v1 + 32;
  sub_240238F2C(v2, (uint64_t)v5, &qword_2543524F0);
  sub_240238DD4((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
  return sub_240238F2C((uint64_t)v4, v2, &qword_2543524F0);
}

uint64_t sub_240238DD4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_DWORD *)(a1 + 216));
  return a1;
}

uint64_t sub_240238E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = a9;
  if (a9 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*TaskDefinition.criteria.modify())()
{
  return nullsub_1;
}

uint64_t TaskDefinition.taskRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[256];

  sub_240238F2C(v1 + 256, (uint64_t)v4, &qword_254352538);
  sub_240238F2C((uint64_t)v4, a1, &qword_254352538);
  return sub_240239098((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240238F70);
}

uint64_t sub_240238F2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_240238F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a10 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t TaskDefinition.taskRequest.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[256];
  _BYTE v5[256];

  sub_240238F2C(a1, (uint64_t)v4, &qword_254352538);
  v2 = v1 + 256;
  sub_240238F2C(v2, (uint64_t)v5, &qword_254352538);
  sub_240239098((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
  return sub_240238F2C((uint64_t)v4, v2, &qword_254352538);
}

uint64_t sub_240239098(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248));
  return a1;
}

uint64_t sub_240239114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  result = a10;
  if (a10 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*TaskDefinition.taskRequest.modify())()
{
  return nullsub_1;
}

uint64_t TaskDefinition.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C23C(type metadata accessor for TaskDefinition, a1);
}

uint64_t type metadata accessor for TaskDefinition(uint64_t a1)
{
  return sub_24023DB98(a1, qword_2543523E0);
}

uint64_t sub_2402391FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t TaskDefinition.startDate.setter(uint64_t a1)
{
  return sub_24023C288(a1, type metadata accessor for TaskDefinition);
}

uint64_t sub_24023924C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*TaskDefinition.startDate.modify())()
{
  type metadata accessor for TaskDefinition(0);
  return nullsub_1;
}

uint64_t TaskDefinition.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C2EC(type metadata accessor for TaskDefinition, a1);
}

uint64_t TaskDefinition.endDate.setter(uint64_t a1)
{
  return sub_24023C338(a1, type metadata accessor for TaskDefinition);
}

uint64_t (*TaskDefinition.endDate.modify())()
{
  type metadata accessor for TaskDefinition(0);
  return nullsub_1;
}

uint64_t TaskDefinition.supportedOSTypes.getter()
{
  type metadata accessor for TaskDefinition(0);
  return swift_bridgeObjectRetain();
}

uint64_t TaskDefinition.supportedOSTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TaskDefinition(0) + 40);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TaskDefinition.supportedOSTypes.modify())()
{
  type metadata accessor for TaskDefinition(0);
  return nullsub_1;
}

uint64_t TaskDefinition.init(name:bundleIdentifier:criteria:startDate:endDate:supportedOSTypes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[28];
  _BYTE v37[205];
  _OWORD v38[12];
  _OWORD v39[3];

  v34 = a5[10];
  v35 = a5[11];
  *(_OWORD *)v36 = a5[12];
  *(_OWORD *)&v36[12] = *(__int128 *)((char *)a5 + 204);
  v30 = a5[6];
  v31 = a5[7];
  v32 = a5[8];
  v33 = a5[9];
  v26 = a5[2];
  v27 = a5[3];
  v28 = a5[4];
  v29 = a5[5];
  v24 = *a5;
  v25 = a5[1];
  sub_240239538((uint64_t)v37);
  sub_240238F2C((uint64_t)v37, (uint64_t)(a9 + 32), &qword_254352538);
  v13 = (int *)type metadata accessor for TaskDefinition(0);
  v14 = (uint64_t)a9 + v13[8];
  v15 = sub_2402BD48C();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v17 = (uint64_t)a9 + v13[9];
  v16(v17, 1, 1, v15);
  v18 = v13[10];
  *(_QWORD *)((char *)a9 + v18) = 0;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  v38[10] = v34;
  v38[11] = v35;
  v39[0] = *(_OWORD *)v36;
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)&v36[12];
  v38[6] = v30;
  v38[7] = v31;
  v38[8] = v32;
  v38[9] = v33;
  v38[2] = v26;
  v38[3] = v27;
  v38[4] = v28;
  v38[5] = v29;
  v38[0] = v24;
  v38[1] = v25;
  nullsub_1(v38);
  sub_240238F2C((uint64_t)v38, (uint64_t)(a9 + 4), &qword_2543524F0);
  sub_24023924C(a6, v14);
  sub_24023924C(a7, v17);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a9 + v18) = a8;
  return result;
}

double sub_240239538(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  return result;
}

uint64_t sub_240239568(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240239594 + 4 * byte_2402BF05A[a1]))(1701667182, 0xE400000000000000);
}

unint64_t sub_240239594()
{
  return 0xD000000000000010;
}

uint64_t sub_240239628()
{
  unsigned __int8 *v0;

  return sub_240239568(*v0);
}

uint64_t sub_240239630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402450A8(a1, a2);
  *a3 = result;
  return result;
}

void sub_240239654(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_240239660()
{
  sub_2402399A4();
  return sub_2402BDE88();
}

uint64_t sub_240239688()
{
  sub_2402399A4();
  return sub_2402BDE94();
}

uint64_t TaskDefinition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  _QWORD v11[32];
  _BYTE v12[256];
  uint64_t v13;
  _BYTE v14[232];
  char v15;
  char v16;
  char v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE610);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402399A4();
  sub_2402BDE70();
  v12[0] = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v17 = 1;
    sub_2402BDCFC();
    sub_240238F2C(v3 + 32, (uint64_t)v14, &qword_2543524F0);
    sub_240238F2C((uint64_t)v14, (uint64_t)&v13, &qword_2543524F0);
    v16 = 2;
    sub_2402399E8();
    sub_2402BDCD8();
    sub_240238F2C(v3 + 256, (uint64_t)v12, &qword_254352538);
    sub_240238F2C((uint64_t)v12, (uint64_t)v11, &qword_254352538);
    v15 = 3;
    sub_240239A2C();
    sub_2402BDCD8();
    v10 = type metadata accessor for TaskDefinition(0);
    LOBYTE(v11[0]) = 4;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDCD8();
    LOBYTE(v11[0]) = 5;
    sub_2402BDCD8();
    v11[0] = *(_QWORD *)(v3 + *(int *)(v10 + 40));
    v15 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543525A8);
    sub_24023A11C(&qword_256FDE620, (uint64_t (*)(void))sub_240239A70, MEMORY[0x24BEE12A0]);
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2402399A4()
{
  unint64_t result;

  result = qword_2543523C0;
  if (!qword_2543523C0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0448, &type metadata for TaskDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543523C0);
  }
  return result;
}

unint64_t sub_2402399E8()
{
  unint64_t result;

  result = qword_254352488;
  if (!qword_254352488)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityCriteria, &type metadata for XPCActivityCriteria);
    atomic_store(result, (unint64_t *)&qword_254352488);
  }
  return result;
}

unint64_t sub_240239A2C()
{
  unint64_t result;

  result = qword_256FDE618;
  if (!qword_256FDE618)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequest, &type metadata for TaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FDE618);
  }
  return result;
}

unint64_t sub_240239A70()
{
  unint64_t result;

  result = qword_256FDE628;
  if (!qword_256FDE628)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DeviceOSType, &type metadata for DeviceOSType);
    atomic_store(result, (unint64_t *)&qword_256FDE628);
  }
  return result;
}

uint64_t TaskDefinition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[256];
  _BYTE v47[224];
  uint64_t v48;
  _BYTE v49[256];
  _BYTE v50[224];
  _BYTE v51[280];

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v34 = (uint64_t)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v35 = (uint64_t)v32 - v6;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D8);
  v7 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for TaskDefinition(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24023A054((uint64_t)v50);
  v43 = v12 + 4;
  sub_240238F2C((uint64_t)v50, (uint64_t)(v12 + 4), &qword_2543524F0);
  sub_240239538((uint64_t)v51);
  v41 = v12 + 32;
  sub_240238F2C((uint64_t)v51, (uint64_t)(v12 + 32), &qword_254352538);
  v13 = (char *)v12 + v10[8];
  v14 = sub_2402BD48C();
  v15 = *(void (**)(void))(*(_QWORD *)(v14 - 8) + 56);
  v42 = (uint64_t)v13;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, v14);
  v40 = (char *)v12 + v10[9];
  v15();
  v16 = v10[10];
  v38 = a1;
  v39 = v16;
  *(uint64_t *)((char *)v12 + v16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402399A4();
  v36 = v9;
  v17 = v44;
  sub_2402BDE64();
  if (v17)
  {
    v18 = v42;
    v19 = (uint64_t)v43;
    v20 = (uint64_t)v41;
    v21 = (uint64_t)v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    sub_240238F2C(v19, (uint64_t)v46, &qword_2543524F0);
    sub_240238DD4((uint64_t)v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
    sub_240238F2C(v20, (uint64_t)v49, &qword_254352538);
    sub_240239098((uint64_t)v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
    sub_24023D378(v18, &qword_2543521F0);
    sub_24023D378(v21, &qword_2543521F0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v44 = v7;
    v49[0] = 0;
    *v12 = sub_2402BDC24();
    v12[1] = v22;
    v49[0] = 1;
    v23 = sub_2402BDC24();
    v24 = v42;
    v25 = (uint64_t)v43;
    v12[2] = v23;
    v12[3] = v26;
    v51[279] = 2;
    sub_24023A094();
    sub_2402BDC00();
    v28 = (uint64_t)v40;
    v27 = (uint64_t)v41;
    sub_240238F2C((uint64_t)&v48, (uint64_t)v47, &qword_2543524F0);
    sub_240238F2C((uint64_t)v47, v25, &qword_2543524F0);
    v51[278] = 3;
    sub_24023A0D8();
    sub_2402BDC00();
    sub_240238F2C((uint64_t)v49, (uint64_t)v46, &qword_254352538);
    sub_240238F2C((uint64_t)v46, v27, &qword_254352538);
    LOBYTE(v45) = 4;
    v32[1] = sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_2402BDC00();
    sub_24023924C(v35, v24);
    LOBYTE(v45) = 5;
    sub_2402BDC00();
    sub_24023924C(v34, v28);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543525A8);
    v51[277] = 6;
    sub_24023A11C(&qword_2543525B0, (uint64_t (*)(void))sub_24023A184, MEMORY[0x24BEE12D0]);
    sub_2402BDC00();
    v29 = v39;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v36, v37);
    v30 = v45;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v12 + v29) = v30;
    sub_240238BF0((uint64_t)v12, v33, type metadata accessor for TaskDefinition);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    return sub_240238C34((uint64_t)v12, type metadata accessor for TaskDefinition);
  }
}

double sub_24023A054(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  return result;
}

unint64_t sub_24023A094()
{
  unint64_t result;

  result = qword_254352490;
  if (!qword_254352490)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityCriteria, &type metadata for XPCActivityCriteria);
    atomic_store(result, (unint64_t *)&qword_254352490);
  }
  return result;
}

unint64_t sub_24023A0D8()
{
  unint64_t result;

  result = qword_254352530;
  if (!qword_254352530)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequest, &type metadata for TaskRequest);
    atomic_store(result, (unint64_t *)&qword_254352530);
  }
  return result;
}

uint64_t sub_24023A11C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2543525A8);
    v8 = a2();
    result = MEMORY[0x2426820F8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24023A184()
{
  unint64_t result;

  result = qword_254352540;
  if (!qword_254352540)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DeviceOSType, &type metadata for DeviceOSType);
    atomic_store(result, (unint64_t *)&qword_254352540);
  }
  return result;
}

uint64_t sub_24023A1C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskDefinition.init(from:)(a1, a2);
}

uint64_t sub_24023A1DC(_QWORD *a1)
{
  return TaskDefinition.encode(to:)(a1);
}

uint64_t TaskValidationError.hash(into:)()
{
  return sub_2402BDE10();
}

BOOL static TaskValidationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24023A22C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24023A268 + 4 * byte_2402BF061[a1]))(0x4E64696C61766E69, 0xEB00000000656D61);
}

unint64_t sub_24023A268()
{
  return 0xD000000000000017;
}

unint64_t sub_24023A2DC()
{
  return 0xD000000000000010;
}

uint64_t sub_24023A2F8()
{
  return 0x4564696C61766E69;
}

uint64_t sub_24023A31C()
{
  return 0x4F64696C61766E69;
}

uint64_t sub_24023A340()
{
  unsigned __int8 *v0;

  return sub_24023A22C(*v0);
}

uint64_t sub_24023A348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240245394(a1, a2);
  *a3 = result;
  return result;
}

void sub_24023A36C(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_24023A378()
{
  sub_24023ABA4();
  return sub_2402BDE88();
}

uint64_t sub_24023A3A0()
{
  sub_24023ABA4();
  return sub_2402BDE94();
}

uint64_t sub_24023A3C8()
{
  return 0;
}

uint64_t sub_24023A3D4()
{
  sub_24023AD80();
  return sub_2402BDE88();
}

uint64_t sub_24023A3FC()
{
  sub_24023AD80();
  return sub_2402BDE94();
}

uint64_t sub_24023A424()
{
  sub_24023ACF8();
  return sub_2402BDE88();
}

uint64_t sub_24023A44C()
{
  sub_24023ACF8();
  return sub_2402BDE94();
}

uint64_t sub_24023A474()
{
  sub_24023AD3C();
  return sub_2402BDE88();
}

uint64_t sub_24023A49C()
{
  sub_24023AD3C();
  return sub_2402BDE94();
}

uint64_t sub_24023A4C4()
{
  sub_24023AC2C();
  return sub_2402BDE88();
}

uint64_t sub_24023A4EC()
{
  sub_24023AC2C();
  return sub_2402BDE94();
}

uint64_t sub_24023A514()
{
  sub_24023ADC4();
  return sub_2402BDE88();
}

uint64_t sub_24023A53C()
{
  sub_24023ADC4();
  return sub_2402BDE94();
}

uint64_t sub_24023A564()
{
  sub_24023ABE8();
  return sub_2402BDE88();
}

uint64_t sub_24023A58C()
{
  sub_24023ABE8();
  return sub_2402BDE94();
}

uint64_t sub_24023A5B4()
{
  sub_24023AC70();
  return sub_2402BDE88();
}

uint64_t sub_24023A5DC()
{
  sub_24023AC70();
  return sub_2402BDE94();
}

uint64_t sub_24023A604@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_24023A630()
{
  sub_24023ACB4();
  return sub_2402BDE88();
}

uint64_t sub_24023A658()
{
  sub_24023ACB4();
  return sub_2402BDE94();
}

void TaskValidationError.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE630);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE638);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE640);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE648);
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v26 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE650);
  v24 = *(_QWORD *)(v11 - 8);
  v25 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v23 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE658);
  v21 = *(_QWORD *)(v13 - 8);
  v22 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE660);
  v18 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE668);
  MEMORY[0x24BDAC7A8](v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE670);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v17 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24023ABA4();
  sub_2402BDE70();
  __asm { BR              X9 }
}

uint64_t sub_24023A940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 72) = 0;
  sub_24023ADC4();
  v5 = *(_QWORD *)(v4 - 104);
  sub_2402BDC90();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v1, v5);
}

unint64_t sub_24023ABA4()
{
  unint64_t result;

  result = qword_256FDE678;
  if (!qword_256FDE678)
  {
    result = MEMORY[0x2426820F8](&unk_2402C03F8, &type metadata for TaskValidationError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE678);
  }
  return result;
}

unint64_t sub_24023ABE8()
{
  unint64_t result;

  result = qword_256FDE680;
  if (!qword_256FDE680)
  {
    result = MEMORY[0x2426820F8](&unk_2402C03A8, &type metadata for TaskValidationError.InvalidOSTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE680);
  }
  return result;
}

unint64_t sub_24023AC2C()
{
  unint64_t result;

  result = qword_256FDE688;
  if (!qword_256FDE688)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0358, &type metadata for TaskValidationError.InvalidEndDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE688);
  }
  return result;
}

unint64_t sub_24023AC70()
{
  unint64_t result;

  result = qword_256FDE690;
  if (!qword_256FDE690)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0308, &type metadata for TaskValidationError.InvalidStartDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE690);
  }
  return result;
}

unint64_t sub_24023ACB4()
{
  unint64_t result;

  result = qword_256FDE698;
  if (!qword_256FDE698)
  {
    result = MEMORY[0x2426820F8](&unk_2402C02B8, &type metadata for TaskValidationError.InvalidTaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE698);
  }
  return result;
}

unint64_t sub_24023ACF8()
{
  unint64_t result;

  result = qword_256FDE6A0;
  if (!qword_256FDE6A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0268, &type metadata for TaskValidationError.InvalidCriteriaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE6A0);
  }
  return result;
}

unint64_t sub_24023AD3C()
{
  unint64_t result;

  result = qword_256FDE6A8;
  if (!qword_256FDE6A8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0218, &type metadata for TaskValidationError.InvalidDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE6A8);
  }
  return result;
}

unint64_t sub_24023AD80()
{
  unint64_t result;

  result = qword_256FDE6B0;
  if (!qword_256FDE6B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C01C8, &type metadata for TaskValidationError.InvalidBundleIdentifierCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE6B0);
  }
  return result;
}

unint64_t sub_24023ADC4()
{
  unint64_t result;

  result = qword_256FDE6B8;
  if (!qword_256FDE6B8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0178, &type metadata for TaskValidationError.InvalidNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE6B8);
  }
  return result;
}

uint64_t TaskValidationError.hashValue.getter()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t TaskValidationError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  char *v57;

  v51 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6C0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6C8);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v54 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6D0);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v53 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6D8);
  v40 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v50 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6E0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6E8);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v49 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6F0);
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v48 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE6F8);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE700);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v56 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_24023ABA4();
  v23 = v57;
  sub_2402BDE64();
  if (!v23)
  {
    v31[2] = v17;
    v31[0] = v15;
    v31[1] = v14;
    v32 = v19;
    v33 = v18;
    v57 = v21;
    v24 = sub_2402BDC78();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X9 }
    v25 = sub_2402BDAE0();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE708);
    *v27 = &type metadata for TaskValidationError;
    v28 = v33;
    v29 = v57;
    sub_2402BDBB8();
    sub_2402BDAD4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v28);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
}

BOOL sub_24023B5A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_24023B5B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskValidationError.init(from:)(a1, a2);
}

void sub_24023B5C8(_QWORD *a1)
{
  TaskValidationError.encode(to:)(a1);
}

uint64_t validateTaskDefinition(_:)(double *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  double v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[2];
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[256];
  _QWORD v68[32];
  _QWORD v69[32];
  double v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[224];
  _BYTE v88[232];
  uint64_t v89;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352500);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&qword_254352510);
  v7 = *((_QWORD *)v6 - 1);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2402BD4BC();
  if (v1)
    return result;
  v11 = *((_QWORD *)a1 + 1);
  v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0)
    v12 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
  if (!v12)
    goto LABEL_6;
  v70 = *a1;
  v71 = v11;
  sub_24023D334();
  sub_2402348A0(&qword_254352508, &qword_254352510, MEMORY[0x24BEE7460]);
  sub_2402BD5E8();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543524F8);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v5, 1, v13);
  sub_24023D378((uint64_t)v5, &qword_254352500);
  if (v14 == 1)
  {
LABEL_6:
    sub_24023D3B4();
    swift_allocError();
    *v15 = 0;
LABEL_16:
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint8_t *))(v7 + 8))(v9, v6);
  }
  v16 = *((_QWORD *)a1 + 3);
  v17 = (_QWORD)a1[2] & 0xFFFFFFFFFFFFLL;
  if ((v16 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v16) & 0xF;
  if (!v17)
  {
    sub_24023D3B4();
    swift_allocError();
    v21 = 1;
LABEL_15:
    *v20 = v21;
    goto LABEL_16;
  }
  v18 = *(_QWORD *)((char *)a1 + *(int *)(type metadata accessor for TaskDefinition(0) + 40));
  if (!v18)
  {
    sub_240238F2C((uint64_t)(a1 + 4), (uint64_t)v87, &qword_2543524F0);
    sub_240238F2C((uint64_t)v87, (uint64_t)v88, &qword_2543524F0);
    if (sub_24023D3F8((uint64_t)v88) == 1)
    {
      sub_240238F2C((uint64_t)(a1 + 32), (uint64_t)v69, &qword_254352538);
      sub_240238F2C((uint64_t)v69, (uint64_t)&v70, &qword_254352538);
      if (sub_24023D41C((uint64_t)&v70) == 1)
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v22 = sub_2402BD4E0();
        __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
        v23 = sub_2402BD4C8();
        v24 = sub_2402BD96C();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v25 = 0;
          _os_log_impl(&dword_24022D000, v23, v24, "Missing criteria or taskRequest in taskDefinition.", v25, 2u);
          MEMORY[0x242682188](v25, -1, -1);
        }

        sub_24023D3B4();
        swift_allocError();
        v21 = 2;
        goto LABEL_15;
      }
    }
    else
    {
      sub_240238F2C((uint64_t)v87, (uint64_t)&v70, &qword_2543524F0);
      if (v71 == 1)
      {
        v26 = v70;
        if ((unint64_t)(*(_QWORD *)&v70 - 86401) < 0xFFFFFFFFFFFEAEBBLL)
        {
          sub_24023DB20((uint64_t)&v70);
          if (qword_2543528A0 != -1)
            swift_once();
          v27 = sub_2402BD4E0();
          __swift_project_value_buffer(v27, (uint64_t)qword_2543529A0);
          sub_24023DB20((uint64_t)&v70);
          v28 = sub_2402BD4C8();
          v29 = sub_2402BD96C();
          if (os_log_type_enabled(v28, v29))
          {
            v49 = v7;
            v30 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v30 = 134217984;
            v7 = v49;
            sub_240238DD4((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
            *(double *)v69 = v26;
            sub_2402BD9FC();
            sub_240238DD4((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
            _os_log_impl(&dword_24022D000, v28, v29, "Invalid interval: %lld", v30, 0xCu);
            MEMORY[0x242682188](v30, -1, -1);
          }
          else
          {
            sub_240238DD4((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
            sub_240238DD4((uint64_t)v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _DWORD))sub_240238E50);
          }

          sub_24023D3B4();
          swift_allocError();
          v21 = 3;
          goto LABEL_15;
        }
      }
    }
    sub_240238F2C((uint64_t)(a1 + 32), (uint64_t)v69, &qword_254352538);
    sub_240238F2C((uint64_t)v69, (uint64_t)&v70, &qword_254352538);
    if (sub_24023D41C((uint64_t)&v70) == 1)
      return (*(uint64_t (**)(char *, uint8_t *))(v7 + 8))(v9, v6);
    v31 = *((_QWORD *)&v72 + 1);
    if ((BYTE1(v72) & 1) != 0)
    {
      if (BYTE9(v73))
      {
        sub_240238F2C((uint64_t)v69, (uint64_t)v67, &qword_254352538);
        sub_24023DA80((uint64_t)v67);
        if (qword_2543528A0 != -1)
          swift_once();
        v32 = sub_2402BD4E0();
        __swift_project_value_buffer(v32, (uint64_t)qword_2543529A0);
        sub_240238F2C((uint64_t)v69, (uint64_t)v68, &qword_254352538);
        sub_24023DA80((uint64_t)v68);
        v33 = sub_2402BD4C8();
        v34 = sub_2402BD96C();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          v49 = swift_slowAlloc();
          v89 = v49;
          v48 = v35;
          *(_DWORD *)v35 = 136315138;
          v47[1] = v35 + 4;
          v63 = v83;
          v64 = v84;
          v65 = v85;
          v66 = v86;
          v59 = v79;
          v60 = v80;
          v61 = v81;
          v62 = v82;
          v55 = v75;
          v56 = v76;
          v57 = v77;
          v58 = v78;
          v51 = v71;
          v52 = v72;
          v53 = v73;
          v54 = v74;
          v36 = TaskRequest.description.getter();
          v50 = sub_24023D440(v36, v37, &v89);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          sub_240239098((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
          sub_240239098((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
          v38 = v48;
          _os_log_impl(&dword_24022D000, v33, v34, "Malformed request: %s", v48, 0xCu);
          v39 = v49;
          swift_arrayDestroy();
          MEMORY[0x242682188](v39, -1, -1);
          MEMORY[0x242682188](v38, -1, -1);
        }
        else
        {
          sub_240239098((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
          sub_240239098((uint64_t)v69, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_240239114);
        }

        goto LABEL_58;
      }
    }
    else
    {
      v40 = v70;
      if (v70 < 60.0 || v70 > 86400.0)
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v46 = sub_2402BD4E0();
        __swift_project_value_buffer(v46, (uint64_t)qword_2543529A0);
        v42 = sub_2402BD4C8();
        v43 = sub_2402BD96C();
        if (!os_log_type_enabled(v42, v43))
          goto LABEL_53;
        v44 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v44 = 134217984;
        *(double *)v68 = v40;
        sub_2402BD9FC();
        v45 = "Invalid interval: %f";
LABEL_52:
        _os_log_impl(&dword_24022D000, v42, v43, v45, v44, 0xCu);
        MEMORY[0x242682188](v44, -1, -1);
LABEL_53:

LABEL_58:
        sub_24023D3B4();
        swift_allocError();
        v21 = 4;
        goto LABEL_15;
      }
      if ((BYTE9(v73) & 1) != 0)
        return (*(uint64_t (**)(char *, uint8_t *))(v7 + 8))(v9, v6);
    }
    if (*((double *)&v72 + 1) >= 60.0 && *((double *)&v72 + 1) <= 86400.0)
      return (*(uint64_t (**)(char *, uint8_t *))(v7 + 8))(v9, v6);
    if (qword_2543528A0 != -1)
      swift_once();
    v41 = sub_2402BD4E0();
    __swift_project_value_buffer(v41, (uint64_t)qword_2543529A0);
    v42 = sub_2402BD4C8();
    v43 = sub_2402BD96C();
    if (!os_log_type_enabled(v42, v43))
      goto LABEL_53;
    v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v44 = 134217984;
    v68[0] = v31;
    sub_2402BD9FC();
    v45 = "Invalid scheduleAfter: %f";
    goto LABEL_52;
  }
  v49 = v7;
  if (*(_QWORD *)(v18 + 16))
  {
    v48 = v6;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  sub_24023D3B4();
  swift_allocError();
  *v19 = 7;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint8_t *))(v49 + 8))(v9, v6);
}

void MLHostTask.taskType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t MLHostTask.taskDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C124(type metadata accessor for MLHostTask, (uint64_t)type metadata accessor for TaskDefinition, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_240238BF0, a1);
}

uint64_t sub_24023C124@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 20), a4, a2);
}

uint64_t MLHostTask.taskFolder.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHostTask(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostTask.status.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for MLHostTask(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t MLHostTask.status.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for MLHostTask(0);
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*MLHostTask.status.modify())(_QWORD)
{
  type metadata accessor for MLHostTask(0);
  return nullsub_1;
}

uint64_t MLHostTask.lastExecutionDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C23C(type metadata accessor for MLHostTask, a1);
}

uint64_t sub_24023C23C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_2402391FC(v2 + *(int *)(v4 + 32), a2, &qword_2543521F0);
}

uint64_t MLHostTask.lastExecutionDate.setter(uint64_t a1)
{
  return sub_24023C288(a1, type metadata accessor for MLHostTask);
}

uint64_t sub_24023C288(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a2(0) + 32);
  return sub_24023924C(a1, v4);
}

uint64_t (*MLHostTask.lastExecutionDate.modify())(_QWORD)
{
  type metadata accessor for MLHostTask(0);
  return nullsub_1;
}

uint64_t MLHostTask.expectedExecutionDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24023C2EC(type metadata accessor for MLHostTask, a1);
}

uint64_t sub_24023C2EC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_2402391FC(v2 + *(int *)(v4 + 36), a2, &qword_2543521F0);
}

uint64_t MLHostTask.expectedExecutionDate.setter(uint64_t a1)
{
  return sub_24023C338(a1, type metadata accessor for MLHostTask);
}

uint64_t sub_24023C338(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + *(int *)(a2(0) + 36);
  return sub_24023924C(a1, v4);
}

uint64_t (*MLHostTask.expectedExecutionDate.modify())(_QWORD)
{
  type metadata accessor for MLHostTask(0);
  return nullsub_1;
}

uint64_t MLHostTask.init(taskDefinition:taskType:taskFolder:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  char v9;
  int *v10;
  _BYTE *v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v15;

  v9 = *a2;
  v10 = (int *)type metadata accessor for MLHostTask(0);
  a5[v10[7]] = 6;
  v11 = &a5[v10[8]];
  v12 = sub_2402BD48C();
  v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(&a5[v10[9]], 1, 1, v12);
  *a5 = v9;
  result = sub_24023DBCC(a1, (uint64_t)&a5[v10[5]], type metadata accessor for TaskDefinition);
  v15 = &a5[v10[6]];
  *v15 = a3;
  v15[1] = a4;
  return result;
}

uint64_t MLHostTask.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHostTask(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostTask.bundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MLHostTask(0) + 20) + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void MLHostTask.description.getter()
{
  uint64_t v1;

  sub_2402BDA98();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for MLHostTask(0);
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  __asm { BR              X10 }
}

uint64_t sub_24023C610()
{
  uint64_t v1;

  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v1;
}

uint64_t sub_24023C734(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24023C768 + 4 * byte_2402BF08A[a1]))(0x657079546B736174, 0xE800000000000000);
}

uint64_t sub_24023C768()
{
  return 0x696665446B736174;
}

uint64_t sub_24023C78C()
{
  return 0x646C6F466B736174;
}

uint64_t sub_24023C7A8()
{
  return 0x737574617473;
}

unint64_t sub_24023C7BC()
{
  return 0xD000000000000011;
}

unint64_t sub_24023C7D8()
{
  return 0xD000000000000015;
}

uint64_t sub_24023C7F8()
{
  unsigned __int8 *v0;

  return sub_24023C734(*v0);
}

uint64_t sub_24023C800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240245738(a1, a2);
  *a3 = result;
  return result;
}

void sub_24023C824(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_24023C830()
{
  sub_24023DC10();
  return sub_2402BDE88();
}

uint64_t sub_24023C858()
{
  sub_24023DC10();
  return sub_2402BDE94();
}

uint64_t MLHostTask.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE718);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24023DC10();
  sub_2402BDE70();
  v19 = *v3;
  v18 = 0;
  sub_24023DC54();
  sub_2402BDD2C();
  if (!v2)
  {
    v9 = type metadata accessor for MLHostTask(0);
    v17 = 1;
    type metadata accessor for TaskDefinition(0);
    sub_240232E34(&qword_256FDE730, type metadata accessor for TaskDefinition, (uint64_t)&protocol conformance descriptor for TaskDefinition);
    sub_2402BDD2C();
    v16 = 2;
    sub_2402BDC9C();
    v15 = v3[*(int *)(v9 + 28)];
    v14 = 3;
    sub_24023DC98();
    sub_2402BDD2C();
    v13 = 4;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDCD8();
    v12 = 5;
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t MLHostTask.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v32 - v6;
  v37 = type metadata accessor for TaskDefinition(0);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE740);
  v8 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MLHostTask(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(int *)(v12 + 28);
  v14[v15] = 6;
  v16 = &v14[*(int *)(v12 + 32)];
  v17 = sub_2402BD48C();
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  v42 = (uint64_t)v16;
  ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v41 = v11;
  v39 = &v14[*(int *)(v11 + 36)];
  v18();
  v19 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_24023DC10();
  v20 = v43;
  sub_2402BDE64();
  if (v20)
  {
    v22 = (uint64_t)v39;
    v23 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    sub_24023D378(v23, &qword_2543521F0);
    return sub_24023D378(v22, &qword_2543521F0);
  }
  else
  {
    v21 = (uint64_t)v36;
    v43 = v17;
    v50 = 0;
    sub_24023DCDC();
    sub_2402BDC54();
    *v14 = v51;
    v49 = 1;
    sub_240232E34(&qword_2543523D8, type metadata accessor for TaskDefinition, (uint64_t)&protocol conformance descriptor for TaskDefinition);
    sub_2402BDC54();
    v24 = v41;
    sub_24023DBCC(v21, (uint64_t)&v14[*(int *)(v41 + 20)], type metadata accessor for TaskDefinition);
    v48 = 2;
    v25 = sub_2402BDBC4();
    v26 = v42;
    v27 = (uint64_t *)&v14[*(int *)(v24 + 24)];
    *v27 = v25;
    v27[1] = v28;
    v46 = 3;
    sub_24023DD20();
    sub_2402BDC54();
    v14[v15] = v47;
    v45 = 4;
    sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v29 = (uint64_t)v35;
    sub_2402BDC00();
    sub_24023924C(v29, v26);
    v44 = 5;
    v30 = (uint64_t)v34;
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v38);
    sub_24023924C(v30, (uint64_t)v39);
    sub_240238BF0((uint64_t)v14, v33, type metadata accessor for MLHostTask);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return sub_240238C34((uint64_t)v14, type metadata accessor for MLHostTask);
  }
}

uint64_t sub_24023D01C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MLHostTask.init(from:)(a1, a2);
}

uint64_t sub_24023D030(_QWORD *a1)
{
  return MLHostTask.encode(to:)(a1);
}

LighthouseBackground::TaskStatus_optional __swiftcall TaskStatus.init(raw:)(Swift::String raw)
{
  _BYTE *v1;
  _BYTE *v2;
  LighthouseBackground::TaskStatus_optional result;
  char v4;

  v2 = v1;
  result.value = TaskStatus.init(rawValue:)(raw).value;
  *v2 = v4;
  return result;
}

uint64_t TaskStatus.characterRepresentation.getter()
{
  char *v0;

  return qword_2402C05D0[*v0];
}

uint64_t static TaskStatus.fromCharacter(char:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  char v6;

  v4 = result;
  if (result == 84 && a2 == 0xE100000000000000)
  {
    v6 = 0;
  }
  else
  {
    result = sub_2402BDD8C();
    v6 = 0;
    if ((result & 1) == 0)
    {
      if (v4 == 73 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 1;
      }
      else if (v4 == 83 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 2;
      }
      else if (v4 == 71 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 3;
      }
      else if (v4 == 80 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 4;
      }
      else if (v4 == 90 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 5;
      }
      else if (v4 == 78 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 6;
      }
      else if (v4 == 82 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 7;
      }
      else if (v4 == 68 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 8;
      }
      else if (v4 == 67 && a2 == 0xE100000000000000 || (result = sub_2402BDD8C(), (result & 1) != 0))
      {
        v6 = 9;
      }
      else
      {
        v6 = 10;
        if (v4 != 70 || a2 != 0xE100000000000000)
        {
          result = sub_2402BDD8C();
          if ((result & 1) != 0)
            v6 = 10;
          else
            v6 = 11;
        }
      }
    }
  }
  *a3 = v6;
  return result;
}

unint64_t sub_24023D334()
{
  unint64_t result;

  result = qword_2543524C0;
  if (!qword_2543524C0)
  {
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2543524C0);
  }
  return result;
}

uint64_t sub_24023D378(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24023D3B4()
{
  unint64_t result;

  result = qword_256FDE710;
  if (!qword_256FDE710)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskValidationError, &type metadata for TaskValidationError);
    atomic_store(result, (unint64_t *)&qword_256FDE710);
  }
  return result;
}

uint64_t sub_24023D3F8(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_24023D41C(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_24023D440(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_24023D510(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_240245AA0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_240245AA0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_24023D510(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2402BDA08();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_24023D6C8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_2402BDAEC();
  if (!v8)
  {
    sub_2402BDB40();
    __break(1u);
LABEL_17:
    result = sub_2402BDB88();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_24023D6C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_24023D75C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24023D934(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_24023D934(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24023D75C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_24023D8D0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_2402BDAA4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2402BDB40();
      __break(1u);
LABEL_10:
      v2 = sub_2402BD6D8();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_2402BDB88();
    __break(1u);
LABEL_14:
    result = sub_2402BDB40();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_24023D8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEA90);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24023D934(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEA90);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24023DA80(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24023DB20(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for MLHostTask(uint64_t a1)
{
  return sub_24023DB98(a1, (uint64_t *)&unk_2543521F8);
}

uint64_t sub_24023DB98(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24023DBCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_24023DC10()
{
  unint64_t result;

  result = qword_256FDE720;
  if (!qword_256FDE720)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0128, &type metadata for MLHostTask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE720);
  }
  return result;
}

unint64_t sub_24023DC54()
{
  unint64_t result;

  result = qword_256FDE728;
  if (!qword_256FDE728)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskType, &type metadata for TaskType);
    atomic_store(result, (unint64_t *)&qword_256FDE728);
  }
  return result;
}

unint64_t sub_24023DC98()
{
  unint64_t result;

  result = qword_256FDE738;
  if (!qword_256FDE738)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskStatus, &type metadata for TaskStatus);
    atomic_store(result, (unint64_t *)&qword_256FDE738);
  }
  return result;
}

unint64_t sub_24023DCDC()
{
  unint64_t result;

  result = qword_256FDE748;
  if (!qword_256FDE748)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskType, &type metadata for TaskType);
    atomic_store(result, (unint64_t *)&qword_256FDE748);
  }
  return result;
}

unint64_t sub_24023DD20()
{
  unint64_t result;

  result = qword_256FDE750;
  if (!qword_256FDE750)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskStatus, &type metadata for TaskStatus);
    atomic_store(result, (unint64_t *)&qword_256FDE750);
  }
  return result;
}

unint64_t sub_24023DD68()
{
  unint64_t result;

  result = qword_256FDE758;
  if (!qword_256FDE758)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskType, &type metadata for TaskType);
    atomic_store(result, (unint64_t *)&qword_256FDE758);
  }
  return result;
}

uint64_t sub_24023DDAC()
{
  return sub_2402348A0(&qword_256FDE760, &qword_256FDE768, MEMORY[0x24BEE12E0]);
}

unint64_t sub_24023DDDC()
{
  unint64_t result;

  result = qword_256FDE770;
  if (!qword_256FDE770)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DynamicTaskSource, &type metadata for DynamicTaskSource);
    atomic_store(result, (unint64_t *)&qword_256FDE770);
  }
  return result;
}

uint64_t sub_24023DE20()
{
  return sub_2402348A0(&qword_256FDE778, &qword_256FDE780, MEMORY[0x24BEE12E0]);
}

unint64_t sub_24023DE50()
{
  unint64_t result;

  result = qword_256FDE788;
  if (!qword_256FDE788)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskStatus, &type metadata for TaskStatus);
    atomic_store(result, (unint64_t *)&qword_256FDE788);
  }
  return result;
}

uint64_t sub_24023DE94()
{
  return sub_2402348A0(&qword_256FDE790, &qword_256FDE798, MEMORY[0x24BEE12E0]);
}

unint64_t sub_24023DEC4()
{
  unint64_t result;

  result = qword_256FDE7A0;
  if (!qword_256FDE7A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskValidationError, &type metadata for TaskValidationError);
    atomic_store(result, (unint64_t *)&qword_256FDE7A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskType()
{
  return &type metadata for TaskType;
}

ValueMetadata *type metadata accessor for DynamicTaskSource()
{
  return &type metadata for DynamicTaskSource;
}

uint64_t getEnumTagSinglePayload for TaskStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_24023E008 + 4 * byte_2402BF095[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_24023E03C + 4 * byte_2402BF090[v4]))();
}

uint64_t sub_24023E03C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24023E044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24023E04CLL);
  return result;
}

uint64_t sub_24023E058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24023E060);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_24023E064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24023E06C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskStatus()
{
  return &type metadata for TaskStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for PushMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    v8 = a2[7];
    v9 = *(int *)(a3 + 32);
    v10 = (char *)a2 + v9;
    v11 = (char *)a1 + v9;
    a1[6] = a2[6];
    a1[7] = v8;
    v12 = sub_2402BD48C();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for PushMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PushMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a2 + v8;
  v10 = (char *)a1 + v8;
  a1[6] = a2[6];
  a1[7] = v7;
  v11 = sub_2402BD48C();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

_QWORD *assignWithCopy for PushMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PushMetadata(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *assignWithTake for PushMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023E45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PushMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023E4E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_24023E558()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD48C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PullMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PullMetadata(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PullMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PullMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PullMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PullMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PullMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023E75C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PullMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023E7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_24023E7E4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD48C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for PushMetadata(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      v12 = a2[3];
      a1[2] = a2[2];
      a1[3] = v12;
      v13 = a2[5];
      a1[4] = a2[4];
      a1[5] = v13;
      v14 = a2[7];
      a1[6] = a2[6];
      a1[7] = v14;
      v15 = *(int *)(v7 + 32);
      v26 = (char *)a2 + v15;
      v27 = (char *)a1 + v15;
      v16 = sub_2402BD48C();
      v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25(v27, v26, v16);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v17 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for PullMetadata(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v18, v19, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for TaskMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = type metadata accessor for PushMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v4 + 32);
    v6 = sub_2402BD48C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for PullMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    v10 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
  }
  return result;
}

_QWORD *initializeWithCopy for TaskMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = type metadata accessor for PushMetadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = a2[5];
    a1[4] = a2[4];
    a1[5] = v11;
    v12 = a2[7];
    a1[6] = a2[6];
    a1[7] = v12;
    v13 = *(int *)(v6 + 32);
    v24 = (char *)a2 + v13;
    v25 = (char *)a1 + v13;
    v14 = sub_2402BD48C();
    v26 = a3;
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v25, v24, v14);
    a3 = v26;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for PullMetadata(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v17, v18, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *assignWithCopy for TaskMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  v6 = type metadata accessor for PushMetadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      v11 = *(int *)(v6 + 32);
      v31 = (char *)a2 + v11;
      v32 = (char *)a1 + v11;
      v12 = sub_2402BD48C();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v32, v31, v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_240238C34((uint64_t)a1, type metadata accessor for PushMetadata);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = *(int *)(v6 + 32);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
LABEL_7:
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for PullMetadata(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      v30 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v16, v17, v30);
      return a1;
    }
    sub_240238C34((uint64_t)v16, type metadata accessor for PullMetadata);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v23 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v16, v17, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *initializeWithTake for TaskMetadata(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for PushMetadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
    v11 = *(int *)(v6 + 32);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v15 = *(int *)(a3 + 20);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for PullMetadata(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v16, v17, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *assignWithTake for TaskMetadata(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for PushMetadata(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v11;
      v12 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v12;
      v13 = *(int *)(v6 + 32);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_240238C34((uint64_t)a1, type metadata accessor for PushMetadata);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v29 = a2[1];
  *a1 = *a2;
  a1[1] = v29;
  swift_bridgeObjectRelease();
  v30 = a2[3];
  a1[2] = a2[2];
  a1[3] = v30;
  swift_bridgeObjectRelease();
  v31 = a2[5];
  a1[4] = a2[4];
  a1[5] = v31;
  swift_bridgeObjectRelease();
  v32 = a2[7];
  a1[6] = a2[6];
  a1[7] = v32;
  swift_bridgeObjectRelease();
  v33 = *(int *)(v6 + 32);
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
LABEL_7:
  v18 = *(int *)(a3 + 20);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for PullMetadata(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      v37 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v19, v20, v37);
      return a1;
    }
    sub_240238C34((uint64_t)v19, type metadata accessor for PullMetadata);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  v26 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v19, v20, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023F3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TaskMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24023F440(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_24023F4C4()
{
  unint64_t v0;
  unint64_t v1;

  sub_24023F568(319, &qword_256FDE940, (void (*)(uint64_t))type metadata accessor for PushMetadata);
  if (v0 <= 0x3F)
  {
    sub_24023F568(319, qword_256FDE948, (void (*)(uint64_t))type metadata accessor for PullMetadata);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_24023F568(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_2402BD9E4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TaskDefinition(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *((_OWORD *)a2 + 13);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 208) = v10;
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)((char *)a2 + 236);
      v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      v12 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 176) = v12;
      v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      v14 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v14;
      v15 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(a1 + 73) = *(uint64_t *)((char *)a2 + 73);
      *(_WORD *)(a1 + 81) = *(_WORD *)((char *)a2 + 81);
      *(_BYTE *)(a1 + 83) = *((_BYTE *)a2 + 83);
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = v9;
      v17 = a2[14];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = v17;
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      v18 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
      *(_WORD *)(a1 + 154) = *((_WORD *)a2 + 77);
      *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
      *(_QWORD *)(a1 + 160) = a2[20];
      v19 = a2[23];
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_QWORD *)(a1 + 184) = v19;
      *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_DWORD *)(a1 + 201) = *(_DWORD *)((char *)a2 + 201);
      *(_BYTE *)(a1 + 205) = *((_BYTE *)a2 + 205);
      *(_BYTE *)(a1 + 206) = *((_BYTE *)a2 + 206);
      *(_BYTE *)(a1 + 207) = *((_BYTE *)a2 + 207);
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
      *(_QWORD *)(a1 + 224) = a2[28];
      v20 = a2[30];
      *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
      *(_QWORD *)(a1 + 240) = v20;
      *(_BYTE *)(a1 + 249) = *((_BYTE *)a2 + 249);
      *(_BYTE *)(a1 + 250) = *((_BYTE *)a2 + 250);
      *(_BYTE *)(a1 + 251) = *((_BYTE *)a2 + 251);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v21 = (_OWORD *)(a1 + 256);
    v22 = a2 + 32;
    v23 = a2[41];
    if (v23 == 1)
    {
      v24 = *((_OWORD *)a2 + 29);
      *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
      *(_OWORD *)(a1 + 464) = v24;
      v25 = *((_OWORD *)a2 + 31);
      *(_OWORD *)(a1 + 480) = *((_OWORD *)a2 + 30);
      *(_OWORD *)(a1 + 496) = v25;
      v26 = *((_OWORD *)a2 + 25);
      *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
      *(_OWORD *)(a1 + 400) = v26;
      v27 = *((_OWORD *)a2 + 27);
      *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
      *(_OWORD *)(a1 + 432) = v27;
      v28 = *((_OWORD *)a2 + 21);
      *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
      *(_OWORD *)(a1 + 336) = v28;
      v29 = *((_OWORD *)a2 + 23);
      *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
      *(_OWORD *)(a1 + 368) = v29;
      v30 = *((_OWORD *)a2 + 17);
      *v21 = *v22;
      *(_OWORD *)(a1 + 272) = v30;
      v31 = *((_OWORD *)a2 + 19);
      *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
      *(_OWORD *)(a1 + 304) = v31;
    }
    else
    {
      *v21 = *v22;
      *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 136);
      *(_WORD *)(a1 + 296) = *((_WORD *)a2 + 148);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
      *(_DWORD *)(a1 + 298) = *(_DWORD *)((char *)a2 + 298);
      *(_BYTE *)(a1 + 302) = *((_BYTE *)a2 + 302);
      *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
      *(_QWORD *)(a1 + 304) = a2[38];
      *(_QWORD *)(a1 + 313) = *(uint64_t *)((char *)a2 + 313);
      *(_QWORD *)(a1 + 328) = v23;
      *(_WORD *)(a1 + 336) = *((_WORD *)a2 + 168);
      *(_QWORD *)(a1 + 344) = a2[43];
      *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
      *(_QWORD *)(a1 + 360) = a2[45];
      *(_WORD *)(a1 + 368) = *((_WORD *)a2 + 184);
      *(_BYTE *)(a1 + 370) = *((_BYTE *)a2 + 370);
      v32 = a2[48];
      *(_QWORD *)(a1 + 376) = a2[47];
      *(_QWORD *)(a1 + 384) = v32;
      *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
      *(_QWORD *)(a1 + 392) = a2[49];
      v33 = a2[52];
      *(_QWORD *)(a1 + 408) = a2[51];
      *(_QWORD *)(a1 + 416) = v33;
      *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
      *(_QWORD *)(a1 + 424) = a2[53];
      *(_WORD *)(a1 + 433) = *(_WORD *)((char *)a2 + 433);
      v34 = a2[56];
      *(_QWORD *)(a1 + 440) = a2[55];
      *(_QWORD *)(a1 + 448) = v34;
      *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
      *(_WORD *)(a1 + 457) = *(_WORD *)((char *)a2 + 457);
      v35 = a2[59];
      *(_QWORD *)(a1 + 464) = a2[58];
      *(_QWORD *)(a1 + 472) = v35;
      *(_QWORD *)(a1 + 480) = a2[60];
      *(_WORD *)(a1 + 488) = *((_WORD *)a2 + 244);
      v36 = a2[63];
      *(_QWORD *)(a1 + 496) = a2[62];
      *(_QWORD *)(a1 + 504) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v37 = a3[8];
    v38 = (void *)(a1 + v37);
    v39 = (char *)a2 + v37;
    v40 = sub_2402BD48C();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    if (v42(v39, 1, v40))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v44 = a3[9];
    v45 = (void *)(a1 + v44);
    v46 = (char *)a2 + v44;
    if (v42((char *)a2 + v44, 1, v40))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v45, v46, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v45, 0, 1, v40);
    }
    *(_QWORD *)(a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TaskDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 328) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_2402BD48C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 36);
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TaskDefinition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v9;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    v10 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v10;
    v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 73) = *(_QWORD *)(a2 + 73);
    *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
    *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v8;
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v16 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v16;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v17 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v17;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 201) = *(_DWORD *)(a2 + 201);
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
    *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v18 = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v18;
    *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
    *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
    *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v19 = (_OWORD *)(a1 + 256);
  v20 = (_OWORD *)(a2 + 256);
  v21 = *(_QWORD *)(a2 + 328);
  if (v21 == 1)
  {
    v22 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v22;
    v23 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v23;
    v24 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v24;
    v25 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v25;
    v26 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v26;
    v27 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v27;
    v28 = *(_OWORD *)(a2 + 272);
    *v19 = *v20;
    *(_OWORD *)(a1 + 272) = v28;
    v29 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v29;
  }
  else
  {
    *v19 = *v20;
    *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_DWORD *)(a1 + 298) = *(_DWORD *)(a2 + 298);
    *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 313) = *(_QWORD *)(a2 + 313);
    *(_QWORD *)(a1 + 328) = v21;
    *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_WORD *)(a1 + 368) = *(_WORD *)(a2 + 368);
    *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
    v30 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = v30;
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v31 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = v31;
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
    v32 = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = v32;
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 457);
    v33 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v33;
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_WORD *)(a1 + 488) = *(_WORD *)(a2 + 488);
    v34 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v35 = a3[8];
  v36 = (void *)(a1 + v35);
  v37 = (const void *)(a2 + v35);
  v38 = sub_2402BD48C();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  if (v40(v37, 1, v38))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v42 = a3[9];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  if (v40((const void *)(a2 + v42), 1, v38))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v43, v44, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v43, 0, 1, v38);
  }
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TaskDefinition(uint64_t a1, uint64_t a2, int *a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(void *, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  int v98;
  int v99;
  uint64_t v100;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a1 + 32);
  v7 = (_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) == 1)
  {
    if (v8 == 1)
    {
      v9 = *(_OWORD *)(a2 + 48);
      *v6 = *v7;
      *(_OWORD *)(a1 + 48) = v9;
      v10 = *(_OWORD *)(a2 + 64);
      v11 = *(_OWORD *)(a2 + 80);
      v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v12;
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      v13 = *(_OWORD *)(a2 + 128);
      v14 = *(_OWORD *)(a2 + 144);
      v15 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v15;
      *(_OWORD *)(a1 + 128) = v13;
      *(_OWORD *)(a1 + 144) = v14;
      v16 = *(_OWORD *)(a2 + 192);
      v17 = *(_OWORD *)(a2 + 208);
      v18 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
      *(_OWORD *)(a1 + 208) = v17;
      *(_OWORD *)(a1 + 224) = v18;
      *(_OWORD *)(a1 + 192) = v16;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v29 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v29;
      v30 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v30;
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
      *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v31 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v31;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      v32 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v32;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v33 = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v33;
      *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
      *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
      *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
      *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
      *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
      *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
      v34 = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = v34;
      v35 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v35;
      v36 = *(_QWORD *)(a2 + 240);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_QWORD *)(a1 + 240) = v36;
      *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
      *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
      *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_240240BCC(a1 + 32);
    v19 = *(_OWORD *)(a2 + 48);
    *v6 = *v7;
    *(_OWORD *)(a1 + 48) = v19;
    v20 = *(_OWORD *)(a2 + 112);
    v22 = *(_OWORD *)(a2 + 64);
    v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v20;
    *(_OWORD *)(a1 + 64) = v22;
    *(_OWORD *)(a1 + 80) = v21;
    v23 = *(_OWORD *)(a2 + 176);
    v25 = *(_OWORD *)(a2 + 128);
    v24 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v23;
    *(_OWORD *)(a1 + 128) = v25;
    *(_OWORD *)(a1 + 144) = v24;
    v27 = *(_OWORD *)(a2 + 208);
    v26 = *(_OWORD *)(a2 + 224);
    v28 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    *(_OWORD *)(a1 + 208) = v27;
    *(_OWORD *)(a1 + 224) = v26;
    *(_OWORD *)(a1 + 192) = v28;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v37 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v37;
    v38 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v38;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
    *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v39;
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
    v40 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v40;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v41 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v41;
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
    *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
    *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
    v42 = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v42;
    v43 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v43;
    v44 = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v44;
    *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
    *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
    *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  }
  v45 = (_OWORD *)(a1 + 256);
  v46 = (__int128 *)(a2 + 256);
  v47 = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 328) == 1)
  {
    if (v47 == 1)
    {
      v48 = *v46;
      v49 = *(_OWORD *)(a2 + 272);
      v50 = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = v50;
      *v45 = v48;
      *(_OWORD *)(a1 + 272) = v49;
      v51 = *(_OWORD *)(a2 + 320);
      v52 = *(_OWORD *)(a2 + 336);
      v53 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = v53;
      *(_OWORD *)(a1 + 320) = v51;
      *(_OWORD *)(a1 + 336) = v52;
      v54 = *(_OWORD *)(a2 + 384);
      v55 = *(_OWORD *)(a2 + 400);
      v56 = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 432) = v56;
      *(_OWORD *)(a1 + 384) = v54;
      *(_OWORD *)(a1 + 400) = v55;
      v57 = *(_OWORD *)(a2 + 448);
      v58 = *(_OWORD *)(a2 + 464);
      v59 = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = v59;
      *(_OWORD *)(a1 + 448) = v57;
      *(_OWORD *)(a1 + 464) = v58;
    }
    else
    {
      v72 = *v46;
      *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
      *v45 = v72;
      v73 = *(_OWORD *)(a2 + 280);
      *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = v73;
      *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 298);
      *(_BYTE *)(a1 + 299) = *(_BYTE *)(a2 + 299);
      *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
      *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
      *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
      v74 = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = v74;
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
      *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
      *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
      *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
      v75 = *(_QWORD *)(a2 + 344);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      *(_QWORD *)(a1 + 344) = v75;
      v76 = *(_QWORD *)(a2 + 360);
      *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
      *(_QWORD *)(a1 + 360) = v76;
      *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
      *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      v77 = *(_QWORD *)(a2 + 392);
      *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
      *(_QWORD *)(a1 + 392) = v77;
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      v78 = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v78;
      *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
      *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
      *(_BYTE *)(a1 + 458) = *(_BYTE *)(a2 + 458);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      *(_BYTE *)(a1 + 489) = *(_BYTE *)(a2 + 489);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v47 == 1)
  {
    sub_240240C00(a1 + 256);
    v60 = *(_OWORD *)(a2 + 304);
    v62 = *v46;
    v61 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v60;
    *v45 = v62;
    *(_OWORD *)(a1 + 272) = v61;
    v63 = *(_OWORD *)(a2 + 368);
    v65 = *(_OWORD *)(a2 + 320);
    v64 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v63;
    *(_OWORD *)(a1 + 320) = v65;
    *(_OWORD *)(a1 + 336) = v64;
    v66 = *(_OWORD *)(a2 + 432);
    v68 = *(_OWORD *)(a2 + 384);
    v67 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v66;
    *(_OWORD *)(a1 + 384) = v68;
    *(_OWORD *)(a1 + 400) = v67;
    v69 = *(_OWORD *)(a2 + 496);
    v71 = *(_OWORD *)(a2 + 448);
    v70 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v69;
    *(_OWORD *)(a1 + 448) = v71;
    *(_OWORD *)(a1 + 464) = v70;
  }
  else
  {
    v79 = *v46;
    *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
    *v45 = v79;
    v80 = *(_OWORD *)(a2 + 280);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = v80;
    *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 298);
    *(_BYTE *)(a1 + 299) = *(_BYTE *)(a2 + 299);
    *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
    *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
    *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
    v81 = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = v81;
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
    *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
    *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
    *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
    *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
    *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
    *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
    v82 = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v82;
    v83 = *(_QWORD *)(a2 + 360);
    *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v83;
    *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
    *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v84 = *(_QWORD *)(a2 + 392);
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = v84;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v85 = *(_QWORD *)(a2 + 424);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v85;
    *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
    *(_BYTE *)(a1 + 458) = *(_BYTE *)(a2 + 458);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    *(_BYTE *)(a1 + 489) = *(_BYTE *)(a2 + 489);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v86 = a3[8];
  v87 = (void *)(a1 + v86);
  v88 = (void *)(a2 + v86);
  v89 = sub_2402BD48C();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v90 + 48);
  v92 = v91(v87, 1, v89);
  v93 = v91(v88, 1, v89);
  if (v92)
  {
    if (!v93)
    {
      (*(void (**)(void *, void *, uint64_t))(v90 + 16))(v87, v88, v89);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v93)
  {
    (*(void (**)(void *, uint64_t))(v90 + 8))(v87, v89);
LABEL_20:
    v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v90 + 24))(v87, v88, v89);
LABEL_21:
  v95 = a3[9];
  v96 = (void *)(a1 + v95);
  v97 = (void *)(a2 + v95);
  v98 = v91((void *)(a1 + v95), 1, v89);
  v99 = v91(v97, 1, v89);
  if (!v98)
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v90 + 24))(v96, v97, v89);
      goto LABEL_27;
    }
    (*(void (**)(void *, uint64_t))(v90 + 8))(v96, v89);
    goto LABEL_26;
  }
  if (v99)
  {
LABEL_26:
    v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v90 + 16))(v96, v97, v89);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v96, 0, 1, v89);
LABEL_27:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_240240BCC(uint64_t a1)
{
  destroy for XPCActivityCriteria();
  return a1;
}

uint64_t sub_240240C00(uint64_t a1)
{
  destroy for TaskRequest();
  return a1;
}

_OWORD *initializeWithTake for TaskDefinition(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[13];
  a1[12] = a2[12];
  a1[13] = v7;
  a1[14] = a2[14];
  *(_OWORD *)((char *)a1 + 236) = *(_OWORD *)((char *)a2 + 236);
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  v10 = a2[5];
  a1[4] = a2[4];
  a1[5] = v10;
  v11 = a2[7];
  a1[6] = a2[6];
  a1[7] = v11;
  v12 = a2[3];
  a1[2] = a2[2];
  a1[3] = v12;
  v13 = a2[29];
  a1[28] = a2[28];
  a1[29] = v13;
  v14 = a2[31];
  a1[30] = a2[30];
  a1[31] = v14;
  v15 = a2[25];
  a1[24] = a2[24];
  a1[25] = v15;
  v16 = a2[27];
  a1[26] = a2[26];
  a1[27] = v16;
  v17 = a2[21];
  a1[20] = a2[20];
  a1[21] = v17;
  v18 = a2[23];
  a1[22] = a2[22];
  a1[23] = v18;
  v19 = a2[17];
  a1[16] = a2[16];
  a1[17] = v19;
  v20 = a2[19];
  v21 = a3[8];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  a1[18] = a2[18];
  a1[19] = v20;
  v24 = sub_2402BD48C();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v26(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v28 = a3[9];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  if (v26((char *)a2 + v28, 1, v24))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v29, v30, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
  }
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t assignWithTake for TaskDefinition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  int v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96) == 1)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 96);
  if (v8 == 1)
  {
    sub_240240BCC(a1 + 32);
LABEL_4:
    v9 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v9;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    v10 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v10;
    v11 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v11;
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    v13 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v13;
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 73) = *(_QWORD *)(a2 + 73);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v16 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 201) = *(_DWORD *)(a2 + 201);
  *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
  *(_WORD *)(a1 + 206) = *(_WORD *)(a2 + 206);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
LABEL_6:
  v17 = (_OWORD *)(a1 + 256);
  v18 = (_OWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 328) == 1)
  {
LABEL_9:
    v20 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v20;
    v21 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v21;
    v22 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v22;
    v23 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v23;
    v24 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v24;
    v25 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v25;
    v26 = *(_OWORD *)(a2 + 272);
    *v17 = *v18;
    *(_OWORD *)(a1 + 272) = v26;
    v27 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v27;
    goto LABEL_11;
  }
  v19 = *(_QWORD *)(a2 + 328);
  if (v19 == 1)
  {
    sub_240240C00(a1 + 256);
    goto LABEL_9;
  }
  *v17 = *v18;
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 298) = *(_DWORD *)(a2 + 298);
  *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 313) = *(_QWORD *)(a2 + 313);
  *(_QWORD *)(a1 + 328) = v19;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_WORD *)(a1 + 369) = *(_WORD *)(a2 + 369);
  v28 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v28;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v29 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 457);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v30;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 488) = *(_WORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRelease();
LABEL_11:
  v31 = a3[8];
  v32 = (void *)(a1 + v31);
  v33 = (void *)(a2 + v31);
  v34 = sub_2402BD48C();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v35 + 8))(v32, v34);
LABEL_16:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v32, v33, v34);
LABEL_17:
  v40 = a3[9];
  v41 = (void *)(a1 + v40);
  v42 = (void *)(a2 + v40);
  v43 = v36((void *)(a1 + v40), 1, v34);
  v44 = v36(v42, 1, v34);
  if (!v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v35 + 40))(v41, v42, v34);
      goto LABEL_23;
    }
    (*(void (**)(void *, uint64_t))(v35 + 8))(v41, v34);
    goto LABEL_22;
  }
  if (v44)
  {
LABEL_22:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(void *, void *, uint64_t))(v35 + 32))(v41, v42, v34);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v41, 0, 1, v34);
LABEL_23:
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskDefinition()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24024133C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TaskDefinition()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402413C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

void sub_240241440()
{
  unint64_t v0;

  sub_24023F568(319, qword_254352250, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for TaskValidationError()
{
  return &type metadata for TaskValidationError;
}

_QWORD *initializeBufferWithCopyOfBuffer for MLHostTask(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v67;
  _QWORD *v68;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7 + 8);
    *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
    *((_QWORD *)v8 + 1) = v10;
    v11 = *(_QWORD *)((char *)a2 + v7 + 24);
    *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
    *((_QWORD *)v8 + 3) = v11;
    v12 = *(_QWORD *)((char *)a2 + v7 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v67 = a3;
    v68 = a2;
    if (v12 == 1)
    {
      v13 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
      *((_OWORD *)v8 + 13) = v13;
      *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
      *(_OWORD *)(v8 + 236) = *(_OWORD *)(v9 + 236);
      v14 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v14;
      v15 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
      *((_OWORD *)v8 + 11) = v15;
      v16 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v16;
      v17 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v17;
      v18 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v18;
    }
    else
    {
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      v8[40] = v9[40];
      *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
      v8[56] = v9[56];
      *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
      v8[72] = v9[72];
      *(_QWORD *)(v8 + 73) = *(_QWORD *)(v9 + 73);
      *(_WORD *)(v8 + 81) = *(_WORD *)(v9 + 81);
      v8[83] = v9[83];
      *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
      *((_QWORD *)v8 + 12) = v12;
      v20 = *((_QWORD *)v9 + 14);
      *((_QWORD *)v8 + 13) = *((_QWORD *)v9 + 13);
      *((_QWORD *)v8 + 14) = v20;
      v8[120] = v9[120];
      v21 = *((_QWORD *)v9 + 17);
      *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
      *((_QWORD *)v8 + 17) = v21;
      *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
      v8[152] = v9[152];
      v8[153] = v9[153];
      *((_WORD *)v8 + 77) = *((_WORD *)v9 + 77);
      v8[168] = v9[168];
      *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
      v22 = *((_QWORD *)v9 + 23);
      *((_QWORD *)v8 + 22) = *((_QWORD *)v9 + 22);
      *((_QWORD *)v8 + 23) = v22;
      v8[200] = v9[200];
      *((_QWORD *)v8 + 24) = *((_QWORD *)v9 + 24);
      *(_DWORD *)(v8 + 201) = *(_DWORD *)(v9 + 201);
      v8[205] = v9[205];
      v8[206] = v9[206];
      v8[207] = v9[207];
      v8[216] = v9[216];
      *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
      v8[232] = v9[232];
      *((_QWORD *)v8 + 28) = *((_QWORD *)v9 + 28);
      v23 = *((_QWORD *)v9 + 30);
      v8[248] = v9[248];
      *((_QWORD *)v8 + 30) = v23;
      v8[249] = v9[249];
      v8[250] = v9[250];
      v8[251] = v9[251];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v24 = v8 + 256;
    v25 = v9 + 256;
    v26 = *((_QWORD *)v9 + 41);
    if (v26 == 1)
    {
      v27 = *((_OWORD *)v9 + 29);
      *((_OWORD *)v8 + 28) = *((_OWORD *)v9 + 28);
      *((_OWORD *)v8 + 29) = v27;
      v28 = *((_OWORD *)v9 + 31);
      *((_OWORD *)v8 + 30) = *((_OWORD *)v9 + 30);
      *((_OWORD *)v8 + 31) = v28;
      v29 = *((_OWORD *)v9 + 25);
      *((_OWORD *)v8 + 24) = *((_OWORD *)v9 + 24);
      *((_OWORD *)v8 + 25) = v29;
      v30 = *((_OWORD *)v9 + 27);
      *((_OWORD *)v8 + 26) = *((_OWORD *)v9 + 26);
      *((_OWORD *)v8 + 27) = v30;
      v31 = *((_OWORD *)v9 + 21);
      *((_OWORD *)v8 + 20) = *((_OWORD *)v9 + 20);
      *((_OWORD *)v8 + 21) = v31;
      v32 = *((_OWORD *)v9 + 23);
      *((_OWORD *)v8 + 22) = *((_OWORD *)v9 + 22);
      *((_OWORD *)v8 + 23) = v32;
      v33 = *((_OWORD *)v9 + 17);
      *v24 = *v25;
      *((_OWORD *)v8 + 17) = v33;
      v34 = *((_OWORD *)v9 + 19);
      *((_OWORD *)v8 + 18) = *((_OWORD *)v9 + 18);
      *((_OWORD *)v8 + 19) = v34;
    }
    else
    {
      *v24 = *v25;
      *((_WORD *)v8 + 136) = *((_WORD *)v9 + 136);
      *((_WORD *)v8 + 148) = *((_WORD *)v9 + 148);
      *(_OWORD *)(v8 + 280) = *(_OWORD *)(v9 + 280);
      *(_DWORD *)(v8 + 298) = *(_DWORD *)(v9 + 298);
      v8[302] = v9[302];
      v8[312] = v9[312];
      *((_QWORD *)v8 + 38) = *((_QWORD *)v9 + 38);
      *(_QWORD *)(v8 + 313) = *(_QWORD *)(v9 + 313);
      *((_QWORD *)v8 + 41) = v26;
      *((_WORD *)v8 + 168) = *((_WORD *)v9 + 168);
      *((_QWORD *)v8 + 43) = *((_QWORD *)v9 + 43);
      v8[352] = v9[352];
      *((_QWORD *)v8 + 45) = *((_QWORD *)v9 + 45);
      *((_WORD *)v8 + 184) = *((_WORD *)v9 + 184);
      v8[370] = v9[370];
      v35 = *((_QWORD *)v9 + 48);
      *((_QWORD *)v8 + 47) = *((_QWORD *)v9 + 47);
      *((_QWORD *)v8 + 48) = v35;
      v8[400] = v9[400];
      *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
      v36 = *((_QWORD *)v9 + 52);
      *((_QWORD *)v8 + 51) = *((_QWORD *)v9 + 51);
      *((_QWORD *)v8 + 52) = v36;
      v8[432] = v9[432];
      *((_QWORD *)v8 + 53) = *((_QWORD *)v9 + 53);
      *(_WORD *)(v8 + 433) = *(_WORD *)(v9 + 433);
      v37 = *((_QWORD *)v9 + 56);
      *((_QWORD *)v8 + 55) = *((_QWORD *)v9 + 55);
      *((_QWORD *)v8 + 56) = v37;
      v8[456] = v9[456];
      *(_WORD *)(v8 + 457) = *(_WORD *)(v9 + 457);
      v38 = *((_QWORD *)v9 + 59);
      *((_QWORD *)v8 + 58) = *((_QWORD *)v9 + 58);
      *((_QWORD *)v8 + 59) = v38;
      *((_QWORD *)v8 + 60) = *((_QWORD *)v9 + 60);
      *((_WORD *)v8 + 244) = *((_WORD *)v9 + 244);
      v39 = *((_QWORD *)v9 + 63);
      *((_QWORD *)v8 + 62) = *((_QWORD *)v9 + 62);
      *((_QWORD *)v8 + 63) = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v40 = (int *)type metadata accessor for TaskDefinition(0);
    v41 = v40[8];
    v42 = &v8[v41];
    v43 = &v9[v41];
    v44 = sub_2402BD48C();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    if (v46(v43, 1, v44))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v48 = v40[9];
    v49 = &v8[v48];
    v50 = &v9[v48];
    if (v46(&v9[v48], 1, v44))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v45 + 16))(v49, v50, v44);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v49, 0, 1, v44);
    }
    *(_QWORD *)&v8[v40[10]] = *(_QWORD *)&v9[v40[10]];
    v52 = v67[6];
    v53 = v67[7];
    v54 = (_QWORD *)((char *)v4 + v52);
    v55 = (_QWORD *)((char *)v68 + v52);
    v56 = *v55;
    v57 = v55[1];
    LOBYTE(v55) = *((_BYTE *)v68 + v53);
    *v54 = v56;
    v54[1] = v57;
    *((_BYTE *)v4 + v53) = (_BYTE)v55;
    v58 = v67[8];
    v59 = (char *)v4 + v58;
    v60 = (char *)v68 + v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v46(v60, 1, v44))
    {
      v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v59, v60, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v59, 0, 1, v44);
    }
    v62 = v67[9];
    v63 = (char *)v4 + v62;
    v64 = (char *)v68 + v62;
    if (v46((char *)v68 + v62, 1, v44))
    {
      v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v63, v64, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v63, 0, 1, v44);
    }
  }
  return v4;
}

uint64_t destroy for MLHostTask(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = a1 + a2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v4 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v4 + 328) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = type metadata accessor for TaskDefinition(0);
  v6 = v4 + *(int *)(v5 + 32);
  v7 = sub_2402BD48C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = v4 + *(int *)(v5 + 36);
  if (!v9(v10, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a1 + a2[8];
  if (!v9(v11, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v11, v7);
  v12 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v12, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v12, v7);
  return result;
}

_BYTE *initializeWithCopy for MLHostTask(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(_BYTE *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int *v65;
  _BYTE *v66;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  v10 = *(_QWORD *)&a2[v6 + 24];
  *((_QWORD *)v7 + 2) = *(_QWORD *)&a2[v6 + 16];
  *((_QWORD *)v7 + 3) = v10;
  v11 = *(_QWORD *)&a2[v6 + 96];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v65 = a3;
  v66 = a2;
  if (v11 == 1)
  {
    v12 = *((_OWORD *)v8 + 13);
    *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
    *((_OWORD *)v7 + 13) = v12;
    *((_OWORD *)v7 + 14) = *((_OWORD *)v8 + 14);
    *(_OWORD *)(v7 + 236) = *(_OWORD *)(v8 + 236);
    v13 = *((_OWORD *)v8 + 9);
    *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
    *((_OWORD *)v7 + 9) = v13;
    v14 = *((_OWORD *)v8 + 11);
    *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
    *((_OWORD *)v7 + 11) = v14;
    v15 = *((_OWORD *)v8 + 5);
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    *((_OWORD *)v7 + 5) = v15;
    v16 = *((_OWORD *)v8 + 7);
    *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
    *((_OWORD *)v7 + 7) = v16;
    v17 = *((_OWORD *)v8 + 3);
    *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
    *((_OWORD *)v7 + 3) = v17;
  }
  else
  {
    *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
    v7[40] = v8[40];
    *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
    v7[56] = v8[56];
    *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
    v7[72] = v8[72];
    *(_QWORD *)(v7 + 73) = *(_QWORD *)(v8 + 73);
    *(_WORD *)(v7 + 81) = *(_WORD *)(v8 + 81);
    v7[83] = v8[83];
    *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
    *((_QWORD *)v7 + 12) = v11;
    v18 = *((_QWORD *)v8 + 14);
    *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);
    *((_QWORD *)v7 + 14) = v18;
    v7[120] = v8[120];
    v19 = *((_QWORD *)v8 + 17);
    *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
    *((_QWORD *)v7 + 17) = v19;
    *((_QWORD *)v7 + 18) = *((_QWORD *)v8 + 18);
    v7[152] = v8[152];
    v7[153] = v8[153];
    *((_WORD *)v7 + 77) = *((_WORD *)v8 + 77);
    v7[168] = v8[168];
    *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
    v20 = *((_QWORD *)v8 + 23);
    *((_QWORD *)v7 + 22) = *((_QWORD *)v8 + 22);
    *((_QWORD *)v7 + 23) = v20;
    v7[200] = v8[200];
    *((_QWORD *)v7 + 24) = *((_QWORD *)v8 + 24);
    *(_DWORD *)(v7 + 201) = *(_DWORD *)(v8 + 201);
    v7[205] = v8[205];
    v7[206] = v8[206];
    v7[207] = v8[207];
    v7[216] = v8[216];
    *((_QWORD *)v7 + 26) = *((_QWORD *)v8 + 26);
    v7[232] = v8[232];
    *((_QWORD *)v7 + 28) = *((_QWORD *)v8 + 28);
    v21 = *((_QWORD *)v8 + 30);
    v7[248] = v8[248];
    *((_QWORD *)v7 + 30) = v21;
    v7[249] = v8[249];
    v7[250] = v8[250];
    v7[251] = v8[251];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v22 = v7 + 256;
  v23 = v8 + 256;
  v24 = *((_QWORD *)v8 + 41);
  if (v24 == 1)
  {
    v25 = *((_OWORD *)v8 + 29);
    *((_OWORD *)v7 + 28) = *((_OWORD *)v8 + 28);
    *((_OWORD *)v7 + 29) = v25;
    v26 = *((_OWORD *)v8 + 31);
    *((_OWORD *)v7 + 30) = *((_OWORD *)v8 + 30);
    *((_OWORD *)v7 + 31) = v26;
    v27 = *((_OWORD *)v8 + 25);
    *((_OWORD *)v7 + 24) = *((_OWORD *)v8 + 24);
    *((_OWORD *)v7 + 25) = v27;
    v28 = *((_OWORD *)v8 + 27);
    *((_OWORD *)v7 + 26) = *((_OWORD *)v8 + 26);
    *((_OWORD *)v7 + 27) = v28;
    v29 = *((_OWORD *)v8 + 21);
    *((_OWORD *)v7 + 20) = *((_OWORD *)v8 + 20);
    *((_OWORD *)v7 + 21) = v29;
    v30 = *((_OWORD *)v8 + 23);
    *((_OWORD *)v7 + 22) = *((_OWORD *)v8 + 22);
    *((_OWORD *)v7 + 23) = v30;
    v31 = *((_OWORD *)v8 + 17);
    *v22 = *v23;
    *((_OWORD *)v7 + 17) = v31;
    v32 = *((_OWORD *)v8 + 19);
    *((_OWORD *)v7 + 18) = *((_OWORD *)v8 + 18);
    *((_OWORD *)v7 + 19) = v32;
  }
  else
  {
    *v22 = *v23;
    *((_WORD *)v7 + 136) = *((_WORD *)v8 + 136);
    *((_WORD *)v7 + 148) = *((_WORD *)v8 + 148);
    *(_OWORD *)(v7 + 280) = *(_OWORD *)(v8 + 280);
    *(_DWORD *)(v7 + 298) = *(_DWORD *)(v8 + 298);
    v7[302] = v8[302];
    v7[312] = v8[312];
    *((_QWORD *)v7 + 38) = *((_QWORD *)v8 + 38);
    *(_QWORD *)(v7 + 313) = *(_QWORD *)(v8 + 313);
    *((_QWORD *)v7 + 41) = v24;
    *((_WORD *)v7 + 168) = *((_WORD *)v8 + 168);
    *((_QWORD *)v7 + 43) = *((_QWORD *)v8 + 43);
    v7[352] = v8[352];
    *((_QWORD *)v7 + 45) = *((_QWORD *)v8 + 45);
    *((_WORD *)v7 + 184) = *((_WORD *)v8 + 184);
    v7[370] = v8[370];
    v33 = *((_QWORD *)v8 + 48);
    *((_QWORD *)v7 + 47) = *((_QWORD *)v8 + 47);
    *((_QWORD *)v7 + 48) = v33;
    v7[400] = v8[400];
    *((_QWORD *)v7 + 49) = *((_QWORD *)v8 + 49);
    v34 = *((_QWORD *)v8 + 52);
    *((_QWORD *)v7 + 51) = *((_QWORD *)v8 + 51);
    *((_QWORD *)v7 + 52) = v34;
    v7[432] = v8[432];
    *((_QWORD *)v7 + 53) = *((_QWORD *)v8 + 53);
    *(_WORD *)(v7 + 433) = *(_WORD *)(v8 + 433);
    v35 = *((_QWORD *)v8 + 56);
    *((_QWORD *)v7 + 55) = *((_QWORD *)v8 + 55);
    *((_QWORD *)v7 + 56) = v35;
    v7[456] = v8[456];
    *(_WORD *)(v7 + 457) = *(_WORD *)(v8 + 457);
    v36 = *((_QWORD *)v8 + 59);
    *((_QWORD *)v7 + 58) = *((_QWORD *)v8 + 58);
    *((_QWORD *)v7 + 59) = v36;
    *((_QWORD *)v7 + 60) = *((_QWORD *)v8 + 60);
    *((_WORD *)v7 + 244) = *((_WORD *)v8 + 244);
    v37 = *((_QWORD *)v8 + 63);
    *((_QWORD *)v7 + 62) = *((_QWORD *)v8 + 62);
    *((_QWORD *)v7 + 63) = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v38 = (int *)type metadata accessor for TaskDefinition(0);
  v39 = v38[8];
  v40 = &v7[v39];
  v41 = &v8[v39];
  v42 = sub_2402BD48C();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v43 + 48);
  if (v44(v41, 1, v42))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v40, v41, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v46 = v38[9];
  v47 = &v7[v46];
  v48 = &v8[v46];
  if (v44(&v8[v46], 1, v42))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v47, v48, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v47, 0, 1, v42);
  }
  *(_QWORD *)&v7[v38[10]] = *(_QWORD *)&v8[v38[10]];
  v50 = v65[6];
  v51 = v65[7];
  v52 = &a1[v50];
  v53 = (uint64_t *)&v66[v50];
  v54 = *v53;
  v55 = v53[1];
  LOBYTE(v53) = v66[v51];
  *v52 = v54;
  v52[1] = v55;
  a1[v51] = (_BYTE)v53;
  v56 = v65[8];
  v57 = &a1[v56];
  v58 = &v66[v56];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v44(v58, 1, v42))
  {
    v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v57, v58, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v57, 0, 1, v42);
  }
  v60 = v65[9];
  v61 = &a1[v60];
  v62 = &v66[v60];
  if (v44(&v66[v60], 1, v42))
  {
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 16))(v61, v62, v42);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v61, 0, 1, v42);
  }
  return a1;
}

_BYTE *assignWithCopy for MLHostTask(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_BYTE *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  int v115;
  int v116;
  uint64_t v117;

  *a1 = *a2;
  v4 = a3[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  *(_QWORD *)v5 = *(_QWORD *)&a2[v4];
  *((_QWORD *)v5 + 1) = *(_QWORD *)&a2[v4 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
  *((_QWORD *)v5 + 3) = *((_QWORD *)v6 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = v5 + 32;
  v8 = v6 + 32;
  v9 = *((_QWORD *)v6 + 12);
  if (*((_QWORD *)v5 + 12) == 1)
  {
    if (v9 == 1)
    {
      v10 = *((_OWORD *)v6 + 3);
      *v7 = *v8;
      *((_OWORD *)v5 + 3) = v10;
      v11 = *((_OWORD *)v6 + 4);
      v12 = *((_OWORD *)v6 + 5);
      v13 = *((_OWORD *)v6 + 7);
      *((_OWORD *)v5 + 6) = *((_OWORD *)v6 + 6);
      *((_OWORD *)v5 + 7) = v13;
      *((_OWORD *)v5 + 4) = v11;
      *((_OWORD *)v5 + 5) = v12;
      v14 = *((_OWORD *)v6 + 8);
      v15 = *((_OWORD *)v6 + 9);
      v16 = *((_OWORD *)v6 + 11);
      *((_OWORD *)v5 + 10) = *((_OWORD *)v6 + 10);
      *((_OWORD *)v5 + 11) = v16;
      *((_OWORD *)v5 + 8) = v14;
      *((_OWORD *)v5 + 9) = v15;
      v17 = *((_OWORD *)v6 + 12);
      v18 = *((_OWORD *)v6 + 13);
      v19 = *((_OWORD *)v6 + 14);
      *(_OWORD *)(v5 + 236) = *(_OWORD *)(v6 + 236);
      *((_OWORD *)v5 + 13) = v18;
      *((_OWORD *)v5 + 14) = v19;
      *((_OWORD *)v5 + 12) = v17;
    }
    else
    {
      *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
      v5[40] = v6[40];
      v30 = *((_QWORD *)v6 + 6);
      v5[56] = v6[56];
      *((_QWORD *)v5 + 6) = v30;
      v31 = *((_QWORD *)v6 + 8);
      v5[72] = v6[72];
      *((_QWORD *)v5 + 8) = v31;
      v5[73] = v6[73];
      v5[74] = v6[74];
      v5[75] = v6[75];
      v5[76] = v6[76];
      v5[77] = v6[77];
      v5[78] = v6[78];
      v5[79] = v6[79];
      v5[80] = v6[80];
      v5[81] = v6[81];
      v5[82] = v6[82];
      v5[83] = v6[83];
      *((_QWORD *)v5 + 11) = *((_QWORD *)v6 + 11);
      *((_QWORD *)v5 + 12) = *((_QWORD *)v6 + 12);
      *((_QWORD *)v5 + 13) = *((_QWORD *)v6 + 13);
      *((_QWORD *)v5 + 14) = *((_QWORD *)v6 + 14);
      v5[120] = v6[120];
      *((_QWORD *)v5 + 16) = *((_QWORD *)v6 + 16);
      *((_QWORD *)v5 + 17) = *((_QWORD *)v6 + 17);
      v32 = *((_QWORD *)v6 + 18);
      v5[152] = v6[152];
      *((_QWORD *)v5 + 18) = v32;
      v5[153] = v6[153];
      v5[154] = v6[154];
      v5[155] = v6[155];
      v33 = *((_QWORD *)v6 + 20);
      v5[168] = v6[168];
      *((_QWORD *)v5 + 20) = v33;
      *((_QWORD *)v5 + 22) = *((_QWORD *)v6 + 22);
      *((_QWORD *)v5 + 23) = *((_QWORD *)v6 + 23);
      v34 = *((_QWORD *)v6 + 24);
      v5[200] = v6[200];
      *((_QWORD *)v5 + 24) = v34;
      v5[201] = v6[201];
      v5[202] = v6[202];
      v5[203] = v6[203];
      v5[204] = v6[204];
      v5[205] = v6[205];
      v5[206] = v6[206];
      v5[207] = v6[207];
      v35 = *((_QWORD *)v6 + 26);
      v5[216] = v6[216];
      *((_QWORD *)v5 + 26) = v35;
      v36 = *((_QWORD *)v6 + 28);
      v5[232] = v6[232];
      *((_QWORD *)v5 + 28) = v36;
      v37 = *((_QWORD *)v6 + 30);
      v5[248] = v6[248];
      *((_QWORD *)v5 + 30) = v37;
      v5[249] = v6[249];
      v5[250] = v6[250];
      v5[251] = v6[251];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v9 == 1)
  {
    sub_240240BCC((uint64_t)(v5 + 32));
    v20 = *((_OWORD *)v6 + 3);
    *v7 = *v8;
    *((_OWORD *)v5 + 3) = v20;
    v21 = *((_OWORD *)v6 + 7);
    v23 = *((_OWORD *)v6 + 4);
    v22 = *((_OWORD *)v6 + 5);
    *((_OWORD *)v5 + 6) = *((_OWORD *)v6 + 6);
    *((_OWORD *)v5 + 7) = v21;
    *((_OWORD *)v5 + 4) = v23;
    *((_OWORD *)v5 + 5) = v22;
    v24 = *((_OWORD *)v6 + 11);
    v26 = *((_OWORD *)v6 + 8);
    v25 = *((_OWORD *)v6 + 9);
    *((_OWORD *)v5 + 10) = *((_OWORD *)v6 + 10);
    *((_OWORD *)v5 + 11) = v24;
    *((_OWORD *)v5 + 8) = v26;
    *((_OWORD *)v5 + 9) = v25;
    v28 = *((_OWORD *)v6 + 13);
    v27 = *((_OWORD *)v6 + 14);
    v29 = *((_OWORD *)v6 + 12);
    *(_OWORD *)(v5 + 236) = *(_OWORD *)(v6 + 236);
    *((_OWORD *)v5 + 13) = v28;
    *((_OWORD *)v5 + 14) = v27;
    *((_OWORD *)v5 + 12) = v29;
  }
  else
  {
    *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
    v5[40] = v6[40];
    v38 = *((_QWORD *)v6 + 6);
    v5[56] = v6[56];
    *((_QWORD *)v5 + 6) = v38;
    v39 = *((_QWORD *)v6 + 8);
    v5[72] = v6[72];
    *((_QWORD *)v5 + 8) = v39;
    v5[73] = v6[73];
    v5[74] = v6[74];
    v5[75] = v6[75];
    v5[76] = v6[76];
    v5[77] = v6[77];
    v5[78] = v6[78];
    v5[79] = v6[79];
    v5[80] = v6[80];
    v5[81] = v6[81];
    v5[82] = v6[82];
    v5[83] = v6[83];
    *((_QWORD *)v5 + 11) = *((_QWORD *)v6 + 11);
    *((_QWORD *)v5 + 12) = *((_QWORD *)v6 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 13) = *((_QWORD *)v6 + 13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 14) = *((_QWORD *)v6 + 14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[120] = v6[120];
    *((_QWORD *)v5 + 16) = *((_QWORD *)v6 + 16);
    *((_QWORD *)v5 + 17) = *((_QWORD *)v6 + 17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v40 = *((_QWORD *)v6 + 18);
    v5[152] = v6[152];
    *((_QWORD *)v5 + 18) = v40;
    v5[153] = v6[153];
    v5[154] = v6[154];
    v5[155] = v6[155];
    v41 = *((_QWORD *)v6 + 20);
    v5[168] = v6[168];
    *((_QWORD *)v5 + 20) = v41;
    *((_QWORD *)v5 + 22) = *((_QWORD *)v6 + 22);
    *((_QWORD *)v5 + 23) = *((_QWORD *)v6 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = *((_QWORD *)v6 + 24);
    v5[200] = v6[200];
    *((_QWORD *)v5 + 24) = v42;
    v5[201] = v6[201];
    v5[202] = v6[202];
    v5[203] = v6[203];
    v5[204] = v6[204];
    v5[205] = v6[205];
    v5[206] = v6[206];
    v5[207] = v6[207];
    v43 = *((_QWORD *)v6 + 26);
    v5[216] = v6[216];
    *((_QWORD *)v5 + 26) = v43;
    v44 = *((_QWORD *)v6 + 28);
    v5[232] = v6[232];
    *((_QWORD *)v5 + 28) = v44;
    v45 = *((_QWORD *)v6 + 30);
    v5[248] = v6[248];
    *((_QWORD *)v5 + 30) = v45;
    v5[249] = v6[249];
    v5[250] = v6[250];
    v5[251] = v6[251];
  }
  v46 = v5 + 256;
  v47 = (__int128 *)(v6 + 256);
  v48 = *((_QWORD *)v6 + 41);
  if (*((_QWORD *)v5 + 41) == 1)
  {
    if (v48 == 1)
    {
      v49 = *v47;
      v50 = *((_OWORD *)v6 + 17);
      v51 = *((_OWORD *)v6 + 19);
      *((_OWORD *)v5 + 18) = *((_OWORD *)v6 + 18);
      *((_OWORD *)v5 + 19) = v51;
      *v46 = v49;
      *((_OWORD *)v5 + 17) = v50;
      v52 = *((_OWORD *)v6 + 20);
      v53 = *((_OWORD *)v6 + 21);
      v54 = *((_OWORD *)v6 + 23);
      *((_OWORD *)v5 + 22) = *((_OWORD *)v6 + 22);
      *((_OWORD *)v5 + 23) = v54;
      *((_OWORD *)v5 + 20) = v52;
      *((_OWORD *)v5 + 21) = v53;
      v55 = *((_OWORD *)v6 + 24);
      v56 = *((_OWORD *)v6 + 25);
      v57 = *((_OWORD *)v6 + 27);
      *((_OWORD *)v5 + 26) = *((_OWORD *)v6 + 26);
      *((_OWORD *)v5 + 27) = v57;
      *((_OWORD *)v5 + 24) = v55;
      *((_OWORD *)v5 + 25) = v56;
      v58 = *((_OWORD *)v6 + 28);
      v59 = *((_OWORD *)v6 + 29);
      v60 = *((_OWORD *)v6 + 31);
      *((_OWORD *)v5 + 30) = *((_OWORD *)v6 + 30);
      *((_OWORD *)v5 + 31) = v60;
      *((_OWORD *)v5 + 28) = v58;
      *((_OWORD *)v5 + 29) = v59;
    }
    else
    {
      v73 = *v47;
      *((_WORD *)v5 + 136) = *((_WORD *)v6 + 136);
      *v46 = v73;
      v74 = *(_OWORD *)(v6 + 280);
      *((_WORD *)v5 + 148) = *((_WORD *)v6 + 148);
      *(_OWORD *)(v5 + 280) = v74;
      v5[298] = v6[298];
      v5[299] = v6[299];
      v5[300] = v6[300];
      v5[301] = v6[301];
      v5[302] = v6[302];
      v75 = *((_QWORD *)v6 + 38);
      v5[312] = v6[312];
      *((_QWORD *)v5 + 38) = v75;
      v5[313] = v6[313];
      v5[314] = v6[314];
      v5[315] = v6[315];
      v5[316] = v6[316];
      v5[317] = v6[317];
      v5[318] = v6[318];
      v5[319] = v6[319];
      v5[320] = v6[320];
      *((_QWORD *)v5 + 41) = *((_QWORD *)v6 + 41);
      v5[336] = v6[336];
      v5[337] = v6[337];
      v76 = *((_QWORD *)v6 + 43);
      v5[352] = v6[352];
      *((_QWORD *)v5 + 43) = v76;
      v77 = *((_QWORD *)v6 + 45);
      v5[368] = v6[368];
      *((_QWORD *)v5 + 45) = v77;
      v5[369] = v6[369];
      v5[370] = v6[370];
      *((_QWORD *)v5 + 47) = *((_QWORD *)v6 + 47);
      *((_QWORD *)v5 + 48) = *((_QWORD *)v6 + 48);
      v78 = *((_QWORD *)v6 + 49);
      v5[400] = v6[400];
      *((_QWORD *)v5 + 49) = v78;
      *((_QWORD *)v5 + 51) = *((_QWORD *)v6 + 51);
      *((_QWORD *)v5 + 52) = *((_QWORD *)v6 + 52);
      v79 = *((_QWORD *)v6 + 53);
      v5[432] = v6[432];
      *((_QWORD *)v5 + 53) = v79;
      v5[433] = v6[433];
      v5[434] = v6[434];
      *((_QWORD *)v5 + 55) = *((_QWORD *)v6 + 55);
      *((_QWORD *)v5 + 56) = *((_QWORD *)v6 + 56);
      v5[456] = v6[456];
      v5[457] = v6[457];
      v5[458] = v6[458];
      *((_QWORD *)v5 + 58) = *((_QWORD *)v6 + 58);
      *((_QWORD *)v5 + 59) = *((_QWORD *)v6 + 59);
      *((_QWORD *)v5 + 60) = *((_QWORD *)v6 + 60);
      v5[488] = v6[488];
      v5[489] = v6[489];
      *((_QWORD *)v5 + 62) = *((_QWORD *)v6 + 62);
      *((_QWORD *)v5 + 63) = *((_QWORD *)v6 + 63);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v48 == 1)
  {
    sub_240240C00((uint64_t)(v5 + 256));
    v61 = *((_OWORD *)v6 + 19);
    v63 = *v47;
    v62 = *((_OWORD *)v6 + 17);
    *((_OWORD *)v5 + 18) = *((_OWORD *)v6 + 18);
    *((_OWORD *)v5 + 19) = v61;
    *v46 = v63;
    *((_OWORD *)v5 + 17) = v62;
    v64 = *((_OWORD *)v6 + 23);
    v66 = *((_OWORD *)v6 + 20);
    v65 = *((_OWORD *)v6 + 21);
    *((_OWORD *)v5 + 22) = *((_OWORD *)v6 + 22);
    *((_OWORD *)v5 + 23) = v64;
    *((_OWORD *)v5 + 20) = v66;
    *((_OWORD *)v5 + 21) = v65;
    v67 = *((_OWORD *)v6 + 27);
    v69 = *((_OWORD *)v6 + 24);
    v68 = *((_OWORD *)v6 + 25);
    *((_OWORD *)v5 + 26) = *((_OWORD *)v6 + 26);
    *((_OWORD *)v5 + 27) = v67;
    *((_OWORD *)v5 + 24) = v69;
    *((_OWORD *)v5 + 25) = v68;
    v70 = *((_OWORD *)v6 + 31);
    v72 = *((_OWORD *)v6 + 28);
    v71 = *((_OWORD *)v6 + 29);
    *((_OWORD *)v5 + 30) = *((_OWORD *)v6 + 30);
    *((_OWORD *)v5 + 31) = v70;
    *((_OWORD *)v5 + 28) = v72;
    *((_OWORD *)v5 + 29) = v71;
  }
  else
  {
    v80 = *v47;
    *((_WORD *)v5 + 136) = *((_WORD *)v6 + 136);
    *v46 = v80;
    v81 = *(_OWORD *)(v6 + 280);
    *((_WORD *)v5 + 148) = *((_WORD *)v6 + 148);
    *(_OWORD *)(v5 + 280) = v81;
    v5[298] = v6[298];
    v5[299] = v6[299];
    v5[300] = v6[300];
    v5[301] = v6[301];
    v5[302] = v6[302];
    v82 = *((_QWORD *)v6 + 38);
    v5[312] = v6[312];
    *((_QWORD *)v5 + 38) = v82;
    v5[313] = v6[313];
    v5[314] = v6[314];
    v5[315] = v6[315];
    v5[316] = v6[316];
    v5[317] = v6[317];
    v5[318] = v6[318];
    v5[319] = v6[319];
    v5[320] = v6[320];
    *((_QWORD *)v5 + 41) = *((_QWORD *)v6 + 41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[336] = v6[336];
    v5[337] = v6[337];
    v83 = *((_QWORD *)v6 + 43);
    v5[352] = v6[352];
    *((_QWORD *)v5 + 43) = v83;
    v84 = *((_QWORD *)v6 + 45);
    v5[368] = v6[368];
    *((_QWORD *)v5 + 45) = v84;
    v5[369] = v6[369];
    v5[370] = v6[370];
    *((_QWORD *)v5 + 47) = *((_QWORD *)v6 + 47);
    *((_QWORD *)v5 + 48) = *((_QWORD *)v6 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v85 = *((_QWORD *)v6 + 49);
    v5[400] = v6[400];
    *((_QWORD *)v5 + 49) = v85;
    *((_QWORD *)v5 + 51) = *((_QWORD *)v6 + 51);
    *((_QWORD *)v5 + 52) = *((_QWORD *)v6 + 52);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86 = *((_QWORD *)v6 + 53);
    v5[432] = v6[432];
    *((_QWORD *)v5 + 53) = v86;
    v5[433] = v6[433];
    v5[434] = v6[434];
    *((_QWORD *)v5 + 55) = *((_QWORD *)v6 + 55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 56) = *((_QWORD *)v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[456] = v6[456];
    v5[457] = v6[457];
    v5[458] = v6[458];
    *((_QWORD *)v5 + 58) = *((_QWORD *)v6 + 58);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 59) = *((_QWORD *)v6 + 59);
    *((_QWORD *)v5 + 60) = *((_QWORD *)v6 + 60);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[488] = v6[488];
    v5[489] = v6[489];
    *((_QWORD *)v5 + 62) = *((_QWORD *)v6 + 62);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 63) = *((_QWORD *)v6 + 63);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v87 = (int *)type metadata accessor for TaskDefinition(0);
  v88 = v87[8];
  v89 = &v5[v88];
  v90 = &v6[v88];
  v91 = sub_2402BD48C();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v89, v90, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v95)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v89, v91);
LABEL_20:
    v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v89, v90, v91);
LABEL_21:
  v97 = v87[9];
  v98 = &v5[v97];
  v99 = &v6[v97];
  v100 = v93(&v5[v97], 1, v91);
  v101 = v93(v99, 1, v91);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v98, v99, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v98, 0, 1, v91);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v101)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v98, v91);
LABEL_26:
    v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v98, v99, v91);
LABEL_27:
  *(_QWORD *)&v5[v87[10]] = *(_QWORD *)&v6[v87[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = a3[6];
  v104 = &a1[v103];
  v105 = &a2[v103];
  *v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  v106 = a3[8];
  v107 = &a1[v106];
  v108 = &a2[v106];
  v109 = v93(&a1[v106], 1, v91);
  v110 = v93(v108, 1, v91);
  if (v109)
  {
    if (!v110)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v107, v108, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v107, 0, 1, v91);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v110)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v107, v91);
LABEL_32:
    v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v107, v108, v91);
LABEL_33:
  v112 = a3[9];
  v113 = &a1[v112];
  v114 = &a2[v112];
  v115 = v93(&a1[v112], 1, v91);
  v116 = v93(v114, 1, v91);
  if (!v115)
  {
    if (!v116)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v113, v114, v91);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v113, v91);
    goto LABEL_38;
  }
  if (v116)
  {
LABEL_38:
    v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v113, v114, v91);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v113, 0, 1, v91);
  return a1;
}

_BYTE *initializeWithTake for MLHostTask(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v5;
  _OWORD *v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(_BYTE *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;

  *a1 = *a2;
  v5 = a3[5];
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_OWORD *)&a2[v5 + 16];
  *v6 = *(_OWORD *)&a2[v5];
  v6[1] = v8;
  v9 = *(_OWORD *)&a2[v5 + 48];
  v6[2] = *(_OWORD *)&a2[v5 + 32];
  v6[3] = v9;
  v10 = *(_OWORD *)&a2[v5 + 112];
  v6[6] = *(_OWORD *)&a2[v5 + 96];
  v6[7] = v10;
  v11 = *(_OWORD *)&a2[v5 + 80];
  v6[4] = *(_OWORD *)&a2[v5 + 64];
  v6[5] = v11;
  v12 = *(_OWORD *)&a2[v5 + 176];
  v6[10] = *(_OWORD *)&a2[v5 + 160];
  v6[11] = v12;
  v13 = *(_OWORD *)&a2[v5 + 144];
  v6[8] = *(_OWORD *)&a2[v5 + 128];
  v6[9] = v13;
  *(_OWORD *)((char *)v6 + 236) = *(_OWORD *)&a2[v5 + 236];
  v14 = *(_OWORD *)&a2[v5 + 224];
  v15 = *(_OWORD *)&a2[v5 + 192];
  v6[13] = *(_OWORD *)&a2[v5 + 208];
  v6[14] = v14;
  v6[12] = v15;
  v16 = *(_OWORD *)&a2[v5 + 464];
  v6[28] = *(_OWORD *)&a2[v5 + 448];
  v6[29] = v16;
  v17 = *(_OWORD *)&a2[v5 + 496];
  v6[30] = *(_OWORD *)&a2[v5 + 480];
  v6[31] = v17;
  v18 = *(_OWORD *)&a2[v5 + 400];
  v6[24] = *(_OWORD *)&a2[v5 + 384];
  v6[25] = v18;
  v19 = *(_OWORD *)&a2[v5 + 432];
  v6[26] = *(_OWORD *)&a2[v5 + 416];
  v6[27] = v19;
  v20 = *(_OWORD *)&a2[v5 + 336];
  v6[20] = *(_OWORD *)&a2[v5 + 320];
  v6[21] = v20;
  v21 = *(_OWORD *)&a2[v5 + 368];
  v6[22] = *(_OWORD *)&a2[v5 + 352];
  v6[23] = v21;
  v22 = *(_OWORD *)&a2[v5 + 272];
  v6[16] = *(_OWORD *)&a2[v5 + 256];
  v6[17] = v22;
  v23 = *(_OWORD *)&a2[v5 + 304];
  v6[18] = *(_OWORD *)&a2[v5 + 288];
  v6[19] = v23;
  v24 = (int *)type metadata accessor for TaskDefinition(0);
  v25 = v24[8];
  v26 = (char *)v6 + v25;
  v27 = &v7[v25];
  v28 = sub_2402BD48C();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = v24[9];
  v33 = (char *)v6 + v32;
  v34 = &v7[v32];
  if (v30(&v7[v32], 1, v28))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    v36 = v29;
  }
  else
  {
    v37 = v34;
    v36 = v29;
    (*(void (**)(char *, const void *, uint64_t))(v29 + 32))(v33, v37, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  *(_QWORD *)((char *)v6 + v24[10]) = *(_QWORD *)&v7[v24[10]];
  v38 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v38] = a2[v38];
  v39 = a3[8];
  v40 = &a1[v39];
  v41 = &a2[v39];
  if (v30(&a2[v39], 1, v28))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 32))(v40, v41, v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v28);
  }
  v43 = a3[9];
  v44 = &a1[v43];
  v45 = &a2[v43];
  if (v30(v45, 1, v28))
  {
    v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v36 + 32))(v44, v45, v28);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v44, 0, 1, v28);
  }
  return a1;
}

_BYTE *assignWithTake for MLHostTask(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  int v64;
  uint64_t v65;
  _BYTE *v67;
  uint64_t v68;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = *(_QWORD *)&a2[v6 + 8];
  *(_QWORD *)v7 = *(_QWORD *)&a2[v6];
  *((_QWORD *)v7 + 1) = v9;
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)v8 + 3);
  *((_QWORD *)v7 + 2) = *((_QWORD *)v8 + 2);
  *((_QWORD *)v7 + 3) = v10;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v7 + 12) == 1)
    goto LABEL_4;
  v11 = *((_QWORD *)v8 + 12);
  if (v11 == 1)
  {
    sub_240240BCC((uint64_t)(v7 + 32));
LABEL_4:
    v12 = *((_OWORD *)v8 + 13);
    *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
    *((_OWORD *)v7 + 13) = v12;
    *((_OWORD *)v7 + 14) = *((_OWORD *)v8 + 14);
    *(_OWORD *)(v7 + 236) = *(_OWORD *)(v8 + 236);
    v13 = *((_OWORD *)v8 + 9);
    *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
    *((_OWORD *)v7 + 9) = v13;
    v14 = *((_OWORD *)v8 + 11);
    *((_OWORD *)v7 + 10) = *((_OWORD *)v8 + 10);
    *((_OWORD *)v7 + 11) = v14;
    v15 = *((_OWORD *)v8 + 5);
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    *((_OWORD *)v7 + 5) = v15;
    v16 = *((_OWORD *)v8 + 7);
    *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
    *((_OWORD *)v7 + 7) = v16;
    v17 = *((_OWORD *)v8 + 3);
    *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
    *((_OWORD *)v7 + 3) = v17;
    goto LABEL_6;
  }
  *((_QWORD *)v7 + 4) = *((_QWORD *)v8 + 4);
  v7[40] = v8[40];
  *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
  v7[56] = v8[56];
  *((_QWORD *)v7 + 8) = *((_QWORD *)v8 + 8);
  v7[72] = v8[72];
  *(_QWORD *)(v7 + 73) = *(_QWORD *)(v8 + 73);
  *(_WORD *)(v7 + 81) = *(_WORD *)(v8 + 81);
  v7[83] = v8[83];
  *((_QWORD *)v7 + 11) = *((_QWORD *)v8 + 11);
  *((_QWORD *)v7 + 12) = v11;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 13) = *((_QWORD *)v8 + 13);
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 14) = *((_QWORD *)v8 + 14);
  swift_bridgeObjectRelease();
  v7[120] = v8[120];
  v18 = *((_QWORD *)v8 + 17);
  *((_QWORD *)v7 + 16) = *((_QWORD *)v8 + 16);
  *((_QWORD *)v7 + 17) = v18;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 18) = *((_QWORD *)v8 + 18);
  *((_DWORD *)v7 + 38) = *((_DWORD *)v8 + 38);
  *((_QWORD *)v7 + 20) = *((_QWORD *)v8 + 20);
  v7[168] = v8[168];
  v19 = *((_QWORD *)v8 + 23);
  *((_QWORD *)v7 + 22) = *((_QWORD *)v8 + 22);
  *((_QWORD *)v7 + 23) = v19;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 24) = *((_QWORD *)v8 + 24);
  v7[200] = v8[200];
  *(_DWORD *)(v7 + 201) = *(_DWORD *)(v8 + 201);
  v7[205] = v8[205];
  *((_WORD *)v7 + 103) = *((_WORD *)v8 + 103);
  *((_QWORD *)v7 + 26) = *((_QWORD *)v8 + 26);
  v7[216] = v8[216];
  v7[232] = v8[232];
  *((_QWORD *)v7 + 28) = *((_QWORD *)v8 + 28);
  *((_QWORD *)v7 + 30) = *((_QWORD *)v8 + 30);
  *((_DWORD *)v7 + 62) = *((_DWORD *)v8 + 62);
LABEL_6:
  v20 = v7 + 256;
  v21 = v8 + 256;
  v67 = a1;
  if (*((_QWORD *)v7 + 41) == 1)
  {
LABEL_9:
    v23 = *((_OWORD *)v8 + 29);
    *((_OWORD *)v7 + 28) = *((_OWORD *)v8 + 28);
    *((_OWORD *)v7 + 29) = v23;
    v24 = *((_OWORD *)v8 + 31);
    *((_OWORD *)v7 + 30) = *((_OWORD *)v8 + 30);
    *((_OWORD *)v7 + 31) = v24;
    v25 = *((_OWORD *)v8 + 25);
    *((_OWORD *)v7 + 24) = *((_OWORD *)v8 + 24);
    *((_OWORD *)v7 + 25) = v25;
    v26 = *((_OWORD *)v8 + 27);
    *((_OWORD *)v7 + 26) = *((_OWORD *)v8 + 26);
    *((_OWORD *)v7 + 27) = v26;
    v27 = *((_OWORD *)v8 + 21);
    *((_OWORD *)v7 + 20) = *((_OWORD *)v8 + 20);
    *((_OWORD *)v7 + 21) = v27;
    v28 = *((_OWORD *)v8 + 23);
    *((_OWORD *)v7 + 22) = *((_OWORD *)v8 + 22);
    *((_OWORD *)v7 + 23) = v28;
    v29 = *((_OWORD *)v8 + 17);
    *v20 = *v21;
    *((_OWORD *)v7 + 17) = v29;
    v30 = *((_OWORD *)v8 + 19);
    *((_OWORD *)v7 + 18) = *((_OWORD *)v8 + 18);
    *((_OWORD *)v7 + 19) = v30;
    goto LABEL_11;
  }
  v22 = *((_QWORD *)v8 + 41);
  if (v22 == 1)
  {
    sub_240240C00((uint64_t)(v7 + 256));
    goto LABEL_9;
  }
  *v20 = *v21;
  *((_WORD *)v7 + 136) = *((_WORD *)v8 + 136);
  *((_WORD *)v7 + 148) = *((_WORD *)v8 + 148);
  *(_OWORD *)(v7 + 280) = *(_OWORD *)(v8 + 280);
  *(_DWORD *)(v7 + 298) = *(_DWORD *)(v8 + 298);
  v7[302] = v8[302];
  v7[312] = v8[312];
  *((_QWORD *)v7 + 38) = *((_QWORD *)v8 + 38);
  *(_QWORD *)(v7 + 313) = *(_QWORD *)(v8 + 313);
  *((_QWORD *)v7 + 41) = v22;
  swift_bridgeObjectRelease();
  *((_WORD *)v7 + 168) = *((_WORD *)v8 + 168);
  *((_QWORD *)v7 + 43) = *((_QWORD *)v8 + 43);
  v7[352] = v8[352];
  *((_QWORD *)v7 + 45) = *((_QWORD *)v8 + 45);
  v7[368] = v8[368];
  *(_WORD *)(v7 + 369) = *(_WORD *)(v8 + 369);
  v31 = *((_QWORD *)v8 + 48);
  *((_QWORD *)v7 + 47) = *((_QWORD *)v8 + 47);
  *((_QWORD *)v7 + 48) = v31;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 49) = *((_QWORD *)v8 + 49);
  v7[400] = v8[400];
  v32 = *((_QWORD *)v8 + 52);
  *((_QWORD *)v7 + 51) = *((_QWORD *)v8 + 51);
  *((_QWORD *)v7 + 52) = v32;
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 53) = *((_QWORD *)v8 + 53);
  v7[432] = v8[432];
  *(_WORD *)(v7 + 433) = *(_WORD *)(v8 + 433);
  *((_QWORD *)v7 + 55) = *((_QWORD *)v8 + 55);
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 56) = *((_QWORD *)v8 + 56);
  swift_bridgeObjectRelease();
  v7[456] = v8[456];
  *(_WORD *)(v7 + 457) = *(_WORD *)(v8 + 457);
  *((_QWORD *)v7 + 58) = *((_QWORD *)v8 + 58);
  swift_bridgeObjectRelease();
  v33 = *((_QWORD *)v8 + 60);
  *((_QWORD *)v7 + 59) = *((_QWORD *)v8 + 59);
  *((_QWORD *)v7 + 60) = v33;
  swift_bridgeObjectRelease();
  *((_WORD *)v7 + 244) = *((_WORD *)v8 + 244);
  *((_QWORD *)v7 + 62) = *((_QWORD *)v8 + 62);
  swift_bridgeObjectRelease();
  *((_QWORD *)v7 + 63) = *((_QWORD *)v8 + 63);
  swift_bridgeObjectRelease();
LABEL_11:
  v34 = (int *)type metadata accessor for TaskDefinition(0);
  v35 = v34[8];
  v36 = &v7[v35];
  v37 = &v8[v35];
  v38 = sub_2402BD48C();
  v68 = *(_QWORD *)(v38 - 8);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v68 + 48);
  v40 = v39(v36, 1, v38);
  v41 = v39(v37, 1, v38);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 32))(v36, v37, v38);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v36, 0, 1, v38);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v41)
  {
    (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v36, v38);
LABEL_16:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 40))(v36, v37, v38);
LABEL_17:
  v43 = v34[9];
  v44 = &v7[v43];
  v45 = &v8[v43];
  v46 = v39(&v7[v43], 1, v38);
  v47 = v39(v45, 1, v38);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 32))(v44, v45, v38);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v44, 0, 1, v38);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v47)
  {
    (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v44, v38);
LABEL_22:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 40))(v44, v45, v38);
LABEL_23:
  *(_QWORD *)&v7[v34[10]] = *(_QWORD *)&v8[v34[10]];
  swift_bridgeObjectRelease();
  v49 = a3[6];
  v50 = &v67[v49];
  v51 = (uint64_t *)&a2[v49];
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  v54 = a3[8];
  v67[a3[7]] = a2[a3[7]];
  v55 = &v67[v54];
  v56 = &a2[v54];
  v57 = v39(&v67[v54], 1, v38);
  v58 = v39(v56, 1, v38);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 32))(v55, v56, v38);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v55, 0, 1, v38);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v58)
  {
    (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v55, v38);
LABEL_28:
    v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 40))(v55, v56, v38);
LABEL_29:
  v60 = a3[9];
  v61 = &v67[v60];
  v62 = &a2[v60];
  v63 = v39(&v67[v60], 1, v38);
  v64 = v39(v62, 1, v38);
  if (!v63)
  {
    if (!v64)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 40))(v61, v62, v38);
      return v67;
    }
    (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v61, v38);
    goto LABEL_34;
  }
  if (v64)
  {
LABEL_34:
    v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    return v67;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 32))(v61, v62, v38);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v61, 0, 1, v38);
  return v67;
}

uint64_t getEnumTagSinglePayload for MLHostTask()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402439D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v6 = type metadata accessor for TaskDefinition(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHostTask()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_240243A94(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for TaskDefinition(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = a2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[8];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_240243B3C()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TaskDefinition(319);
  if (v0 <= 0x3F)
  {
    sub_24023F568(319, qword_254352250, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for DeviceOSType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHostTask.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_240243CCC + 4 * byte_2402BF09F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_240243D00 + 4 * byte_2402BF09A[v4]))();
}

uint64_t sub_240243D00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240243D08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240243D10);
  return result;
}

uint64_t sub_240243D1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240243D24);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_240243D28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240243D30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_240243D3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MLHostTask.CodingKeys()
{
  return &type metadata for MLHostTask.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TaskRequestMotionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20LighthouseBackground19TaskValidationErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_240243E30 + 4 * byte_2402BF0A9[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_240243E64 + 4 * byte_2402BF0A4[v4]))();
}

uint64_t sub_240243E64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240243E6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240243E74);
  return result;
}

uint64_t sub_240243E80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240243E88);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_240243E8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240243E94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskValidationError.CodingKeys()
{
  return &type metadata for TaskValidationError.CodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidNameCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidNameCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidBundleIdentifierCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidBundleIdentifierCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidDefinitionCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidDefinitionCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidCriteriaCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidCriteriaCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidTaskRequestCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidTaskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidStartDateCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidStartDateCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidEndDateCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidEndDateCodingKeys;
}

ValueMetadata *type metadata accessor for TaskValidationError.InvalidOSTypeCodingKeys()
{
  return &type metadata for TaskValidationError.InvalidOSTypeCodingKeys;
}

uint64_t getEnumTagSinglePayload for XPCActivityMotionState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskDefinition.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24024400C + 4 * byte_2402BF0B3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_240244040 + 4 * byte_2402BF0AE[v4]))();
}

uint64_t sub_240244040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240244048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240244050);
  return result;
}

uint64_t sub_24024405C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240244064);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_240244068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240244070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskDefinition.CodingKeys()
{
  return &type metadata for TaskDefinition.CodingKeys;
}

uint64_t _s20LighthouseBackground8TaskTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2402440D8 + 4 * byte_2402BF0BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24024410C + 4 * byte_2402BF0B8[v4]))();
}

uint64_t sub_24024410C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240244114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24024411CLL);
  return result;
}

uint64_t sub_240244128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240244130);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_240244134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24024413C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskMetadata.CodingKeys()
{
  return &type metadata for TaskMetadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PullMetadata.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PullMetadata.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2402441EC + 4 * byte_2402BF0C2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24024420C + 4 * byte_2402BF0C7[v4]))();
}

_BYTE *sub_2402441EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24024420C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_240244214(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24024421C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_240244224(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24024422C(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_240244238()
{
  return 0;
}

ValueMetadata *type metadata accessor for PullMetadata.CodingKeys()
{
  return &type metadata for PullMetadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PushMetadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PushMetadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24024432C + 4 * byte_2402BF0D1[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_240244360 + 4 * byte_2402BF0CC[v4]))();
}

uint64_t sub_240244360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240244368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240244370);
  return result;
}

uint64_t sub_24024437C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240244384);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_240244388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240244390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushMetadata.CodingKeys()
{
  return &type metadata for PushMetadata.CodingKeys;
}

unint64_t sub_2402443B0()
{
  unint64_t result;

  result = qword_256FDE978;
  if (!qword_256FDE978)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFAE8, &type metadata for PushMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE978);
  }
  return result;
}

unint64_t sub_2402443F8()
{
  unint64_t result;

  result = qword_256FDE980;
  if (!qword_256FDE980)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFBA0, &type metadata for PullMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE980);
  }
  return result;
}

unint64_t sub_240244440()
{
  unint64_t result;

  result = qword_256FDE988;
  if (!qword_256FDE988)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFC58, &type metadata for TaskMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE988);
  }
  return result;
}

unint64_t sub_240244488()
{
  unint64_t result;

  result = qword_256FDE990;
  if (!qword_256FDE990)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFD10, &type metadata for TaskDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE990);
  }
  return result;
}

unint64_t sub_2402444D0()
{
  unint64_t result;

  result = qword_256FDE998;
  if (!qword_256FDE998)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0048, &type metadata for TaskValidationError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE998);
  }
  return result;
}

unint64_t sub_240244518()
{
  unint64_t result;

  result = qword_256FDE9A0;
  if (!qword_256FDE9A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0100, &type metadata for MLHostTask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9A0);
  }
  return result;
}

unint64_t sub_240244560()
{
  unint64_t result;

  result = qword_256FDE9A8;
  if (!qword_256FDE9A8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0070, &type metadata for MLHostTask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9A8);
  }
  return result;
}

unint64_t sub_2402445A8()
{
  unint64_t result;

  result = qword_256FDE9B0;
  if (!qword_256FDE9B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0098, &type metadata for MLHostTask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9B0);
  }
  return result;
}

unint64_t sub_2402445F0()
{
  unint64_t result;

  result = qword_256FDE9B8;
  if (!qword_256FDE9B8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFF68, &type metadata for TaskValidationError.InvalidNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9B8);
  }
  return result;
}

unint64_t sub_240244638()
{
  unint64_t result;

  result = qword_256FDE9C0;
  if (!qword_256FDE9C0)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFF90, &type metadata for TaskValidationError.InvalidNameCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9C0);
  }
  return result;
}

unint64_t sub_240244680()
{
  unint64_t result;

  result = qword_256FDE9C8;
  if (!qword_256FDE9C8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFF18, &type metadata for TaskValidationError.InvalidBundleIdentifierCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9C8);
  }
  return result;
}

unint64_t sub_2402446C8()
{
  unint64_t result;

  result = qword_256FDE9D0;
  if (!qword_256FDE9D0)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFF40, &type metadata for TaskValidationError.InvalidBundleIdentifierCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9D0);
  }
  return result;
}

unint64_t sub_240244710()
{
  unint64_t result;

  result = qword_256FDE9D8;
  if (!qword_256FDE9D8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFEC8, &type metadata for TaskValidationError.InvalidDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9D8);
  }
  return result;
}

unint64_t sub_240244758()
{
  unint64_t result;

  result = qword_256FDE9E0;
  if (!qword_256FDE9E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFEF0, &type metadata for TaskValidationError.InvalidDefinitionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9E0);
  }
  return result;
}

unint64_t sub_2402447A0()
{
  unint64_t result;

  result = qword_256FDE9E8;
  if (!qword_256FDE9E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFE78, &type metadata for TaskValidationError.InvalidCriteriaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9E8);
  }
  return result;
}

unint64_t sub_2402447E8()
{
  unint64_t result;

  result = qword_256FDE9F0;
  if (!qword_256FDE9F0)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFEA0, &type metadata for TaskValidationError.InvalidCriteriaCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9F0);
  }
  return result;
}

unint64_t sub_240244830()
{
  unint64_t result;

  result = qword_256FDE9F8;
  if (!qword_256FDE9F8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFE28, &type metadata for TaskValidationError.InvalidTaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDE9F8);
  }
  return result;
}

unint64_t sub_240244878()
{
  unint64_t result;

  result = qword_256FDEA00;
  if (!qword_256FDEA00)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFE50, &type metadata for TaskValidationError.InvalidTaskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA00);
  }
  return result;
}

unint64_t sub_2402448C0()
{
  unint64_t result;

  result = qword_256FDEA08;
  if (!qword_256FDEA08)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFDD8, &type metadata for TaskValidationError.InvalidStartDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA08);
  }
  return result;
}

unint64_t sub_240244908()
{
  unint64_t result;

  result = qword_256FDEA10;
  if (!qword_256FDEA10)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFE00, &type metadata for TaskValidationError.InvalidStartDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA10);
  }
  return result;
}

unint64_t sub_240244950()
{
  unint64_t result;

  result = qword_256FDEA18;
  if (!qword_256FDEA18)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFD88, &type metadata for TaskValidationError.InvalidEndDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA18);
  }
  return result;
}

unint64_t sub_240244998()
{
  unint64_t result;

  result = qword_256FDEA20;
  if (!qword_256FDEA20)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFDB0, &type metadata for TaskValidationError.InvalidEndDateCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA20);
  }
  return result;
}

unint64_t sub_2402449E0()
{
  unint64_t result;

  result = qword_256FDEA28;
  if (!qword_256FDEA28)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFD38, &type metadata for TaskValidationError.InvalidOSTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA28);
  }
  return result;
}

unint64_t sub_240244A28()
{
  unint64_t result;

  result = qword_256FDEA30;
  if (!qword_256FDEA30)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFD60, &type metadata for TaskValidationError.InvalidOSTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA30);
  }
  return result;
}

unint64_t sub_240244A70()
{
  unint64_t result;

  result = qword_256FDEA38;
  if (!qword_256FDEA38)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFFB8, &type metadata for TaskValidationError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA38);
  }
  return result;
}

unint64_t sub_240244AB8()
{
  unint64_t result;

  result = qword_256FDEA40;
  if (!qword_256FDEA40)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFFE0, &type metadata for TaskValidationError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA40);
  }
  return result;
}

unint64_t sub_240244B00()
{
  unint64_t result;

  result = qword_2543523D0;
  if (!qword_2543523D0)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFC80, &type metadata for TaskDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543523D0);
  }
  return result;
}

unint64_t sub_240244B48()
{
  unint64_t result;

  result = qword_2543523C8;
  if (!qword_2543523C8)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFCA8, &type metadata for TaskDefinition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543523C8);
  }
  return result;
}

unint64_t sub_240244B90()
{
  unint64_t result;

  result = qword_256FDEA48;
  if (!qword_256FDEA48)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFBC8, &type metadata for TaskMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA48);
  }
  return result;
}

unint64_t sub_240244BD8()
{
  unint64_t result;

  result = qword_256FDEA50;
  if (!qword_256FDEA50)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFBF0, &type metadata for TaskMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA50);
  }
  return result;
}

unint64_t sub_240244C20()
{
  unint64_t result;

  result = qword_256FDEA58;
  if (!qword_256FDEA58)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFB10, &type metadata for PullMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA58);
  }
  return result;
}

unint64_t sub_240244C68()
{
  unint64_t result;

  result = qword_256FDEA60;
  if (!qword_256FDEA60)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFB38, &type metadata for PullMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA60);
  }
  return result;
}

unint64_t sub_240244CB0()
{
  unint64_t result;

  result = qword_256FDEA68;
  if (!qword_256FDEA68)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFA58, &type metadata for PushMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA68);
  }
  return result;
}

unint64_t sub_240244CF8()
{
  unint64_t result;

  result = qword_256FDEA70;
  if (!qword_256FDEA70)
  {
    result = MEMORY[0x2426820F8](&unk_2402BFA80, &type metadata for PushMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEA70);
  }
  return result;
}

uint64_t sub_240244D3C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6369706F74 && a2 == 0xE500000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496C656E6E616863 && a2 == 0xE900000000000044 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6570795468737570 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69725068737570 && a2 == 0xEC00000079746972 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_240244F8C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6174654D68737570 && a2 == 0xEC00000061746164;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6174654D6C6C7570 && a2 == 0xEC00000061746164)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2402450A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9220 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6169726574697263 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x757165526B736174 && a2 == 0xEB00000000747365 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9240)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_240245394(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4E64696C61766E69 && a2 == 0xEB00000000656D61;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402C9260 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402C9280 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4364696C61766E69 && a2 == 0xEF61697265746972 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402C92A0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C92C0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x4564696C61766E69 && a2 == 0xEE0065746144646ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x4F64696C61766E69 && a2 == 0xED00006570795453)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_240245738(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657079546B736174 && a2 == 0xE800000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696665446B736174 && a2 == 0xEE006E6F6974696ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646C6F466B736174 && a2 == 0xEA00000000007265 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402C92E0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402C9300)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_2402459D4()
{
  unint64_t result;

  result = qword_256FDEA78;
  if (!qword_256FDEA78)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskStatus, &type metadata for TaskStatus);
    atomic_store(result, (unint64_t *)&qword_256FDEA78);
  }
  return result;
}

unint64_t sub_240245A18()
{
  unint64_t result;

  result = qword_256FDEA80;
  if (!qword_256FDEA80)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DynamicTaskSource, &type metadata for DynamicTaskSource);
    atomic_store(result, (unint64_t *)&qword_256FDEA80);
  }
  return result;
}

unint64_t sub_240245A5C()
{
  unint64_t result;

  result = qword_256FDEA88;
  if (!qword_256FDEA88)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskType, &type metadata for TaskType);
    atomic_store(result, (unint64_t *)&qword_256FDEA88);
  }
  return result;
}

uint64_t sub_240245AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id TaskRequest.getSystemTaskRequest(identifier:)()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v1 = v0[13];
  v52 = v0[12];
  v53 = v1;
  v2 = v0[15];
  v54 = v0[14];
  v55 = v2;
  v3 = v0[9];
  v48 = v0[8];
  v49 = v3;
  v4 = v0[11];
  v50 = v0[10];
  v51 = v4;
  v5 = v0[5];
  v44 = v0[4];
  v45 = v5;
  v6 = v0[7];
  v46 = v0[6];
  v47 = v6;
  v7 = v0[1];
  v40 = *v0;
  v41 = v7;
  v8 = v0[3];
  v42 = v0[2];
  v43 = v8;
  if ((BYTE1(v41) & 1) != 0)
  {
    if ((BYTE9(v42) & 1) != 0)
      goto LABEL_10;
    v9 = objc_allocWithZone(MEMORY[0x24BE0B710]);
    swift_bridgeObjectRetain();
    v10 = (void *)sub_2402BD63C();
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v9, sel_initWithIdentifier_, v10);

    objc_msgSend(v11, sel_setScheduleAfter_, *((double *)&v41 + 1));
    if ((BYTE8(v42) & 1) == 0)
      objc_msgSend(v11, sel_setTrySchedulingBefore_, *(double *)&v42);
  }
  else
  {
    if (!BYTE9(v42))
      goto LABEL_10;
    v12 = objc_allocWithZone(MEMORY[0x24BE0B718]);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_2402BD63C();
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v12, sel_initWithIdentifier_, v13);

    objc_msgSend(v11, sel_setInterval_, *(double *)&v40);
    if ((v41 & 1) == 0)
      objc_msgSend(v11, sel_setMinDurationBetweenInstances_, *((double *)&v40 + 1));
  }
  if (v11)
  {
    v23[0] = v11;
    v14 = v11;
    sub_240245F04(v23);

    return v11;
  }
LABEL_10:
  if (qword_2543528A0 != -1)
    swift_once();
  v15 = sub_2402BD4E0();
  __swift_project_value_buffer(v15, (uint64_t)qword_2543529A0);
  sub_24023DA80((uint64_t)&v40);
  sub_24023DA80((uint64_t)&v40);
  v16 = sub_2402BD4C8();
  v17 = sub_2402BD96C();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v39 = v19;
    *(_DWORD *)v18 = 136315138;
    v35 = v52;
    v36 = v53;
    v37 = v54;
    v38 = v55;
    v31 = v48;
    v32 = v49;
    v33 = v50;
    v34 = v51;
    v27 = v44;
    v28 = v45;
    v29 = v46;
    v30 = v47;
    v23[1] = *((id *)&v40 + 1);
    v24 = v41;
    v25 = v42;
    v26 = v43;
    v20 = TaskRequest.description.getter();
    v23[0] = (id)sub_24023D440(v20, v21, &v39);
    sub_2402BD9FC();
    swift_bridgeObjectRelease();
    sub_240245E64((uint64_t)&v40);
    sub_240245E64((uint64_t)&v40);
    _os_log_impl(&dword_24022D000, v16, v17, "Invalid TaskRequest, can't generate BGSystemTaskRequest: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242682188](v19, -1, -1);
    MEMORY[0x242682188](v18, -1, -1);
  }
  else
  {
    sub_240245E64((uint64_t)&v40);
    sub_240245E64((uint64_t)&v40);
  }

  return 0;
}

uint64_t sub_240245E64(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_240245F04(id *a1)
{
  uint64_t v1;
  id v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  double v47;
  int v48;
  double v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  char v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _BYTE v75[8];
  _BYTE v76[15];
  char v77;
  _BYTE v78[8];
  _BYTE v79[12];
  char v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  void *v87;
  void *v88;

  v2 = *a1;
  v3 = *(_BYTE *)(v1 + 43);
  objc_msgSend(*a1, sel_setRequiresNetworkConnectivity_, *(_BYTE *)(v1 + 42) & 1);
  sub_240238F2C(v1 + 44, (uint64_t)&v81, &qword_256FDEAB8);
  objc_msgSend(v2, sel_setRequiresExternalPower_, v3 & 1);
  sub_240238F2C((uint64_t)&v81, (uint64_t)&v82, &qword_256FDEAB8);
  v4 = qword_2402C0648[v82];
  sub_240238F2C(v1 + 45, (uint64_t)&v80, &qword_256FDEAC0);
  objc_msgSend(v2, sel_setPriority_, v4);
  sub_240238F2C((uint64_t)&v80, (uint64_t)&v83, &qword_256FDEAC0);
  LOBYTE(v4) = *(_BYTE *)(v1 + 46);
  objc_msgSend(v2, sel_setRequiresProtectionClass_, qword_2402C06E0[v83]);
  v5 = v4 & 1;
  v6 = *(double *)(v1 + 48);
  LODWORD(v4) = *(unsigned __int8 *)(v1 + 56);
  objc_msgSend(v2, sel_setPreventsDeviceSleep_, v5);
  v7 = 0.0;
  if (!(_DWORD)v4)
    v7 = v6;
  v8 = *(_BYTE *)(v1 + 57);
  objc_msgSend(v2, sel_setRandomInitialDelay_, v7);
  v9 = v8 & 1;
  v10 = *(_BYTE *)(v1 + 58);
  objc_msgSend(v2, sel_setPostInstall_, v9);
  v11 = v10 & 1;
  v12 = *(_BYTE *)(v1 + 59);
  objc_msgSend(v2, sel_setRequiresInexpensiveNetworkConnectivity_, v11);
  v13 = v12 & 1;
  v14 = *(_BYTE *)(v1 + 60);
  objc_msgSend(v2, sel_setRequiresUnconstrainedNetworkConnectivity_, v13);
  v15 = v14 & 1;
  v16 = *(_BYTE *)(v1 + 61);
  objc_msgSend(v2, sel_setAppRefresh_, v15);
  v17 = v16 & 1;
  v18 = *(_BYTE *)(v1 + 62);
  objc_msgSend(v2, sel_setRequiresUserInactivity_, v17);
  v19 = v18 & 1;
  v20 = *(_BYTE *)(v1 + 63);
  objc_msgSend(v2, sel_setRequiresSignificantUserInactivity_, v19);
  v21 = v20 & 1;
  v22 = *(_BYTE *)(v1 + 64);
  objc_msgSend(v2, sel_setPowerNap_, v21);
  sub_240238F2C(v1 + 72, (uint64_t)v79, &qword_256FDEAC8);
  objc_msgSend(v2, sel_setResourceIntensive_, v22 & 1);
  sub_240238F2C((uint64_t)v79, (uint64_t)&v84, &qword_256FDEAC8);
  if (v84)
  {
    v23 = *(_QWORD *)(v84 + 16);
    if (v23)
    {
      v24 = 0;
      v25 = (char *)(v84 + 32);
      do
      {
        v26 = *v25++;
        v27 = qword_2402C0670[v26];
        if ((v27 & v24) != 0)
          v27 = 0;
        v24 |= v27;
        --v23;
      }
      while (v23);
    }
    else
    {
      v24 = 0;
    }
    objc_msgSend(v2, sel_setResources_, v24);
  }
  v28 = *(_BYTE *)(v1 + 81);
  objc_msgSend(v2, sel_setMayRebootDevice_, *(_BYTE *)(v1 + 80) & 1);
  v29 = v28 & 1;
  v30 = *(_QWORD *)(v1 + 88);
  v31 = *(unsigned __int8 *)(v1 + 96);
  objc_msgSend(v2, sel_setUserRequestedBackupTask_, v29);
  if (v31)
    v32 = 0;
  else
    v32 = v30;
  v33 = *(_QWORD *)(v1 + 104);
  v34 = *(unsigned __int8 *)(v1 + 112);
  objc_msgSend(v2, sel_setNetworkDownloadSize_, v32);
  if (v34)
    v35 = 0;
  else
    v35 = v33;
  v36 = *(_BYTE *)(v1 + 113);
  objc_msgSend(v2, sel_setNetworkUploadSize_, v35);
  v37 = v36 & 1;
  v38 = *(_BYTE *)(v1 + 114);
  objc_msgSend(v2, sel_setCommunicatesWithPairedDevice_, v37);
  v39 = v38 & 1;
  v40 = *(_QWORD *)(v1 + 128);
  objc_msgSend(v2, sel_setShouldWakeDevice_, v39);
  if (v40)
  {
    swift_bridgeObjectRetain();
    v41 = (void *)sub_2402BD63C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = 0;
  }
  v42 = *(_QWORD *)(v1 + 136);
  v43 = *(unsigned __int8 *)(v1 + 144);
  objc_msgSend(v2, sel_setGroupName_, v41);

  if (v43)
    v44 = 1;
  else
    v44 = v42;
  if (v44 < 0)
  {
    __break(1u);
  }
  else
  {
    v45 = *(_QWORD *)(v1 + 160);
    objc_msgSend(v2, sel_setGroupConcurrencyLimit_);
    if (v45)
    {
      swift_bridgeObjectRetain();
      v46 = (void *)sub_2402BD63C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v46 = 0;
    }
    v47 = *(double *)(v1 + 168);
    v48 = *(unsigned __int8 *)(v1 + 176);
    objc_msgSend(v2, sel_setRateLimitConfigurationName_, v46);

    v49 = 0.0;
    if (!v48)
      v49 = v47;
    v50 = *(_BYTE *)(v1 + 177);
    objc_msgSend(v2, sel_setExpectedDuration_, v49);
    v51 = v50 & 1;
    v52 = *(_BYTE *)(v1 + 178);
    objc_msgSend(v2, sel_setPowerBudgeted_, v51);
    v53 = v52 & 1;
    v54 = *(_QWORD *)(v1 + 184);
    objc_msgSend(v2, sel_setDataBudgeted_, v53);
    if (v54)
    {
      swift_bridgeObjectRetain();
      v55 = (void *)sub_2402BD798();
      swift_bridgeObjectRelease();
    }
    else
    {
      v55 = 0;
    }
    v56 = *(_QWORD *)(v1 + 192);
    objc_msgSend(v2, sel_setRelatedApplications_, v55);

    if (v56)
    {
      swift_bridgeObjectRetain();
      v57 = (void *)sub_2402BD798();
      swift_bridgeObjectRelease();
    }
    else
    {
      v57 = 0;
    }
    v58 = *(_BYTE *)(v1 + 200);
    objc_msgSend(v2, sel_setInvolvedProcesses_, v57);

    v59 = v58 & 1;
    v60 = *(_BYTE *)(v1 + 201);
    objc_msgSend(v2, sel_setRunOnAppForeground_, v59);
    v61 = v60 & 1;
    v62 = *(_BYTE *)(v1 + 202);
    objc_msgSend(v2, sel_setRequestsApplicationLaunch_, v61);
    sub_240238F2C(v1 + 208, (uint64_t)v78, &qword_256FDEAD0);
    objc_msgSend(v2, sel_setRequiresBuddyComplete_, v62 & 1);
    sub_240238F2C((uint64_t)v78, (uint64_t)&v85, &qword_256FDEAD0);
    if (v85)
    {
      v63 = *(_QWORD *)(v85 + 16);
      if (v63)
      {
        v64 = 0;
        v65 = (unsigned __int8 *)(v85 + 32);
        do
        {
          v67 = *v65++;
          v66 = v67;
          if ((~(_DWORD)v64 & (v67 + 1)) != 0)
            v68 = v66 + 1;
          else
            v68 = 0;
          v64 |= v68;
          --v63;
        }
        while (v63);
      }
      else
      {
        v64 = 0;
      }
      objc_msgSend(v2, sel_setTargetDevice_, v64);
    }
    if (*(_QWORD *)(v1 + 224))
    {
      swift_bridgeObjectRetain();
      v69 = (void *)sub_2402BD63C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = 0;
    }
    v70 = *(_BYTE *)(v1 + 232);
    objc_msgSend(v2, sel_setRemoteDevice_, v69);

    sub_240238F2C(v1 + 233, (uint64_t)&v77, &qword_256FDEAD8);
    objc_msgSend(v2, sel_setRequiresRemoteDeviceWake_, v70 & 1);
    sub_240238F2C((uint64_t)&v77, (uint64_t)&v86, &qword_256FDEAD8);
    v71 = qword_2402C0698[v86];
    sub_240238F2C(v1 + 240, (uint64_t)v76, &qword_254352238);
    objc_msgSend(v2, sel_setRunOnMotionState_, v71);
    sub_240238F2C((uint64_t)v76, (uint64_t)&v87, &qword_254352238);
    v72 = v87;
    if (v87)
    {
      sub_240248E90((uint64_t)v76);
      sub_240248D40((uint64_t)v72);
      sub_240248EB8((uint64_t)v76);
      v72 = (void *)sub_2402BD8F4();
      swift_bridgeObjectRelease();
    }
    sub_240238F2C(v1 + 248, (uint64_t)v75, &qword_254352238);
    objc_msgSend(v2, sel_setProducedResultIdentifiers_, v72);

    sub_240238F2C((uint64_t)v75, (uint64_t)&v88, &qword_254352238);
    v73 = v88;
    if (v88)
    {
      sub_240248E90((uint64_t)v75);
      v74 = sub_240248D40((uint64_t)v73);
      sub_240248EB8((uint64_t)v75);
      sub_240246D70(v74);
      swift_bridgeObjectRelease();
      v73 = (void *)sub_2402BD8F4();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v2, sel_setDependencies_, v73);

  }
}

void TaskRequest.asSystemRequest<A>(request:)(id *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  double v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;

  v2 = *(_BYTE *)(v1 + 42);
  v3 = *(_BYTE *)(v1 + 43);
  v4 = *(char *)(v1 + 44);
  v5 = *(char *)(v1 + 45);
  v6 = *(_BYTE *)(v1 + 46);
  v7 = *(double *)(v1 + 48);
  v8 = *(unsigned __int8 *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 57);
  v10 = *(_BYTE *)(v1 + 58);
  v52 = *(_BYTE *)(v1 + 59);
  v53 = *(_BYTE *)(v1 + 60);
  v54 = *(_BYTE *)(v1 + 61);
  v55 = *(_BYTE *)(v1 + 62);
  v56 = *(_BYTE *)(v1 + 63);
  v57 = *(_BYTE *)(v1 + 64);
  v11 = *(_QWORD *)(v1 + 72);
  v58 = *(_BYTE *)(v1 + 80);
  v59 = *(_BYTE *)(v1 + 81);
  v61 = *(_QWORD *)(v1 + 88);
  v60 = *(unsigned __int8 *)(v1 + 96);
  v63 = *(_QWORD *)(v1 + 104);
  v62 = *(unsigned __int8 *)(v1 + 112);
  v64 = *(_BYTE *)(v1 + 113);
  v65 = *(_BYTE *)(v1 + 114);
  v66 = *(_QWORD *)(v1 + 128);
  v68 = *(_QWORD *)(v1 + 136);
  v67 = *(unsigned __int8 *)(v1 + 144);
  v69 = *(_QWORD *)(v1 + 160);
  v12 = *(double *)(v1 + 168);
  v42 = *(unsigned __int8 *)(v1 + 176);
  v43 = *(_BYTE *)(v1 + 177);
  v44 = *(_BYTE *)(v1 + 178);
  v70 = *(_QWORD *)(v1 + 184);
  v71 = *(_QWORD *)(v1 + 192);
  v45 = *(_BYTE *)(v1 + 200);
  v46 = *(_BYTE *)(v1 + 201);
  v47 = *(_BYTE *)(v1 + 202);
  v48 = *(_QWORD *)(v1 + 208);
  v72 = *(_QWORD *)(v1 + 224);
  v49 = *(_BYTE *)(v1 + 232);
  v13 = *(char *)(v1 + 233);
  v14 = *(void **)(v1 + 240);
  v15 = *(_QWORD *)(v1 + 248);
  v50 = v13;
  v51 = v14;
  v16 = *a1;
  objc_msgSend(*a1, sel_setRequiresNetworkConnectivity_, v2 & 1);
  objc_msgSend(v16, sel_setRequiresExternalPower_, v3 & 1);
  objc_msgSend(v16, sel_setPriority_, qword_2402C0648[v4]);
  objc_msgSend(v16, sel_setRequiresProtectionClass_, qword_2402C06E0[v5]);
  objc_msgSend(v16, sel_setPreventsDeviceSleep_, v6 & 1);
  v17 = 0.0;
  if (!v8)
    v17 = v7;
  objc_msgSend(v16, sel_setRandomInitialDelay_, v17);
  objc_msgSend(v16, sel_setPostInstall_, v9 & 1);
  objc_msgSend(v16, sel_setRequiresInexpensiveNetworkConnectivity_, v10 & 1);
  objc_msgSend(v16, sel_setRequiresUnconstrainedNetworkConnectivity_, v52 & 1);
  objc_msgSend(v16, sel_setAppRefresh_, v53 & 1);
  objc_msgSend(v16, sel_setRequiresUserInactivity_, v54 & 1);
  objc_msgSend(v16, sel_setRequiresSignificantUserInactivity_, v55 & 1);
  objc_msgSend(v16, sel_setPowerNap_, v56 & 1);
  objc_msgSend(v16, sel_setResourceIntensive_, v57 & 1);
  if (v11)
  {
    v18 = *(_QWORD *)(v11 + 16);
    if (v18)
    {
      v19 = 0;
      v20 = (char *)(v11 + 32);
      do
      {
        v21 = *v20++;
        v22 = qword_2402C0670[v21];
        if ((v22 & v19) != 0)
          v22 = 0;
        v19 |= v22;
        --v18;
      }
      while (v18);
    }
    else
    {
      v19 = 0;
    }
    objc_msgSend(v16, sel_setResources_, v19);
  }
  objc_msgSend(v16, sel_setMayRebootDevice_, v58 & 1);
  objc_msgSend(v16, sel_setUserRequestedBackupTask_, v59 & 1);
  if (v60)
    v23 = 0;
  else
    v23 = v61;
  objc_msgSend(v16, sel_setNetworkDownloadSize_, v23);
  if (v62)
    v24 = 0;
  else
    v24 = v63;
  objc_msgSend(v16, sel_setNetworkUploadSize_, v24);
  objc_msgSend(v16, sel_setCommunicatesWithPairedDevice_, v64 & 1);
  objc_msgSend(v16, sel_setShouldWakeDevice_, v65 & 1);
  if (v66)
  {
    swift_bridgeObjectRetain();
    v25 = (void *)sub_2402BD63C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(v16, sel_setGroupName_, v25);

  if (v67)
    v26 = 1;
  else
    v26 = v68;
  if (v26 < 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(v16, sel_setGroupConcurrencyLimit_);
    if (v69)
    {
      swift_bridgeObjectRetain();
      v27 = (void *)sub_2402BD63C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v27 = 0;
    }
    objc_msgSend(v16, sel_setRateLimitConfigurationName_, v27);

    v28 = 0.0;
    if (!v42)
      v28 = v12;
    objc_msgSend(v16, sel_setExpectedDuration_, v28);
    objc_msgSend(v16, sel_setPowerBudgeted_, v43 & 1);
    objc_msgSend(v16, sel_setDataBudgeted_, v44 & 1);
    if (v70)
    {
      swift_bridgeObjectRetain();
      v29 = (void *)sub_2402BD798();
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = 0;
    }
    objc_msgSend(v16, sel_setRelatedApplications_, v29);

    if (v71)
    {
      swift_bridgeObjectRetain();
      v30 = (void *)sub_2402BD798();
      swift_bridgeObjectRelease();
    }
    else
    {
      v30 = 0;
    }
    objc_msgSend(v16, sel_setInvolvedProcesses_, v30);

    objc_msgSend(v16, sel_setRunOnAppForeground_, v45 & 1);
    objc_msgSend(v16, sel_setRequestsApplicationLaunch_, v46 & 1);
    objc_msgSend(v16, sel_setRequiresBuddyComplete_, v47 & 1);
    if (v48)
    {
      v31 = *(_QWORD *)(v48 + 16);
      if (v31)
      {
        v32 = 0;
        v33 = (unsigned __int8 *)(v48 + 32);
        do
        {
          v35 = *v33++;
          v34 = v35;
          if ((~(_DWORD)v32 & (v35 + 1)) != 0)
            v36 = v34 + 1;
          else
            v36 = 0;
          v32 |= v36;
          --v31;
        }
        while (v31);
      }
      else
      {
        v32 = 0;
      }
      objc_msgSend(v16, sel_setTargetDevice_, v32);
    }
    if (v72)
    {
      swift_bridgeObjectRetain();
      v37 = (void *)sub_2402BD63C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = 0;
    }
    objc_msgSend(v16, sel_setRemoteDevice_, v37);

    objc_msgSend(v16, sel_setRequiresRemoteDeviceWake_, v49 & 1);
    objc_msgSend(v16, sel_setRunOnMotionState_, qword_2402C0698[v50]);
    v38 = v51;
    if (v51)
    {
      v39 = swift_bridgeObjectRetain();
      sub_240248D40(v39);
      swift_bridgeObjectRelease();
      v38 = (void *)sub_2402BD8F4();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v16, sel_setProducedResultIdentifiers_, v38);

    if (v15)
    {
      v40 = swift_bridgeObjectRetain();
      v41 = sub_240248D40(v40);
      swift_bridgeObjectRelease();
      sub_240246D70(v41);
      swift_bridgeObjectRelease();
      v73 = (void *)sub_2402BD8F4();
      swift_bridgeObjectRelease();
    }
    else
    {
      v73 = 0;
    }
    objc_msgSend(v16, sel_setDependencies_, v73);

  }
}

uint64_t sub_240246D70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAB0);
    v2 = sub_2402BDA80();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B08];
  }
  v3 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(63 - v4) >> 6;
  v8 = v2 + 56;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_28;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v7)
      goto LABEL_37;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    v15 = v10 + 1;
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v7)
        goto LABEL_37;
      v14 = *(_QWORD *)(v3 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v7)
          goto LABEL_37;
        v14 = *(_QWORD *)(v3 + 8 * v15);
        if (!v14)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v7)
            goto LABEL_37;
          v14 = *(_QWORD *)(v3 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v10 = v15;
LABEL_28:
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    result = sub_2402BDA5C();
    v17 = -1 << *(_BYTE *)(v2 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6))) != 0)
    {
      v11 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v8 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v20 = 0;
      v21 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v21 && (v20 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v22 = v19 == v21;
        if (v19 == v21)
          v19 = 0;
        v20 |= v22;
        v23 = *(_QWORD *)(v8 + 8 * v19);
      }
      while (v23 == -1);
      v11 = __clz(__rbit64(~v23)) + (v19 << 6);
    }
    *(_QWORD *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    v12 = *(_QWORD *)(v2 + 48) + 40 * v11;
    *(_OWORD *)v12 = v24;
    *(_OWORD *)(v12 + 16) = v25;
    *(_QWORD *)(v12 + 32) = v26;
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v10 + 5;
  if (v10 + 5 >= v7)
  {
LABEL_37:
    swift_release();
    sub_240248E88();
    return v2;
  }
  v14 = *(_QWORD *)(v3 + 8 * v16);
  if (v14)
  {
    v15 = v10 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v7)
      goto LABEL_37;
    v14 = *(_QWORD *)(v3 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_240247060(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  v8 = sub_2402BDE34();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2402BDD8C() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2402BDD8C() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_240247D40(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_24024720C(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v8;
  _QWORD v10[9];

  v4 = *v2;
  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_24028A2E8((uint64_t)v10, a2);
  v5 = sub_2402BDE34() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10[0] = *v8;
  *v8 = 0x8000000000000000;
  sub_240247ED8(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_240247630()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA8);
  v3 = sub_2402BDA74();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_2402BDE04();
      sub_2402BD6A8();
      result = sub_2402BDE34();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_24024790C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA0);
  v3 = sub_2402BDA74();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v6 = ~(-1 << v4);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(v2 + 56);
  v8 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v7)
  {
    v9 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v8 > 1)
  {
    v10 = *(_QWORD *)(v2 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_19;
    v11 = 2;
    if (v8 > 2)
    {
      v10 = *(_QWORD *)(v2 + 72);
      if (v10)
        goto LABEL_19;
      v11 = 3;
      if (v8 > 3)
      {
        v10 = *(_QWORD *)(v2 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v8 > 4)
          {
            v10 = *(_QWORD *)(v2 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x240247D14);
              }
              if (v11 >= v8)
                break;
              v10 = v5[v11];
              ++v12;
              if (v10)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v9);
        sub_2402BDE04();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v14 = 1 << *(_BYTE *)(v2 + 32);
  if (v14 > 63)
    bzero((void *)(v2 + 56), ((unint64_t)(v14 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v5 = -1 << v14;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_240247D40(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_240247630();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_240248354();
      goto LABEL_22;
    }
    sub_240248694();
  }
  v11 = *v4;
  sub_2402BDE04();
  sub_2402BD6A8();
  result = sub_2402BDE34();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_2402BDD8C(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_2402BDDBC();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_2402BDD8C();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_240247ED8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  _BYTE v15[72];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_24024790C();
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_240248504();
        goto LABEL_10;
      }
      sub_240248940();
    }
    v8 = *v3;
    sub_2402BDE04();
    sub_24028A2E8((uint64_t)v15, v5);
    result = sub_2402BDE34();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x2402482E0);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

void *sub_240248354()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA8);
  v2 = *v0;
  v3 = sub_2402BDA68();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_240248504()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA0);
  v2 = *v0;
  v3 = sub_2402BDA68();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_240248694()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA8);
  v3 = sub_2402BDA74();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_2402BDE04();
    swift_bridgeObjectRetain();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_240248940()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAA0);
  v3 = sub_2402BDA74();
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v4 = 1 << *(_BYTE *)(v2 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v2 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v2 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v2 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v2 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x240248D14);
              }
              if (v10 >= v7)
                break;
              v9 = *(_QWORD *)(v2 + 56 + 8 * v10);
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v8);
        sub_2402BDE04();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
  v1 = v0;
LABEL_23:
  *v1 = v3;
  return result;
}

uint64_t sub_240248D40(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_2402BD900();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_240247060(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_240248DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_240248E44();
  result = sub_2402BD900();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_24024720C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

unint64_t sub_240248E44()
{
  unint64_t result;

  result = qword_256FDEA98;
  if (!qword_256FDEA98)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskStatus, &type metadata for TaskStatus);
    atomic_store(result, (unint64_t *)&qword_256FDEA98);
  }
  return result;
}

uint64_t sub_240248E88()
{
  return swift_release();
}

uint64_t sub_240248E90(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_240248EB8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_240248EE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC98);
  v2 = (_QWORD *)sub_2402BDB7C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_240258860(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_240248FF0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC90);
  v2 = (_QWORD *)sub_2402BDB7C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v8 = v4[1];
    v9 = v4[2];
    v10 = v4[3];
    v11 = v4[4];
    v12 = v4[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_2402587B4(v5, v6, v7, v8);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (uint64_t *)(v2[6] + 32 * result);
    *v15 = v5;
    v15[1] = v6;
    v15[2] = v7;
    v15[3] = v8;
    v16 = (uint64_t *)(v2[7] + 32 * result);
    *v16 = v9;
    v16[1] = v10;
    v16[2] = v11;
    v16[3] = v12;
    v17 = v2[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v4 += 8;
    v2[2] = v19;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_240249150(uint64_t a1)
{
  return sub_240249500(a1, &qword_256FDEC80, &qword_256FDEC88, &qword_256FDEC78);
}

unint64_t sub_24024916C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_254352738);
  v2 = (_QWORD *)sub_2402BDB7C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_240258860(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_240249284(uint64_t a1)
{
  return sub_2402493D0(a1, &qword_256FDEC68);
}

unint64_t sub_240249290(uint64_t a1)
{
  return sub_2402492A8(a1, &qword_256FDEC60);
}

unint64_t sub_24024929C(uint64_t a1)
{
  return sub_2402492A8(a1, &qword_256FDEC58);
}

unint64_t sub_2402492A8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_2402BDB7C();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_240258860(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v3[2] = v16;
    v5 += 4;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2402493C4(uint64_t a1)
{
  return sub_2402493D0(a1, &qword_256FDEC50);
}

unint64_t sub_2402493D0(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)sub_2402BDB7C();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_240258860(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2402494E4(uint64_t a1)
{
  return sub_240249500(a1, &qword_256FDEC40, &qword_256FDEC48, &qword_256FDEAE0);
}

unint64_t sub_240249500(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (_QWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = sub_2402BDB7C();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  v29[1] = a1;
  v30 = v14;
  v15 = v11 + 64;
  v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v17 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_2402391FC(v16, (uint64_t)v10, v31);
    v18 = *v10;
    v19 = v10[1];
    result = sub_240258860(*v10, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v12[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v12[7];
    v25 = __swift_instantiateConcreteTypeFromMangledName(a4);
    result = sub_240238F2C(v30, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_240249698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC30);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC38);
  v6 = sub_2402BDB7C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2402391FC(v12, (uint64_t)v5, &qword_256FDEC30);
    v14 = *v5;
    v15 = v5[1];
    result = sub_240258860(*v5, v15);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (uint64_t *)(v7[6] + 16 * result);
    *v19 = v14;
    v19[1] = v15;
    v20 = v7[7];
    v21 = type metadata accessor for MLHostAnalytics();
    result = sub_24023DBCC(v9, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    v22 = v7[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_240249838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)();
  void (*v44)(_QWORD *);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD v54[2];
  uint64_t v55;
  _QWORD v56[4];
  char v57[32];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC70);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v54 - v14;
  v16 = v4 + 32;
  swift_beginAccess();
  v17 = *(_QWORD *)(v4 + 32);
  if (!*(_QWORD *)(v17 + 16))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 1, 1, v30);
LABEL_7:
    v35 = (uint64_t)v15;
LABEL_15:
    sub_24024D8E0(v35);
    return 0;
  }
  swift_bridgeObjectRetain();
  v18 = sub_240258860(a1, a2);
  v54[1] = v5;
  v55 = v16;
  if ((v19 & 1) != 0)
  {
    v20 = v18;
    v54[0] = v13;
    v21 = a1;
    v22 = a4;
    v23 = *(_QWORD *)(v17 + 56);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
    v25 = a3;
    v26 = a2;
    v27 = *(_QWORD *)(v24 - 8);
    v28 = v23 + *(_QWORD *)(v27 + 72) * v20;
    a4 = v22;
    a1 = v21;
    v13 = (char *)v54[0];
    sub_2402391FC(v28, (uint64_t)v15, &qword_256FDEC78);
    v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
    a2 = v26;
    a3 = v25;
    v29(v15, 0, 1, v24);
  }
  else
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v15, 1, 1, v31);
  }
  swift_bridgeObjectRelease();
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v34(v15, 1, v32) == 1)
    goto LABEL_7;
  sub_24024D8E0((uint64_t)v15);
  v36 = *(_QWORD *)v55;
  if (!*(_QWORD *)(*(_QWORD *)v55 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v13, 1, 1, v32);
LABEL_14:
    v35 = (uint64_t)v13;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v37 = sub_240258860(a3, a4);
  if ((v38 & 1) != 0)
  {
    sub_2402391FC(*(_QWORD *)(v36 + 56) + *(_QWORD *)(v33 + 72) * v37, (uint64_t)v13, &qword_256FDEC78);
    v39 = 0;
  }
  else
  {
    v39 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v13, v39, 1, v32);
  swift_bridgeObjectRelease();
  if (v34(v13, 1, v32) == 1)
    goto LABEL_14;
  v41 = (uint64_t)v13;
  v42 = a3;
  sub_24024D8E0(v41);
  swift_bridgeObjectRetain();
  v43 = sub_24022EA40();
  v44 = sub_2402B87C4(v56, a1, a2);
  v45 = a1;
  v47 = v46;
  if (!v34(v46, 1, v32))
  {
    v55 = v45;
    v48 = *(int *)(v32 + 52);
    v49 = *(_QWORD **)&v47[v48];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v47[v48] = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v49 = sub_240258060(0, v49[2] + 1, 1, v49);
      *(_QWORD *)&v47[v48] = v49;
    }
    v52 = v49[2];
    v51 = v49[3];
    if (v52 >= v51 >> 1)
    {
      v49 = sub_240258060((_QWORD *)(v51 > 1), v52 + 1, 1, v49);
      *(_QWORD *)&v47[v48] = v49;
    }
    v49[2] = v52 + 1;
    v53 = &v49[4 * v52];
    v53[4] = v55;
    v53[5] = a2;
    v53[6] = v42;
    v53[7] = a4;
  }
  ((void (*)(_QWORD *, _QWORD))v44)(v56, 0);
  swift_bridgeObjectRelease();
  ((void (*)(char *, _QWORD))v43)(v57, 0);
  return 1;
}

uint64_t sub_240249BF4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_2402BD924();
  if (!v20)
    return sub_2402BD7EC();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_2402BD564();
  v34 = sub_2402BDB1C();
  sub_2402BDAF8();
  v37 = v8;
  result = sub_2402BD918();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_2402BD93C();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_2402BDB04();
      result = sub_2402BD930();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CustomEventAnalytics.stateCountMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CustomEventAnalytics.stateCountMap.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CustomEventAnalytics.stateCountMap.modify())()
{
  return nullsub_1;
}

uint64_t CustomEventAnalytics.transitionStatsMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CustomEventAnalytics.transitionStatsMap.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CustomEventAnalytics.transitionStatsMap.modify())()
{
  return nullsub_1;
}

uint64_t CustomEventAnalytics.firstValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 24), a1, &qword_256FDEAE0);
}

uint64_t type metadata accessor for CustomEventAnalytics()
{
  uint64_t result;

  result = qword_256FDEBC0;
  if (!qword_256FDEBC0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CustomEventAnalytics.firstValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 24), &qword_256FDEAE0);
}

uint64_t (*CustomEventAnalytics.firstValidState.modify())(_QWORD)
{
  type metadata accessor for CustomEventAnalytics();
  return nullsub_1;
}

uint64_t CustomEventAnalytics.latestValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 28), a1, &qword_256FDEAE0);
}

uint64_t CustomEventAnalytics.latestValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 28), &qword_256FDEAE0);
}

uint64_t (*CustomEventAnalytics.latestValidState.modify())(_QWORD)
{
  type metadata accessor for CustomEventAnalytics();
  return nullsub_1;
}

uint64_t CustomEventAnalytics.taskName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CustomEventAnalytics() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomEventAnalytics.taskName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for CustomEventAnalytics() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*CustomEventAnalytics.taskName.modify())(_QWORD)
{
  type metadata accessor for CustomEventAnalytics();
  return nullsub_1;
}

uint64_t CustomEventAnalytics.bucketStart.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 36), a1, &qword_2543521F0);
}

uint64_t CustomEventAnalytics.bucketStart.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 36), &qword_2543521F0);
}

uint64_t sub_24024A200(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*CustomEventAnalytics.bucketStart.modify())(_QWORD)
{
  type metadata accessor for CustomEventAnalytics();
  return nullsub_1;
}

uint64_t CustomEventAnalytics.bucketEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 40), a1, &qword_2543521F0);
}

uint64_t CustomEventAnalytics.bucketEnd.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CustomEventAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 40), &qword_2543521F0);
}

uint64_t (*CustomEventAnalytics.bucketEnd.modify())(_QWORD)
{
  type metadata accessor for CustomEventAnalytics();
  return nullsub_1;
}

uint64_t CustomEventAnalytics.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  a1[1] = sub_240248FF0(v2);
  v3 = (int *)type metadata accessor for CustomEventAnalytics();
  v4 = (char *)a1 + v3[6];
  v5 = type metadata accessor for LedgerState();
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6((char *)a1 + v3[7], 1, 1, v5);
  v7 = (unint64_t *)((char *)a1 + v3[8]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)a1 + v3[9];
  v9 = sub_2402BD48C();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v11)((char *)a1 + v3[10], 1, 1, v9);
}

uint64_t sub_24024A410(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24024A450 + 4 * byte_2402C0710[a1]))(0x756F436574617473, 0xED000070614D746ELL);
}

unint64_t sub_24024A450()
{
  return 0xD000000000000012;
}

uint64_t sub_24024A470()
{
  return 0x6C61567473726966;
}

unint64_t sub_24024A494()
{
  return 0xD000000000000010;
}

uint64_t sub_24024A4B0()
{
  return 0x656D614E6B736174;
}

uint64_t sub_24024A4C8()
{
  return 0x745374656B637562;
}

uint64_t sub_24024A4E8()
{
  return 0x6E4574656B637562;
}

uint64_t sub_24024A504()
{
  unsigned __int8 *v0;

  return sub_24024A410(*v0);
}

uint64_t sub_24024A50C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24024BB40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24024A530()
{
  sub_24024A890();
  return sub_2402BDE88();
}

uint64_t sub_24024A558()
{
  sub_24024A890();
  return sub_2402BDE94();
}

uint64_t CustomEventAnalytics.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24024A890();
  sub_2402BDE70();
  v12 = *v3;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
  sub_24024AEF4(&qword_256FDEB00, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1770], MEMORY[0x24BEE04C0]);
  sub_2402BDD2C();
  if (!v2)
  {
    v12 = v3[1];
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    sub_24024AF58(&qword_256FDEB10, (uint64_t (*)(void))sub_240232EEC, (uint64_t (*)(void))sub_24024A8D4, MEMORY[0x24BEE04C0]);
    sub_2402BDD2C();
    type metadata accessor for CustomEventAnalytics();
    LOBYTE(v12) = 2;
    type metadata accessor for LedgerState();
    sub_240232E34(&qword_256FDE3F8, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDCD8();
    LOBYTE(v12) = 3;
    sub_2402BDCD8();
    LOBYTE(v12) = 4;
    sub_2402BDC9C();
    LOBYTE(v12) = 5;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDCD8();
    LOBYTE(v12) = 6;
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24024A890()
{
  unint64_t result;

  result = qword_256FDEAF0;
  if (!qword_256FDEAF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C08E4, &type metadata for CustomEventAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEAF0);
  }
  return result;
}

unint64_t sub_24024A8D4()
{
  unint64_t result;

  result = qword_256FDEB18;
  if (!qword_256FDEB18)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransitionStatistics, &type metadata for LedgerTransitionStatistics);
    atomic_store(result, (unint64_t *)&qword_256FDEB18);
  }
  return result;
}

uint64_t CustomEventAnalytics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  char v60;
  unint64_t v61;

  v59 = a1;
  v45 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)&v40 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v40 - v9;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB20);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for CustomEventAnalytics();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (unint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BEE4AF8];
  v50 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  *v14 = v50;
  v49 = sub_240248FF0(v15);
  v14[1] = v49;
  v16 = (uint64_t)v14 + v12[6];
  v17 = type metadata accessor for LedgerState();
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  v48 = v16;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v47 = (uint64_t)v14 + v12[7];
  v18();
  v19 = (uint64_t *)((char *)v14 + v12[8]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t)v14 + v12[9];
  v21 = sub_2402BD48C();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v23 = v12[10];
  v58 = v14;
  v24 = (uint64_t)v14 + v23;
  v22((uint64_t)v14 + v23, 1, 1, v21);
  __swift_project_boxed_opaque_existential_1(v59, v59[3]);
  sub_24024A890();
  v55 = v11;
  v25 = v57;
  sub_2402BDE64();
  if (v25)
  {
    v39 = (uint64_t)v58;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  }
  else
  {
    v57 = v17;
    v43 = v21;
    v44 = v19;
    v26 = (uint64_t)v51;
    v41 = v24;
    v42 = v20;
    v27 = (uint64_t)v52;
    v28 = (uint64_t)v53;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
    v60 = 0;
    sub_24024AEF4(&qword_256FDEB28, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1798], MEMORY[0x24BEE04E0]);
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v30 = v58;
    *v58 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    v60 = 1;
    sub_24024AF58(&qword_256FDEB30, (uint64_t (*)(void))sub_240232EA8, (uint64_t (*)(void))sub_24024AFD4, MEMORY[0x24BEE04E0]);
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v30[1] = v61;
    LOBYTE(v61) = 2;
    sub_240232E34(&qword_256FDE3F0, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDC00();
    sub_24024A200(v26, v48, &qword_256FDEAE0);
    LOBYTE(v61) = 3;
    sub_2402BDC00();
    sub_24024A200(v27, v47, &qword_256FDEAE0);
    LOBYTE(v61) = 4;
    v31 = sub_2402BDBC4();
    v33 = v32;
    v34 = v44;
    swift_bridgeObjectRelease();
    *v34 = v31;
    v34[1] = v33;
    LOBYTE(v61) = 5;
    sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v35 = v55;
    sub_2402BDC00();
    sub_24024A200(v28, v42, &qword_2543521F0);
    LOBYTE(v61) = 6;
    v36 = (uint64_t)v46;
    v37 = v56;
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v37);
    v39 = (uint64_t)v58;
    v38 = v59;
    sub_24024A200(v36, v41, &qword_2543521F0);
    sub_240238BF0(v39, v45, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  return sub_240238C34(v39, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
}

uint64_t sub_24024AEF4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEAF8);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x2426820F8](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24024AF58(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEB08);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x2426820F8](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24024AFD4()
{
  unint64_t result;

  result = qword_256FDEB38;
  if (!qword_256FDEB38)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LedgerTransitionStatistics, &type metadata for LedgerTransitionStatistics);
    atomic_store(result, (unint64_t *)&qword_256FDEB38);
  }
  return result;
}

uint64_t sub_24024B018()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24024B020(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*sub_24024B048())()
{
  return nullsub_1;
}

uint64_t sub_24024B058()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_24024B060(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_24024B088())()
{
  return nullsub_1;
}

uint64_t sub_24024B098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2402391FC(v2 + *(int *)(a1 + 24), a2, &qword_256FDEAE0);
}

uint64_t sub_24024B0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24024A200(a1, v2 + *(int *)(a2 + 24), &qword_256FDEAE0);
}

uint64_t (*sub_24024B0E4())()
{
  return nullsub_1;
}

uint64_t sub_24024B0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2402391FC(v2 + *(int *)(a1 + 28), a2, &qword_256FDEAE0);
}

uint64_t sub_24024B120(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24024A200(a1, v2 + *(int *)(a2 + 28), &qword_256FDEAE0);
}

uint64_t (*sub_24024B144())()
{
  return nullsub_1;
}

uint64_t sub_24024B158@<X0>(int *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  a2[1] = sub_240248FF0(v4);
  v5 = (char *)a2 + a1[6];
  v6 = type metadata accessor for LedgerState();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7((char *)a2 + a1[7], 1, 1, v6);
  v8 = a1[9];
  v9 = (unint64_t *)((char *)a2 + a1[8]);
  *v9 = 0;
  v9[1] = 0;
  v10 = (char *)a2 + v8;
  v11 = sub_2402BD48C();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v13(v10, 1, 1, v11);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v13)((char *)a2 + a1[10], 1, 1, v11);
}

uint64_t sub_24024B254@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomEventAnalytics.init(from:)(a1, a2);
}

uint64_t sub_24024B268(_QWORD *a1)
{
  return CustomEventAnalytics.encode(to:)(a1);
}

_QWORD *getCustomStateMachine<A>(states:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (**v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t AssociatedTypeWitness;
  uint64_t v54;
  uint64_t v55;
  void (**v56)(char *, uint64_t);
  char *v57;
  unsigned int (*AssociatedConformanceWitness)(char *, uint64_t, uint64_t);
  char v59[16];
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v54 = a3;
  v48 = a1;
  v41 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v41 - v8;
  v9 = sub_2402BD9E4();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v50 = (char *)&v41 - v13;
  v47 = *(_QWORD *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = (unsigned int (*)(char *, uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  v46 = *((_QWORD *)AssociatedConformanceWitness + 1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v57 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v49 = (char *)&v41 - v16;
  v17 = swift_checkMetadataState();
  v56 = *(void (***)(char *, uint64_t))(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v41 - v18;
  v67 = 0x72476D6F74737543;
  v68 = 0xEB00000000687061;
  v65 = a2;
  swift_getMetatypeMetadata();
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  v55 = v67;
  v52 = (_QWORD *)v68;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB40);
  v20 = (_QWORD *)swift_allocObject();
  v21 = MEMORY[0x24BEE4AF8];
  v20[4] = sub_240249500(MEMORY[0x24BEE4AF8], &qword_256FDEC80, &qword_256FDEC88, &qword_256FDEC78);
  v22 = (uint64_t)v52;
  v20[2] = v55;
  v20[3] = v22;
  v23 = sub_240249500(v21, &qword_256FDEC80, &qword_256FDEC88, &qword_256FDEC78);
  swift_beginAccess();
  v20[4] = v23;
  swift_bridgeObjectRelease();
  sub_2402BDAB0();
  v60 = a2;
  v61 = v54;
  v52 = v20;
  v62 = v20;
  sub_240249BF4((void (*)(char *, char *))sub_24024BB20, (uint64_t)v59, v17, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], (uint64_t)AssociatedConformanceWitness, MEMORY[0x24BEE40A8], v24);
  swift_bridgeObjectRelease();
  v25 = v41;
  v56[1](v19, v17);
  v26 = v50;
  sub_2402BDAB0();
  v43 = v19;
  sub_2402BD72C();
  v44 = v17;
  v27 = swift_getAssociatedConformanceWitness();
  sub_2402BD9F0();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  if (v28(v26, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v49, AssociatedTypeWitness);
  }
  else
  {
    v29 = *(void (***)(char *, uint64_t))(v25 + 32);
    v55 = v27;
    v56 = v29;
    v30 = v51;
    v31 = AssociatedTypeWitness;
    AssociatedConformanceWitness = v28;
    ((void (*)(char *, char *, uint64_t))v29)(v51, v50, a2);
    while (1)
    {
      sub_2402BDAB0();
      sub_2402BD72C();
      while (1)
      {
        sub_2402BD9F0();
        if (AssociatedConformanceWitness(v12, 1, a2) == 1)
          break;
        ((void (*)(char *, char *, uint64_t))v56)(v7, v12, a2);
        if ((sub_2402BDD98() & 1) == 0)
        {
          sub_2402BD750();
          v63 = v65;
          v64 = v66;
          v33 = sub_2402BD714();
          v34 = v25;
          v36 = v35;
          sub_2402BD750();
          v63 = v65;
          v64 = v66;
          v37 = sub_2402BD714();
          v31 = AssociatedTypeWitness;
          sub_240249838(v33, v36, v37, v38);
          v25 = v34;
          v30 = v51;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v7, a2);
      }
      v42 = *(void (**)(char *, uint64_t))(v45 + 8);
      v42(v57, v31);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v30, a2);
      v32 = v50;
      sub_2402BD9F0();
      if (AssociatedConformanceWitness(v32, 1, a2) == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v56)(v30, v50, a2);
    }
    v42(v49, AssociatedTypeWitness);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB48);
  swift_allocObject();
  v39 = sub_24024D530((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
  swift_release();
  return v39;
}

uint64_t sub_24024B96C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC70);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LedgerState();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_QWORD *)((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_2402BD750();
  v11[4] = v11[1];
  v11[5] = v11[2];
  v6 = sub_2402BD714();
  v8 = v7;
  sub_2402BD414();
  *v5 = v6;
  v5[1] = v8;
  sub_240238BF0((uint64_t)v5, (uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  *(_QWORD *)&v2[*(int *)(v9 + 52)] = MEMORY[0x24BEE4AF8];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v2, 0, 1, v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_2402B8670((uint64_t)v2, v6, v8);
  swift_endAccess();
  return sub_240238C34((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
}

uint64_t sub_24024BB20()
{
  return sub_24024B96C();
}

uint64_t sub_24024BB40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756F436574617473 && a2 == 0xED000070614D746ELL;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402C9560 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C61567473726966 && a2 == 0xEF65746174536469 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9580 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x745374656B637562 && a2 == 0xEB00000000747261 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E4574656B637562 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

_QWORD *sub_24024BE80(uint64_t a1)
{
  return sub_24024D530(a1, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
}

uint64_t sub_24024BE8C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_240232E34(&qword_256FDEB50, (uint64_t (*)(uint64_t))type metadata accessor for CustomEventAnalytics, (uint64_t)&protocol conformance descriptor for CustomEventAnalytics);
  a1[2] = sub_240232E34(&qword_256FDEB58, (uint64_t (*)(uint64_t))type metadata accessor for CustomEventAnalytics, (uint64_t)&protocol conformance descriptor for CustomEventAnalytics);
  result = sub_240232E34(&qword_256FDEB60, (uint64_t (*)(uint64_t))type metadata accessor for CustomEventAnalytics, (uint64_t)&protocol conformance descriptor for CustomEventAnalytics);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomEventAnalytics(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v47;
  char *v48;
  char *v49;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = a3[6];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for LedgerState();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = *(int *)(v11 + 20);
      v47 = (char *)v10 + v16;
      v48 = (char *)v9 + v16;
      v17 = v12;
      v18 = sub_2402BD48C();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v20 = v18;
      v12 = v17;
      v19(v48, v47, v20);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v11);
    }
    v21 = a3[7];
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    if (v13((uint64_t *)((char *)a2 + v21), 1, v11))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = v23[1];
      *v22 = *v23;
      v22[1] = v25;
      v26 = *(int *)(v11 + 20);
      v27 = (char *)v22 + v26;
      v49 = (char *)v23 + v26;
      v28 = v12;
      v29 = sub_2402BD48C();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v49, v29);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v22, 0, 1, v11);
    }
    v31 = a3[8];
    v32 = a3[9];
    v33 = (uint64_t *)((char *)v7 + v31);
    v34 = (uint64_t *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v36 = (char *)v7 + v32;
    v37 = (char *)a2 + v32;
    v38 = sub_2402BD48C();
    v39 = *(_QWORD *)(v38 - 8);
    v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain();
    if (v40(v37, 1, v38))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v42 = a3[10];
    v43 = (char *)v7 + v42;
    v44 = (char *)a2 + v42;
    if (v40(v44, 1, v38))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v43, v44, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v43, 0, 1, v38);
    }
  }
  return v7;
}

uint64_t destroy for CustomEventAnalytics(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for LedgerState();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 20);
    v8 = sub_2402BD48C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + a2[7];
  if (!v6(v9, 1, v5))
  {
    swift_bridgeObjectRelease();
    v10 = v9 + *(int *)(v5 + 20);
    v11 = sub_2402BD48C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  v12 = a1 + a2[9];
  v13 = sub_2402BD48C();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v15(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v16 = a1 + a2[10];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v16, 1, v13);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v16, v13);
  return result;
}

_QWORD *initializeWithCopy for CustomEventAnalytics(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v46;
  char *v47;
  char *v48;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for LedgerState();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = *(int *)(v10 + 20);
    v46 = (char *)v9 + v15;
    v47 = (char *)v8 + v15;
    v16 = v11;
    v17 = sub_2402BD48C();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v19 = v17;
    v11 = v16;
    v18(v47, v46, v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v10);
  }
  v20 = a3[7];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  if (v12((_QWORD *)((char *)a2 + v20), 1, v10))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v22[1];
    *v21 = *v22;
    v21[1] = v24;
    v25 = *(int *)(v10 + 20);
    v26 = (char *)v21 + v25;
    v48 = (char *)v22 + v25;
    v27 = v11;
    v28 = sub_2402BD48C();
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain();
    v29(v26, v48, v28);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v10);
  }
  v30 = a3[8];
  v31 = a3[9];
  v32 = (_QWORD *)((char *)a1 + v30);
  v33 = (_QWORD *)((char *)a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (char *)a1 + v31;
  v36 = (char *)a2 + v31;
  v37 = sub_2402BD48C();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  swift_bridgeObjectRetain();
  if (v39(v36, 1, v37))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v41 = a3[10];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  if (v39(v43, 1, v37))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v42, v43, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v37);
  }
  return a1;
}

char *assignWithCopy for CustomEventAnalytics(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_QWORD *)v7 = *(_QWORD *)v8;
      *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
      v14 = *(int *)(v9 + 20);
      v59 = v10;
      v15 = &v7[v14];
      v58 = &v8[v14];
      v16 = sub_2402BD48C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v18 = v15;
      v10 = v59;
      v17(v18, v58, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_240238C34((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v50 = *(int *)(v9 + 20);
  v51 = &v7[v50];
  v52 = &v8[v50];
  v53 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
LABEL_7:
  v20 = a3[7];
  v21 = &a1[v20];
  v22 = (char *)a2 + v20;
  v23 = v11(&a1[v20], 1, v9);
  v24 = v11(v22, 1, v9);
  if (v23)
  {
    if (!v24)
    {
      *(_QWORD *)v21 = *(_QWORD *)v22;
      *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
      v25 = *(int *)(v9 + 20);
      v60 = v10;
      v26 = &v21[v25];
      v27 = &v22[v25];
      v28 = sub_2402BD48C();
      v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      swift_bridgeObjectRetain();
      v29(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v21, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    sub_240238C34((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *((_QWORD *)v21 + 1) = *((_QWORD *)v22 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = *(int *)(v9 + 20);
  v55 = &v21[v54];
  v56 = &v22[v54];
  v57 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
LABEL_13:
  v31 = a3[8];
  v32 = &a1[v31];
  v33 = (_QWORD *)((char *)a2 + v31);
  *(_QWORD *)v32 = *v33;
  *((_QWORD *)v32 + 1) = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v34 = a3[9];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = sub_2402BD48C();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_18:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v35, v36, v37);
LABEL_19:
  v43 = a3[10];
  v44 = &a1[v43];
  v45 = (char *)a2 + v43;
  v46 = v39(&a1[v43], 1, v37);
  v47 = v39(v45, 1, v37);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 24))(v44, v45, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v37);
    goto LABEL_24;
  }
  if (v47)
  {
LABEL_24:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v44, v45, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v44, 0, 1, v37);
  return a1;
}

_OWORD *initializeWithTake for CustomEventAnalytics(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v13 = *(int *)(v9 + 20);
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = a3[7];
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  if (v11((_OWORD *)((char *)a2 + v17), 1, v9))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v21 = *(int *)(v9 + 20);
    v22 = (char *)v18 + v21;
    v23 = (char *)v19 + v21;
    v24 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  v25 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = sub_2402BD48C();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v27, 1, v28))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  v32 = a3[10];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  if (v30(v34, 1, v28))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v34, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
  }
  return a1;
}

char *assignWithTake for CustomEventAnalytics(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v14 = *(int *)(v9 + 20);
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_240238C34((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v50 = *((_QWORD *)v8 + 1);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *((_QWORD *)v7 + 1) = v50;
  swift_bridgeObjectRelease();
  v51 = *(int *)(v9 + 20);
  v52 = &v7[v51];
  v53 = &v8[v51];
  v54 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 40))(v52, v53, v54);
LABEL_7:
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = (char *)a2 + v19;
  v22 = v11(&a1[v19], 1, v9);
  v23 = v11(v21, 1, v9);
  if (v22)
  {
    if (!v23)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
      v24 = *(int *)(v9 + 20);
      v25 = &v20[v24];
      v26 = &v21[v24];
      v27 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    sub_240238C34((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  v55 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v55;
  swift_bridgeObjectRelease();
  v56 = *(int *)(v9 + 20);
  v57 = &v20[v56];
  v58 = &v21[v56];
  v59 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 40))(v57, v58, v59);
LABEL_13:
  v29 = a3[8];
  v30 = &a1[v29];
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease();
  v34 = a3[9];
  v35 = &a1[v34];
  v36 = (char *)a2 + v34;
  v37 = sub_2402BD48C();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
LABEL_18:
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v35, v36, v37);
LABEL_19:
  v43 = a3[10];
  v44 = &a1[v43];
  v45 = (char *)a2 + v43;
  v46 = v39(&a1[v43], 1, v37);
  v47 = v39(v45, 1, v37);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 40))(v44, v45, v37);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v37);
    goto LABEL_24;
  }
  if (v47)
  {
LABEL_24:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v44, v45, v37);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v44, 0, 1, v37);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomEventAnalytics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24024D168(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CustomEventAnalytics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24024D21C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_24024D2C0()
{
  unint64_t v0;
  unint64_t v1;

  sub_24023F568(319, (unint64_t *)&qword_256FDEBD0, (void (*)(uint64_t))type metadata accessor for LedgerState);
  if (v0 <= 0x3F)
  {
    sub_24023F568(319, qword_254352250, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for CustomEventAnalytics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24024D3CC + 4 * byte_2402C071C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24024D400 + 4 * byte_2402C0717[v4]))();
}

uint64_t sub_24024D400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24024D408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24024D410);
  return result;
}

uint64_t sub_24024D41C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24024D424);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24024D428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24024D430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomEventAnalytics.CodingKeys()
{
  return &type metadata for CustomEventAnalytics.CodingKeys;
}

unint64_t sub_24024D450()
{
  unint64_t result;

  result = qword_256FDEC18;
  if (!qword_256FDEC18)
  {
    result = MEMORY[0x2426820F8](&unk_2402C08BC, &type metadata for CustomEventAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEC18);
  }
  return result;
}

unint64_t sub_24024D498()
{
  unint64_t result;

  result = qword_256FDEC20;
  if (!qword_256FDEC20)
  {
    result = MEMORY[0x2426820F8](&unk_2402C082C, &type metadata for CustomEventAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEC20);
  }
  return result;
}

unint64_t sub_24024D4E0()
{
  unint64_t result;

  result = qword_256FDEC28;
  if (!qword_256FDEC28)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0854, &type metadata for CustomEventAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDEC28);
  }
  return result;
}

_QWORD *sub_24024D524(uint64_t a1)
{
  return sub_24024D530(a1, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
}

_QWORD *sub_24024D530(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  _QWORD *v2;
  int *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v20)(_QWORD);

  v20 = a2;
  v4 = (int *)a2(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (unint64_t *)((char *)&v20 - v5);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (char *)v2 + qword_256FE1408;
  v11 = type metadata accessor for LedgerState();
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v2[2] = a1;
  v12(v9, 1, 1, v11);
  v13 = (uint64_t)v2 + qword_256FE1408;
  swift_beginAccess();
  swift_retain();
  sub_24024A200((uint64_t)v9, v13, &qword_256FDEAE0);
  swift_endAccess();
  v14 = MEMORY[0x24BEE4AF8];
  *v6 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  v6[1] = sub_240248FF0(v14);
  v12((char *)v6 + v4[6], 1, 1, v11);
  v12((char *)v6 + v4[7], 1, 1, v11);
  v15 = (unint64_t *)((char *)v6 + v4[8]);
  *v15 = 0;
  v15[1] = 0;
  v16 = (char *)v6 + v4[9];
  v17 = sub_2402BD48C();
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v18((char *)v6 + v4[10], 1, 1, v17);
  sub_24023DBCC((uint64_t)v6, (uint64_t)v2 + *(_QWORD *)(*v2 + 112), v20);
  return v2;
}

_QWORD *sub_24024D730(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = type metadata accessor for MLHostAnalytics();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (unint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (char *)v1 + qword_256FE1408;
  v10 = type metadata accessor for LedgerState();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v1[2] = a1;
  v11(v8, 1, 1, v10);
  v12 = (uint64_t)v1 + qword_256FE1408;
  swift_beginAccess();
  swift_retain();
  sub_24024A200((uint64_t)v8, v12, &qword_256FDEAE0);
  swift_endAccess();
  v13 = MEMORY[0x24BEE4AF8];
  *v5 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  v5[1] = sub_240248FF0(v13);
  v11((char *)v5 + *(int *)(v3 + 24), 1, 1, v10);
  v11((char *)v5 + *(int *)(v3 + 28), 1, 1, v10);
  sub_24023DBCC((uint64_t)v5, (uint64_t)v1 + *(_QWORD *)(*v1 + 112), (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
  return v1;
}

uint64_t sub_24024D8E0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DediscoAnalytics.stateCountMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DediscoAnalytics.stateCountMap.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*DediscoAnalytics.stateCountMap.modify())()
{
  return nullsub_1;
}

uint64_t DediscoAnalytics.transitionStatsMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DediscoAnalytics.transitionStatsMap.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*DediscoAnalytics.transitionStatsMap.modify())()
{
  return nullsub_1;
}

uint64_t DediscoAnalytics.firstValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 24), a1, &qword_256FDEAE0);
}

uint64_t type metadata accessor for DediscoAnalytics()
{
  uint64_t result;

  result = qword_256FDED30;
  if (!qword_256FDED30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DediscoAnalytics.firstValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 24), &qword_256FDEAE0);
}

uint64_t (*DediscoAnalytics.firstValidState.modify())(_QWORD)
{
  type metadata accessor for DediscoAnalytics();
  return nullsub_1;
}

uint64_t DediscoAnalytics.latestValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 28), a1, &qword_256FDEAE0);
}

uint64_t DediscoAnalytics.latestValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 28), &qword_256FDEAE0);
}

uint64_t (*DediscoAnalytics.latestValidState.modify())(_QWORD)
{
  type metadata accessor for DediscoAnalytics();
  return nullsub_1;
}

uint64_t DediscoAnalytics.taskName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for DediscoAnalytics() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DediscoAnalytics.taskName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for DediscoAnalytics() + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*DediscoAnalytics.taskName.modify())(_QWORD)
{
  type metadata accessor for DediscoAnalytics();
  return nullsub_1;
}

uint64_t DediscoAnalytics.bucketStart.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 36), a1, &qword_2543521F0);
}

uint64_t DediscoAnalytics.bucketStart.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 36), &qword_2543521F0);
}

uint64_t (*DediscoAnalytics.bucketStart.modify())(_QWORD)
{
  type metadata accessor for DediscoAnalytics();
  return nullsub_1;
}

uint64_t DediscoAnalytics.bucketEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_2402391FC(v1 + *(int *)(v3 + 40), a1, &qword_2543521F0);
}

uint64_t DediscoAnalytics.bucketEnd.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DediscoAnalytics();
  return sub_24024A200(a1, v1 + *(int *)(v3 + 40), &qword_2543521F0);
}

uint64_t (*DediscoAnalytics.bucketEnd.modify())(_QWORD)
{
  type metadata accessor for DediscoAnalytics();
  return nullsub_1;
}

uint64_t DediscoAnalytics.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  int *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  a1[1] = sub_240248FF0(v2);
  v3 = (int *)type metadata accessor for DediscoAnalytics();
  v4 = (char *)a1 + v3[6];
  v5 = type metadata accessor for LedgerState();
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6((char *)a1 + v3[7], 1, 1, v5);
  v7 = (unint64_t *)((char *)a1 + v3[8]);
  *v7 = 0;
  v7[1] = 0;
  v8 = (char *)a1 + v3[9];
  v9 = sub_2402BD48C();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v11(v8, 1, 1, v9);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v11)((char *)a1 + v3[10], 1, 1, v9);
}

uint64_t sub_24024DE08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24024DE48 + 4 * byte_2402C0940[a1]))(0x756F436574617473, 0xED000070614D746ELL);
}

unint64_t sub_24024DE48()
{
  return 0xD000000000000012;
}

uint64_t sub_24024DE68()
{
  return 0x6C61567473726966;
}

unint64_t sub_24024DE8C()
{
  return 0xD000000000000010;
}

uint64_t sub_24024DEA8()
{
  return 0x656D614E6B736174;
}

uint64_t sub_24024DEC0()
{
  return 0x745374656B637562;
}

uint64_t sub_24024DEE0()
{
  return 0x6E4574656B637562;
}

uint64_t sub_24024DEFC()
{
  unsigned __int8 *v0;

  return sub_24024DE08(*v0);
}

uint64_t sub_24024DF04()
{
  sub_24024E264();
  return sub_2402BDE88();
}

uint64_t sub_24024DF2C()
{
  sub_24024E264();
  return sub_2402BDE94();
}

uint64_t DediscoAnalytics.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDECA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24024E264();
  sub_2402BDE70();
  v12 = *v3;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
  sub_24024AEF4(&qword_256FDEB00, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1770], MEMORY[0x24BEE04C0]);
  sub_2402BDD2C();
  if (!v2)
  {
    v12 = v3[1];
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    sub_24024AF58(&qword_256FDEB10, (uint64_t (*)(void))sub_240232EEC, (uint64_t (*)(void))sub_24024A8D4, MEMORY[0x24BEE04C0]);
    sub_2402BDD2C();
    type metadata accessor for DediscoAnalytics();
    LOBYTE(v12) = 2;
    type metadata accessor for LedgerState();
    sub_240232E34(&qword_256FDE3F8, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDCD8();
    LOBYTE(v12) = 3;
    sub_2402BDCD8();
    LOBYTE(v12) = 4;
    sub_2402BDC9C();
    LOBYTE(v12) = 5;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDCD8();
    LOBYTE(v12) = 6;
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_24024E264()
{
  unint64_t result;

  result = qword_256FDECA8;
  if (!qword_256FDECA8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0B54, &type metadata for DediscoAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDECA8);
  }
  return result;
}

uint64_t DediscoAnalytics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(void);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  _QWORD *v59;
  char v60;
  unint64_t v61;

  v59 = a1;
  v45 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v53 = (char *)&v40 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v40 - v9;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDECB0);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for DediscoAnalytics();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (unint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BEE4AF8];
  v50 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  *v14 = v50;
  v49 = sub_240248FF0(v15);
  v14[1] = v49;
  v16 = (uint64_t)v14 + v12[6];
  v17 = type metadata accessor for LedgerState();
  v18 = *(void (**)(void))(*(_QWORD *)(v17 - 8) + 56);
  v48 = v16;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v16, 1, 1, v17);
  v47 = (uint64_t)v14 + v12[7];
  v18();
  v19 = (uint64_t *)((char *)v14 + v12[8]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t)v14 + v12[9];
  v21 = sub_2402BD48C();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v23 = v12[10];
  v58 = v14;
  v24 = (uint64_t)v14 + v23;
  v22((uint64_t)v14 + v23, 1, 1, v21);
  __swift_project_boxed_opaque_existential_1(v59, v59[3]);
  sub_24024E264();
  v55 = v11;
  v25 = v57;
  sub_2402BDE64();
  if (v25)
  {
    v39 = (uint64_t)v58;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  }
  else
  {
    v57 = v17;
    v43 = v21;
    v44 = v19;
    v26 = (uint64_t)v51;
    v41 = v24;
    v42 = v20;
    v27 = (uint64_t)v52;
    v28 = (uint64_t)v53;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
    v60 = 0;
    sub_24024AEF4(&qword_256FDEB28, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1798], MEMORY[0x24BEE04E0]);
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v30 = v58;
    *v58 = v61;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    v60 = 1;
    sub_24024AF58(&qword_256FDEB30, (uint64_t (*)(void))sub_240232EA8, (uint64_t (*)(void))sub_24024AFD4, MEMORY[0x24BEE04E0]);
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v30[1] = v61;
    LOBYTE(v61) = 2;
    sub_240232E34(&qword_256FDE3F0, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDC00();
    sub_24024A200(v26, v48, &qword_256FDEAE0);
    LOBYTE(v61) = 3;
    sub_2402BDC00();
    sub_24024A200(v27, v47, &qword_256FDEAE0);
    LOBYTE(v61) = 4;
    v31 = sub_2402BDBC4();
    v33 = v32;
    v34 = v44;
    swift_bridgeObjectRelease();
    *v34 = v31;
    v34[1] = v33;
    LOBYTE(v61) = 5;
    sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v35 = v55;
    sub_2402BDC00();
    sub_24024A200(v28, v42, &qword_2543521F0);
    LOBYTE(v61) = 6;
    v36 = (uint64_t)v46;
    v37 = v56;
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v37);
    v39 = (uint64_t)v58;
    v38 = v59;
    sub_24024A200(v36, v41, &qword_2543521F0);
    sub_240238BF0(v39, v45, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  return sub_240238C34(v39, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
}

uint64_t sub_24024E884@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DediscoAnalytics.init(from:)(a1, a2);
}

uint64_t sub_24024E898(_QWORD *a1)
{
  return DediscoAnalytics.encode(to:)(a1);
}

uint64_t sub_24024E8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int isUniquelyReferenced_nonNull_native;
  unint64_t *v51;
  int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)();
  void (*v99)(_QWORD *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  char *v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[4];
  unint64_t v130;
  unint64_t v131;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC70);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v120 = (uint64_t)&v111 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v117 = (char *)&v111 - v3;
  v127 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  v125 = *(_QWORD *)(v127 - 8);
  v4 = MEMORY[0x24BDAC7A8](v127);
  v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v118 = (uint64_t)&v111 - v6;
  v7 = type metadata accessor for LedgerState();
  v121 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v8);
  v119 = (uint64_t *)((char *)&v111 - v12);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (unint64_t *)((char *)&v111 - v14);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (unint64_t *)((char *)&v111 - v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB40);
  v18 = swift_allocObject();
  v19 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v18 + 32) = sub_240249150(MEMORY[0x24BEE4AF8]);
  v20 = (unint64_t *)(v18 + 32);
  strcpy((char *)(v18 + 16), "DediscoGraph");
  *(_BYTE *)(v18 + 29) = 0;
  *(_WORD *)(v18 + 30) = -5120;
  v113 = v18;
  v21 = sub_240249150(v19);
  swift_beginAccess();
  v126 = v20;
  *v20 = v21;
  swift_bridgeObjectRelease();
  v22 = 0;
  v116 = (uint64_t)"latestValidState";
  do
  {
    v23 = v19;
    v24 = *(_DWORD *)((char *)&unk_25108B0A0 + v22 + 32);
    v25 = 0x6843746567647562;
    v26 = 0xEB000000006B6365;
    switch(v24)
    {
      case 0:
        v26 = 0xE700000000000000;
        v25 = 0x6E776F6E6B6E75;
        break;
      case 1:
        v26 = v116 | 0x8000000000000000;
        v25 = 0xD000000000000010;
        break;
      case 2:
        v25 = 0x7A696D6F646E6172;
        v26 = 0xED00006E6F697461;
        break;
      case 3:
        break;
      case 4:
        v25 = 0x4364616F6C796170;
        v26 = 0xEF6E6F6974616572;
        break;
      case 5:
        v26 = 0xE600000000000000;
        v25 = 0x64616F6C7075;
        break;
      default:
        v26 = 0xE700000000000000;
        v25 = 0x746C7561666564;
        break;
    }
    v130 = v25;
    v131 = v26;
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    v27 = v130;
    v28 = v131;
    sub_2402BD414();
    *v17 = v27;
    v17[1] = v28;
    v29 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = sub_24025816C(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    v31 = *(_QWORD *)(v29 + 16);
    v30 = *(_QWORD *)(v29 + 24);
    if (v31 >= v30 >> 1)
      v29 = sub_24025816C(v30 > 1, v31 + 1, 1, v29);
    *(_QWORD *)(v29 + 16) = v31 + 1;
    v32 = v29;
    v124 = (char *)((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    v128 = *(_QWORD *)(v121 + 72);
    sub_24024FABC((uint64_t)v17, (uint64_t)&v124[v29 + v128 * v31]);
    v33 = 0x6843746567647562;
    v34 = 0xEB000000006B6365;
    switch(v24)
    {
      case 0:
        v34 = 0xE700000000000000;
        v33 = 0x6E776F6E6B6E75;
        break;
      case 1:
        v34 = v116 | 0x8000000000000000;
        v33 = 0xD000000000000010;
        break;
      case 2:
        v33 = 0x7A696D6F646E6172;
        v34 = 0xED00006E6F697461;
        break;
      case 3:
        break;
      case 4:
        v33 = 0x4364616F6C796170;
        v34 = 0xEF6E6F6974616572;
        break;
      case 5:
        v34 = 0xE600000000000000;
        v33 = 0x64616F6C7075;
        break;
      default:
        v34 = 0xE700000000000000;
        v33 = 0x746C7561666564;
        break;
    }
    v130 = v33;
    v131 = v34;
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    v35 = v130;
    v36 = v131;
    sub_2402BD414();
    *v15 = v35;
    v15[1] = v36;
    v19 = v32;
    v38 = *(_QWORD *)(v32 + 16);
    v37 = *(_QWORD *)(v32 + 24);
    if (v38 >= v37 >> 1)
      v19 = sub_24025816C(v37 > 1, v38 + 1, 1, v32);
    v39 = v124;
    *(_QWORD *)(v19 + 16) = v38 + 1;
    sub_24024FABC((uint64_t)v15, (uint64_t)&v39[v19 + v38 * v128]);
    v22 += 4;
  }
  while (v22 != 24);
  v115 = &v39[v19];
  v40 = *(_QWORD *)(v19 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain();
    v116 = v19;
    v41 = (uint64_t)&v39[v19];
    v42 = v126;
    v43 = v119;
    do
    {
      sub_240238BF0(v41, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v46 = *v43;
      v47 = v43[1];
      v48 = (uint64_t)v43;
      v49 = v118;
      sub_240238BF0(v48, v118, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      *(_QWORD *)(v49 + *(int *)(v127 + 52)) = MEMORY[0x24BEE4AF8];
      swift_beginAccess();
      sub_24024FB00(v49, (uint64_t)v123);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = v42;
      v52 = isUniquelyReferenced_nonNull_native;
      v129[0] = *v51;
      v53 = v129[0];
      *v51 = 0x8000000000000000;
      v55 = sub_240258860(v46, v47);
      v56 = *(_QWORD *)(v53 + 16);
      v57 = (v54 & 1) == 0;
      v58 = v56 + v57;
      if (__OFADD__(v56, v57))
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        sub_2402BDDC8();
        __break(1u);
        JUMPOUT(0x24024F504);
      }
      v59 = v54;
      if (*(_QWORD *)(v53 + 24) >= v58)
      {
        if ((v52 & 1) == 0)
          sub_24025A904();
      }
      else
      {
        sub_240258AA0(v58, v52);
        v60 = sub_240258860(v46, v47);
        if ((v59 & 1) != (v61 & 1))
          goto LABEL_74;
        v55 = v60;
      }
      v62 = v125;
      v42 = v126;
      v63 = (_QWORD *)v129[0];
      if ((v59 & 1) != 0)
      {
        v44 = *(_QWORD *)(v129[0] + 56);
        v121 = *(_QWORD *)(v125 + 72);
        sub_24024A200((uint64_t)v123, v44 + v121 * v55, &qword_256FDEC78);
      }
      else
      {
        *(_QWORD *)(v129[0] + 8 * (v55 >> 6) + 64) |= 1 << v55;
        v64 = (uint64_t *)(v63[6] + 16 * v55);
        *v64 = v46;
        v64[1] = v47;
        v65 = v63[7];
        v121 = *(_QWORD *)(v62 + 72);
        sub_24024FB00((uint64_t)v123, v65 + v121 * v55);
        v66 = v63[2];
        v67 = __OFADD__(v66, 1);
        v68 = v66 + 1;
        if (v67)
          goto LABEL_73;
        v63[2] = v68;
        swift_bridgeObjectRetain();
      }
      *v42 = (unint64_t)v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      v43 = v119;
      sub_240238C34((uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v45 = v128;
      v41 += v128;
      --v40;
    }
    while (v40);
    v69 = v116;
    swift_bridgeObjectRelease();
    v118 = *(_QWORD *)(v69 + 16);
    v70 = v124;
    if (v118)
    {
      swift_bridgeObjectRetain();
      v71 = 0;
      v114 = (uint64_t)&v70[v69 + 8];
      v72 = v127;
      v73 = (uint64_t)v117;
      v122 = v10;
      while (1)
      {
        v74 = *(_QWORD *)(v69 + 16);
        if (v71 >= v74)
          goto LABEL_72;
        v119 = (uint64_t *)v71;
        sub_240238BF0((uint64_t)&v115[v71 * v45], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        swift_bridgeObjectRetain();
        v75 = (uint64_t *)v114;
        do
        {
          v76 = *v10;
          v77 = v10[1];
          v78 = *(v75 - 1);
          v79 = *v75;
          v80 = *v10 == v78 && v77 == v79;
          if (!v80 && (sub_2402BDD8C() & 1) == 0)
          {
            v81 = v73;
            v82 = *v126;
            if (*(_QWORD *)(*v126 + 16))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v83 = sub_240258860(v76, v77);
              if ((v84 & 1) != 0)
              {
                sub_2402391FC(*(_QWORD *)(v82 + 56) + v121 * v83, v81, &qword_256FDEC78);
                v85 = v125;
                v86 = *(char **)(v125 + 56);
                v87 = v81;
                v88 = 0;
              }
              else
              {
                v85 = v125;
                v86 = *(char **)(v125 + 56);
                v87 = v81;
                v88 = 1;
              }
              v124 = v86;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v87, v88, 1, v72);
              swift_bridgeObjectRelease();
              v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
              v89 = v123(v81, 1, v72);
              v10 = v122;
              v73 = v81;
              if (v89 != 1)
              {
                sub_24024D8E0(v81);
                v90 = *v126;
                if (*(_QWORD *)(*v126 + 16))
                {
                  swift_bridgeObjectRetain();
                  v91 = sub_240258860(v78, v79);
                  if ((v92 & 1) != 0)
                  {
                    v93 = v120;
                    sub_2402391FC(*(_QWORD *)(v90 + 56) + v121 * v91, v120, &qword_256FDEC78);
                    v94 = 0;
                  }
                  else
                  {
                    v94 = 1;
                    v93 = v120;
                  }
                  v96 = v127;
                  v45 = v128;
                  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v124)(v93, v94, 1, v127);
                  swift_bridgeObjectRelease();
                  if (v123(v93, 1, v96) == 1)
                  {
                    v97 = v93;
                    v73 = (uint64_t)v117;
                    v72 = v127;
                    v10 = v122;
                    sub_24024D8E0(v97);
                  }
                  else
                  {
                    sub_24024D8E0(v93);
                    swift_bridgeObjectRetain();
                    v98 = sub_24022EA40();
                    v99 = sub_2402B87C4(v129, v76, v77);
                    v101 = v100;
                    if (v123(v100, 1, v127))
                    {
                      ((void (*)(_QWORD *, _QWORD))v99)(v129, 0);
                      swift_bridgeObjectRelease();
                      ((void (*)(unint64_t *, _QWORD))v98)(&v130, 0);
                      v73 = (uint64_t)v117;
                      v72 = v127;
                      v10 = v122;
                    }
                    else
                    {
                      v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v99;
                      v102 = *(int *)(v127 + 52);
                      v103 = *(_QWORD **)(v101 + v102);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v104 = swift_isUniquelyReferenced_nonNull_native();
                      v112 = v101;
                      *(_QWORD *)(v101 + v102) = v103;
                      v10 = v122;
                      v124 = (char *)v98;
                      if ((v104 & 1) == 0)
                      {
                        v103 = sub_240258060(0, v103[2] + 1, 1, v103);
                        *(_QWORD *)(v112 + v102) = v103;
                      }
                      v106 = v103[2];
                      v105 = v103[3];
                      v107 = v106 + 1;
                      if (v106 >= v105 >> 1)
                      {
                        v111 = v106 + 1;
                        v109 = sub_240258060((_QWORD *)(v105 > 1), v106 + 1, 1, v103);
                        v107 = v111;
                        v103 = v109;
                        *(_QWORD *)(v112 + v102) = v109;
                      }
                      v45 = v128;
                      v103[2] = v107;
                      v108 = &v103[4 * v106];
                      v108[4] = v76;
                      v108[5] = v77;
                      v108[6] = v78;
                      v108[7] = v79;
                      ((void (*)(_QWORD *, _QWORD))v123)(v129, 0);
                      swift_bridgeObjectRelease();
                      ((void (*)(unint64_t *, _QWORD))v124)(&v130, 0);
                      v72 = v127;
                      v73 = (uint64_t)v117;
                    }
                  }
                }
                else
                {
                  v95 = v120;
                  v72 = v127;
                  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v124)(v120, 1, 1, v127);
                  v73 = v81;
                  v45 = v128;
                  sub_24024D8E0(v95);
                }
                goto LABEL_43;
              }
            }
            else
            {
              v73 = v81;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v81, 1, 1, v72);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            sub_24024D8E0(v73);
            v72 = v127;
            v45 = v128;
LABEL_43:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v75 = (uint64_t *)((char *)v75 + v45);
          --v74;
        }
        while (v74);
        v69 = v116;
        swift_bridgeObjectRelease();
        v71 = (unint64_t)v119 + 1;
        sub_240238C34((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        if (v71 == v118)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return v113;
}

unint64_t BMLighthouseLedgerDediscoPrivacyEventEventPhase.description.getter(int a1)
{
  unint64_t result;

  result = 0x6843746567647562;
  switch(a1)
  {
    case 0:
      result = 0x6E776F6E6B6E75;
      break;
    case 1:
      result = 0xD000000000000010;
      break;
    case 2:
      result = 0x7A696D6F646E6172;
      break;
    case 3:
      return result;
    case 4:
      result = 0x4364616F6C796170;
      break;
    case 5:
      result = 0x64616F6C7075;
      break;
    default:
      result = 0x746C7561666564;
      break;
  }
  return result;
}

_QWORD *getDediscoMachine()()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = sub_24024E8AC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDECB8);
  swift_allocObject();
  v1 = sub_24024D524(v0);
  swift_release();
  return v1;
}

unint64_t sub_24024F674()
{
  int *v0;

  return BMLighthouseLedgerDediscoPrivacyEventEventPhase.description.getter(*v0);
}

uint64_t sub_24024F67C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_240232E34(&qword_256FDECC0, (uint64_t (*)(uint64_t))type metadata accessor for DediscoAnalytics, (uint64_t)&protocol conformance descriptor for DediscoAnalytics);
  a1[2] = sub_240232E34(&qword_256FDECC8, (uint64_t (*)(uint64_t))type metadata accessor for DediscoAnalytics, (uint64_t)&protocol conformance descriptor for DediscoAnalytics);
  result = sub_240232E34(&qword_256FDECD0, (uint64_t (*)(uint64_t))type metadata accessor for DediscoAnalytics, (uint64_t)&protocol conformance descriptor for DediscoAnalytics);
  a1[3] = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DediscoAnalytics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24024F700(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DediscoAnalytics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24024F7B4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_24024F858()
{
  unint64_t v0;
  unint64_t v1;

  sub_24023F568(319, (unint64_t *)&qword_256FDEBD0, (void (*)(uint64_t))type metadata accessor for LedgerState);
  if (v0 <= 0x3F)
  {
    sub_24023F568(319, qword_254352250, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for DediscoAnalytics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24024F964 + 4 * byte_2402C0952[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24024F998 + 4 * byte_2402C094D[v4]))();
}

uint64_t sub_24024F998(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24024F9A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24024F9A8);
  return result;
}

uint64_t sub_24024F9B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24024F9BCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24024F9C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24024F9C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DediscoAnalytics.CodingKeys()
{
  return &type metadata for DediscoAnalytics.CodingKeys;
}

unint64_t sub_24024F9E8()
{
  unint64_t result;

  result = qword_256FDED80;
  if (!qword_256FDED80)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0B2C, &type metadata for DediscoAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDED80);
  }
  return result;
}

unint64_t sub_24024FA30()
{
  unint64_t result;

  result = qword_256FDED88;
  if (!qword_256FDED88)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0A9C, &type metadata for DediscoAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDED88);
  }
  return result;
}

unint64_t sub_24024FA78()
{
  unint64_t result;

  result = qword_256FDED90;
  if (!qword_256FDED90)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0AC4, &type metadata for DediscoAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDED90);
  }
  return result;
}

uint64_t sub_24024FABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LedgerState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24024FB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MLHostAsset.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_url;
  v4 = sub_2402BD3A8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id MLHostAsset.autoAsset.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_autoAsset);
}

uint64_t MLHostAsset.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _QWORD *v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  if (qword_2543528A0 != -1)
    swift_once();
  v2 = sub_2402BD4E0();
  __swift_project_value_buffer(v2, (uint64_t)qword_2543529A0);
  swift_retain_n();
  v3 = sub_2402BD4C8();
  v4 = sub_2402BD960();
  v5 = &unk_256FF4000;
  if (os_log_type_enabled(v3, v4))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v27 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                               + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_autoAsset), sel_description));
    v9 = sub_2402BD648();
    v11 = v10;

    v5 = (_QWORD *)&unk_256FF4000;
    sub_24023D440(v9, v11, &v27);
    sub_2402BD9FC();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24022D000, v3, v4, "MAAutoAsset endLockUsage: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242682188](v7, -1, -1);
    MEMORY[0x242682188](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = v5[441];
  v13 = *(void **)(v0 + v12);
  v14 = (void *)sub_2402BD63C();
  v15 = objc_msgSend(v13, sel_endLockUsageSync_, v14);

  if (v15)
  {
    v16 = v15;
    v17 = sub_2402BD4C8();
    v18 = sub_2402BD96C();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v26 = v12;
      v20 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v19 = 138412290;
      v16 = v16;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      v27 = v21;
      sub_2402BD9FC();
      *v20 = v21;

      _os_log_impl(&dword_24022D000, v17, v18, "MAAutoAsset endLockUsage error: %@", v19, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v22 = v20;
      v12 = v26;
      MEMORY[0x242682188](v22, -1, -1);
      MEMORY[0x242682188](v19, -1, -1);
    }
    else
    {

      v17 = v16;
    }

  }
  v23 = v1 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_url;
  v24 = sub_2402BD3A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);

  swift_bridgeObjectRelease();
  return v1;
}

uint64_t MLHostAsset.__deallocating_deinit()
{
  MLHostAsset.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_24024FF48()
{
  return sub_24024FF60((SEL *)&selRef_assetType);
}

uint64_t sub_24024FF54()
{
  return sub_24024FF60((SEL *)&selRef_assetSpecifier);
}

uint64_t sub_24024FF60(SEL *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_autoAsset), sel_assetSelector));
  v4 = objc_msgSend(v3, *a1);

  v5 = sub_2402BD648();
  return v5;
}

void sub_24024FFDC(uint64_t a1)
{
  sub_240250010(a1, &qword_256FDED98);
}

id static MLHostAsset.defaultInterestPolicy.getter()
{
  return sub_240250098(&qword_256FDE070, (id *)&qword_256FDED98);
}

void sub_240250004(uint64_t a1)
{
  sub_240250010(a1, &qword_256FDEDA0);
}

void sub_240250010(uint64_t a1, _QWORD *a2)
{
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE66BC8]), sel_init);
  objc_msgSend(v3, sel_setInterestAcrossTermination_, 1);
  objc_msgSend(v3, sel_setPreventGarbageCollectionSecs_, 604800);

  *a2 = v3;
}

id static MLHostAsset.defaultUsagePolicy.getter()
{
  return sub_240250098(&qword_256FDE078, (id *)&qword_256FDEDA0);
}

id sub_240250098(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

unint64_t sub_2402500D0(char a1)
{
  unint64_t result;

  result = 0xD000000000000014;
  if (a1)
  {
    if (a1 == 1)
      return 0xD00000000000001ELL;
    else
      return 0xD000000000000023;
  }
  return result;
}

uint64_t sub_240250130(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_240235FD0(*a1, *a2);
}

uint64_t sub_24025013C()
{
  return sub_2402A9DAC();
}

uint64_t sub_240250144()
{
  return sub_24028A238();
}

uint64_t sub_24025014C()
{
  return sub_2402AA61C();
}

uint64_t sub_240250154@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_240251460();
  *a1 = result;
  return result;
}

unint64_t sub_240250180@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_2402500D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static MLHostAsset.isRemoteAssetAvailable(context:assetType:assetSpecifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256FDEDB8 + dword_256FDEDB8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_240250238;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_240250238(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
    v5 = 0;
  else
    v5 = a1 & 1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_240250294(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v7;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    v7 = a2;
    return swift_continuation_throwingResume();
  }
}

void sub_240250318(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEED8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_240253A5C;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24025065C;
  aBlock[3] = &block_descriptor_14;
  v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_currentStatus_, v9);
  _Block_release(v9);
}

void sub_240250448(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;

  if (a2)
  {
    v3 = a2;
    if (qword_2543528A0 != -1)
      swift_once();
    v4 = sub_2402BD4E0();
    __swift_project_value_buffer(v4, (uint64_t)qword_2543529A0);
    v5 = a2;
    v6 = a2;
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD96C();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      v11 = a2;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      sub_2402BD9FC();
      *v10 = v13;

      _os_log_impl(&dword_24022D000, v7, v8, "MAAutoAsset currentStatus failed: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      MEMORY[0x242682188](v9, -1, -1);
    }
    else
    {

    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEED8);
    sub_2402BD888();

  }
  else
  {
    if (a1)
      v12 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEED8);
    sub_2402BD888();
  }
}

void sub_24025065C(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t static MLHostAsset.getRemoteAsset(context:assetType:assetSpecifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256FDEDC8 + dword_256FDEDC8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_240250760;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t sub_240250760(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t static MLHostAsset.getRemoteAsset(assetType:assetSpecifier:)()
{
  uint64_t v0;

  return sub_240253704(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

void sub_2402507C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEA8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2543528A0 != -1)
    swift_once();
  v8 = sub_2402BD4E0();
  __swift_project_value_buffer(v8, (uint64_t)qword_2543529A0);
  v9 = a2;
  v10 = sub_2402BD4C8();
  v11 = sub_2402BD954();
  v12 = os_log_type_enabled(v10, v11);
  v33 = v9;
  if (v12)
  {
    v31 = a1;
    v13 = swift_slowAlloc();
    v32 = v4;
    v29 = v5;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v30 = v6;
    v28 = v15;
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = objc_msgSend(v9, sel_description, v14 + 4);
    v17 = sub_2402BD648();
    v19 = v18;

    a1 = v31;
    v34 = sub_24023D440(v17, v19, aBlock);
    sub_2402BD9FC();

    v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24022D000, v10, v11, "MAAutoAsset lockContent: %s", v14, 0xCu);
    v20 = v28;
    swift_arrayDestroy();
    MEMORY[0x242682188](v20, -1, -1);
    v21 = v14;
    v5 = v29;
    v4 = v32;
    MEMORY[0x242682188](v21, -1, -1);

  }
  else
  {

  }
  v22 = (void *)sub_2402BD63C();
  if (qword_256FDE078 != -1)
    swift_once();
  v23 = qword_256FDEDA0;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v24 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v25 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v25 + v24, v7, v4);
  aBlock[4] = (uint64_t)sub_24025389C;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_240251324;
  aBlock[3] = (uint64_t)&block_descriptor_0;
  v26 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v33, sel_lockContent_withUsagePolicy_withTimeout_completion_, v22, v23, 0, v26);

  _Block_release(v26);
}

void sub_240250B1C(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  uint64_t v38;
  uint8_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v11 = sub_2402BD3A8();
  v68 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v63 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v63 - v21;
  if (a5)
  {
    v23 = a5;
    if (qword_2543528A0 != -1)
      swift_once();
    v24 = sub_2402BD4E0();
    __swift_project_value_buffer(v24, (uint64_t)qword_2543529A0);
    v25 = a5;
    v26 = a5;
    v27 = sub_2402BD4C8();
    v28 = sub_2402BD96C();
    if (os_log_type_enabled(v27, v28))
    {
      v67 = v22;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v29 = 138412290;
      v31 = a5;
      v32 = _swift_stdlib_bridgeErrorToNSError();
      v70 = v32;
      sub_2402BD9FC();
      *v30 = v32;
      v22 = v67;

      _os_log_impl(&dword_24022D000, v27, v28, "MAAutoAsset lockContent failed: %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v30, -1, -1);
      MEMORY[0x242682188](v29, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v22, 1, 1, v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEA8);
    sub_2402BD888();

    return;
  }
  if ((a2 & 1) == 0)
  {
    v33 = v68;
    if (qword_2543528A0 != -1)
      swift_once();
    v41 = sub_2402BD4E0();
    __swift_project_value_buffer(v41, (uint64_t)qword_2543529A0);
    v35 = sub_2402BD4C8();
    v36 = sub_2402BD96C();
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_19;
    v37 = v22;
    v38 = v11;
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    v40 = "MAAutoAsset lockContent failed: locked false";
    goto LABEL_18;
  }
  sub_240253808(a3, (uint64_t)v20);
  v33 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48))(v20, 1, v11) == 1)
  {
    sub_240253850((uint64_t)v20);
    if (qword_2543528A0 != -1)
      swift_once();
    v34 = sub_2402BD4E0();
    __swift_project_value_buffer(v34, (uint64_t)qword_2543529A0);
    v35 = sub_2402BD4C8();
    v36 = sub_2402BD96C();
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_19;
    v37 = v22;
    v38 = v11;
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    v40 = "MAAutoAsset lockContent failed: url nil";
LABEL_18:
    _os_log_impl(&dword_24022D000, v35, v36, v40, v39, 2u);
    v11 = v38;
    v22 = v37;
    MEMORY[0x242682188](v39, -1, -1);
LABEL_19:

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v22, 1, 1, v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEA8);
    sub_2402BD888();
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v16, v20, v11);
  if (qword_2543528A0 != -1)
    swift_once();
  v42 = sub_2402BD4E0();
  v43 = __swift_project_value_buffer(v42, (uint64_t)qword_2543529A0);
  v67 = *(char **)(v33 + 16);
  ((void (*)(char *, char *, uint64_t))v67)(v14, v16, v11);
  v44 = sub_2402BD4C8();
  v45 = v33;
  v46 = sub_2402BD954();
  v47 = os_log_type_enabled(v44, v46);
  v66 = a6;
  if (v47)
  {
    v48 = swift_slowAlloc();
    v64 = v43;
    v49 = (uint8_t *)v48;
    v63 = swift_slowAlloc();
    v70 = v63;
    *(_DWORD *)v49 = 136315138;
    v65 = (void (*)(char *, uint64_t))(v49 + 4);
    sub_240253924();
    v50 = sub_2402BDD68();
    v69 = sub_24023D440(v50, v51, &v70);
    sub_2402BD9FC();
    swift_bridgeObjectRelease();
    v65 = *(void (**)(char *, uint64_t))(v68 + 8);
    v65(v14, v11);
    _os_log_impl(&dword_24022D000, v44, v46, "MAAutoAsset url: %s", v49, 0xCu);
    v52 = v63;
    swift_arrayDestroy();
    MEMORY[0x242682188](v52, -1, -1);
    MEMORY[0x242682188](v49, -1, -1);

    v53 = v68;
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t))(v45 + 8);
    v65(v14, v11);

    v53 = v45;
  }
  v54 = a4;
  v55 = sub_2402BD4C8();
  v56 = sub_2402BD954();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v70 = v64;
    *(_DWORD *)v57 = 136315138;
    if (a4)
    {
      v58 = objc_msgSend(v54, sel_description);
      v59 = sub_2402BD648();
      v61 = v60;

    }
    else
    {
      v61 = 0xE300000000000000;
      v59 = 4271950;
    }
    v69 = sub_24023D440(v59, v61, &v70);
    sub_2402BD9FC();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24022D000, v55, v56, "MAAutoAsset newerInProgress: %s", v57, 0xCu);
    v62 = v64;
    swift_arrayDestroy();
    MEMORY[0x242682188](v62, -1, -1);
    MEMORY[0x242682188](v57, -1, -1);

    v53 = v68;
  }
  else
  {

  }
  ((void (*)(char *, char *, uint64_t))v67)(v22, v16, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v22, 0, 1, v11);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEA8);
  sub_2402BD888();
  v65(v16, v11);
}

uint64_t sub_240251324(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(id, uint64_t, char *, void *, void *);
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v22;

  v12 = __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(id, uint64_t, char *, void *, void *))(a1 + 32);
  if (a4)
  {
    sub_2402BD378();
    v16 = sub_2402BD3A8();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 0, 1, v16);
  }
  else
  {
    v17 = sub_2402BD3A8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  }
  swift_retain();
  v18 = a2;
  v19 = a5;
  v20 = a6;
  v15(v18, a3, v14, a5, a6);

  swift_release();
  return sub_240253850((uint64_t)v14);
}

uint64_t sub_240251460()
{
  unint64_t v0;

  v0 = sub_2402BDBA0();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_2402514A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = sub_2402BD3A8();
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[15] = __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_240251584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  NSObject *v26;
  _QWORD *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  v1 = v0 + 16;
  if (qword_2543528A0 != -1)
    swift_once();
  v2 = sub_2402BD4E0();
  *(_QWORD *)(v0 + 144) = __swift_project_value_buffer(v2, (uint64_t)qword_2543529A0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v3 = sub_2402BD4C8();
  v4 = sub_2402BD954();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 80);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 64);
    v34 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v36[0] = v10;
    *(_DWORD *)v9 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 32) = sub_24023D440(v8, v7, v36);
    sub_2402BD9FC();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = sub_24023D440(v34, v6, v36);
    sub_2402BD9FC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24022D000, v3, v4, "Querying MAAutoAsset for %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    v11 = v10;
    v1 = v0 + 16;
    MEMORY[0x242682188](v11, -1, -1);
    MEMORY[0x242682188](v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v12 = objc_allocWithZone(MEMORY[0x24BE66BD0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v14 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_initForAssetType_withAssetSpecifier_, v13, v14);
  *(_QWORD *)(v0 + 152) = v15;

  *(_QWORD *)(v0 + 16) = 0;
  v16 = objc_allocWithZone(MEMORY[0x24BE66BB8]);
  v17 = v15;
  v18 = (void *)sub_2402BD63C();
  v19 = objc_msgSend(v16, sel_initForClientName_selectingAsset_error_, v18, v17, v1);
  *(_QWORD *)(v0 + 160) = v19;

  v20 = *(void **)(v0 + 16);
  if (v20)
  {
    v21 = v20;
    v22 = sub_2402BD4C8();
    v23 = sub_2402BD96C();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v35 = v19;
      v25 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v24 = 138412290;
      *(_QWORD *)(v0 + 24) = v21;
      v26 = v21;
      sub_2402BD9FC();
      *v25 = v20;

      _os_log_impl(&dword_24022D000, v22, v23, "MAAutoAsset failed: %@", v24, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      v27 = v25;
      v28 = v35;
      swift_arrayDestroy();
      MEMORY[0x242682188](v27, -1, -1);
      MEMORY[0x242682188](v24, -1, -1);
      v29 = v22;
      v22 = v17;
    }
    else
    {

      v29 = v21;
      v26 = v19;
      v28 = v17;
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 48);
    v31 = swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v31;
    *(_QWORD *)(v31 + 16) = v19;
    *(_QWORD *)(v31 + 24) = v30;
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v32;
    *v32 = v0;
    v32[1] = sub_240251AE8;
    return sub_2402BDD74();
  }
}

uint64_t sub_240251AE8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_240251B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  sub_240253808(*(_QWORD *)(v0 + 136), v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_240253850(*(_QWORD *)(v0 + 128));
    v4 = sub_2402BD4C8();
    v5 = sub_2402BD96C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_24022D000, v4, v5, "MAAutoAsset lockContent failed: url nil", v6, 2u);
      MEMORY[0x242682188](v6, -1, -1);
    }
    v7 = *(void **)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 136);

    sub_240253850(v8);
    v9 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 48);

    sub_240253850(v12);
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
    v18(v13, v11, v15);
    v18(v14, v13, v15);
    v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName);
    v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName + 8);
    type metadata accessor for MLHostAsset();
    v9 = swift_allocObject();
    v18(v9 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_url, v14, v15);
    *(_QWORD *)(v9 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_autoAsset) = v10;
    v21 = (_QWORD *)(v9 + OBJC_IVAR____TtC20LighthouseBackground11MLHostAsset_clientName);
    *v21 = v20;
    v21[1] = v19;
    swift_bridgeObjectRetain();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

uint64_t sub_240251D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[41] = a4;
  v5[42] = a5;
  v5[39] = a2;
  v5[40] = a3;
  v5[38] = a1;
  return swift_task_switch();
}

uint64_t sub_240251DE8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45[2];

  v45[1] = *MEMORY[0x24BDAC8D0];
  if (qword_2543528A0 != -1)
    swift_once();
  v1 = sub_2402BD4E0();
  *(_QWORD *)(v0 + 344) = __swift_project_value_buffer(v1, (uint64_t)qword_2543529A0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = sub_2402BD4C8();
  v3 = sub_2402BD954();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 336);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 320);
    v41 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 312);
    v8 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    v45[0] = v43;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 288) = sub_24023D440(v7, v6, v45);
    sub_2402BD9FC();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 296) = sub_24023D440(v41, v5, v45);
    sub_2402BD9FC();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24022D000, v2, v3, "Querying MAAutoAsset for %s: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x242682188](v43, -1, -1);
    MEMORY[0x242682188](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v9 = (void **)(v0 + 264);
  v10 = objc_allocWithZone(MEMORY[0x24BE66BD0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v10, sel_initForAssetType_withAssetSpecifier_, v11, v12);
  *(_QWORD *)(v0 + 352) = v13;

  *(_QWORD *)(v0 + 152) = 0;
  v14 = objc_allocWithZone(MEMORY[0x24BE66BB8]);
  swift_bridgeObjectRetain();
  v15 = v13;
  v16 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v14, sel_initForClientName_selectingAsset_error_, v16, v15, v0 + 152);
  *(_QWORD *)(v0 + 360) = v17;

  v18 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 264) = v18;
  if (v18)
  {
    v19 = v18;
    v20 = sub_2402BD4C8();
    v21 = sub_2402BD96C();
    if (os_log_type_enabled(v20, v21))
    {
      v44 = v17;
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v22 = 138412290;
      swift_beginAccess();
      v24 = *v9;
      if (*v9)
      {
        *(_QWORD *)(v0 + 280) = v24;
        v25 = v24;
      }
      else
      {
        *(_QWORD *)(v0 + 272) = 0;
      }
      sub_2402BD9FC();
      *v23 = v24;
      _os_log_impl(&dword_24022D000, v20, v21, "MAAutoAsset failed: %@", v22, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v23, -1, -1);
      MEMORY[0x242682188](v22, -1, -1);
      v17 = v44;
    }

    sub_2402539A8();
    swift_allocError();
    *v39 = 0;
    swift_willThrow();

    v40 = *(void **)(v0 + 264);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v26 = v0 + 144;
    swift_bridgeObjectRetain_n();
    v27 = sub_2402BD4C8();
    v28 = sub_2402BD954();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 336);
    if (v29)
    {
      v42 = *(_QWORD *)(v0 + 328);
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v45[0] = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 256) = sub_24023D440(v42, v30, v45);
      sub_2402BD9FC();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v27, v28, "MAAutoAsset expressing interest for assetSpecifier: %s", v31, 0xCu);
      swift_arrayDestroy();
      v33 = v32;
      v26 = v0 + 144;
      MEMORY[0x242682188](v33, -1, -1);
      MEMORY[0x242682188](v31, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v34 = sub_2402BD63C();
    *(_QWORD *)(v0 + 368) = v34;
    if (qword_256FDE070 != -1)
      swift_once();
    v35 = qword_256FDED98;
    *(_QWORD *)(v0 + 56) = v26;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_2402524D4;
    v36 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x24BDAC760];
    v37 = (_QWORD *)(v0 + 80);
    v37[1] = 0x40000000;
    v37[2] = sub_240250294;
    v37[3] = &block_descriptor_5;
    v37[4] = v36;
    objc_msgSend(v17, sel_interestInContent_withInterestPolicy_completion_, v34, v35, v37);
    return swift_continuation_await();
  }
}

uint64_t sub_2402524D4()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 376) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_240252578()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(void **)(v0 + 368);

  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEED0);
  *v4 = v0;
  v4[1] = sub_24025265C;
  return sub_2402BDD74();
}

uint64_t sub_24025265C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402526E4()
{
  uint64_t v0;
  os_log_t v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  objc_class *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  id *p_isa;
  id v18;
  id *v19;
  NSObject *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  char v32;
  NSObject *v33;
  os_log_type_t v34;
  Class isa;
  uint8_t *v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  NSObject *v42;
  Class v43;
  id v44;
  void *v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  Class v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  objc_class *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _QWORD *v59;
  objc_class *v60;
  uint64_t v61;
  objc_class *v62;
  _QWORD *v63;
  uint8_t *buf;
  uint8_t *bufa;
  uint8_t *bufb;
  os_log_t log;
  objc_class *v68;
  uint64_t v69[2];

  v1 = (os_log_t)v0;
  v69[1] = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)(v0 + 184);
  *(_QWORD *)(v0 + 400) = v2;
  if (!v2)
  {
    v9 = sub_2402BD4C8();
    v10 = sub_2402BD96C();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24022D000, v9, (os_log_type_t)v10, "MAAutoAsset failed at calling currentStatus.", v11, 2u);
      MEMORY[0x242682188](v11, -1, -1);
    }
    v13 = *(void **)(v0 + 352);
    v12 = *(void **)(v0 + 360);

    sub_2402539A8();
    swift_allocError();
    *v14 = 2;
    swift_willThrow();

    v15 = *(void **)(v0 + 264);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v68 = v2;
  v3 = sub_2402BD4C8();
  v4 = sub_2402BD954();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    log = v1;
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    log[31].isa = v68;
    v7 = v68;
    sub_2402BD9FC();
    *v6 = v2;

    _os_log_impl(&dword_24022D000, v3, v4, "MAAutoAsset status: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
    swift_arrayDestroy();
    v8 = v6;
    v1 = log;
    MEMORY[0x242682188](v8, -1, -1);
    MEMORY[0x242682188](v5, -1, -1);
  }
  else
  {

  }
  p_isa = (id *)&v1[27].isa;

  v18 = -[objc_class availableForUseError](v68, sel_availableForUseError);
  if (v18)
  {
    v19 = (id *)&v1[28].isa;
    *p_isa = v18;
    v20 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
    sub_24025396C();
    if (!swift_dynamicCast())
    {

      v26 = v20;
      v27 = sub_2402BD4C8();
      v28 = sub_2402BD96C();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        buf = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v29 = 138412290;
        v30 = v26;
        v31 = _swift_stdlib_bridgeErrorToNSError();
        v1[29].isa = (Class)v31;
        sub_2402BD9FC();
        *(_QWORD *)buf = v31;

        _os_log_impl(&dword_24022D000, v27, v28, "Found an error which couldn't be cast to NSError: %@", v29, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
        swift_arrayDestroy();
        MEMORY[0x242682188](buf, -1, -1);
        MEMORY[0x242682188](v29, -1, -1);

      }
      else
      {

      }
      goto LABEL_28;
    }
    v21 = *v19;
    v22 = objc_msgSend(*v19, sel_domain);
    v23 = sub_2402BD648();
    v25 = v24;

    if (v23 == 0xD000000000000024 && v25 == 0x80000002402C9730)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {

LABEL_27:
        goto LABEL_28;
      }
    }
    if (((unint64_t)objc_msgSend(v21, sel_code) | 4) == 0x183D)
    {
      v33 = sub_2402BD4C8();
      v34 = sub_2402BD954();
      if (os_log_type_enabled(v33, v34))
      {
        isa = v1[44].isa;
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_24022D000, v33, v34, "Found an error that we can proceed through, continuing...", v36, 2u);
        MEMORY[0x242682188](v36, -1, -1);

        v37 = 45;
      }
      else
      {

        v33 = v1[45].isa;
        v37 = 44;
      }

      v43 = v1[33].isa;
LABEL_35:

      return ((uint64_t (*)(uint64_t))v1[1].isa)(1);
    }
    v38 = v21;
    v39 = sub_2402BD4C8();
    v40 = sub_2402BD96C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v63 = (_QWORD *)swift_slowAlloc();
      bufa = v41;
      *(_DWORD *)v41 = 138412290;
      v1[30].isa = (Class)v38;
      v42 = v38;
      p_isa = (id *)&v1[27].isa;
      sub_2402BD9FC();
      *v63 = v38;

      v38 = v39;
      _os_log_impl(&dword_24022D000, v39, v40, "Found a real error, continuing: %@", bufa, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v63, -1, -1);
      MEMORY[0x242682188](bufa, -1, -1);
    }
    else
    {

      v42 = v38;
      v20 = v39;
    }

    goto LABEL_27;
  }
LABEL_28:
  v44 = -[objc_class availableForUseAttributes](v68, sel_availableForUseAttributes);
  if (v44)
  {
    v45 = v44;
    sub_2402BD57C();

    swift_bridgeObjectRetain();
    v46 = sub_2402BD4C8();
    v47 = sub_2402BD954();
    v48 = os_log_type_enabled(v46, v47);
    v49 = v1[45].isa;
    if (v48)
    {
      bufb = (uint8_t *)v1[44].isa;
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v69[0] = v51;
      *(_DWORD *)v50 = 136315138;
      swift_bridgeObjectRetain();
      v52 = sub_2402BD588();
      v54 = v53;
      swift_bridgeObjectRelease();
      v1[26].isa = (Class)sub_24023D440(v52, v54, v69);
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v46, v47, "MAAutoAsset available: %s", v50, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242682188](v51, -1, -1);
      MEMORY[0x242682188](v50, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v43 = v1[33].isa;
    goto LABEL_35;
  }
  v55 = v68;
  v56 = sub_2402BD4C8();
  v57 = sub_2402BD954();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v58 = 138412290;
    v1[25].isa = v55;
    v60 = v55;
    sub_2402BD9FC();
    *v59 = v2;

    _os_log_impl(&dword_24022D000, v56, v57, "MAAutoAsset not available on the device: %@", v58, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
    swift_arrayDestroy();
    MEMORY[0x242682188](v59, -1, -1);
    MEMORY[0x242682188](v58, -1, -1);
  }
  else
  {

  }
  v61 = dword_256FDEDC8;
  v62 = (objc_class *)swift_task_alloc();
  v1[51].isa = v62;
  *(_QWORD *)v62 = v1;
  *((_QWORD *)v62 + 1) = sub_240253154;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256FDEDC8 + v61))((uint64_t)v1[38].isa, (uint64_t)v1[39].isa, (uint64_t)v1[40].isa, (uint64_t)v1[41].isa, (uint64_t)v1[42].isa);
}

uint64_t sub_240253154(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402531DC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  void *v16;
  void *v17;
  uint8_t *v18;
  void *v20;
  void *v21;
  uint64_t v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(v0 + 416);
  if (!v1)
  {
    v12 = sub_2402BD4C8();
    v13 = sub_2402BD954();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(void **)(v0 + 400);
    v16 = *(void **)(v0 + 352);
    v17 = *(void **)(v0 + 360);
    if (v14)
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_24022D000, v12, v13, "MAAutoAsset not available on the device after lock.", v18, 2u);
      MEMORY[0x242682188](v18, -1, -1);

    }
    else
    {

    }
    goto LABEL_8;
  }
  swift_retain_n();
  v2 = sub_2402BD4C8();
  v3 = sub_2402BD954();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void **)(v0 + 400);
  v6 = *(void **)(v0 + 360);
  if (!v4)
  {

    swift_release_n();
LABEL_8:
    v11 = *(void **)(v0 + 264);
    goto LABEL_9;
  }
  v21 = *(void **)(v0 + 352);
  v7 = (uint8_t *)swift_slowAlloc();
  v20 = v6;
  v8 = swift_slowAlloc();
  *(_DWORD *)v7 = 136315138;
  v22[0] = v8;
  sub_2402BD3A8();
  sub_240253924();
  v9 = sub_2402BDD68();
  *(_QWORD *)(v0 + 192) = sub_24023D440(v9, v10, v22);
  sub_2402BD9FC();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl(&dword_24022D000, v2, v3, "MAAutoAsset available on the filesystem: %s", v7, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x242682188](v8, -1, -1);
  MEMORY[0x242682188](v7, -1, -1);

  swift_release();
  v11 = *(void **)(v0 + 264);
LABEL_9:

  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0);
}

uint64_t sub_2402534A0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  NSObject *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  _BYTE *v13;

  v1 = *(void **)(v0 + 368);
  v2 = *(void **)(v0 + 376);
  swift_willThrow();

  *(_QWORD *)(v0 + 160) = v2;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  sub_24025396C();
  if (swift_dynamicCast())
  {

    v4 = *(id *)(v0 + 168);
    v5 = sub_2402BD4C8();
    v6 = sub_2402BD96C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      *(_QWORD *)(v0 + 176) = v4;
      v9 = v4;
      sub_2402BD9FC();
      *v8 = v4;

      _os_log_impl(&dword_24022D000, v5, v6, "MAAutoAsset interest failed: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v8, -1, -1);
      MEMORY[0x242682188](v7, -1, -1);
    }
    else
    {

      v5 = v4;
    }
    v12 = *(void **)(v0 + 352);
    v11 = *(void **)(v0 + 360);

    sub_2402539A8();
    swift_allocError();
    *v13 = 1;
    swift_willThrow();

  }
  else
  {
    v10 = *(void **)(v0 + 360);

  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_240253704(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_240253714()
{
  return type metadata accessor for MLHostAsset();
}

uint64_t type metadata accessor for MLHostAsset()
{
  uint64_t result;

  result = qword_256FDEE00;
  if (!qword_256FDEE00)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_240253758()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD3A8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for MLHostAsset()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MLHostAsset.assetType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MLHostAsset.assetSpecifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void sub_240253800(uint64_t a1)
{
  uint64_t v1;

  sub_2402507C0(a1, *(void **)(v1 + 16));
}

uint64_t sub_240253808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_240253850(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_240253890()
{
  return objectdestroyTm(&qword_256FDEEA8);
}

void sub_24025389C(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEA8) - 8) + 80);
  sub_240250B1C(a1, a2, a3, a4, a5, v5 + ((v11 + 16) & ~v11));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_240253924()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDEEB0;
  if (!qword_256FDEEB0)
  {
    v1 = sub_2402BD3A8();
    result = MEMORY[0x2426820F8](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&qword_256FDEEB0);
  }
  return result;
}

unint64_t sub_24025396C()
{
  unint64_t result;

  result = qword_256FDEEC0;
  if (!qword_256FDEEC0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256FDEEC0);
  }
  return result;
}

unint64_t sub_2402539A8()
{
  unint64_t result;

  result = qword_256FDEEC8;
  if (!qword_256FDEEC8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0CE0, &type metadata for MLHostAssetError);
    atomic_store(result, (unint64_t *)&qword_256FDEEC8);
  }
  return result;
}

void sub_2402539EC(uint64_t a1)
{
  uint64_t v1;

  sub_240250318(a1, *(void **)(v1 + 16));
}

uint64_t sub_2402539F4()
{
  return objectdestroyTm(&qword_256FDEED8);
}

uint64_t objectdestroyTm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

void sub_240253A5C(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEED8);
  sub_240250448(a1, a2);
}

uint64_t getEnumTagSinglePayload for TaskRequestDevice(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHostAssetError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_240253B88 + 4 * byte_2402C0BC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_240253BBC + 4 * byte_2402C0BC0[v4]))();
}

uint64_t sub_240253BBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240253BC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240253BCCLL);
  return result;
}

uint64_t sub_240253BD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240253BE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_240253BE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240253BEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLHostAssetError()
{
  return &type metadata for MLHostAssetError;
}

unint64_t sub_240253C0C()
{
  unint64_t result;

  result = qword_256FDEEE0;
  if (!qword_256FDEEE0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0C9C, &type metadata for MLHostAssetError);
    atomic_store(result, (unint64_t *)&qword_256FDEEE0);
  }
  return result;
}

unint64_t sub_240253C54(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2402539A8();
  result = sub_240253C80();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_240253C80()
{
  unint64_t result;

  result = qword_256FDEF08;
  if (!qword_256FDEF08)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0C24, &type metadata for MLHostAssetError);
    atomic_store(result, (unint64_t *)&qword_256FDEF08);
  }
  return result;
}

uint64_t sub_240253CCC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t aBlock;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  void *v25;
  void (*v26)(void *);
  uint64_t v27;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&aBlock - v10;
  sub_24025BCB0();
  sub_2402391FC(a2, (uint64_t)v11, &qword_2543521F0);
  sub_2402391FC(a3, (uint64_t)v9, &qword_2543521F0);
  v12 = sub_24029D7C0((uint64_t)v11, (uint64_t)v9, 0, 0, 0);
  v13 = (void *)sub_2402BD63C();
  v14 = objc_msgSend(a1, sel_publisherWithUseCase_options_, v13, v12);

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = MEMORY[0x24BEE4AF8];
  v26 = (void (*)(void *))nullsub_1;
  v27 = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v23 = 1107296256;
  v24 = sub_24029D8D0;
  v25 = &block_descriptor_1;
  v17 = _Block_copy(&aBlock);
  v26 = sub_24025BD28;
  v27 = v15;
  aBlock = v16;
  v23 = 1107296256;
  v24 = sub_2402541EC;
  v25 = &block_descriptor_3;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v19 = objc_msgSend(v14, sel_sinkWithCompletion_receiveInput_, v17, v18);

  _Block_release(v18);
  _Block_release(v17);

  swift_beginAccess();
  v20 = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v20;
}

void sub_240253F2C(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;
  id v21;

  v4 = objc_msgSend(a1, sel_eventBody);
  if (v4)
  {
    v5 = v4;
    v6 = (_QWORD **)(a2 + 16);
    objc_msgSend(a1, sel_timestamp);
    v8 = v7;
    swift_beginAccess();
    v9 = *v6;
    v10 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v6 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v9 = sub_240258624(0, v9[2] + 1, 1, v9, &qword_256FDEFD0, &qword_256FDEFD8);
      *v6 = v9;
    }
    v13 = v9[2];
    v12 = v9[3];
    if (v13 >= v12 >> 1)
    {
      v9 = sub_240258624((_QWORD *)(v12 > 1), v13 + 1, 1, v9, &qword_256FDEFD0, &qword_256FDEFD8);
      *v6 = v9;
    }
    v9[2] = v13 + 1;
    v14 = &v9[2 * v13];
    v14[4] = v8;
    v14[5] = v10;
    swift_endAccess();

  }
  else
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v15 = sub_2402BD4E0();
    __swift_project_value_buffer(v15, (uint64_t)qword_2543529A0);
    v21 = a1;
    v16 = sub_2402BD4C8();
    v17 = sub_2402BD960();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v18 = 138412290;
      v20 = v21;
      sub_2402BD9FC();
      *v19 = v21;

      _os_log_impl(&dword_24022D000, v16, v17, "Invalid event: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v19, -1, -1);
      MEMORY[0x242682188](v18, -1, -1);

    }
    else
    {

    }
  }
}

void sub_2402541EC(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void DediscoAnalytics.coreAnalyticsDictionary.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  double v70;
  id v71;
  id v72;
  char v73;
  unint64_t v74;
  double v75;
  id v76;
  id v77;
  char v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v81 = (uint64_t)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v80 - v5;
  v7 = sub_2402BD48C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v80 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v80 - v11;
  v13 = sub_24024916C(MEMORY[0x24BEE4AF8]);
  v14 = *v0;
  v15 = *(_QWORD *)(*v0 + 16);
  v82 = v12;
  if (v15)
    sub_240258860(0xD000000000000014, 0x80000002402C9790);
  v16 = sub_2402BD90C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v83 = v13;
  sub_24025A170(v16, 0xD000000000000019, 0x80000002402C97B0, isUniquelyReferenced_nonNull_native);
  v18 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000011, 0x80000002402C97D0);
  v19 = sub_2402BD90C();
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v18;
  sub_24025A170(v19, 0xD000000000000016, 0x80000002402C97F0, v20);
  v21 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000010, 0x80000002402C9810);
  v22 = sub_2402BD90C();
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v21;
  sub_24025A170(v22, 0xD000000000000015, 0x80000002402C9830, v23);
  v24 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x466E776F6E6B6E75, 0xED000064656C6961);
  v25 = sub_2402BD90C();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v24;
  sub_24025A170(v25, 0xD000000000000012, 0x80000002402C9850, v26);
  v27 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000019, 0x80000002402C9870);
  v28 = sub_2402BD90C();
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v27;
  sub_24025A170(v28, 0xD00000000000001ELL, 0x80000002402C9890, v29);
  v30 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000016, 0x80000002402C98B0);
  v31 = sub_2402BD90C();
  v32 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v30;
  sub_24025A170(v31, 0xD00000000000001BLL, 0x80000002402C98D0, v32);
  v33 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000016, 0x80000002402C98F0);
  v34 = sub_2402BD90C();
  v35 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v33;
  sub_24025A170(v34, 0xD00000000000001BLL, 0x80000002402C9910, v35);
  v36 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000013, 0x80000002402C9930);
  v37 = sub_2402BD90C();
  v38 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v36;
  sub_24025A170(v37, 0xD000000000000018, 0x80000002402C9950, v38);
  v39 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000018, 0x80000002402C9970);
  v40 = sub_2402BD90C();
  v41 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v39;
  sub_24025A170(v40, 0xD00000000000001DLL, 0x80000002402C9990, v41);
  v42 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0xD000000000000015, 0x80000002402C99B0);
  v43 = sub_2402BD90C();
  v44 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v42;
  sub_24025A170(v43, 0xD00000000000001ALL, 0x80000002402C99D0, v44);
  v45 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x755364616F6C7075, 0xEF64656465656363);
  v46 = sub_2402BD90C();
  v47 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v45;
  sub_24025A170(v46, 0xD000000000000014, 0x80000002402C99F0, v47);
  v48 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x614664616F6C7075, 0xEC00000064656C69);
  v49 = sub_2402BD90C();
  v50 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v48;
  sub_24025A170(v49, 0xD000000000000011, 0x80000002402C9A10, v50);
  v51 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x6574656C706D6F43, 0xE900000000000064);
  v52 = sub_2402BD90C();
  v53 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v51;
  sub_24025A170(v52, 0xD000000000000012, 0x80000002402C9A30, v53);
  v54 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x64656C696146, 0xE600000000000000);
  v55 = sub_2402BD90C();
  v56 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v54;
  sub_24025A170(v55, 0x736154746E756F63, 0xEF64656C6961466BLL, v56);
  v57 = v83;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
    sub_240258860(0x6465727265666544, 0xE800000000000000);
  v58 = sub_2402BD90C();
  v59 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v57;
  sub_24025A170(v58, 0xD000000000000011, 0x80000002402C9A50, v59);
  v60 = v83;
  swift_bridgeObjectRelease();
  v61 = type metadata accessor for DediscoAnalytics();
  swift_bridgeObjectRetain();
  v62 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v63 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v60;
  sub_24025A170(v62, 0x656D614E6B736174, 0xE800000000000000, v63);
  v64 = v83;
  swift_bridgeObjectRelease();
  sub_2402391FC((uint64_t)v1 + *(int *)(v61 + 36), (uint64_t)v6, &qword_2543521F0);
  v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v65(v6, 1, v7) == 1)
  {
    sub_24023D378((uint64_t)v6, &qword_2543521F0);
    return;
  }
  v66 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v67 = v82;
  v66(v82, v6, v7);
  v68 = v81;
  sub_2402391FC((uint64_t)v1 + *(int *)(v61 + 40), v81, &qword_2543521F0);
  if (v65((char *)v68, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v67, v7);
    sub_24023D378(v68, &qword_2543521F0);
    return;
  }
  v69 = v80;
  v66(v80, (char *)v68, v7);
  sub_2402BD444();
  if ((~*(_QWORD *)&v70 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v70 <= -9.22337204e18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v70 >= 9.22337204e18)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_, (uint64_t)v70);
  v72 = objc_msgSend(v71, sel_stringValue);

  if (!v72)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v73 = swift_isUniquelyReferenced_nonNull_native();
  v83 = v64;
  sub_24025A170((uint64_t)v72, 0x745374656B637562, 0xEB00000000747261, v73);
  v74 = v83;
  swift_bridgeObjectRelease();
  sub_2402BD444();
  if ((~*(_QWORD *)&v75 & 0x7FF0000000000000) == 0)
    goto LABEL_47;
  if (v75 <= -9.22337204e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v75 >= 9.22337204e18)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_, (uint64_t)v75);
  v77 = objc_msgSend(v76, sel_stringValue);

  if (v77)
  {
    v78 = swift_isUniquelyReferenced_nonNull_native();
    v83 = v74;
    sub_24025A170((uint64_t)v77, 0x6E4574656B637562, 0xE900000000000064, v78);
    swift_bridgeObjectRelease();
    v79 = *(void (**)(char *, uint64_t))(v8 + 8);
    v79(v69, v7);
    v79(v67, v7);
    return;
  }
LABEL_51:
  __break(1u);
}

unint64_t getDediscoData(dediscoStream:telemetryRange:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  id v43;
  void *v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  const char *v74;
  id v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void (*v85)(_QWORD *@<X8>);
  unint64_t v86;
  char *v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;

  v78 = type metadata accessor for LedgerState();
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v84 = (const char **)((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_2402BD48C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v81 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)&v74 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v74 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v74 - v17;
  v19 = type metadata accessor for TelemetryBucketRange();
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v20(v18, a2 + *(int *)(v19 + 24), v5);
  v82 = v6;
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v21(v18, 0, 1, v5);
  v22 = a2 + *(int *)(v19 + 28);
  v77 = (void (*)(char *, char *, uint64_t))v20;
  v20(v16, v22, v5);
  v83 = v5;
  v88 = v21;
  v21(v16, 0, 1, v5);
  v23 = sub_240253CCC(a1, (uint64_t)v18, (uint64_t)v16);
  sub_24023D378((uint64_t)v16, &qword_2543521F0);
  sub_24023D378((uint64_t)v18, &qword_2543521F0);
  v86 = sub_240249284(MEMORY[0x24BEE4AF8]);
  v24 = *(_QWORD *)(v23 + 16);
  v79 = v23;
  if (v24)
  {
    v85 = 0;
    v25 = (id *)(v23 + 40);
    v26 = &off_251094000;
    v74 = "latestValidState";
    v27 = v82;
    v28 = v83;
    v29 = v81;
    v80 = v13;
    while (1)
    {
      v30 = *v25;
      v31 = objc_msgSend(v30, v26[151]);
      if (v31)
      {
        v32 = v31;
        v33 = objc_msgSend(v31, sel_experimentIdentifiers);
        if (v33)
        {
          v34 = v33;
          v35 = objc_msgSend(v33, sel_trialExperimentID);
          if (v35)
          {
            v36 = v35;
            v89 = sub_2402BD648();
            v90 = v37;

            v38 = objc_msgSend(v30, sel_timestamp);
            if (v38)
            {
              v39 = v38;
              sub_2402BD45C();

              v40 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
              v40(v13, v29, v28);
              v88(v13, 0, 1, v28);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v13, 1, v28) != 1)
              {
                v41 = v13;
                v42 = v87;
                v40(v87, v41, v28);
                v43 = objc_msgSend(v30, sel_event);
                if (v43)
                {
                  v44 = v43;
                  objc_msgSend(v43, sel_succeeded);
                  v45 = objc_msgSend(v44, sel_phase, v74);
                  v75 = v44;
                  v46 = 0xEB000000006B6365;
                  v47 = 0x6843746567647562;
                  switch(v45)
                  {
                    case 0u:
                      v46 = 0xE700000000000000;
                      v47 = 0x6E776F6E6B6E75;
                      break;
                    case 1u:
                      v46 = (unint64_t)v74 | 0x8000000000000000;
                      v47 = 0xD000000000000010;
                      break;
                    case 2u:
                      v46 = 0xED00006E6F697461;
                      v47 = 0x7A696D6F646E6172;
                      break;
                    case 3u:
                      break;
                    case 4u:
                      v46 = 0xEF6E6F6974616572;
                      v47 = 0x4364616F6C796170;
                      break;
                    case 5u:
                      v46 = 0xE600000000000000;
                      v47 = 0x64616F6C7075;
                      break;
                    default:
                      v46 = 0xE700000000000000;
                      v47 = 0x746C7561666564;
                      break;
                  }
                  v91 = (_QWORD *)v47;
                  v92 = v46;
                  swift_bridgeObjectRetain();
                  sub_2402BD6C0();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v48 = v91;
                  v49 = v92;
                  v50 = v84;
                  v77((char *)v84 + *(int *)(v78 + 20), v87, v28);
                  *v50 = v48;
                  v50[1] = v49;
                  sub_24025A2CC((uint64_t)v85);
                  v51 = v86;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v91 = (_QWORD *)v51;
                  v53 = v90;
                  v55 = sub_240258860(v89, v90);
                  v56 = *(_QWORD *)(v51 + 16);
                  v57 = (v54 & 1) == 0;
                  v58 = v56 + v57;
                  if (__OFADD__(v56, v57))
                  {
                    __break(1u);
LABEL_44:
                    __break(1u);
LABEL_45:
                    sub_2402BDDC8();
                    __break(1u);
                    JUMPOUT(0x2402555D4);
                  }
                  v59 = v54;
                  if (*(_QWORD *)(v51 + 24) >= v58)
                  {
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      sub_24025B014(&qword_256FDEC68);
                  }
                  else
                  {
                    sub_240259754(v58, isUniquelyReferenced_nonNull_native, &qword_256FDEC68);
                    v60 = sub_240258860(v89, v53);
                    if ((v59 & 1) != (v61 & 1))
                      goto LABEL_45;
                    v55 = v60;
                  }
                  v62 = v91;
                  swift_bridgeObjectRelease();
                  if ((v59 & 1) == 0)
                  {
                    v62[(v55 >> 6) + 8] |= 1 << v55;
                    v63 = (_QWORD *)(v62[6] + 16 * v55);
                    v64 = v90;
                    *v63 = v89;
                    v63[1] = v64;
                    *(_QWORD *)(v62[7] + 8 * v55) = MEMORY[0x24BEE4AF8];
                    v65 = v62[2];
                    v66 = v65 + 1;
                    v67 = __OFADD__(v65, 1);
                    swift_bridgeObjectRetain();
                    if (v67)
                      goto LABEL_44;
                    v62[2] = v66;
                  }
                  swift_bridgeObjectRetain();
                  v68 = v62[7];
                  swift_bridgeObjectRelease();
                  v69 = *(_QWORD *)(v68 + 8 * v55);
                  v70 = swift_isUniquelyReferenced_nonNull_native();
                  *(_QWORD *)(v68 + 8 * v55) = v69;
                  v86 = (unint64_t)v62;
                  if ((v70 & 1) == 0)
                  {
                    v69 = sub_240258180(0, *(_QWORD *)(v69 + 16) + 1, 1, v69, &qword_256FDEFC8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
                    *(_QWORD *)(v68 + 8 * v55) = v69;
                  }
                  v72 = *(_QWORD *)(v69 + 16);
                  v71 = *(_QWORD *)(v69 + 24);
                  if (v72 >= v71 >> 1)
                  {
                    v69 = sub_240258180(v71 > 1, v72 + 1, 1, v69, &qword_256FDEFC8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
                    *(_QWORD *)(v68 + 8 * v55) = v69;
                  }
                  v13 = v80;
                  *(_QWORD *)(v69 + 16) = v72 + 1;
                  sub_24023DBCC((uint64_t)v84, v69+ ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))+ *(_QWORD *)(v76 + 72) * v72, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
                  swift_bridgeObjectRelease();

                  v27 = v82;
                  v28 = v83;
                  (*(void (**)(char *, uint64_t))(v82 + 8))(v87, v83);
                  v85 = sub_2402555EC;
                  v29 = v81;
                }
                else
                {
                  (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v28);
                  swift_bridgeObjectRelease();

                  v13 = v80;
                }
                goto LABEL_40;
              }
            }
            else
            {
              v88(v13, 1, 1, v28);
            }

            swift_bridgeObjectRelease();
            sub_24023D378((uint64_t)v13, &qword_2543521F0);
          }
          else
          {

          }
LABEL_40:
          v26 = &off_251094000;
          goto LABEL_4;
        }

      }
      else
      {

      }
LABEL_4:
      v25 += 2;
      if (!--v24)
        goto LABEL_42;
    }
  }
  v85 = 0;
LABEL_42:
  swift_bridgeObjectRelease();
  sub_24025A2CC((uint64_t)v85);
  return v86;
}

void sub_2402555EC(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

uint64_t processDediscoEvents(dediscoEventMap:telemetryRange:dailyTelemetryResults:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  v4 = type metadata accessor for TaskTelemetry(0);
  v3[13] = v4;
  v3[14] = *(_QWORD *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v5 = type metadata accessor for LedgerState();
  v3[16] = v5;
  v3[17] = *(_QWORD *)(v5 - 8);
  v3[18] = swift_task_alloc();
  v6 = type metadata accessor for DediscoAnalytics();
  v3[19] = v6;
  v3[20] = *(_QWORD *)(v6 - 8);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v3[23] = swift_task_alloc();
  v3[24] = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF18);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v7 = sub_2402BD48C();
  v3[31] = v7;
  v3[32] = *(_QWORD *)(v7 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_240255798()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  BOOL v66;
  uint64_t *v67;
  uint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  char v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _QWORD *v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  char v89;
  char v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _QWORD *v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  _BOOL8 v102;
  char v103;
  char v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);
  _QWORD *v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t);
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145[3];

  v1 = (_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 80);
  v134 = (_QWORD *)v1[22];
  v138 = v1[17];
  v132 = v1[14];
  v121 = (int *)v1[9];
  v122 = v1[7];
  v118 = v1[4];
  v119 = v1[10];
  v136 = (int *)v1[3];
  v120 = v1[2];
  v125 = v1[1];
  v3 = sub_24024E8AC();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDECB8);
  swift_allocObject();
  v4 = sub_24024D524(v3);
  swift_release();
  v123 = v2 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v2 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v130 = v5 & *(_QWORD *)(v2 + 64);
  v128 = (uint64_t)v4 + *(_QWORD *)(*v4 + 112);
  v124 = (unint64_t)(63 - v6) >> 6;
  v126 = v2;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v127 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v130)
    {
      v9 = __clz(__rbit64(v130));
      v129 = v8;
      v130 &= v130 - 1;
      v10 = v9 | (v8 << 6);
    }
    else
    {
      v11 = __OFADD__(v8, 1);
      v12 = v8 + 1;
      if (v11)
        goto LABEL_104;
      if (v12 >= v124)
      {
LABEL_94:
        swift_release();
        swift_release();
LABEL_95:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(unint64_t))(v144 + 8))(v127);
      }
      v13 = *(_QWORD *)(v123 + 8 * v12);
      if (!v13)
      {
        v14 = v12 + 1;
        if (v12 + 1 >= v124)
          goto LABEL_94;
        v13 = *(_QWORD *)(v123 + 8 * v14);
        if (!v13)
        {
          v14 = v12 + 2;
          if (v12 + 2 >= v124)
            goto LABEL_94;
          v13 = *(_QWORD *)(v123 + 8 * v14);
          if (!v13)
          {
            v14 = v12 + 3;
            if (v12 + 3 >= v124)
              goto LABEL_94;
            v13 = *(_QWORD *)(v123 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                v12 = v14 + 1;
                if (__OFADD__(v14, 1))
                  goto LABEL_105;
                if (v12 >= v124)
                  goto LABEL_94;
                v13 = *(_QWORD *)(v123 + 8 * v12);
                ++v14;
                if (v13)
                  goto LABEL_17;
              }
            }
          }
        }
        v12 = v14;
      }
LABEL_17:
      v129 = v12;
      v130 = (v13 - 1) & v13;
      v10 = __clz(__rbit64(v13)) + (v12 << 6);
    }
    v15 = (uint64_t *)(*(_QWORD *)(v126 + 48) + 16 * v10);
    v16 = v15[1];
    v137 = *v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v126 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    v135 = v17;
    swift_bridgeObjectRetain();
    if ((sub_2402BD8C4() & 1) != 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v127 = 0;
      goto LABEL_95;
    }
    v18 = **(double **)(v144 + 88);
    v19 = *(double *)(v125 + 8);
    result = swift_beginAccess();
    if (v19 > v18)
      break;
LABEL_4:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v8 = v129;
  }
  v20 = 0;
  v143 = v16;
  while (!__OFADD__(v20, 1))
  {
    sub_2402BD3FC();
    sub_2402BD42C();
    sub_24025B814();
    result = sub_2402BD60C();
    if ((result & 1) == 0)
      goto LABEL_97;
    v139 = v20;
    v142 = v20 + 1;
    v21 = *(_QWORD *)(v144 + 272);
    v22 = *(_QWORD *)(v144 + 240);
    v23 = *(_QWORD *)(v144 + 248);
    v24 = *(_QWORD *)(v144 + 232);
    v25 = *(_QWORD *)(v144 + 200);
    v26 = *(_QWORD *)(v144 + 208);
    v27 = v26 + *(int *)(v132 + 48);
    v28 = (void (*)(uint64_t, uint64_t, uint64_t))v134[2];
    v28(v26, *(_QWORD *)(v144 + 264), v23);
    v28(v27, v21, v23);
    v29 = v25 + *(int *)(v132 + 48);
    v28(v25, v26, v23);
    v133 = v28;
    v28(v29, v27, v23);
    v30 = (void (*)(uint64_t, uint64_t, uint64_t))v134[4];
    v30(v24, v25, v23);
    v31 = (void (*)(uint64_t, uint64_t))v134[1];
    v31(v29, v23);
    v32 = v25 + *(int *)(v132 + 48);
    v30(v25, v26, v23);
    v30(v32, v27, v23);
    v30(v24 + *(int *)(v138 + 36), v32, v23);
    v141 = v31;
    v31(v25, v23);
    sub_240238F2C(v24, v22, (uint64_t *)&unk_256FE0BD0);
    v33 = swift_task_alloc();
    *(_QWORD *)(v33 + 16) = v22;
    swift_bridgeObjectRetain();
    v34 = sub_24025698C((uint64_t (*)(char *))sub_24025B85C, v33, v135, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState, (void (*)(BOOL, uint64_t, uint64_t))sub_24029BD64);
    swift_task_dealloc();
    if (qword_2543528A0 != -1)
      swift_once();
    v35 = *(_QWORD *)(v144 + 240);
    v36 = *(_QWORD *)(v144 + 224);
    v37 = sub_2402BD4E0();
    __swift_project_value_buffer(v37, (uint64_t)qword_2543529A0);
    sub_2402391FC(v35, v36, (uint64_t *)&unk_256FE0BD0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v38 = sub_2402BD4C8();
    v39 = sub_2402BD960();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = *(_QWORD *)(v144 + 224);
      v41 = swift_slowAlloc();
      v131 = swift_slowAlloc();
      v145[0] = v131;
      *(_DWORD *)v41 = 134218498;
      *(_QWORD *)(v144 + 56) = *(_QWORD *)(v34 + 16);
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v144 + 64) = sub_24023D440(v137, v143, v145);
      sub_2402BD9FC();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v41 + 22) = 2080;
      *(_QWORD *)(v144 + 40) = 0;
      *(_QWORD *)(v144 + 48) = 0xE000000000000000;
      sub_2402BDB34();
      sub_2402BD6C0();
      sub_2402BDB34();
      *(_QWORD *)(v144 + 72) = sub_24023D440(*(_QWORD *)(v144 + 40), *(_QWORD *)(v144 + 48), v145);
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      sub_24023D378(v40, (uint64_t *)&unk_256FE0BD0);
      _os_log_impl(&dword_24022D000, v38, v39, "%ld events for %s in %s.", (uint8_t *)v41, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x242682188](v131, -1, -1);
      MEMORY[0x242682188](v41, -1, -1);
    }
    else
    {
      v42 = *(_QWORD *)(v144 + 224);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      sub_24023D378(v42, (uint64_t *)&unk_256FE0BD0);
    }

    v20 = v142;
    v43 = v18 + (double)v142 * 86400.0;
    if (*(_QWORD *)(v34 + 16))
    {
      v48 = *(_QWORD *)(v144 + 184);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v122 + 56))(v48, 1, 1, *(_QWORD *)(v144 + 128));
      sub_240256EE4(v48, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      sub_24023D378(v48, &qword_256FDEAE0);
      v49 = *(_QWORD *)(v34 + 16);
      if (v49)
      {
        v50 = v34 + ((*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
        swift_bridgeObjectRetain();
        v51 = *(_QWORD *)(v122 + 72);
        do
        {
          v52 = *(_QWORD *)(v144 + 144);
          sub_240238BF0(v50, v52, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
          sub_24025729C(v52, (uint64_t *)type metadata accessor for DediscoAnalytics);
          sub_240238C34(v52, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
          v50 += v51;
          --v49;
        }
        while (v49);
        swift_bridgeObjectRelease();
      }
      v53 = *(_QWORD *)(v144 + 264);
      v140 = *(_QWORD *)(v144 + 272);
      v54 = *(_QWORD *)(v144 + 248);
      v55 = *(_QWORD *)(v144 + 176);
      sub_240238BF0(v128, v55, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      swift_bridgeObjectRelease();
      v56 = (uint64_t *)(v55 + v121[8]);
      v57 = v143;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *v56 = v137;
      v56[1] = v143;
      v58 = v55 + v121[9];
      sub_24023D378(v58, &qword_2543521F0);
      v133(v58, v53, v54);
      v59 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v134[7];
      v59(v58, 0, 1, v54);
      v60 = v55 + v121[10];
      sub_24023D378(v60, &qword_2543521F0);
      v133(v60, v140, v54);
      v59(v60, 0, 1, v54);
      v61 = *(_QWORD *)(v120 + 16);
      if (v61)
      {
        v62 = *(_QWORD *)(v144 + 96)
            + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
        swift_bridgeObjectRetain();
        v63 = *(_QWORD *)(v118 + 72);
        while (2)
        {
          v64 = *(_QWORD *)(v144 + 120);
          sub_240238BF0(v62, v64, type metadata accessor for TaskTelemetry);
          v65 = (_QWORD *)(v64 + v136[7]);
          v66 = *v65 == v137 && v65[1] == v57;
          if (!v66 && (sub_2402BDD8C() & 1) == 0)
            goto LABEL_39;
          type metadata accessor for TelemetryBucketRange();
          if ((sub_2402BD450() & 1) == 0)
            goto LABEL_39;
          v67 = *(uint64_t **)(v144 + 176);
          v68 = *(_QWORD *)(*(_QWORD *)(v144 + 120) + v136[10]);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v145[0] = *v67;
          v70 = (_QWORD *)v145[0];
          *v67 = 0x8000000000000000;
          v72 = sub_240258860(0x6574656C706D6F43, 0xE900000000000064);
          v73 = v70[2];
          v74 = (v71 & 1) == 0;
          result = v73 + v74;
          if (__OFADD__(v73, v74))
            goto LABEL_98;
          v75 = v71;
          if (v70[3] >= result)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v71 & 1) == 0)
                goto LABEL_50;
            }
            else
            {
              result = (uint64_t)sub_24025ACA4();
              v70 = (_QWORD *)v145[0];
              if ((v75 & 1) == 0)
                goto LABEL_50;
            }
          }
          else
          {
            sub_24025913C(result, isUniquelyReferenced_nonNull_native);
            v70 = (_QWORD *)v145[0];
            result = sub_240258860(0x6574656C706D6F43, 0xE900000000000064);
            if ((v75 & 1) != (v76 & 1))
              return sub_2402BDDC8();
            v72 = result;
            if ((v75 & 1) == 0)
            {
LABEL_50:
              v70[(v72 >> 6) + 8] |= 1 << v72;
              v77 = (_QWORD *)(v70[6] + 16 * v72);
              *v77 = 0x6574656C706D6F43;
              v77[1] = 0xE900000000000064;
              *(_QWORD *)(v70[7] + 8 * v72) = v68;
              v78 = v70[2];
              v11 = __OFADD__(v78, 1);
              v79 = v78 + 1;
              if (v11)
                goto LABEL_101;
              v70[2] = v79;
LABEL_55:
              v80 = *(uint64_t **)(v144 + 176);
              v81 = *(_QWORD *)(v144 + 120);
              *v80 = (uint64_t)v70;
              swift_bridgeObjectRelease();
              v82 = *(_QWORD *)(v81 + v136[11]);
              v83 = swift_isUniquelyReferenced_nonNull_native();
              v145[0] = *v80;
              v84 = (_QWORD *)v145[0];
              *v80 = 0x8000000000000000;
              v86 = sub_240258860(0x64656C696146, 0xE600000000000000);
              v87 = v84[2];
              v88 = (v85 & 1) == 0;
              result = v87 + v88;
              if (__OFADD__(v87, v88))
                goto LABEL_99;
              v89 = v85;
              if (v84[3] >= result)
              {
                if ((v83 & 1) != 0)
                {
                  if ((v85 & 1) == 0)
                    goto LABEL_59;
                }
                else
                {
                  result = (uint64_t)sub_24025ACA4();
                  v84 = (_QWORD *)v145[0];
                  if ((v89 & 1) == 0)
                    goto LABEL_59;
                }
              }
              else
              {
                sub_24025913C(result, v83);
                v84 = (_QWORD *)v145[0];
                result = sub_240258860(0x64656C696146, 0xE600000000000000);
                if ((v89 & 1) != (v90 & 1))
                  return sub_2402BDDC8();
                v86 = result;
                if ((v89 & 1) == 0)
                {
LABEL_59:
                  v84[(v86 >> 6) + 8] |= 1 << v86;
                  v91 = (_QWORD *)(v84[6] + 16 * v86);
                  *v91 = 0x64656C696146;
                  v91[1] = 0xE600000000000000;
                  *(_QWORD *)(v84[7] + 8 * v86) = v82;
                  v92 = v84[2];
                  v11 = __OFADD__(v92, 1);
                  v93 = v92 + 1;
                  if (v11)
                    goto LABEL_102;
                  v84[2] = v93;
LABEL_64:
                  v94 = *(uint64_t **)(v144 + 176);
                  v95 = *(_QWORD *)(v144 + 120);
                  *v94 = (uint64_t)v84;
                  swift_bridgeObjectRelease();
                  v96 = *(_QWORD *)(v95 + v136[12]);
                  v97 = swift_isUniquelyReferenced_nonNull_native();
                  v145[0] = *v94;
                  v98 = (_QWORD *)v145[0];
                  *v94 = 0x8000000000000000;
                  v100 = sub_240258860(0x6465727265666544, 0xE800000000000000);
                  v101 = v98[2];
                  v102 = (v99 & 1) == 0;
                  result = v101 + v102;
                  if (__OFADD__(v101, v102))
                    goto LABEL_100;
                  v103 = v99;
                  if (v98[3] >= result)
                  {
                    if ((v97 & 1) != 0)
                    {
                      v57 = v143;
                      if ((v99 & 1) == 0)
                        goto LABEL_71;
                    }
                    else
                    {
                      result = (uint64_t)sub_24025ACA4();
                      v98 = (_QWORD *)v145[0];
                      v57 = v143;
                      if ((v103 & 1) == 0)
                        goto LABEL_71;
                    }
                  }
                  else
                  {
                    sub_24025913C(result, v97);
                    v98 = (_QWORD *)v145[0];
                    result = sub_240258860(0x6465727265666544, 0xE800000000000000);
                    if ((v103 & 1) != (v104 & 1))
                      return sub_2402BDDC8();
                    v100 = result;
                    v57 = v143;
                    if ((v103 & 1) == 0)
                    {
LABEL_71:
                      v98[(v100 >> 6) + 8] |= 1 << v100;
                      v105 = (_QWORD *)(v98[6] + 16 * v100);
                      *v105 = 0x6465727265666544;
                      v105[1] = 0xE800000000000000;
                      *(_QWORD *)(v98[7] + 8 * v100) = v96;
                      v106 = v98[2];
                      v11 = __OFADD__(v106, 1);
                      v107 = v106 + 1;
                      if (v11)
                        goto LABEL_103;
                      v98[2] = v107;
LABEL_38:
                      **(_QWORD **)(v144 + 176) = v98;
                      swift_bridgeObjectRelease();
LABEL_39:
                      sub_240238C34(*(_QWORD *)(v144 + 120), type metadata accessor for TaskTelemetry);
                      v62 += v63;
                      if (!--v61)
                      {
                        swift_bridgeObjectRelease();
                        goto LABEL_80;
                      }
                      continue;
                    }
                  }
                  *(_QWORD *)(v98[7] + 8 * v100) = v96;
                  goto LABEL_38;
                }
              }
              *(_QWORD *)(v84[7] + 8 * v86) = v82;
              goto LABEL_64;
            }
          }
          break;
        }
        *(_QWORD *)(v70[7] + 8 * v72) = v68;
        goto LABEL_55;
      }
LABEL_80:
      sub_240238BF0(*(_QWORD *)(v144 + 176), *(_QWORD *)(v144 + 168), (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v108 = v127;
      else
        v108 = sub_240258180(0, *(_QWORD *)(v127 + 16) + 1, 1, v127, &qword_256FDEFC0, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      v110 = *(_QWORD *)(v108 + 16);
      v109 = *(_QWORD *)(v108 + 24);
      if (v110 >= v109 >> 1)
        v111 = sub_240258180(v109 > 1, v110 + 1, 1, v108, &qword_256FDEFC0, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      else
        v111 = v108;
      v113 = *(_QWORD *)(v144 + 264);
      v112 = *(_QWORD *)(v144 + 272);
      v115 = *(_QWORD *)(v144 + 240);
      v114 = *(_QWORD *)(v144 + 248);
      v116 = *(_QWORD *)(v144 + 168);
      v117 = *(_QWORD *)(v144 + 176);
      *(_QWORD *)(v111 + 16) = v110 + 1;
      v127 = v111;
      sub_24023DBCC(v116, v111+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v110, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      v141(v113, v114);
      v141(v112, v114);
      sub_24023D378(v115, (uint64_t *)&unk_256FE0BD0);
      result = sub_240238C34(v117, (uint64_t (*)(_QWORD))type metadata accessor for DediscoAnalytics);
      if (v19 <= v43)
        goto LABEL_4;
    }
    else
    {
      v44 = *(_QWORD *)(v144 + 264);
      v45 = *(_QWORD *)(v144 + 272);
      v47 = *(_QWORD *)(v144 + 240);
      v46 = *(_QWORD *)(v144 + 248);
      swift_bridgeObjectRelease();
      v141(v44, v46);
      v141(v45, v46);
      result = sub_24023D378(v47, (uint64_t *)&unk_256FE0BD0);
      v20 = v139 + 1;
      if (v19 <= v43)
        goto LABEL_4;
    }
  }
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t sub_2402567FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LedgerState();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402BD48C();
  sub_24025B814();
  v10 = sub_2402BD600();
  sub_240238BF0(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  sub_2402391FC(a2, (uint64_t)v6, (uint64_t *)&unk_256FE0BD0);
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = sub_2402BD600() ^ 1;
  sub_24023D378((uint64_t)v6, (uint64_t *)&unk_256FE0BD0);
  sub_240238C34((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  return v11 & 1;
}

uint64_t sub_240256968(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_24025698C(a1, a2, a3, type metadata accessor for TaskStatusEvent, (void (*)(BOOL, uint64_t, uint64_t))sub_24029BE04);
}

uint64_t sub_24025698C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(BOOL, uint64_t, uint64_t);
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;
  uint64_t v30;

  v22 = a5;
  v6 = a4;
  v28 = a1;
  v29 = a2;
  v8 = a4(0);
  v27 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v22 - v12;
  v14 = MEMORY[0x24BEE4AF8];
  v30 = MEMORY[0x24BEE4AF8];
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v15 = 0;
    v16 = MEMORY[0x24BEE4AF8];
    v23 = v6;
    v24 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v17 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      v18 = *(_QWORD *)(v27 + 72);
      sub_240238BF0(a3 + v17 + v18 * v15, (uint64_t)v13, v6);
      v14 = v29;
      v19 = v28(v13);
      if (v5)
      {
        sub_240238C34((uint64_t)v13, v6);
        swift_release();
        swift_bridgeObjectRelease();
        return v14;
      }
      if ((v19 & 1) != 0)
      {
        sub_24023DBCC((uint64_t)v13, v26, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v22(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v30;
        v21 = *(_QWORD *)(v30 + 16);
        v20 = *(_QWORD *)(v30 + 24);
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1);
          v16 = v30;
        }
        *(_QWORD *)(v16 + 16) = v21 + 1;
        v6 = v23;
        result = sub_24023DBCC(v26, v16 + v17 + v21 * v18, v23);
        a3 = v24;
      }
      else
      {
        result = sub_240238C34((uint64_t)v13, v6);
      }
      if (v25 == ++v15)
      {
        v14 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

uint64_t sub_240256B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v2 = type metadata accessor for LedgerState();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MLHostAnalytics();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (unint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v14((char *)&v20 - v12, 1, 1, v2);
  v15 = v1 + qword_256FE1408;
  swift_beginAccess();
  sub_24024A200((uint64_t)v13, v15, &qword_256FDEAE0);
  swift_endAccess();
  v16 = MEMORY[0x24BEE4AF8];
  *v7 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  v7[1] = sub_240248FF0(v16);
  v14((char *)v7 + *(int *)(v5 + 24), 1, 1, v2);
  v14((char *)v7 + *(int *)(v5 + 28), 1, 1, v2);
  v17 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 112);
  swift_beginAccess();
  sub_24025BC6C((uint64_t)v7, v17, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
  swift_endAccess();
  sub_2402391FC(v22, (uint64_t)v11, &qword_256FDEAE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
    return sub_24023D378((uint64_t)v11, &qword_256FDEAE0);
  v19 = v21;
  sub_24023DBCC((uint64_t)v11, v21, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  sub_240238BF0(v19, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v14(v13, 0, 1, v2);
  swift_beginAccess();
  sub_24024A200((uint64_t)v13, v15, &qword_256FDEAE0);
  swift_endAccess();
  sub_240238BF0(v19, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v14(v13, 0, 1, v2);
  swift_beginAccess();
  sub_24024A200((uint64_t)v13, v17 + *(int *)(v5 + 24), &qword_256FDEAE0);
  sub_240238BF0(v19, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v14(v13, 0, 1, v2);
  sub_24024A200((uint64_t)v13, v17 + *(int *)(v5 + 28), &qword_256FDEAE0);
  swift_endAccess();
  return sub_240238C34(v19, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
}

uint64_t sub_240256ED8(uint64_t a1)
{
  return sub_240256EE4(a1, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
}

uint64_t sub_240256EE4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;

  v30 = a2;
  v31 = a1;
  v4 = type metadata accessor for LedgerState();
  v29 = *(_QWORD *)(v4 - 8);
  v5 = v29;
  MEMORY[0x24BDAC7A8](v4);
  v28 = (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)a2(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (unint64_t *)((char *)&v27 - v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v16((char *)&v27 - v14, 1, 1, v4);
  v17 = v2 + qword_256FE1408;
  swift_beginAccess();
  v27 = v17;
  sub_24024A200((uint64_t)v15, v17, &qword_256FDEAE0);
  swift_endAccess();
  v18 = MEMORY[0x24BEE4AF8];
  *v9 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  v9[1] = sub_240248FF0(v18);
  v16((char *)v9 + v7[6], 1, 1, v4);
  v16((char *)v9 + v7[7], 1, 1, v4);
  v19 = (unint64_t *)((char *)v9 + v7[8]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (char *)v9 + v7[9];
  v21 = sub_2402BD48C();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  v22((char *)v9 + v7[10], 1, 1, v21);
  v23 = v2 + *(_QWORD *)(*(_QWORD *)v2 + 112);
  swift_beginAccess();
  sub_24025BC6C((uint64_t)v9, v23, v30);
  swift_endAccess();
  sub_2402391FC(v31, (uint64_t)v13, &qword_256FDEAE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v13, 1, v4) == 1)
    return sub_24023D378((uint64_t)v13, &qword_256FDEAE0);
  v25 = v28;
  sub_24023DBCC((uint64_t)v13, v28, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  sub_240238BF0(v25, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v16(v15, 0, 1, v4);
  v26 = v27;
  swift_beginAccess();
  sub_24024A200((uint64_t)v15, v26, &qword_256FDEAE0);
  swift_endAccess();
  sub_240238BF0(v25, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v16(v15, 0, 1, v4);
  swift_beginAccess();
  sub_24024A200((uint64_t)v15, v23 + v7[6], &qword_256FDEAE0);
  sub_240238BF0(v25, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  v16(v15, 0, 1, v4);
  sub_24024A200((uint64_t)v15, v23 + v7[7], &qword_256FDEAE0);
  swift_endAccess();
  return sub_240238C34(v25, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
}

uint64_t sub_240257284(uint64_t a1)
{
  return sub_24025729C(a1, (uint64_t *)type metadata accessor for MLHostAnalytics);
}

uint64_t sub_240257290(uint64_t a1)
{
  return sub_24025729C(a1, (uint64_t *)type metadata accessor for CustomEventAnalytics);
}

uint64_t sub_24025729C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  char *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85[3];

  v82 = a2;
  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v79 - v9;
  v11 = type metadata accessor for LedgerState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t **)((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x24BDAC7A8](v13);
  v81 = (uint64_t *)((char *)&v79 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v79 - v18);
  v20 = v3 + qword_256FE1408;
  swift_beginAccess();
  sub_2402391FC(v20, (uint64_t)v10, &qword_256FDEAE0);
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  v83 = v11;
  if (v21 == 1)
  {
    v22 = &qword_256FDEAE0;
    sub_24023D378((uint64_t)v10, &qword_256FDEAE0);
    sub_240238BF0(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    v81 = *(uint64_t **)(v12 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v81)(v8, 0, 1, v11);
    swift_beginAccess();
    sub_24024A200((uint64_t)v8, v20, &qword_256FDEAE0);
    swift_endAccess();
    v24 = *(uint64_t **)a1;
    v23 = *(_QWORD *)(a1 + 8);
    v25 = (uint64_t *)a1;
    v26 = (uint64_t *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 112));
    swift_beginAccess();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84 = *v26;
    v28 = v84;
    *v26 = 0x8000000000000000;
    v30 = sub_240258860((uint64_t)v24, v23);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
    {
      __break(1u);
      goto LABEL_30;
    }
    LOBYTE(v20) = v29;
    if (*(_QWORD *)(v28 + 24) >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        goto LABEL_33;
    }
    else
    {
      sub_24025913C(v33, isUniquelyReferenced_nonNull_native);
      v28 = v84;
      v34 = sub_240258860((uint64_t)v24, v23);
      if ((v20 & 1) != (v35 & 1))
        goto LABEL_38;
      v30 = v34;
    }
    while (1)
    {
      *v26 = v28;
      swift_bridgeObjectRelease();
      v52 = (_QWORD *)*v26;
      if ((v20 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_2402B58CC(&v84);
        v53 = v84;
        v52[(v30 >> 6) + 8] |= 1 << v30;
        v54 = (uint64_t **)(v52[6] + 16 * v30);
        *v54 = v24;
        v54[1] = (uint64_t *)v23;
        *(_QWORD *)(v52[7] + 8 * v30) = v53;
        v55 = v52[2];
        v56 = __OFADD__(v55, 1);
        v57 = v55 + 1;
        if (v56)
        {
          __break(1u);
          goto LABEL_35;
        }
        v52[2] = v57;
      }
      swift_bridgeObjectRetain();
      v58 = v52[7];
      v59 = *(_QWORD *)(v58 + 8 * v30);
      v56 = __OFADD__(v59, 1);
      v60 = v59 + 1;
      if (!v56)
      {
        *(_QWORD *)(v58 + 8 * v30) = v60;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_240238BF0((uint64_t)v25, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        v61 = v83;
        v62 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v81;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v81)(v8, 0, 1, v83);
        swift_beginAccess();
        v63 = ((uint64_t (*)(_QWORD))v82)(0);
        sub_24024A200((uint64_t)v8, (uint64_t)v26 + *(int *)(v63 + 24), &qword_256FDEAE0);
        sub_240238BF0((uint64_t)v25, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        v62(v8, 0, 1, v61);
        sub_24024A200((uint64_t)v8, (uint64_t)v26 + *(int *)(v63 + 28), &qword_256FDEAE0);
        return swift_endAccess();
      }
LABEL_30:
      __break(1u);
LABEL_31:
      swift_once();
LABEL_9:
      v44 = sub_2402BD4E0();
      __swift_project_value_buffer(v44, (uint64_t)qword_2543529A0);
      v24 = v81;
      sub_240238BF0(v83, (uint64_t)v81, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v26 = v82;
      v45 = v79;
      sub_240238BF0((uint64_t)v82, (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v46 = sub_2402BD4C8();
      v47 = sub_2402BD960();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc();
        v49 = swift_slowAlloc();
        v85[0] = v49;
        *(_DWORD *)v48 = 136315394;
        v50 = *v24;
        v51 = v24[1];
        swift_bridgeObjectRetain();
        v84 = sub_24023D440(v50, v51, v85);
        sub_2402BD9FC();
        swift_bridgeObjectRelease();
        sub_240238C34((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        *(_WORD *)(v48 + 12) = 2080;
        v24 = *v45;
        v20 = (unint64_t)v45[1];
        swift_bridgeObjectRetain();
        v84 = sub_24023D440((uint64_t)v24, v20, v85);
        v26 = v82;
        sub_2402BD9FC();
        swift_bridgeObjectRelease();
        sub_240238C34((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        _os_log_impl(&dword_24022D000, v46, v47, "Invalid StateMachine transition, incrementing state: %s -> %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242682188](v49, -1, -1);
        MEMORY[0x242682188](v48, -1, -1);
      }
      else
      {
        sub_240238C34((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        sub_240238C34((uint64_t)v45, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      }

      v8 = (char *)*v26;
      v22 = (uint64_t *)v26[1];
      v25 = (uint64_t *)&v80[*(_QWORD *)(*(_QWORD *)v80 + 112)];
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v84 = *v25;
      v65 = v84;
      *v25 = 0x8000000000000000;
      v30 = sub_240258860((uint64_t)v8, (uint64_t)v22);
      v67 = *(_QWORD *)(v65 + 16);
      v68 = (v66 & 1) == 0;
      v69 = v67 + v68;
      if (!__OFADD__(v67, v68))
        break;
      __break(1u);
LABEL_33:
      sub_24025ACA4();
      v28 = v84;
    }
    LOBYTE(v52) = v66;
    if (*(_QWORD *)(v65 + 24) >= v69)
    {
      if ((v23 & 1) == 0)
        goto LABEL_36;
      while (1)
      {
LABEL_23:
        *v25 = v65;
        swift_bridgeObjectRelease();
        v25 = (uint64_t *)*v25;
        if ((v52 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          sub_2402B58CC(&v84);
          v72 = v84;
          v25[(v30 >> 6) + 8] |= 1 << v30;
          v73 = (_QWORD *)(v25[6] + 16 * v30);
          *v73 = v8;
          v73[1] = v22;
          *(_QWORD *)(v25[7] + 8 * v30) = v72;
          v74 = v25[2];
          v56 = __OFADD__(v74, 1);
          v75 = v74 + 1;
          if (v56)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25[2] = v75;
        }
        swift_bridgeObjectRetain();
        v76 = v25[7];
        v77 = *(_QWORD *)(v76 + 8 * v30);
        v56 = __OFADD__(v77, 1);
        v78 = v77 + 1;
        if (!v56)
        {
          *(_QWORD *)(v76 + 8 * v30) = v78;
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v43 = v83;
          return sub_240238C34(v43, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        }
LABEL_35:
        __break(1u);
LABEL_36:
        sub_24025ACA4();
        v65 = v84;
      }
    }
    sub_24025913C(v69, v23);
    v65 = v84;
    v70 = sub_240258860((uint64_t)v8, (uint64_t)v22);
    if ((v52 & 1) == (v71 & 1))
    {
      v30 = v70;
      goto LABEL_23;
    }
LABEL_38:
    result = sub_2402BDDC8();
    __break(1u);
  }
  else
  {
    v79 = v15;
    v80 = v8;
    sub_24023DBCC((uint64_t)v10, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    v36 = v3;
    v38 = *v19;
    v37 = v19[1];
    v39 = (uint64_t *)a1;
    v40 = *(_QWORD *)a1;
    v41 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v40) = sub_2402B5068(v38, v37, v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      v80 = (char *)v36;
      v82 = v39;
      v83 = (uint64_t)v19;
      if (qword_2543528A0 == -1)
        goto LABEL_9;
      goto LABEL_31;
    }
    sub_240257B24(v19, v39, (uint64_t (*)(_QWORD))v82);
    v42 = (uint64_t)v80;
    sub_240238BF0((uint64_t)v39, (uint64_t)v80, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v42, 0, 1, v83);
    swift_beginAccess();
    sub_24024A200(v42, v20, &qword_256FDEAE0);
    swift_endAccess();
    v43 = (uint64_t)v19;
    return sub_240238C34(v43, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  }
  return result;
}

uint64_t sub_240257B24(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);
  uint64_t v55;
  _QWORD *v56;

  v54 = a3;
  v5 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v55 = *a1;
  v13 = *a2;
  v12 = a2[1];
  v53 = type metadata accessor for LedgerState();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2402BD474();
  v15 = v14;
  v16 = (_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 112));
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v56 = (_QWORD *)*v16;
  v18 = v56;
  *v16 = 0x8000000000000000;
  v20 = sub_240258860(v13, v12);
  v21 = v18[2];
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = v19;
  if (v18[3] >= v23)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_27;
    while (1)
    {
LABEL_6:
      *v16 = v18;
      swift_bridgeObjectRelease();
      v26 = (_QWORD *)*v16;
      if ((v4 & 1) == 0)
      {
        v26[(v20 >> 6) + 8] |= 1 << v20;
        v27 = (uint64_t *)(v26[6] + 16 * v20);
        *v27 = v13;
        v27[1] = v12;
        *(_QWORD *)(v26[7] + 8 * v20) = 0;
        v28 = v26[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
        {
          __break(1u);
LABEL_29:
          sub_24025AAD4();
          v35 = v56;
          goto LABEL_15;
        }
        v26[2] = v30;
        swift_bridgeObjectRetain();
      }
      v31 = v26[7];
      v32 = *(_QWORD *)(v31 + 8 * v20);
      v29 = __OFADD__(v32, 1);
      v33 = v32 + 1;
      if (v29)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      *(_QWORD *)(v31 + 8 * v20) = v33;
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v34 = swift_isUniquelyReferenced_nonNull_native();
      v56 = (_QWORD *)v16[1];
      v35 = v56;
      v16[1] = 0x8000000000000000;
      v20 = sub_2402587B4(v55, v11, v13, v12);
      v37 = v35[2];
      v38 = (v36 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_25;
      v4 = v36;
      if (v35[3] >= v39)
      {
        if ((v34 & 1) != 0)
          goto LABEL_15;
        goto LABEL_29;
      }
      sub_240258DCC(v39, v34);
      v35 = v56;
      v40 = sub_2402587B4(v55, v11, v13, v12);
      if ((v4 & 1) != (v41 & 1))
        goto LABEL_31;
      v20 = v40;
LABEL_15:
      v16[1] = v35;
      swift_bridgeObjectRelease();
      v42 = v16[1];
      if ((v4 & 1) == 0)
      {
        sub_24025A738(v20, v55, v11, v13, v12, 0, (_QWORD *)v16[1], 1.79769313e308, 0.0, 0.0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v43 = *(_QWORD *)(v42 + 56);
      v44 = (double *)(v43 + 32 * v20);
      if (v15 < *v44)
        *v44 = v15;
      v46 = v44[1];
      v45 = v44 + 1;
      if (v46 < v15)
        *v45 = v15;
      v47 = v43 + 32 * v20;
      v48 = *(_QWORD *)(v47 + 24);
      v29 = __OFADD__(v48, 1);
      v49 = v48 + 1;
      if (!v29)
      {
        *(_QWORD *)(v47 + 24) = v49;
        *(double *)(v47 + 16) = *(double *)(v47 + 16) + (v15 - *(double *)(v47 + 16)) / (double)v49;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_240238BF0((uint64_t)a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v10, 0, 1);
        swift_beginAccess();
        v50 = v54(0);
        sub_24024A200((uint64_t)v10, (uint64_t)v16 + *(int *)(v50 + 28), &qword_256FDEAE0);
        return swift_endAccess();
      }
LABEL_26:
      __break(1u);
LABEL_27:
      sub_24025ACA4();
      v18 = v56;
    }
  }
  sub_24025913C(v23, isUniquelyReferenced_nonNull_native);
  v18 = v56;
  v24 = sub_240258860(v13, v12);
  if ((v4 & 1) == (v25 & 1))
  {
    v20 = v24;
    goto LABEL_6;
  }
  sub_2402BDDC8();
  __break(1u);
LABEL_31:
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

_QWORD *sub_240257F54(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2543524E0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24025B724(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_240258060(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF28);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24025B634(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_24025816C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEFC8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
}

uint64_t sub_240258180(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_2402BDB40();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24025BA50(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_24025838C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF90);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24025B878(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_240258498(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEFB8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_24025B960(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2402585C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEFB0, type metadata accessor for TaskStatusEvent);
}

uint64_t sub_2402585D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEFA0, type metadata accessor for TaskTelemetry);
}

uint64_t sub_2402585E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEFA8, type metadata accessor for DeviceTelemetry);
}

uint64_t sub_2402585FC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEF98, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
}

_QWORD *sub_240258610(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_240258624(a1, a2, a3, a4, &qword_256FDEF80, &qword_256FDEF88);
}

_QWORD *sub_240258624(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24025BB68(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_24025873C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEF68, type metadata accessor for TaskErrorEvent);
}

_QWORD *sub_240258750(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_240258624(a1, a2, a3, a4, &qword_256FDEF70, &qword_256FDEF78);
}

uint64_t sub_240258764(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_240258180(a1, a2, a3, a4, &qword_256FDEF50, type metadata accessor for TaskCustomEvent);
}

_QWORD *sub_240258778(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_240258624(a1, a2, a3, a4, &qword_256FDEF58, &qword_256FDEF60);
}

_QWORD *sub_24025878C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_240258624(a1, a2, a3, a4, &qword_256FDEF40, &qword_256FDEF48);
}

_QWORD *sub_2402587A0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_240258624(a1, a2, a3, a4, &qword_256FDEF30, &qword_256FDEF38);
}

unint64_t sub_2402587B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  sub_2402BDE04();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  v8 = sub_2402BDE34();
  return sub_2402588C4(a1, a2, a3, a4, v8);
}

unint64_t sub_240258860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_2402BDE04();
  sub_2402BD6A8();
  v4 = sub_2402BDE34();
  return sub_2402589C0(a1, a2, v4);
}

unint64_t sub_2402588C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;

  v6 = v5 + 64;
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = a5 & ~v7;
  if (((*(_QWORD *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v13 = ~v7;
    v14 = *(_QWORD *)(v5 + 48);
    do
    {
      v15 = (_QWORD *)(v14 + 32 * v8);
      v16 = v15[2];
      v17 = v15[3];
      v18 = *v15 == a1 && v15[1] == a2;
      if (v18 || (sub_2402BDD8C() & 1) != 0)
      {
        v19 = v16 == a3 && v17 == a4;
        if (v19 || (sub_2402BDD8C() & 1) != 0)
          break;
      }
      v8 = (v8 + 1) & v13;
    }
    while (((*(_QWORD *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_2402589C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2402BDD8C() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2402BDD8C() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_240258AA0(uint64_t a1, int a2)
{
  return sub_240259DE4(a1, a2, &qword_256FDEC78, &qword_256FDEC88);
}

uint64_t sub_240258AB4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_254352738);
  v38 = a2;
  v6 = sub_2402BDB70();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_2402BDE04();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_240258DC0(uint64_t a1, char a2)
{
  return sub_240259754(a1, a2, &qword_256FDEC68);
}

uint64_t sub_240258DCC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  __int128 v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC90);
  v43 = a2;
  v6 = sub_2402BDB70();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v21 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v40)
          goto LABEL_33;
        v24 = v41[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v40)
            goto LABEL_33;
          v24 = v41[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v40)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v43 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v5 + 32);
                if (v39 >= 64)
                  bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v39;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v41[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v13 >= v40)
                  goto LABEL_33;
                v24 = v41[v13];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v13 = v25;
          }
        }
LABEL_30:
        v10 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = 32 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v35 = v31[2];
      v34 = v31[3];
      v36 = *(_QWORD *)(v5 + 56) + v30;
      v44 = *(_OWORD *)v36;
      v37 = *(_QWORD *)(v36 + 16);
      v38 = *(_QWORD *)(v36 + 24);
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_2402BDE04();
      swift_bridgeObjectRetain();
      sub_2402BD6A8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_2402BD6A8();
      swift_bridgeObjectRelease();
      result = sub_2402BDE34();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v16 == v27;
          if (v16 == v27)
            v16 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 32 * v17;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
      *v19 = v33;
      v19[1] = v32;
      v19[2] = v35;
      v19[3] = v34;
      v20 = *(_QWORD *)(v7 + 56) + v18;
      *(_OWORD *)v20 = v44;
      *(_QWORD *)(v20 + 16) = v37;
      *(_QWORD *)(v20 + 24) = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_24025913C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC98);
  v37 = a2;
  v6 = sub_2402BDB70();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_2402BDE04();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_240259444(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  __int128 v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = a2;
  v8 = sub_2402BDB70();
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v37 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v24 >= v36)
          goto LABEL_33;
        v25 = v37[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_33;
          v25 = v37[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_33:
              swift_release();
              v4 = v3;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v6 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v37[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_40;
                if (v15 >= v36)
                  goto LABEL_33;
                v25 = v37[v15];
                ++v26;
                if (v25)
                  goto LABEL_30;
              }
            }
            v15 = v26;
          }
        }
LABEL_30:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v38 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      sub_2402BDE04();
      sub_2402BD6A8();
      result = sub_2402BDE34();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v38;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release();
  *v4 = v9;
  return result;
}

uint64_t sub_240259748(uint64_t a1, char a2)
{
  return sub_240259754(a1, a2, &qword_256FDEC50);
}

uint64_t sub_240259754(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = sub_2402BDB70();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_2402BDE04();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_240259A64(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for MLHostAnalytics();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC38);
  v43 = a2;
  v9 = sub_2402BDB70();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      sub_24023DBCC(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    }
    else
    {
      sub_240238BF0(v30, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
      swift_bridgeObjectRetain();
    }
    sub_2402BDE04();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = sub_24023DBCC((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_240259DE4(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;

  v6 = v4;
  v48 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v46 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v47 = a2;
  v12 = sub_2402BDB70();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v4;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_34;
      v27 = v45[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_34:
          swift_release();
          v6 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v20 >= v44)
              goto LABEL_34;
            v27 = v45[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v24);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(v46 + 72);
    v33 = *(_QWORD *)(v11 + 56) + v32 * v24;
    if ((v47 & 1) != 0)
    {
      sub_240238F2C(v33, (uint64_t)v10, v48);
    }
    else
    {
      sub_2402391FC(v33, (uint64_t)v10, v48);
      swift_bridgeObjectRetain();
    }
    sub_2402BDE04();
    sub_2402BD6A8();
    result = sub_2402BDE34();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    *v22 = v31;
    v22[1] = v30;
    result = sub_240238F2C((uint64_t)v10, *(_QWORD *)(v13 + 56) + v32 * v21, v48);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v6 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v11 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v13;
  return result;
}

uint64_t sub_24025A15C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_24025A5C8(a1, a2, a3, a4, &qword_256FDEC78, &qword_256FDEC88);
}

void sub_24025A170(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_240258860(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24025A918();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_240258AB4(v15, a4 & 1);
  v20 = sub_240258860(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_2402BDDC8();
  __break(1u);
}

uint64_t sub_24025A2CC(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_24025A2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24025A2F4(a1, a2, a3, a4, a5, &qword_256FDEC60);
}

uint64_t sub_24025A2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24025A2F4(a1, a2, a3, a4, a5, &qword_256FDEC58);
}

uint64_t sub_24025A2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;

  v8 = v6;
  v14 = *v6;
  v16 = sub_240258860(a3, a4);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    sub_24025AE50(a6);
LABEL_7:
    v22 = (_QWORD *)*v8;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 16 * v16);
      result = swift_release();
      *v23 = a1;
      v23[1] = a2;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a3;
    v27[1] = a4;
    v28 = (_QWORD *)(v22[7] + 16 * v16);
    *v28 = a1;
    v28[1] = a2;
    v29 = v22[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (!v30)
    {
      v22[2] = v31;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_240259444(v19, a5 & 1, a6);
  v25 = sub_240258860(a3, a4);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v8;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

uint64_t sub_24025A474(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_240258860(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for MLHostAnalytics();
        return sub_24025BC6C(a1, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_24025B1C0();
      goto LABEL_7;
    }
    sub_240259A64(v15, a4 & 1);
    v22 = sub_240258860(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24025A7DC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

uint64_t sub_24025A5B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_24025A5C8(a1, a2, a3, a4, &qword_256FDEAE0, &qword_256FDEC48);
}

uint64_t sub_24025A5C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v6;
  _QWORD **v9;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;

  v9 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_240258860(a2, a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7];
        v24 = __swift_instantiateConcreteTypeFromMangledName(a5);
        return sub_24024A200(a1, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v16, a5);
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_24025B404(a5, a6);
      goto LABEL_7;
    }
    sub_240259DE4(v19, a4 & 1, a5, a6);
    v26 = sub_240258860(a2, a3);
    if ((v20 & 1) == (v27 & 1))
    {
      v16 = v26;
      v22 = *v9;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_24025A86C(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

uint64_t sub_24025A72C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_24025A86C(a1, a2, a3, a4, a5, &qword_256FDEC78);
}

unint64_t sub_24025A738(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, double a8, double a9, double a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a7[(result >> 6) + 8] |= 1 << result;
  v10 = (_QWORD *)(a7[6] + 32 * result);
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v11 = a7[7] + 32 * result;
  *(double *)v11 = a8;
  *(double *)(v11 + 8) = a9;
  *(double *)(v11 + 16) = a10;
  *(_QWORD *)(v11 + 24) = a6;
  v12 = a7[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a7[2] = v14;
  return result;
}

unint64_t sub_24025A794(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_24025A7DC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for MLHostAnalytics();
  result = sub_24023DBCC(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

uint64_t sub_24025A86C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t *a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = __swift_instantiateConcreteTypeFromMangledName(a6);
  result = sub_240238F2C(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

void *sub_24025A904()
{
  return sub_24025B404(&qword_256FDEC78, &qword_256FDEC88);
}

id sub_24025A918()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_254352738);
  v2 = *v0;
  v3 = sub_2402BDB64();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24025AAC8()
{
  return sub_24025B014(&qword_256FDEC68);
}

void *sub_24025AAD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC90);
  v2 = *v0;
  v3 = sub_2402BDB64();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = *(_QWORD *)(v2 + 56) + v16;
    v23 = *(_QWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 24);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)v22;
    *v25 = v19;
    v25[1] = v18;
    v25[2] = v20;
    v25[3] = v21;
    v27 = *(_QWORD *)(v4 + 56) + v16;
    *(_OWORD *)v27 = v26;
    *(_QWORD *)(v27 + 16) = v23;
    *(_QWORD *)(v27 + 24) = v24;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24025ACA4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC98);
  v2 = *v0;
  v3 = sub_2402BDB64();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24025AE50(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_2402BDB64();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24025B008()
{
  return sub_24025B014(&qword_256FDEC50);
}

void *sub_24025B014(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_2402BDB64();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_24025B1C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for MLHostAnalytics();
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC38);
  v5 = *v0;
  v6 = sub_2402BDB64();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_240238BF0(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_24023DBCC((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24025B404(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v29 = v2;
  v8 = *v2;
  v9 = sub_2402BDB64();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_2402391FC(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_240238F2C((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24025B634(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24025B724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

unint64_t sub_24025B814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDEF20;
  if (!qword_256FDEF20)
  {
    v1 = sub_2402BD48C();
    result = MEMORY[0x2426820F8](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_256FDEF20);
  }
  return result;
}

uint64_t sub_24025B85C(uint64_t a1)
{
  uint64_t v1;

  return sub_2402567FC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

char *sub_24025B878(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24025B960(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24025BA50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24025BB68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24025BC6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_24025BCB0()
{
  unint64_t result;

  result = qword_256FE0BF0;
  if (!qword_256FE0BF0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256FE0BF0);
  }
  return result;
}

uint64_t sub_24025BCEC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void sub_24025BD28(void *a1)
{
  uint64_t v1;

  sub_240253F2C(a1, v1);
}

_QWORD *getMLHostTaskGraph()()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB40);
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  v0[4] = sub_240249150(MEMORY[0x24BEE4AF8]);
  v0[2] = 0x724774736F484C4DLL;
  v0[3] = 0xEB00000000687061;
  v2 = sub_240249150(v1);
  swift_beginAccess();
  v0[4] = v2;
  swift_bridgeObjectRelease();
  swift_retain();
  sub_24025C450((uint64_t)&unk_25108ACB8, (uint64_t)v0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_240249838(0x7261745320746F4ELL, 0xEB00000000646574, 0x676E696E6E7552, 0xE700000000000000);
  sub_240249838(0x7261745320746F4ELL, 0xEB00000000646574, 0x6465727265666544, 0xE800000000000000);
  sub_240249838(0x676E696E6E7552, 0xE700000000000000, 0x6574656C706D6F43, 0xE900000000000064);
  sub_240249838(0x676E696E6E7552, 0xE700000000000000, 0x6465727265666544, 0xE800000000000000);
  sub_240249838(0x676E696E6E7552, 0xE700000000000000, 0x64656C696146, 0xE600000000000000);
  sub_240249838(0x6465727265666544, 0xE800000000000000, 0x676E696E6E7552, 0xE700000000000000);
  sub_240249838(0x6465727265666544, 0xE800000000000000, 0x64656C696146, 0xE600000000000000);
  sub_240249838(0x6465727265666544, 0xE800000000000000, 0x6574656C706D6F43, 0xE900000000000064);
  sub_240249838(0x6574656C706D6F43, 0xE900000000000064, 0x7261745320746F4ELL, 0xEB00000000646574);
  sub_240249838(0x64656C696146, 0xE600000000000000, 0x7261745320746F4ELL, 0xEB00000000646574);
  sub_240249838(0x64656C696146, 0xE600000000000000, 0x64656C696146, 0xE600000000000000);
  return v0;
}

_QWORD *getTaskStateMachine()()
{
  _QWORD *MLHostTask;
  _QWORD *v1;

  MLHostTask = getMLHostTaskGraph()();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEFE0);
  swift_allocObject();
  v1 = sub_24024D730((uint64_t)MLHostTask);
  swift_release();
  return v1;
}

uint64_t MLHostGraphWalks.walk.getter()
{
  char *v0;

  return (uint64_t)*(&off_25108D7B8 + *v0);
}

LighthouseBackground::MLHostGraphWalks_optional __swiftcall MLHostGraphWalks.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::MLHostGraphWalks_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static MLHostGraphWalks.allCases.getter()
{
  return &unk_25108AE28;
}

uint64_t MLHostGraphWalks.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24025C114 + 4 * byte_2402C0D50[*v0]))(0x6D6F43656C637963, 0xEF6E6F6974656C70);
}

uint64_t sub_24025C114()
{
  return 0x696146656C637963;
}

uint64_t sub_24025C134()
{
  return 0x666544656C637963;
}

uint64_t sub_24025C158()
{
  return 0x6974656C706D6F63;
}

uint64_t sub_24025C174()
{
  return 0x6572756C696166;
}

uint64_t sub_24025C18C()
{
  return 0x6C61727265666564;
}

void sub_24025C1A4(char *a1)
{
  sub_240235DC0(*a1);
}

void sub_24025C1B0()
{
  char *v0;

  sub_2402A9E54(*v0);
}

void sub_24025C1B8()
{
  __asm { BR              X10 }
}

uint64_t sub_24025C200()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_24025C2A4(uint64_t a1)
{
  char *v1;

  sub_2402AA6C0(a1, *v1);
}

LighthouseBackground::MLHostGraphWalks_optional sub_24025C2AC(Swift::String *a1)
{
  return MLHostGraphWalks.init(rawValue:)(*a1);
}

uint64_t sub_24025C2B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24025C2F4 + 4 * byte_2402C0D5C[*v0]))();
}

void sub_24025C2F4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "cycleFailure");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_24025C318(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "cycleDeferral");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_24025C340(_QWORD *a1@<X8>)
{
  *a1 = 0x6974656C706D6F63;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_24025C360(_QWORD *a1@<X8>)
{
  *a1 = 0x6572756C696166;
  a1[1] = 0xE700000000000000;
}

void sub_24025C37C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C61727265666564;
  a1[1] = 0xE800000000000000;
}

void sub_24025C398(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AE28;
}

uint64_t sub_24025C3A8()
{
  sub_24025CA8C();
  return sub_2402BD774();
}

uint64_t sub_24025C404()
{
  sub_24025CA8C();
  return sub_2402BD75C();
}

uint64_t sub_24025C450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  v10[6] = *(_QWORD *)(v13 - 8);
  v5 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)v10 - v6;
  v11 = type metadata accessor for LedgerState();
  MEMORY[0x24BDAC7A8](v11);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v10[1] = v2;
    v18 = MEMORY[0x24BEE4AF8];
    sub_24029BD90(0, v7, 0);
    v17 = a2 + 32;
    v10[4] = "TaskSuccessfullyRegistered";
    v10[5] = "";
    v10[2] = "TaskParametersStored";
    v10[3] = "TaskFailedToRegister";
    v8 = *(unsigned __int8 *)(a1 + 32);
    v15 = a1 + 33;
    v16 = v7;
    v14 = v18;
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_24025C92C()
{
  unint64_t result;

  result = qword_256FDEFE8;
  if (!qword_256FDEFE8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostGraphWalks, &type metadata for MLHostGraphWalks);
    atomic_store(result, (unint64_t *)&qword_256FDEFE8);
  }
  return result;
}

unint64_t sub_24025C974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDEFF0;
  if (!qword_256FDEFF0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEFF8);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256FDEFF0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MLHostGraphWalks(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24025CA0C + 4 * byte_2402C0D67[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24025CA40 + 4 * byte_2402C0D62[v4]))();
}

uint64_t sub_24025CA40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025CA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24025CA50);
  return result;
}

uint64_t sub_24025CA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24025CA64);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24025CA68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025CA70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLHostGraphWalks()
{
  return &type metadata for MLHostGraphWalks;
}

unint64_t sub_24025CA8C()
{
  unint64_t result;

  result = qword_256FDF000;
  if (!qword_256FDF000)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostGraphWalks, &type metadata for MLHostGraphWalks);
    atomic_store(result, (unint64_t *)&qword_256FDF000);
  }
  return result;
}

uint64_t sub_24025CAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void static DeviceOSType.currentType()(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

LighthouseBackground::DeviceOSType_optional __swiftcall DeviceOSType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::DeviceOSType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static DeviceOSType.allCases.getter()
{
  return &unk_25108AD60;
}

uint64_t DeviceOSType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24025CBAC + 4 * byte_2402C0ED0[*v0]))(5459817, 0xE300000000000000);
}

uint64_t sub_24025CBAC()
{
  return 0x534F6863746177;
}

uint64_t sub_24025CBC4()
{
  return 1397716596;
}

uint64_t sub_24025CBD4()
{
  return 0x534F6E6F69736976;
}

uint64_t sub_24025CBEC()
{
  return 0x534F63616DLL;
}

uint64_t sub_24025CC00()
{
  return 0x726F707075736E75;
}

void sub_24025CC20(char *a1)
{
  sub_2402366F0(*a1);
}

void sub_24025CC2C()
{
  char *v0;

  sub_2402A9F68(*v0);
}

void sub_24025CC34()
{
  __asm { BR              X10 }
}

uint64_t sub_24025CC68()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_24025CCF0(uint64_t a1)
{
  char *v1;

  sub_2402AA2F8(a1, *v1);
}

LighthouseBackground::DeviceOSType_optional sub_24025CCF8(Swift::String *a1)
{
  return DeviceOSType.init(rawValue:)(*a1);
}

uint64_t sub_24025CD04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24025CD2C + 4 * byte_2402C0EDC[*v0]))();
}

void sub_24025CD2C(_QWORD *a1@<X8>)
{
  *a1 = 0x534F6863746177;
  a1[1] = 0xE700000000000000;
}

void sub_24025CD48(_QWORD *a1@<X8>)
{
  *a1 = 1397716596;
  a1[1] = 0xE400000000000000;
}

void sub_24025CD5C(_QWORD *a1@<X8>)
{
  *a1 = 0x534F6E6F69736976;
  a1[1] = 0xE800000000000000;
}

void sub_24025CD78(_QWORD *a1@<X8>)
{
  *a1 = 0x534F63616DLL;
  a1[1] = 0xE500000000000000;
}

void sub_24025CD90(_QWORD *a1@<X8>)
{
  *a1 = 0x726F707075736E75;
  a1[1] = 0xEB00000000646574;
}

void sub_24025CDB4(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AD60;
}

uint64_t sub_24025CDC4()
{
  sub_24025EBAC();
  return sub_2402BD774();
}

uint64_t sub_24025CE20()
{
  sub_24025EBAC();
  return sub_2402BD75C();
}

uint64_t MLHostConfig.cloudEnvironment.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostConfig.cloudEnvironment.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MLHostConfig.cloudEnvironment.modify())()
{
  return nullsub_1;
}

uint64_t MLHostConfig.cloudContainer.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostConfig.cloudContainer.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MLHostConfig.cloudContainer.modify())()
{
  return nullsub_1;
}

uint64_t MLHostConfig.apsEnvironment.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostConfig.apsEnvironment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*MLHostConfig.apsEnvironment.modify())()
{
  return nullsub_1;
}

void __swiftcall MLHostConfig.init(cloudEnvironment:cloudContainer:apsEnvironment:)(LighthouseBackground::MLHostConfig *__return_ptr retstr, Swift::String cloudEnvironment, Swift::String_optional cloudContainer, Swift::String_optional apsEnvironment)
{
  retstr->cloudEnvironment = cloudEnvironment;
  retstr->cloudContainer = cloudContainer;
  retstr->apsEnvironment = apsEnvironment;
}

unint64_t sub_24025CFCC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F4364756F6C63;
  if (*v0 != 1)
    v1 = 0x7269766E45737061;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_24025D044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24025E888(a1, a2);
  *a3 = result;
  return result;
}

void sub_24025D068(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_24025D074()
{
  sub_24025D22C();
  return sub_2402BDE88();
}

uint64_t sub_24025D09C()
{
  sub_24025D22C();
  return sub_2402BDE94();
}

uint64_t MLHostConfig.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  char v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF008);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v11[3] = v1[3];
  v11[4] = v7;
  v8 = v1[4];
  v11[1] = v1[5];
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025D22C();
  sub_2402BDE70();
  v14 = 0;
  v9 = v11[5];
  sub_2402BDCFC();
  if (!v9)
  {
    v13 = 1;
    sub_2402BDC9C();
    v12 = 2;
    sub_2402BDC9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_24025D22C()
{
  unint64_t result;

  result = qword_256FDF010;
  if (!qword_256FDF010)
  {
    result = MEMORY[0x2426820F8](&unk_2402C1334, &type metadata for MLHostConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF010);
  }
  return result;
}

uint64_t MLHostConfig.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF018);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025D22C();
  sub_2402BDE64();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    v25 = 0;
    v9 = sub_2402BDC24();
    v12 = v11;
    v22 = v9;
    v24 = 1;
    swift_bridgeObjectRetain();
    v13 = sub_2402BDBC4();
    v15 = v14;
    v21 = v13;
    v23 = 2;
    swift_bridgeObjectRetain();
    v16 = sub_2402BDBC4();
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v16;
    v19(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *a2 = v22;
    a2[1] = v12;
    a2[2] = v21;
    a2[3] = v15;
    a2[4] = v20;
    a2[5] = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24025D4A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MLHostConfig.init(from:)(a1, a2);
}

uint64_t sub_24025D4B8(_QWORD *a1)
{
  return MLHostConfig.encode(to:)(a1);
}

uint64_t MLHostConfig.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v14;
  _QWORD v15[4];

  v1 = sub_2402BDE58();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v5 = v0[1];
  v8 = v0[2];
  v7 = v0[3];
  v10 = v0[4];
  v9 = v0[5];
  v15[3] = &type metadata for MLHostConfig;
  v11 = (_QWORD *)swift_allocObject();
  v15[0] = v11;
  v11[2] = v6;
  v11[3] = v5;
  v11[4] = v8;
  v11[5] = v7;
  v11[6] = v10;
  v11[7] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2402BDE40();
  sub_2402BDE4C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v12 = sub_24025D6B0();
  swift_release();
  strcpy((char *)v15, "MLHostConfig(");
  HIWORD(v15[1]) = -4864;
  v14 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  sub_2402BD5F4();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v15[0];
}

uint64_t sub_24025D67C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

_QWORD *sub_24025D6B0()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  _OWORD v5[3];
  __int128 v6;
  __int128 v7;
  __int128 v8;

  swift_retain();
  sub_2402BDB28();
  swift_release();
  sub_2402BDB94();
  if (*((_QWORD *)&v8 + 1))
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v5[0] = v6;
      v5[1] = v7;
      v5[2] = v8;
      if (*((_QWORD *)&v6 + 1))
      {
        sub_2402BD6C0();
        sub_2402BD6C0();
        sub_2402BDB34();
        sub_24025EBF0((uint64_t)v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v0 = sub_240257F54(0, v0[2] + 1, 1, v0);
        v2 = v0[2];
        v1 = v0[3];
        if (v2 >= v1 >> 1)
          v0 = sub_240257F54((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
        v0[2] = v2 + 1;
        v3 = &v0[2 * v2];
        v3[4] = 0;
        v3[5] = 0xE000000000000000;
      }
      else
      {
        sub_24025EBF0((uint64_t)v5);
      }
      sub_2402BDB94();
    }
    while (*((_QWORD *)&v8 + 1));
  }
  else
  {
    v0 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_release();
  return v0;
}

uint64_t ExtensionRecord.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtensionRecord.bundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtensionRecord.url.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExtensionRecord.extensionPointIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall ExtensionRecord.init(name:bundleIdentifier:url:extensionPointIdentifier:)(LighthouseBackground::ExtensionRecord *__return_ptr retstr, Swift::String name, Swift::String bundleIdentifier, Swift::String url, Swift::String extensionPointIdentifier)
{
  retstr->name = name;
  retstr->bundleIdentifier = bundleIdentifier;
  retstr->url = url;
  retstr->extensionPointIdentifier = extensionPointIdentifier;
}

uint64_t sub_24025D914()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24025D93C + 4 * byte_2402C0EE2[*v0]))(1701667182, 0xE400000000000000);
}

unint64_t sub_24025D93C()
{
  return 0xD000000000000010;
}

uint64_t sub_24025D958()
{
  return 7107189;
}

unint64_t sub_24025D968()
{
  return 0xD000000000000018;
}

uint64_t sub_24025D988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24025EA20(a1, a2);
  *a3 = result;
  return result;
}

void sub_24025D9AC(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_24025D9B8()
{
  sub_24025DBB0();
  return sub_2402BDE88();
}

uint64_t sub_24025D9E0()
{
  sub_24025DBB0();
  return sub_2402BDE94();
}

uint64_t ExtensionRecord.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[8];
  char v13;
  char v14;
  char v15;
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF020);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v12[5] = v1[3];
  v12[6] = v7;
  v8 = v1[4];
  v12[3] = v1[5];
  v12[4] = v8;
  v9 = v1[6];
  v12[1] = v1[7];
  v12[2] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025DBB0();
  sub_2402BDE70();
  v16 = 0;
  v10 = v12[7];
  sub_2402BDCFC();
  if (!v10)
  {
    v15 = 1;
    sub_2402BDCFC();
    v14 = 2;
    sub_2402BDCFC();
    v13 = 3;
    sub_2402BDCFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_24025DBB0()
{
  unint64_t result;

  result = qword_256FDF028;
  if (!qword_256FDF028)
  {
    result = MEMORY[0x2426820F8](&unk_2402C12E4, &type metadata for ExtensionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF028);
  }
  return result;
}

uint64_t ExtensionRecord.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF030);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025DBB0();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v32 = 0;
  v9 = sub_2402BDC24();
  v11 = v10;
  v27 = v9;
  v31 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2402BDC24();
  v28 = v13;
  v26 = v12;
  v30 = 2;
  swift_bridgeObjectRetain();
  v24 = sub_2402BDC24();
  v25 = v14;
  v29 = 3;
  swift_bridgeObjectRetain();
  v15 = sub_2402BDC24();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20 = v15;
  v19(v8, v5);
  swift_bridgeObjectRetain();
  v21 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v11;
  v22 = v25;
  a2[2] = v26;
  a2[3] = v21;
  a2[4] = v24;
  a2[5] = v22;
  a2[6] = v20;
  a2[7] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_24025DEC8()
{
  unint64_t result;

  result = qword_256FDF038;
  if (!qword_256FDF038)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DeviceOSType, &type metadata for DeviceOSType);
    atomic_store(result, (unint64_t *)&qword_256FDF038);
  }
  return result;
}

uint64_t sub_24025DF0C()
{
  return sub_2402348A0(&qword_256FDF040, &qword_2543525A8, MEMORY[0x24BEE12E0]);
}

uint64_t sub_24025DF38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ExtensionRecord.init(from:)(a1, a2);
}

uint64_t sub_24025DF4C(_QWORD *a1)
{
  return ExtensionRecord.encode(to:)(a1);
}

uint64_t storeEnumTagSinglePayload for DeviceOSType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24025DFAC + 4 * byte_2402C0EEB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24025DFE0 + 4 * byte_2402C0EE6[v4]))();
}

uint64_t sub_24025DFE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025DFE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24025DFF0);
  return result;
}

uint64_t sub_24025DFFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24025E004);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24025E008(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025E010(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceOSType()
{
  return &type metadata for DeviceOSType;
}

uint64_t destroy for MLHostConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MLHostConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MLHostConfig(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for MLHostConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHostConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHostConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHostConfig()
{
  return &type metadata for MLHostConfig;
}

uint64_t destroy for ExtensionRecord()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ExtensionRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ExtensionRecord(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for ExtensionRecord(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtensionRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtensionRecord()
{
  return &type metadata for ExtensionRecord;
}

uint64_t getEnumTagSinglePayload for TaskRequestPriority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtensionRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24025E58C + 4 * byte_2402C0EF5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24025E5C0 + 4 * byte_2402C0EF0[v4]))();
}

uint64_t sub_24025E5C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025E5C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24025E5D0);
  return result;
}

uint64_t sub_24025E5DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24025E5E4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24025E5E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025E5F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionRecord.CodingKeys()
{
  return &type metadata for ExtensionRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MLHostConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24025E658 + 4 * byte_2402C0EFF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24025E68C + 4 * byte_2402C0EFA[v4]))();
}

uint64_t sub_24025E68C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025E694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24025E69CLL);
  return result;
}

uint64_t sub_24025E6A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24025E6B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24025E6B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24025E6BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLHostConfig.CodingKeys()
{
  return &type metadata for MLHostConfig.CodingKeys;
}

unint64_t sub_24025E6DC()
{
  unint64_t result;

  result = qword_256FDF048;
  if (!qword_256FDF048)
  {
    result = MEMORY[0x2426820F8](&unk_2402C1204, &type metadata for MLHostConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF048);
  }
  return result;
}

unint64_t sub_24025E724()
{
  unint64_t result;

  result = qword_256FDF050;
  if (!qword_256FDF050)
  {
    result = MEMORY[0x2426820F8](&unk_2402C12BC, &type metadata for ExtensionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF050);
  }
  return result;
}

unint64_t sub_24025E76C()
{
  unint64_t result;

  result = qword_256FDF058;
  if (!qword_256FDF058)
  {
    result = MEMORY[0x2426820F8](&unk_2402C122C, &type metadata for ExtensionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF058);
  }
  return result;
}

unint64_t sub_24025E7B4()
{
  unint64_t result;

  result = qword_256FDF060;
  if (!qword_256FDF060)
  {
    result = MEMORY[0x2426820F8](&unk_2402C1254, &type metadata for ExtensionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF060);
  }
  return result;
}

unint64_t sub_24025E7FC()
{
  unint64_t result;

  result = qword_256FDF068;
  if (!qword_256FDF068)
  {
    result = MEMORY[0x2426820F8](&unk_2402C1174, &type metadata for MLHostConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF068);
  }
  return result;
}

unint64_t sub_24025E844()
{
  unint64_t result;

  result = qword_256FDF070;
  if (!qword_256FDF070)
  {
    result = MEMORY[0x2426820F8](&unk_2402C119C, &type metadata for MLHostConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF070);
  }
  return result;
}

uint64_t sub_24025E888(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9B40 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F4364756F6C63 && a2 == 0xEE0072656E696174 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7269766E45737061 && a2 == 0xEE00746E656D6E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_24025EA20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9220 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002402C9B60)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_24025EBAC()
{
  unint64_t result;

  result = qword_256FDF078;
  if (!qword_256FDF078)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for DeviceOSType, &type metadata for DeviceOSType);
    atomic_store(result, (unint64_t *)&qword_256FDF078);
  }
  return result;
}

uint64_t sub_24025EBF0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254352210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ListTasksRequest.limit.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ListTasksRequest.limit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*ListTasksRequest.limit.modify())()
{
  return nullsub_1;
}

LighthouseBackground::ListTasksRequest __swiftcall ListTasksRequest.init(limit:)(LighthouseBackground::ListTasksRequest limit)
{
  uint64_t v1;

  *(_QWORD *)v1 = limit.limit.value;
  *(_BYTE *)(v1 + 8) = limit.limit.is_nil;
  return limit;
}

uint64_t sub_24025EC74()
{
  return 0x74696D696CLL;
}

uint64_t sub_24025EC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74696D696CLL && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24025ED14()
{
  sub_24025EE54();
  return sub_2402BDE88();
}

uint64_t sub_24025ED3C()
{
  sub_24025EE54();
  return sub_2402BDE94();
}

uint64_t ListTasksRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF080);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025EE54();
  sub_2402BDE70();
  sub_2402BDCC0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_24025EE54()
{
  unint64_t result;

  result = qword_256FDF088;
  if (!qword_256FDF088)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3C88, &type metadata for ListTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF088);
  }
  return result;
}

uint64_t ListTasksRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF090);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025EE54();
  sub_2402BDE64();
  if (!v2)
  {
    v9 = sub_2402BDBE8();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v11 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24025EFBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ListTasksRequest.init(from:)(a1, a2);
}

uint64_t sub_24025EFD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF080);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025EE54();
  sub_2402BDE70();
  sub_2402BDCC0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ListTasksResponse.tasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ListTasksResponse.tasks.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ListTasksResponse.tasks.modify())()
{
  return nullsub_1;
}

LighthouseBackground::ListTasksResponse __swiftcall ListTasksResponse.init(tasks:)(LighthouseBackground::ListTasksResponse tasks)
{
  LighthouseBackground::ListTasksResponse *v1;

  v1->tasks._rawValue = tasks.tasks._rawValue;
  return tasks;
}

uint64_t sub_24025F108()
{
  return 0x736B736174;
}

uint64_t sub_24025F120()
{
  sub_24025F19C();
  return sub_2402BDE88();
}

uint64_t sub_24025F148()
{
  sub_24025F19C();
  return sub_2402BDE94();
}

uint64_t ListTasksResponse.encode(to:)(_QWORD *a1)
{
  return sub_240260B08(a1, &qword_256FDF098, (void (*)(void))sub_24025F19C);
}

unint64_t sub_24025F19C()
{
  unint64_t result;

  result = qword_256FDF0A0;
  if (!qword_256FDF0A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3C38, &type metadata for ListTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF0A0);
  }
  return result;
}

uint64_t ListTasksResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_240260CAC(a1, &qword_256FDF0C0, (void (*)(void))sub_24025F19C, a2);
}

uint64_t sub_24025F20C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDF0A8);
    v10 = sub_240232E34(a2, type metadata accessor for MLHostTask, a3);
    result = MEMORY[0x2426820F8](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24025F290@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ListTasksResponse.init(from:)(a1, a2);
}

uint64_t sub_24025F2A4(_QWORD *a1)
{
  return ListTasksResponse.encode(to:)(a1);
}

uint64_t GetTaskRequest.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GetTaskRequest.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*GetTaskRequest.name.modify())()
{
  return nullsub_1;
}

LighthouseBackground::GetTaskRequest __swiftcall GetTaskRequest.init(name:)(LighthouseBackground::GetTaskRequest name)
{
  LighthouseBackground::GetTaskRequest *v1;

  *v1 = name;
  return name;
}

uint64_t sub_24025F330()
{
  return 1701667182;
}

uint64_t sub_24025F340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24025F3C4()
{
  sub_24025F448();
  return sub_2402BDE88();
}

uint64_t sub_24025F3EC()
{
  sub_24025F448();
  return sub_2402BDE94();
}

uint64_t GetTaskRequest.encode(to:)(_QWORD *a1)
{
  return sub_240262544(a1, &qword_256FDF0D8, (void (*)(void))sub_24025F448, (uint64_t)&type metadata for GetTaskRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

unint64_t sub_24025F448()
{
  unint64_t result;

  result = qword_256FDF0E0;
  if (!qword_256FDF0E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3BE8, &type metadata for GetTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF0E0);
  }
  return result;
}

uint64_t GetTaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2402626B0(a1, &qword_256FDF0E8, (void (*)(void))sub_24025F448, a2);
}

uint64_t sub_24025F4B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GetTaskRequest.init(from:)(a1, a2);
}

uint64_t sub_24025F4CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240262820(a1, a2, a3, &qword_256FDF0D8, (void (*)(void))sub_24025F448, (uint64_t)&type metadata for GetTaskRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

uint64_t GetTaskResponse.task.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_240238BF0(v1, a1, type metadata accessor for MLHostTask);
}

uint64_t GetTaskResponse.task.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24025BC6C(a1, v1, type metadata accessor for MLHostTask);
}

uint64_t (*GetTaskResponse.task.modify())()
{
  return nullsub_1;
}

uint64_t GetTaskResponse.init(task:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24023DBCC(a1, a2, type metadata accessor for MLHostTask);
}

uint64_t sub_24025F574()
{
  return 1802723700;
}

uint64_t sub_24025F584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1802723700 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24025F608()
{
  sub_24025F768();
  return sub_2402BDE88();
}

uint64_t sub_24025F630()
{
  sub_24025F768();
  return sub_2402BDE94();
}

uint64_t GetTaskResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352728);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025F768();
  sub_2402BDE70();
  type metadata accessor for MLHostTask(0);
  sub_240232E34(&qword_256FDF0B8, type metadata accessor for MLHostTask, (uint64_t)&protocol conformance descriptor for MLHostTask);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_24025F768()
{
  unint64_t result;

  result = qword_2543526C8;
  if (!qword_2543526C8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3B98, &type metadata for GetTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543526C8);
  }
  return result;
}

uint64_t GetTaskResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t TaskResponse;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for MLHostTask(0);
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352718);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TaskResponse = type metadata accessor for GetTaskResponse(0);
  MEMORY[0x24BDAC7A8](TaskResponse);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025F768();
  sub_2402BDE64();
  if (!v2)
  {
    sub_240232E34(&qword_256FDF0D0, type metadata accessor for MLHostTask, (uint64_t)&protocol conformance descriptor for MLHostTask);
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_24023DBCC(v15, (uint64_t)v11, type metadata accessor for MLHostTask);
    sub_24023DBCC((uint64_t)v11, v13, type metadata accessor for GetTaskResponse);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for GetTaskResponse(uint64_t a1)
{
  return sub_24023DB98(a1, (uint64_t *)&unk_2543526F8);
}

uint64_t sub_24025F98C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GetTaskResponse.init(from:)(a1, a2);
}

uint64_t sub_24025F9A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352728);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24025F768();
  sub_2402BDE70();
  type metadata accessor for MLHostTask(0);
  sub_240232E34(&qword_256FDF0B8, type metadata accessor for MLHostTask, (uint64_t)&protocol conformance descriptor for MLHostTask);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ResetTasksRequest.reload.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ResetTasksRequest.reload.modify())()
{
  return nullsub_1;
}

LighthouseBackground::ResetTasksRequest __swiftcall ResetTasksRequest.init(reload:)(LighthouseBackground::ResetTasksRequest reload)
{
  LighthouseBackground::ResetTasksRequest *v1;

  v1->reload = reload.reload;
  return reload;
}

uint64_t sub_24025FAD0()
{
  return 0x64616F6C6572;
}

uint64_t sub_24025FAE8()
{
  sub_24025FB64();
  return sub_2402BDE88();
}

uint64_t sub_24025FB10()
{
  sub_24025FB64();
  return sub_2402BDE94();
}

uint64_t ResetTasksRequest.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF0F0, (void (*)(void))sub_24025FB64);
}

unint64_t sub_24025FB64()
{
  unint64_t result;

  result = qword_256FDF0F8;
  if (!qword_256FDF0F8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3B48, &type metadata for ResetTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF0F8);
  }
  return result;
}

uint64_t ResetTasksRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF100, (void (*)(void))sub_24025FB64, a2);
}

uint64_t sub_24025FBD4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ResetTasksRequest.init(from:)(a1, a2);
}

uint64_t sub_24025FBE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF0F0, (void (*)(void))sub_24025FB64);
}

uint64_t ResetTasksResponse.reloaded.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ResetTasksResponse.reloaded.modify())()
{
  return nullsub_1;
}

LighthouseBackground::ResetTasksResponse __swiftcall ResetTasksResponse.init(reloaded:)(LighthouseBackground::ResetTasksResponse reloaded)
{
  LighthouseBackground::ResetTasksResponse *v1;

  v1->reloaded = reloaded.reloaded;
  return reloaded;
}

uint64_t sub_24025FC34()
{
  return 0x646564616F6C6572;
}

uint64_t sub_24025FC50()
{
  sub_24025FCCC();
  return sub_2402BDE88();
}

uint64_t sub_24025FC78()
{
  sub_24025FCCC();
  return sub_2402BDE94();
}

uint64_t ResetTasksResponse.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF108, (void (*)(void))sub_24025FCCC);
}

unint64_t sub_24025FCCC()
{
  unint64_t result;

  result = qword_256FDF110;
  if (!qword_256FDF110)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3AF8, &type metadata for ResetTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF110);
  }
  return result;
}

uint64_t ResetTasksResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF118, (void (*)(void))sub_24025FCCC, a2);
}

uint64_t sub_24025FD3C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ResetTasksResponse.init(from:)(a1, a2);
}

uint64_t sub_24025FD50(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF108, (void (*)(void))sub_24025FCCC);
}

uint64_t AddTaskRequest.taskDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_240238BF0(v1, a1, type metadata accessor for TaskDefinition);
}

uint64_t AddTaskRequest.taskDefinition.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_24025BC6C(a1, v1, type metadata accessor for TaskDefinition);
}

uint64_t (*AddTaskRequest.taskDefinition.modify())()
{
  return nullsub_1;
}

uint64_t AddTaskRequest.init(taskDefinition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24023DBCC(a1, a2, type metadata accessor for TaskDefinition);
}

uint64_t sub_24025FDF0()
{
  return 0x696665446B736174;
}

uint64_t sub_24025FE14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696665446B736174 && a2 == 0xEE006E6F6974696ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24025FECC()
{
  sub_24026002C();
  return sub_2402BDE88();
}

uint64_t sub_24025FEF4()
{
  sub_24026002C();
  return sub_2402BDE94();
}

uint64_t AddTaskRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF120);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026002C();
  sub_2402BDE70();
  type metadata accessor for TaskDefinition(0);
  sub_240232E34(&qword_256FDE730, type metadata accessor for TaskDefinition, (uint64_t)&protocol conformance descriptor for TaskDefinition);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_24026002C()
{
  unint64_t result;

  result = qword_256FDF128;
  if (!qword_256FDF128)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3AA8, &type metadata for AddTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF128);
  }
  return result;
}

uint64_t AddTaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for TaskDefinition(0);
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF130);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AddTaskRequest(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026002C();
  sub_2402BDE64();
  if (!v2)
  {
    sub_240232E34(&qword_2543523D8, type metadata accessor for TaskDefinition, (uint64_t)&protocol conformance descriptor for TaskDefinition);
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_24023DBCC(v15, (uint64_t)v11, type metadata accessor for TaskDefinition);
    sub_24023DBCC((uint64_t)v11, v13, type metadata accessor for AddTaskRequest);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for AddTaskRequest(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FDFAB0);
}

uint64_t sub_240260250@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AddTaskRequest.init(from:)(a1, a2);
}

uint64_t sub_240260264(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF120);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026002C();
  sub_2402BDE70();
  type metadata accessor for TaskDefinition(0);
  sub_240232E34(&qword_256FDE730, type metadata accessor for TaskDefinition, (uint64_t)&protocol conformance descriptor for TaskDefinition);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t AddTaskResponse.result.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AddTaskResponse.result.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*AddTaskResponse.result.modify())()
{
  return nullsub_1;
}

void AddTaskResponse.error.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *AddTaskResponse.error.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*AddTaskResponse.error.modify())()
{
  return nullsub_1;
}

LighthouseBackground::AddTaskResponse __swiftcall AddTaskResponse.init(result:error:)(Swift::Bool result, LighthouseBackground::TaskValidationError_optional error)
{
  Swift::Bool *v2;
  char v3;
  LighthouseBackground::AddTaskResponse v4;

  v3 = *(_BYTE *)error.value;
  *v2 = result;
  v2[1] = v3;
  v4.result = result;
  return v4;
}

uint64_t sub_2402603CC()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F727265;
  else
    return 0x746C75736572;
}

uint64_t sub_240260400@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24026C018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_240260424()
{
  sub_2402605AC();
  return sub_2402BDE88();
}

uint64_t sub_24026044C()
{
  sub_2402605AC();
  return sub_2402BDE94();
}

uint64_t AddTaskResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  int v10;
  char v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF138);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402605AC();
  sub_2402BDE70();
  v13 = 0;
  sub_2402BDD08();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    sub_2402605F0();
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2402605AC()
{
  unint64_t result;

  result = qword_256FDF140;
  if (!qword_256FDF140)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3A58, &type metadata for AddTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF140);
  }
  return result;
}

unint64_t sub_2402605F0()
{
  unint64_t result;

  result = qword_256FDF148;
  if (!qword_256FDF148)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskValidationError, &type metadata for TaskValidationError);
    atomic_store(result, (unint64_t *)&qword_256FDF148);
  }
  return result;
}

uint64_t AddTaskResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF150);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402605AC();
  sub_2402BDE64();
  if (!v2)
  {
    v15 = 0;
    v9 = sub_2402BDC30();
    v13 = 1;
    sub_24026079C();
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v14;
    *a2 = v9 & 1;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_24026079C()
{
  unint64_t result;

  result = qword_256FDF158;
  if (!qword_256FDF158)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskValidationError, &type metadata for TaskValidationError);
    atomic_store(result, (unint64_t *)&qword_256FDF158);
  }
  return result;
}

uint64_t sub_2402607E0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return AddTaskResponse.init(from:)(a1, a2);
}

uint64_t sub_2402607F4(_QWORD *a1)
{
  return AddTaskResponse.encode(to:)(a1);
}

uint64_t CleanTasksRequest.deep.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CleanTasksRequest.deep.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*CleanTasksRequest.deep.modify())()
{
  return nullsub_1;
}

LighthouseBackground::CleanTasksRequest __swiftcall CleanTasksRequest.init(deep:)(LighthouseBackground::CleanTasksRequest deep)
{
  LighthouseBackground::CleanTasksRequest *v1;

  v1->deep = deep.deep;
  return deep;
}

uint64_t sub_240260830()
{
  return 1885693284;
}

uint64_t sub_240260840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1885693284 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2402608C4()
{
  sub_240260940();
  return sub_2402BDE88();
}

uint64_t sub_2402608EC()
{
  sub_240260940();
  return sub_2402BDE94();
}

uint64_t CleanTasksRequest.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF160, (void (*)(void))sub_240260940);
}

unint64_t sub_240260940()
{
  unint64_t result;

  result = qword_256FDF168;
  if (!qword_256FDF168)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3A08, &type metadata for CleanTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF168);
  }
  return result;
}

uint64_t CleanTasksRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF170, (void (*)(void))sub_240260940, a2);
}

uint64_t sub_2402609B0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return CleanTasksRequest.init(from:)(a1, a2);
}

uint64_t sub_2402609C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF160, (void (*)(void))sub_240260940);
}

uint64_t (*CleanTasksResponse.tasks.modify())()
{
  return nullsub_1;
}

uint64_t sub_240260A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736B736174 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240260A8C()
{
  sub_240260C3C();
  return sub_2402BDE88();
}

uint64_t sub_240260AB4()
{
  sub_240260C3C();
  return sub_2402BDE94();
}

uint64_t CleanTasksResponse.encode(to:)(_QWORD *a1)
{
  return sub_240260B08(a1, &qword_256FDF178, (void (*)(void))sub_240260C3C);
}

uint64_t sub_240260B08(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE70();
  v11[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF0A8);
  sub_24025F20C(&qword_256FDF0B0, &qword_256FDF0B8, (uint64_t)&protocol conformance descriptor for MLHostTask, MEMORY[0x24BEE12A0]);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v11[0] + 8))(v8, v6);
}

unint64_t sub_240260C3C()
{
  unint64_t result;

  result = qword_256FDF180;
  if (!qword_256FDF180)
  {
    result = MEMORY[0x2426820F8](&unk_2402C39B8, &type metadata for CleanTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF180);
  }
  return result;
}

uint64_t CleanTasksResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_240260CAC(a1, &qword_256FDF188, (void (*)(void))sub_240260C3C, a2);
}

uint64_t sub_240260CAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE64();
  if (!v4)
  {
    v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF0A8);
    sub_24025F20C(&qword_256FDF0C8, &qword_256FDF0D0, (uint64_t)&protocol conformance descriptor for MLHostTask, MEMORY[0x24BEE12D0]);
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v7);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240260E04@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CleanTasksResponse.init(from:)(a1, a2);
}

uint64_t sub_240260E18(_QWORD *a1)
{
  return CleanTasksResponse.encode(to:)(a1);
}

uint64_t (*GetOnDemandTaskRequest.taskName.modify())()
{
  return nullsub_1;
}

uint64_t sub_240260E3C()
{
  return 0x656D614E6B736174;
}

uint64_t sub_240260E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240260EE8()
{
  sub_240260F6C();
  return sub_2402BDE88();
}

uint64_t sub_240260F10()
{
  sub_240260F6C();
  return sub_2402BDE94();
}

uint64_t GetOnDemandTaskRequest.encode(to:)(_QWORD *a1)
{
  return sub_240262544(a1, &qword_256FDF190, (void (*)(void))sub_240260F6C, (uint64_t)&type metadata for GetOnDemandTaskRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

unint64_t sub_240260F6C()
{
  unint64_t result;

  result = qword_256FDF198;
  if (!qword_256FDF198)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3968, &type metadata for GetOnDemandTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF198);
  }
  return result;
}

uint64_t GetOnDemandTaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2402626B0(a1, &qword_256FDF1A0, (void (*)(void))sub_240260F6C, a2);
}

uint64_t sub_240260FDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GetOnDemandTaskRequest.init(from:)(a1, a2);
}

uint64_t sub_240260FF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240262820(a1, a2, a3, &qword_256FDF190, (void (*)(void))sub_240260F6C, (uint64_t)&type metadata for GetOnDemandTaskRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

LighthouseBackground::OnDemandError_optional __swiftcall OnDemandError.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::OnDemandError_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static OnDemandError.allCases.getter()
{
  return &unk_25108B508;
}

uint64_t OnDemandError.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2402610BC + 4 * byte_2402C1390[*v0]))(0xD000000000000012, 0x80000002402C8C10);
}

uint64_t sub_2402610BC()
{
  return 0x61766E496B736174;
}

uint64_t sub_2402610DC()
{
  return 0x6E6E75526B736174;
}

uint64_t sub_240261110()
{
  return 0x696C756465686373;
}

void sub_240261134(char *a1)
{
  sub_240236350(*a1);
}

void sub_240261140()
{
  char *v0;

  sub_2402AA04C(*v0);
}

void sub_240261148()
{
  __asm { BR              X10 }
}

uint64_t sub_240261188()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240261214(uint64_t a1)
{
  char *v1;

  sub_2402AA4E0(a1, *v1);
}

LighthouseBackground::OnDemandError_optional sub_24026121C(Swift::String *a1)
{
  return OnDemandError.init(rawValue:)(*a1);
}

uint64_t sub_240261228()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24026125C + 4 * byte_2402C139A[*v0]))();
}

void sub_24026125C(_QWORD *a1@<X8>)
{
  *a1 = 0x61766E496B736174;
  a1[1] = 0xEB0000000064696CLL;
}

void sub_240261280(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6E75526B736174;
  a1[1] = 0xEB00000000676E69;
}

void sub_2402612B8(_QWORD *a1@<X8>)
{
  *a1 = 0x696C756465686373;
  a1[1] = 0xEF726F727245676ELL;
}

void sub_2402612E0(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AD88;
}

uint64_t sub_2402612F0()
{
  sub_24026C2A8();
  return sub_2402BD774();
}

uint64_t sub_24026134C()
{
  sub_24026C2A8();
  return sub_2402BD75C();
}

LighthouseBackground::OnDemandResult_optional __swiftcall OnDemandResult.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  LighthouseBackground::OnDemandResult_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static OnDemandResult.allCases.getter()
{
  return &unk_25108B580;
}

uint64_t OnDemandResult.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x706D6F436B736174;
  else
    return 0x656863536B736174;
}

uint64_t sub_240261458(char *a1, char *a2)
{
  return sub_2402360CC(*a1, *a2);
}

uint64_t sub_240261464()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_2402614FC()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_240261570()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::OnDemandResult_optional sub_240261604(Swift::String *a1)
{
  return OnDemandResult.init(rawValue:)(*a1);
}

void sub_240261610(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x656863536B736174;
  if (*v1)
    v2 = 0x706D6F436B736174;
  v3 = 0xED000064656C7564;
  if (*v1)
    v3 = 0xED0000646574656CLL;
  *a1 = v2;
  a1[1] = v3;
}

void sub_240261668(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AE00;
}

uint64_t sub_240261678()
{
  sub_24026C264();
  return sub_2402BD774();
}

uint64_t sub_2402616D4()
{
  sub_24026C264();
  return sub_2402BD75C();
}

void GetOnDemandTaskRequestResponse.result.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *GetOnDemandTaskRequestResponse.result.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*GetOnDemandTaskRequestResponse.result.modify())()
{
  return nullsub_1;
}

uint64_t (*GetOnDemandTaskRequestResponse.error.modify())()
{
  return nullsub_1;
}

LighthouseBackground::GetOnDemandTaskRequestResponse __swiftcall GetOnDemandTaskRequestResponse.init(result:)(LighthouseBackground::OnDemandResult result)
{
  _BYTE *v1;
  LighthouseBackground::GetOnDemandTaskRequestResponse v2;

  *v1 = *(_BYTE *)result;
  v1[1] = 5;
  v2.result.value = result;
  return v2;
}

LighthouseBackground::GetOnDemandTaskRequestResponse __swiftcall GetOnDemandTaskRequestResponse.init(error:)(LighthouseBackground::OnDemandError error)
{
  _BYTE *v1;
  char v2;
  LighthouseBackground::GetOnDemandTaskRequestResponse result;

  v2 = *(_BYTE *)error;
  *v1 = 2;
  v1[1] = v2;
  result.result.value = error;
  return result;
}

uint64_t sub_240261780()
{
  sub_24026191C();
  return sub_2402BDE88();
}

uint64_t sub_2402617A8()
{
  sub_24026191C();
  return sub_2402BDE94();
}

uint64_t GetOnDemandTaskRequestResponse.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF1A8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026191C();
  sub_2402BDE70();
  v15 = v8;
  v14 = 0;
  sub_240261960();
  sub_2402BDCD8();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    sub_2402619A4();
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_24026191C()
{
  unint64_t result;

  result = qword_256FDF1B0;
  if (!qword_256FDF1B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3918, &type metadata for GetOnDemandTaskRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF1B0);
  }
  return result;
}

unint64_t sub_240261960()
{
  unint64_t result;

  result = qword_256FDF1B8;
  if (!qword_256FDF1B8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandResult, &type metadata for OnDemandResult);
    atomic_store(result, (unint64_t *)&qword_256FDF1B8);
  }
  return result;
}

unint64_t sub_2402619A4()
{
  unint64_t result;

  result = qword_256FDF1C0;
  if (!qword_256FDF1C0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandError, &type metadata for OnDemandError);
    atomic_store(result, (unint64_t *)&qword_256FDF1C0);
  }
  return result;
}

uint64_t GetOnDemandTaskRequestResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF1C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026191C();
  sub_2402BDE64();
  if (!v2)
  {
    v15 = 0;
    sub_240261B64();
    sub_2402BDC00();
    v9 = v16;
    v13 = 1;
    sub_240261BA8();
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v14;
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_240261B64()
{
  unint64_t result;

  result = qword_256FDF1D0;
  if (!qword_256FDF1D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandResult, &type metadata for OnDemandResult);
    atomic_store(result, (unint64_t *)&qword_256FDF1D0);
  }
  return result;
}

unint64_t sub_240261BA8()
{
  unint64_t result;

  result = qword_256FDF1D8;
  if (!qword_256FDF1D8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandError, &type metadata for OnDemandError);
    atomic_store(result, (unint64_t *)&qword_256FDF1D8);
  }
  return result;
}

uint64_t sub_240261BEC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GetOnDemandTaskRequestResponse.init(from:)(a1, a2);
}

uint64_t sub_240261C00(_QWORD *a1)
{
  return GetOnDemandTaskRequestResponse.encode(to:)(a1);
}

uint64_t ListExtensionsRequest.extensionPrefix.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ListExtensionsRequest.extensionPrefix.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ListExtensionsRequest.extensionPrefix.modify())()
{
  return nullsub_1;
}

LighthouseBackground::ListExtensionsRequest __swiftcall ListExtensionsRequest.init(extensionPrefix:)(LighthouseBackground::ListExtensionsRequest extensionPrefix)
{
  LighthouseBackground::ListExtensionsRequest *v1;

  *v1 = extensionPrefix;
  return extensionPrefix;
}

uint64_t sub_240261C8C()
{
  return 0x6F69736E65747865;
}

uint64_t sub_240261CB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69736E65747865 && a2 == 0xEF7869666572506ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240261D68()
{
  sub_240261DEC();
  return sub_2402BDE88();
}

uint64_t sub_240261D90()
{
  sub_240261DEC();
  return sub_2402BDE94();
}

uint64_t ListExtensionsRequest.encode(to:)(_QWORD *a1)
{
  return sub_240262544(a1, &qword_256FDF1E0, (void (*)(void))sub_240261DEC, (uint64_t)&type metadata for ListExtensionsRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE3428]);
}

unint64_t sub_240261DEC()
{
  unint64_t result;

  result = qword_256FDF1E8;
  if (!qword_256FDF1E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C38C8, &type metadata for ListExtensionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF1E8);
  }
  return result;
}

uint64_t ListExtensionsRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF1F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240261DEC();
  sub_2402BDE64();
  if (!v2)
  {
    v9 = sub_2402BDBC4();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240261F4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ListExtensionsRequest.init(from:)(a1, a2);
}

uint64_t sub_240261F60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240262820(a1, a2, a3, &qword_256FDF1E0, (void (*)(void))sub_240261DEC, (uint64_t)&type metadata for ListExtensionsRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE3428]);
}

uint64_t (*ListExtensionsResponse.extensions.modify())()
{
  return nullsub_1;
}

uint64_t sub_240261FA4()
{
  return 0x6F69736E65747865;
}

uint64_t sub_240261FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69736E65747865 && a2 == 0xEA0000000000736ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240262060()
{
  sub_2402621D0();
  return sub_2402BDE88();
}

uint64_t sub_240262088()
{
  sub_2402621D0();
  return sub_2402BDE94();
}

uint64_t ListExtensionsResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF1F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402621D0();
  sub_2402BDE70();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF208);
  sub_240262398(&qword_256FDF210, (uint64_t (*)(void))sub_240262214, MEMORY[0x24BEE12A0]);
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2402621D0()
{
  unint64_t result;

  result = qword_256FDF200;
  if (!qword_256FDF200)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3878, &type metadata for ListExtensionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF200);
  }
  return result;
}

unint64_t sub_240262214()
{
  unint64_t result;

  result = qword_256FDF218;
  if (!qword_256FDF218)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ExtensionRecord, &type metadata for ExtensionRecord);
    atomic_store(result, (unint64_t *)&qword_256FDF218);
  }
  return result;
}

uint64_t ListExtensionsResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF220);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402621D0();
  sub_2402BDE64();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF208);
    sub_240262398(&qword_256FDF228, (uint64_t (*)(void))sub_240262400, MEMORY[0x24BEE12D0]);
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240262398(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDF208);
    v8 = a2();
    result = MEMORY[0x2426820F8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_240262400()
{
  unint64_t result;

  result = qword_256FDF230;
  if (!qword_256FDF230)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ExtensionRecord, &type metadata for ExtensionRecord);
    atomic_store(result, (unint64_t *)&qword_256FDF230);
  }
  return result;
}

uint64_t sub_240262444@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ListExtensionsResponse.init(from:)(a1, a2);
}

uint64_t sub_240262458(_QWORD *a1)
{
  return ListExtensionsResponse.encode(to:)(a1);
}

uint64_t (*GetExtensionRequest.bundleIdentifier.modify())()
{
  return nullsub_1;
}

unint64_t sub_24026247C()
{
  return 0xD000000000000010;
}

uint64_t sub_240262498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24026C0F8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2402624C0()
{
  sub_240262640();
  return sub_2402BDE88();
}

uint64_t sub_2402624E8()
{
  sub_240262640();
  return sub_2402BDE94();
}

uint64_t GetExtensionRequest.encode(to:)(_QWORD *a1)
{
  return sub_240262544(a1, &qword_256FDF238, (void (*)(void))sub_240262640, (uint64_t)&type metadata for GetExtensionRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

uint64_t sub_240262544(_QWORD *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  void (*v16)(uint64_t, uint64_t);

  v16 = a5;
  v15 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v5[1];
  v14 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v15();
  sub_2402BDE70();
  v16(v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_240262640()
{
  unint64_t result;

  result = qword_256FDF240;
  if (!qword_256FDF240)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3828, &type metadata for GetExtensionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF240);
  }
  return result;
}

uint64_t GetExtensionRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2402626B0(a1, &qword_256FDF248, (void (*)(void))sub_240262640, a2);
}

uint64_t sub_2402626B0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v17 = a4;
  v18 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE64();
  if (!v4)
  {
    v10 = v17;
    v11 = v18;
    v12 = sub_2402BDC24();
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v11);
    *v10 = v12;
    v10[1] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2402627D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GetExtensionRequest.init(from:)(a1, a2);
}

uint64_t sub_2402627EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240262820(a1, a2, a3, &qword_256FDF238, (void (*)(void))sub_240262640, (uint64_t)&type metadata for GetExtensionRequest.CodingKeys, (void (*)(uint64_t, uint64_t))MEMORY[0x24BEE34A0]);
}

uint64_t sub_240262820(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  void (*v18)(uint64_t, uint64_t);

  v18 = a7;
  v17 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v7[1];
  v16 = *v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v17();
  sub_2402BDE70();
  v18(v16, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t GetExtensionResponse.extensionRecord.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 GetExtensionResponse.extensionRecord.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  __int128 v7;

  v6 = a1[1];
  v7 = *a1;
  v5 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  v3 = *((_QWORD *)a1 + 7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v7;
  *(_OWORD *)(v1 + 16) = v6;
  result = v5;
  *(__n128 *)(v1 + 32) = v5;
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v3;
  return result;
}

uint64_t (*GetExtensionResponse.extensionRecord.modify())()
{
  return nullsub_1;
}

void __swiftcall GetExtensionResponse.init(extensionRecord:)(LighthouseBackground::GetExtensionResponse *__return_ptr retstr, LighthouseBackground::ExtensionRecord *extensionRecord)
{
  Swift::String bundleIdentifier;
  Swift::String url;
  uint64_t countAndFlagsBits;
  void *object;

  bundleIdentifier = extensionRecord->bundleIdentifier;
  url = extensionRecord->url;
  countAndFlagsBits = extensionRecord->extensionPointIdentifier._countAndFlagsBits;
  object = extensionRecord->extensionPointIdentifier._object;
  retstr->extensionRecord.name = extensionRecord->name;
  retstr->extensionRecord.bundleIdentifier = bundleIdentifier;
  retstr->extensionRecord.url = url;
  retstr->extensionRecord.extensionPointIdentifier._countAndFlagsBits = countAndFlagsBits;
  retstr->extensionRecord.extensionPointIdentifier._object = object;
}

uint64_t sub_240262A2C()
{
  return 0x6F69736E65747865;
}

uint64_t sub_240262A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69736E65747865 && a2 == 0xEF64726F6365526ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240262B08()
{
  sub_240262C80();
  return sub_2402BDE88();
}

uint64_t sub_240262B30()
{
  sub_240262C80();
  return sub_2402BDE94();
}

uint64_t GetExtensionResponse.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF250);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v12 = v1[1];
  v13 = v7;
  v11 = v1[2];
  v9 = *((_QWORD *)v1 + 6);
  v8 = *((_QWORD *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240262C80();
  sub_2402BDE70();
  v14 = v13;
  v15 = v12;
  v16 = v11;
  v17 = v9;
  v18 = v8;
  sub_240262214();
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_240262C80()
{
  unint64_t result;

  result = qword_256FDF258;
  if (!qword_256FDF258)
  {
    result = MEMORY[0x2426820F8](&unk_2402C37D8, &type metadata for GetExtensionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF258);
  }
  return result;
}

uint64_t GetExtensionResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF260);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240262C80();
  sub_2402BDE64();
  if (!v2)
  {
    sub_240262400();
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v14[1];
    v10 = v14[2];
    v11 = v15;
    v12 = v16;
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 32) = v10;
    *(_QWORD *)(a2 + 48) = v11;
    *(_QWORD *)(a2 + 56) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240262DF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GetExtensionResponse.init(from:)(a1, a2);
}

uint64_t sub_240262E08(_QWORD *a1)
{
  return GetExtensionResponse.encode(to:)(a1);
}

uint64_t GetHostConfigurationRequest.extended.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*GetHostConfigurationRequest.extended.modify())()
{
  return nullsub_1;
}

uint64_t sub_240262E34()
{
  return 0x6465646E65747865;
}

uint64_t sub_240262E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6465646E65747865 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240262EE0()
{
  sub_240262F5C();
  return sub_2402BDE88();
}

uint64_t sub_240262F08()
{
  sub_240262F5C();
  return sub_2402BDE94();
}

uint64_t GetHostConfigurationRequest.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF268, (void (*)(void))sub_240262F5C);
}

unint64_t sub_240262F5C()
{
  unint64_t result;

  result = qword_256FDF270;
  if (!qword_256FDF270)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3788, &type metadata for GetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF270);
  }
  return result;
}

uint64_t GetHostConfigurationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF278, (void (*)(void))sub_240262F5C, a2);
}

uint64_t sub_240262FCC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GetHostConfigurationRequest.init(from:)(a1, a2);
}

uint64_t sub_240262FE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF268, (void (*)(void))sub_240262F5C);
}

uint64_t sub_240263014()
{
  return 0x6769666E6F63;
}

uint64_t sub_24026302C()
{
  sub_2402630A8();
  return sub_2402BDE88();
}

uint64_t sub_240263054()
{
  sub_2402630A8();
  return sub_2402BDE94();
}

uint64_t GetHostConfigurationResponse.encode(to:)(_QWORD *a1)
{
  return sub_240263338(a1, &qword_256FDF280, (void (*)(void))sub_2402630A8);
}

unint64_t sub_2402630A8()
{
  unint64_t result;

  result = qword_256FDF288;
  if (!qword_256FDF288)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3738, &type metadata for GetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF288);
  }
  return result;
}

unint64_t sub_2402630EC()
{
  unint64_t result;

  result = qword_256FDF290;
  if (!qword_256FDF290)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostConfig, &type metadata for MLHostConfig);
    atomic_store(result, (unint64_t *)&qword_256FDF290);
  }
  return result;
}

uint64_t GetHostConfigurationResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402634CC(a1, &qword_256FDF298, (void (*)(void))sub_2402630A8, a2);
}

unint64_t sub_24026315C()
{
  unint64_t result;

  result = qword_256FDF2A0;
  if (!qword_256FDF2A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostConfig, &type metadata for MLHostConfig);
    atomic_store(result, (unint64_t *)&qword_256FDF2A0);
  }
  return result;
}

uint64_t sub_2402631A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GetHostConfigurationResponse.init(from:)(a1, a2);
}

uint64_t sub_2402631B4(_QWORD *a1)
{
  return GetHostConfigurationResponse.encode(to:)(a1);
}

uint64_t _s20LighthouseBackground28GetHostConfigurationResponseV6configAA12MLHostConfigVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 _s20LighthouseBackground28GetHostConfigurationResponseV6configAcA12MLHostConfigV_tcfC_0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_240263230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6769666E6F63 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2402632BC()
{
  sub_24026345C();
  return sub_2402BDE88();
}

uint64_t sub_2402632E4()
{
  sub_24026345C();
  return sub_2402BDE94();
}

uint64_t SetHostConfigurationRequest.encode(to:)(_QWORD *a1)
{
  return sub_240263338(a1, &qword_256FDF2A8, (void (*)(void))sub_24026345C);
}

uint64_t sub_240263338(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  void (*v14)(void);
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v14 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v15 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  v12 = v3[1];
  v13 = v8;
  v10 = *((_QWORD *)v3 + 4);
  v9 = *((_QWORD *)v3 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14();
  sub_2402BDE70();
  v16 = v13;
  v17 = v12;
  v18 = v10;
  v19 = v9;
  sub_2402630EC();
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v7, v5);
}

unint64_t sub_24026345C()
{
  unint64_t result;

  result = qword_256FDF2B0;
  if (!qword_256FDF2B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C36E8, &type metadata for SetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF2B0);
  }
  return result;
}

uint64_t SetHostConfigurationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402634CC(a1, &qword_256FDF2B8, (void (*)(void))sub_24026345C, a2);
}

uint64_t sub_2402634CC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v16 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE64();
  if (!v4)
  {
    v10 = v16;
    sub_24026315C();
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    v11 = v18;
    v12 = v19;
    v13 = v20;
    *(_QWORD *)v10 = v17;
    *(_QWORD *)(v10 + 8) = v11;
    *(_OWORD *)(v10 + 16) = v12;
    *(_OWORD *)(v10 + 32) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240263600@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetHostConfigurationRequest.init(from:)(a1, a2);
}

uint64_t sub_240263614(_QWORD *a1)
{
  return SetHostConfigurationRequest.encode(to:)(a1);
}

uint64_t SetHostConfigurationResponse.success.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SetHostConfigurationResponse.success.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*SetHostConfigurationResponse.success.modify())()
{
  return nullsub_1;
}

uint64_t SetHostConfigurationResponse.error.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SetHostConfigurationResponse.error.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SetHostConfigurationResponse.error.modify())()
{
  return nullsub_1;
}

LighthouseBackground::SetHostConfigurationResponse __swiftcall SetHostConfigurationResponse.init(success:error:)(Swift::Bool success, Swift::String_optional error)
{
  uint64_t v2;
  LighthouseBackground::SetHostConfigurationResponse result;

  *(_BYTE *)v2 = success;
  *(Swift::String_optional *)(v2 + 8) = error;
  result.error = error;
  result.success = success;
  return result;
}

uint64_t sub_2402636C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F727265;
  else
    return 0x73736563637573;
}

uint64_t sub_2402636FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24026C17C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_240263720()
{
  sub_240263898();
  return sub_2402BDE88();
}

uint64_t sub_240263748()
{
  sub_240263898();
  return sub_2402BDE94();
}

uint64_t SetHostConfigurationResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF2C0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 8);
  v10[0] = *(_QWORD *)(v1 + 16);
  v10[1] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240263898();
  sub_2402BDE70();
  v12 = 0;
  sub_2402BDD08();
  if (!v2)
  {
    v11 = 1;
    sub_2402BDC9C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_240263898()
{
  unint64_t result;

  result = qword_256FDF2C8;
  if (!qword_256FDF2C8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3698, &type metadata for SetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF2C8);
  }
  return result;
}

uint64_t SetHostConfigurationResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF2D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240263898();
  sub_2402BDE64();
  if (!v2)
  {
    v16 = 0;
    v9 = sub_2402BDC30();
    v15 = 1;
    v11 = sub_2402BDBC4();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)a2 = v9 & 1;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_240263A54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetHostConfigurationResponse.init(from:)(a1, a2);
}

uint64_t sub_240263A68(_QWORD *a1)
{
  return SetHostConfigurationResponse.encode(to:)(a1);
}

uint64_t GetNotificationsConfigRequest.registeredOnly.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*GetNotificationsConfigRequest.registeredOnly.modify())()
{
  return nullsub_1;
}

uint64_t sub_240263A94()
{
  return 0x7265747369676572;
}

uint64_t sub_240263AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7265747369676572 && a2 == 0xEE00796C6E4F6465)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240263B70()
{
  sub_240263BEC();
  return sub_2402BDE88();
}

uint64_t sub_240263B98()
{
  sub_240263BEC();
  return sub_2402BDE94();
}

uint64_t GetNotificationsConfigRequest.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF2D8, (void (*)(void))sub_240263BEC);
}

unint64_t sub_240263BEC()
{
  unint64_t result;

  result = qword_256FDF2E0;
  if (!qword_256FDF2E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3648, &type metadata for GetNotificationsConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF2E0);
  }
  return result;
}

uint64_t GetNotificationsConfigRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF2E8, (void (*)(void))sub_240263BEC, a2);
}

uint64_t sub_240263C5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GetNotificationsConfigRequest.init(from:)(a1, a2);
}

uint64_t sub_240263C70(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF2D8, (void (*)(void))sub_240263BEC);
}

uint64_t (*GetNotificationsConfigResponse.channelsByTopic.modify())()
{
  return nullsub_1;
}

uint64_t sub_240263CAC()
{
  return 0x736C656E6E616863;
}

uint64_t sub_240263CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736C656E6E616863 && a2 == 0xEF6369706F547942)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240263D88()
{
  sub_240263EE0();
  return sub_2402BDE88();
}

uint64_t sub_240263DB0()
{
  sub_240263EE0();
  return sub_2402BDE94();
}

uint64_t GetNotificationsConfigResponse.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF2F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240263EE0();
  sub_2402BDE70();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF300);
  sub_240263F24();
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_240263EE0()
{
  unint64_t result;

  result = qword_256FDF2F8;
  if (!qword_256FDF2F8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C35F8, &type metadata for GetNotificationsConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF2F8);
  }
  return result;
}

unint64_t sub_240263F24()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256FDF308;
  if (!qword_256FDF308)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDF300);
    v2[0] = MEMORY[0x24BEE0D08];
    v2[1] = sub_24026414C(&qword_254352228, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE04C0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256FDF308);
  }
  return result;
}

uint64_t GetNotificationsConfigResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF310);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240263EE0();
  sub_2402BDE64();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDF300);
    sub_2402640CC();
    sub_2402BDC54();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_2402640CC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256FDF318;
  if (!qword_256FDF318)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDF300);
    v2[0] = MEMORY[0x24BEE0D38];
    v2[1] = sub_24026414C(&qword_2543521E8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE04E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256FDF318);
  }
  return result;
}

uint64_t sub_24026414C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254352220);
    v8 = a2;
    result = MEMORY[0x2426820F8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2402641AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return GetNotificationsConfigResponse.init(from:)(a1, a2);
}

uint64_t sub_2402641C0(_QWORD *a1)
{
  return GetNotificationsConfigResponse.encode(to:)(a1);
}

uint64_t ResetNotificationsRequest.reload.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ResetNotificationsRequest.reload.modify())()
{
  return nullsub_1;
}

uint64_t sub_2402641EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x64616F6C6572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240264278()
{
  sub_2402642F4();
  return sub_2402BDE88();
}

uint64_t sub_2402642A0()
{
  sub_2402642F4();
  return sub_2402BDE94();
}

uint64_t ResetNotificationsRequest.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF320, (void (*)(void))sub_2402642F4);
}

unint64_t sub_2402642F4()
{
  unint64_t result;

  result = qword_256FDF328;
  if (!qword_256FDF328)
  {
    result = MEMORY[0x2426820F8](&unk_2402C35A8, &type metadata for ResetNotificationsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF328);
  }
  return result;
}

uint64_t ResetNotificationsRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF330, (void (*)(void))sub_2402642F4, a2);
}

uint64_t sub_240264364@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ResetNotificationsRequest.init(from:)(a1, a2);
}

uint64_t sub_240264378(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF320, (void (*)(void))sub_2402642F4);
}

uint64_t ResetNotificationsResponse.reloaded.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ResetNotificationsResponse.reloaded.modify())()
{
  return nullsub_1;
}

uint64_t sub_2402643BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x646564616F6C6572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240264450()
{
  sub_2402645BC();
  return sub_2402BDE88();
}

uint64_t sub_240264478()
{
  sub_2402645BC();
  return sub_2402BDE94();
}

uint64_t ResetNotificationsResponse.encode(to:)(_QWORD *a1)
{
  return sub_2402644CC(a1, &qword_256FDF338, (void (*)(void))sub_2402645BC);
}

uint64_t sub_2402644CC(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  void (*v10)(void);

  v10 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  sub_2402BDE70();
  sub_2402BDD08();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2402645BC()
{
  unint64_t result;

  result = qword_256FDF340;
  if (!qword_256FDF340)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3558, &type metadata for ResetNotificationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDF340);
  }
  return result;
}

uint64_t ResetNotificationsResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_24026462C(a1, &qword_256FDF348, (void (*)(void))sub_2402645BC, a2);
}

uint64_t sub_24026462C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v13 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE64();
  if (!v4)
  {
    v10 = sub_2402BDC30();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *v13 = v10 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_240264748()
{
  unint64_t result;

  result = qword_256FDF350;
  if (!qword_256FDF350)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListTasksResponse, &type metadata for ListTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF350);
  }
  return result;
}

uint64_t sub_24026478C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_2402647A0, (uint64_t (*)(void))sub_2402647E4);
}

unint64_t sub_2402647A0()
{
  unint64_t result;

  result = qword_256FDF390;
  if (!qword_256FDF390)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListTasksRequest, &type metadata for ListTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF390);
  }
  return result;
}

unint64_t sub_2402647E4()
{
  unint64_t result;

  result = qword_256FE0460;
  if (!qword_256FE0460)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListTasksRequest, &type metadata for ListTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FE0460);
  }
  return result;
}

unint64_t sub_24026482C()
{
  unint64_t result;

  result = qword_256FDFE10;
  if (!qword_256FDFE10)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCEmptyReply, &type metadata for XPCEmptyReply);
    atomic_store(result, (unint64_t *)&qword_256FDFE10);
  }
  return result;
}

uint64_t sub_240264870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264884, (uint64_t (*)(void))sub_2402648C8);
}

unint64_t sub_240264884()
{
  unint64_t result;

  result = qword_256FDF3D0;
  if (!qword_256FDF3D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListTasksResponse, &type metadata for ListTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF3D0);
  }
  return result;
}

unint64_t sub_2402648C8()
{
  unint64_t result;

  result = qword_256FDF3D8;
  if (!qword_256FDF3D8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListTasksResponse, &type metadata for ListTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF3D8);
  }
  return result;
}

uint64_t sub_24026490C()
{
  return sub_240232E34(&qword_256FDF3E0, type metadata accessor for GetTaskResponse, (uint64_t)&protocol conformance descriptor for GetTaskResponse);
}

uint64_t sub_240264938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_24026494C, (uint64_t (*)(void))sub_240264990);
}

unint64_t sub_24026494C()
{
  unint64_t result;

  result = qword_256FDF420;
  if (!qword_256FDF420)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetTaskRequest, &type metadata for GetTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF420);
  }
  return result;
}

unint64_t sub_240264990()
{
  unint64_t result;

  result = qword_256FDF428;
  if (!qword_256FDF428)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetTaskRequest, &type metadata for GetTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF428);
  }
  return result;
}

uint64_t sub_2402649D4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_240232E34(&qword_2543526F0, type metadata accessor for GetTaskResponse, (uint64_t)&protocol conformance descriptor for GetTaskResponse);
  result = sub_240232E34((unint64_t *)&unk_2543526E0, type metadata accessor for GetTaskResponse, (uint64_t)&protocol conformance descriptor for GetTaskResponse);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_240264A34()
{
  unint64_t result;

  result = qword_256FDF468;
  if (!qword_256FDF468)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetTasksResponse, &type metadata for ResetTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF468);
  }
  return result;
}

uint64_t sub_240264A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264A8C, (uint64_t (*)(void))sub_240264AD0);
}

unint64_t sub_240264A8C()
{
  unint64_t result;

  result = qword_256FDF4A8;
  if (!qword_256FDF4A8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetTasksRequest, &type metadata for ResetTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF4A8);
  }
  return result;
}

unint64_t sub_240264AD0()
{
  unint64_t result;

  result = qword_256FDF4B0;
  if (!qword_256FDF4B0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetTasksRequest, &type metadata for ResetTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF4B0);
  }
  return result;
}

uint64_t sub_240264B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264B28, (uint64_t (*)(void))sub_240264B6C);
}

unint64_t sub_240264B28()
{
  unint64_t result;

  result = qword_256FE03F0;
  if (!qword_256FE03F0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetTasksResponse, &type metadata for ResetTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FE03F0);
  }
  return result;
}

unint64_t sub_240264B6C()
{
  unint64_t result;

  result = qword_256FDF4F0;
  if (!qword_256FDF4F0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetTasksResponse, &type metadata for ResetTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF4F0);
  }
  return result;
}

unint64_t sub_240264BB4()
{
  unint64_t result;

  result = qword_256FDF4F8;
  if (!qword_256FDF4F8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for AddTaskResponse, &type metadata for AddTaskResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF4F8);
  }
  return result;
}

uint64_t sub_240264BF8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_240232E34(&qword_256FDF538, type metadata accessor for AddTaskRequest, (uint64_t)&protocol conformance descriptor for AddTaskRequest);
  result = sub_240232E34(&qword_256FE0420, type metadata accessor for AddTaskRequest, (uint64_t)&protocol conformance descriptor for AddTaskRequest);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_240264C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264C68, (uint64_t (*)(void))sub_240264CAC);
}

unint64_t sub_240264C68()
{
  unint64_t result;

  result = qword_256FDF578;
  if (!qword_256FDF578)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for AddTaskResponse, &type metadata for AddTaskResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF578);
  }
  return result;
}

unint64_t sub_240264CAC()
{
  unint64_t result;

  result = qword_256FDF580;
  if (!qword_256FDF580)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for AddTaskResponse, &type metadata for AddTaskResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF580);
  }
  return result;
}

unint64_t sub_240264CF4()
{
  unint64_t result;

  result = qword_256FDF588;
  if (!qword_256FDF588)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CleanTasksResponse, &type metadata for CleanTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF588);
  }
  return result;
}

uint64_t sub_240264D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264D4C, (uint64_t (*)(void))sub_240264D90);
}

unint64_t sub_240264D4C()
{
  unint64_t result;

  result = qword_256FDF5C8;
  if (!qword_256FDF5C8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CleanTasksRequest, &type metadata for CleanTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF5C8);
  }
  return result;
}

unint64_t sub_240264D90()
{
  unint64_t result;

  result = qword_256FE03D0;
  if (!qword_256FE03D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CleanTasksRequest, &type metadata for CleanTasksRequest);
    atomic_store(result, (unint64_t *)&qword_256FE03D0);
  }
  return result;
}

uint64_t sub_240264DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264DE8, (uint64_t (*)(void))sub_240264E2C);
}

unint64_t sub_240264DE8()
{
  unint64_t result;

  result = qword_256FDF608;
  if (!qword_256FDF608)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CleanTasksResponse, &type metadata for CleanTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF608);
  }
  return result;
}

unint64_t sub_240264E2C()
{
  unint64_t result;

  result = qword_256FDF610;
  if (!qword_256FDF610)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CleanTasksResponse, &type metadata for CleanTasksResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF610);
  }
  return result;
}

unint64_t sub_240264E74()
{
  unint64_t result;

  result = qword_256FDF618;
  if (!qword_256FDF618)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetOnDemandTaskRequestResponse, &type metadata for GetOnDemandTaskRequestResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF618);
  }
  return result;
}

uint64_t sub_240264EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240264ECC, (uint64_t (*)(void))sub_240264F10);
}

unint64_t sub_240264ECC()
{
  unint64_t result;

  result = qword_256FDF658;
  if (!qword_256FDF658)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetOnDemandTaskRequest, &type metadata for GetOnDemandTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF658);
  }
  return result;
}

unint64_t sub_240264F10()
{
  unint64_t result;

  result = qword_256FDF660;
  if (!qword_256FDF660)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetOnDemandTaskRequest, &type metadata for GetOnDemandTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF660);
  }
  return result;
}

unint64_t sub_240264F58()
{
  unint64_t result;

  result = qword_256FDF668;
  if (!qword_256FDF668)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandError, &type metadata for OnDemandError);
    atomic_store(result, (unint64_t *)&qword_256FDF668);
  }
  return result;
}

uint64_t sub_240264F9C()
{
  return sub_24026502C(&qword_256FDF670, &qword_256FDF678);
}

unint64_t sub_240264FC4()
{
  unint64_t result;

  result = qword_256FDF680;
  if (!qword_256FDF680)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandResult, &type metadata for OnDemandResult);
    atomic_store(result, (unint64_t *)&qword_256FDF680);
  }
  return result;
}

uint64_t sub_240265008()
{
  return sub_24026502C(&qword_256FDF688, &qword_256FDF690);
}

uint64_t sub_24026502C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24026506C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265080, (uint64_t (*)(void))sub_2402650C4);
}

unint64_t sub_240265080()
{
  unint64_t result;

  result = qword_256FE03A0;
  if (!qword_256FE03A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetOnDemandTaskRequestResponse, &type metadata for GetOnDemandTaskRequestResponse);
    atomic_store(result, (unint64_t *)&qword_256FE03A0);
  }
  return result;
}

unint64_t sub_2402650C4()
{
  unint64_t result;

  result = qword_256FDF6D0;
  if (!qword_256FDF6D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetOnDemandTaskRequestResponse, &type metadata for GetOnDemandTaskRequestResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF6D0);
  }
  return result;
}

unint64_t sub_24026510C()
{
  unint64_t result;

  result = qword_256FDF6D8;
  if (!qword_256FDF6D8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListExtensionsResponse, &type metadata for ListExtensionsResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF6D8);
  }
  return result;
}

uint64_t sub_240265150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265164, (uint64_t (*)(void))sub_2402651A8);
}

unint64_t sub_240265164()
{
  unint64_t result;

  result = qword_256FDF718;
  if (!qword_256FDF718)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListExtensionsRequest, &type metadata for ListExtensionsRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF718);
  }
  return result;
}

unint64_t sub_2402651A8()
{
  unint64_t result;

  result = qword_256FE0380;
  if (!qword_256FE0380)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListExtensionsRequest, &type metadata for ListExtensionsRequest);
    atomic_store(result, (unint64_t *)&qword_256FE0380);
  }
  return result;
}

uint64_t sub_2402651EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265200, (uint64_t (*)(void))sub_240265244);
}

unint64_t sub_240265200()
{
  unint64_t result;

  result = qword_256FDF758;
  if (!qword_256FDF758)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListExtensionsResponse, &type metadata for ListExtensionsResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF758);
  }
  return result;
}

unint64_t sub_240265244()
{
  unint64_t result;

  result = qword_256FDF760;
  if (!qword_256FDF760)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ListExtensionsResponse, &type metadata for ListExtensionsResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF760);
  }
  return result;
}

unint64_t sub_24026528C()
{
  unint64_t result;

  result = qword_256FDF768;
  if (!qword_256FDF768)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetExtensionResponse, &type metadata for GetExtensionResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF768);
  }
  return result;
}

uint64_t sub_2402652D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_2402652E4, (uint64_t (*)(void))sub_240265328);
}

unint64_t sub_2402652E4()
{
  unint64_t result;

  result = qword_256FDF7A8;
  if (!qword_256FDF7A8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetExtensionRequest, &type metadata for GetExtensionRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF7A8);
  }
  return result;
}

unint64_t sub_240265328()
{
  unint64_t result;

  result = qword_256FDF7B0;
  if (!qword_256FDF7B0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetExtensionRequest, &type metadata for GetExtensionRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF7B0);
  }
  return result;
}

uint64_t sub_24026536C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265380, (uint64_t (*)(void))sub_2402653C4);
}

unint64_t sub_240265380()
{
  unint64_t result;

  result = qword_256FE0350;
  if (!qword_256FE0350)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetExtensionResponse, &type metadata for GetExtensionResponse);
    atomic_store(result, (unint64_t *)&qword_256FE0350);
  }
  return result;
}

unint64_t sub_2402653C4()
{
  unint64_t result;

  result = qword_256FDF7F0;
  if (!qword_256FDF7F0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetExtensionResponse, &type metadata for GetExtensionResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF7F0);
  }
  return result;
}

unint64_t sub_24026540C()
{
  unint64_t result;

  result = qword_256FDF7F8;
  if (!qword_256FDF7F8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetHostConfigurationResponse, &type metadata for GetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF7F8);
  }
  return result;
}

uint64_t sub_240265450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265464, (uint64_t (*)(void))sub_2402654A8);
}

unint64_t sub_240265464()
{
  unint64_t result;

  result = qword_256FDF838;
  if (!qword_256FDF838)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetHostConfigurationRequest, &type metadata for GetHostConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF838);
  }
  return result;
}

unint64_t sub_2402654A8()
{
  unint64_t result;

  result = qword_256FDF840;
  if (!qword_256FDF840)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetHostConfigurationRequest, &type metadata for GetHostConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF840);
  }
  return result;
}

uint64_t sub_2402654EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265500, (uint64_t (*)(void))sub_240265544);
}

unint64_t sub_240265500()
{
  unint64_t result;

  result = qword_256FE04E0;
  if (!qword_256FE04E0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetHostConfigurationResponse, &type metadata for GetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FE04E0);
  }
  return result;
}

unint64_t sub_240265544()
{
  unint64_t result;

  result = qword_256FDF880;
  if (!qword_256FDF880)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetHostConfigurationResponse, &type metadata for GetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF880);
  }
  return result;
}

unint64_t sub_24026558C()
{
  unint64_t result;

  result = qword_256FDF888;
  if (!qword_256FDF888)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for SetHostConfigurationResponse, &type metadata for SetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF888);
  }
  return result;
}

uint64_t sub_2402655D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_2402655E4, (uint64_t (*)(void))sub_240265628);
}

unint64_t sub_2402655E4()
{
  unint64_t result;

  result = qword_256FDF8C8;
  if (!qword_256FDF8C8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for SetHostConfigurationRequest, &type metadata for SetHostConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF8C8);
  }
  return result;
}

unint64_t sub_240265628()
{
  unint64_t result;

  result = qword_256FE04C0;
  if (!qword_256FE04C0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for SetHostConfigurationRequest, &type metadata for SetHostConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_256FE04C0);
  }
  return result;
}

uint64_t sub_24026566C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265680, (uint64_t (*)(void))sub_2402656C4);
}

unint64_t sub_240265680()
{
  unint64_t result;

  result = qword_256FDF908;
  if (!qword_256FDF908)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for SetHostConfigurationResponse, &type metadata for SetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF908);
  }
  return result;
}

unint64_t sub_2402656C4()
{
  unint64_t result;

  result = qword_256FDF910;
  if (!qword_256FDF910)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for SetHostConfigurationResponse, &type metadata for SetHostConfigurationResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF910);
  }
  return result;
}

unint64_t sub_24026570C()
{
  unint64_t result;

  result = qword_256FDF918;
  if (!qword_256FDF918)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetNotificationsConfigResponse, &type metadata for GetNotificationsConfigResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF918);
  }
  return result;
}

uint64_t sub_240265750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265764, (uint64_t (*)(void))sub_2402657A8);
}

unint64_t sub_240265764()
{
  unint64_t result;

  result = qword_256FDF958;
  if (!qword_256FDF958)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetNotificationsConfigRequest, &type metadata for GetNotificationsConfigRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF958);
  }
  return result;
}

unint64_t sub_2402657A8()
{
  unint64_t result;

  result = qword_256FDF960;
  if (!qword_256FDF960)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetNotificationsConfigRequest, &type metadata for GetNotificationsConfigRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF960);
  }
  return result;
}

uint64_t sub_2402657EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240265800, (uint64_t (*)(void))sub_240265844);
}

unint64_t sub_240265800()
{
  unint64_t result;

  result = qword_256FE0490;
  if (!qword_256FE0490)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetNotificationsConfigResponse, &type metadata for GetNotificationsConfigResponse);
    atomic_store(result, (unint64_t *)&qword_256FE0490);
  }
  return result;
}

unint64_t sub_240265844()
{
  unint64_t result;

  result = qword_256FDF9A0;
  if (!qword_256FDF9A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for GetNotificationsConfigResponse, &type metadata for GetNotificationsConfigResponse);
    atomic_store(result, (unint64_t *)&qword_256FDF9A0);
  }
  return result;
}

uint64_t sub_24026588C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_2402658A0, (uint64_t (*)(void))sub_2402658E4);
}

unint64_t sub_2402658A0()
{
  unint64_t result;

  result = qword_256FDF9E0;
  if (!qword_256FDF9E0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetNotificationsRequest, &type metadata for ResetNotificationsRequest);
    atomic_store(result, (unint64_t *)&qword_256FDF9E0);
  }
  return result;
}

unint64_t sub_2402658E4()
{
  unint64_t result;

  result = qword_256FE0470;
  if (!qword_256FE0470)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetNotificationsRequest, &type metadata for ResetNotificationsRequest);
    atomic_store(result, (unint64_t *)&qword_256FE0470);
  }
  return result;
}

uint64_t sub_240265928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_24026596C, (uint64_t (*)(void))sub_2402659B0);
}

uint64_t sub_24026593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_24026596C()
{
  unint64_t result;

  result = qword_256FDFA20;
  if (!qword_256FDFA20)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetNotificationsResponse, &type metadata for ResetNotificationsResponse);
    atomic_store(result, (unint64_t *)&qword_256FDFA20);
  }
  return result;
}

unint64_t sub_2402659B0()
{
  unint64_t result;

  result = qword_256FDFA28[0];
  if (!qword_256FDFA28[0])
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for ResetNotificationsResponse, &type metadata for ResetNotificationsResponse);
    atomic_store(result, qword_256FDFA28);
  }
  return result;
}

uint64_t sub_2402659F4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ResetNotificationsResponse.init(from:)(a1, a2);
}

uint64_t sub_240265A08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_240265A34(a1, a2, a3, &qword_256FDF338, (void (*)(void))sub_2402645BC);
}

uint64_t sub_240265A34(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(void);

  v12 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  sub_2402BDE70();
  sub_2402BDD08();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ListTasksRequest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ListTasksRequest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ListTasksRequest()
{
  return &type metadata for ListTasksRequest;
}

ValueMetadata *type metadata accessor for ListTasksResponse()
{
  return &type metadata for ListTasksResponse;
}

_QWORD *initializeBufferWithCopyOfBuffer for GetTaskRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for GetTaskRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GetTaskRequest()
{
  return &type metadata for GetTaskRequest;
}

_QWORD *initializeBufferWithCopyOfBuffer for GetTaskResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int *v65;
  _QWORD *v66;

  v4 = type metadata accessor for MLHostTask(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(v4 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = *(_QWORD *)((char *)a2 + v7 + 8);
    *(_QWORD *)v8 = *(_QWORD *)((char *)a2 + v7);
    *((_QWORD *)v8 + 1) = v10;
    v11 = *(_QWORD *)((char *)a2 + v7 + 24);
    *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
    *((_QWORD *)v8 + 3) = v11;
    v12 = *(_QWORD *)((char *)a2 + v7 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v65 = v6;
    v66 = a2;
    if (v12 == 1)
    {
      v13 = *((_OWORD *)v9 + 13);
      *((_OWORD *)v8 + 12) = *((_OWORD *)v9 + 12);
      *((_OWORD *)v8 + 13) = v13;
      *((_OWORD *)v8 + 14) = *((_OWORD *)v9 + 14);
      *(_OWORD *)(v8 + 236) = *(_OWORD *)(v9 + 236);
      v14 = *((_OWORD *)v9 + 9);
      *((_OWORD *)v8 + 8) = *((_OWORD *)v9 + 8);
      *((_OWORD *)v8 + 9) = v14;
      v15 = *((_OWORD *)v9 + 11);
      *((_OWORD *)v8 + 10) = *((_OWORD *)v9 + 10);
      *((_OWORD *)v8 + 11) = v15;
      v16 = *((_OWORD *)v9 + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)v9 + 4);
      *((_OWORD *)v8 + 5) = v16;
      v17 = *((_OWORD *)v9 + 7);
      *((_OWORD *)v8 + 6) = *((_OWORD *)v9 + 6);
      *((_OWORD *)v8 + 7) = v17;
      v18 = *((_OWORD *)v9 + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
      *((_OWORD *)v8 + 3) = v18;
    }
    else
    {
      *((_QWORD *)v8 + 4) = *((_QWORD *)v9 + 4);
      v8[40] = v9[40];
      *((_QWORD *)v8 + 6) = *((_QWORD *)v9 + 6);
      v8[56] = v9[56];
      *((_QWORD *)v8 + 8) = *((_QWORD *)v9 + 8);
      v8[72] = v9[72];
      *(_QWORD *)(v8 + 73) = *(_QWORD *)(v9 + 73);
      *(_WORD *)(v8 + 81) = *(_WORD *)(v9 + 81);
      v8[83] = v9[83];
      *((_QWORD *)v8 + 11) = *((_QWORD *)v9 + 11);
      *((_QWORD *)v8 + 12) = v12;
      v20 = *((_QWORD *)v9 + 14);
      *((_QWORD *)v8 + 13) = *((_QWORD *)v9 + 13);
      *((_QWORD *)v8 + 14) = v20;
      v8[120] = v9[120];
      v21 = *((_QWORD *)v9 + 17);
      *((_QWORD *)v8 + 16) = *((_QWORD *)v9 + 16);
      *((_QWORD *)v8 + 17) = v21;
      *((_QWORD *)v8 + 18) = *((_QWORD *)v9 + 18);
      v8[152] = v9[152];
      v8[153] = v9[153];
      *((_WORD *)v8 + 77) = *((_WORD *)v9 + 77);
      v8[168] = v9[168];
      *((_QWORD *)v8 + 20) = *((_QWORD *)v9 + 20);
      v22 = *((_QWORD *)v9 + 23);
      *((_QWORD *)v8 + 22) = *((_QWORD *)v9 + 22);
      *((_QWORD *)v8 + 23) = v22;
      v8[200] = v9[200];
      *((_QWORD *)v8 + 24) = *((_QWORD *)v9 + 24);
      *(_DWORD *)(v8 + 201) = *(_DWORD *)(v9 + 201);
      v8[205] = v9[205];
      v8[206] = v9[206];
      v8[207] = v9[207];
      v8[216] = v9[216];
      *((_QWORD *)v8 + 26) = *((_QWORD *)v9 + 26);
      v8[232] = v9[232];
      *((_QWORD *)v8 + 28) = *((_QWORD *)v9 + 28);
      v23 = *((_QWORD *)v9 + 30);
      v8[248] = v9[248];
      *((_QWORD *)v8 + 30) = v23;
      v8[249] = v9[249];
      v8[250] = v9[250];
      v8[251] = v9[251];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v24 = v8 + 256;
    v25 = v9 + 256;
    v26 = *((_QWORD *)v9 + 41);
    if (v26 == 1)
    {
      v27 = *((_OWORD *)v9 + 29);
      *((_OWORD *)v8 + 28) = *((_OWORD *)v9 + 28);
      *((_OWORD *)v8 + 29) = v27;
      v28 = *((_OWORD *)v9 + 31);
      *((_OWORD *)v8 + 30) = *((_OWORD *)v9 + 30);
      *((_OWORD *)v8 + 31) = v28;
      v29 = *((_OWORD *)v9 + 25);
      *((_OWORD *)v8 + 24) = *((_OWORD *)v9 + 24);
      *((_OWORD *)v8 + 25) = v29;
      v30 = *((_OWORD *)v9 + 27);
      *((_OWORD *)v8 + 26) = *((_OWORD *)v9 + 26);
      *((_OWORD *)v8 + 27) = v30;
      v31 = *((_OWORD *)v9 + 21);
      *((_OWORD *)v8 + 20) = *((_OWORD *)v9 + 20);
      *((_OWORD *)v8 + 21) = v31;
      v32 = *((_OWORD *)v9 + 23);
      *((_OWORD *)v8 + 22) = *((_OWORD *)v9 + 22);
      *((_OWORD *)v8 + 23) = v32;
      v33 = *((_OWORD *)v9 + 17);
      *v24 = *v25;
      *((_OWORD *)v8 + 17) = v33;
      v34 = *((_OWORD *)v9 + 19);
      *((_OWORD *)v8 + 18) = *((_OWORD *)v9 + 18);
      *((_OWORD *)v8 + 19) = v34;
    }
    else
    {
      *v24 = *v25;
      *((_WORD *)v8 + 136) = *((_WORD *)v9 + 136);
      *((_WORD *)v8 + 148) = *((_WORD *)v9 + 148);
      *(_OWORD *)(v8 + 280) = *(_OWORD *)(v9 + 280);
      *(_DWORD *)(v8 + 298) = *(_DWORD *)(v9 + 298);
      v8[302] = v9[302];
      v8[312] = v9[312];
      *((_QWORD *)v8 + 38) = *((_QWORD *)v9 + 38);
      *(_QWORD *)(v8 + 313) = *(_QWORD *)(v9 + 313);
      *((_QWORD *)v8 + 41) = v26;
      *((_WORD *)v8 + 168) = *((_WORD *)v9 + 168);
      *((_QWORD *)v8 + 43) = *((_QWORD *)v9 + 43);
      v8[352] = v9[352];
      *((_QWORD *)v8 + 45) = *((_QWORD *)v9 + 45);
      *((_WORD *)v8 + 184) = *((_WORD *)v9 + 184);
      v8[370] = v9[370];
      v35 = *((_QWORD *)v9 + 48);
      *((_QWORD *)v8 + 47) = *((_QWORD *)v9 + 47);
      *((_QWORD *)v8 + 48) = v35;
      v8[400] = v9[400];
      *((_QWORD *)v8 + 49) = *((_QWORD *)v9 + 49);
      v36 = *((_QWORD *)v9 + 52);
      *((_QWORD *)v8 + 51) = *((_QWORD *)v9 + 51);
      *((_QWORD *)v8 + 52) = v36;
      v8[432] = v9[432];
      *((_QWORD *)v8 + 53) = *((_QWORD *)v9 + 53);
      *(_WORD *)(v8 + 433) = *(_WORD *)(v9 + 433);
      v37 = *((_QWORD *)v9 + 56);
      *((_QWORD *)v8 + 55) = *((_QWORD *)v9 + 55);
      *((_QWORD *)v8 + 56) = v37;
      v8[456] = v9[456];
      *(_WORD *)(v8 + 457) = *(_WORD *)(v9 + 457);
      v38 = *((_QWORD *)v9 + 59);
      *((_QWORD *)v8 + 58) = *((_QWORD *)v9 + 58);
      *((_QWORD *)v8 + 59) = v38;
      *((_QWORD *)v8 + 60) = *((_QWORD *)v9 + 60);
      *((_WORD *)v8 + 244) = *((_WORD *)v9 + 244);
      v39 = *((_QWORD *)v9 + 63);
      *((_QWORD *)v8 + 62) = *((_QWORD *)v9 + 62);
      *((_QWORD *)v8 + 63) = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v40 = (int *)type metadata accessor for TaskDefinition(0);
    v41 = v40[8];
    v42 = &v8[v41];
    v43 = &v9[v41];
    v44 = sub_2402BD48C();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    if (v46(v43, 1, v44))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v48 = v40[9];
    v49 = &v8[v48];
    v50 = &v9[v48];
    if (v46(&v9[v48], 1, v44))
    {
      v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v49, v50, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v49, 0, 1, v44);
    }
    *(_QWORD *)&v8[v40[10]] = *(_QWORD *)&v9[v40[10]];
    v52 = v65[6];
    v53 = (_QWORD *)((char *)a1 + v52);
    v54 = (_QWORD *)((char *)v66 + v52);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    *((_BYTE *)a1 + v65[7]) = *((_BYTE *)v66 + v65[7]);
    v56 = v65[8];
    v57 = (char *)a1 + v56;
    v58 = (char *)v66 + v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v46(v58, 1, v44))
    {
      v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v57, v58, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v57, 0, 1, v44);
    }
    v60 = v65[9];
    v61 = (char *)a1 + v60;
    v62 = (char *)v66 + v60;
    if (v46((char *)v66 + v60, 1, v44))
    {
      v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v61, v62, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v61, 0, 1, v44);
    }
  }
  return a1;
}

uint64_t destroy for GetTaskResponse(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = (int *)type metadata accessor for MLHostTask(0);
  v3 = a1 + v2[5];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v3 + 328) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = type metadata accessor for TaskDefinition(0);
  v5 = v3 + *(int *)(v4 + 32);
  v6 = sub_2402BD48C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = v3 + *(int *)(v4 + 36);
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = a1 + v2[8];
  if (!v8(v10, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  v11 = a1 + v2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v11, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  return result;
}

_BYTE *initializeWithCopy for GetTaskResponse(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(_BYTE *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  int *v62;
  _BYTE *v63;

  *a1 = *a2;
  v4 = type metadata accessor for MLHostTask(0);
  v5 = *(int *)(v4 + 20);
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5 + 8];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = v8;
  v9 = *(_QWORD *)&a2[v5 + 24];
  *((_QWORD *)v6 + 2) = *(_QWORD *)&a2[v5 + 16];
  *((_QWORD *)v6 + 3) = v9;
  v10 = *(_QWORD *)&a2[v5 + 96];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v62 = (int *)v4;
  v63 = a2;
  if (v10 == 1)
  {
    v11 = *((_OWORD *)v7 + 13);
    *((_OWORD *)v6 + 12) = *((_OWORD *)v7 + 12);
    *((_OWORD *)v6 + 13) = v11;
    *((_OWORD *)v6 + 14) = *((_OWORD *)v7 + 14);
    *(_OWORD *)(v6 + 236) = *(_OWORD *)(v7 + 236);
    v12 = *((_OWORD *)v7 + 9);
    *((_OWORD *)v6 + 8) = *((_OWORD *)v7 + 8);
    *((_OWORD *)v6 + 9) = v12;
    v13 = *((_OWORD *)v7 + 11);
    *((_OWORD *)v6 + 10) = *((_OWORD *)v7 + 10);
    *((_OWORD *)v6 + 11) = v13;
    v14 = *((_OWORD *)v7 + 5);
    *((_OWORD *)v6 + 4) = *((_OWORD *)v7 + 4);
    *((_OWORD *)v6 + 5) = v14;
    v15 = *((_OWORD *)v7 + 7);
    *((_OWORD *)v6 + 6) = *((_OWORD *)v7 + 6);
    *((_OWORD *)v6 + 7) = v15;
    v16 = *((_OWORD *)v7 + 3);
    *((_OWORD *)v6 + 2) = *((_OWORD *)v7 + 2);
    *((_OWORD *)v6 + 3) = v16;
  }
  else
  {
    *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
    v6[40] = v7[40];
    *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
    v6[56] = v7[56];
    *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
    v6[72] = v7[72];
    *(_QWORD *)(v6 + 73) = *(_QWORD *)(v7 + 73);
    *(_WORD *)(v6 + 81) = *(_WORD *)(v7 + 81);
    v6[83] = v7[83];
    *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
    *((_QWORD *)v6 + 12) = v10;
    v17 = *((_QWORD *)v7 + 14);
    *((_QWORD *)v6 + 13) = *((_QWORD *)v7 + 13);
    *((_QWORD *)v6 + 14) = v17;
    v6[120] = v7[120];
    v18 = *((_QWORD *)v7 + 17);
    *((_QWORD *)v6 + 16) = *((_QWORD *)v7 + 16);
    *((_QWORD *)v6 + 17) = v18;
    *((_QWORD *)v6 + 18) = *((_QWORD *)v7 + 18);
    v6[152] = v7[152];
    v6[153] = v7[153];
    *((_WORD *)v6 + 77) = *((_WORD *)v7 + 77);
    v6[168] = v7[168];
    *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
    v19 = *((_QWORD *)v7 + 23);
    *((_QWORD *)v6 + 22) = *((_QWORD *)v7 + 22);
    *((_QWORD *)v6 + 23) = v19;
    v6[200] = v7[200];
    *((_QWORD *)v6 + 24) = *((_QWORD *)v7 + 24);
    *(_DWORD *)(v6 + 201) = *(_DWORD *)(v7 + 201);
    v6[205] = v7[205];
    v6[206] = v7[206];
    v6[207] = v7[207];
    v6[216] = v7[216];
    *((_QWORD *)v6 + 26) = *((_QWORD *)v7 + 26);
    v6[232] = v7[232];
    *((_QWORD *)v6 + 28) = *((_QWORD *)v7 + 28);
    v20 = *((_QWORD *)v7 + 30);
    v6[248] = v7[248];
    *((_QWORD *)v6 + 30) = v20;
    v6[249] = v7[249];
    v6[250] = v7[250];
    v6[251] = v7[251];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v21 = v6 + 256;
  v22 = v7 + 256;
  v23 = *((_QWORD *)v7 + 41);
  if (v23 == 1)
  {
    v24 = *((_OWORD *)v7 + 29);
    *((_OWORD *)v6 + 28) = *((_OWORD *)v7 + 28);
    *((_OWORD *)v6 + 29) = v24;
    v25 = *((_OWORD *)v7 + 31);
    *((_OWORD *)v6 + 30) = *((_OWORD *)v7 + 30);
    *((_OWORD *)v6 + 31) = v25;
    v26 = *((_OWORD *)v7 + 25);
    *((_OWORD *)v6 + 24) = *((_OWORD *)v7 + 24);
    *((_OWORD *)v6 + 25) = v26;
    v27 = *((_OWORD *)v7 + 27);
    *((_OWORD *)v6 + 26) = *((_OWORD *)v7 + 26);
    *((_OWORD *)v6 + 27) = v27;
    v28 = *((_OWORD *)v7 + 21);
    *((_OWORD *)v6 + 20) = *((_OWORD *)v7 + 20);
    *((_OWORD *)v6 + 21) = v28;
    v29 = *((_OWORD *)v7 + 23);
    *((_OWORD *)v6 + 22) = *((_OWORD *)v7 + 22);
    *((_OWORD *)v6 + 23) = v29;
    v30 = *((_OWORD *)v7 + 17);
    *v21 = *v22;
    *((_OWORD *)v6 + 17) = v30;
    v31 = *((_OWORD *)v7 + 19);
    *((_OWORD *)v6 + 18) = *((_OWORD *)v7 + 18);
    *((_OWORD *)v6 + 19) = v31;
  }
  else
  {
    *v21 = *v22;
    *((_WORD *)v6 + 136) = *((_WORD *)v7 + 136);
    *((_WORD *)v6 + 148) = *((_WORD *)v7 + 148);
    *(_OWORD *)(v6 + 280) = *(_OWORD *)(v7 + 280);
    *(_DWORD *)(v6 + 298) = *(_DWORD *)(v7 + 298);
    v6[302] = v7[302];
    v6[312] = v7[312];
    *((_QWORD *)v6 + 38) = *((_QWORD *)v7 + 38);
    *(_QWORD *)(v6 + 313) = *(_QWORD *)(v7 + 313);
    *((_QWORD *)v6 + 41) = v23;
    *((_WORD *)v6 + 168) = *((_WORD *)v7 + 168);
    *((_QWORD *)v6 + 43) = *((_QWORD *)v7 + 43);
    v6[352] = v7[352];
    *((_QWORD *)v6 + 45) = *((_QWORD *)v7 + 45);
    *((_WORD *)v6 + 184) = *((_WORD *)v7 + 184);
    v6[370] = v7[370];
    v32 = *((_QWORD *)v7 + 48);
    *((_QWORD *)v6 + 47) = *((_QWORD *)v7 + 47);
    *((_QWORD *)v6 + 48) = v32;
    v6[400] = v7[400];
    *((_QWORD *)v6 + 49) = *((_QWORD *)v7 + 49);
    v33 = *((_QWORD *)v7 + 52);
    *((_QWORD *)v6 + 51) = *((_QWORD *)v7 + 51);
    *((_QWORD *)v6 + 52) = v33;
    v6[432] = v7[432];
    *((_QWORD *)v6 + 53) = *((_QWORD *)v7 + 53);
    *(_WORD *)(v6 + 433) = *(_WORD *)(v7 + 433);
    v34 = *((_QWORD *)v7 + 56);
    *((_QWORD *)v6 + 55) = *((_QWORD *)v7 + 55);
    *((_QWORD *)v6 + 56) = v34;
    v6[456] = v7[456];
    *(_WORD *)(v6 + 457) = *(_WORD *)(v7 + 457);
    v35 = *((_QWORD *)v7 + 59);
    *((_QWORD *)v6 + 58) = *((_QWORD *)v7 + 58);
    *((_QWORD *)v6 + 59) = v35;
    *((_QWORD *)v6 + 60) = *((_QWORD *)v7 + 60);
    *((_WORD *)v6 + 244) = *((_WORD *)v7 + 244);
    v36 = *((_QWORD *)v7 + 63);
    *((_QWORD *)v6 + 62) = *((_QWORD *)v7 + 62);
    *((_QWORD *)v6 + 63) = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v37 = (int *)type metadata accessor for TaskDefinition(0);
  v38 = v37[8];
  v39 = &v6[v38];
  v40 = &v7[v38];
  v41 = sub_2402BD48C();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48);
  if (v43(v40, 1, v41))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(v39, v40, v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  v45 = v37[9];
  v46 = &v6[v45];
  v47 = &v7[v45];
  if (v43(&v7[v45], 1, v41))
  {
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(v46, v47, v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v46, 0, 1, v41);
  }
  *(_QWORD *)&v6[v37[10]] = *(_QWORD *)&v7[v37[10]];
  v49 = v62[6];
  v50 = &a1[v49];
  v51 = &v63[v49];
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  a1[v62[7]] = v63[v62[7]];
  v53 = v62[8];
  v54 = &a1[v53];
  v55 = &v63[v53];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v43(v55, 1, v41))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(v54, v55, v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v54, 0, 1, v41);
  }
  v57 = v62[9];
  v58 = &a1[v57];
  v59 = &v63[v57];
  if (v43(&v63[v57], 1, v41))
  {
    v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 16))(v58, v59, v41);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v58, 0, 1, v41);
  }
  return a1;
}

_BYTE *assignWithCopy for GetTaskResponse(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_BYTE *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  int v115;
  int v116;
  uint64_t v117;
  int *v119;
  _BYTE *v120;

  *a1 = *a2;
  v119 = (int *)type metadata accessor for MLHostTask(0);
  v120 = a2;
  v4 = v119[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  *(_QWORD *)v5 = *(_QWORD *)v6;
  *((_QWORD *)v5 + 1) = *((_QWORD *)v6 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v5 + 2) = *((_QWORD *)v6 + 2);
  *((_QWORD *)v5 + 3) = *((_QWORD *)v6 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = v5 + 32;
  v8 = v6 + 32;
  v9 = *((_QWORD *)v6 + 12);
  if (*((_QWORD *)v5 + 12) == 1)
  {
    if (v9 == 1)
    {
      v10 = *((_OWORD *)v6 + 3);
      *v7 = *v8;
      *((_OWORD *)v5 + 3) = v10;
      v11 = *((_OWORD *)v6 + 4);
      v12 = *((_OWORD *)v6 + 5);
      v13 = *((_OWORD *)v6 + 7);
      *((_OWORD *)v5 + 6) = *((_OWORD *)v6 + 6);
      *((_OWORD *)v5 + 7) = v13;
      *((_OWORD *)v5 + 4) = v11;
      *((_OWORD *)v5 + 5) = v12;
      v14 = *((_OWORD *)v6 + 8);
      v15 = *((_OWORD *)v6 + 9);
      v16 = *((_OWORD *)v6 + 11);
      *((_OWORD *)v5 + 10) = *((_OWORD *)v6 + 10);
      *((_OWORD *)v5 + 11) = v16;
      *((_OWORD *)v5 + 8) = v14;
      *((_OWORD *)v5 + 9) = v15;
      v17 = *((_OWORD *)v6 + 12);
      v18 = *((_OWORD *)v6 + 13);
      v19 = *((_OWORD *)v6 + 14);
      *(_OWORD *)(v5 + 236) = *(_OWORD *)(v6 + 236);
      *((_OWORD *)v5 + 13) = v18;
      *((_OWORD *)v5 + 14) = v19;
      *((_OWORD *)v5 + 12) = v17;
    }
    else
    {
      *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
      v5[40] = v6[40];
      v30 = *((_QWORD *)v6 + 6);
      v5[56] = v6[56];
      *((_QWORD *)v5 + 6) = v30;
      v31 = *((_QWORD *)v6 + 8);
      v5[72] = v6[72];
      *((_QWORD *)v5 + 8) = v31;
      v5[73] = v6[73];
      v5[74] = v6[74];
      v5[75] = v6[75];
      v5[76] = v6[76];
      v5[77] = v6[77];
      v5[78] = v6[78];
      v5[79] = v6[79];
      v5[80] = v6[80];
      v5[81] = v6[81];
      v5[82] = v6[82];
      v5[83] = v6[83];
      *((_QWORD *)v5 + 11) = *((_QWORD *)v6 + 11);
      *((_QWORD *)v5 + 12) = *((_QWORD *)v6 + 12);
      *((_QWORD *)v5 + 13) = *((_QWORD *)v6 + 13);
      *((_QWORD *)v5 + 14) = *((_QWORD *)v6 + 14);
      v5[120] = v6[120];
      *((_QWORD *)v5 + 16) = *((_QWORD *)v6 + 16);
      *((_QWORD *)v5 + 17) = *((_QWORD *)v6 + 17);
      v32 = *((_QWORD *)v6 + 18);
      v5[152] = v6[152];
      *((_QWORD *)v5 + 18) = v32;
      v5[153] = v6[153];
      v5[154] = v6[154];
      v5[155] = v6[155];
      v33 = *((_QWORD *)v6 + 20);
      v5[168] = v6[168];
      *((_QWORD *)v5 + 20) = v33;
      *((_QWORD *)v5 + 22) = *((_QWORD *)v6 + 22);
      *((_QWORD *)v5 + 23) = *((_QWORD *)v6 + 23);
      v34 = *((_QWORD *)v6 + 24);
      v5[200] = v6[200];
      *((_QWORD *)v5 + 24) = v34;
      v5[201] = v6[201];
      v5[202] = v6[202];
      v5[203] = v6[203];
      v5[204] = v6[204];
      v5[205] = v6[205];
      v5[206] = v6[206];
      v5[207] = v6[207];
      v35 = *((_QWORD *)v6 + 26);
      v5[216] = v6[216];
      *((_QWORD *)v5 + 26) = v35;
      v36 = *((_QWORD *)v6 + 28);
      v5[232] = v6[232];
      *((_QWORD *)v5 + 28) = v36;
      v37 = *((_QWORD *)v6 + 30);
      v5[248] = v6[248];
      *((_QWORD *)v5 + 30) = v37;
      v5[249] = v6[249];
      v5[250] = v6[250];
      v5[251] = v6[251];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v9 == 1)
  {
    sub_240240BCC((uint64_t)(v5 + 32));
    v20 = *((_OWORD *)v6 + 3);
    *v7 = *v8;
    *((_OWORD *)v5 + 3) = v20;
    v21 = *((_OWORD *)v6 + 7);
    v23 = *((_OWORD *)v6 + 4);
    v22 = *((_OWORD *)v6 + 5);
    *((_OWORD *)v5 + 6) = *((_OWORD *)v6 + 6);
    *((_OWORD *)v5 + 7) = v21;
    *((_OWORD *)v5 + 4) = v23;
    *((_OWORD *)v5 + 5) = v22;
    v24 = *((_OWORD *)v6 + 11);
    v26 = *((_OWORD *)v6 + 8);
    v25 = *((_OWORD *)v6 + 9);
    *((_OWORD *)v5 + 10) = *((_OWORD *)v6 + 10);
    *((_OWORD *)v5 + 11) = v24;
    *((_OWORD *)v5 + 8) = v26;
    *((_OWORD *)v5 + 9) = v25;
    v28 = *((_OWORD *)v6 + 13);
    v27 = *((_OWORD *)v6 + 14);
    v29 = *((_OWORD *)v6 + 12);
    *(_OWORD *)(v5 + 236) = *(_OWORD *)(v6 + 236);
    *((_OWORD *)v5 + 13) = v28;
    *((_OWORD *)v5 + 14) = v27;
    *((_OWORD *)v5 + 12) = v29;
  }
  else
  {
    *((_QWORD *)v5 + 4) = *((_QWORD *)v6 + 4);
    v5[40] = v6[40];
    v38 = *((_QWORD *)v6 + 6);
    v5[56] = v6[56];
    *((_QWORD *)v5 + 6) = v38;
    v39 = *((_QWORD *)v6 + 8);
    v5[72] = v6[72];
    *((_QWORD *)v5 + 8) = v39;
    v5[73] = v6[73];
    v5[74] = v6[74];
    v5[75] = v6[75];
    v5[76] = v6[76];
    v5[77] = v6[77];
    v5[78] = v6[78];
    v5[79] = v6[79];
    v5[80] = v6[80];
    v5[81] = v6[81];
    v5[82] = v6[82];
    v5[83] = v6[83];
    *((_QWORD *)v5 + 11) = *((_QWORD *)v6 + 11);
    *((_QWORD *)v5 + 12) = *((_QWORD *)v6 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 13) = *((_QWORD *)v6 + 13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 14) = *((_QWORD *)v6 + 14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[120] = v6[120];
    *((_QWORD *)v5 + 16) = *((_QWORD *)v6 + 16);
    *((_QWORD *)v5 + 17) = *((_QWORD *)v6 + 17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v40 = *((_QWORD *)v6 + 18);
    v5[152] = v6[152];
    *((_QWORD *)v5 + 18) = v40;
    v5[153] = v6[153];
    v5[154] = v6[154];
    v5[155] = v6[155];
    v41 = *((_QWORD *)v6 + 20);
    v5[168] = v6[168];
    *((_QWORD *)v5 + 20) = v41;
    *((_QWORD *)v5 + 22) = *((_QWORD *)v6 + 22);
    *((_QWORD *)v5 + 23) = *((_QWORD *)v6 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = *((_QWORD *)v6 + 24);
    v5[200] = v6[200];
    *((_QWORD *)v5 + 24) = v42;
    v5[201] = v6[201];
    v5[202] = v6[202];
    v5[203] = v6[203];
    v5[204] = v6[204];
    v5[205] = v6[205];
    v5[206] = v6[206];
    v5[207] = v6[207];
    v43 = *((_QWORD *)v6 + 26);
    v5[216] = v6[216];
    *((_QWORD *)v5 + 26) = v43;
    v44 = *((_QWORD *)v6 + 28);
    v5[232] = v6[232];
    *((_QWORD *)v5 + 28) = v44;
    v45 = *((_QWORD *)v6 + 30);
    v5[248] = v6[248];
    *((_QWORD *)v5 + 30) = v45;
    v5[249] = v6[249];
    v5[250] = v6[250];
    v5[251] = v6[251];
  }
  v46 = v5 + 256;
  v47 = (__int128 *)(v6 + 256);
  v48 = *((_QWORD *)v6 + 41);
  if (*((_QWORD *)v5 + 41) == 1)
  {
    if (v48 == 1)
    {
      v49 = *v47;
      v50 = *((_OWORD *)v6 + 17);
      v51 = *((_OWORD *)v6 + 19);
      *((_OWORD *)v5 + 18) = *((_OWORD *)v6 + 18);
      *((_OWORD *)v5 + 19) = v51;
      *v46 = v49;
      *((_OWORD *)v5 + 17) = v50;
      v52 = *((_OWORD *)v6 + 20);
      v53 = *((_OWORD *)v6 + 21);
      v54 = *((_OWORD *)v6 + 23);
      *((_OWORD *)v5 + 22) = *((_OWORD *)v6 + 22);
      *((_OWORD *)v5 + 23) = v54;
      *((_OWORD *)v5 + 20) = v52;
      *((_OWORD *)v5 + 21) = v53;
      v55 = *((_OWORD *)v6 + 24);
      v56 = *((_OWORD *)v6 + 25);
      v57 = *((_OWORD *)v6 + 27);
      *((_OWORD *)v5 + 26) = *((_OWORD *)v6 + 26);
      *((_OWORD *)v5 + 27) = v57;
      *((_OWORD *)v5 + 24) = v55;
      *((_OWORD *)v5 + 25) = v56;
      v58 = *((_OWORD *)v6 + 28);
      v59 = *((_OWORD *)v6 + 29);
      v60 = *((_OWORD *)v6 + 31);
      *((_OWORD *)v5 + 30) = *((_OWORD *)v6 + 30);
      *((_OWORD *)v5 + 31) = v60;
      *((_OWORD *)v5 + 28) = v58;
      *((_OWORD *)v5 + 29) = v59;
    }
    else
    {
      v73 = *v47;
      *((_WORD *)v5 + 136) = *((_WORD *)v6 + 136);
      *v46 = v73;
      v74 = *(_OWORD *)(v6 + 280);
      *((_WORD *)v5 + 148) = *((_WORD *)v6 + 148);
      *(_OWORD *)(v5 + 280) = v74;
      v5[298] = v6[298];
      v5[299] = v6[299];
      v5[300] = v6[300];
      v5[301] = v6[301];
      v5[302] = v6[302];
      v75 = *((_QWORD *)v6 + 38);
      v5[312] = v6[312];
      *((_QWORD *)v5 + 38) = v75;
      v5[313] = v6[313];
      v5[314] = v6[314];
      v5[315] = v6[315];
      v5[316] = v6[316];
      v5[317] = v6[317];
      v5[318] = v6[318];
      v5[319] = v6[319];
      v5[320] = v6[320];
      *((_QWORD *)v5 + 41) = *((_QWORD *)v6 + 41);
      v5[336] = v6[336];
      v5[337] = v6[337];
      v76 = *((_QWORD *)v6 + 43);
      v5[352] = v6[352];
      *((_QWORD *)v5 + 43) = v76;
      v77 = *((_QWORD *)v6 + 45);
      v5[368] = v6[368];
      *((_QWORD *)v5 + 45) = v77;
      v5[369] = v6[369];
      v5[370] = v6[370];
      *((_QWORD *)v5 + 47) = *((_QWORD *)v6 + 47);
      *((_QWORD *)v5 + 48) = *((_QWORD *)v6 + 48);
      v78 = *((_QWORD *)v6 + 49);
      v5[400] = v6[400];
      *((_QWORD *)v5 + 49) = v78;
      *((_QWORD *)v5 + 51) = *((_QWORD *)v6 + 51);
      *((_QWORD *)v5 + 52) = *((_QWORD *)v6 + 52);
      v79 = *((_QWORD *)v6 + 53);
      v5[432] = v6[432];
      *((_QWORD *)v5 + 53) = v79;
      v5[433] = v6[433];
      v5[434] = v6[434];
      *((_QWORD *)v5 + 55) = *((_QWORD *)v6 + 55);
      *((_QWORD *)v5 + 56) = *((_QWORD *)v6 + 56);
      v5[456] = v6[456];
      v5[457] = v6[457];
      v5[458] = v6[458];
      *((_QWORD *)v5 + 58) = *((_QWORD *)v6 + 58);
      *((_QWORD *)v5 + 59) = *((_QWORD *)v6 + 59);
      *((_QWORD *)v5 + 60) = *((_QWORD *)v6 + 60);
      v5[488] = v6[488];
      v5[489] = v6[489];
      *((_QWORD *)v5 + 62) = *((_QWORD *)v6 + 62);
      *((_QWORD *)v5 + 63) = *((_QWORD *)v6 + 63);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v48 == 1)
  {
    sub_240240C00((uint64_t)(v5 + 256));
    v61 = *((_OWORD *)v6 + 19);
    v63 = *v47;
    v62 = *((_OWORD *)v6 + 17);
    *((_OWORD *)v5 + 18) = *((_OWORD *)v6 + 18);
    *((_OWORD *)v5 + 19) = v61;
    *v46 = v63;
    *((_OWORD *)v5 + 17) = v62;
    v64 = *((_OWORD *)v6 + 23);
    v66 = *((_OWORD *)v6 + 20);
    v65 = *((_OWORD *)v6 + 21);
    *((_OWORD *)v5 + 22) = *((_OWORD *)v6 + 22);
    *((_OWORD *)v5 + 23) = v64;
    *((_OWORD *)v5 + 20) = v66;
    *((_OWORD *)v5 + 21) = v65;
    v67 = *((_OWORD *)v6 + 27);
    v69 = *((_OWORD *)v6 + 24);
    v68 = *((_OWORD *)v6 + 25);
    *((_OWORD *)v5 + 26) = *((_OWORD *)v6 + 26);
    *((_OWORD *)v5 + 27) = v67;
    *((_OWORD *)v5 + 24) = v69;
    *((_OWORD *)v5 + 25) = v68;
    v70 = *((_OWORD *)v6 + 31);
    v72 = *((_OWORD *)v6 + 28);
    v71 = *((_OWORD *)v6 + 29);
    *((_OWORD *)v5 + 30) = *((_OWORD *)v6 + 30);
    *((_OWORD *)v5 + 31) = v70;
    *((_OWORD *)v5 + 28) = v72;
    *((_OWORD *)v5 + 29) = v71;
  }
  else
  {
    v80 = *v47;
    *((_WORD *)v5 + 136) = *((_WORD *)v6 + 136);
    *v46 = v80;
    v81 = *(_OWORD *)(v6 + 280);
    *((_WORD *)v5 + 148) = *((_WORD *)v6 + 148);
    *(_OWORD *)(v5 + 280) = v81;
    v5[298] = v6[298];
    v5[299] = v6[299];
    v5[300] = v6[300];
    v5[301] = v6[301];
    v5[302] = v6[302];
    v82 = *((_QWORD *)v6 + 38);
    v5[312] = v6[312];
    *((_QWORD *)v5 + 38) = v82;
    v5[313] = v6[313];
    v5[314] = v6[314];
    v5[315] = v6[315];
    v5[316] = v6[316];
    v5[317] = v6[317];
    v5[318] = v6[318];
    v5[319] = v6[319];
    v5[320] = v6[320];
    *((_QWORD *)v5 + 41) = *((_QWORD *)v6 + 41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[336] = v6[336];
    v5[337] = v6[337];
    v83 = *((_QWORD *)v6 + 43);
    v5[352] = v6[352];
    *((_QWORD *)v5 + 43) = v83;
    v84 = *((_QWORD *)v6 + 45);
    v5[368] = v6[368];
    *((_QWORD *)v5 + 45) = v84;
    v5[369] = v6[369];
    v5[370] = v6[370];
    *((_QWORD *)v5 + 47) = *((_QWORD *)v6 + 47);
    *((_QWORD *)v5 + 48) = *((_QWORD *)v6 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v85 = *((_QWORD *)v6 + 49);
    v5[400] = v6[400];
    *((_QWORD *)v5 + 49) = v85;
    *((_QWORD *)v5 + 51) = *((_QWORD *)v6 + 51);
    *((_QWORD *)v5 + 52) = *((_QWORD *)v6 + 52);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v86 = *((_QWORD *)v6 + 53);
    v5[432] = v6[432];
    *((_QWORD *)v5 + 53) = v86;
    v5[433] = v6[433];
    v5[434] = v6[434];
    *((_QWORD *)v5 + 55) = *((_QWORD *)v6 + 55);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 56) = *((_QWORD *)v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[456] = v6[456];
    v5[457] = v6[457];
    v5[458] = v6[458];
    *((_QWORD *)v5 + 58) = *((_QWORD *)v6 + 58);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 59) = *((_QWORD *)v6 + 59);
    *((_QWORD *)v5 + 60) = *((_QWORD *)v6 + 60);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v5[488] = v6[488];
    v5[489] = v6[489];
    *((_QWORD *)v5 + 62) = *((_QWORD *)v6 + 62);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((_QWORD *)v5 + 63) = *((_QWORD *)v6 + 63);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v87 = (int *)type metadata accessor for TaskDefinition(0);
  v88 = v87[8];
  v89 = &v5[v88];
  v90 = &v6[v88];
  v91 = sub_2402BD48C();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v89, v90, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v95)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v89, v91);
LABEL_20:
    v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v89, v90, v91);
LABEL_21:
  v97 = v87[9];
  v98 = &v5[v97];
  v99 = &v6[v97];
  v100 = v93(&v5[v97], 1, v91);
  v101 = v93(v99, 1, v91);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v98, v99, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v98, 0, 1, v91);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v101)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v98, v91);
LABEL_26:
    v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v98, v99, v91);
LABEL_27:
  *(_QWORD *)&v5[v87[10]] = *(_QWORD *)&v6[v87[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v103 = v119[6];
  v104 = &a1[v103];
  v105 = &v120[v103];
  *v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[v119[7]] = v120[v119[7]];
  v106 = v119[8];
  v107 = &a1[v106];
  v108 = &v120[v106];
  v109 = v93(&a1[v106], 1, v91);
  v110 = v93(v108, 1, v91);
  if (v109)
  {
    if (!v110)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v107, v108, v91);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v107, 0, 1, v91);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v110)
  {
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v107, v91);
LABEL_32:
    v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v107, v108, v91);
LABEL_33:
  v112 = v119[9];
  v113 = &a1[v112];
  v114 = &v120[v112];
  v115 = v93(&a1[v112], 1, v91);
  v116 = v93(v114, 1, v91);
  if (!v115)
  {
    if (!v116)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 24))(v113, v114, v91);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v92 + 8))(v113, v91);
    goto LABEL_38;
  }
  if (v116)
  {
LABEL_38:
    v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v92 + 16))(v113, v114, v91);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v113, 0, 1, v91);
  return a1;
}

_BYTE *initializeWithTake for GetTaskResponse(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _BYTE *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int *v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(_BYTE *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int *v45;

  *a1 = *a2;
  v45 = (int *)type metadata accessor for MLHostTask(0);
  v4 = v45[5];
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = *(_OWORD *)&a2[v4 + 16];
  *v5 = *(_OWORD *)&a2[v4];
  v5[1] = v7;
  v8 = *(_OWORD *)&a2[v4 + 208];
  v5[12] = *(_OWORD *)&a2[v4 + 192];
  v5[13] = v8;
  v5[14] = *(_OWORD *)&a2[v4 + 224];
  *(_OWORD *)((char *)v5 + 236) = *(_OWORD *)&a2[v4 + 236];
  v9 = *(_OWORD *)&a2[v4 + 144];
  v5[8] = *(_OWORD *)&a2[v4 + 128];
  v5[9] = v9;
  v10 = *(_OWORD *)&a2[v4 + 176];
  v5[10] = *(_OWORD *)&a2[v4 + 160];
  v5[11] = v10;
  v11 = *(_OWORD *)&a2[v4 + 80];
  v5[4] = *(_OWORD *)&a2[v4 + 64];
  v5[5] = v11;
  v12 = *(_OWORD *)&a2[v4 + 112];
  v5[6] = *(_OWORD *)&a2[v4 + 96];
  v5[7] = v12;
  v13 = *(_OWORD *)&a2[v4 + 48];
  v5[2] = *(_OWORD *)&a2[v4 + 32];
  v5[3] = v13;
  v14 = *(_OWORD *)&a2[v4 + 464];
  v5[28] = *(_OWORD *)&a2[v4 + 448];
  v5[29] = v14;
  v15 = *(_OWORD *)&a2[v4 + 496];
  v5[30] = *(_OWORD *)&a2[v4 + 480];
  v5[31] = v15;
  v16 = *(_OWORD *)&a2[v4 + 400];
  v5[24] = *(_OWORD *)&a2[v4 + 384];
  v5[25] = v16;
  v17 = *(_OWORD *)&a2[v4 + 432];
  v5[26] = *(_OWORD *)&a2[v4 + 416];
  v5[27] = v17;
  v18 = *(_OWORD *)&a2[v4 + 336];
  v5[20] = *(_OWORD *)&a2[v4 + 320];
  v5[21] = v18;
  v19 = *(_OWORD *)&a2[v4 + 368];
  v5[22] = *(_OWORD *)&a2[v4 + 352];
  v5[23] = v19;
  v20 = *(_OWORD *)&a2[v4 + 272];
  v5[16] = *(_OWORD *)&a2[v4 + 256];
  v5[17] = v20;
  v21 = *(_OWORD *)&a2[v4 + 304];
  v5[18] = *(_OWORD *)&a2[v4 + 288];
  v5[19] = v21;
  v22 = (int *)type metadata accessor for TaskDefinition(0);
  v23 = v22[8];
  v24 = (char *)v5 + v23;
  v25 = &v6[v23];
  v26 = sub_2402BD48C();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v25, 1, v26))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v30 = v22[9];
  v31 = (char *)v5 + v30;
  v32 = &v6[v30];
  if (v28(&v6[v30], 1, v26))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    v34 = v27;
  }
  else
  {
    v35 = v32;
    v34 = v27;
    (*(void (**)(char *, const void *, uint64_t))(v27 + 32))(v31, v35, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v31, 0, 1, v26);
  }
  *(_QWORD *)((char *)v5 + v22[10]) = *(_QWORD *)&v6[v22[10]];
  *(_OWORD *)&a1[v45[6]] = *(_OWORD *)&a2[v45[6]];
  a1[v45[7]] = a2[v45[7]];
  v36 = v45[8];
  v37 = &a1[v36];
  v38 = &a2[v36];
  if (v28(&a2[v36], 1, v26))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(v37, v38, v26);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v26);
  }
  v40 = v45[9];
  v41 = &a1[v40];
  v42 = &a2[v40];
  if (v28(v42, 1, v26))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v34 + 32))(v41, v42, v26);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v41, 0, 1, v26);
  }
  return a1;
}

_BYTE *assignWithTake for GetTaskResponse(_BYTE *a1, _BYTE *a2)
{
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int v62;
  int v63;
  uint64_t v64;
  _BYTE *v66;
  uint64_t v67;

  *a1 = *a2;
  v4 = (int *)type metadata accessor for MLHostTask(0);
  v5 = v4[5];
  v6 = &a1[v5];
  v7 = &a2[v5];
  v8 = *(_QWORD *)&a2[v5 + 8];
  *(_QWORD *)v6 = *(_QWORD *)&a2[v5];
  *((_QWORD *)v6 + 1) = v8;
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)v7 + 3);
  *((_QWORD *)v6 + 2) = *((_QWORD *)v7 + 2);
  *((_QWORD *)v6 + 3) = v9;
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v6 + 12) == 1)
    goto LABEL_4;
  v10 = *((_QWORD *)v7 + 12);
  if (v10 == 1)
  {
    sub_240240BCC((uint64_t)(v6 + 32));
LABEL_4:
    v11 = *((_OWORD *)v7 + 13);
    *((_OWORD *)v6 + 12) = *((_OWORD *)v7 + 12);
    *((_OWORD *)v6 + 13) = v11;
    *((_OWORD *)v6 + 14) = *((_OWORD *)v7 + 14);
    *(_OWORD *)(v6 + 236) = *(_OWORD *)(v7 + 236);
    v12 = *((_OWORD *)v7 + 9);
    *((_OWORD *)v6 + 8) = *((_OWORD *)v7 + 8);
    *((_OWORD *)v6 + 9) = v12;
    v13 = *((_OWORD *)v7 + 11);
    *((_OWORD *)v6 + 10) = *((_OWORD *)v7 + 10);
    *((_OWORD *)v6 + 11) = v13;
    v14 = *((_OWORD *)v7 + 5);
    *((_OWORD *)v6 + 4) = *((_OWORD *)v7 + 4);
    *((_OWORD *)v6 + 5) = v14;
    v15 = *((_OWORD *)v7 + 7);
    *((_OWORD *)v6 + 6) = *((_OWORD *)v7 + 6);
    *((_OWORD *)v6 + 7) = v15;
    v16 = *((_OWORD *)v7 + 3);
    *((_OWORD *)v6 + 2) = *((_OWORD *)v7 + 2);
    *((_OWORD *)v6 + 3) = v16;
    goto LABEL_6;
  }
  *((_QWORD *)v6 + 4) = *((_QWORD *)v7 + 4);
  v6[40] = v7[40];
  *((_QWORD *)v6 + 6) = *((_QWORD *)v7 + 6);
  v6[56] = v7[56];
  *((_QWORD *)v6 + 8) = *((_QWORD *)v7 + 8);
  v6[72] = v7[72];
  *(_QWORD *)(v6 + 73) = *(_QWORD *)(v7 + 73);
  *(_WORD *)(v6 + 81) = *(_WORD *)(v7 + 81);
  v6[83] = v7[83];
  *((_QWORD *)v6 + 11) = *((_QWORD *)v7 + 11);
  *((_QWORD *)v6 + 12) = v10;
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 13) = *((_QWORD *)v7 + 13);
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 14) = *((_QWORD *)v7 + 14);
  swift_bridgeObjectRelease();
  v6[120] = v7[120];
  v17 = *((_QWORD *)v7 + 17);
  *((_QWORD *)v6 + 16) = *((_QWORD *)v7 + 16);
  *((_QWORD *)v6 + 17) = v17;
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 18) = *((_QWORD *)v7 + 18);
  *((_DWORD *)v6 + 38) = *((_DWORD *)v7 + 38);
  *((_QWORD *)v6 + 20) = *((_QWORD *)v7 + 20);
  v6[168] = v7[168];
  v18 = *((_QWORD *)v7 + 23);
  *((_QWORD *)v6 + 22) = *((_QWORD *)v7 + 22);
  *((_QWORD *)v6 + 23) = v18;
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 24) = *((_QWORD *)v7 + 24);
  v6[200] = v7[200];
  *(_DWORD *)(v6 + 201) = *(_DWORD *)(v7 + 201);
  v6[205] = v7[205];
  *((_WORD *)v6 + 103) = *((_WORD *)v7 + 103);
  *((_QWORD *)v6 + 26) = *((_QWORD *)v7 + 26);
  v6[216] = v7[216];
  v6[232] = v7[232];
  *((_QWORD *)v6 + 28) = *((_QWORD *)v7 + 28);
  *((_QWORD *)v6 + 30) = *((_QWORD *)v7 + 30);
  *((_DWORD *)v6 + 62) = *((_DWORD *)v7 + 62);
LABEL_6:
  v19 = v6 + 256;
  v20 = v7 + 256;
  v66 = a1;
  if (*((_QWORD *)v6 + 41) == 1)
  {
LABEL_9:
    v22 = *((_OWORD *)v7 + 29);
    *((_OWORD *)v6 + 28) = *((_OWORD *)v7 + 28);
    *((_OWORD *)v6 + 29) = v22;
    v23 = *((_OWORD *)v7 + 31);
    *((_OWORD *)v6 + 30) = *((_OWORD *)v7 + 30);
    *((_OWORD *)v6 + 31) = v23;
    v24 = *((_OWORD *)v7 + 25);
    *((_OWORD *)v6 + 24) = *((_OWORD *)v7 + 24);
    *((_OWORD *)v6 + 25) = v24;
    v25 = *((_OWORD *)v7 + 27);
    *((_OWORD *)v6 + 26) = *((_OWORD *)v7 + 26);
    *((_OWORD *)v6 + 27) = v25;
    v26 = *((_OWORD *)v7 + 21);
    *((_OWORD *)v6 + 20) = *((_OWORD *)v7 + 20);
    *((_OWORD *)v6 + 21) = v26;
    v27 = *((_OWORD *)v7 + 23);
    *((_OWORD *)v6 + 22) = *((_OWORD *)v7 + 22);
    *((_OWORD *)v6 + 23) = v27;
    v28 = *((_OWORD *)v7 + 17);
    *v19 = *v20;
    *((_OWORD *)v6 + 17) = v28;
    v29 = *((_OWORD *)v7 + 19);
    *((_OWORD *)v6 + 18) = *((_OWORD *)v7 + 18);
    *((_OWORD *)v6 + 19) = v29;
    goto LABEL_11;
  }
  v21 = *((_QWORD *)v7 + 41);
  if (v21 == 1)
  {
    sub_240240C00((uint64_t)(v6 + 256));
    goto LABEL_9;
  }
  *v19 = *v20;
  *((_WORD *)v6 + 136) = *((_WORD *)v7 + 136);
  *((_WORD *)v6 + 148) = *((_WORD *)v7 + 148);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v7 + 280);
  *(_DWORD *)(v6 + 298) = *(_DWORD *)(v7 + 298);
  v6[302] = v7[302];
  v6[312] = v7[312];
  *((_QWORD *)v6 + 38) = *((_QWORD *)v7 + 38);
  *(_QWORD *)(v6 + 313) = *(_QWORD *)(v7 + 313);
  *((_QWORD *)v6 + 41) = v21;
  swift_bridgeObjectRelease();
  *((_WORD *)v6 + 168) = *((_WORD *)v7 + 168);
  *((_QWORD *)v6 + 43) = *((_QWORD *)v7 + 43);
  v6[352] = v7[352];
  *((_QWORD *)v6 + 45) = *((_QWORD *)v7 + 45);
  v6[368] = v7[368];
  *(_WORD *)(v6 + 369) = *(_WORD *)(v7 + 369);
  v30 = *((_QWORD *)v7 + 48);
  *((_QWORD *)v6 + 47) = *((_QWORD *)v7 + 47);
  *((_QWORD *)v6 + 48) = v30;
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 49) = *((_QWORD *)v7 + 49);
  v6[400] = v7[400];
  v31 = *((_QWORD *)v7 + 52);
  *((_QWORD *)v6 + 51) = *((_QWORD *)v7 + 51);
  *((_QWORD *)v6 + 52) = v31;
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 53) = *((_QWORD *)v7 + 53);
  v6[432] = v7[432];
  *(_WORD *)(v6 + 433) = *(_WORD *)(v7 + 433);
  *((_QWORD *)v6 + 55) = *((_QWORD *)v7 + 55);
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 56) = *((_QWORD *)v7 + 56);
  swift_bridgeObjectRelease();
  v6[456] = v7[456];
  *(_WORD *)(v6 + 457) = *(_WORD *)(v7 + 457);
  *((_QWORD *)v6 + 58) = *((_QWORD *)v7 + 58);
  swift_bridgeObjectRelease();
  v32 = *((_QWORD *)v7 + 60);
  *((_QWORD *)v6 + 59) = *((_QWORD *)v7 + 59);
  *((_QWORD *)v6 + 60) = v32;
  swift_bridgeObjectRelease();
  *((_WORD *)v6 + 244) = *((_WORD *)v7 + 244);
  *((_QWORD *)v6 + 62) = *((_QWORD *)v7 + 62);
  swift_bridgeObjectRelease();
  *((_QWORD *)v6 + 63) = *((_QWORD *)v7 + 63);
  swift_bridgeObjectRelease();
LABEL_11:
  v33 = (int *)type metadata accessor for TaskDefinition(0);
  v34 = v33[8];
  v35 = &v6[v34];
  v36 = &v7[v34];
  v37 = sub_2402BD48C();
  v67 = *(_QWORD *)(v37 - 8);
  v38 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v67 + 48);
  v39 = v38(v35, 1, v37);
  v40 = v38(v36, 1, v37);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v35, v36, v37);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v35, 0, 1, v37);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v40)
  {
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v35, v37);
LABEL_16:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 40))(v35, v36, v37);
LABEL_17:
  v42 = v33[9];
  v43 = &v6[v42];
  v44 = &v7[v42];
  v45 = v38(&v6[v42], 1, v37);
  v46 = v38(v44, 1, v37);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v43, v44, v37);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v43, 0, 1, v37);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (v46)
  {
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v43, v37);
LABEL_22:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 40))(v43, v44, v37);
LABEL_23:
  *(_QWORD *)&v6[v33[10]] = *(_QWORD *)&v7[v33[10]];
  swift_bridgeObjectRelease();
  v48 = v4[6];
  v49 = &v66[v48];
  v50 = (uint64_t *)&a2[v48];
  v52 = *v50;
  v51 = v50[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease();
  v66[v4[7]] = a2[v4[7]];
  v53 = v4[8];
  v54 = &v66[v53];
  v55 = &a2[v53];
  v56 = v38(&v66[v53], 1, v37);
  v57 = v38(v55, 1, v37);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v54, v55, v37);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v54, 0, 1, v37);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v57)
  {
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v54, v37);
LABEL_28:
    v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 40))(v54, v55, v37);
LABEL_29:
  v59 = v4[9];
  v60 = &v66[v59];
  v61 = &a2[v59];
  v62 = v38(&v66[v59], 1, v37);
  v63 = v38(v61, 1, v37);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 40))(v60, v61, v37);
      return v66;
    }
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v60, v37);
    goto LABEL_34;
  }
  if (v63)
  {
LABEL_34:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    return v66;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v67 + 32))(v60, v61, v37);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v60, 0, 1, v37);
  return v66;
}

uint64_t getEnumTagSinglePayload for GetTaskResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_240268140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for MLHostTask);
}

uint64_t storeEnumTagSinglePayload for GetTaskResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_240268158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for MLHostTask);
}

uint64_t sub_240268164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_240269F7C(a1, a2, a3, type metadata accessor for MLHostTask);
}

ValueMetadata *type metadata accessor for ResetTasksRequest()
{
  return &type metadata for ResetTasksRequest;
}

ValueMetadata *type metadata accessor for ResetTasksResponse()
{
  return &type metadata for ResetTasksResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for AddTaskRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;

  v4 = type metadata accessor for TaskDefinition(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v8;
    v9 = a2[12];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      v10 = *((_OWORD *)a2 + 13);
      *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
      *(_OWORD *)(a1 + 208) = v10;
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)((char *)a2 + 236);
      v11 = *((_OWORD *)a2 + 9);
      *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
      *(_OWORD *)(a1 + 144) = v11;
      v12 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 176) = v12;
      v13 = *((_OWORD *)a2 + 5);
      *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 80) = v13;
      v14 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v14;
      v15 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v15;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      *(_QWORD *)(a1 + 64) = a2[8];
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(a1 + 73) = *(uint64_t *)((char *)a2 + 73);
      *(_WORD *)(a1 + 81) = *(_WORD *)((char *)a2 + 81);
      *(_BYTE *)(a1 + 83) = *((_BYTE *)a2 + 83);
      *(_QWORD *)(a1 + 88) = a2[11];
      *(_QWORD *)(a1 + 96) = v9;
      v17 = a2[14];
      *(_QWORD *)(a1 + 104) = a2[13];
      *(_QWORD *)(a1 + 112) = v17;
      *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
      v18 = a2[17];
      *(_QWORD *)(a1 + 128) = a2[16];
      *(_QWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 144) = a2[18];
      *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
      *(_BYTE *)(a1 + 153) = *((_BYTE *)a2 + 153);
      *(_WORD *)(a1 + 154) = *((_WORD *)a2 + 77);
      *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
      *(_QWORD *)(a1 + 160) = a2[20];
      v19 = a2[23];
      *(_QWORD *)(a1 + 176) = a2[22];
      *(_QWORD *)(a1 + 184) = v19;
      *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
      *(_QWORD *)(a1 + 192) = a2[24];
      *(_DWORD *)(a1 + 201) = *(_DWORD *)((char *)a2 + 201);
      *(_BYTE *)(a1 + 205) = *((_BYTE *)a2 + 205);
      *(_BYTE *)(a1 + 206) = *((_BYTE *)a2 + 206);
      *(_BYTE *)(a1 + 207) = *((_BYTE *)a2 + 207);
      *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
      *(_QWORD *)(a1 + 208) = a2[26];
      *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
      *(_QWORD *)(a1 + 224) = a2[28];
      v20 = a2[30];
      *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
      *(_QWORD *)(a1 + 240) = v20;
      *(_BYTE *)(a1 + 249) = *((_BYTE *)a2 + 249);
      *(_BYTE *)(a1 + 250) = *((_BYTE *)a2 + 250);
      *(_BYTE *)(a1 + 251) = *((_BYTE *)a2 + 251);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v21 = (_OWORD *)(a1 + 256);
    v22 = a2 + 32;
    v23 = a2[41];
    if (v23 == 1)
    {
      v24 = *((_OWORD *)a2 + 29);
      *(_OWORD *)(a1 + 448) = *((_OWORD *)a2 + 28);
      *(_OWORD *)(a1 + 464) = v24;
      v25 = *((_OWORD *)a2 + 31);
      *(_OWORD *)(a1 + 480) = *((_OWORD *)a2 + 30);
      *(_OWORD *)(a1 + 496) = v25;
      v26 = *((_OWORD *)a2 + 25);
      *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
      *(_OWORD *)(a1 + 400) = v26;
      v27 = *((_OWORD *)a2 + 27);
      *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
      *(_OWORD *)(a1 + 432) = v27;
      v28 = *((_OWORD *)a2 + 21);
      *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
      *(_OWORD *)(a1 + 336) = v28;
      v29 = *((_OWORD *)a2 + 23);
      *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
      *(_OWORD *)(a1 + 368) = v29;
      v30 = *((_OWORD *)a2 + 17);
      *v21 = *v22;
      *(_OWORD *)(a1 + 272) = v30;
      v31 = *((_OWORD *)a2 + 19);
      *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
      *(_OWORD *)(a1 + 304) = v31;
    }
    else
    {
      *v21 = *v22;
      *(_WORD *)(a1 + 272) = *((_WORD *)a2 + 136);
      *(_WORD *)(a1 + 296) = *((_WORD *)a2 + 148);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
      *(_DWORD *)(a1 + 298) = *(_DWORD *)((char *)a2 + 298);
      *(_BYTE *)(a1 + 302) = *((_BYTE *)a2 + 302);
      *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
      *(_QWORD *)(a1 + 304) = a2[38];
      *(_QWORD *)(a1 + 313) = *(uint64_t *)((char *)a2 + 313);
      *(_QWORD *)(a1 + 328) = v23;
      *(_WORD *)(a1 + 336) = *((_WORD *)a2 + 168);
      *(_QWORD *)(a1 + 344) = a2[43];
      *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
      *(_QWORD *)(a1 + 360) = a2[45];
      *(_WORD *)(a1 + 368) = *((_WORD *)a2 + 184);
      *(_BYTE *)(a1 + 370) = *((_BYTE *)a2 + 370);
      v32 = a2[48];
      *(_QWORD *)(a1 + 376) = a2[47];
      *(_QWORD *)(a1 + 384) = v32;
      *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
      *(_QWORD *)(a1 + 392) = a2[49];
      v33 = a2[52];
      *(_QWORD *)(a1 + 408) = a2[51];
      *(_QWORD *)(a1 + 416) = v33;
      *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
      *(_QWORD *)(a1 + 424) = a2[53];
      *(_WORD *)(a1 + 433) = *(_WORD *)((char *)a2 + 433);
      v34 = a2[56];
      *(_QWORD *)(a1 + 440) = a2[55];
      *(_QWORD *)(a1 + 448) = v34;
      *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
      *(_WORD *)(a1 + 457) = *(_WORD *)((char *)a2 + 457);
      v35 = a2[59];
      *(_QWORD *)(a1 + 464) = a2[58];
      *(_QWORD *)(a1 + 472) = v35;
      *(_QWORD *)(a1 + 480) = a2[60];
      *(_WORD *)(a1 + 488) = *((_WORD *)a2 + 244);
      v36 = a2[63];
      *(_QWORD *)(a1 + 496) = a2[62];
      *(_QWORD *)(a1 + 504) = v36;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v37 = v6[8];
    v38 = (void *)(a1 + v37);
    v39 = (char *)a2 + v37;
    v40 = sub_2402BD48C();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    if (v42(v39, 1, v40))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v44 = v6[9];
    v45 = (void *)(a1 + v44);
    v46 = (char *)a2 + v44;
    if (v42((char *)a2 + v44, 1, v40))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v41 + 16))(v45, v46, v40);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v45, 0, 1, v40);
    }
    *(_QWORD *)(a1 + v6[10]) = *(uint64_t *)((char *)a2 + v6[10]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AddTaskRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 328) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v2 = type metadata accessor for TaskDefinition(0);
  v3 = a1 + *(int *)(v2 + 32);
  v4 = sub_2402BD48C();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = a1 + *(int *)(v2 + 36);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AddTaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    v7 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v8;
    v9 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v9;
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 73) = *(_QWORD *)(a2 + 73);
    *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
    *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v6;
    v13 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v13;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    v14 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    v15 = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = v15;
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 201) = *(_DWORD *)(a2 + 201);
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
    *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
    v16 = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v16;
    *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
    *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
    *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v17 = (_OWORD *)(a1 + 256);
  v18 = (_OWORD *)(a2 + 256);
  v19 = *(_QWORD *)(a2 + 328);
  if (v19 == 1)
  {
    v20 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v20;
    v21 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v21;
    v22 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v22;
    v23 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v23;
    v24 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v24;
    v25 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v25;
    v26 = *(_OWORD *)(a2 + 272);
    *v17 = *v18;
    *(_OWORD *)(a1 + 272) = v26;
    v27 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v27;
  }
  else
  {
    *v17 = *v18;
    *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_DWORD *)(a1 + 298) = *(_DWORD *)(a2 + 298);
    *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_QWORD *)(a1 + 313) = *(_QWORD *)(a2 + 313);
    *(_QWORD *)(a1 + 328) = v19;
    *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_WORD *)(a1 + 368) = *(_WORD *)(a2 + 368);
    *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
    v28 = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = v28;
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    v29 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = v29;
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
    v30 = *(_QWORD *)(a2 + 448);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    *(_QWORD *)(a1 + 448) = v30;
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 457);
    v31 = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    *(_QWORD *)(a1 + 472) = v31;
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    *(_WORD *)(a1 + 488) = *(_WORD *)(a2 + 488);
    v32 = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 504) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v33 = (int *)type metadata accessor for TaskDefinition(0);
  v34 = v33[8];
  v35 = (void *)(a1 + v34);
  v36 = (const void *)(a2 + v34);
  v37 = sub_2402BD48C();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
  if (v39(v36, 1, v37))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  v41 = v33[9];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  if (v39((const void *)(a2 + v41), 1, v37))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v42, v43, v37);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v37);
  }
  *(_QWORD *)(a1 + v33[10]) = *(_QWORD *)(a2 + v33[10]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AddTaskRequest(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(void *, uint64_t, uint64_t);
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  int v97;
  int v98;
  uint64_t v99;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 32);
  v5 = (_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96) == 1)
  {
    if (v6 == 1)
    {
      v7 = *(_OWORD *)(a2 + 48);
      *v4 = *v5;
      *(_OWORD *)(a1 + 48) = v7;
      v8 = *(_OWORD *)(a2 + 64);
      v9 = *(_OWORD *)(a2 + 80);
      v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v10;
      *(_OWORD *)(a1 + 64) = v8;
      *(_OWORD *)(a1 + 80) = v9;
      v11 = *(_OWORD *)(a2 + 128);
      v12 = *(_OWORD *)(a2 + 144);
      v13 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v13;
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      v14 = *(_OWORD *)(a2 + 192);
      v15 = *(_OWORD *)(a2 + 208);
      v16 = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
      *(_OWORD *)(a1 + 208) = v15;
      *(_OWORD *)(a1 + 224) = v16;
      *(_OWORD *)(a1 + 192) = v14;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v27 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v27;
      v28 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v28;
      *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
      *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
      *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
      *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
      *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
      *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
      *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
      *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
      *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
      *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      v29 = *(_QWORD *)(a2 + 144);
      *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
      *(_QWORD *)(a1 + 144) = v29;
      *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
      *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
      *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
      v30 = *(_QWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_QWORD *)(a1 + 160) = v30;
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      v31 = *(_QWORD *)(a2 + 192);
      *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
      *(_QWORD *)(a1 + 192) = v31;
      *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
      *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
      *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
      *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
      *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
      *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
      v32 = *(_QWORD *)(a2 + 208);
      *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
      *(_QWORD *)(a1 + 208) = v32;
      v33 = *(_QWORD *)(a2 + 224);
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      *(_QWORD *)(a1 + 224) = v33;
      v34 = *(_QWORD *)(a2 + 240);
      *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
      *(_QWORD *)(a1 + 240) = v34;
      *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
      *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
      *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_240240BCC(a1 + 32);
    v17 = *(_OWORD *)(a2 + 48);
    *v4 = *v5;
    *(_OWORD *)(a1 + 48) = v17;
    v18 = *(_OWORD *)(a2 + 112);
    v20 = *(_OWORD *)(a2 + 64);
    v19 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v18;
    *(_OWORD *)(a1 + 64) = v20;
    *(_OWORD *)(a1 + 80) = v19;
    v21 = *(_OWORD *)(a2 + 176);
    v23 = *(_OWORD *)(a2 + 128);
    v22 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v21;
    *(_OWORD *)(a1 + 128) = v23;
    *(_OWORD *)(a1 + 144) = v22;
    v25 = *(_OWORD *)(a2 + 208);
    v24 = *(_OWORD *)(a2 + 224);
    v26 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    *(_OWORD *)(a1 + 208) = v25;
    *(_OWORD *)(a1 + 224) = v24;
    *(_OWORD *)(a1 + 192) = v26;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v35 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v35;
    v36 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v36;
    *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
    *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
    *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
    *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
    *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v37 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
    *(_QWORD *)(a1 + 144) = v37;
    *(_BYTE *)(a1 + 153) = *(_BYTE *)(a2 + 153);
    *(_BYTE *)(a1 + 154) = *(_BYTE *)(a2 + 154);
    *(_BYTE *)(a1 + 155) = *(_BYTE *)(a2 + 155);
    v38 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v38;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v39 = *(_QWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
    *(_QWORD *)(a1 + 192) = v39;
    *(_BYTE *)(a1 + 201) = *(_BYTE *)(a2 + 201);
    *(_BYTE *)(a1 + 202) = *(_BYTE *)(a2 + 202);
    *(_BYTE *)(a1 + 203) = *(_BYTE *)(a2 + 203);
    *(_BYTE *)(a1 + 204) = *(_BYTE *)(a2 + 204);
    *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
    *(_BYTE *)(a1 + 206) = *(_BYTE *)(a2 + 206);
    *(_BYTE *)(a1 + 207) = *(_BYTE *)(a2 + 207);
    v40 = *(_QWORD *)(a2 + 208);
    *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
    *(_QWORD *)(a1 + 208) = v40;
    v41 = *(_QWORD *)(a2 + 224);
    *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = v41;
    v42 = *(_QWORD *)(a2 + 240);
    *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
    *(_QWORD *)(a1 + 240) = v42;
    *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
    *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
    *(_BYTE *)(a1 + 251) = *(_BYTE *)(a2 + 251);
  }
  v43 = (_OWORD *)(a1 + 256);
  v44 = (__int128 *)(a2 + 256);
  v45 = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 328) == 1)
  {
    if (v45 == 1)
    {
      v46 = *v44;
      v47 = *(_OWORD *)(a2 + 272);
      v48 = *(_OWORD *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = v48;
      *v43 = v46;
      *(_OWORD *)(a1 + 272) = v47;
      v49 = *(_OWORD *)(a2 + 320);
      v50 = *(_OWORD *)(a2 + 336);
      v51 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 368) = v51;
      *(_OWORD *)(a1 + 320) = v49;
      *(_OWORD *)(a1 + 336) = v50;
      v52 = *(_OWORD *)(a2 + 384);
      v53 = *(_OWORD *)(a2 + 400);
      v54 = *(_OWORD *)(a2 + 432);
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
      *(_OWORD *)(a1 + 432) = v54;
      *(_OWORD *)(a1 + 384) = v52;
      *(_OWORD *)(a1 + 400) = v53;
      v55 = *(_OWORD *)(a2 + 448);
      v56 = *(_OWORD *)(a2 + 464);
      v57 = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = v57;
      *(_OWORD *)(a1 + 448) = v55;
      *(_OWORD *)(a1 + 464) = v56;
    }
    else
    {
      v70 = *v44;
      *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
      *v43 = v70;
      v71 = *(_OWORD *)(a2 + 280);
      *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = v71;
      *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 298);
      *(_BYTE *)(a1 + 299) = *(_BYTE *)(a2 + 299);
      *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
      *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
      *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
      v72 = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = v72;
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
      *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
      *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
      *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
      *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
      *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
      *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
      *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
      v73 = *(_QWORD *)(a2 + 344);
      *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
      *(_QWORD *)(a1 + 344) = v73;
      v74 = *(_QWORD *)(a2 + 360);
      *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
      *(_QWORD *)(a1 + 360) = v74;
      *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
      *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
      *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      v75 = *(_QWORD *)(a2 + 392);
      *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
      *(_QWORD *)(a1 + 392) = v75;
      *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      v76 = *(_QWORD *)(a2 + 424);
      *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
      *(_QWORD *)(a1 + 424) = v76;
      *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
      *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
      *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
      *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
      *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
      *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
      *(_BYTE *)(a1 + 458) = *(_BYTE *)(a2 + 458);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
      *(_BYTE *)(a1 + 489) = *(_BYTE *)(a2 + 489);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v45 == 1)
  {
    sub_240240C00(a1 + 256);
    v58 = *(_OWORD *)(a2 + 304);
    v60 = *v44;
    v59 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v58;
    *v43 = v60;
    *(_OWORD *)(a1 + 272) = v59;
    v61 = *(_OWORD *)(a2 + 368);
    v63 = *(_OWORD *)(a2 + 320);
    v62 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v61;
    *(_OWORD *)(a1 + 320) = v63;
    *(_OWORD *)(a1 + 336) = v62;
    v64 = *(_OWORD *)(a2 + 432);
    v66 = *(_OWORD *)(a2 + 384);
    v65 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v64;
    *(_OWORD *)(a1 + 384) = v66;
    *(_OWORD *)(a1 + 400) = v65;
    v67 = *(_OWORD *)(a2 + 496);
    v69 = *(_OWORD *)(a2 + 448);
    v68 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v67;
    *(_OWORD *)(a1 + 448) = v69;
    *(_OWORD *)(a1 + 464) = v68;
  }
  else
  {
    v77 = *v44;
    *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
    *v43 = v77;
    v78 = *(_OWORD *)(a2 + 280);
    *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = v78;
    *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 298);
    *(_BYTE *)(a1 + 299) = *(_BYTE *)(a2 + 299);
    *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
    *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
    *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
    v79 = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_QWORD *)(a1 + 304) = v79;
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
    *(_BYTE *)(a1 + 314) = *(_BYTE *)(a2 + 314);
    *(_BYTE *)(a1 + 315) = *(_BYTE *)(a2 + 315);
    *(_BYTE *)(a1 + 316) = *(_BYTE *)(a2 + 316);
    *(_BYTE *)(a1 + 317) = *(_BYTE *)(a2 + 317);
    *(_BYTE *)(a1 + 318) = *(_BYTE *)(a2 + 318);
    *(_BYTE *)(a1 + 319) = *(_BYTE *)(a2 + 319);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
    *(_BYTE *)(a1 + 337) = *(_BYTE *)(a2 + 337);
    v80 = *(_QWORD *)(a2 + 344);
    *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
    *(_QWORD *)(a1 + 344) = v80;
    v81 = *(_QWORD *)(a2 + 360);
    *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
    *(_QWORD *)(a1 + 360) = v81;
    *(_BYTE *)(a1 + 369) = *(_BYTE *)(a2 + 369);
    *(_BYTE *)(a1 + 370) = *(_BYTE *)(a2 + 370);
    *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v82 = *(_QWORD *)(a2 + 392);
    *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
    *(_QWORD *)(a1 + 392) = v82;
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v83 = *(_QWORD *)(a2 + 424);
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
    *(_QWORD *)(a1 + 424) = v83;
    *(_BYTE *)(a1 + 433) = *(_BYTE *)(a2 + 433);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
    *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
    *(_BYTE *)(a1 + 458) = *(_BYTE *)(a2 + 458);
    *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
    *(_BYTE *)(a1 + 489) = *(_BYTE *)(a2 + 489);
    *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  v84 = (int *)type metadata accessor for TaskDefinition(0);
  v85 = v84[8];
  v86 = (void *)(a1 + v85);
  v87 = (void *)(a2 + v85);
  v88 = sub_2402BD48C();
  v89 = *(_QWORD *)(v88 - 8);
  v90 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v89 + 48);
  v91 = v90(v86, 1, v88);
  v92 = v90(v87, 1, v88);
  if (v91)
  {
    if (!v92)
    {
      (*(void (**)(void *, void *, uint64_t))(v89 + 16))(v86, v87, v88);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v92)
  {
    (*(void (**)(void *, uint64_t))(v89 + 8))(v86, v88);
LABEL_20:
    v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v89 + 24))(v86, v87, v88);
LABEL_21:
  v94 = v84[9];
  v95 = (void *)(a1 + v94);
  v96 = (void *)(a2 + v94);
  v97 = v90((void *)(a1 + v94), 1, v88);
  v98 = v90(v96, 1, v88);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(void *, void *, uint64_t))(v89 + 24))(v95, v96, v88);
      goto LABEL_27;
    }
    (*(void (**)(void *, uint64_t))(v89 + 8))(v95, v88);
    goto LABEL_26;
  }
  if (v98)
  {
LABEL_26:
    v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v89 + 16))(v95, v96, v88);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v95, 0, 1, v88);
LABEL_27:
  *(_QWORD *)(a1 + v84[10]) = *(_QWORD *)(a2 + v84[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for AddTaskRequest(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[13];
  a1[12] = a2[12];
  a1[13] = v5;
  a1[14] = a2[14];
  *(_OWORD *)((char *)a1 + 236) = *(_OWORD *)((char *)a2 + 236);
  v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  v7 = a2[11];
  a1[10] = a2[10];
  a1[11] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[3];
  a1[2] = a2[2];
  a1[3] = v10;
  v11 = a2[29];
  a1[28] = a2[28];
  a1[29] = v11;
  v12 = a2[31];
  a1[30] = a2[30];
  a1[31] = v12;
  v13 = a2[25];
  a1[24] = a2[24];
  a1[25] = v13;
  v14 = a2[27];
  a1[26] = a2[26];
  a1[27] = v14;
  v15 = a2[21];
  a1[20] = a2[20];
  a1[21] = v15;
  v16 = a2[23];
  a1[22] = a2[22];
  a1[23] = v16;
  v17 = a2[17];
  a1[16] = a2[16];
  a1[17] = v17;
  v18 = a2[19];
  a1[18] = a2[18];
  a1[19] = v18;
  v19 = (int *)type metadata accessor for TaskDefinition(0);
  v20 = v19[8];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_2402BD48C();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v25(v22, 1, v23))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = v19[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  if (v25((char *)a2 + v27, 1, v23))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v28, v29, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
  }
  *(_QWORD *)((char *)a1 + v19[10]) = *(_QWORD *)((char *)a2 + v19[10]);
  return a1;
}

uint64_t assignWithTake for AddTaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 96) == 1)
    goto LABEL_4;
  v6 = *(_QWORD *)(a2 + 96);
  if (v6 == 1)
  {
    sub_240240BCC(a1 + 32);
LABEL_4:
    v7 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 236) = *(_OWORD *)(a2 + 236);
    v8 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v8;
    v9 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v9;
    v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 73) = *(_QWORD *)(a2 + 73);
  *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v14;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_DWORD *)(a1 + 201) = *(_DWORD *)(a2 + 201);
  *(_BYTE *)(a1 + 205) = *(_BYTE *)(a2 + 205);
  *(_WORD *)(a1 + 206) = *(_WORD *)(a2 + 206);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
LABEL_6:
  v15 = (_OWORD *)(a1 + 256);
  v16 = (_OWORD *)(a2 + 256);
  if (*(_QWORD *)(a1 + 328) == 1)
  {
LABEL_9:
    v18 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v18;
    v19 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v19;
    v20 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v20;
    v21 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v21;
    v22 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v22;
    v23 = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
    *(_OWORD *)(a1 + 368) = v23;
    v24 = *(_OWORD *)(a2 + 272);
    *v15 = *v16;
    *(_OWORD *)(a1 + 272) = v24;
    v25 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v25;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(a2 + 328);
  if (v17 == 1)
  {
    sub_240240C00(a1 + 256);
    goto LABEL_9;
  }
  *v15 = *v16;
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_WORD *)(a1 + 296) = *(_WORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 298) = *(_DWORD *)(a2 + 298);
  *(_BYTE *)(a1 + 302) = *(_BYTE *)(a2 + 302);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 313) = *(_QWORD *)(a2 + 313);
  *(_QWORD *)(a1 + 328) = v17;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_WORD *)(a1 + 369) = *(_WORD *)(a2 + 369);
  v26 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = v26;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  v27 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v27;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_WORD *)(a1 + 433) = *(_WORD *)(a2 + 433);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_WORD *)(a1 + 457) = *(_WORD *)(a2 + 457);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v28;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 488) = *(_WORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  swift_bridgeObjectRelease();
LABEL_11:
  v29 = (int *)type metadata accessor for TaskDefinition(0);
  v30 = v29[8];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = sub_2402BD48C();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_16:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
LABEL_17:
  v39 = v29[9];
  v40 = (void *)(a1 + v39);
  v41 = (void *)(a2 + v39);
  v42 = v35((void *)(a1 + v39), 1, v33);
  v43 = v35(v41, 1, v33);
  if (!v42)
  {
    if (!v43)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v40, v41, v33);
      goto LABEL_23;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v40, v33);
    goto LABEL_22;
  }
  if (v43)
  {
LABEL_22:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v40, v41, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v40, 0, 1, v33);
LABEL_23:
  *(_QWORD *)(a1 + v29[10]) = *(_QWORD *)(a2 + v29[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AddTaskRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_240269ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for TaskDefinition);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;

  v6 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AddTaskRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_240269F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for TaskDefinition);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;

  v7 = a5(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

uint64_t sub_240269F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_240269F7C(a1, a2, a3, type metadata accessor for TaskDefinition);
}

uint64_t sub_240269F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AddTaskResponse(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AddTaskResponse(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24026A0E0 + 4 * byte_2402C13A4[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_24026A114 + 4 * byte_2402C139F[v4]))();
}

uint64_t sub_24026A114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_24026A11C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x24026A124);
  return result;
}

uint64_t sub_24026A130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x24026A138);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24026A13C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_24026A144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddTaskResponse()
{
  return &type metadata for AddTaskResponse;
}

ValueMetadata *type metadata accessor for CleanTasksRequest()
{
  return &type metadata for CleanTasksRequest;
}

ValueMetadata *type metadata accessor for CleanTasksResponse()
{
  return &type metadata for CleanTasksResponse;
}

ValueMetadata *type metadata accessor for GetOnDemandTaskRequest()
{
  return &type metadata for GetOnDemandTaskRequest;
}

uint64_t storeEnumTagSinglePayload for OnDemandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24026A1DC + 4 * byte_2402C13AE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24026A210 + 4 * byte_2402C13A9[v4]))();
}

uint64_t sub_24026A210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026A218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24026A220);
  return result;
}

uint64_t sub_24026A22C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24026A234);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24026A238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026A240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnDemandError()
{
  return &type metadata for OnDemandError;
}

ValueMetadata *type metadata accessor for OnDemandResult()
{
  return &type metadata for OnDemandResult;
}

uint64_t getEnumTagSinglePayload for GetOnDemandTaskRequestResponse(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 2u)
    v6 = 2;
  else
    v6 = *(unsigned __int8 *)a1;
  v7 = v6 - 3;
  if (*(unsigned __int8 *)a1 < 2u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GetOnDemandTaskRequestResponse(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24026A360 + 4 * byte_2402C13B8[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_24026A394 + 4 * byte_2402C13B3[v4]))();
}

uint64_t sub_24026A394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_24026A39C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x24026A3A4);
  return result;
}

uint64_t sub_24026A3B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x24026A3B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24026A3BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_24026A3C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GetOnDemandTaskRequestResponse()
{
  return &type metadata for GetOnDemandTaskRequestResponse;
}

uint64_t getEnumTagSinglePayload for ListExtensionsRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListExtensionsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ListExtensionsRequest()
{
  return &type metadata for ListExtensionsRequest;
}

ValueMetadata *type metadata accessor for ListExtensionsResponse()
{
  return &type metadata for ListExtensionsResponse;
}

_QWORD *assignWithCopy for XPCRemoteError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCRemoteError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCRemoteError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GetExtensionRequest()
{
  return &type metadata for GetExtensionRequest;
}

ValueMetadata *type metadata accessor for GetExtensionResponse()
{
  return &type metadata for GetExtensionResponse;
}

ValueMetadata *type metadata accessor for GetHostConfigurationRequest()
{
  return &type metadata for GetHostConfigurationRequest;
}

ValueMetadata *type metadata accessor for GetHostConfigurationResponse()
{
  return &type metadata for GetHostConfigurationResponse;
}

ValueMetadata *type metadata accessor for SetHostConfigurationRequest()
{
  return &type metadata for SetHostConfigurationRequest;
}

uint64_t destroy for SetHostConfigurationResponse()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s20LighthouseBackground28SetHostConfigurationResponseVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SetHostConfigurationResponse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SetHostConfigurationResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SetHostConfigurationResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetHostConfigurationResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetHostConfigurationResponse()
{
  return &type metadata for SetHostConfigurationResponse;
}

ValueMetadata *type metadata accessor for GetNotificationsConfigRequest()
{
  return &type metadata for GetNotificationsConfigRequest;
}

ValueMetadata *type metadata accessor for GetNotificationsConfigResponse()
{
  return &type metadata for GetNotificationsConfigResponse;
}

ValueMetadata *type metadata accessor for ResetNotificationsRequest()
{
  return &type metadata for ResetNotificationsRequest;
}

uint64_t _s20LighthouseBackground17ResetTasksRequestVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20LighthouseBackground17ResetTasksRequestVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24026A888 + 4 * byte_2402C13C2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24026A8BC + 4 * byte_2402C13BD[v4]))();
}

uint64_t sub_24026A8BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026A8C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24026A8CCLL);
  return result;
}

uint64_t sub_24026A8D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24026A8E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24026A8E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026A8EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResetNotificationsResponse()
{
  return &type metadata for ResetNotificationsResponse;
}

ValueMetadata *type metadata accessor for ResetNotificationsResponse.CodingKeys()
{
  return &type metadata for ResetNotificationsResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for ResetNotificationsRequest.CodingKeys()
{
  return &type metadata for ResetNotificationsRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetNotificationsConfigResponse.CodingKeys()
{
  return &type metadata for GetNotificationsConfigResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetNotificationsConfigRequest.CodingKeys()
{
  return &type metadata for GetNotificationsConfigRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for SetHostConfigurationResponse.CodingKeys()
{
  return &type metadata for SetHostConfigurationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for SetHostConfigurationRequest.CodingKeys()
{
  return &type metadata for SetHostConfigurationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetHostConfigurationResponse.CodingKeys()
{
  return &type metadata for GetHostConfigurationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetHostConfigurationRequest.CodingKeys()
{
  return &type metadata for GetHostConfigurationRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetExtensionResponse.CodingKeys()
{
  return &type metadata for GetExtensionResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetExtensionRequest.CodingKeys()
{
  return &type metadata for GetExtensionRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ListExtensionsResponse.CodingKeys()
{
  return &type metadata for ListExtensionsResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for ListExtensionsRequest.CodingKeys()
{
  return &type metadata for ListExtensionsRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetOnDemandTaskRequestResponse.CodingKeys()
{
  return &type metadata for GetOnDemandTaskRequestResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetOnDemandTaskRequest.CodingKeys()
{
  return &type metadata for GetOnDemandTaskRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for CleanTasksResponse.CodingKeys()
{
  return &type metadata for CleanTasksResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for CleanTasksRequest.CodingKeys()
{
  return &type metadata for CleanTasksRequest.CodingKeys;
}

uint64_t _s20LighthouseBackground14OnDemandResultOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24026AA5C + 4 * byte_2402C13CC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24026AA90 + 4 * byte_2402C13C7[v4]))();
}

uint64_t sub_24026AA90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026AA98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24026AAA0);
  return result;
}

uint64_t sub_24026AAAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24026AAB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24026AAB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026AAC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddTaskResponse.CodingKeys()
{
  return &type metadata for AddTaskResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for AddTaskRequest.CodingKeys()
{
  return &type metadata for AddTaskRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ResetTasksResponse.CodingKeys()
{
  return &type metadata for ResetTasksResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for ResetTasksRequest.CodingKeys()
{
  return &type metadata for ResetTasksRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for GetTaskResponse.CodingKeys()
{
  return &type metadata for GetTaskResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for GetTaskRequest.CodingKeys()
{
  return &type metadata for GetTaskRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for ListTasksResponse.CodingKeys()
{
  return &type metadata for ListTasksResponse.CodingKeys;
}

uint64_t _s20LighthouseBackground26ResetNotificationsResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24026AB7C + 4 * byte_2402C13D1[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24026AB9C + 4 * byte_2402C13D6[v4]))();
}

_BYTE *sub_24026AB7C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24026AB9C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24026ABA4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24026ABAC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24026ABB4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24026ABBC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ListTasksRequest.CodingKeys()
{
  return &type metadata for ListTasksRequest.CodingKeys;
}

unint64_t sub_24026ABDC()
{
  unint64_t result;

  result = qword_256FDFAE8;
  if (!qword_256FDFAE8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C24A8, &type metadata for ListTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFAE8);
  }
  return result;
}

unint64_t sub_24026AC24()
{
  unint64_t result;

  result = qword_256FDFAF0;
  if (!qword_256FDFAF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2560, &type metadata for ListTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFAF0);
  }
  return result;
}

unint64_t sub_24026AC6C()
{
  unint64_t result;

  result = qword_256FDFAF8;
  if (!qword_256FDFAF8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2618, &type metadata for GetTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFAF8);
  }
  return result;
}

unint64_t sub_24026ACB4()
{
  unint64_t result;

  result = qword_256FDFB00;
  if (!qword_256FDFB00)
  {
    result = MEMORY[0x2426820F8](&unk_2402C26D0, &type metadata for GetTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB00);
  }
  return result;
}

unint64_t sub_24026ACFC()
{
  unint64_t result;

  result = qword_256FDFB08;
  if (!qword_256FDFB08)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2788, &type metadata for ResetTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB08);
  }
  return result;
}

unint64_t sub_24026AD44()
{
  unint64_t result;

  result = qword_256FDFB10;
  if (!qword_256FDFB10)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2840, &type metadata for ResetTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB10);
  }
  return result;
}

unint64_t sub_24026AD8C()
{
  unint64_t result;

  result = qword_256FDFB18;
  if (!qword_256FDFB18)
  {
    result = MEMORY[0x2426820F8](&unk_2402C28F8, &type metadata for AddTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB18);
  }
  return result;
}

unint64_t sub_24026ADD4()
{
  unint64_t result;

  result = qword_256FDFB20;
  if (!qword_256FDFB20)
  {
    result = MEMORY[0x2426820F8](&unk_2402C29B0, &type metadata for AddTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB20);
  }
  return result;
}

unint64_t sub_24026AE1C()
{
  unint64_t result;

  result = qword_256FDFB28;
  if (!qword_256FDFB28)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2A68, &type metadata for CleanTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB28);
  }
  return result;
}

unint64_t sub_24026AE64()
{
  unint64_t result;

  result = qword_256FDFB30;
  if (!qword_256FDFB30)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2B20, &type metadata for CleanTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB30);
  }
  return result;
}

unint64_t sub_24026AEAC()
{
  unint64_t result;

  result = qword_256FDFB38;
  if (!qword_256FDFB38)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2BD8, &type metadata for GetOnDemandTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB38);
  }
  return result;
}

unint64_t sub_24026AEF4()
{
  unint64_t result;

  result = qword_256FDFB40;
  if (!qword_256FDFB40)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2C90, &type metadata for GetOnDemandTaskRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB40);
  }
  return result;
}

unint64_t sub_24026AF3C()
{
  unint64_t result;

  result = qword_256FDFB48;
  if (!qword_256FDFB48)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2D48, &type metadata for ListExtensionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB48);
  }
  return result;
}

unint64_t sub_24026AF84()
{
  unint64_t result;

  result = qword_256FDFB50;
  if (!qword_256FDFB50)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2E00, &type metadata for ListExtensionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB50);
  }
  return result;
}

unint64_t sub_24026AFCC()
{
  unint64_t result;

  result = qword_256FDFB58;
  if (!qword_256FDFB58)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2EB8, &type metadata for GetExtensionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB58);
  }
  return result;
}

unint64_t sub_24026B014()
{
  unint64_t result;

  result = qword_256FDFB60;
  if (!qword_256FDFB60)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2F70, &type metadata for GetExtensionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB60);
  }
  return result;
}

unint64_t sub_24026B05C()
{
  unint64_t result;

  result = qword_256FDFB68;
  if (!qword_256FDFB68)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3028, &type metadata for GetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB68);
  }
  return result;
}

unint64_t sub_24026B0A4()
{
  unint64_t result;

  result = qword_256FDFB70;
  if (!qword_256FDFB70)
  {
    result = MEMORY[0x2426820F8](&unk_2402C30E0, &type metadata for GetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB70);
  }
  return result;
}

unint64_t sub_24026B0EC()
{
  unint64_t result;

  result = qword_256FDFB78;
  if (!qword_256FDFB78)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3198, &type metadata for SetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB78);
  }
  return result;
}

unint64_t sub_24026B134()
{
  unint64_t result;

  result = qword_256FDFB80;
  if (!qword_256FDFB80)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3250, &type metadata for SetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB80);
  }
  return result;
}

unint64_t sub_24026B17C()
{
  unint64_t result;

  result = qword_256FDFB88;
  if (!qword_256FDFB88)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3308, &type metadata for GetNotificationsConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB88);
  }
  return result;
}

unint64_t sub_24026B1C4()
{
  unint64_t result;

  result = qword_256FDFB90;
  if (!qword_256FDFB90)
  {
    result = MEMORY[0x2426820F8](&unk_2402C33C0, &type metadata for GetNotificationsConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB90);
  }
  return result;
}

unint64_t sub_24026B20C()
{
  unint64_t result;

  result = qword_256FDFB98;
  if (!qword_256FDFB98)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3478, &type metadata for ResetNotificationsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFB98);
  }
  return result;
}

unint64_t sub_24026B254()
{
  unint64_t result;

  result = qword_256FDFBA0;
  if (!qword_256FDFBA0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3530, &type metadata for ResetNotificationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBA0);
  }
  return result;
}

unint64_t sub_24026B29C()
{
  unint64_t result;

  result = qword_256FDFBA8;
  if (!qword_256FDFBA8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C34A0, &type metadata for ResetNotificationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBA8);
  }
  return result;
}

unint64_t sub_24026B2E4()
{
  unint64_t result;

  result = qword_256FDFBB0;
  if (!qword_256FDFBB0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C34C8, &type metadata for ResetNotificationsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBB0);
  }
  return result;
}

unint64_t sub_24026B32C()
{
  unint64_t result;

  result = qword_256FDFBB8;
  if (!qword_256FDFBB8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C33E8, &type metadata for ResetNotificationsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBB8);
  }
  return result;
}

unint64_t sub_24026B374()
{
  unint64_t result;

  result = qword_256FDFBC0;
  if (!qword_256FDFBC0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3410, &type metadata for ResetNotificationsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBC0);
  }
  return result;
}

unint64_t sub_24026B3BC()
{
  unint64_t result;

  result = qword_256FDFBC8;
  if (!qword_256FDFBC8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3330, &type metadata for GetNotificationsConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBC8);
  }
  return result;
}

unint64_t sub_24026B404()
{
  unint64_t result;

  result = qword_256FDFBD0;
  if (!qword_256FDFBD0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3358, &type metadata for GetNotificationsConfigResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBD0);
  }
  return result;
}

unint64_t sub_24026B44C()
{
  unint64_t result;

  result = qword_256FDFBD8;
  if (!qword_256FDFBD8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3278, &type metadata for GetNotificationsConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBD8);
  }
  return result;
}

unint64_t sub_24026B494()
{
  unint64_t result;

  result = qword_256FDFBE0;
  if (!qword_256FDFBE0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C32A0, &type metadata for GetNotificationsConfigRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBE0);
  }
  return result;
}

unint64_t sub_24026B4DC()
{
  unint64_t result;

  result = qword_256FDFBE8;
  if (!qword_256FDFBE8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C31C0, &type metadata for SetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBE8);
  }
  return result;
}

unint64_t sub_24026B524()
{
  unint64_t result;

  result = qword_256FDFBF0;
  if (!qword_256FDFBF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C31E8, &type metadata for SetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBF0);
  }
  return result;
}

unint64_t sub_24026B56C()
{
  unint64_t result;

  result = qword_256FDFBF8;
  if (!qword_256FDFBF8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3108, &type metadata for SetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFBF8);
  }
  return result;
}

unint64_t sub_24026B5B4()
{
  unint64_t result;

  result = qword_256FDFC00;
  if (!qword_256FDFC00)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3130, &type metadata for SetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC00);
  }
  return result;
}

unint64_t sub_24026B5FC()
{
  unint64_t result;

  result = qword_256FDFC08;
  if (!qword_256FDFC08)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3050, &type metadata for GetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC08);
  }
  return result;
}

unint64_t sub_24026B644()
{
  unint64_t result;

  result = qword_256FDFC10;
  if (!qword_256FDFC10)
  {
    result = MEMORY[0x2426820F8](&unk_2402C3078, &type metadata for GetHostConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC10);
  }
  return result;
}

unint64_t sub_24026B68C()
{
  unint64_t result;

  result = qword_256FDFC18;
  if (!qword_256FDFC18)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2F98, &type metadata for GetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC18);
  }
  return result;
}

unint64_t sub_24026B6D4()
{
  unint64_t result;

  result = qword_256FDFC20;
  if (!qword_256FDFC20)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2FC0, &type metadata for GetHostConfigurationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC20);
  }
  return result;
}

unint64_t sub_24026B71C()
{
  unint64_t result;

  result = qword_256FDFC28;
  if (!qword_256FDFC28)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2EE0, &type metadata for GetExtensionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC28);
  }
  return result;
}

unint64_t sub_24026B764()
{
  unint64_t result;

  result = qword_256FDFC30;
  if (!qword_256FDFC30)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2F08, &type metadata for GetExtensionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC30);
  }
  return result;
}

unint64_t sub_24026B7AC()
{
  unint64_t result;

  result = qword_256FDFC38;
  if (!qword_256FDFC38)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2E28, &type metadata for GetExtensionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC38);
  }
  return result;
}

unint64_t sub_24026B7F4()
{
  unint64_t result;

  result = qword_256FDFC40;
  if (!qword_256FDFC40)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2E50, &type metadata for GetExtensionRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC40);
  }
  return result;
}

unint64_t sub_24026B83C()
{
  unint64_t result;

  result = qword_256FDFC48;
  if (!qword_256FDFC48)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2D70, &type metadata for ListExtensionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC48);
  }
  return result;
}

unint64_t sub_24026B884()
{
  unint64_t result;

  result = qword_256FDFC50;
  if (!qword_256FDFC50)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2D98, &type metadata for ListExtensionsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC50);
  }
  return result;
}

unint64_t sub_24026B8CC()
{
  unint64_t result;

  result = qword_256FDFC58;
  if (!qword_256FDFC58)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2CB8, &type metadata for ListExtensionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC58);
  }
  return result;
}

unint64_t sub_24026B914()
{
  unint64_t result;

  result = qword_256FDFC60;
  if (!qword_256FDFC60)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2CE0, &type metadata for ListExtensionsRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC60);
  }
  return result;
}

unint64_t sub_24026B95C()
{
  unint64_t result;

  result = qword_256FDFC68;
  if (!qword_256FDFC68)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2C00, &type metadata for GetOnDemandTaskRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC68);
  }
  return result;
}

unint64_t sub_24026B9A4()
{
  unint64_t result;

  result = qword_256FDFC70;
  if (!qword_256FDFC70)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2C28, &type metadata for GetOnDemandTaskRequestResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC70);
  }
  return result;
}

unint64_t sub_24026B9EC()
{
  unint64_t result;

  result = qword_256FDFC78;
  if (!qword_256FDFC78)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2B48, &type metadata for GetOnDemandTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC78);
  }
  return result;
}

unint64_t sub_24026BA34()
{
  unint64_t result;

  result = qword_256FDFC80;
  if (!qword_256FDFC80)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2B70, &type metadata for GetOnDemandTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC80);
  }
  return result;
}

unint64_t sub_24026BA7C()
{
  unint64_t result;

  result = qword_256FDFC88;
  if (!qword_256FDFC88)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2A90, &type metadata for CleanTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC88);
  }
  return result;
}

unint64_t sub_24026BAC4()
{
  unint64_t result;

  result = qword_256FDFC90;
  if (!qword_256FDFC90)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2AB8, &type metadata for CleanTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC90);
  }
  return result;
}

unint64_t sub_24026BB0C()
{
  unint64_t result;

  result = qword_256FDFC98;
  if (!qword_256FDFC98)
  {
    result = MEMORY[0x2426820F8](&unk_2402C29D8, &type metadata for CleanTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFC98);
  }
  return result;
}

unint64_t sub_24026BB54()
{
  unint64_t result;

  result = qword_256FDFCA0;
  if (!qword_256FDFCA0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2A00, &type metadata for CleanTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCA0);
  }
  return result;
}

unint64_t sub_24026BB9C()
{
  unint64_t result;

  result = qword_256FDFCA8;
  if (!qword_256FDFCA8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2920, &type metadata for AddTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCA8);
  }
  return result;
}

unint64_t sub_24026BBE4()
{
  unint64_t result;

  result = qword_256FDFCB0;
  if (!qword_256FDFCB0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2948, &type metadata for AddTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCB0);
  }
  return result;
}

unint64_t sub_24026BC2C()
{
  unint64_t result;

  result = qword_256FDFCB8;
  if (!qword_256FDFCB8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2868, &type metadata for AddTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCB8);
  }
  return result;
}

unint64_t sub_24026BC74()
{
  unint64_t result;

  result = qword_256FDFCC0;
  if (!qword_256FDFCC0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2890, &type metadata for AddTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCC0);
  }
  return result;
}

unint64_t sub_24026BCBC()
{
  unint64_t result;

  result = qword_256FDFCC8;
  if (!qword_256FDFCC8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C27B0, &type metadata for ResetTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCC8);
  }
  return result;
}

unint64_t sub_24026BD04()
{
  unint64_t result;

  result = qword_256FDFCD0;
  if (!qword_256FDFCD0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C27D8, &type metadata for ResetTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCD0);
  }
  return result;
}

unint64_t sub_24026BD4C()
{
  unint64_t result;

  result = qword_256FDFCD8;
  if (!qword_256FDFCD8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C26F8, &type metadata for ResetTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCD8);
  }
  return result;
}

unint64_t sub_24026BD94()
{
  unint64_t result;

  result = qword_256FDFCE0;
  if (!qword_256FDFCE0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2720, &type metadata for ResetTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCE0);
  }
  return result;
}

unint64_t sub_24026BDDC()
{
  unint64_t result;

  result = qword_2543526D8;
  if (!qword_2543526D8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2640, &type metadata for GetTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543526D8);
  }
  return result;
}

unint64_t sub_24026BE24()
{
  unint64_t result;

  result = qword_2543526D0;
  if (!qword_2543526D0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2668, &type metadata for GetTaskResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543526D0);
  }
  return result;
}

unint64_t sub_24026BE6C()
{
  unint64_t result;

  result = qword_256FDFCE8;
  if (!qword_256FDFCE8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2588, &type metadata for GetTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCE8);
  }
  return result;
}

unint64_t sub_24026BEB4()
{
  unint64_t result;

  result = qword_256FDFCF0;
  if (!qword_256FDFCF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C25B0, &type metadata for GetTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCF0);
  }
  return result;
}

unint64_t sub_24026BEFC()
{
  unint64_t result;

  result = qword_256FDFCF8;
  if (!qword_256FDFCF8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C24D0, &type metadata for ListTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFCF8);
  }
  return result;
}

unint64_t sub_24026BF44()
{
  unint64_t result;

  result = qword_256FDFD00;
  if (!qword_256FDFD00)
  {
    result = MEMORY[0x2426820F8](&unk_2402C24F8, &type metadata for ListTasksResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD00);
  }
  return result;
}

unint64_t sub_24026BF8C()
{
  unint64_t result;

  result = qword_256FDFD08;
  if (!qword_256FDFD08)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2418, &type metadata for ListTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD08);
  }
  return result;
}

unint64_t sub_24026BFD4()
{
  unint64_t result;

  result = qword_256FDFD10;
  if (!qword_256FDFD10)
  {
    result = MEMORY[0x2426820F8](&unk_2402C2440, &type metadata for ListTasksRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD10);
  }
  return result;
}

uint64_t sub_24026C018(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C75736572 && a2 == 0xE600000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24026C0F8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9220)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_24026C17C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_24026C264()
{
  unint64_t result;

  result = qword_256FDFD18;
  if (!qword_256FDFD18)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandResult, &type metadata for OnDemandResult);
    atomic_store(result, (unint64_t *)&qword_256FDFD18);
  }
  return result;
}

unint64_t sub_24026C2A8()
{
  unint64_t result;

  result = qword_256FDFD20;
  if (!qword_256FDFD20)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for OnDemandError, &type metadata for OnDemandError);
    atomic_store(result, (unint64_t *)&qword_256FDFD20);
  }
  return result;
}

double BucketInterval.rawValue.getter()
{
  char *v0;

  return dbl_2402C3E88[*v0];
}

LighthouseBackground::BucketInterval_optional __swiftcall BucketInterval.init(argument:)(Swift::String argument)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  LighthouseBackground::BucketInterval_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = argument._countAndFlagsBits == 29549 && argument._object == (void *)0xE200000000000000;
  if (v3 || (object = argument._object, countAndFlagsBits = argument._countAndFlagsBits, (sub_2402BDD8C() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x646E6F636573 && object == (void *)0xE600000000000000
         || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x6574756E696DLL && object == (void *)0xE600000000000000
         || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0x72756F68666C6168 && object == (void *)0xE800000000000000
         || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 1920298856 && object == (void *)0xE400000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else if (countAndFlagsBits == 0x796164666C6168 && object == (void *)0xE700000000000000
         || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 5;
  }
  else if (countAndFlagsBits == 7954788 && object == (void *)0xE300000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 6;
  }
  else if (countAndFlagsBits == 1801807223 && object == (void *)0xE400000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 7;
  }
  else
  {
    v8 = sub_2402BDD8C();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 7;
    else
      v7 = 8;
  }
  *v2 = v7;
  return result;
}

uint64_t BucketInterval.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24026C6B0 + 4 * byte_2402C3CE0[*v0]))(1919431730, 0xE400000000000000);
}

uint64_t sub_24026C6B0()
{
  return 7564593;
}

uint64_t sub_24026C6C0()
{
  return 29489;
}

uint64_t sub_24026C6CC()
{
  return 1852402993;
}

uint64_t sub_24026C6D8()
{
  return 0x6E696D3033;
}

uint64_t sub_24026C6EC()
{
  return 7497777;
}

uint64_t sub_24026C6FC()
{
  return 1919431217;
}

uint64_t sub_24026C708()
{
  return 2036425783;
}

LighthouseBackground::BucketInterval_optional __swiftcall BucketInterval.init(rawValue:)(Swift::Double rawValue)
{
  char *v1;
  char v2;
  char v3;
  char v4;
  LighthouseBackground::BucketInterval_optional result;

  if (rawValue == 0.001)
  {
    *v1 = 0;
  }
  else if (rawValue == 1.0)
  {
    *v1 = 1;
  }
  else if (rawValue == 60.0)
  {
    *v1 = 2;
  }
  else if (rawValue == 1800.0)
  {
    *v1 = 3;
  }
  else if (rawValue == 3600.0)
  {
    *v1 = 4;
  }
  else
  {
    if (rawValue == 604800.0)
      v2 = 7;
    else
      v2 = 8;
    if (rawValue == 86400.0)
      v3 = 6;
    else
      v3 = v2;
    if (rawValue == 43200.0)
      v4 = 5;
    else
      v4 = v3;
    *v1 = v4;
  }
  return result;
}

void *static BucketInterval.allCases.getter()
{
  return &unk_25108ADD8;
}

BOOL sub_24026C800(char *a1, char *a2)
{
  return sub_240236188(*a1, *a2);
}

unint64_t sub_24026C810()
{
  unint64_t result;

  result = qword_256FDFD28;
  if (!qword_256FDFD28)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for BucketInterval, &type metadata for BucketInterval);
    atomic_store(result, (unint64_t *)&qword_256FDFD28);
  }
  return result;
}

uint64_t sub_24026C854()
{
  return sub_2402AA5D0();
}

uint64_t sub_24026C860()
{
  return sub_24028A2B8();
}

uint64_t sub_24026C868()
{
  return sub_2402AA5D0();
}

LighthouseBackground::BucketInterval_optional sub_24026C870(Swift::Double *a1)
{
  return BucketInterval.init(rawValue:)(*a1);
}

double sub_24026C878@<D0>(double *a1@<X8>)
{
  char *v1;
  double result;

  result = dbl_2402C3E88[*v1];
  *a1 = result;
  return result;
}

unint64_t sub_24026C894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FDFD30;
  if (!qword_256FDFD30)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDFD38);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256FDFD30);
  }
  return result;
}

void sub_24026C8E0(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108ADD8;
}

uint64_t sub_24026C8F0()
{
  sub_24026CAF4();
  return sub_2402BD780();
}

uint64_t sub_24026C94C()
{
  sub_24026CAF4();
  return sub_2402BD768();
}

uint64_t sub_24026C998()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24026C9C4 + 4 * byte_2402C3CE8[*v0]))(1919431730, 0xE400000000000000);
}

uint64_t sub_24026C9C4()
{
  return 7564593;
}

uint64_t sub_24026C9D4()
{
  return 29489;
}

uint64_t sub_24026C9E0()
{
  return 1852402993;
}

uint64_t sub_24026C9EC()
{
  return 0x6E696D3033;
}

uint64_t sub_24026CA00()
{
  return 7497777;
}

uint64_t sub_24026CA10()
{
  return 1919431217;
}

uint64_t sub_24026CA1C()
{
  return 2036425783;
}

uint64_t storeEnumTagSinglePayload for BucketInterval(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_24026CA74 + 4 * byte_2402C3CF5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_24026CAA8 + 4 * byte_2402C3CF0[v4]))();
}

uint64_t sub_24026CAA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026CAB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24026CAB8);
  return result;
}

uint64_t sub_24026CAC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24026CACCLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_24026CAD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24026CAD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BucketInterval()
{
  return &type metadata for BucketInterval;
}

unint64_t sub_24026CAF4()
{
  unint64_t result;

  result = qword_256FDFD40;
  if (!qword_256FDFD40)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for BucketInterval, &type metadata for BucketInterval);
    atomic_store(result, (unint64_t *)&qword_256FDFD40);
  }
  return result;
}

uint64_t sub_24026CB38(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t XPCConnectionError.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24026CBB8 + 4 * byte_2402C3ED0[*v0]))(0xD000000000000012, 0x80000002402C9BC0);
}

unint64_t sub_24026CBB8()
{
  return 0xD000000000000016;
}

uint64_t sub_24026CBE0()
{
  return 0x206E776F6E6B6E55;
}

BOOL static XPCConnectionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t XPCConnectionError.hash(into:)()
{
  return sub_2402BDE10();
}

uint64_t sub_24026CC40(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24026CC7C + 4 * byte_2402C3ED4[a1]))(0xD000000000000011, 0x80000002402C9D00);
}

uint64_t sub_24026CC7C()
{
  uint64_t v0;

  return v0 + 5;
}

unint64_t sub_24026CC94()
{
  return 0xD000000000000010;
}

uint64_t sub_24026CCB0()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_24026CCC8()
{
  unsigned __int8 *v0;

  return sub_24026CC40(*v0);
}

uint64_t sub_24026CCD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240272794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24026CCF4()
{
  sub_24026D170();
  return sub_2402BDE88();
}

uint64_t sub_24026CD1C()
{
  sub_24026D170();
  return sub_2402BDE94();
}

uint64_t sub_24026CD44()
{
  sub_24026D23C();
  return sub_2402BDE88();
}

uint64_t sub_24026CD6C()
{
  sub_24026D23C();
  return sub_2402BDE94();
}

uint64_t sub_24026CD94()
{
  sub_24026D280();
  return sub_2402BDE88();
}

uint64_t sub_24026CDBC()
{
  sub_24026D280();
  return sub_2402BDE94();
}

uint64_t sub_24026CDE4()
{
  sub_24026D1F8();
  return sub_2402BDE88();
}

uint64_t sub_24026CE0C()
{
  sub_24026D1F8();
  return sub_2402BDE94();
}

uint64_t sub_24026CE34()
{
  sub_24026D1B4();
  return sub_2402BDE88();
}

uint64_t sub_24026CE5C()
{
  sub_24026D1B4();
  return sub_2402BDE94();
}

void XPCConnectionError.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFD50);
  v19 = *(_QWORD *)(v4 - 8);
  v20 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFD58);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFD60);
  v13 = *(_QWORD *)(v8 - 8);
  v14 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFD68);
  MEMORY[0x24BDAC7A8](v12);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFD70);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24026D170();
  sub_2402BDE70();
  __asm { BR              X9 }
}

uint64_t sub_24026D03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 68) = 0;
  sub_24026D280();
  sub_2402BDC90();
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(v2, *(_QWORD *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v0);
}

unint64_t sub_24026D170()
{
  unint64_t result;

  result = qword_256FDFD78;
  if (!qword_256FDFD78)
  {
    result = MEMORY[0x2426820F8](&unk_2402C452C, &type metadata for XPCConnectionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD78);
  }
  return result;
}

unint64_t sub_24026D1B4()
{
  unint64_t result;

  result = qword_256FDFD80;
  if (!qword_256FDFD80)
  {
    result = MEMORY[0x2426820F8](&unk_2402C44DC, &type metadata for XPCConnectionError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD80);
  }
  return result;
}

unint64_t sub_24026D1F8()
{
  unint64_t result;

  result = qword_256FDFD88;
  if (!qword_256FDFD88)
  {
    result = MEMORY[0x2426820F8](&unk_2402C448C, &type metadata for XPCConnectionError.UnhandledMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD88);
  }
  return result;
}

unint64_t sub_24026D23C()
{
  unint64_t result;

  result = qword_256FDFD90;
  if (!qword_256FDFD90)
  {
    result = MEMORY[0x2426820F8](&unk_2402C443C, &type metadata for XPCConnectionError.ConnectionInterruptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD90);
  }
  return result;
}

unint64_t sub_24026D280()
{
  unint64_t result;

  result = qword_256FDFD98;
  if (!qword_256FDFD98)
  {
    result = MEMORY[0x2426820F8](&unk_2402C43EC, &type metadata for XPCConnectionError.ConnectionInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFD98);
  }
  return result;
}

uint64_t XPCConnectionError.hashValue.getter()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t XPCConnectionError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;

  v23 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFDA0);
  v21[5] = *(_QWORD *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFDA8);
  v21[4] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFDB0);
  v21[2] = *(_QWORD *)(v6 - 8);
  v21[3] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDFDB8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_256FDFDC0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_24026D170();
  v15 = v28;
  sub_2402BDE64();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    v28 = v11;
    v16 = sub_2402BDC78();
    if (*(_QWORD *)(v16 + 16) == 1)
      __asm { BR              X9 }
    v17 = sub_2402BDAE0();
    swift_allocError();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE708);
    *v19 = &type metadata for XPCConnectionError;
    sub_2402BDBB8();
    sub_2402BDAD4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v19, *MEMORY[0x24BEE26D0], v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t sub_24026D790@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCConnectionError.init(from:)(a1, a2);
}

void sub_24026D7A4(_QWORD *a1)
{
  XPCConnectionError.encode(to:)(a1);
}

uint64_t sub_24026D7B8@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 48);
  v5 = *(_QWORD *)(v3 + 56);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_240272D34;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_24026D938(v4);
}

uint64_t sub_24026D840(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_240272D34;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 48);
  *(_QWORD *)(v7 + 48) = v6;
  *(_QWORD *)(v7 + 56) = v5;
  sub_24026D938(v3);
  return sub_24025A2CC(v8);
}

uint64_t sub_24026D8EC()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 48);
  sub_24026D938(v1);
  return v1;
}

uint64_t sub_24026D938(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_24026D948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return sub_24025A2CC(v5);
}

uint64_t (*sub_24026D998())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24026D9D4@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 72);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_240272958;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_24026D938(v4);
}

uint64_t sub_24026DA5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_240272958;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v7 + 64) = v6;
  *(_QWORD *)(v7 + 72) = v5;
  sub_24026D938(v3);
  return sub_24025A2CC(v8);
}

uint64_t sub_24026DB08()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 64);
  sub_24026D938(v1);
  return v1;
}

uint64_t sub_24026DB54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return sub_24025A2CC(v5);
}

uint64_t (*sub_24026DBA4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void sub_24026DBE0(void *a1, uint64_t a2, _xpc_connection_s *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void (*v36)(void *);
  uint64_t v37;
  void *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  void *v43;
  id v44[2];
  uint64_t v45;

  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_2543528B0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x242682320](a1);
  if (sub_2402BD4EC() == v9)
  {
    v14 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v14 == a1)
    {
      swift_beginAccess();
      v16 = *(void (**)(uint64_t))(a2 + 64);
      if (!v16)
        return;
    }
    else
    {
      v15 = sub_2402BD51C();
      swift_unknownObjectRelease();
      if ((void *)v15 != a1)
        return;
      swift_beginAccess();
      v16 = *(void (**)(uint64_t))(a2 + 48);
      if (!v16)
        return;
    }
    v21 = swift_retain();
    v16(v21);
    sub_24025A2CC((uint64_t)v16);
    return;
  }
  if (sub_2402BD504() == v9)
  {
    v17 = MEMORY[0x242682320](a1);
    if (v17 == sub_2402BD504() && xpc_dictionary_get_string(a1, "messageType"))
    {
      v22 = sub_2402BD6CC();
      v24 = v23;
      swift_beginAccess();
      v25 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(v25 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26 = sub_240258860(v22, v24);
        if ((v27 & 1) != 0)
        {
          v28 = (uint64_t *)(*(_QWORD *)(v25 + 56) + 16 * v26);
          v30 = *v28;
          v29 = v28[1];
          swift_retain();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v31 = sub_2402BD8AC();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v8, 1, 1, v31);
          v32 = (_QWORD *)swift_allocObject();
          v32[2] = 0;
          v32[3] = 0;
          v32[4] = v30;
          v32[5] = v29;
          v32[6] = a1;
          v32[7] = a3;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          sub_24026EA84((uint64_t)v8, (uint64_t)&unk_256FE0068, (uint64_t)v32);
          swift_release();
          return;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      v33 = *(_QWORD *)(a2 + 40);
      if (*(_QWORD *)(v33 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34 = sub_240258860(v22, v24);
        if ((v35 & 1) != 0)
        {
          v36 = *(void (**)(void *))(*(_QWORD *)(v33 + 56) + 16 * v34);
          swift_retain_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          v36(a1);
          swift_release_n();
          return;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (qword_2543528A0 != -1)
        swift_once();
      v37 = sub_2402BD4E0();
      v38 = (void *)__swift_project_value_buffer(v37, (uint64_t)qword_2543529A0);
      swift_bridgeObjectRetain();
      v44[0] = v38;
      v39 = sub_2402BD4C8();
      v40 = sub_2402BD96C();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v45 = v42;
        *(_DWORD *)v41 = 136315138;
        swift_bridgeObjectRetain();
        v44[1] = (id)sub_24023D440(v22, v24, &v45);
        sub_2402BD9FC();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24022D000, v39, v40, "Unhandled message sent to XPCConnection: %s", v41, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242682188](v42, -1, -1);
        MEMORY[0x242682188](v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v43 = (void *)sub_240272D94(2, (uint64_t)a1);
      xpc_dictionary_set_BOOL(v43, "messageError", 1);
      xpc_connection_send_message(a3, v43);
      swift_unknownObjectRelease();
    }
    else
    {
      if (qword_2543528A0 != -1)
        swift_once();
      v18 = sub_2402BD4E0();
      __swift_project_value_buffer(v18, (uint64_t)qword_2543529A0);
      v44[0] = (id)sub_2402BD4C8();
      v19 = sub_2402BD96C();
      if (os_log_type_enabled((os_log_t)v44[0], v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_24022D000, (os_log_t)v44[0], v19, "Dropping incoming message due to invalid message type.", v20, 2u);
        MEMORY[0x242682188](v20, -1, -1);
      }

    }
  }
  else
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v10 = sub_2402BD4E0();
    __swift_project_value_buffer(v10, (uint64_t)qword_2543529A0);
    v11 = sub_2402BD4C8();
    v12 = sub_2402BD96C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_24022D000, v11, v12, "Unexpected data on XPC connection, invalidating the connection", v13, 2u);
      MEMORY[0x242682188](v13, -1, -1);
    }

    xpc_connection_cancel(*(xpc_connection_t *)(a2 + 16));
  }
}

uint64_t sub_24026E4B8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t);

  v7[20] = a6;
  v7[21] = a7;
  v11 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v9 = (_QWORD *)swift_task_alloc();
  v7[22] = v9;
  *v9 = v7;
  v9[1] = sub_24026E520;
  return v11(a6);
}

uint64_t sub_24026E520(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 192) = a1;
  return swift_task_switch();
}

uint64_t sub_24026E594()
{
  uint64_t v0;

  xpc_connection_send_message(*(xpc_connection_t *)(v0 + 168), *(xpc_object_t *)(v0 + 192));
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24026E5D8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  const char **v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  os_log_type_t v32;
  _QWORD *v33;

  v1 = *(void **)(v0 + 184);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0070);
  if ((swift_dynamicCast() & 1) != 0)
  {

    sub_240272CD8((__int128 *)(v0 + 16), v0 + 56);
    if (qword_2543528A0 != -1)
      swift_once();
    v3 = sub_2402BD4E0();
    __swift_project_value_buffer(v3, (uint64_t)qword_2543529A0);
    sub_240272CF0(v0 + 56, v0 + 96);
    v4 = sub_2402BD4C8();
    v5 = sub_2402BD96C();
    if (os_log_type_enabled(v4, v5))
    {
      v32 = v5;
      v6 = (uint8_t *)swift_slowAlloc();
      v33 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      v7 = *(_QWORD *)(v0 + 120);
      v8 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v7);
      v9 = *(_QWORD *)(v7 - 8);
      v10 = swift_task_alloc();
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v9 + 16))(v10, v8, v7);
      if (sub_2402BDD80())
      {
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v7);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v24, v10, v7);
      }
      swift_task_dealloc();
      v25 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 152) = v25;
      sub_2402BD9FC();
      *v33 = v25;
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      _os_log_impl(&dword_24022D000, v4, v32, "Sending error reply after handling incoming message: %@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v33, -1, -1);
      MEMORY[0x242682188](v6, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    }

    v26 = *(const char ***)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 88);
    v29 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v27);
    v30 = sub_240291A08((uint64_t)v29, v26, v27, v28);
    xpc_connection_send_message(*(xpc_connection_t *)(v0 + 168), v30);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
    v23 = *(void **)(v0 + 136);
    goto LABEL_16;
  }

  if (qword_2543528A0 != -1)
    swift_once();
  v11 = *(void **)(v0 + 184);
  v12 = sub_2402BD4E0();
  __swift_project_value_buffer(v12, (uint64_t)qword_2543529A0);
  v13 = v11;
  v14 = v11;
  v15 = sub_2402BD4C8();
  v16 = sub_2402BD96C();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(void **)(v0 + 184);
  if (v17)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v19 = 138412290;
    v21 = v18;
    v22 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 144) = v22;
    sub_2402BD9FC();
    *v20 = v22;

    _os_log_impl(&dword_24022D000, v15, v16, "Unhandled error when handling incoming message: %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
    swift_arrayDestroy();
    MEMORY[0x242682188](v20, -1, -1);
    MEMORY[0x242682188](v19, -1, -1);

    v23 = v18;
LABEL_16:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24026EA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_2402BD8AC();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_2402BD8A0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_240272C98(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2402BD870();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t XPCConnection.__allocating_init(incomingConnection:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _xpc_connection_s *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  _xpc_connection_s *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  uint64_t aBlock;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  void (*v27)(void *);
  uint64_t v28;

  v2 = sub_2402BD984();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD978();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_2402BD558();
  MEMORY[0x24BDAC7A8](v7);
  v8 = *(void **)(a1 + 24);
  v9 = *(_xpc_connection_s **)(a1 + 16);
  if (v8)
  {
    type metadata accessor for XPCConnection();
    v10 = swift_allocObject();
    v11 = v8;
    swift_unknownObjectRetain();
    v12 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v10 + 32) = sub_240249290(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)(v10 + 40) = sub_24024929C(v12);
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v11;
    v13 = v11;
    v14 = (_xpc_connection_s *)swift_unknownObjectRetain();
    xpc_connection_set_target_queue(v14, v13);
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = v10;
    *(_QWORD *)(v15 + 24) = v9;
    v27 = sub_240272D90;
    v28 = v15;
    aBlock = MEMORY[0x24BDAC760];
    v24 = 1107296256;
    v16 = &block_descriptor_7;
  }
  else
  {
    v22[1] = sub_24023481C();
    swift_unknownObjectRetain();
    sub_2402BD540();
    aBlock = MEMORY[0x24BEE4AF8];
    v22[0] = sub_240234858();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE580);
    sub_2402348A0(&qword_256FDE588, &qword_256FDE580, MEMORY[0x24BEE12C8]);
    sub_2402BDA44();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
    v17 = (void *)sub_2402BD990();
    type metadata accessor for XPCConnection();
    v10 = swift_allocObject();
    v18 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v10 + 32) = sub_240249290(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)(v10 + 40) = sub_24024929C(v18);
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v17;
    swift_unknownObjectRetain();
    v13 = v17;
    xpc_connection_set_target_queue(v9, v13);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v10;
    *(_QWORD *)(v19 + 24) = v9;
    v27 = sub_24026EF58;
    v28 = v19;
    aBlock = MEMORY[0x24BDAC760];
    v24 = 1107296256;
    v16 = &block_descriptor_2;
  }
  v25 = sub_24026CB38;
  v26 = v16;
  v20 = _Block_copy(&aBlock);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v9, v20);
  swift_unknownObjectRelease();

  _Block_release(v20);
  swift_release();
  swift_unknownObjectRelease();
  return v10;
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self();
}

void sub_24026EF58(void *a1)
{
  uint64_t v1;

  sub_24026DBE0(a1, *(_QWORD *)(v1 + 16), *(_xpc_connection_s **)(v1 + 24));
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t static XPCConnection.machService(_:queue:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  _xpc_connection_s *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  _xpc_connection_s *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[7];

  v29 = a1;
  v30 = a2;
  v4 = sub_2402BD984();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2402BD978();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_2402BD558();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_2402BD534();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v15 = a3;
  }
  else
  {
    sub_24023481C();
    v27 = v5;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x24BEE5490], v10);
    v26 = v4;
    v28 = sub_2402BD99C();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_2402BD540();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    sub_240234858();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE580);
    sub_2402348A0(&qword_256FDE588, &qword_256FDE580, MEMORY[0x24BEE12C8]);
    sub_2402BDA44();
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v7, *MEMORY[0x24BEE5750], v26);
    v12 = sub_2402BD990();
    v15 = (void *)v12;
  }
  MEMORY[0x24BDAC7A8](v12);
  *(&v26 - 2) = (uint64_t)a3;
  v16 = a3;
  v17 = (_xpc_connection_s *)sub_24026F374((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_24026F340, (uint64_t)(&v26 - 4), v29, v30);
  type metadata accessor for XPCConnection();
  v18 = swift_allocObject();
  v19 = v15;
  v20 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v18 + 32) = sub_240249290(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v18 + 40) = sub_24024929C(v20);
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v19;
  v21 = v19;
  v22 = (_xpc_connection_s *)swift_unknownObjectRetain();
  xpc_connection_set_target_queue(v22, v21);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v18;
  *(_QWORD *)(v23 + 24) = v17;
  aBlock[4] = sub_240272D90;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24026CB38;
  aBlock[3] = &block_descriptor_14_0;
  v24 = _Block_copy(aBlock);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v17, v24);
  swift_unknownObjectRelease();

  _Block_release(v24);
  xpc_connection_activate(v17);

  swift_unknownObjectRelease();
  return v18;
}

xpc_connection_t sub_24026F310@<X0>(const char *a1@<X0>, NSObject *a2@<X1>, xpc_connection_t *a3@<X8>)
{
  xpc_connection_t result;

  result = xpc_connection_create_mach_service(a1, a2, 0);
  *a3 = result;
  return result;
}

xpc_connection_t sub_24026F340@<X0>(const char *a1@<X0>, xpc_connection_t *a2@<X8>)
{
  uint64_t v2;
  xpc_connection_t result;

  result = xpc_connection_create_mach_service(a1, *(dispatch_queue_t *)(v2 + 16), 0);
  *a2 = result;
  return result;
}

_QWORD *sub_24026F374(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
    result = (_QWORD *)sub_2402BDA8C();
    if (!v4)
      return (_QWORD *)v9[2];
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v9);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = sub_2402BDAEC();
    result = a1(v9, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)v9[0];
  }
  return result;
}

uint64_t static XPCConnection.service(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _xpc_connection_s *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  _xpc_connection_s *v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];
  void *v26;
  _QWORD aBlock[7];

  v23 = a1;
  v24 = a2;
  v2 = sub_2402BD984();
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2402BD978();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_2402BD558();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_2402BD534();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24023481C();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5490], v7);
  sub_2402BD99C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_2402BD540();
  v11 = MEMORY[0x24BEE4AF8];
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_240234858();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE580);
  sub_2402348A0(&qword_256FDE588, &qword_256FDE580, MEMORY[0x24BEE12C8]);
  sub_2402BDA44();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v4, *MEMORY[0x24BEE5750], v22);
  v12 = (void *)sub_2402BD990();
  v26 = v12;
  v13 = (_xpc_connection_s *)sub_24026F374((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_24026F7BC, (uint64_t)v25, v23, v24);
  type metadata accessor for XPCConnection();
  v14 = swift_allocObject();
  v15 = v12;
  *(_QWORD *)(v14 + 32) = sub_240249290(v11);
  *(_QWORD *)(v14 + 40) = sub_24024929C(v11);
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v15;
  v16 = v15;
  v17 = (_xpc_connection_s *)swift_unknownObjectRetain();
  xpc_connection_set_target_queue(v17, v16);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = v13;
  aBlock[4] = sub_240272D90;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24026CB38;
  aBlock[3] = &block_descriptor_21;
  v19 = _Block_copy(aBlock);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v13, v19);
  swift_unknownObjectRelease();

  _Block_release(v19);
  xpc_connection_activate(v13);

  swift_unknownObjectRelease();
  return v14;
}

xpc_connection_t sub_24026F7BC@<X0>(const char *a1@<X0>, xpc_connection_t *a2@<X8>)
{
  uint64_t v2;
  xpc_connection_t result;

  result = xpc_connection_create(a1, *(dispatch_queue_t *)(v2 + 16));
  *a2 = result;
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_24026F81C()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(v0 + 16));
}

uint64_t sub_24026F824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5[8];

  v5[7] = MEMORY[0x24BEE4B08];
  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  sub_24026F8E8(v0);
  swift_beginAccess();
  v1 = swift_bridgeObjectRetain();
  sub_24026F8E8(v1);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_2402710A8(v2);
  swift_bridgeObjectRelease();
  v5[0] = (uint64_t)v3;
  sub_2402713A0(v5);
  swift_bridgeObjectRelease();
  return v5[0];
}

uint64_t sub_24026F8E8(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      v2 = v13 + 1;
      if (v13 + 1 >= v7)
        return swift_release();
      v14 = *(_QWORD *)(v3 + 8 * v2);
      if (!v14)
      {
        v2 = v13 + 2;
        if (v13 + 2 >= v7)
          return swift_release();
        v14 = *(_QWORD *)(v3 + 8 * v2);
        if (!v14)
        {
          v2 = v13 + 3;
          if (v13 + 3 >= v7)
            return swift_release();
          v14 = *(_QWORD *)(v3 + 8 * v2);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_240247060(&v16, v11, v12);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 4;
  if (v15 >= v7)
    return swift_release();
  v14 = *(_QWORD *)(v3 + 8 * v15);
  if (v14)
  {
    v2 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v2 >= v7)
      return swift_release();
    v14 = *(_QWORD *)(v3 + 8 * v2);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_24026FA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24026FA74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = sub_240291A50(v0[3], 0, v0[4], v0[5]);
  v0[7] = v1;
  v2 = v1;
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[8] = v4;
  v5 = *(_OWORD *)(v0 + 5);
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v6;
  swift_getAssociatedTypeWitness();
  *v6 = v0;
  v6[1] = sub_24026FB80;
  return sub_2402BDDA4();
}

uint64_t sub_24026FB80()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24026FBEC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24026FC20()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24026FC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_24026FC7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = sub_240291A50(v0[3], 0, v0[4], v0[5]);
  v0[7] = v1;
  v2 = v1;
  v3 = v0[4];
  v4 = swift_task_alloc();
  v0[8] = v4;
  v5 = *(_OWORD *)(v0 + 5);
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 40) = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v6;
  swift_getAssociatedTypeWitness();
  *v6 = v0;
  v6[1] = sub_24026FD94;
  return sub_2402BDDA4();
}

uint64_t sub_24026FD94()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

void sub_24026FE00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  _xpc_connection_s *v17;
  unint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  xpc_object_t v24;
  _QWORD aBlock[6];

  v22 = a7;
  v23 = a8;
  v21 = a6;
  v24 = a3;
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEEB8);
  v12 = sub_2402BD894();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v21 - v14;
  v17 = *(_xpc_connection_s **)(a2 + 16);
  v16 = *(NSObject **)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v21 - v14, a1, v12);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = (char *)swift_allocObject();
  *((_QWORD *)v19 + 2) = a4;
  *((_QWORD *)v19 + 3) = a5;
  *((_QWORD *)v19 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v18], v15, v12);
  aBlock[4] = v22;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24026CB38;
  aBlock[3] = v23;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_connection_send_message_with_reply(v17, v24, v16, v20);
  _Block_release(v20);
}

uint64_t sub_24026FF94(void *a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  _QWORD v11[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v4 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v11 - v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_2402705C4(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEEB8);
  sub_2402BD894();
  sub_2402BD888();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, AssociatedTypeWitness);
}

void *sub_240270128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *result;
  xpc_object_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  result = (void *)sub_240291A50(a1, 0, a2, a3);
  if (!v4)
  {
    v6 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(v3 + 16), result);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_2402705C4(v6, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_unknownObjectRelease();
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void *sub_240270204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *result;

  result = (void *)sub_240291A50(a1, 0, a2, a3);
  if (!v4)
  {
    xpc_connection_send_message(*(xpc_connection_t *)(v3 + 16), result);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_240270250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v6 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  v13 = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a2;
  v14[5] = a3;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  sub_24025A2DC((uint64_t)&unk_256FE0050, (uint64_t)v14, v11, v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_24027034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v6 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  v13 = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a2;
  v14[5] = a3;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a4;
  v15[3] = a5;
  v15[4] = &unk_256FDFDE8;
  v15[5] = v14;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0x8000000000000000;
  sub_24025A2DC((uint64_t)&unk_256FE0050, (uint64_t)v15, v11, v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_240270470(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v3;

  a3(a2);
  return sub_240272994(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_2402704C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v6 = v5;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  v13 = v12;
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = a2;
  v14[5] = a3;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_24025A2E8((uint64_t)sub_240272978, (uint64_t)v14, v11, v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_2402705C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  v7 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v7)
  {
    v9 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v9 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v20 = sub_2402BD4E0();
        __swift_project_value_buffer(v20, (uint64_t)qword_2543529A0);
        v21 = sub_2402BD4C8();
        v22 = sub_2402BD96C();
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc();
          v24 = swift_slowAlloc();
          v30[0] = v24;
          *(_DWORD *)v23 = 136315138;
          v25 = sub_2402BD6CC();
          v32 = sub_24023D440(v25, v26, v30);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v21, v22, "XPC Connection Invalid: %s", v23, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v24, -1, -1);
          MEMORY[0x242682188](v23, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v27 = 0;
    }
    else
    {
      v10 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v10 == a1)
        v12 = 1;
      else
        v12 = 3;
      *v11 = v12;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v7)
  {
    sub_2402714A8();
    swift_allocError();
    *v8 = 3;
    return swift_willThrow();
  }
  v13 = MEMORY[0x242682320](a1);
  if (v13 != sub_2402BD504() || !xpc_dictionary_get_BOOL(a1, "messageError"))
    return sub_2402921E8(a1, a2, a3);
  result = sub_240291CF0(a1);
  if (!v3)
  {
    v15 = v31;
    v16 = __swift_project_boxed_opaque_existential_1(v30, v31);
    v17 = *(_QWORD *)(v15 - 8);
    MEMORY[0x24BDAC7A8](v16);
    v19 = (char *)&v30[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v19);
    if (sub_2402BDD80())
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v15);
    }
    else
    {
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v19, v15);
    }
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }
  return result;
}

uint64_t XPCConnection.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24025A2CC(*(_QWORD *)(v0 + 48));
  sub_24025A2CC(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t XPCConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24025A2CC(*(_QWORD *)(v0 + 48));
  sub_24025A2CC(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance();
}

unint64_t XPCConnection.description.getter()
{
  uint64_t v0;

  xpc_connection_get_pid(*(xpc_connection_t *)(v0 + 16));
  sub_2402BDA98();
  swift_bridgeObjectRelease();
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return 0xD000000000000013;
}

unint64_t sub_240270AE4()
{
  return XPCConnection.description.getter();
}

uint64_t XPCConnection.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;

  xpc_connection_get_pid(*(xpc_connection_t *)(v0 + 16));
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain_n();
  v2 = sub_240271198(v1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_2402BAB04);
  swift_bridgeObjectRelease();
  v4 = v2;
  sub_2402713A0((uint64_t *)&v4);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  sub_2402BD5F4();
  swift_release();
  v4 = 0;
  v5 = 0xE000000000000000;
  sub_2402BDA98();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)0xD000000000000013;
  v5 = 0x80000002402C9C00;
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return (uint64_t)v4;
}

uint64_t sub_240270D00()
{
  return XPCConnection.debugDescription.getter();
}

uint64_t sub_240270D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  v5[8] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[9] = swift_task_alloc();
  v5[10] = *(_QWORD *)(a4 - 8);
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_240270DC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD);

  sub_2402921E8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  v3 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = sub_240270E78;
  return v3(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 88));
}

uint64_t sub_240270E78()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_240270EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char **v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(const char ***)(v0 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v10 = sub_240291A50(v4, v8, v6, AssociatedConformanceWitness);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v7);
  swift_task_dealloc();
  v11 = swift_task_dealloc();
  if (!v1)
    v11 = v10;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_240270FB8()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 40));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_240271008(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v7 = *(_QWORD *)(a4 - 8);
  v8 = (void *)MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_2402921E8(v8, v11, v12);
  if (!v4)
  {
    a2(v10);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a4);
  }
  return result;
}

_QWORD *sub_2402710A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524E0);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_2402BA908((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_240248E88();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_24027118C(uint64_t a1)
{
  return sub_240271198(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_2402BAB04);
}

_QWORD *sub_240271198(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524E0);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 17;
  v5[2] = v2;
  v5[3] = 2 * (v7 >> 4);
  v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_240248E88();
  if (v8 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

void sub_240271280(uint64_t a1)
{
  uint64_t v1;

  sub_24026FE00(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_25108FC80, (uint64_t)sub_240272A68, (uint64_t)&block_descriptor_69);
}

void sub_2402712B4(uint64_t a1)
{
  uint64_t v1;

  sub_24026FE00(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_25108FC30, (uint64_t)sub_240272A68, (uint64_t)&block_descriptor_63);
}

uint64_t sub_2402712E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24027130C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v6)(uint64_t);
  _QWORD *v7;

  v6 = *(void (**)(uint64_t))(v2 + 32);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_240272D3C;
  return ((uint64_t (*)(uint64_t, uint64_t, void (*)(uint64_t)))((char *)&dword_256FDFDE0
                                                                                 + dword_256FDFDE0))(a1, a2, v6);
}

uint64_t sub_2402713A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_24029C7A0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_240271D48(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_24027140C()
{
  unint64_t result;

  result = qword_256FDFDF8;
  if (!qword_256FDFDF8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCConnectionError, &type metadata for XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_256FDFDF8);
  }
  return result;
}

uint64_t sub_240271450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240271464, (uint64_t (*)(void))sub_2402714A8);
}

unint64_t sub_240271464()
{
  unint64_t result;

  result = qword_256FDFE00;
  if (!qword_256FDFE00)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCConnectionError, &type metadata for XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_256FDFE00);
  }
  return result;
}

unint64_t sub_2402714A8()
{
  unint64_t result;

  result = qword_256FE0310;
  if (!qword_256FE0310)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCConnectionError, &type metadata for XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_256FE0310);
  }
  return result;
}

uint64_t sub_2402714EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240271500, (uint64_t (*)(void))sub_240271544);
}

unint64_t sub_240271500()
{
  unint64_t result;

  result = qword_256FDFE50;
  if (!qword_256FDFE50)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCConnectionError, &type metadata for XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_256FDFE50);
  }
  return result;
}

unint64_t sub_240271544()
{
  unint64_t result;

  result = qword_256FDFE58;
  if (!qword_256FDFE58)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCConnectionError, &type metadata for XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_256FDFE58);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionError()
{
  return &type metadata for XPCConnectionError;
}

uint64_t method lookup function for XPCConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInterrupted.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInterrupted.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInterrupted.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInvalidated.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInvalidated.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of XPCConnection.onConnectionInvalidated.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of XPCConnection.invalidate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of XPCConnection.handledTypes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of XPCConnection.send<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 248)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 248));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_2402716A8;
  return v12(a1, a2, a3, a4);
}

uint64_t sub_2402716A8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of XPCConnection.sendAsync<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 256)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 256));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_240272D3C;
  return v12(a1, a2, a3, a4);
}

uint64_t dispatch thunk of XPCConnection.send<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of XPCConnection.handle<A>(_:handler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

ValueMetadata *type metadata accessor for XPCMessageHandlerWithoutReply()
{
  return &type metadata for XPCMessageHandlerWithoutReply;
}

_QWORD *initializeBufferWithCopyOfBuffer for XPCMessageHandlerWithReply(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for XPCMessageHandlerWithReply()
{
  return swift_release();
}

_QWORD *_s20LighthouseBackground26XPCMessageHandlerWithReplyVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for XPCMessageHandlerWithReply(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t _s20LighthouseBackground26XPCMessageHandlerWithReplyVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_2402718D8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCMessageHandlerWithReply()
{
  return &type metadata for XPCMessageHandlerWithReply;
}

uint64_t _s20LighthouseBackground18XPCConnectionErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_240271970 + 4 * byte_2402C3EE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2402719A4 + 4 * byte_2402C3EE0[v4]))();
}

uint64_t sub_2402719A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402719AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402719B4);
  return result;
}

uint64_t sub_2402719C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402719C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2402719CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402719D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionError.CodingKeys()
{
  return &type metadata for XPCConnectionError.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionError.ConnectionInvalidCodingKeys()
{
  return &type metadata for XPCConnectionError.ConnectionInvalidCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionError.ConnectionInterruptedCodingKeys()
{
  return &type metadata for XPCConnectionError.ConnectionInterruptedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionError.UnhandledMessageCodingKeys()
{
  return &type metadata for XPCConnectionError.UnhandledMessageCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionError.UnknownCodingKeys()
{
  return &type metadata for XPCConnectionError.UnknownCodingKeys;
}

unint64_t sub_240271A34()
{
  unint64_t result;

  result = qword_256FDFFE8;
  if (!qword_256FDFFE8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C43C4, &type metadata for XPCConnectionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFFE8);
  }
  return result;
}

unint64_t sub_240271A7C()
{
  unint64_t result;

  result = qword_256FDFFF0;
  if (!qword_256FDFFF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C42E4, &type metadata for XPCConnectionError.ConnectionInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFFF0);
  }
  return result;
}

unint64_t sub_240271AC4()
{
  unint64_t result;

  result = qword_256FDFFF8;
  if (!qword_256FDFFF8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C430C, &type metadata for XPCConnectionError.ConnectionInvalidCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FDFFF8);
  }
  return result;
}

unint64_t sub_240271B0C()
{
  unint64_t result;

  result = qword_256FE0000;
  if (!qword_256FE0000)
  {
    result = MEMORY[0x2426820F8](&unk_2402C4294, &type metadata for XPCConnectionError.ConnectionInterruptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0000);
  }
  return result;
}

unint64_t sub_240271B54()
{
  unint64_t result;

  result = qword_256FE0008;
  if (!qword_256FE0008)
  {
    result = MEMORY[0x2426820F8](&unk_2402C42BC, &type metadata for XPCConnectionError.ConnectionInterruptedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0008);
  }
  return result;
}

unint64_t sub_240271B9C()
{
  unint64_t result;

  result = qword_256FE0010;
  if (!qword_256FE0010)
  {
    result = MEMORY[0x2426820F8](&unk_2402C4244, &type metadata for XPCConnectionError.UnhandledMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0010);
  }
  return result;
}

unint64_t sub_240271BE4()
{
  unint64_t result;

  result = qword_256FE0018;
  if (!qword_256FE0018)
  {
    result = MEMORY[0x2426820F8](&unk_2402C426C, &type metadata for XPCConnectionError.UnhandledMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0018);
  }
  return result;
}

unint64_t sub_240271C2C()
{
  unint64_t result;

  result = qword_256FE0020;
  if (!qword_256FE0020)
  {
    result = MEMORY[0x2426820F8](&unk_2402C41F4, &type metadata for XPCConnectionError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0020);
  }
  return result;
}

unint64_t sub_240271C74()
{
  unint64_t result;

  result = qword_256FE0028;
  if (!qword_256FE0028)
  {
    result = MEMORY[0x2426820F8](&unk_2402C421C, &type metadata for XPCConnectionError.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0028);
  }
  return result;
}

unint64_t sub_240271CBC()
{
  unint64_t result;

  result = qword_256FE0030;
  if (!qword_256FE0030)
  {
    result = MEMORY[0x2426820F8](&unk_2402C4334, &type metadata for XPCConnectionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0030);
  }
  return result;
}

unint64_t sub_240271D04()
{
  unint64_t result;

  result = qword_256FE0038;
  if (!qword_256FE0038)
  {
    result = MEMORY[0x2426820F8](&unk_2402C435C, &type metadata for XPCConnectionError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0038);
  }
  return result;
}

uint64_t sub_240271D48(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_2402BDD5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_240272430(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_2402724FC((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_24029C78C((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_2402BD7F8();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_2402BDD8C();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_2402BDD8C()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_24029C5EC(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_24029C5EC((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_2402724FC((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2402BDD8C() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_2402BDB40();
  __break(1u);
  return result;
}

uint64_t sub_240272430(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_2402BDD8C(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2402724FC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_2402BDD8C() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_2402BDD8C() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_24029C6E4((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_240272794(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000002402C9D00 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402C9D20 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9D40 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_240272934()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_240272958()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_240272978(uint64_t a1)
{
  uint64_t v1;

  return sub_240271008(a1, *(void (**)(char *))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

uint64_t sub_240272994(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_2402729A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_240272A14;
  return sub_240270D20(a1, v7, v6, v4, v5);
}

uint64_t sub_240272A14(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t objectdestroy_59Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEEB8);
  v1 = sub_2402BD894();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_240272B20(void *a1)
{
  swift_getAssociatedTypeWitness();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FDEEB8);
  sub_2402BD894();
  return sub_24026FF94(a1);
}

uint64_t sub_240272BC0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_240272BFC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;
  uint64_t (*v7)(_QWORD);

  v2 = *(int **)(v0 + 32);
  v3 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_240272D3C;
  *(_OWORD *)(v3 + 160) = v6;
  v7 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 176) = v4;
  *v4 = v3;
  v4[1] = sub_24026E520;
  return v7(v6);
}

uint64_t sub_240272C98(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_2543528B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_240272CD8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_240272CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_240272D94(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (**v10)(char *, _QWORD, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char **v17;
  uint64_t result;
  uint64_t v19;
  const char *const *reply;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  v23[0] = a2;
  v4 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2402BD2AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2402BD2B8();
  v10 = *(void (***)(char *, _QWORD, uint64_t))(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  v10[13](v12, *MEMORY[0x24BDCB358], v9);
  sub_2402BD2D0();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCB320], v5);
  sub_2402BD2C4();
  sub_240271544();
  v13 = sub_2402BD2DC();
  if (v2)
  {
    swift_release();
    return (uint64_t)v10;
  }
  v15 = v13;
  v16 = v14;
  v17 = (const char **)v23[0];
  sub_2402BD660();
  result = sub_2402BD654();
  if (v19)
  {
    reply = v17;
    if (v17)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v17);
      v10 = (void (**)(char *, _QWORD, uint64_t))reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v10, "messageFormat", 1);
        v23[1] = &type metadata for XPCConnectionError;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0338);
        sub_2402BD684();
        v21 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v10, "messageType", (const char *)(v21 + 32));
        swift_release();
        v22 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v10, "messageBody", (const char *)(v22 + 32));
        swift_release();
        sub_24027F72C(v15, v16);
        swift_release();
        return (uint64_t)v10;
      }
      __break(1u);
    }
    v10 = (void (**)(char *, _QWORD, uint64_t))xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_240273030(__int128 *a1, const char **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (**v10)(char *, _QWORD, uint64_t);
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char **v18;
  uint64_t result;
  uint64_t v20;
  const char *const *reply;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char **v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  ValueMetadata *v29;

  v25 = a2;
  v4 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2402BD2AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2402BD2B8();
  v10 = *(void (***)(char *, _QWORD, uint64_t))(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[1];
  v26 = *a1;
  v27 = v13;
  v28 = a1[2];
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  v10[13](v12, *MEMORY[0x24BDCB358], v9);
  sub_2402BD2D0();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCB320], v5);
  sub_2402BD2C4();
  sub_240265628();
  v14 = sub_2402BD2DC();
  if (v2)
  {
    swift_release();
    return (uint64_t)v10;
  }
  v16 = v14;
  v17 = v15;
  v18 = v25;
  sub_2402BD660();
  result = sub_2402BD654();
  if (v20)
  {
    reply = v18;
    if (v18)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v18);
      v10 = (void (**)(char *, _QWORD, uint64_t))reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v10, "messageFormat", 1);
        v29 = &type metadata for SetHostConfigurationRequest;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256FE04C8);
        sub_2402BD684();
        v22 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v10, "messageType", (const char *)(v22 + 32));
        swift_release();
        v23 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v10, "messageBody", (const char *)(v23 + 32));
        swift_release();
        sub_24027F72C(v16, v17);
        swift_release();
        return (uint64_t)v10;
      }
      __break(1u);
    }
    v10 = (void (**)(char *, _QWORD, uint64_t))xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_2402732D8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(char *, _QWORD, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char **v19;
  uint64_t result;
  uint64_t v21;
  const char *const *reply;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  char v26;
  ValueMetadata *v27;

  v25[0] = a3;
  v5 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_2402BD2AC();
  v7 = *(void (***)(char *, _QWORD, uint64_t))(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2402BD2B8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[2] = a1;
  v26 = a2 & 1;
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDCB358], v10);
  sub_2402BD2D0();
  v7[13](v9, *MEMORY[0x24BDCB320], v6);
  sub_2402BD2C4();
  sub_2402647E4();
  v14 = v25[1];
  v15 = sub_2402BD2DC();
  if (v14)
  {
    swift_release();
    return (uint64_t)v7;
  }
  v17 = v15;
  v18 = v16;
  v19 = (const char **)v25[0];
  sub_2402BD660();
  result = sub_2402BD654();
  if (v21)
  {
    reply = v19;
    if (v19)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v19);
      v7 = (void (**)(char *, _QWORD, uint64_t))reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v7, "messageFormat", 1);
        v27 = &type metadata for ListTasksRequest;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0468);
        sub_2402BD684();
        v23 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v7, "messageType", (const char *)(v23 + 32));
        swift_release();
        v24 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v7, "messageBody", (const char *)(v24 + 32));
        swift_release();
        sub_24027F72C(v17, v18);
        swift_release();
        return (uint64_t)v7;
      }
      __break(1u);
    }
    v7 = (void (**)(char *, _QWORD, uint64_t))xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_24027357C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(char *, _QWORD, uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char **v17;
  uint64_t result;
  uint64_t v19;
  const char *const *reply;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v23[0] = a2;
  v2 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_2402BD2AC();
  v4 = *(void (***)(char *, _QWORD, uint64_t))(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2402BD2B8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDCB358], v7);
  sub_2402BD2D0();
  v4[13](v6, *MEMORY[0x24BDCB320], v3);
  sub_2402BD2C4();
  v11 = type metadata accessor for AddTaskRequest(0);
  sub_24027FA9C(&qword_256FE0420, 255, type metadata accessor for AddTaskRequest, (uint64_t)&protocol conformance descriptor for AddTaskRequest);
  v12 = v23[1];
  v13 = sub_2402BD2DC();
  if (v12)
  {
    swift_release();
    return (uint64_t)v4;
  }
  v15 = v13;
  v16 = v14;
  v17 = (const char **)v23[0];
  sub_2402BD660();
  result = sub_2402BD654();
  if (v19)
  {
    reply = v17;
    if (v17)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v17);
      v4 = (void (**)(char *, _QWORD, uint64_t))reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v4, "messageFormat", 1);
        v23[3] = v11;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0428);
        sub_2402BD684();
        v21 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v4, "messageType", (const char *)(v21 + 32));
        swift_release();
        v22 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v4, "messageBody", (const char *)(v22 + 32));
        swift_release();
        sub_24027F72C(v15, v16);
        swift_release();
        return (uint64_t)v4;
      }
      __break(1u);
    }
    v4 = (void (**)(char *, _QWORD, uint64_t))xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_240273830(char a1, const char **a2, void (*a3)(uint64_t), uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, _QWORD, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  const char **v25;
  uint64_t result;
  uint64_t v27;
  const char *const *reply;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char **v32;
  uint64_t *v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;

  v33 = a5;
  v34 = a3;
  v32 = a2;
  v7 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_2402BD2AC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_2402BD2B8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BDCB358], v12);
  sub_2402BD2D0();
  v16 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  v17 = a4;
  v16(v11, *MEMORY[0x24BDCB320], v8);
  v18 = sub_2402BD2C4();
  v34(v18);
  v19 = v35;
  v20 = sub_2402BD2DC();
  if (v19)
  {
    swift_release();
    return (uint64_t)v15;
  }
  v22 = v20;
  v23 = v21;
  v25 = v32;
  v24 = v33;
  sub_2402BD660();
  result = sub_2402BD654();
  if (v27)
  {
    reply = v25;
    if (v25)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v25);
      v15 = (char *)reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v15, "messageFormat", 1);
        v36 = v17;
        __swift_instantiateConcreteTypeFromMangledName(v24);
        sub_2402BD684();
        v29 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v15, "messageType", (const char *)(v29 + 32));
        swift_release();
        v30 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v15, "messageBody", (const char *)(v30 + 32));
        swift_release();
        sub_24027F72C(v22, v23);
        swift_release();
        return (uint64_t)v15;
      }
      __break(1u);
    }
    v15 = (char *)xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_240273AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (**v7)(char *, _QWORD, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char **v19;
  uint64_t result;
  uint64_t v21;
  const char *const *reply;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];

  v25[0] = a3;
  v5 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_2402BD2AC();
  v7 = *(void (***)(char *, _QWORD, uint64_t))(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_2402BD2B8();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[2] = a1;
  v25[3] = a2;
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BDCB358], v10);
  sub_2402BD2D0();
  v7[13](v9, *MEMORY[0x24BDCB320], v6);
  sub_2402BD2C4();
  sub_2402651A8();
  v14 = v25[1];
  v15 = sub_2402BD2DC();
  if (v14)
  {
    swift_release();
    return (uint64_t)v7;
  }
  v17 = v15;
  v18 = v16;
  v19 = (const char **)v25[0];
  sub_2402BD660();
  result = sub_2402BD654();
  if (v21)
  {
    reply = v19;
    if (v19)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v19);
      v7 = (void (**)(char *, _QWORD, uint64_t))reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v7, "messageFormat", 1);
        v25[5] = &type metadata for ListExtensionsRequest;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0388);
        sub_2402BD684();
        v23 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v7, "messageType", (const char *)(v23 + 32));
        swift_release();
        v24 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v7, "messageBody", (const char *)(v24 + 32));
        swift_release();
        sub_24027F72C(v17, v18);
        swift_release();
        return (uint64_t)v7;
      }
      __break(1u);
    }
    v7 = (void (**)(char *, _QWORD, uint64_t))xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_240273D6C(uint64_t a1, uint64_t a2, const char **a3, void (*a4)(uint64_t), uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  const char **v25;
  uint64_t result;
  uint64_t v27;
  const char *const *reply;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char **v32;
  uint64_t *v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a6;
  v34 = a5;
  v35 = a4;
  v32 = a3;
  v8 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_2402BD2AC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)sub_2402BD2B8();
  v14 = *(v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a1;
  v38 = a2;
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, _QWORD *))(v14 + 104))(v16, *MEMORY[0x24BDCB358], v13);
  v17 = v34;
  sub_2402BD2D0();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x24BDCB320], v9);
  v18 = sub_2402BD2C4();
  v35(v18);
  v19 = v36;
  v20 = sub_2402BD2DC();
  if (v19)
  {
    swift_release();
    return (uint64_t)v13;
  }
  v22 = v20;
  v23 = v21;
  v25 = v32;
  v24 = v33;
  sub_2402BD660();
  result = sub_2402BD654();
  if (v27)
  {
    reply = v25;
    if (v25)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v25);
      v13 = reply;
      if (reply)
      {
LABEL_8:
        xpc_dictionary_set_int64(v13, "messageFormat", 1);
        v39 = v17;
        __swift_instantiateConcreteTypeFromMangledName(v24);
        sub_2402BD684();
        v29 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v13, "messageType", (const char *)(v29 + 32));
        swift_release();
        v30 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v13, "messageBody", (const char *)(v30 + 32));
        swift_release();
        sub_24027F72C(v22, v23);
        swift_release();
        return (uint64_t)v13;
      }
      __break(1u);
    }
    v13 = xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_24027400C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _xpc_connection_s *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  xpc_object_t v19;
  _QWORD aBlock[6];

  v18 = a7;
  v19 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v14 = *(_xpc_connection_s **)(a2 + 16);
  v13 = *(NSObject **)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = a6;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24026CB38;
  aBlock[3] = v18;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  xpc_connection_send_message_with_reply(v14, v19, v13, v17);
  _Block_release(v17);
}

uint64_t sub_240274150(void *a1)
{
  uint64_t v2;

  sub_240274644(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE04D0);
  return sub_2402BD888();
}

uint64_t sub_2402741E4(void *a1)
{
  uint64_t v2;

  sub_2402749E4(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE04A8);
  return sub_2402BD888();
}

uint64_t sub_240274274(void *a1)
{
  uint64_t TaskResponse;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];

  TaskResponse = type metadata accessor for GetTaskResponse(0);
  v3 = MEMORY[0x24BDAC7A8](TaskResponse);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v9 - v6;
  sub_2402754CC(a1);
  sub_240238BF0((uint64_t)v7, (uint64_t)v5, type metadata accessor for GetTaskResponse);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0430);
  sub_2402BD888();
  return sub_240238C34((uint64_t)v7, type metadata accessor for GetTaskResponse);
}

uint64_t sub_240274378(void *a1)
{
  uint64_t v2;

  sub_240275850(a1, &v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0408);
  return sub_2402BD888();
}

uint64_t sub_240274408(void *a1)
{
  uint64_t v2;

  sub_240274D84(a1, &v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE03E0);
  return sub_2402BD888();
}

uint64_t sub_240274490(void *a1)
{
  uint64_t v2;

  sub_240275BF0(a1, &v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0390);
  return sub_2402BD888();
}

uint64_t sub_240274518(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void), uint64_t *a7)
{
  uint64_t v9;

  sub_24027511C(a1, a4, a5, a6, &v9);
  __swift_instantiateConcreteTypeFromMangledName(a7);
  return sub_2402BD888();
}

uint64_t sub_2402745A8(void *a1)
{
  __int128 v2;

  sub_240275F88(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0318);
  return sub_2402BD888();
}

uint64_t sub_240274644@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29[2];
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v15 = sub_2402BD4E0();
        __swift_project_value_buffer(v15, (uint64_t)qword_2543529A0);
        v16 = sub_2402BD4C8();
        v17 = sub_2402BD96C();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc();
          v19 = swift_slowAlloc();
          v29[0] = v19;
          *(_DWORD *)v18 = 136315138;
          v20 = sub_2402BD6CC();
          v32 = sub_24023D440(v20, v21, v29);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v16, v17, "XPC Connection Invalid: %s", v18, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v19, -1, -1);
          MEMORY[0x242682188](v18, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v22 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v23 = *((_QWORD *)&v30 + 1);
      v24 = __swift_project_boxed_opaque_existential_1(v29, *((uint64_t *)&v30 + 1));
      v25 = *(_QWORD *)(v23 - 8);
      MEMORY[0x24BDAC7A8](v24);
      v27 = (char *)v29 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v25 + 16))(v27);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v23);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v28, v27, v23);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
  }
  else
  {
    result = sub_240276AE0(a1);
    if (!v2)
    {
      v13 = v29[1];
      *(_QWORD *)a2 = v29[0];
      *(_QWORD *)(a2 + 8) = v13;
      v14 = v31;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a2 + 32) = v14;
    }
  }
  return result;
}

uint64_t sub_2402749E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v13 = sub_2402BD4E0();
        __swift_project_value_buffer(v13, (uint64_t)qword_2543529A0);
        v14 = sub_2402BD4C8();
        v15 = sub_2402BD96C();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc();
          v17 = swift_slowAlloc();
          v28 = v17;
          *(_DWORD *)v16 = 136315138;
          v18 = sub_2402BD6CC();
          v31 = sub_24023D440(v18, v19, &v28);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v14, v15, "XPC Connection Invalid: %s", v16, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v17, -1, -1);
          MEMORY[0x242682188](v16, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v20 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v21 = v30;
      v22 = __swift_project_boxed_opaque_existential_1(&v28, v30);
      v23 = *(_QWORD *)(v21 - 8);
      MEMORY[0x24BDAC7A8](v22);
      v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v23 + 16))(v25);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v25, v21);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    }
  }
  else
  {
    result = sub_240276EB8(a1);
    if (!v2)
    {
      *(_BYTE *)a2 = v28;
      *(_OWORD *)(a2 + 8) = v29;
    }
  }
  return result;
}

uint64_t sub_240274D84@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v13 = sub_2402BD4E0();
        __swift_project_value_buffer(v13, (uint64_t)qword_2543529A0);
        v14 = sub_2402BD4C8();
        v15 = sub_2402BD96C();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc();
          v17 = swift_slowAlloc();
          v28[0] = v17;
          *(_DWORD *)v16 = 136315138;
          v18 = sub_2402BD6CC();
          v30 = sub_24023D440(v18, v19, v28);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v14, v15, "XPC Connection Invalid: %s", v16, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v17, -1, -1);
          MEMORY[0x242682188](v16, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v20 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v21 = v29;
      v22 = __swift_project_boxed_opaque_existential_1(v28, v29);
      v23 = *(_QWORD *)(v21 - 8);
      MEMORY[0x24BDAC7A8](v22);
      v25 = (char *)&v28[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v23 + 16))(v25);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v25, v21);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
  }
  else
  {
    result = sub_240277290(a1);
    if (!v2)
      *a2 = v28[0];
  }
  return result;
}

uint64_t sub_24027511C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(void)@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[3];
  uint64_t v35;

  v11 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v11)
  {
    v13 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v13 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v19 = sub_2402BD4E0();
        __swift_project_value_buffer(v19, (uint64_t)qword_2543529A0);
        v20 = sub_2402BD4C8();
        v21 = sub_2402BD96C();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          v23 = swift_slowAlloc();
          v34[0] = v23;
          *(_DWORD *)v22 = 136315138;
          v24 = sub_2402BD6CC();
          v33 = sub_24023D440(v24, v25, v34);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v20, v21, "XPC Connection Invalid: %s", v22, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v23, -1, -1);
          MEMORY[0x242682188](v22, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v26 = 0;
    }
    else
    {
      v14 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v14 == a1)
        v16 = 1;
      else
        v16 = 3;
      *v15 = v16;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v11)
  {
    sub_2402714A8();
    swift_allocError();
    *v12 = 3;
    return swift_willThrow();
  }
  v17 = MEMORY[0x242682320](a1);
  if (v17 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v5)
    {
      v27 = v35;
      v28 = __swift_project_boxed_opaque_existential_1(v34, v35);
      v29 = *(_QWORD *)(v27 - 8);
      MEMORY[0x24BDAC7A8](v28);
      v31 = (char *)&v34[-1] - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v29 + 16))(v31);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v27);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v32, v31, v27);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    }
  }
  else
  {
    result = sub_240278210(a1, a2, a3, a4, (uint64_t)v34);
    if (!v5)
      *a5 = v34[0];
  }
  return result;
}

uint64_t sub_2402754CC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  v3 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v3)
  {
    v5 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v5 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v16 = sub_2402BD4E0();
        __swift_project_value_buffer(v16, (uint64_t)qword_2543529A0);
        v17 = sub_2402BD4C8();
        v18 = sub_2402BD96C();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          v20 = swift_slowAlloc();
          v26[0] = v20;
          *(_DWORD *)v19 = 136315138;
          v21 = sub_2402BD6CC();
          v28 = sub_24023D440(v21, v22, v26);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v17, v18, "XPC Connection Invalid: %s", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v20, -1, -1);
          MEMORY[0x242682188](v19, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v23 = 0;
    }
    else
    {
      v6 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v6 == a1)
        v8 = 1;
      else
        v8 = 3;
      *v7 = v8;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v3)
  {
    sub_2402714A8();
    swift_allocError();
    *v4 = 3;
    return swift_willThrow();
  }
  v9 = MEMORY[0x242682320](a1);
  if (v9 != sub_2402BD504() || !xpc_dictionary_get_BOOL(a1, "messageError"))
    return sub_240277668(a1);
  result = sub_240291CF0(a1);
  if (!v1)
  {
    v11 = v27;
    v12 = __swift_project_boxed_opaque_existential_1(v26, v27);
    v13 = *(_QWORD *)(v11 - 8);
    MEMORY[0x24BDAC7A8](v12);
    v15 = (char *)&v26[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v13 + 16))(v15);
    if (sub_2402BDD80())
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v11);
    }
    else
    {
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v24, v15, v11);
    }
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  return result;
}

uint64_t sub_240275850@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v14 = sub_2402BD4E0();
        __swift_project_value_buffer(v14, (uint64_t)qword_2543529A0);
        v15 = sub_2402BD4C8();
        v16 = sub_2402BD96C();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc();
          v18 = swift_slowAlloc();
          v29[0] = v18;
          *(_DWORD *)v17 = 136315138;
          v19 = sub_2402BD6CC();
          v31 = sub_24023D440(v19, v20, v29);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v15, v16, "XPC Connection Invalid: %s", v17, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v18, -1, -1);
          MEMORY[0x242682188](v17, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v21 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v22 = v30;
      v23 = __swift_project_boxed_opaque_existential_1(v29, v30);
      v24 = *(_QWORD *)(v22 - 8);
      MEMORY[0x24BDAC7A8](v23);
      v26 = (char *)&v29[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v26);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v22);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v27, v26, v22);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
  }
  else
  {
    result = sub_240277A60(a1);
    if (!v2)
    {
      v13 = BYTE1(v29[0]);
      *a2 = v29[0];
      a2[1] = v13;
    }
  }
  return result;
}

uint64_t sub_240275BF0@<X0>(void *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v13 = sub_2402BD4E0();
        __swift_project_value_buffer(v13, (uint64_t)qword_2543529A0);
        v14 = sub_2402BD4C8();
        v15 = sub_2402BD96C();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = (uint8_t *)swift_slowAlloc();
          v17 = swift_slowAlloc();
          v28[0] = v17;
          *(_DWORD *)v16 = 136315138;
          v18 = sub_2402BD6CC();
          v30 = sub_24023D440(v18, v19, v28);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v14, v15, "XPC Connection Invalid: %s", v16, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v17, -1, -1);
          MEMORY[0x242682188](v16, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v20 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v21 = v29;
      v22 = __swift_project_boxed_opaque_existential_1(v28, v29);
      v23 = *(_QWORD *)(v21 - 8);
      MEMORY[0x24BDAC7A8](v22);
      v25 = (char *)&v28[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v23 + 16))(v25);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v26, v25, v21);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
  }
  else
  {
    result = sub_240277E38(a1);
    if (!v2)
      *a2 = v28[0];
  }
  return result;
}

uint64_t sub_240275F88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = MEMORY[0x242682320]();
  if (sub_2402BD4EC() == v5)
  {
    v7 = sub_2402BD510();
    swift_unknownObjectRelease();
    if ((void *)v7 == a1)
    {
      if (xpc_connection_copy_invalidation_reason())
      {
        if (qword_2543528A0 != -1)
          swift_once();
        v17 = sub_2402BD4E0();
        __swift_project_value_buffer(v17, (uint64_t)qword_2543529A0);
        v18 = sub_2402BD4C8();
        v19 = sub_2402BD96C();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc();
          v21 = swift_slowAlloc();
          *(_QWORD *)&v31 = v21;
          *(_DWORD *)v20 = 136315138;
          v22 = sub_2402BD6CC();
          v36 = sub_24023D440(v22, v23, (uint64_t *)&v31);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24022D000, v18, v19, "XPC Connection Invalid: %s", v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x242682188](v21, -1, -1);
          MEMORY[0x242682188](v20, -1, -1);
        }

      }
      sub_2402714A8();
      swift_allocError();
      *v24 = 0;
    }
    else
    {
      v8 = sub_2402BD51C();
      swift_unknownObjectRelease();
      sub_2402714A8();
      swift_allocError();
      if ((void *)v8 == a1)
        v10 = 1;
      else
        v10 = 3;
      *v9 = v10;
    }
    return swift_willThrow();
  }
  if (sub_2402BD504() != v5)
  {
    sub_2402714A8();
    swift_allocError();
    *v6 = 3;
    return swift_willThrow();
  }
  v11 = MEMORY[0x242682320](a1);
  if (v11 == sub_2402BD504() && xpc_dictionary_get_BOOL(a1, "messageError"))
  {
    result = sub_240291CF0(a1);
    if (!v2)
    {
      v25 = *((_QWORD *)&v32 + 1);
      v26 = __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v32 + 1));
      v27 = *(_QWORD *)(v25 - 8);
      MEMORY[0x24BDAC7A8](v26);
      v29 = (char *)&v31 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v27 + 16))(v29);
      if (sub_2402BDD80())
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v25);
      }
      else
      {
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30, v29, v25);
      }
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    }
  }
  else
  {
    result = sub_2402785EC(a1);
    if (!v2)
    {
      v13 = v32;
      v14 = v33;
      v15 = v34;
      v16 = v35;
      *(_OWORD *)a2 = v31;
      *(_OWORD *)(a2 + 16) = v13;
      *(_OWORD *)(a2 + 32) = v14;
      *(_QWORD *)(a2 + 48) = v15;
      *(_QWORD *)(a2 + 56) = v16;
    }
  }
  return result;
}

uint64_t sub_240276330(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for XPCRemoteError;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0328);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for XPCRemoteError;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_24027F6E8();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240276708(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for XPCConnectionError;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0338);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for XPCConnectionError;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240271500();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240276AE0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for GetHostConfigurationResponse;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE04D8);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for GetHostConfigurationResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240265500();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240276EB8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for SetHostConfigurationResponse;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE04B0);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for SetHostConfigurationResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240265680();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240277290(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for ResetTasksResponse;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE03E8);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for ResetTasksResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240264B28();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240277668(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TaskResponse;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v38 = v9;
    v39 = v7;
    v40 = v5;
    v41 = v3;
    v37 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    TaskResponse = type metadata accessor for GetTaskResponse(0);
    v42 = TaskResponse;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254352708);
    if (v18 == sub_2402BD684() && v20 == v22)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v42 = TaskResponse;
    if (v18 == sub_2402BD684() && v20 == v24)
    {
      swift_bridgeObjectRelease_n();
      v26 = v40;
      v25 = v41;
      v27 = v6;
      v29 = v38;
      v28 = v39;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v41 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v28 + 104))(v29, *MEMORY[0x24BDCB1D8], v27);
        sub_2402BD258();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v25 + 104))(v26, *MEMORY[0x24BDCB1B8], v37);
        sub_2402BD24C();
        v32 = sub_2402BBC80(v30, v41);
        v34 = v33;
        sub_24027FA9C(&qword_2543526F0, 255, type metadata accessor for GetTaskResponse, (uint64_t)&protocol conformance descriptor for GetTaskResponse);
        sub_2402BD264();
        sub_24027F72C(v32, v34);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v36 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v40;
    v25 = v41;
    v27 = v6;
    v29 = v38;
    v28 = v39;
    if ((v36 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240277A60(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for AddTaskResponse;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0410);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for AddTaskResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240264C68();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240277E38(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for GetOnDemandTaskRequestResponse;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0398);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for GetOnDemandTaskRequestResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240265080();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t sub_240278210@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51;

  v48 = a3;
  v49 = a4;
  v50 = a2;
  v7 = sub_2402BD234();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_2402BD240();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x242682320](a1);
  if (v15 == sub_2402BD504())
  {
    v43 = v14;
    v44 = v8;
    v46 = v12;
    v47 = v10;
    v45 = a5;
    v19 = v49;
    v18 = v50;
    v20 = MEMORY[0x242682320](a1);
    if (v20 != sub_2402BD504() || (v21 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v23 = 0;
      return swift_willThrow();
    }
    v22 = MEMORY[0x242682320](a1);
    if (v22 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v25 = sub_2402BD6CC();
    v27 = v26;
    v51 = v18;
    __swift_instantiateConcreteTypeFromMangledName(v48);
    if (v25 == sub_2402BD684() && v27 == v28)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v51 = v50;
    if (v25 == sub_2402BD684() && v27 == v30)
    {
      swift_bridgeObjectRelease_n();
      v31 = v7;
      v33 = v46;
      v32 = v47;
      v34 = v11;
LABEL_20:
      if (xpc_dictionary_get_string(v21, "messageBody"))
      {
        v36 = sub_2402BD6CC();
        v38 = v37;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v43, *MEMORY[0x24BDCB1D8], v34);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v32, *MEMORY[0x24BDCB1B8], v31);
        sub_2402BD24C();
        v39 = sub_2402BBC80(v36, v38);
        v41 = v40;
        v19();
        sub_2402BD264();
        sub_24027F72C(v39, v41);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v17 = 2;
      goto LABEL_3;
    }
    v35 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v7;
    v33 = v46;
    v32 = v47;
    v34 = v11;
    if ((v35 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v17 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v17 = 4;
LABEL_3:
  *v16 = v17;
  return swift_willThrow();
}

uint64_t sub_2402785EC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  ValueMetadata *v41;

  v2 = sub_2402BD234();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD240();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x242682320](a1);
  if (v10 == sub_2402BD504())
  {
    v37 = v9;
    v38 = v7;
    v39 = v5;
    v40 = v3;
    v36 = v2;
    v13 = MEMORY[0x242682320](a1);
    if (v13 != sub_2402BD504() || (v14 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") >= 3))
    {
      sub_24027F6A4();
      swift_allocError();
      *v16 = 0;
      return swift_willThrow();
    }
    v15 = MEMORY[0x242682320](a1);
    if (v15 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
      goto LABEL_7;
    v18 = sub_2402BD6CC();
    v20 = v19;
    v41 = &type metadata for GetExtensionResponse;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0348);
    if (v18 == sub_2402BD684() && v20 == v21)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    v41 = &type metadata for GetExtensionResponse;
    if (v18 == sub_2402BD684() && v20 == v23)
    {
      swift_bridgeObjectRelease_n();
      v25 = v39;
      v24 = v40;
      v26 = v6;
      v28 = v37;
      v27 = v38;
LABEL_20:
      if (xpc_dictionary_get_string(v14, "messageBody"))
      {
        v30 = sub_2402BD6CC();
        v32 = v31;
        sub_2402BD27C();
        swift_allocObject();
        sub_2402BD270();
        (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v28, *MEMORY[0x24BDCB1D8], v26);
        sub_2402BD258();
        (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BDCB1B8], v36);
        sub_2402BD24C();
        v33 = sub_2402BBC80(v30, v32);
        v35 = v34;
        sub_240265380();
        sub_2402BD264();
        sub_24027F72C(v33, v35);
        return swift_release();
      }
      sub_24027F6A4();
      swift_allocError();
      v12 = 2;
      goto LABEL_3;
    }
    v29 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v39;
    v24 = v40;
    v26 = v6;
    v28 = v37;
    v27 = v38;
    if ((v29 & 1) != 0)
      goto LABEL_20;
LABEL_7:
    sub_24027F6A4();
    swift_allocError();
    v12 = 1;
    goto LABEL_3;
  }
  sub_24027F6A4();
  swift_allocError();
  v12 = 4;
LABEL_3:
  *v11 = v12;
  return swift_willThrow();
}

uint64_t MLHostClient.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  MLHostClient.init()();
  return v0;
}

_QWORD *MLHostClient.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _xpc_connection_s *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  _xpc_connection_s *v20;
  uint64_t v21;
  void *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  char v27[16];
  void *v28;
  _QWORD aBlock[7];

  v1 = v0;
  v2 = sub_2402BD984();
  v25 = *(_QWORD *)(v2 - 8);
  v26 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2402BD9A8();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_2402BD558();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_2402BD534();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[2] = 0xD000000000000015;
  v0[3] = 0x80000002402C9DF0;
  v24[1] = sub_240278DC0(0, (unint64_t *)&unk_256FE0080);
  sub_240278DC0(0, (unint64_t *)&qword_256FDE570);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5490], v7);
  sub_2402BD99C();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_2402BD540();
  v11 = MEMORY[0x24BEE4AF8];
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_24027FA9C(&qword_256FE0090, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5930], MEMORY[0x24BEE5940]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0098);
  sub_240278DF8();
  sub_2402BDA44();
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v4, *MEMORY[0x24BEE5758], v26);
  v12 = (void *)sub_2402BD9B4();
  v0[4] = v12;
  v14 = v0[2];
  v13 = v0[3];
  v28 = v12;
  v15 = v12;
  swift_bridgeObjectRetain();
  v16 = (_xpc_connection_s *)sub_24026F374((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_240278E44, (uint64_t)v27, v14, v13);
  type metadata accessor for XPCConnection();
  v17 = swift_allocObject();
  v18 = v15;
  *(_QWORD *)(v17 + 32) = sub_240249290(v11);
  *(_QWORD *)(v17 + 40) = sub_24024929C(v11);
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v18;
  v19 = v18;
  v20 = (_xpc_connection_s *)swift_unknownObjectRetain();
  xpc_connection_set_target_queue(v20, v19);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v17;
  *(_QWORD *)(v21 + 24) = v16;
  aBlock[4] = sub_24026EF58;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24026CB38;
  aBlock[3] = &block_descriptor_3;
  v22 = _Block_copy(aBlock);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_release();
  xpc_connection_set_event_handler(v16, v22);
  swift_unknownObjectRelease();

  _Block_release(v22);
  xpc_connection_activate(v16);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v1[5] = v17;
  return v1;
}

uint64_t sub_240278DC0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_240278DF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FE00A0;
  if (!qword_256FE00A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FE0098);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_256FE00A0);
  }
  return result;
}

xpc_connection_t sub_240278E44@<X0>(const char *a1@<X0>, xpc_connection_t *a2@<X8>)
{
  uint64_t v2;

  return sub_24026F310(a1, *(NSObject **)(v2 + 16), a2);
}

uint64_t sub_240278E5C()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t MLHostClient.deinit()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(*(_QWORD *)(v0 + 40) + 16));
  swift_bridgeObjectRelease();

  swift_release();
  return v0;
}

uint64_t MLHostClient.__deallocating_deinit()
{
  uint64_t v0;

  xpc_connection_cancel(*(xpc_connection_t *)(*(_QWORD *)(v0 + 40) + 16));
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_240278F18()
{
  return sub_2402BD9C0();
}

uint64_t sub_240278F38(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 193) = a2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v3 + 128) = sub_2402BD870();
  *(_QWORD *)(v3 + 136) = v5;
  return swift_task_switch();
}

uint64_t sub_240278FAC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 40);
  return swift_task_switch();
}

uint64_t sub_240278FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273830(*(_BYTE *)(v0 + 193), 0, (void (*)(uint64_t))sub_2402654A8, (uint64_t)&type metadata for GetHostConfigurationRequest, &qword_256FE04F0);
  *(_QWORD *)(v0 + 152) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 144);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v5;
  *v5 = v0;
  v5[1] = sub_2402790D4;
  return sub_2402BDDA4();
}

uint64_t sub_2402790D4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_240279140()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_240279178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_240279198()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 176);
  return swift_task_switch();
}

uint64_t sub_2402791E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 184);
  *(_QWORD *)(v0 + 88) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 184);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 192);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 104) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 88);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 80) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 72);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 96) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 80);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027969C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v3[14] = sub_2402BD870();
  v3[15] = v5;
  return swift_task_switch();
}

uint64_t sub_240279710()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 40);
  return swift_task_switch();
}

uint64_t sub_240279730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273030(*(__int128 **)(v0 + 96), 0);
  *(_QWORD *)(v0 + 136) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 128);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v5;
  *v5 = v0;
  v5[1] = sub_240279820;
  return sub_2402BDDA4();
}

uint64_t sub_240279820()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027988C()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_2402798C4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_OWORD *)(v0 + 24);
  *(_BYTE *)v1 = *(_BYTE *)(v0 + 16);
  *(_OWORD *)(v1 + 8) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2402798E4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 160);
  return swift_task_switch();
}

uint64_t sub_24027992C()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 168);
  *(_QWORD *)(v0 + 64) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 168);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 176);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 80) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 64);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 56) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 40);
    v20 = *(_QWORD *)(v0 + 48);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 72) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 56);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_240279DE8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 153) = a2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v3 + 88) = sub_2402BD870();
  *(_QWORD *)(v3 + 96) = v5;
  return swift_task_switch();
}

uint64_t sub_240279E5C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
  return swift_task_switch();
}

uint64_t sub_240279E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273830(*(_BYTE *)(v0 + 153), 0, (void (*)(uint64_t))sub_2402657A8, (uint64_t)&type metadata for GetNotificationsConfigRequest, &qword_256FE04A0);
  *(_QWORD *)(v0 + 112) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 104);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v5;
  *v5 = v0;
  v5[1] = sub_240279F84;
  return sub_2402BDDA4();
}

uint64_t sub_240279F84()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_240279FF0()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027A028()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 136);
  return swift_task_switch();
}

uint64_t sub_24027A070(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 146) = a2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v3 + 80) = sub_2402BD870();
  *(_QWORD *)(v3 + 88) = v5;
  return swift_task_switch();
}

uint64_t sub_24027A0E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 40);
  return swift_task_switch();
}

uint64_t sub_24027A104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273830(*(_BYTE *)(v0 + 146), 0, (void (*)(uint64_t))sub_2402658E4, (uint64_t)&type metadata for ResetNotificationsRequest, &qword_256FE0478);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 96);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v5;
  *v5 = v0;
  v5[1] = sub_24027A20C;
  return sub_2402BDDA4();
}

uint64_t sub_24027A20C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027A278()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027A2B0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 128);
  return swift_task_switch();
}

uint64_t sub_24027A2F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)(v4 + 88) = v3;
  *(_BYTE *)(v4 + 161) = a3;
  *(_QWORD *)(v4 + 72) = a1;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v4 + 96) = sub_2402BD870();
  *(_QWORD *)(v4 + 104) = v6;
  return swift_task_switch();
}

uint64_t sub_24027A370()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 40);
  return swift_task_switch();
}

uint64_t sub_24027A390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_2402732D8(*(_QWORD *)(v0 + 80), *(_BYTE *)(v0 + 161) & 1, 0);
  *(_QWORD *)(v0 + 120) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 112);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = sub_24027A488;
  return sub_2402BDDA4();
}

uint64_t sub_24027A488()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027A4F4()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027A52C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 144);
  return swift_task_switch();
}

uint64_t sub_24027A574()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 152);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 160);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 64) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 40) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 16);
    v20 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 40);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027AA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[12] = sub_2402BD870();
  v4[13] = v6;
  return swift_task_switch();
}

uint64_t sub_24027AAA4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 40);
  return swift_task_switch();
}

uint64_t sub_24027AAC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273D6C(v0[9], v0[10], 0, (void (*)(uint64_t))sub_240264990, (uint64_t)&type metadata for GetTaskRequest, &qword_256FE0440);
  v0[15] = v1;
  v2 = v1;
  v3 = v0[14];
  v4 = swift_task_alloc();
  v0[16] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[17] = (uint64_t)v5;
  type metadata accessor for GetTaskResponse(0);
  *v5 = v0;
  v5[1] = sub_24027ABC0;
  return sub_2402BDDA4();
}

uint64_t sub_24027ABC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027AC2C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027AC60()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 144);
  return swift_task_switch();
}

uint64_t sub_24027ACA8()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 152);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 160);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 40) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 16);
    v20 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 48) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 40);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027B164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v3[11] = sub_2402BD870();
  v3[12] = v5;
  return swift_task_switch();
}

uint64_t sub_24027B1D8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
  return swift_task_switch();
}

uint64_t sub_24027B1F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_24027357C(v0[9], 0);
  v0[14] = v1;
  v2 = v1;
  v3 = v0[13];
  v4 = swift_task_alloc();
  v0[15] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[16] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_24027B2E8;
  return sub_2402BDDA4();
}

uint64_t sub_24027B2E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027B354()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027B38C()
{
  uint64_t v0;
  _BYTE *v1;
  char v2;

  v1 = *(_BYTE **)(v0 + 64);
  v2 = *(_BYTE *)(v0 + 153);
  *v1 = *(_BYTE *)(v0 + 152);
  v1[1] = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027B3AC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 136);
  return swift_task_switch();
}

uint64_t sub_24027B3F4()
{
  uint64_t v0;
  void *v1;
  void **v2;
  id v3;
  int v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _BYTE *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 144);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = (void **)(v0 + 48);
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v4 = swift_dynamicCast();
  v5 = *(void **)(v0 + 144);
  if (v4)
  {

    v6 = *(unsigned __int8 *)(v0 + 154);
    if (qword_2543528A0 != -1)
      swift_once();
    v7 = sub_2402BD4E0();
    __swift_project_value_buffer(v7, (uint64_t)qword_2543529A0);
    v8 = sub_2402BD4C8();
    v9 = sub_2402BD960();
    if (os_log_type_enabled(v8, v9))
    {
      v33 = v6;
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v12 = v33;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 40) = v13;
      sub_2402BD9FC();
      *v11 = v13;
      _os_log_impl(&dword_24022D000, v8, v9, "MLHostClient connection error: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v11, -1, -1);
      v14 = v10;
      v6 = v33;
      MEMORY[0x242682188](v14, -1, -1);
    }

    if (v6 == 2)
    {
      v15 = sub_2402BD4C8();
      v16 = sub_2402BD96C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_24022D000, v15, v16, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v17, 2u);
        MEMORY[0x242682188](v17, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v18 = v6;
    swift_willThrow();
    v19 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 48) = v5;
  v20 = v5;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v22 = *(_QWORD *)(v0 + 16);
    v21 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v23 = sub_2402BD4E0();
    __swift_project_value_buffer(v23, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v24 = sub_2402BD4C8();
    v25 = sub_2402BD960();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v34 = v22;
      v27 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v26 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v28 = v34;
      v28[1] = v21;
      swift_bridgeObjectRetain();
      v29 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v29;
      v2 = (void **)(v0 + 48);
      sub_2402BD9FC();
      *v27 = v29;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v24, v25, "MLHostClient remote error: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v30 = v27;
      v22 = v34;
      MEMORY[0x242682188](v30, -1, -1);
      MEMORY[0x242682188](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v31 = v22;
    v31[1] = v21;
    swift_willThrow();
    v19 = *v2;
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027B8B4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 146) = a2;
  *(_QWORD *)(v3 + 64) = a1;
  *(_QWORD *)(v3 + 72) = v2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v3 + 80) = sub_2402BD870();
  *(_QWORD *)(v3 + 88) = v5;
  return swift_task_switch();
}

uint64_t sub_24027B928()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 40);
  return swift_task_switch();
}

uint64_t sub_24027B948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273830(*(_BYTE *)(v0 + 146), 0, (void (*)(uint64_t))sub_240264AD0, (uint64_t)&type metadata for ResetTasksRequest, &qword_256FE0400);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 96);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v5;
  *v5 = v0;
  v5[1] = sub_24027BA50;
  return sub_2402BDDA4();
}

uint64_t sub_24027BA50()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027BABC()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027BAF4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 64) = *(_BYTE *)(v0 + 145);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027BB0C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 128);
  return swift_task_switch();
}

uint64_t sub_24027BB54()
{
  uint64_t v0;
  void *v1;
  void **v2;
  id v3;
  int v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _BYTE *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 136);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = (void **)(v0 + 48);
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v4 = swift_dynamicCast();
  v5 = *(void **)(v0 + 136);
  if (v4)
  {

    v6 = *(unsigned __int8 *)(v0 + 144);
    if (qword_2543528A0 != -1)
      swift_once();
    v7 = sub_2402BD4E0();
    __swift_project_value_buffer(v7, (uint64_t)qword_2543529A0);
    v8 = sub_2402BD4C8();
    v9 = sub_2402BD960();
    if (os_log_type_enabled(v8, v9))
    {
      v33 = v6;
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v12 = v33;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 40) = v13;
      sub_2402BD9FC();
      *v11 = v13;
      _os_log_impl(&dword_24022D000, v8, v9, "MLHostClient connection error: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v11, -1, -1);
      v14 = v10;
      v6 = v33;
      MEMORY[0x242682188](v14, -1, -1);
    }

    if (v6 == 2)
    {
      v15 = sub_2402BD4C8();
      v16 = sub_2402BD96C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_24022D000, v15, v16, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v17, 2u);
        MEMORY[0x242682188](v17, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v18 = v6;
    swift_willThrow();
    v19 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 48) = v5;
  v20 = v5;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v22 = *(_QWORD *)(v0 + 16);
    v21 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v23 = sub_2402BD4E0();
    __swift_project_value_buffer(v23, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v24 = sub_2402BD4C8();
    v25 = sub_2402BD960();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v34 = v22;
      v27 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v26 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v28 = v34;
      v28[1] = v21;
      swift_bridgeObjectRetain();
      v29 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v29;
      v2 = (void **)(v0 + 48);
      sub_2402BD9FC();
      *v27 = v29;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v24, v25, "MLHostClient remote error: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v30 = v27;
      v22 = v34;
      MEMORY[0x242682188](v30, -1, -1);
      MEMORY[0x242682188](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v31 = v22;
    v31[1] = v21;
    swift_willThrow();
    v19 = *v2;
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027C014(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 153) = a2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v3 + 88) = sub_2402BD870();
  *(_QWORD *)(v3 + 96) = v5;
  return swift_task_switch();
}

uint64_t sub_24027C088()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40);
  return swift_task_switch();
}

uint64_t sub_24027C0A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273830(*(_BYTE *)(v0 + 153), 0, (void (*)(uint64_t))sub_240264D90, (uint64_t)&type metadata for CleanTasksRequest, &qword_256FE03D8);
  *(_QWORD *)(v0 + 112) = v1;
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 104);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v5;
  *v5 = v0;
  v5[1] = sub_24027C1B0;
  return sub_2402BDDA4();
}

uint64_t sub_24027C1B0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027C21C()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027C254()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 72) = *(_QWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027C26C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 136);
  return swift_task_switch();
}

uint64_t sub_24027C2B4()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 144);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 144);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 152);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 64) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 40) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 16);
    v20 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 40);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027C770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[12] = sub_2402BD870();
  v4[13] = v6;
  return swift_task_switch();
}

uint64_t sub_24027C7E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 40);
  return swift_task_switch();
}

uint64_t sub_24027C804()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273D6C(v0[9], v0[10], 0, (void (*)(uint64_t))sub_240264F10, (uint64_t)&type metadata for GetOnDemandTaskRequest, &qword_256FE03B0);
  v0[15] = v1;
  v2 = v1;
  v3 = v0[14];
  v4 = swift_task_alloc();
  v0[16] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[17] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_24027C90C;
  return sub_2402BDDA4();
}

uint64_t sub_24027C90C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027C978()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027C9B0()
{
  uint64_t v0;

  **(_WORD **)(v0 + 64) = *(_WORD *)(v0 + 160);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027C9C8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 144);
  return swift_task_switch();
}

uint64_t sub_24027CA10()
{
  uint64_t v0;
  void *v1;
  void **v2;
  id v3;
  int v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _BYTE *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 152);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = (void **)(v0 + 48);
  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v4 = swift_dynamicCast();
  v5 = *(void **)(v0 + 152);
  if (v4)
  {

    v6 = *(unsigned __int8 *)(v0 + 162);
    if (qword_2543528A0 != -1)
      swift_once();
    v7 = sub_2402BD4E0();
    __swift_project_value_buffer(v7, (uint64_t)qword_2543529A0);
    v8 = sub_2402BD4C8();
    v9 = sub_2402BD960();
    if (os_log_type_enabled(v8, v9))
    {
      v33 = v6;
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v12 = v33;
      v13 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 40) = v13;
      sub_2402BD9FC();
      *v11 = v13;
      _os_log_impl(&dword_24022D000, v8, v9, "MLHostClient connection error: %@", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v11, -1, -1);
      v14 = v10;
      v6 = v33;
      MEMORY[0x242682188](v14, -1, -1);
    }

    if (v6 == 2)
    {
      v15 = sub_2402BD4C8();
      v16 = sub_2402BD96C();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_24022D000, v15, v16, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v17, 2u);
        MEMORY[0x242682188](v17, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v18 = v6;
    swift_willThrow();
    v19 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 48) = v5;
  v20 = v5;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v22 = *(_QWORD *)(v0 + 16);
    v21 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v23 = sub_2402BD4E0();
    __swift_project_value_buffer(v23, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v24 = sub_2402BD4C8();
    v25 = sub_2402BD960();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v34 = v22;
      v27 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v26 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v28 = v34;
      v28[1] = v21;
      swift_bridgeObjectRetain();
      v29 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v29;
      v2 = (void **)(v0 + 48);
      sub_2402BD9FC();
      *v27 = v29;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v24, v25, "MLHostClient remote error: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v30 = v27;
      v22 = v34;
      MEMORY[0x242682188](v30, -1, -1);
      MEMORY[0x242682188](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v31 = v22;
    v31[1] = v21;
    swift_willThrow();
    v19 = *v2;
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027CED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[13] = sub_2402BD870();
  v4[14] = v6;
  return swift_task_switch();
}

uint64_t sub_24027CF44()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 40);
  return swift_task_switch();
}

uint64_t sub_24027CF64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273AD0(v0[10], v0[11], 0);
  v0[16] = v1;
  v2 = v1;
  v3 = v0[15];
  v4 = swift_task_alloc();
  v0[17] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[18] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_24027D054;
  return sub_2402BDDA4();
}

uint64_t sub_24027D054()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027D0C0()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027D0F8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 152);
  return swift_task_switch();
}

uint64_t sub_24027D140()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 160);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 160);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 168);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 64) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 32);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 40) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 16);
    v20 = *(_QWORD *)(v0 + 24);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 56) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 40);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027D5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[20] = sub_2402BD870();
  v4[21] = v6;
  return swift_task_switch();
}

uint64_t sub_24027D670()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 40);
  return swift_task_switch();
}

uint64_t sub_24027D690()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = sub_240273D6C(v0[17], v0[18], 0, (void (*)(uint64_t))sub_240265328, (uint64_t)&type metadata for GetExtensionRequest, &qword_256FE0360);
  v0[23] = v1;
  v2 = v1;
  v3 = v0[22];
  v4 = swift_task_alloc();
  v0[24] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[25] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = sub_24027D798;
  return sub_2402BDDA4();
}

uint64_t sub_24027D798()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_24027D804()
{
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027D83C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_OWORD *)(v0 + 32);
  v3 = *(_OWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 32) = v3;
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v5;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027D864()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 208);
  return swift_task_switch();
}

uint64_t sub_24027D8AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  int v3;
  void *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 216);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 216);
  if (v3)
  {

    v5 = *(unsigned __int8 *)(v0 + 224);
    if (qword_2543528A0 != -1)
      swift_once();
    v6 = sub_2402BD4E0();
    __swift_project_value_buffer(v6, (uint64_t)qword_2543529A0);
    v7 = sub_2402BD4C8();
    v8 = sub_2402BD960();
    if (os_log_type_enabled(v7, v8))
    {
      v32 = v5;
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      sub_2402714A8();
      swift_allocError();
      *v11 = v32;
      v12 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 120) = v12;
      sub_2402BD9FC();
      *v10 = v12;
      _os_log_impl(&dword_24022D000, v7, v8, "MLHostClient connection error: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v10, -1, -1);
      v13 = v9;
      v5 = v32;
      MEMORY[0x242682188](v13, -1, -1);
    }

    if (v5 == 2)
    {
      v14 = sub_2402BD4C8();
      v15 = sub_2402BD96C();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_24022D000, v14, v15, "MLHostd couldn't handle client request. Please make sure to have the appropriate entitlements.", v16, 2u);
        MEMORY[0x242682188](v16, -1, -1);
      }

    }
    sub_2402714A8();
    swift_allocError();
    *v17 = v5;
    swift_willThrow();
    v18 = *(void **)(v0 + 104);
LABEL_19:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(_QWORD *)(v0 + 96) = v4;
  v19 = v4;
  if ((swift_dynamicCast() & 1) != 0)
  {

    v21 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 88);
    if (qword_2543528A0 != -1)
      swift_once();
    v22 = sub_2402BD4E0();
    __swift_project_value_buffer(v22, (uint64_t)qword_2543529A0);
    swift_bridgeObjectRetain_n();
    v23 = sub_2402BD4C8();
    v24 = sub_2402BD960();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v33 = v21;
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      sub_24027F608();
      swift_allocError();
      *v27 = v33;
      v27[1] = v20;
      swift_bridgeObjectRetain();
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 112) = v28;
      sub_2402BD9FC();
      *v26 = v28;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24022D000, v23, v24, "MLHostClient remote error: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      v29 = v26;
      v21 = v33;
      MEMORY[0x242682188](v29, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_24027F608();
    swift_allocError();
    *v30 = v21;
    v30[1] = v20;
    swift_willThrow();
    v18 = *(void **)(v0 + 96);
    goto LABEL_19;
  }

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027DD68(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v2[8] = a1;
  v2[9] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v2[10] = v3;
  *v3 = v2;
  v3[1] = sub_24027DDC0;
  return sub_240278F38((uint64_t)(v2 + 2), 1);
}

uint64_t sub_24027DDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v2, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  sub_2402BD870();
  return swift_task_switch();
}

uint64_t sub_24027DE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 8) = v2;
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027DE84()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for MLHostClient()
{
  return objc_opt_self();
}

uint64_t sub_24027DEB0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  v4 = a1[1];
  *(_QWORD *)(v2 + 88) = v1;
  *(_QWORD *)(v2 + 96) = v3;
  *(_QWORD *)(v2 + 104) = v4;
  v5 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v2 + 112) = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v2 + 128) = v5;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v6, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  *(_QWORD *)(v2 + 144) = sub_2402BD870();
  *(_QWORD *)(v2 + 152) = v7;
  return swift_task_switch();
}

uint64_t sub_24027DF30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 24) = v2;
  *(_QWORD *)(v0 + 32) = v3;
  *(_OWORD *)(v0 + 40) = *(_OWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 56) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v4;
  *v4 = v0;
  v4[1] = sub_24027DFD8;
  return sub_24027969C(v0 + 64, v0 + 16);
}

uint64_t sub_24027DFD8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027E060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    sub_24027E0EC();
    swift_allocError();
    *v3 = v2;
    v3[1] = v1;
    swift_willThrow();
    v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v5 = 0;
  }
  else
  {
    v5 = *(unsigned __int8 *)(v0 + 64);
    v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  }
  return v4(v5);
}

uint64_t sub_24027E0DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

unint64_t sub_24027E0EC()
{
  unint64_t result;

  result = qword_256FE00D0;
  if (!qword_256FE00D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostClientError, &type metadata for MLHostClientError);
    atomic_store(result, (unint64_t *)&qword_256FE00D0);
  }
  return result;
}

uint64_t sub_24027E130(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = sub_24027E194;
  return sub_240279DE8(v2 + 16, a1);
}

uint64_t sub_24027E194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v2, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  sub_2402BD870();
  return swift_task_switch();
}

uint64_t sub_24027E238(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_24027E29C;
  return sub_24027A070(v2 + 40, a1);
}

uint64_t sub_24027E29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v2, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  sub_2402BD870();
  return swift_task_switch();
}

uint64_t sub_24027E340()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v1;
  v2[1] = sub_24027E194;
  return sub_24027A2F8(v1 + 16, 0, 1);
}

uint64_t sub_24027E39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for GetTaskResponse(0);
  v4[6] = swift_task_alloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[7] = sub_2402BD870();
  v4[8] = v6;
  return swift_task_switch();
}

uint64_t sub_24027E430()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[9] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_24027E48C;
  return sub_24027AA30(v0[6], v0[3], v0[4]);
}

uint64_t sub_24027E48C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027E500()
{
  uint64_t v0;

  sub_24027E578(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027E544()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027E578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHostTask(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24027E5BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for AddTaskRequest(0);
  v2[4] = swift_task_alloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v3, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v2[5] = sub_2402BD870();
  v2[6] = v4;
  return swift_task_switch();
}

uint64_t sub_24027E64C()
{
  uint64_t *v0;
  _QWORD *v1;

  sub_240238BF0(v0[2], v0[4], type metadata accessor for TaskDefinition);
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_24027E6B4;
  return sub_24027B164((uint64_t)(v0 + 9), v0[4]);
}

uint64_t sub_24027E6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  sub_240238C34(v2, type metadata accessor for AddTaskRequest);
  return swift_task_switch();
}

uint64_t sub_24027E730()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 72);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_24027E76C()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24027E7A4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_24027E808;
  return sub_24027B8B4(v2 + 40, a1);
}

uint64_t sub_24027E808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v2, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  sub_2402BD870();
  return swift_task_switch();
}

uint64_t sub_24027E8AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_24027E8BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_24027E8CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v1;
  v2[1] = sub_24027E924;
  return sub_24027C014(v1 + 16, 1);
}

uint64_t sub_24027E924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v2, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  sub_2402BD870();
  return swift_task_switch();
}

uint64_t sub_24027E9C8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24027E9D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027E9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v4, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v3[5] = sub_2402BD870();
  v3[6] = v5;
  return swift_task_switch();
}

uint64_t sub_24027EA54()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_24027EAC0;
  return sub_24027C770((uint64_t)(v0 + 9), v0[2], v0[3]);
}

uint64_t sub_24027EAC0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027EB34()
{
  uint64_t v0;

  return ((uint64_t (*)())((char *)sub_24027EB6C + 4 * byte_2402C4580[*(unsigned __int8 *)(v0 + 73)]))();
}

uint64_t sub_24027EB6C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v0 + 8))(0, 0x61766E496B736174, 0xEB0000000064696CLL);
}

uint64_t sub_24027EC60()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027EC6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  *v2 = v1;
  v2[1] = sub_24027E194;
  return sub_24027CED0(v1 + 16, 0, 0);
}

uint64_t sub_24027ECC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  type metadata accessor for MLHostClient();
  sub_24027FA9C((unint64_t *)&unk_256FE00B8, v5, (uint64_t (*)(uint64_t))type metadata accessor for MLHostClient, (uint64_t)&protocol conformance descriptor for MLHostClient);
  v4[14] = sub_2402BD870();
  v4[15] = v6;
  return swift_task_switch();
}

uint64_t sub_24027ED3C()
{
  uint64_t *v0;
  _QWORD *v1;

  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_24027EDA8;
  return sub_24027D5FC((uint64_t)(v0 + 2), v0[11], v0[12]);
}

uint64_t sub_24027EDA8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_24027EE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 64);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 56) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24027EE44()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t destroy for MLHostClientError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s20LighthouseBackground17MLHostClientErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for MLHostClientError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MLHostClientError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHostClientError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MLHostClientError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

uint64_t sub_24027F064(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_24027F07C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHostClientError()
{
  return &type metadata for MLHostClientError;
}

uint64_t method lookup function for MLHostClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MLHostClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MLHostClient.unownedExecutor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MLHostClient.getConfig()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 128) + *(_QWORD *)(*(_QWORD *)v1 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_240272D3C;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.setConfig(config:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 136) + *(_QWORD *)(*(_QWORD *)v1 + 136));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24027FD90;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.getNotificationsConfig(registeredOnly:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 144) + *(_QWORD *)(*(_QWORD *)v1 + 144));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24027FD90;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.resetNotifications(reload:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 152) + *(_QWORD *)(*(_QWORD *)v1 + 152));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24027FD90;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.getTasks()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 160) + *(_QWORD *)(*(_QWORD *)v0 + 160));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_24027FD90;
  return v4();
}

uint64_t dispatch thunk of MLHostClient.getTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 168)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 168));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_240272D3C;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of MLHostClient.addTask(taskDefinition:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 176) + *(_QWORD *)(*(_QWORD *)v1 + 176));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_24027FD90;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.resetTasks(reload:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 184) + *(_QWORD *)(*(_QWORD *)v1 + 184));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_240272A14;
  return v6(a1);
}

uint64_t dispatch thunk of MLHostClient.cleanTasks()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 192) + *(_QWORD *)(*(_QWORD *)v0 + 192));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_240272A14;
  return v4();
}

uint64_t dispatch thunk of MLHostClient.runOnDemandTask(taskName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 200) + *(_QWORD *)(*(_QWORD *)v2 + 200));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_24027F4C8;
  return v8(a1, a2);
}

uint64_t sub_24027F4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of MLHostClient.getExtensions()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 208) + *(_QWORD *)(*(_QWORD *)v0 + 208));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_24027FD90;
  return v4();
}

uint64_t dispatch thunk of MLHostClient.getExtension(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 216)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 216));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_2402716A8;
  return v10(a1, a2, a3);
}

unint64_t sub_24027F608()
{
  unint64_t result;

  result = qword_256FE0300;
  if (!qword_256FE0300)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCRemoteError, &type metadata for XPCRemoteError);
    atomic_store(result, (unint64_t *)&qword_256FE0300);
  }
  return result;
}

void sub_24027F64C(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0318, (uint64_t)&unk_25108FEC0, (uint64_t)sub_24027F690, (uint64_t)&block_descriptor_44);
}

uint64_t sub_24027F684()
{
  return objectdestroy_40Tm(&qword_256FE0318);
}

uint64_t sub_24027F690(uint64_t a1)
{
  return sub_24027F8A4(a1, &qword_256FE0318, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_2402745A8);
}

unint64_t sub_24027F6A4()
{
  unint64_t result;

  result = qword_256FE0320;
  if (!qword_256FE0320)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCParsingError, &type metadata for XPCParsingError);
    atomic_store(result, (unint64_t *)&qword_256FE0320);
  }
  return result;
}

unint64_t sub_24027F6E8()
{
  unint64_t result;

  result = qword_256FE0330;
  if (!qword_256FE0330)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCRemoteError, &type metadata for XPCRemoteError);
    atomic_store(result, (unint64_t *)&qword_256FE0330);
  }
  return result;
}

uint64_t sub_24027F72C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void sub_24027F770(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0368, (uint64_t)&unk_25108FF10, (uint64_t)sub_24027F7B4, (uint64_t)&block_descriptor_52);
}

uint64_t sub_24027F7A8()
{
  return objectdestroy_40Tm(&qword_256FE0368);
}

uint64_t sub_24027F7B4(void *a1)
{
  return sub_24027F7D8(a1, &qword_256FE0368, (uint64_t)&type metadata for ListExtensionsResponse, (uint64_t *)&unk_256FE0370, (void (*)(void))sub_240265200);
}

uint64_t sub_24027F7D8(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return sub_240274518(a1, *(_QWORD *)(v5 + 16), v5 + ((v11 + 24) & ~v11), a3, a4, a5, a2);
}

void sub_24027F84C(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0390, (uint64_t)&unk_25108FF60, (uint64_t)sub_24027F890, (uint64_t)&block_descriptor_60);
}

uint64_t sub_24027F884()
{
  return objectdestroy_40Tm(&qword_256FE0390);
}

uint64_t sub_24027F890(uint64_t a1)
{
  return sub_24027F8A4(a1, &qword_256FE0390, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_240274490);
}

uint64_t sub_24027F8A4(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return a3(a1, *(_QWORD *)(v3 + 16), v3 + ((v5 + 24) & ~v5));
}

void sub_24027F8F4(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE03B8, (uint64_t)&unk_25108FFB0, (uint64_t)sub_24027F938, (uint64_t)&block_descriptor_68);
}

uint64_t sub_24027F92C()
{
  return objectdestroy_40Tm(&qword_256FE03B8);
}

uint64_t sub_24027F938(void *a1)
{
  return sub_24027F7D8(a1, &qword_256FE03B8, (uint64_t)&type metadata for CleanTasksResponse, (uint64_t *)&unk_256FE03C0, (void (*)(void))sub_240264DE8);
}

void sub_24027F95C(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE03E0, (uint64_t)&unk_251090000, (uint64_t)sub_24027F9A0, (uint64_t)&block_descriptor_76);
}

uint64_t sub_24027F994()
{
  return objectdestroy_40Tm(&qword_256FE03E0);
}

uint64_t sub_24027F9A4(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE03E0);
  return sub_240274408(a1);
}

void sub_24027F9EC(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0408, (uint64_t)&unk_251090050, (uint64_t)sub_24027FA30, (uint64_t)&block_descriptor_84);
}

uint64_t sub_24027FA24()
{
  return objectdestroy_40Tm(&qword_256FE0408);
}

uint64_t sub_24027FA30(uint64_t a1)
{
  return sub_24027F8A4(a1, &qword_256FE0408, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_240274378);
}

void sub_24027FA44(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t *)&unk_256FE0430, (uint64_t)&unk_2510900A0, (uint64_t)sub_24027FA88, (uint64_t)&block_descriptor_92);
}

uint64_t sub_24027FA7C()
{
  return objectdestroy_40Tm((uint64_t *)&unk_256FE0430);
}

uint64_t sub_24027FA88(uint64_t a1)
{
  return sub_24027F8A4(a1, (uint64_t *)&unk_256FE0430, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_240274274);
}

uint64_t sub_24027FA9C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2426820F8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_24027FADC(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0448, (uint64_t)&unk_2510900F0, (uint64_t)sub_24027FB20, (uint64_t)&block_descriptor_100);
}

uint64_t sub_24027FB14()
{
  return objectdestroy_40Tm(&qword_256FE0448);
}

uint64_t sub_24027FB20(void *a1)
{
  return sub_24027F7D8(a1, &qword_256FE0448, (uint64_t)&type metadata for ListTasksResponse, (uint64_t *)&unk_256FE0450, (void (*)(void))sub_240264884);
}

void sub_24027FB44(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE03E0, (uint64_t)&unk_251090140, (uint64_t)sub_24027F9A0, (uint64_t)&block_descriptor_108);
}

uint64_t sub_24027FB7C()
{
  return objectdestroy_40Tm(&qword_256FE03E0);
}

void sub_24027FB88(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE0480, (uint64_t)&unk_251090190, (uint64_t)sub_24027FBCC, (uint64_t)&block_descriptor_116);
}

uint64_t sub_24027FBC0()
{
  return objectdestroy_40Tm(&qword_256FE0480);
}

uint64_t sub_24027FBCC(void *a1)
{
  return sub_24027F7D8(a1, &qword_256FE0480, (uint64_t)&type metadata for GetNotificationsConfigResponse, &qword_256FE0488, (void (*)(void))sub_240265800);
}

void sub_24027FBF0(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE04A8, (uint64_t)&unk_2510901E0, (uint64_t)sub_24027FC34, (uint64_t)&block_descriptor_124);
}

uint64_t sub_24027FC28()
{
  return objectdestroy_40Tm(&qword_256FE04A8);
}

uint64_t sub_24027FC34(uint64_t a1)
{
  return sub_24027F8A4(a1, &qword_256FE04A8, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_2402741E4);
}

void sub_24027FC48(uint64_t a1)
{
  uint64_t v1;

  sub_24027400C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), &qword_256FE04D0, (uint64_t)&unk_251090230, (uint64_t)sub_24027FCFC, (uint64_t)&block_descriptor_132);
}

uint64_t sub_24027FC80()
{
  return objectdestroy_40Tm(&qword_256FE04D0);
}

uint64_t objectdestroy_40Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);
  return swift_deallocObject();
}

uint64_t sub_24027FCFC(uint64_t a1)
{
  return sub_24027F8A4(a1, &qword_256FE04D0, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_240274150);
}

BOOL TaskRequest.isValid.getter()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 17) & *(_BYTE *)(v0 + 41) & 1) == 0;
}

uint64_t TaskRequest.isRepeating.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 41) & ~*(_BYTE *)(v0 + 17) & 1;
}

uint64_t TaskRequest.isNonRepeating.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 17) & ~*(_BYTE *)(v0 + 41) & 1;
}

LighthouseBackground::TaskRequestPriority_optional __swiftcall TaskRequestPriority.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::TaskRequestPriority_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static TaskRequestPriority.allCases.getter()
{
  return &unk_25108B628;
}

uint64_t TaskRequestPriority.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24027FE60 + 4 * byte_2402C4660[*v0]))(1701736270, 0xE400000000000000);
}

uint64_t sub_24027FE60()
{
  return 0x616E65746E69614DLL;
}

uint64_t sub_24027FE80()
{
  return 0x7974696C697455;
}

uint64_t sub_24027FE98()
{
  return 0x74696E4972657355;
}

void sub_24027FEBC(char *a1)
{
  sub_240235608(*a1);
}

void sub_24027FEC8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_24027FF0C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_24027FF90()
{
  __asm { BR              X10 }
}

uint64_t sub_24027FFC4()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240280034()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_240280074()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::TaskRequestPriority_optional sub_2402800F8(Swift::String *a1)
{
  return TaskRequestPriority.init(rawValue:)(*a1);
}

uint64_t sub_240280104()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24028012C + 4 * byte_2402C4670[*v0]))();
}

void sub_24028012C(_QWORD *a1@<X8>)
{
  *a1 = 0x616E65746E69614DLL;
  a1[1] = 0xEB0000000065636ELL;
}

void sub_240280150(_QWORD *a1@<X8>)
{
  *a1 = 0x7974696C697455;
  a1[1] = 0xE700000000000000;
}

void sub_24028016C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "UserInitiated");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_240280194(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AF60;
}

uint64_t sub_2402801A4()
{
  sub_24028799C();
  return sub_2402BD774();
}

uint64_t sub_240280200()
{
  sub_24028799C();
  return sub_2402BD75C();
}

LighthouseBackground::TaskRequestProtectionClass_optional __swiftcall TaskRequestProtectionClass.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (LighthouseBackground::TaskRequestProtectionClass_optional)sub_240280894(v1);
}

void *static TaskRequestProtectionClass.allCases.getter()
{
  return &unk_25108B6E8;
}

uint64_t TaskRequestProtectionClass.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24028028C + 4 * byte_2402C4674[*v0]))(1701736270, 0xE400000000000000);
}

uint64_t sub_24028028C()
{
  return 0x417373616C43;
}

uint64_t sub_2402802A0()
{
  return 0x427373616C43;
}

uint64_t sub_2402802B4()
{
  return 0x437373616C43;
}

uint64_t sub_2402802C8()
{
  return 0x447373616C43;
}

void sub_2402802DC(char *a1)
{
  sub_240234CC0(*a1);
}

void sub_2402802E8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_24028032C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402803A4()
{
  __asm { BR              X10 }
}

uint64_t sub_2402803D8()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_24028043C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_24028047C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::TaskRequestProtectionClass_optional sub_2402804F4(Swift::String *a1)
{
  return TaskRequestProtectionClass.init(rawValue:)(*a1);
}

uint64_t sub_240280500()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_240280528 + 4 * byte_2402C4688[*v0]))();
}

void sub_240280528(_QWORD *a1@<X8>)
{
  *a1 = 0x417373616C43;
  a1[1] = 0xE600000000000000;
}

void sub_240280540(_QWORD *a1@<X8>)
{
  *a1 = 0x427373616C43;
  a1[1] = 0xE600000000000000;
}

void sub_240280558(_QWORD *a1@<X8>)
{
  *a1 = 0x437373616C43;
  a1[1] = 0xE600000000000000;
}

void sub_240280570(_QWORD *a1@<X8>)
{
  *a1 = 0x447373616C43;
  a1[1] = 0xE600000000000000;
}

void sub_240280588(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108B050;
}

uint64_t sub_240280598()
{
  sub_240287958();
  return sub_2402BD774();
}

uint64_t sub_2402805F4()
{
  sub_240287958();
  return sub_2402BD75C();
}

LighthouseBackground::TaskRequestMotionState_optional __swiftcall TaskRequestMotionState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::TaskRequestMotionState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 8;
  if (v3 < 8)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static TaskRequestMotionState.allCases.getter()
{
  return &unk_25108B000;
}

uint64_t TaskRequestMotionState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402806CC + 4 * byte_2402C468D[*v0]))(1701736270, 0xE400000000000000);
}

uint64_t sub_2402806CC()
{
  return 0x616E6F6974617453;
}

uint64_t sub_2402806E8()
{
  return 0x676E696B6C6157;
}

uint64_t sub_240280720()
{
  return 0x69746F6D6F747541;
}

unint64_t sub_24028073C()
{
  return 0xD000000000000010;
}

unint64_t sub_240280758()
{
  return 0xD000000000000014;
}

void sub_240280778(char *a1)
{
  sub_2402350A8(*a1);
}

void sub_240280784()
{
  char *v0;

  sub_2402AAA74(0, *v0);
}

void sub_240280790(uint64_t a1)
{
  char *v1;

  sub_240289FF8(a1, *v1);
}

void sub_240280798(uint64_t a1)
{
  char *v1;

  sub_2402AAA74(a1, *v1);
}

LighthouseBackground::TaskRequestMotionState_optional sub_2402807A0(Swift::String *a1)
{
  return TaskRequestMotionState.init(rawValue:)(*a1);
}

uint64_t sub_2402807AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = TaskRequestMotionState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_2402807D0(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108B000;
}

uint64_t sub_2402807E0()
{
  sub_240287914();
  return sub_2402BD774();
}

uint64_t sub_24028083C()
{
  sub_240287914();
  return sub_2402BD75C();
}

LighthouseBackground::TaskRequestResources_optional __swiftcall TaskRequestResources.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (LighthouseBackground::TaskRequestResources_optional)sub_240280894(v1);
}

uint64_t sub_240280894@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_2402BDBA0();
  result = swift_bridgeObjectRelease();
  v4 = 5;
  if (v2 < 5)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static TaskRequestResources.allCases.getter()
{
  return &unk_25108B888;
}

uint64_t TaskRequestResources.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24028091C + 4 * byte_2402C4695[*v0]))(5591107, 0xE300000000000000);
}

uint64_t sub_24028091C()
{
  return 0x79726F6D656DLL;
}

uint64_t sub_240280930()
{
  return 1802725732;
}

uint64_t sub_240280940()
{
  return 4542017;
}

uint64_t sub_24028094C(uint64_t a1)
{
  return a1 + 4;
}

void sub_240280954(char *a1)
{
  sub_24023542C(*a1);
}

void sub_240280960()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_2402809A8()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_240280A10()
{
  __asm { BR              X10 }
}

uint64_t sub_240280A44()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240280A90()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_240280AD4()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::TaskRequestResources_optional sub_240280B3C(Swift::String *a1)
{
  return TaskRequestResources.init(rawValue:)(*a1);
}

uint64_t sub_240280B48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_240280B70 + 4 * byte_2402C46A9[*v0]))();
}

void sub_240280B70(_QWORD *a1@<X8>)
{
  *a1 = 0x79726F6D656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_240280B88(_QWORD *a1@<X8>)
{
  *a1 = 1802725732;
  a1[1] = 0xE400000000000000;
}

void sub_240280B9C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 4542017;
  a1[1] = v1;
}

void sub_240280BAC(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2 + 4;
  a1[1] = v1;
}

void sub_240280BB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AFB0;
}

uint64_t sub_240280BC8()
{
  sub_2402878D0();
  return sub_2402BD774();
}

uint64_t sub_240280C24()
{
  sub_2402878D0();
  return sub_2402BD75C();
}

LighthouseBackground::TaskRequestDevice_optional __swiftcall TaskRequestDevice.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::TaskRequestDevice_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static TaskRequestDevice.allCases.getter()
{
  return &unk_25108B918;
}

uint64_t TaskRequestDevice.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65726961506C6C61;
  if (*v0 != 1)
    v1 = 0x65746F6D6572;
  if (*v0)
    return v1;
  else
    return 0x50746C7561666564;
}

uint64_t sub_240280D3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_240235920(*a1, *a2);
}

uint64_t sub_240280D48()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240280DF4()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_240280E7C()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::TaskRequestDevice_optional sub_240280F24(Swift::String *a1)
{
  return TaskRequestDevice.init(rawValue:)(*a1);
}

void sub_240280F30(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xED00006465726961;
  v4 = 0xE900000000000064;
  v5 = 0x65726961506C6C61;
  if (v2 != 1)
  {
    v5 = 0x65746F6D6572;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x50746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_240280F9C(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AEA0;
}

uint64_t sub_240280FAC()
{
  sub_24028788C();
  return sub_2402BD774();
}

uint64_t sub_240281008()
{
  sub_24028788C();
  return sub_2402BD75C();
}

double RepeatingTaskRequest.interval.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void RepeatingTaskRequest.interval.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*RepeatingTaskRequest.interval.modify())()
{
  return nullsub_1;
}

uint64_t RepeatingTaskRequest.minDurationBetweenInstances.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t RepeatingTaskRequest.minDurationBetweenInstances.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*RepeatingTaskRequest.minDurationBetweenInstances.modify())()
{
  return nullsub_1;
}

LighthouseBackground::RepeatingTaskRequest __swiftcall RepeatingTaskRequest.init(interval:minDurationBetweenInstances:)(Swift::Double interval, Swift::Double_optional minDurationBetweenInstances)
{
  char v2;
  uint64_t v3;
  LighthouseBackground::RepeatingTaskRequest result;

  *(Swift::Double *)v3 = interval;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)&minDurationBetweenInstances.is_nil;
  *(_BYTE *)(v3 + 16) = v2 & 1;
  result.minDurationBetweenInstances.value = minDurationBetweenInstances.value;
  result.minDurationBetweenInstances.is_nil = minDurationBetweenInstances.is_nil;
  result.interval = interval;
  return result;
}

uint64_t sub_2402810B4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001BLL;
  else
    return 0x6C61767265746E69;
}

uint64_t sub_2402810F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24028675C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_240281118()
{
  sub_240281194();
  return sub_2402BDE88();
}

uint64_t sub_240281140()
{
  sub_240281194();
  return sub_2402BDE94();
}

uint64_t RepeatingTaskRequest.encode(to:)(_QWORD *a1)
{
  return sub_240281340(a1, &qword_256FE04F8, (void (*)(void))sub_240281194);
}

unint64_t sub_240281194()
{
  unint64_t result;

  result = qword_254352568;
  if (!qword_254352568)
  {
    result = MEMORY[0x2426820F8](&unk_2402C52B8, &type metadata for RepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352568);
  }
  return result;
}

uint64_t RepeatingTaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402814E8(a1, &qword_2543525E8, (void (*)(void))sub_240281194, a2);
}

uint64_t sub_240281204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return RepeatingTaskRequest.init(from:)(a1, a2);
}

uint64_t sub_240281218(_QWORD *a1)
{
  return RepeatingTaskRequest.encode(to:)(a1);
}

double NonRepeatingTaskRequest.scheduleAfter.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*NonRepeatingTaskRequest.scheduleAfter.modify())()
{
  return nullsub_1;
}

uint64_t (*NonRepeatingTaskRequest.trySchedulingBefore.modify())()
{
  return nullsub_1;
}

uint64_t sub_240281254()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x656C756465686373;
}

uint64_t sub_2402812A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240286848(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402812C4()
{
  sub_240281478();
  return sub_2402BDE88();
}

uint64_t sub_2402812EC()
{
  sub_240281478();
  return sub_2402BDE94();
}

uint64_t NonRepeatingTaskRequest.encode(to:)(_QWORD *a1)
{
  return sub_240281340(a1, &qword_256FE0500, (void (*)(void))sub_240281478);
}

uint64_t sub_240281340(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v3 + 8);
  v12[1] = *(unsigned __int8 *)(v3 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE70();
  v16 = 0;
  v10 = v14;
  sub_2402BDD14();
  if (!v10)
  {
    v15 = 1;
    sub_2402BDCB4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_240281478()
{
  unint64_t result;

  result = qword_256FE0508;
  if (!qword_256FE0508)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5268, &type metadata for NonRepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0508);
  }
  return result;
}

uint64_t NonRepeatingTaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402814E8(a1, &qword_256FE0510, (void (*)(void))sub_240281478, a2);
}

uint64_t sub_2402814E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v19 = a4;
  v20 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE64();
  if (!v4)
  {
    v10 = v19;
    v11 = v20;
    v22 = 0;
    sub_2402BDC3C();
    v13 = v12;
    v21 = 1;
    v15 = sub_2402BDBDC();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v11);
    *(_QWORD *)v10 = v13;
    *(_QWORD *)(v10 + 8) = v15;
    *(_BYTE *)(v10 + 16) = v17 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_240281650@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NonRepeatingTaskRequest.init(from:)(a1, a2);
}

uint64_t sub_240281664(_QWORD *a1)
{
  return NonRepeatingTaskRequest.encode(to:)(a1);
}

__n128 TaskRequest.repeatingTask.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[1].n128_u8[0];
  v3 = v1[1].n128_u8[1];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  return result;
}

__n128 TaskRequest.repeatingTask.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  v3 = a1[1].n128_u8[1];
  result = *a1;
  *v1 = *a1;
  v1[1].n128_u8[0] = v2;
  v1[1].n128_u8[1] = v3;
  return result;
}

uint64_t (*TaskRequest.repeatingTask.modify())()
{
  return nullsub_1;
}

__n128 TaskRequest.nonRepeatingTask.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 40);
  v3 = *(_BYTE *)(v1 + 41);
  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  a1[1].n128_u8[1] = v3;
  return result;
}

__n128 TaskRequest.nonRepeatingTask.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  v3 = a1[1].n128_u8[1];
  result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(_BYTE *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 41) = v3;
  return result;
}

uint64_t (*TaskRequest.nonRepeatingTask.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t TaskRequest.requiresNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = result;
  return result;
}

uint64_t (*TaskRequest.requiresNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresExternalPower.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t TaskRequest.requiresExternalPower.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

uint64_t (*TaskRequest.requiresExternalPower.modify())()
{
  return nullsub_1;
}

void TaskRequest.priority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 44);
}

_BYTE *TaskRequest.priority.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = *result;
  return result;
}

uint64_t (*TaskRequest.priority.modify())()
{
  return nullsub_1;
}

void TaskRequest.requiresProtectionClass.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 45);
}

_BYTE *TaskRequest.requiresProtectionClass.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 45) = *result;
  return result;
}

uint64_t (*TaskRequest.requiresProtectionClass.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.preventsDeviceSleep.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 46);
}

uint64_t TaskRequest.preventsDeviceSleep.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 46) = result;
  return result;
}

uint64_t (*TaskRequest.preventsDeviceSleep.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.randomInitialDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t TaskRequest.randomInitialDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*TaskRequest.randomInitialDelay.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.postInstall.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t TaskRequest.postInstall.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 57) = result;
  return result;
}

uint64_t (*TaskRequest.postInstall.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresInexpensiveNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t TaskRequest.requiresInexpensiveNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 58) = result;
  return result;
}

uint64_t (*TaskRequest.requiresInexpensiveNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresUnconstrainedNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 59);
}

uint64_t TaskRequest.requiresUnconstrainedNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 59) = result;
  return result;
}

uint64_t (*TaskRequest.requiresUnconstrainedNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.appRefresh.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 60);
}

uint64_t TaskRequest.appRefresh.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 60) = result;
  return result;
}

uint64_t (*TaskRequest.appRefresh.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresUserInactivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 61);
}

uint64_t TaskRequest.requiresUserInactivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 61) = result;
  return result;
}

uint64_t (*TaskRequest.requiresUserInactivity.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresSignificantUserInactivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 62);
}

uint64_t TaskRequest.requiresSignificantUserInactivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 62) = result;
  return result;
}

uint64_t (*TaskRequest.requiresSignificantUserInactivity.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.powerNap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 63);
}

uint64_t TaskRequest.powerNap.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 63) = result;
  return result;
}

uint64_t (*TaskRequest.powerNap.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.resourceIntensive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t TaskRequest.resourceIntensive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

uint64_t (*TaskRequest.resourceIntensive.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.resources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.resources.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*TaskRequest.resources.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.mayRebootDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t TaskRequest.mayRebootDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = result;
  return result;
}

uint64_t (*TaskRequest.mayRebootDevice.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.userRequestedBackupTask.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t TaskRequest.userRequestedBackupTask.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = result;
  return result;
}

uint64_t (*TaskRequest.userRequestedBackupTask.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.networkDownloadSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t TaskRequest.networkDownloadSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*TaskRequest.networkDownloadSize.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.networkUploadSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t TaskRequest.networkUploadSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*TaskRequest.networkUploadSize.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.communicatesWithPairedDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 113);
}

uint64_t TaskRequest.communicatesWithPairedDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 113) = result;
  return result;
}

uint64_t (*TaskRequest.communicatesWithPairedDevice.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.shouldWakeDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 114);
}

uint64_t TaskRequest.shouldWakeDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 114) = result;
  return result;
}

uint64_t (*TaskRequest.shouldWakeDevice.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.groupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskRequest.groupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  return result;
}

uint64_t (*TaskRequest.groupName.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.groupConcurrencyLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t TaskRequest.groupConcurrencyLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 136) = result;
  *(_BYTE *)(v2 + 144) = a2 & 1;
  return result;
}

uint64_t (*TaskRequest.groupConcurrencyLimit.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.rateLimitConfigurationName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskRequest.rateLimitConfigurationName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t (*TaskRequest.rateLimitConfigurationName.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.expectedDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t TaskRequest.expectedDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 168) = result;
  *(_BYTE *)(v2 + 176) = a2 & 1;
  return result;
}

uint64_t (*TaskRequest.expectedDuration.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.powerBudgeted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 177);
}

uint64_t TaskRequest.powerBudgeted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 177) = result;
  return result;
}

uint64_t (*TaskRequest.powerBudgeted.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.dataBudgeted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 178);
}

uint64_t TaskRequest.dataBudgeted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 178) = result;
  return result;
}

uint64_t (*TaskRequest.dataBudgeted.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.relatedApplications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.relatedApplications.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 184) = a1;
  return result;
}

uint64_t (*TaskRequest.relatedApplications.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.involvedProcesses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.involvedProcesses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 192) = a1;
  return result;
}

uint64_t (*TaskRequest.involvedProcesses.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.runOnAppForeground.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 200);
}

uint64_t TaskRequest.runOnAppForeground.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 200) = result;
  return result;
}

uint64_t (*TaskRequest.runOnAppForeground.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requestsApplicationLaunch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 201);
}

uint64_t TaskRequest.requestsApplicationLaunch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 201) = result;
  return result;
}

uint64_t (*TaskRequest.requestsApplicationLaunch.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresBuddyComplete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 202);
}

uint64_t TaskRequest.requiresBuddyComplete.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 202) = result;
  return result;
}

uint64_t (*TaskRequest.requiresBuddyComplete.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.targetDevice.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.targetDevice.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 208) = a1;
  return result;
}

uint64_t (*TaskRequest.targetDevice.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.remoteDevice.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskRequest.remoteDevice.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 216) = a1;
  *(_QWORD *)(v2 + 224) = a2;
  return result;
}

uint64_t (*TaskRequest.remoteDevice.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.requiresRemoteDeviceWake.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 232);
}

uint64_t TaskRequest.requiresRemoteDeviceWake.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 232) = result;
  return result;
}

uint64_t (*TaskRequest.requiresRemoteDeviceWake.modify())()
{
  return nullsub_1;
}

void TaskRequest.runOnMotionState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 233);
}

_BYTE *TaskRequest.runOnMotionState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 233) = *result;
  return result;
}

uint64_t (*TaskRequest.runOnMotionState.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.producedResultIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.producedResultIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 240) = a1;
  return result;
}

uint64_t (*TaskRequest.producedResultIdentifiers.modify())()
{
  return nullsub_1;
}

uint64_t TaskRequest.dependencies.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskRequest.dependencies.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 248) = a1;
  return result;
}

uint64_t (*TaskRequest.dependencies.modify())()
{
  return nullsub_1;
}

__n128 TaskRequest.init(repeatingTask:nonRepeatingTask:requiresNetworkConnectivity:requiresExternalPower:priority:requiresProtectionClass:preventsDeviceSleep:randomInitialDelay:postInstall:requiresInexpensiveNetworkConnectivity:requiresUnconstrainedNetworkConnectivity:appRefresh:requiresUserInactivity:requiresSignificantUserInactivity:powerNap:resourceIntensive:resources:mayRebootDevice:userRequestedBackupTask:networkDownloadSize:networkUploadSize:communicatesWithPairedDevice:shouldWakeDevice:groupName:groupConcurrencyLimit:rateLimitConfigurationName:expectedDuration:powerBudgeted:dataBudgeted:relatedApplications:involvedProcesses:runOnAppForeground:requestsApplicationLaunch:requiresBuddyComplete:targetDevice:remoteDevice:requiresRemoteDeviceWake:runOnMotionState:producedResultIdentifiers:dependencies:)@<Q0>(__int128 *a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, char a4@<W3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, __int16 a12, uint64_t a13, char a14, uint64_t a15, int a16, __n128 a17, uint64_t a18, char a19, __int128 a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,int a25,__int128 a26,uint64_t a27,char a28,_BYTE *a29,uint64_t a30,uint64_t a31)
{
  __int128 v31;
  __int128 v32;
  __n128 result;

  *(_BYTE *)(a9 + 16) = *((_BYTE *)a1 + 16);
  v31 = *a1;
  *(_BYTE *)(a9 + 17) = *((_BYTE *)a1 + 17);
  *(_BYTE *)(a9 + 40) = *((_BYTE *)a2 + 16);
  v32 = *a2;
  *(_BYTE *)(a9 + 41) = *((_BYTE *)a2 + 17);
  *(_BYTE *)(a9 + 42) = a3;
  *(_BYTE *)(a9 + 43) = a4;
  *(_BYTE *)(a9 + 44) = *a5;
  *(_BYTE *)(a9 + 45) = *a6;
  *(_BYTE *)(a9 + 46) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_BYTE *)(a9 + 56) = a10 & 1;
  *(_DWORD *)(a9 + 57) = *(_DWORD *)((char *)&a10 + 1);
  *(_DWORD *)(a9 + 61) = *(_DWORD *)((char *)&a10 + 5);
  *(_QWORD *)(a9 + 72) = a11;
  *(_WORD *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = a13;
  *(_BYTE *)(a9 + 96) = a14 & 1;
  *(_QWORD *)(a9 + 104) = a15;
  *(_BYTE *)(a9 + 112) = a16 & 1;
  *(_WORD *)(a9 + 113) = *(_WORD *)((char *)&a16 + 1);
  *(_QWORD *)(a9 + 136) = a18;
  *(_BYTE *)(a9 + 144) = a19 & 1;
  *(_QWORD *)(a9 + 168) = a21;
  *(_BYTE *)(a9 + 176) = a22 & 1;
  *(_WORD *)(a9 + 177) = *(_WORD *)((char *)&a22 + 1);
  *(_QWORD *)(a9 + 184) = a23;
  *(_QWORD *)(a9 + 192) = a24;
  *(_BYTE *)(a9 + 200) = a25;
  *(_WORD *)(a9 + 201) = *(_WORD *)((char *)&a25 + 1);
  *(_QWORD *)(a9 + 224) = a27;
  *(_BYTE *)(a9 + 232) = a28;
  *(_BYTE *)(a9 + 233) = *a29;
  *(_QWORD *)(a9 + 240) = a30;
  *(_QWORD *)(a9 + 248) = a31;
  *(_OWORD *)a9 = v31;
  result = a17;
  *(_OWORD *)(a9 + 24) = v32;
  *(__n128 *)(a9 + 120) = a17;
  *(_OWORD *)(a9 + 152) = a20;
  *(_OWORD *)(a9 + 208) = a26;
  return result;
}

uint64_t sub_240281F3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240281F7C + 4 * byte_2402C46AE[a1]))(0x6E69746165706572, 0xED00006B73615467);
}

unint64_t sub_240281F7C()
{
  return 0xD000000000000010;
}

void sub_240282324()
{
  JUMPOUT(0x24028233CLL);
}

uint64_t sub_240282348()
{
  return 0x6E65646E65706564;
}

uint64_t sub_240282368()
{
  unsigned __int8 *v0;

  return sub_240281F3C(*v0);
}

uint64_t sub_240282370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240286958(a1, a2);
  *a3 = result;
  return result;
}

void sub_240282394(_BYTE *a1@<X8>)
{
  *a1 = 40;
}

uint64_t sub_2402823A0()
{
  sub_240282F04();
  return sub_2402BDE88();
}

uint64_t sub_2402823C8()
{
  sub_240282F04();
  return sub_2402BDE94();
}

uint64_t TaskRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _DWORD v16[4];
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  int v71;
  char v72;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0518);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v64 = v1[1];
  v65 = v7;
  v8 = *((_BYTE *)v1 + 16);
  v9 = *((_BYTE *)v1 + 17);
  v10 = v1[3];
  v62 = v1[4];
  v63 = v10;
  v71 = *((unsigned __int8 *)v1 + 40);
  LODWORD(v10) = *((unsigned __int8 *)v1 + 41);
  v60 = *((unsigned __int8 *)v1 + 42);
  v61 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 43);
  v58 = *((unsigned __int8 *)v1 + 44);
  v59 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 45);
  v56 = *((unsigned __int8 *)v1 + 46);
  v57 = v10;
  v54 = v1[6];
  v55 = *((unsigned __int8 *)v1 + 56);
  LODWORD(v10) = *((unsigned __int8 *)v1 + 57);
  v52 = *((unsigned __int8 *)v1 + 58);
  v53 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 59);
  v50 = *((unsigned __int8 *)v1 + 60);
  v51 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 61);
  v48 = *((unsigned __int8 *)v1 + 62);
  v49 = v10;
  LODWORD(v10) = *((unsigned __int8 *)v1 + 63);
  v46 = *((unsigned __int8 *)v1 + 64);
  v47 = v10;
  v45 = v1[9];
  v16[2] = *((unsigned __int8 *)v1 + 80);
  v16[3] = *((unsigned __int8 *)v1 + 81);
  v17 = v1[11];
  v18 = *((unsigned __int8 *)v1 + 96);
  v20 = v1[13];
  v19 = *((unsigned __int8 *)v1 + 112);
  v21 = *((unsigned __int8 *)v1 + 113);
  v22 = *((unsigned __int8 *)v1 + 114);
  v23 = v1[15];
  v24 = v1[16];
  v25 = v1[17];
  v26 = *((unsigned __int8 *)v1 + 144);
  v28 = v1[19];
  v27 = v1[20];
  v30 = v1[21];
  v29 = *((unsigned __int8 *)v1 + 176);
  v31 = *((unsigned __int8 *)v1 + 177);
  v32 = *((unsigned __int8 *)v1 + 178);
  v33 = v1[23];
  v34 = v1[24];
  v35 = *((unsigned __int8 *)v1 + 200);
  v36 = *((unsigned __int8 *)v1 + 201);
  v37 = *((unsigned __int8 *)v1 + 202);
  v38 = v1[26];
  v40 = v1[27];
  v39 = v1[28];
  LODWORD(v5) = *((unsigned __int8 *)v1 + 233);
  v41 = *((unsigned __int8 *)v1 + 232);
  v42 = v5;
  v11 = v1[31];
  v43 = v1[30];
  v44 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240282F04();
  sub_2402BDE70();
  v67 = v65;
  v68 = v64;
  v69 = v8;
  v70 = v9;
  v72 = 0;
  sub_240282F48();
  v12 = v66;
  sub_2402BDCD8();
  if (v12)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v57;
  v13 = v58;
  v66 = v4;
  v67 = v63;
  v68 = v62;
  v69 = v71;
  v70 = v61;
  v72 = 1;
  sub_240282F8C();
  sub_2402BDCD8();
  LOBYTE(v67) = 2;
  sub_2402BDCA8();
  LOBYTE(v67) = 3;
  sub_2402BDCA8();
  LOBYTE(v67) = v13;
  v72 = 4;
  sub_240282FD0();
  sub_2402BDCD8();
  LOBYTE(v67) = v14;
  v72 = 5;
  sub_240283014();
  sub_2402BDCD8();
  LOBYTE(v67) = 6;
  sub_2402BDCA8();
  LOBYTE(v67) = 7;
  sub_2402BDCB4();
  LOBYTE(v67) = 8;
  sub_2402BDCA8();
  LOBYTE(v67) = 9;
  sub_2402BDCA8();
  LOBYTE(v67) = 10;
  sub_2402BDCA8();
  LOBYTE(v67) = 11;
  sub_2402BDCA8();
  LOBYTE(v67) = 12;
  sub_2402BDCA8();
  LOBYTE(v67) = 13;
  sub_2402BDCA8();
  LOBYTE(v67) = 14;
  sub_2402BDCA8();
  LOBYTE(v67) = 15;
  sub_2402BDCA8();
  v67 = v45;
  v72 = 16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543525C8);
  sub_240285254(&qword_256FE0540, &qword_2543525C8, (uint64_t (*)(void))sub_240283058, MEMORY[0x24BEE12A0]);
  sub_2402BDCD8();
  LOBYTE(v67) = 17;
  sub_2402BDCA8();
  LOBYTE(v67) = 18;
  sub_2402BDCA8();
  LOBYTE(v67) = 19;
  sub_2402BDCE4();
  LOBYTE(v67) = 20;
  sub_2402BDCE4();
  LOBYTE(v67) = 21;
  sub_2402BDCA8();
  LOBYTE(v67) = 22;
  sub_2402BDCA8();
  LOBYTE(v67) = 23;
  sub_2402BDC9C();
  LOBYTE(v67) = 24;
  sub_2402BDCCC();
  LOBYTE(v67) = 25;
  sub_2402BDC9C();
  LOBYTE(v67) = 26;
  sub_2402BDCB4();
  LOBYTE(v67) = 27;
  sub_2402BDCA8();
  LOBYTE(v67) = 28;
  sub_2402BDCA8();
  v67 = v33;
  v72 = 29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_24026414C(&qword_254352228, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_2402BDCD8();
  v67 = v34;
  v72 = 30;
  sub_2402BDCD8();
  LOBYTE(v67) = 31;
  sub_2402BDCA8();
  LOBYTE(v67) = 32;
  sub_2402BDCA8();
  LOBYTE(v67) = 33;
  sub_2402BDCA8();
  v67 = v38;
  v72 = 34;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543525B8);
  sub_240285254(&qword_256FE0550, &qword_2543525B8, (uint64_t (*)(void))sub_24028309C, MEMORY[0x24BEE12A0]);
  sub_2402BDCD8();
  LOBYTE(v67) = 35;
  sub_2402BDC9C();
  LOBYTE(v67) = 36;
  sub_2402BDCA8();
  LOBYTE(v67) = v42;
  v72 = 37;
  sub_2402830E0();
  sub_2402BDCD8();
  v67 = v43;
  v72 = 38;
  sub_2402BDCD8();
  v67 = v44;
  v72 = 39;
  sub_2402BDCD8();
  return (*(uint64_t (**)(char *, _QWORD))(v66 + 8))(v6, 0);
}

unint64_t sub_240282F04()
{
  unint64_t result;

  result = qword_254352518;
  if (!qword_254352518)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5218, &type metadata for TaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352518);
  }
  return result;
}

unint64_t sub_240282F48()
{
  unint64_t result;

  result = qword_256FE0520;
  if (!qword_256FE0520)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for RepeatingTaskRequest, &type metadata for RepeatingTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FE0520);
  }
  return result;
}

unint64_t sub_240282F8C()
{
  unint64_t result;

  result = qword_256FE0528;
  if (!qword_256FE0528)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for NonRepeatingTaskRequest, &type metadata for NonRepeatingTaskRequest);
    atomic_store(result, (unint64_t *)&qword_256FE0528);
  }
  return result;
}

unint64_t sub_240282FD0()
{
  unint64_t result;

  result = qword_256FE0530;
  if (!qword_256FE0530)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestPriority, &type metadata for TaskRequestPriority);
    atomic_store(result, (unint64_t *)&qword_256FE0530);
  }
  return result;
}

unint64_t sub_240283014()
{
  unint64_t result;

  result = qword_256FE0538;
  if (!qword_256FE0538)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestProtectionClass, &type metadata for TaskRequestProtectionClass);
    atomic_store(result, (unint64_t *)&qword_256FE0538);
  }
  return result;
}

unint64_t sub_240283058()
{
  unint64_t result;

  result = qword_256FE0548;
  if (!qword_256FE0548)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestResources, &type metadata for TaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_256FE0548);
  }
  return result;
}

unint64_t sub_24028309C()
{
  unint64_t result;

  result = qword_256FE0558;
  if (!qword_256FE0558)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestDevice, &type metadata for TaskRequestDevice);
    atomic_store(result, (unint64_t *)&qword_256FE0558);
  }
  return result;
}

unint64_t sub_2402830E0()
{
  unint64_t result;

  result = qword_256FE0560;
  if (!qword_256FE0560)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestMotionState, &type metadata for TaskRequestMotionState);
    atomic_store(result, (unint64_t *)&qword_256FE0560);
  }
  return result;
}

uint64_t TaskRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int128 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  __int128 v113;
  int v114;
  _QWORD *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  __int128 v122;
  _BYTE v123[32];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;
  uint64_t v138;
  __int128 v139;
  unsigned __int8 v140;
  unsigned __int8 v141;
  int v142;
  __int16 v143;
  __int128 v144;
  char v145;
  char v146;
  char v147;
  char v148;
  char v149;
  char v150;
  char v151;
  uint64_t v152;
  char v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  char v159;
  char v160;
  char v161;
  _BYTE v162[7];
  uint64_t v163;
  char v164;
  char v165;
  int v166;
  __int16 v167;
  uint64_t v168;
  char v169;
  _BYTE v170[7];
  uint64_t v171;
  char v172;
  char v173;
  char v174;
  int v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  _BYTE v181[7];
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  char v186;
  char v187;
  int v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  char v194;
  int v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  int v202;
  __int16 v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  __int16 v207;
  int v208;
  char v209;
  int v210;
  char v211;
  char v212;
  _BYTE v213[7];
  char v214;
  int v215;
  char v216;
  char v217;
  _BYTE v218[7];
  char v219;
  int v220;
  __int16 v221;
  _BYTE v222[7];
  char v223;
  char v224;
  int v225;
  __int16 v226;
  char v227;
  uint64_t v228;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543525D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = 1;
  v224 = 1;
  v223 = 1;
  v219 = 1;
  v217 = 1;
  v214 = 1;
  v212 = 1;
  v9 = a1[3];
  v115 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_240282F04();
  sub_2402BDE64();
  if (!v2)
  {
    LOBYTE(v122) = 0;
    sub_240285100();
    sub_2402BDC00();
    v81 = v139;
    v82 = v140;
    v18 = v141;
    v227 = v141;
    LOBYTE(v122) = 1;
    sub_240285144();
    sub_2402BDC00();
    v113 = v139;
    v19 = v140;
    v20 = v141;
    v224 = v141;
    LOBYTE(v139) = 2;
    v21 = sub_2402BDBD0();
    v114 = v19;
    v79 = v18;
    v80 = v21;
    v78 = v20;
    LOBYTE(v139) = 3;
    v22 = sub_2402BDBD0();
    LOBYTE(v122) = 4;
    sub_240285188();
    sub_2402BDC00();
    v112 = v139;
    LOBYTE(v122) = 5;
    sub_2402851CC();
    sub_2402BDC00();
    v23 = v139;
    LOBYTE(v139) = 6;
    v24 = sub_2402BDBD0();
    v111 = v23;
    v77 = v24;
    LOBYTE(v139) = 7;
    v25 = sub_2402BDBDC();
    v27 = v26;
    v76 = v22;
    v110 = v25;
    v223 = v26 & 1;
    LOBYTE(v139) = 8;
    v28 = sub_2402BDBD0();
    v228 = 0;
    v75 = v28;
    LOBYTE(v139) = 9;
    v121 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 10;
    v120 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 11;
    v119 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 12;
    v118 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 13;
    v117 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 14;
    v116 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 15;
    v102 = sub_2402BDBD0();
    v228 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543525C8);
    LOBYTE(v122) = 16;
    sub_240285254(&qword_2543525D0, &qword_2543525C8, (uint64_t (*)(void))sub_240285210, MEMORY[0x24BEE12D0]);
    v29 = v228;
    sub_2402BDC00();
    v228 = v29;
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      v104 = 0;
      v87 = 0;
      v88 = 0;
      v105 = 0;
      v106 = 0;
      v89 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v91 = 0;
LABEL_10:
      v90 = 2;
      v85 = 2;
      v86 = 2;
      v83 = 8;
      v84 = 2;
      v92 = 2;
      v94 = 2;
      v95 = 2;
      v96 = 2;
      v100 = 2;
      v101 = 2;
LABEL_11:
      v10 = v82;
      v11 = *((_QWORD *)&v81 + 1);
      v12 = v81;
      v16 = v80;
      v15 = v76;
      v14 = v77;
      v13 = v75;
      goto LABEL_4;
    }
    v30 = v139;
    LOBYTE(v139) = 17;
    v31 = v30;
    swift_bridgeObjectRetain();
    v32 = v228;
    v101 = sub_2402BDBD0();
    v228 = v32;
    v91 = v31;
    if (v32)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      v104 = 0;
      v87 = 0;
      v88 = 0;
      v105 = 0;
      v106 = 0;
      v89 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      goto LABEL_10;
    }
    LOBYTE(v139) = 18;
    v100 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 19;
    v109 = sub_2402BDC0C();
    v74 = v33;
    v228 = 0;
    v219 = v33 & 1;
    LOBYTE(v139) = 20;
    v108 = sub_2402BDC0C();
    v73 = v34;
    v228 = 0;
    v217 = v34 & 1;
    LOBYTE(v139) = 21;
    v96 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 22;
    v95 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 23;
    v107 = sub_2402BDBC4();
    v228 = 0;
    v36 = v35;
    LOBYTE(v139) = 24;
    swift_bridgeObjectRetain();
    v37 = v228;
    v106 = sub_2402BDBF4();
    v72 = v38;
    v228 = v37;
    v89 = v36;
    if (v37)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      v104 = 0;
      v87 = 0;
      v88 = 0;
      v105 = 0;
      v106 = 0;
LABEL_17:
      v90 = 2;
      v85 = 2;
      v86 = 2;
      v83 = 8;
      v84 = 2;
      v92 = 2;
      v94 = 2;
      goto LABEL_11;
    }
    v214 = v72 & 1;
    LOBYTE(v139) = 25;
    v105 = sub_2402BDBC4();
    v88 = v39;
    v228 = 0;
    LOBYTE(v139) = 26;
    swift_bridgeObjectRetain();
    v40 = v228;
    v104 = sub_2402BDBDC();
    v71 = v41;
    v228 = v40;
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      v104 = 0;
      v87 = 0;
      goto LABEL_17;
    }
    v212 = v71 & 1;
    LOBYTE(v139) = 27;
    v94 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 28;
    v92 = sub_2402BDBD0();
    v228 = 0;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
    LOBYTE(v122) = 29;
    v69 = sub_24026414C(&qword_2543521E8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    v70 = v42;
    v43 = v228;
    sub_2402BDC00();
    v228 = v43;
    if (v43)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      v87 = 0;
LABEL_24:
      v90 = 2;
      v85 = 2;
      v86 = 2;
      v83 = 8;
      v84 = 2;
      goto LABEL_11;
    }
    LOBYTE(v122) = 30;
    v87 = v139;
    swift_bridgeObjectRetain();
    v44 = v228;
    sub_2402BDC00();
    v228 = v44;
    if (v44)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v103 = 0;
      goto LABEL_24;
    }
    v45 = v139;
    LOBYTE(v139) = 31;
    v103 = v45;
    swift_bridgeObjectRetain();
    v46 = v228;
    v86 = sub_2402BDBD0();
    v228 = v46;
    if (v46)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      goto LABEL_24;
    }
    LOBYTE(v139) = 32;
    v84 = sub_2402BDBD0();
    v228 = 0;
    LOBYTE(v139) = 33;
    v85 = sub_2402BDBD0();
    v228 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543525B8);
    LOBYTE(v122) = 34;
    sub_240285254(&qword_2543525C0, &qword_2543525B8, (uint64_t (*)(void))sub_2402852B8, MEMORY[0x24BEE12D0]);
    v47 = v228;
    sub_2402BDC00();
    v228 = v47;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
    }
    else
    {
      v48 = v139;
      LOBYTE(v139) = 35;
      v99 = v48;
      swift_bridgeObjectRetain();
      v49 = v228;
      v97 = sub_2402BDBC4();
      v98 = v50;
      v228 = v49;
      if (v49)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v93 = 0;
        v97 = 0;
        v98 = 0;
      }
      else
      {
        LOBYTE(v139) = 36;
        swift_bridgeObjectRetain();
        v51 = v228;
        v90 = sub_2402BDBD0();
        v228 = v51;
        if (!v51)
        {
          LOBYTE(v122) = 37;
          sub_2402852FC();
          v52 = v228;
          sub_2402BDC00();
          v228 = v52;
          if (!v52)
          {
            v83 = v139;
            LOBYTE(v122) = 38;
            sub_2402BDC00();
            v228 = 0;
            v137 = 39;
            v93 = v139;
            swift_bridgeObjectRetain();
            v53 = v228;
            sub_2402BDC00();
            v228 = v53;
            if (!v53)
            {
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              v70 = v138;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v123[1] = v79;
              v123[25] = v78;
              BYTE8(v124) = v27 & 1;
              LOBYTE(v127) = v74 & 1;
              LOBYTE(v128) = v73 & 1;
              LOBYTE(v130) = v72 & 1;
              LOBYTE(v132) = v71 & 1;
              v122 = v81;
              v123[0] = v82;
              *(_OWORD *)&v123[8] = v113;
              v123[24] = v114;
              v123[26] = v80;
              v123[27] = v76;
              v123[28] = v112;
              v123[29] = v111;
              v123[30] = v77;
              *(_QWORD *)&v124 = v110;
              BYTE9(v124) = v75;
              BYTE10(v124) = v121;
              BYTE11(v124) = v120;
              BYTE12(v124) = v119;
              BYTE13(v124) = v118;
              BYTE14(v124) = v117;
              HIBYTE(v124) = v116;
              LOBYTE(v125) = v102;
              *((_QWORD *)&v125 + 1) = v31;
              LOBYTE(v126) = v101;
              BYTE1(v126) = v100;
              *((_QWORD *)&v126 + 1) = v109;
              *((_QWORD *)&v127 + 1) = v108;
              BYTE1(v128) = v96;
              BYTE2(v128) = v95;
              *((_QWORD *)&v128 + 1) = v107;
              *(_QWORD *)&v129 = v36;
              *((_QWORD *)&v129 + 1) = v106;
              v55 = v87;
              v54 = v88;
              *((_QWORD *)&v130 + 1) = v105;
              *(_QWORD *)&v131 = v88;
              v56 = v103;
              *((_QWORD *)&v131 + 1) = v104;
              BYTE1(v132) = v94;
              BYTE2(v132) = v92;
              *((_QWORD *)&v132 + 1) = v87;
              *(_QWORD *)&v133 = v103;
              BYTE8(v133) = v86;
              BYTE9(v133) = v84;
              BYTE10(v133) = v85;
              v57 = v98;
              v58 = v99;
              *(_QWORD *)&v134 = v99;
              *((_QWORD *)&v134 + 1) = v97;
              *(_QWORD *)&v135 = v98;
              BYTE8(v135) = v90;
              BYTE9(v135) = v83;
              v59 = v93;
              *(_QWORD *)&v136 = v93;
              v60 = v70;
              *((_QWORD *)&v136 + 1) = v70;
              sub_24023DA80((uint64_t)&v122);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v61 = v134;
              a2[12] = v133;
              a2[13] = v61;
              v62 = v136;
              a2[14] = v135;
              a2[15] = v62;
              v63 = v130;
              a2[8] = v129;
              a2[9] = v63;
              v64 = v132;
              a2[10] = v131;
              a2[11] = v64;
              v65 = v126;
              a2[4] = v125;
              a2[5] = v65;
              v66 = v128;
              a2[6] = v127;
              a2[7] = v66;
              v67 = *(_OWORD *)v123;
              *a2 = v122;
              a2[1] = v67;
              v68 = v124;
              a2[2] = *(_OWORD *)&v123[16];
              a2[3] = v68;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
              v139 = v81;
              v140 = v82;
              v144 = v113;
              v145 = v114;
              v147 = v80;
              v148 = v76;
              v149 = v112;
              v150 = v111;
              v151 = v77;
              v152 = v110;
              v154 = v75;
              v155 = v121;
              v156 = v120;
              v157 = v119;
              v158 = v118;
              v159 = v117;
              v141 = v227;
              v142 = v225;
              v143 = v226;
              v146 = v224;
              v153 = v223;
              v160 = v116;
              v161 = v102;
              *(_DWORD *)v162 = *(_DWORD *)v222;
              *(_DWORD *)&v162[3] = *(_DWORD *)&v222[3];
              v163 = v91;
              v164 = v101;
              v165 = v100;
              v167 = v221;
              v166 = v220;
              v168 = v109;
              v169 = v219;
              *(_DWORD *)&v170[3] = *(_DWORD *)&v218[3];
              *(_DWORD *)v170 = *(_DWORD *)v218;
              v171 = v108;
              v172 = v217;
              v173 = v96;
              v174 = v95;
              v175 = v215;
              v176 = v216;
              v177 = v107;
              v178 = v89;
              v179 = v106;
              v180 = v214;
              *(_DWORD *)&v181[3] = *(_DWORD *)&v213[3];
              *(_DWORD *)v181 = *(_DWORD *)v213;
              v182 = v105;
              v183 = v54;
              v184 = v104;
              v185 = v212;
              v186 = v94;
              v187 = v92;
              v189 = v211;
              v188 = v210;
              v190 = v55;
              v191 = v56;
              v192 = v86;
              v193 = v84;
              v194 = v85;
              v196 = v209;
              v195 = v208;
              v197 = v58;
              v198 = v97;
              v199 = v57;
              v200 = v90;
              v201 = v83;
              v203 = v207;
              v202 = v206;
              v204 = v59;
              v205 = v60;
              return sub_240245E64((uint64_t)&v139);
            }
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_11;
          }
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v93 = 0;
          goto LABEL_32;
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v93 = 0;
      }
    }
    v90 = 2;
LABEL_32:
    v83 = 8;
    goto LABEL_11;
  }
  v228 = v2;
  v93 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v103 = 0;
  v104 = 0;
  v87 = 0;
  v88 = 0;
  v105 = 0;
  v106 = 0;
  v89 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v91 = 0;
  v114 = 0;
  v113 = 0uLL;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v112 = 4;
  v111 = 5;
  v90 = 2;
  v85 = 2;
  v86 = 2;
  v83 = 8;
  v84 = 2;
  v92 = 2;
  v94 = 2;
  v95 = 2;
  v96 = 2;
  v100 = 2;
  v101 = 2;
  v102 = 2;
  v116 = 2;
  v117 = 2;
  v118 = 2;
  v119 = 2;
  v120 = 2;
  v121 = 2;
  v13 = 2;
  v14 = 2;
  v15 = 2;
  v16 = 2;
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  *(_QWORD *)&v139 = v12;
  *((_QWORD *)&v139 + 1) = v11;
  v140 = v10;
  v144 = v113;
  v145 = v114;
  v147 = v16;
  v148 = v15;
  v149 = v112;
  v150 = v111;
  v151 = v14;
  v152 = v110;
  v154 = v13;
  v155 = v121;
  v156 = v120;
  v157 = v119;
  v158 = v118;
  v141 = v227;
  v142 = v225;
  v143 = v226;
  v146 = v224;
  v153 = v223;
  v159 = v117;
  v160 = v116;
  v161 = v102;
  *(_DWORD *)v162 = *(_DWORD *)v222;
  *(_DWORD *)&v162[3] = *(_DWORD *)&v222[3];
  v163 = v91;
  v164 = v101;
  v165 = v100;
  v167 = v221;
  v166 = v220;
  v168 = v109;
  v169 = v219;
  *(_DWORD *)&v170[3] = *(_DWORD *)&v218[3];
  *(_DWORD *)v170 = *(_DWORD *)v218;
  v171 = v108;
  v172 = v217;
  v173 = v96;
  v174 = v95;
  v175 = v215;
  v176 = v216;
  v177 = v107;
  v178 = v89;
  v179 = v106;
  v180 = v214;
  *(_DWORD *)&v181[3] = *(_DWORD *)&v213[3];
  *(_DWORD *)v181 = *(_DWORD *)v213;
  v182 = v105;
  v183 = v88;
  v184 = v104;
  v185 = v212;
  v186 = v94;
  v187 = v92;
  v189 = v211;
  v188 = v210;
  v190 = v87;
  v191 = v103;
  v192 = v86;
  v193 = v84;
  v194 = v85;
  v196 = v209;
  v195 = v208;
  v197 = v99;
  v198 = v97;
  v199 = v98;
  v200 = v90;
  v201 = v83;
  v203 = v207;
  v202 = v206;
  v204 = v93;
  v205 = 0;
  return sub_240245E64((uint64_t)&v139);
}

unint64_t sub_240285100()
{
  unint64_t result;

  result = qword_254352580;
  if (!qword_254352580)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for RepeatingTaskRequest, &type metadata for RepeatingTaskRequest);
    atomic_store(result, (unint64_t *)&qword_254352580);
  }
  return result;
}

unint64_t sub_240285144()
{
  unint64_t result;

  result = qword_254352598;
  if (!qword_254352598)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for NonRepeatingTaskRequest, &type metadata for NonRepeatingTaskRequest);
    atomic_store(result, (unint64_t *)&qword_254352598);
  }
  return result;
}

unint64_t sub_240285188()
{
  unint64_t result;

  result = qword_254352550;
  if (!qword_254352550)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestPriority, &type metadata for TaskRequestPriority);
    atomic_store(result, (unint64_t *)&qword_254352550);
  }
  return result;
}

unint64_t sub_2402851CC()
{
  unint64_t result;

  result = qword_2543525A0;
  if (!qword_2543525A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestProtectionClass, &type metadata for TaskRequestProtectionClass);
    atomic_store(result, (unint64_t *)&qword_2543525A0);
  }
  return result;
}

unint64_t sub_240285210()
{
  unint64_t result;

  result = qword_254352588;
  if (!qword_254352588)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestResources, &type metadata for TaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_254352588);
  }
  return result;
}

uint64_t sub_240285254(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x2426820F8](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2402852B8()
{
  unint64_t result;

  result = qword_254352548;
  if (!qword_254352548)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestDevice, &type metadata for TaskRequestDevice);
    atomic_store(result, (unint64_t *)&qword_254352548);
  }
  return result;
}

unint64_t sub_2402852FC()
{
  unint64_t result;

  result = qword_254352590;
  if (!qword_254352590)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestMotionState, &type metadata for TaskRequestMotionState);
    atomic_store(result, (unint64_t *)&qword_254352590);
  }
  return result;
}

uint64_t sub_240285340@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return TaskRequest.init(from:)(a1, a2);
}

uint64_t sub_240285354(_QWORD *a1)
{
  return TaskRequest.encode(to:)(a1);
}

uint64_t TaskRequest.description.getter()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD v25[4];
  _OWORD v26[16];

  v1 = sub_2402BDE58();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[13];
  v26[12] = v0[12];
  v26[13] = v5;
  v6 = v0[15];
  v26[14] = v0[14];
  v26[15] = v6;
  v7 = v0[9];
  v26[8] = v0[8];
  v26[9] = v7;
  v8 = v0[11];
  v26[10] = v0[10];
  v26[11] = v8;
  v9 = v0[5];
  v26[4] = v0[4];
  v26[5] = v9;
  v10 = v0[7];
  v26[6] = v0[6];
  v26[7] = v10;
  v11 = v0[1];
  v26[0] = *v0;
  v26[1] = v11;
  v12 = v0[3];
  v26[2] = v0[2];
  v26[3] = v12;
  v25[3] = &type metadata for TaskRequest;
  v13 = (_OWORD *)swift_allocObject();
  v25[0] = v13;
  v14 = v0[13];
  v13[13] = v0[12];
  v13[14] = v14;
  v15 = v0[15];
  v13[15] = v0[14];
  v13[16] = v15;
  v16 = v0[9];
  v13[9] = v0[8];
  v13[10] = v16;
  v17 = v0[11];
  v13[11] = v0[10];
  v13[12] = v17;
  v18 = v0[5];
  v13[5] = v0[4];
  v13[6] = v18;
  v19 = v0[7];
  v13[7] = v0[6];
  v13[8] = v19;
  v20 = v0[1];
  v13[1] = *v0;
  v13[2] = v20;
  v21 = v0[3];
  v13[3] = v0[2];
  v13[4] = v21;
  sub_24023DA80((uint64_t)v26);
  sub_2402BDE40();
  sub_2402BDE4C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v22 = sub_24025D6B0();
  swift_release();
  strcpy((char *)v25, "TaskRequest(");
  BYTE5(v25[1]) = 0;
  HIWORD(v25[1]) = -5120;
  v24 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  sub_2402BD5F4();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v25[0];
}

uint64_t sub_240285564()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_2402855CC()
{
  unint64_t result;

  result = qword_256FE0568;
  if (!qword_256FE0568)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestPriority, &type metadata for TaskRequestPriority);
    atomic_store(result, (unint64_t *)&qword_256FE0568);
  }
  return result;
}

uint64_t sub_240285610()
{
  return sub_2402348A0(&qword_256FE0570, &qword_256FE0578, MEMORY[0x24BEE12E0]);
}

unint64_t sub_240285640()
{
  unint64_t result;

  result = qword_256FE0580;
  if (!qword_256FE0580)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestProtectionClass, &type metadata for TaskRequestProtectionClass);
    atomic_store(result, (unint64_t *)&qword_256FE0580);
  }
  return result;
}

uint64_t sub_240285684()
{
  return sub_2402348A0(&qword_256FE0588, &qword_256FE0590, MEMORY[0x24BEE12E0]);
}

unint64_t sub_2402856B4()
{
  unint64_t result;

  result = qword_256FE0598;
  if (!qword_256FE0598)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestMotionState, &type metadata for TaskRequestMotionState);
    atomic_store(result, (unint64_t *)&qword_256FE0598);
  }
  return result;
}

uint64_t sub_2402856F8()
{
  return sub_2402348A0(&qword_256FE05A0, &qword_256FE05A8, MEMORY[0x24BEE12E0]);
}

unint64_t sub_240285728()
{
  unint64_t result;

  result = qword_256FE05B0;
  if (!qword_256FE05B0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestResources, &type metadata for TaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_256FE05B0);
  }
  return result;
}

uint64_t sub_24028576C()
{
  return sub_2402348A0(&qword_256FE05B8, &qword_2543525C8, MEMORY[0x24BEE12E0]);
}

unint64_t sub_24028579C()
{
  unint64_t result;

  result = qword_256FE05C0;
  if (!qword_256FE05C0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestDevice, &type metadata for TaskRequestDevice);
    atomic_store(result, (unint64_t *)&qword_256FE05C0);
  }
  return result;
}

uint64_t sub_2402857E0()
{
  return sub_2402348A0(&qword_256FE05C8, &qword_2543525B8, MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for TaskRequestPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24028585C + 4 * byte_2402C46DB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_240285890 + 4 * byte_2402C46D6[v4]))();
}

uint64_t sub_240285890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240285898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402858A0);
  return result;
}

uint64_t sub_2402858AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402858B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2402858B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402858C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskRequestPriority()
{
  return &type metadata for TaskRequestPriority;
}

ValueMetadata *type metadata accessor for TaskRequestProtectionClass()
{
  return &type metadata for TaskRequestProtectionClass;
}

uint64_t storeEnumTagSinglePayload for TaskRequestMotionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_240285940 + 4 * byte_2402C46E5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_240285974 + 4 * byte_2402C46E0[v4]))();
}

uint64_t sub_240285974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028597C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240285984);
  return result;
}

uint64_t sub_240285990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240285998);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_24028599C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402859A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskRequestMotionState()
{
  return &type metadata for TaskRequestMotionState;
}

uint64_t _s20LighthouseBackground26TaskRequestProtectionClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_240285A0C + 4 * byte_2402C46EF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_240285A40 + 4 * byte_2402C46EA[v4]))();
}

uint64_t sub_240285A40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240285A48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240285A50);
  return result;
}

uint64_t sub_240285A5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240285A64);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_240285A68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240285A70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskRequestResources()
{
  return &type metadata for TaskRequestResources;
}

uint64_t storeEnumTagSinglePayload for TaskRequestDevice(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_240285AD8 + 4 * byte_2402C46F9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_240285B0C + 4 * byte_2402C46F4[v4]))();
}

uint64_t sub_240285B0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240285B14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240285B1CLL);
  return result;
}

uint64_t sub_240285B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240285B30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_240285B34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240285B3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskRequestDevice()
{
  return &type metadata for TaskRequestDevice;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RepeatingTaskRequest(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RepeatingTaskRequest(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RepeatingTaskRequest()
{
  return &type metadata for RepeatingTaskRequest;
}

ValueMetadata *type metadata accessor for NonRepeatingTaskRequest()
{
  return &type metadata for NonRepeatingTaskRequest;
}

uint64_t destroy for TaskRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 42) = *(_DWORD *)(a2 + 42);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 57) = *(_QWORD *)(a2 + 57);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 114) = *(_BYTE *)(a2 + 114);
  v3 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v3;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v4 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v4;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
  v5 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v5;
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  v6 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = v6;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  v7 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TaskRequest(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  v5 = *(__int128 *)((char *)a2 + 24);
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_OWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_BYTE *)(a1 + 43) = *((_BYTE *)a2 + 43);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_BYTE *)(a1 + 45) = *((_BYTE *)a2 + 45);
  *(_BYTE *)(a1 + 46) = *((_BYTE *)a2 + 46);
  v6 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
  *(_BYTE *)(a1 + 59) = *((_BYTE *)a2 + 59);
  *(_BYTE *)(a1 + 60) = *((_BYTE *)a2 + 60);
  *(_BYTE *)(a1 + 61) = *((_BYTE *)a2 + 61);
  *(_BYTE *)(a1 + 62) = *((_BYTE *)a2 + 62);
  *(_BYTE *)(a1 + 63) = *((_BYTE *)a2 + 63);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  v7 = *((_QWORD *)a2 + 11);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *((_QWORD *)a2 + 13);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 113) = *((_BYTE *)a2 + 113);
  *(_BYTE *)(a1 + 114) = *((_BYTE *)a2 + 114);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *((_QWORD *)a2 + 17);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *((_QWORD *)a2 + 21);
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_QWORD *)(a1 + 168) = v10;
  *(_BYTE *)(a1 + 177) = *((_BYTE *)a2 + 177);
  *(_BYTE *)(a1 + 178) = *((_BYTE *)a2 + 178);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_BYTE *)(a1 + 201) = *((_BYTE *)a2 + 201);
  *(_BYTE *)(a1 + 202) = *((_BYTE *)a2 + 202);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_BYTE *)(a1 + 233) = *((_BYTE *)a2 + 233);
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy256_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t assignWithTake for TaskRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 42) = *(_DWORD *)(a2 + 42);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 57) = *(_QWORD *)(a2 + 57);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_WORD *)(a1 + 113) = *(_WORD *)(a2 + 113);
  v4 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v5 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_WORD *)(a1 + 177) = *(_WORD *)(a2 + 177);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_WORD *)(a1 + 201) = *(_WORD *)(a2 + 201);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskRequest(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 256))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 256) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 256) = 0;
    if (a2)
      *(_QWORD *)(result + 72) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskRequest()
{
  return &type metadata for TaskRequest;
}

uint64_t getEnumTagSinglePayload for TaskRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD9)
    goto LABEL_17;
  if (a2 + 39 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 39) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 39;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 39;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 39;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x28;
  v8 = v6 - 40;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 39 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 39) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD8)
    return ((uint64_t (*)(void))((char *)&loc_240286374 + 4 * byte_2402C4703[v4]))();
  *a1 = a2 + 39;
  return ((uint64_t (*)(void))((char *)sub_2402863A8 + 4 * byte_2402C46FE[v4]))();
}

uint64_t sub_2402863A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402863B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402863B8);
  return result;
}

uint64_t sub_2402863C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402863CCLL);
  *(_BYTE *)result = a2 + 39;
  return result;
}

uint64_t sub_2402863D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402863D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskRequest.CodingKeys()
{
  return &type metadata for TaskRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for NonRepeatingTaskRequest.CodingKeys()
{
  return &type metadata for NonRepeatingTaskRequest.CodingKeys;
}

uint64_t _s20LighthouseBackground23NonRepeatingTaskRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_240286454 + 4 * byte_2402C470D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_240286488 + 4 * byte_2402C4708[v4]))();
}

uint64_t sub_240286488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240286490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240286498);
  return result;
}

uint64_t sub_2402864A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402864ACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2402864B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402864B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepeatingTaskRequest.CodingKeys()
{
  return &type metadata for RepeatingTaskRequest.CodingKeys;
}

unint64_t sub_2402864D8()
{
  unint64_t result;

  result = qword_256FE05D0;
  if (!qword_256FE05D0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5080, &type metadata for RepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE05D0);
  }
  return result;
}

unint64_t sub_240286520()
{
  unint64_t result;

  result = qword_256FE05D8;
  if (!qword_256FE05D8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5138, &type metadata for NonRepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE05D8);
  }
  return result;
}

unint64_t sub_240286568()
{
  unint64_t result;

  result = qword_256FE05E0;
  if (!qword_256FE05E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C51F0, &type metadata for TaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE05E0);
  }
  return result;
}

unint64_t sub_2402865B0()
{
  unint64_t result;

  result = qword_254352528;
  if (!qword_254352528)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5160, &type metadata for TaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352528);
  }
  return result;
}

unint64_t sub_2402865F8()
{
  unint64_t result;

  result = qword_254352520;
  if (!qword_254352520)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5188, &type metadata for TaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352520);
  }
  return result;
}

unint64_t sub_240286640()
{
  unint64_t result;

  result = qword_256FE05E8;
  if (!qword_256FE05E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C50A8, &type metadata for NonRepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE05E8);
  }
  return result;
}

unint64_t sub_240286688()
{
  unint64_t result;

  result = qword_256FE05F0;
  if (!qword_256FE05F0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C50D0, &type metadata for NonRepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE05F0);
  }
  return result;
}

unint64_t sub_2402866D0()
{
  unint64_t result;

  result = qword_254352578;
  if (!qword_254352578)
  {
    result = MEMORY[0x2426820F8](&unk_2402C4FF0, &type metadata for RepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352578);
  }
  return result;
}

unint64_t sub_240286718()
{
  unint64_t result;

  result = qword_254352570;
  if (!qword_254352570)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5018, &type metadata for RepeatingTaskRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352570);
  }
  return result;
}

uint64_t sub_24028675C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000002402C9E80)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_240286848(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C756465686373 && a2 == 0xED00007265746641;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402C9EA0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_240286958(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69746165706572 && a2 == 0xED00006B73615467;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9EC0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000002402C9EE0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402C9F00 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402C9F20 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402C9F40 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402C9F60 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x74736E4974736F70 && a2 == 0xEB000000006C6C61 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000002402C9F80 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000028 && a2 == 0x80000002402C9FB0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6572666552707061 && a2 == 0xEA00000000006873 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002402C9FE0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000002402CA000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x70614E7265776F70 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA030 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x656372756F736572 && a2 == 0xE900000000000073 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6F6F62655279616DLL && a2 == 0xEF65636976654474 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402CA050 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA070 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA090 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002402CA0B0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA0D0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x6D614E70756F7267 && a2 == 0xE900000000000065 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA0F0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002402CA110 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA130 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x6475427265776F70 && a2 == 0xED00006465746567 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x6764754261746164 && a2 == 0xEC00000064657465 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA150 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA170 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA190 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000002402CA1B0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA1D0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0x6544746567726174 && a2 == 0xEC00000065636976 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0x654465746F6D6572 && a2 == 0xEC00000065636976 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002402CA1F0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA210 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000002402CA230 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0x6E65646E65706564 && a2 == 0xEC00000073656963)
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 39;
    else
      return 40;
  }
}

unint64_t sub_24028788C()
{
  unint64_t result;

  result = qword_256FE05F8;
  if (!qword_256FE05F8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestDevice, &type metadata for TaskRequestDevice);
    atomic_store(result, (unint64_t *)&qword_256FE05F8);
  }
  return result;
}

unint64_t sub_2402878D0()
{
  unint64_t result;

  result = qword_256FE0600;
  if (!qword_256FE0600)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestResources, &type metadata for TaskRequestResources);
    atomic_store(result, (unint64_t *)&qword_256FE0600);
  }
  return result;
}

unint64_t sub_240287914()
{
  unint64_t result;

  result = qword_256FE0608;
  if (!qword_256FE0608)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestMotionState, &type metadata for TaskRequestMotionState);
    atomic_store(result, (unint64_t *)&qword_256FE0608);
  }
  return result;
}

unint64_t sub_240287958()
{
  unint64_t result;

  result = qword_256FE0610;
  if (!qword_256FE0610)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestProtectionClass, &type metadata for TaskRequestProtectionClass);
    atomic_store(result, (unint64_t *)&qword_256FE0610);
  }
  return result;
}

unint64_t sub_24028799C()
{
  unint64_t result;

  result = qword_256FE0618;
  if (!qword_256FE0618)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for TaskRequestPriority, &type metadata for TaskRequestPriority);
    atomic_store(result, (unint64_t *)&qword_256FE0618);
  }
  return result;
}

uint64_t sub_2402879FC()
{
  sub_2402BDA98();
  sub_2402BD6C0();
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return 0;
}

uint64_t MLHostAnalytics.stateCountMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLHostAnalytics.stateCountMap.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*MLHostAnalytics.stateCountMap.modify())()
{
  return nullsub_1;
}

uint64_t MLHostAnalytics.transitionStatsMap.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MLHostAnalytics.transitionStatsMap.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*MLHostAnalytics.transitionStatsMap.modify())()
{
  return nullsub_1;
}

uint64_t MLHostAnalytics.firstValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MLHostAnalytics() + 24);
  return sub_240287C00(v3, a1);
}

uint64_t type metadata accessor for MLHostAnalytics()
{
  uint64_t result;

  result = qword_256FE06A8;
  if (!qword_256FE06A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_240287C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MLHostAnalytics.firstValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MLHostAnalytics() + 24);
  return sub_240287C78(a1, v3);
}

uint64_t sub_240287C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MLHostAnalytics.firstValidState.modify())(_QWORD)
{
  type metadata accessor for MLHostAnalytics();
  return nullsub_1;
}

uint64_t MLHostAnalytics.latestValidState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MLHostAnalytics() + 28);
  return sub_240287C00(v3, a1);
}

uint64_t MLHostAnalytics.latestValidState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for MLHostAnalytics() + 28);
  return sub_240287C78(a1, v3);
}

uint64_t (*MLHostAnalytics.latestValidState.modify())(_QWORD)
{
  type metadata accessor for MLHostAnalytics();
  return nullsub_1;
}

uint64_t MLHostAnalytics.init()@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);

  v2 = MEMORY[0x24BEE4AF8];
  *a1 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  a1[1] = sub_240248FF0(v2);
  v3 = type metadata accessor for MLHostAnalytics();
  v4 = (char *)a1 + *(int *)(v3 + 24);
  v5 = type metadata accessor for LedgerState();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7(v4, 1, 1, v5);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v7)((char *)a1 + *(int *)(v3 + 28), 1, 1, v5);
}

double MLHostAnalytics.completionLatency.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  unint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = -1.0;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = sub_2402587B4(0x676E696E6E7552, 0xE700000000000000, 0x6574656C706D6F43, 0xE900000000000064);
    if ((v4 & 1) != 0)
      return *(double *)(*(_QWORD *)(v1 + 56) + 32 * v3 + 16);
  }
  return v2;
}

double MLHostAnalytics.failureLatency.getter()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  unint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = -1.0;
  if (*(_QWORD *)(v1 + 16))
  {
    v3 = sub_2402587B4(0x676E696E6E7552, 0xE700000000000000, 0x64656C696146, 0xE600000000000000);
    if ((v4 & 1) != 0)
      return *(double *)(*(_QWORD *)(v1 + 56) + 32 * v3 + 16);
  }
  return v2;
}

uint64_t sub_240287EF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240287F34 + 4 * byte_2402C5310[*v0]))(0x756F436574617473, 0xED000070614D746ELL);
}

unint64_t sub_240287F34()
{
  return 0xD000000000000012;
}

uint64_t sub_240287F54()
{
  return 0x6C61567473726966;
}

unint64_t sub_240287F78()
{
  return 0xD000000000000010;
}

uint64_t sub_240287F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_240289754(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_240287FB8()
{
  sub_240288764();
  return sub_2402BDE88();
}

uint64_t sub_240287FE0()
{
  sub_240288764();
  return sub_2402BDE94();
}

uint64_t MLHostAnalytics.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0620);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240288764();
  sub_2402BDE70();
  v12 = *v3;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
  sub_24024AEF4(&qword_256FDEB00, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1770], MEMORY[0x24BEE04C0]);
  sub_2402BDD2C();
  if (!v2)
  {
    v12 = v3[1];
    v11 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    sub_24024AF58(&qword_256FDEB10, (uint64_t (*)(void))sub_240232EEC, (uint64_t (*)(void))sub_24024A8D4, MEMORY[0x24BEE04C0]);
    sub_2402BDD2C();
    type metadata accessor for MLHostAnalytics();
    LOBYTE(v12) = 2;
    type metadata accessor for LedgerState();
    sub_240232E34(&qword_256FDE3F8, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDCD8();
    LOBYTE(v12) = 3;
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t MLHostAnalytics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unint64_t *v38;
  char v39;
  unint64_t v40;

  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)&v26 - v6;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0630);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MLHostAnalytics();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (unint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BEE4AF8];
  v33 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  *v11 = v33;
  v32 = sub_240248FF0(v12);
  v11[1] = v32;
  v13 = (uint64_t)v11 + *(int *)(v9 + 24);
  v14 = type metadata accessor for LedgerState();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v16 = (uint64_t)v11 + *(int *)(v9 + 28);
  v15(v16, 1, 1, v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240288764();
  v37 = v8;
  v17 = v38;
  sub_2402BDE64();
  if (!v17)
  {
    v18 = v34;
    v38 = v11;
    v28 = v16;
    v29 = v14;
    v27 = v13;
    v19 = (uint64_t)v35;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAF8);
    v39 = 0;
    sub_24024AEF4(&qword_256FDEB28, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1798], MEMORY[0x24BEE04E0]);
    v20 = v36;
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v21 = v38;
    *v38 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB08);
    v39 = 1;
    sub_24024AF58(&qword_256FDEB30, (uint64_t (*)(void))sub_240232EA8, (uint64_t (*)(void))sub_24024AFD4, MEMORY[0x24BEE04E0]);
    sub_2402BDC54();
    swift_bridgeObjectRelease();
    v21[1] = v40;
    LOBYTE(v40) = 2;
    sub_240232E34(&qword_256FDE3F0, (uint64_t (*)(uint64_t))type metadata accessor for LedgerState, (uint64_t)&protocol conformance descriptor for LedgerState);
    sub_2402BDC00();
    sub_240287C78(v19, v27);
    LOBYTE(v40) = 3;
    v23 = (uint64_t)v30;
    v24 = v37;
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v20);
    v25 = v31;
    v11 = v38;
    sub_240287C78(v23, v28);
    sub_2402887A8((uint64_t)v11, v25);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_240238C34((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
}

uint64_t sub_240288650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_240287C00(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_240288660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_240287C78(a1, v2 + *(int *)(a2 + 24));
}

uint64_t sub_24028866C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_240287C00(v2 + *(int *)(a1 + 28), a2);
}

uint64_t sub_24028867C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_240287C78(a1, v2 + *(int *)(a2 + 28));
}

uint64_t sub_240288688@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);

  v4 = MEMORY[0x24BEE4AF8];
  *a2 = sub_240248EE0(MEMORY[0x24BEE4AF8]);
  a2[1] = sub_240248FF0(v4);
  v5 = (char *)a2 + *(int *)(a1 + 24);
  v6 = type metadata accessor for LedgerState();
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v8(v5, 1, 1, v6);
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v8)((char *)a2 + *(int *)(a1 + 28), 1, 1, v6);
}

uint64_t sub_240288728()
{
  return sub_2402879FC();
}

uint64_t sub_24028873C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MLHostAnalytics.init(from:)(a1, a2);
}

uint64_t sub_240288750(_QWORD *a1)
{
  return MLHostAnalytics.encode(to:)(a1);
}

unint64_t sub_240288764()
{
  unint64_t result;

  result = qword_256FE0628;
  if (!qword_256FE0628)
  {
    result = MEMORY[0x2426820F8](&unk_2402C54A8, &type metadata for MLHostAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0628);
  }
  return result;
}

uint64_t sub_2402887A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MLHostAnalytics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2402887EC(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_240232E34(&qword_256FE0638, (uint64_t (*)(uint64_t))type metadata accessor for MLHostAnalytics, (uint64_t)&protocol conformance descriptor for MLHostAnalytics);
  a1[2] = sub_240232E34(&qword_256FE0640, (uint64_t (*)(uint64_t))type metadata accessor for MLHostAnalytics, (uint64_t)&protocol conformance descriptor for MLHostAnalytics);
  result = sub_240232E34(&qword_256FE0648, (uint64_t (*)(uint64_t))type metadata accessor for MLHostAnalytics, (uint64_t)&protocol conformance descriptor for MLHostAnalytics);
  a1[3] = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MLHostAnalytics(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v32;
  char *v33;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    a1[1] = a2[1];
    v8 = *(int *)(a3 + 24);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = type metadata accessor for LedgerState();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v15 = v10[1];
      *v9 = *v10;
      v9[1] = v15;
      v16 = *(int *)(v11 + 20);
      v32 = (char *)v10 + v16;
      v33 = (char *)v9 + v16;
      v17 = v12;
      v18 = sub_2402BD48C();
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
      swift_bridgeObjectRetain();
      v20 = v18;
      v12 = v17;
      v19(v33, v32, v20);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v11);
    }
    v21 = *(int *)(a3 + 28);
    v22 = (uint64_t *)((char *)v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    if (v13(v23, 1, v11))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = v23[1];
      *v22 = *v23;
      v22[1] = v25;
      v26 = *(int *)(v11 + 20);
      v27 = (char *)v22 + v26;
      v28 = (char *)v23 + v26;
      v29 = sub_2402BD48C();
      v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
      swift_bridgeObjectRetain();
      v30(v27, v28, v29);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
    }
  }
  return v7;
}

uint64_t destroy for MLHostAnalytics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for LedgerState();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 20);
    v8 = sub_2402BD48C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  v9 = a1 + *(int *)(a2 + 28);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v9, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v11 = v9 + *(int *)(v5 + 20);
    v12 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  return result;
}

_QWORD *initializeWithCopy for MLHostAnalytics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v31;
  char *v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 24);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for LedgerState();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = v9[1];
    *v8 = *v9;
    v8[1] = v14;
    v15 = *(int *)(v10 + 20);
    v31 = (char *)v9 + v15;
    v32 = (char *)v8 + v15;
    v16 = v11;
    v17 = sub_2402BD48C();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v19 = v17;
    v11 = v16;
    v18(v32, v31, v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v10);
  }
  v20 = *(int *)(a3 + 28);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  if (v12(v22, 1, v10))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = v22[1];
    *v21 = *v22;
    v21[1] = v24;
    v25 = *(int *)(v10 + 20);
    v26 = (char *)v21 + v25;
    v27 = (char *)v22 + v25;
    v28 = sub_2402BD48C();
    v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  return a1;
}

_QWORD *assignWithCopy for MLHostAnalytics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v14 = *(int *)(v9 + 20);
      v40 = (char *)v8 + v14;
      v41 = (char *)v7 + v14;
      v15 = v10;
      v16 = sub_2402BD48C();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v18 = v16;
      v10 = v15;
      v17(v41, v40, v18);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_240238C34((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32 = *(int *)(v9 + 20);
  v33 = (char *)v7 + v32;
  v34 = (char *)v8 + v32;
  v35 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
LABEL_7:
  v20 = *(int *)(a3 + 28);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = v11((_QWORD *)((char *)a1 + v20), 1, v9);
  v24 = v11(v22, 1, v9);
  if (!v23)
  {
    if (!v24)
    {
      *v21 = *v22;
      v21[1] = v22[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36 = *(int *)(v9 + 20);
      v37 = (char *)v21 + v36;
      v38 = (char *)v22 + v36;
      v39 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
      return a1;
    }
    sub_240238C34((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *v21 = *v22;
  v21[1] = v22[1];
  v25 = *(int *)(v9 + 20);
  v26 = (char *)v21 + v25;
  v27 = (char *)v22 + v25;
  v28 = sub_2402BD48C();
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  swift_bridgeObjectRetain();
  v29(v26, v27, v28);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for MLHostAnalytics(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_OWORD *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (_OWORD *)((char *)a1 + v6);
  v8 = (_OWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v13 = *(int *)(v9 + 20);
    v14 = (char *)v7 + v13;
    v15 = (char *)v8 + v13;
    v16 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v17 = *(int *)(a3 + 28);
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  if (v11(v19, 1, v9))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v21 = *(int *)(v9 + 20);
    v22 = (char *)v18 + v21;
    v23 = (char *)v19 + v21;
    v24 = sub_2402BD48C();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithTake for MLHostAnalytics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for LedgerState();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v14 = *(int *)(v9 + 20);
      v15 = (char *)v7 + v14;
      v16 = (char *)v8 + v14;
      v17 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    sub_240238C34((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  v30 = v8[1];
  *v7 = *v8;
  v7[1] = v30;
  swift_bridgeObjectRelease();
  v31 = *(int *)(v9 + 20);
  v32 = (char *)v7 + v31;
  v33 = (char *)v8 + v31;
  v34 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 40))(v32, v33, v34);
LABEL_7:
  v19 = *(int *)(a3 + 28);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v11((_QWORD *)((char *)a1 + v19), 1, v9);
  v23 = v11(v21, 1, v9);
  if (!v22)
  {
    if (!v23)
    {
      v35 = v21[1];
      *v20 = *v21;
      v20[1] = v35;
      swift_bridgeObjectRelease();
      v36 = *(int *)(v9 + 20);
      v37 = (char *)v20 + v36;
      v38 = (char *)v21 + v36;
      v39 = sub_2402BD48C();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
      return a1;
    }
    sub_240238C34((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
  v24 = *(int *)(v9 + 20);
  v25 = (char *)v20 + v24;
  v26 = (char *)v21 + v24;
  v27 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHostAnalytics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402893E0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MLHostAnalytics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24028946C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_2402894E4()
{
  unint64_t v0;

  sub_24028955C();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_24028955C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256FDEBD0)
  {
    type metadata accessor for LedgerState();
    v0 = sub_2402BD9E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256FDEBD0);
  }
}

uint64_t storeEnumTagSinglePayload for MLHostAnalytics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2402895FC + 4 * byte_2402C5319[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_240289630 + 4 * byte_2402C5314[v4]))();
}

uint64_t sub_240289630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240289638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x240289640);
  return result;
}

uint64_t sub_24028964C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240289654);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_240289658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240289660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLHostAnalytics.CodingKeys()
{
  return &type metadata for MLHostAnalytics.CodingKeys;
}

unint64_t sub_240289680()
{
  unint64_t result;

  result = qword_256FE06E8;
  if (!qword_256FE06E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5480, &type metadata for MLHostAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE06E8);
  }
  return result;
}

unint64_t sub_2402896C8()
{
  unint64_t result;

  result = qword_256FE06F0;
  if (!qword_256FE06F0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C53F0, &type metadata for MLHostAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE06F0);
  }
  return result;
}

unint64_t sub_240289710()
{
  unint64_t result;

  result = qword_256FE06F8;
  if (!qword_256FE06F8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5418, &type metadata for MLHostAnalytics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE06F8);
  }
  return result;
}

uint64_t sub_240289754(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756F436574617473 && a2 == 0xED000070614D746ELL;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402C9560 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C61567473726966 && a2 == 0xEF65746174536469 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402C9580)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t XPCIncomingConnection.__allocating_init(_:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t XPCIncomingConnection.init(_:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_240289990()
{
  uint64_t v0;

  return xpc_connection_get_pid(*(xpc_connection_t *)(v0 + 16));
}

uint64_t sub_240289998()
{
  uint64_t v0;

  v0 = swift_slowAlloc();
  xpc_connection_get_audit_token();
  return *(_QWORD *)v0;
}

uint64_t sub_2402899D4()
{
  _OWORD *v0;
  __int128 v1;
  SecTaskRef v2;
  __SecTask *v3;
  __CFString *v4;
  CFTypeRef v5;
  uint64_t v6;
  audit_token_t v8;

  v0 = (_OWORD *)swift_slowAlloc();
  xpc_connection_get_audit_token();
  v1 = v0[1];
  *(_OWORD *)v8.val = *v0;
  *(_OWORD *)&v8.val[4] = v1;
  v2 = SecTaskCreateWithAuditToken(0, &v8);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = (__CFString *)sub_2402BD63C();
  v5 = SecTaskCopyValueForEntitlement(v3, v4, 0);

  if (!v5)
  {

    return 0;
  }
  type metadata accessor for CFString(0);
  swift_unknownObjectRetain();
  if (!swift_dynamicCastUnknownClass())
  {

    swift_unknownObjectRelease_n();
    return 0;
  }
  v6 = sub_2402BD648();

  swift_unknownObjectRelease_n();
  return v6;
}

SecTaskRef sub_240289AD0()
{
  _OWORD *v0;
  __int128 v1;
  SecTaskRef result;
  __SecTask *v3;
  __CFString *v4;
  CFTypeRef v5;
  audit_token_t v6;

  v0 = (_OWORD *)swift_slowAlloc();
  xpc_connection_get_audit_token();
  v1 = v0[1];
  *(_OWORD *)v6.val = *v0;
  *(_OWORD *)&v6.val[4] = v1;
  result = SecTaskCreateWithAuditToken(0, &v6);
  if (result)
  {
    v3 = result;
    v4 = (__CFString *)sub_2402BD63C();
    v5 = SecTaskCopyValueForEntitlement(v3, v4, 0);

    if (v5)
    {
      type metadata accessor for CFArray(0);
      swift_unknownObjectRetain();
      if (swift_dynamicCastUnknownClass())
      {
        *(_QWORD *)v6.val = 0;
        swift_unknownObjectRetain();
        sub_2402BD7A4();
        swift_unknownObjectRelease_n();

        return *(SecTaskRef *)v6.val;
      }

      swift_unknownObjectRelease_n();
    }
    else
    {

    }
    return 0;
  }
  return result;
}

uint64_t sub_240289BDC()
{
  _OWORD *v0;
  __int128 v1;
  SecTaskRef v2;
  __SecTask *v3;
  __CFString *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  audit_token_t v10;

  v0 = (_OWORD *)swift_slowAlloc();
  xpc_connection_get_audit_token();
  v1 = v0[1];
  *(_OWORD *)v10.val = *v0;
  *(_OWORD *)&v10.val[4] = v1;
  v2 = SecTaskCreateWithAuditToken(0, &v10);
  if (!v2)
    return 2;
  v3 = v2;
  v4 = (__CFString *)sub_2402BD63C();
  v5 = SecTaskCopyValueForEntitlement(v3, v4, 0);

  if (v5)
  {
    type metadata accessor for CFBoolean(0);
    swift_unknownObjectRetain();
    v6 = swift_dynamicCastUnknownClass();
    if (v6)
    {
      v7 = v6;
      LOBYTE(v10.val[0]) = 2;
      swift_unknownObjectRetain();
      MEMORY[0x242681630](v7, &v10);
      swift_unknownObjectRelease_n();

      return LOBYTE(v10.val[0]);
    }
    else
    {

      v8 = 2;
      swift_unknownObjectRelease_n();
    }
  }
  else
  {

    return 2;
  }
  return v8;
}

uint64_t XPCIncomingConnection.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return v0;
}

uint64_t XPCIncomingConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t XPCIncomingConnection.description.getter()
{
  uint64_t v0;

  sub_2402BDA98();
  swift_bridgeObjectRelease();
  xpc_connection_get_pid(*(xpc_connection_t *)(v0 + 16));
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543524D0);
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return 0xD000000000000022;
}

unint64_t sub_240289E40()
{
  return XPCIncomingConnection.description.getter();
}

uint64_t type metadata accessor for XPCIncomingConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCIncomingConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCIncomingConnection.__allocating_init(_:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of XPCIncomingConnection.pid.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of XPCIncomingConnection.auditToken.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of XPCIncomingConnection.valueString(forEntitlement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of XPCIncomingConnection.valueStringArray(forEntitlement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of XPCIncomingConnection.valueBool(forEntitlement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

void sub_240289ED0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_240289F1C()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240289FF8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24028A030()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_24028A0F0(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_24028A138()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24028A1BC()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24028A238()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24028A2B8()
{
  return sub_2402BDE28();
}

void sub_24028A2E8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24028A330()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

LighthouseBackground::XPCActivityState_optional __swiftcall XPCActivityState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::XPCActivityState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static XPCActivityState.allCases.getter()
{
  return &unk_25108AE50;
}

uint64_t XPCActivityState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24028A4D4 + 4 * byte_2402C5591[*v0]))(0x6568436574617473, 0xEC0000006E496B63);
}

uint64_t sub_24028A4D4()
{
  return 0x6961576574617473;
}

uint64_t sub_24028A4F4()
{
  return 0x6E75526574617473;
}

uint64_t sub_24028A50C()
{
  return 0x6665446574617473;
}

uint64_t sub_24028A528()
{
  return 0x6E6F436574617473;
}

uint64_t sub_24028A54C()
{
  return 0x6E6F446574617473;
}

void sub_24028A568(char *a1)
{
  sub_240235BB0(*a1);
}

void sub_24028A574()
{
  char *v0;

  sub_2402AA140(*v0);
}

void sub_24028A57C()
{
  __asm { BR              X10 }
}

uint64_t sub_24028A5C0()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_24028A668(uint64_t a1)
{
  char *v1;

  sub_2402AA7D0(a1, *v1);
}

LighthouseBackground::XPCActivityState_optional sub_24028A670(Swift::String *a1)
{
  return XPCActivityState.init(rawValue:)(*a1);
}

uint64_t sub_24028A67C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24028A6B4 + 4 * byte_2402C559D[*v0]))();
}

void sub_24028A6B4(_QWORD *a1@<X8>)
{
  *a1 = 0x6961576574617473;
  a1[1] = 0xE900000000000074;
}

void sub_24028A6D8(_QWORD *a1@<X8>)
{
  *a1 = 0x6E75526574617473;
  a1[1] = 0xE800000000000000;
}

void sub_24028A6F4(_QWORD *a1@<X8>)
{
  *a1 = 0x6665446574617473;
  a1[1] = 0xEA00000000007265;
}

void sub_24028A714(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "stateContinue");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_24028A73C(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F446574617473;
  a1[1] = 0xE900000000000065;
}

void sub_24028A75C(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AE50;
}

uint64_t sub_24028A76C()
{
  sub_240291860();
  return sub_2402BD774();
}

uint64_t sub_24028A7C8()
{
  sub_240291860();
  return sub_2402BD75C();
}

LighthouseBackground::XPCActivityMotionState_optional __swiftcall XPCActivityMotionState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::XPCActivityMotionState_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static XPCActivityMotionState.allCases.getter()
{
  return &unk_25108B028;
}

uint64_t XPCActivityMotionState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24028A8B4 + 4 * byte_2402C55A3[*v0]))(0x6174536574617473, 0xEF7972616E6F6974);
}

uint64_t sub_24028A8B4()
{
  return 0x6C61576574617473;
}

uint64_t sub_24028A8D4()
{
  return 0x6E75526574617473;
}

uint64_t sub_24028A8F8()
{
  return 0x6379436574617473;
}

uint64_t sub_24028A91C()
{
  return 0x7475416574617473;
}

unint64_t sub_24028A940()
{
  return 0xD000000000000015;
}

unint64_t sub_24028A95C()
{
  return 0xD000000000000019;
}

void sub_24028A97C(char *a1)
{
  sub_240234E20(*a1);
}

void sub_24028A988()
{
  char *v0;

  sub_2402AAB8C(0, *v0);
}

void sub_24028A994(uint64_t a1)
{
  char *v1;

  sub_240289ED0(a1, *v1);
}

void sub_24028A99C(uint64_t a1)
{
  char *v1;

  sub_2402AAB8C(a1, *v1);
}

LighthouseBackground::XPCActivityMotionState_optional sub_24028A9A4(Swift::String *a1)
{
  return XPCActivityMotionState.init(rawValue:)(*a1);
}

uint64_t sub_24028A9B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = XPCActivityMotionState.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_24028A9D4(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108B028;
}

uint64_t sub_24028A9E4()
{
  sub_24029181C();
  return sub_2402BD774();
}

uint64_t sub_24028AA40()
{
  sub_24029181C();
  return sub_2402BD75C();
}

LighthouseBackground::XPCActivityPriority_optional __swiftcall XPCActivityPriority.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  LighthouseBackground::XPCActivityPriority_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

void *static XPCActivityPriority.allCases.getter()
{
  return &unk_25108BB08;
}

uint64_t XPCActivityPriority.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7974696C697455;
  else
    return 0x616E65746E69614DLL;
}

uint64_t sub_24028AB3C(char *a1, char *a2)
{
  return sub_24023555C(*a1, *a2);
}

uint64_t sub_24028AB48()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_24028ABD0()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24028AC34()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::XPCActivityPriority_optional sub_24028ACB8(Swift::String *a1)
{
  return XPCActivityPriority.init(rawValue:)(*a1);
}

void sub_24028ACC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x616E65746E69614DLL;
  if (*v1)
    v2 = 0x7974696C697455;
  v3 = 0xEB0000000065636ELL;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_24028AD0C(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AF88;
}

uint64_t sub_24028AD1C()
{
  sub_2402917D8();
  return sub_2402BD774();
}

uint64_t sub_24028AD78()
{
  sub_2402917D8();
  return sub_2402BD75C();
}

uint64_t XPCActivityCriteria.interval.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XPCActivityCriteria.interval.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*XPCActivityCriteria.interval.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.repeating.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t XPCActivityCriteria.repeating.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.repeating.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.delay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t XPCActivityCriteria.delay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.delay.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.gracePeriod.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t XPCActivityCriteria.gracePeriod.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.gracePeriod.modify())()
{
  return nullsub_1;
}

void XPCActivityCriteria.priority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 41);
}

_BYTE *XPCActivityCriteria.priority.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *result;
  return result;
}

uint64_t (*XPCActivityCriteria.priority.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.allowBattery.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t XPCActivityCriteria.allowBattery.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 42) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.allowBattery.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requireScreenSleep.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t XPCActivityCriteria.requireScreenSleep.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 43) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requireScreenSleep.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.preventDeviceSleep.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t XPCActivityCriteria.preventDeviceSleep.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 44) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.preventDeviceSleep.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.powerNap.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 45);
}

uint64_t XPCActivityCriteria.powerNap.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 45) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.powerNap.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.appRefresh.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 46);
}

uint64_t XPCActivityCriteria.appRefresh.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 46) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.appRefresh.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.shouldWakeDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 47);
}

uint64_t XPCActivityCriteria.shouldWakeDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 47) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.shouldWakeDevice.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requireSignificantUserInactivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t XPCActivityCriteria.requireSignificantUserInactivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requireSignificantUserInactivity.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.mayRebootDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t XPCActivityCriteria.mayRebootDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.mayRebootDevice.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.usesDuetPowerBudgeting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t XPCActivityCriteria.usesDuetPowerBudgeting.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.usesDuetPowerBudgeting.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.usesDataBudgeting.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t XPCActivityCriteria.usesDataBudgeting.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 51) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.usesDataBudgeting.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.duetAttributeName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCActivityCriteria.duetAttributeName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return result;
}

uint64_t (*XPCActivityCriteria.duetAttributeName.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.duetRelatedApplications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XPCActivityCriteria.duetRelatedApplications.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 72) = a1;
  return result;
}

uint64_t (*XPCActivityCriteria.duetRelatedApplications.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.involvedProcess.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t XPCActivityCriteria.involvedProcess.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*XPCActivityCriteria.involvedProcess.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.runWhenAppForegrounded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t XPCActivityCriteria.runWhenAppForegrounded.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 88) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.runWhenAppForegrounded.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.duetAttributeValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCActivityCriteria.duetAttributeValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*XPCActivityCriteria.duetAttributeValue.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.duetAttributeCost.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t XPCActivityCriteria.duetAttributeCost.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = result;
  *(_BYTE *)(v2 + 120) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.duetAttributeCost.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.memoryIntensive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 121);
}

uint64_t XPCActivityCriteria.memoryIntensive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 121) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.memoryIntensive.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.cpuIntensive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 122);
}

uint64_t XPCActivityCriteria.cpuIntensive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 122) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.cpuIntensive.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.diskIntensive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 123);
}

uint64_t XPCActivityCriteria.diskIntensive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 123) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.diskIntensive.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.randomInitialDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t XPCActivityCriteria.randomInitialDelay.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = result;
  *(_BYTE *)(v2 + 136) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.randomInitialDelay.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.groupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCActivityCriteria.groupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return result;
}

uint64_t (*XPCActivityCriteria.groupName.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.groupConcurrencyLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t XPCActivityCriteria.groupConcurrencyLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = result;
  *(_BYTE *)(v2 + 168) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.groupConcurrencyLimit.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.postInstall.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 169);
}

uint64_t XPCActivityCriteria.postInstall.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 169) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.postInstall.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requiresClassC.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 170);
}

uint64_t XPCActivityCriteria.requiresClassC.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 170) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requiresClassC.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requiresClassB.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 171);
}

uint64_t XPCActivityCriteria.requiresClassB.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 171) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requiresClassB.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requiresClassA.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 172);
}

uint64_t XPCActivityCriteria.requiresClassA.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 172) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requiresClassA.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requiresBuddyComplete.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 173);
}

uint64_t XPCActivityCriteria.requiresBuddyComplete.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 173) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requiresBuddyComplete.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requireNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 174);
}

uint64_t XPCActivityCriteria.requireNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 174) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requireNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.requireInexpensiveNetworkConnectivity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 175);
}

uint64_t XPCActivityCriteria.requireInexpensiveNetworkConnectivity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 175) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.requireInexpensiveNetworkConnectivity.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.networkDownloadSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t XPCActivityCriteria.networkDownloadSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = result;
  *(_BYTE *)(v2 + 184) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.networkDownloadSize.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.networkUploadSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t XPCActivityCriteria.networkUploadSize.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = result;
  *(_BYTE *)(v2 + 200) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.networkUploadSize.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.expectedDuration.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t XPCActivityCriteria.expectedDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 208) = result;
  *(_BYTE *)(v2 + 216) = a2 & 1;
  return result;
}

uint64_t (*XPCActivityCriteria.expectedDuration.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.userRequestedBackupTask.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 217);
}

uint64_t XPCActivityCriteria.userRequestedBackupTask.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 217) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.userRequestedBackupTask.modify())()
{
  return nullsub_1;
}

uint64_t XPCActivityCriteria.communicatesWithPairedDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 218);
}

uint64_t XPCActivityCriteria.communicatesWithPairedDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 218) = result;
  return result;
}

uint64_t (*XPCActivityCriteria.communicatesWithPairedDevice.modify())()
{
  return nullsub_1;
}

void XPCActivityCriteria.desiredMotionState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 219);
}

_BYTE *XPCActivityCriteria.desiredMotionState.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 219) = *result;
  return result;
}

uint64_t (*XPCActivityCriteria.desiredMotionState.modify())()
{
  return nullsub_1;
}

__n128 XPCActivityCriteria.init(interval:repeating:delay:gracePeriod:priority:allowBattery:requireScreenSleep:preventDeviceSleep:powerNap:appRefresh:shouldWakeDevice:requireSignificantUserInactivity:mayRebootDevice:usesDuetPowerBudgeting:usesDataBudgeting:duetAttributeName:duetRelatedApplications:involvedProcess:runWhenAppForegrounded:duetAttributeValue:duetAttributeCost:memoryIntensive:cpuIntensive:diskIntensive:randomInitialDelay:groupName:groupConcurrencyLimit:postInstall:requiresClassC:requiresClassB:requiresClassA:requiresBuddyComplete:requireNetworkConnectivity:requireInexpensiveNetworkConnectivity:networkDownloadSize:networkUploadSize:expectedDuration:userRequestedBackupTask:communicatesWithPairedDevice:desiredMotionState:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, _BYTE *a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, char a14, __int128 a15, uint64_t a16, char a17, char a18, __int16 a19, uint64_t a20,char a21,__n128 a22,uint64_t a23,char a24,char a25,__int16 a26,int a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,int a33,_BYTE *a34)
{
  __n128 result;

  *(_QWORD *)a9 = a1;
  *(_BYTE *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 24) = a4 & 1;
  *(_QWORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 40) = a6 & 1;
  *(_BYTE *)(a9 + 41) = *a7;
  *(_BYTE *)(a9 + 42) = a8;
  *(_BYTE *)(a9 + 43) = a10;
  *(_DWORD *)(a9 + 44) = *(_DWORD *)((char *)&a10 + 1);
  *(_DWORD *)(a9 + 48) = *(_DWORD *)((char *)&a10 + 5);
  *(_QWORD *)(a9 + 72) = a12;
  *(_QWORD *)(a9 + 80) = a13;
  *(_BYTE *)(a9 + 88) = a14;
  *(_QWORD *)(a9 + 112) = a16;
  *(_BYTE *)(a9 + 120) = a17 & 1;
  *(_BYTE *)(a9 + 121) = a18;
  *(_WORD *)(a9 + 122) = a19;
  *(_QWORD *)(a9 + 128) = a20;
  *(_BYTE *)(a9 + 136) = a21 & 1;
  *(_QWORD *)(a9 + 160) = a23;
  *(_BYTE *)(a9 + 168) = a24 & 1;
  *(_BYTE *)(a9 + 169) = a25;
  *(_WORD *)(a9 + 170) = a26;
  *(_DWORD *)(a9 + 172) = a27;
  *(_QWORD *)(a9 + 176) = a28;
  *(_BYTE *)(a9 + 184) = a29 & 1;
  *(_QWORD *)(a9 + 192) = a30;
  *(_BYTE *)(a9 + 200) = a31 & 1;
  *(_QWORD *)(a9 + 208) = a32;
  *(_BYTE *)(a9 + 216) = a33 & 1;
  *(_WORD *)(a9 + 217) = *(_WORD *)((char *)&a33 + 1);
  *(_BYTE *)(a9 + 219) = *a34;
  result = a22;
  *(_OWORD *)(a9 + 56) = a11;
  *(_OWORD *)(a9 + 96) = a15;
  *(__n128 *)(a9 + 144) = a22;
  return result;
}

uint64_t XPCActivityCriteria.hash(into:)()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;

  v1 = *(unsigned __int8 *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 40);
  v3 = *(unsigned __int8 *)(v0 + 41);
  v4 = *(unsigned __int8 *)(v0 + 42);
  v5 = *(unsigned __int8 *)(v0 + 43);
  v13 = *(unsigned __int8 *)(v0 + 44);
  v14 = *(unsigned __int8 *)(v0 + 45);
  v15 = *(unsigned __int8 *)(v0 + 46);
  v16 = *(unsigned __int8 *)(v0 + 47);
  v17 = *(unsigned __int8 *)(v0 + 48);
  v18 = *(unsigned __int8 *)(v0 + 49);
  v19 = *(unsigned __int8 *)(v0 + 50);
  v20 = *(unsigned __int8 *)(v0 + 51);
  v6 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(unsigned __int8 *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 104);
  v25 = *(unsigned __int8 *)(v0 + 120);
  v26 = *(unsigned __int8 *)(v0 + 121);
  v27 = *(unsigned __int8 *)(v0 + 122);
  v28 = *(unsigned __int8 *)(v0 + 123);
  v29 = *(unsigned __int8 *)(v0 + 136);
  v30 = *(_QWORD *)(v0 + 152);
  v31 = *(unsigned __int8 *)(v0 + 168);
  v32 = *(unsigned __int8 *)(v0 + 169);
  v33 = *(unsigned __int8 *)(v0 + 170);
  v34 = *(unsigned __int8 *)(v0 + 171);
  v35 = *(unsigned __int8 *)(v0 + 172);
  v36 = *(unsigned __int8 *)(v0 + 173);
  v37 = *(unsigned __int8 *)(v0 + 174);
  v38 = *(unsigned __int8 *)(v0 + 175);
  v39 = *(unsigned __int8 *)(v0 + 184);
  v40 = *(unsigned __int8 *)(v0 + 200);
  v41 = *(unsigned __int8 *)(v0 + 216);
  v42 = *(unsigned __int8 *)(v0 + 217);
  v43 = *(unsigned __int8 *)(v0 + 218);
  v44 = *(unsigned __int8 *)(v0 + 219);
  sub_2402BDE28();
  sub_2402BDE1C();
  if (v1 == 1)
  {
    sub_2402BDE1C();
    if (!v2)
      goto LABEL_3;
  }
  else
  {
    sub_2402BDE1C();
    sub_2402BDE28();
    if (!v2)
    {
LABEL_3:
      sub_2402BDE1C();
      sub_2402BDE28();
      if (v3 != 2)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  sub_2402BDE1C();
  if (v3 != 2)
  {
LABEL_4:
    sub_2402BDE1C();
    sub_2402BD6A8();
    swift_bridgeObjectRelease();
    if (v4 == 2)
      goto LABEL_9;
    goto LABEL_5;
  }
LABEL_8:
  sub_2402BDE1C();
  if (v4 != 2)
LABEL_5:
    sub_2402BDE1C();
LABEL_9:
  sub_2402BDE1C();
  if (v5 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v13 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v14 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v15 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v16 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v17 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v18 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v19 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v20 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v6)
  {
    sub_2402BDE1C();
    swift_bridgeObjectRetain();
    sub_2402BD6A8();
    swift_bridgeObjectRelease();
    v7 = v21;
    if (v21)
      goto LABEL_29;
  }
  else
  {
    sub_2402BDE1C();
    v7 = v21;
    if (v21)
    {
LABEL_29:
      sub_2402BDE1C();
      sub_2402BDE10();
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        swift_bridgeObjectRetain();
        v9 = v7 + 40;
        do
        {
          swift_bridgeObjectRetain();
          sub_2402BD6A8();
          swift_bridgeObjectRelease();
          v9 += 16;
          --v8;
        }
        while (v8);
        swift_bridgeObjectRelease();
      }
      if (v22)
        goto LABEL_34;
LABEL_40:
      sub_2402BDE1C();
      goto LABEL_41;
    }
  }
  sub_2402BDE1C();
  if (!v22)
    goto LABEL_40;
LABEL_34:
  sub_2402BDE1C();
  sub_2402BDE10();
  v10 = *(_QWORD *)(v22 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v11 = v22 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_2402BD6A8();
      swift_bridgeObjectRelease();
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
LABEL_41:
  if (v23 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  sub_2402BDE1C();
  if (v24)
  {
    swift_bridgeObjectRetain();
    sub_2402BD6A8();
    swift_bridgeObjectRelease();
  }
  sub_2402BDE1C();
  if (!v25)
    sub_2402BDE28();
  if (v26 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v27 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v28 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v29)
  {
    sub_2402BDE1C();
    if (v30)
      goto LABEL_55;
LABEL_58:
    sub_2402BDE1C();
    if (v31)
      goto LABEL_56;
    goto LABEL_59;
  }
  sub_2402BDE1C();
  sub_2402BDE28();
  if (!v30)
    goto LABEL_58;
LABEL_55:
  sub_2402BDE1C();
  swift_bridgeObjectRetain();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  if (v31)
  {
LABEL_56:
    sub_2402BDE1C();
    goto LABEL_60;
  }
LABEL_59:
  sub_2402BDE1C();
  sub_2402BDE28();
LABEL_60:
  if (v32 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v33 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v34 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v35 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v36 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v37 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v38 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v39)
  {
    sub_2402BDE1C();
    if (!v40)
      goto LABEL_76;
LABEL_79:
    sub_2402BDE1C();
    if (!v41)
      goto LABEL_77;
    goto LABEL_80;
  }
  sub_2402BDE1C();
  sub_2402BDE28();
  if (v40)
    goto LABEL_79;
LABEL_76:
  sub_2402BDE1C();
  sub_2402BDE28();
  if (!v41)
  {
LABEL_77:
    sub_2402BDE1C();
    sub_2402BDE28();
    goto LABEL_81;
  }
LABEL_80:
  sub_2402BDE1C();
LABEL_81:
  if (v42 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if (v43 != 2)
    sub_2402BDE1C();
  sub_2402BDE1C();
  if ((_DWORD)v44 != 7)
  {
    sub_2402BDE1C();
    __asm { BR              X9 }
  }
  return sub_2402BDE1C();
}

uint64_t sub_24028BE68()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24028BF5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24028BF90 + 4 * byte_2402C55B1[a1]))(0x6C61767265746E69, 0xE800000000000000);
}

uint64_t sub_24028BF90()
{
  return 0x6E69746165706572;
}

uint64_t sub_24028BFB0()
{
  return 0x79616C6564;
}

uint64_t sub_24028BFC4()
{
  return 0x7265506563617267;
}

uint64_t sub_24028BFE4()
{
  return 0x797469726F697270;
}

uint64_t sub_24028BFF8()
{
  return 0x746142776F6C6C61;
}

unint64_t sub_24028C018()
{
  return 0xD000000000000012;
}

uint64_t sub_24028C36C()
{
  unsigned __int8 *v0;

  return sub_24028BF5C(*v0);
}

uint64_t sub_24028C374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402907F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24028C398()
{
  sub_24028FA74();
  return sub_2402BDE88();
}

uint64_t sub_24028C3C0()
{
  sub_24028FA74();
  return sub_2402BDE94();
}

uint64_t XPCActivityCriteria.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char v64;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE07E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v63 = *((unsigned __int8 *)v1 + 8);
  v59 = v1[2];
  v60 = v7;
  v58 = *((unsigned __int8 *)v1 + 24);
  v57 = v1[4];
  LODWORD(v7) = *((unsigned __int8 *)v1 + 40);
  v55 = *((unsigned __int8 *)v1 + 41);
  v56 = v7;
  LODWORD(v7) = *((unsigned __int8 *)v1 + 42);
  v53 = *((unsigned __int8 *)v1 + 43);
  v54 = v7;
  LODWORD(v7) = *((unsigned __int8 *)v1 + 44);
  v51 = *((unsigned __int8 *)v1 + 45);
  v52 = v7;
  LODWORD(v7) = *((unsigned __int8 *)v1 + 46);
  v49 = *((unsigned __int8 *)v1 + 47);
  v50 = v7;
  LODWORD(v7) = *((unsigned __int8 *)v1 + 48);
  v47 = *((unsigned __int8 *)v1 + 49);
  v48 = v7;
  LODWORD(v7) = *((unsigned __int8 *)v1 + 50);
  v45 = *((unsigned __int8 *)v1 + 51);
  v46 = v7;
  v8 = v1[8];
  v43 = v1[7];
  v44 = v8;
  v42 = v1[9];
  v13 = v1[10];
  v14 = *((unsigned __int8 *)v1 + 88);
  v15 = v1[12];
  v16 = v1[13];
  v17 = v1[14];
  v18 = *((unsigned __int8 *)v1 + 120);
  v19 = *((unsigned __int8 *)v1 + 121);
  v20 = *((unsigned __int8 *)v1 + 122);
  v21 = *((unsigned __int8 *)v1 + 123);
  v22 = v1[16];
  v23 = *((unsigned __int8 *)v1 + 136);
  v24 = v1[18];
  v25 = v1[19];
  v26 = v1[20];
  v27 = *((unsigned __int8 *)v1 + 168);
  v28 = *((unsigned __int8 *)v1 + 169);
  v29 = *((unsigned __int8 *)v1 + 170);
  v30 = *((unsigned __int8 *)v1 + 171);
  v31 = *((unsigned __int8 *)v1 + 172);
  v32 = *((unsigned __int8 *)v1 + 173);
  v33 = *((unsigned __int8 *)v1 + 174);
  v34 = *((unsigned __int8 *)v1 + 175);
  v35 = v1[22];
  v36 = *((unsigned __int8 *)v1 + 184);
  v37 = v1[24];
  v38 = *((unsigned __int8 *)v1 + 200);
  v39 = v1[26];
  LODWORD(v8) = *((unsigned __int8 *)v1 + 217);
  v40 = *((unsigned __int8 *)v1 + 216);
  v41 = v8;
  v9 = *((unsigned __int8 *)v1 + 218);
  v10 = *((_BYTE *)v1 + 219);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24028FA74();
  sub_2402BDE70();
  LOBYTE(v62) = 0;
  v11 = v61;
  sub_2402BDD38();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LODWORD(v61) = v9;
  LOBYTE(v62) = 1;
  sub_2402BDD08();
  LOBYTE(v62) = 2;
  sub_2402BDCE4();
  LOBYTE(v62) = 3;
  sub_2402BDCE4();
  LOBYTE(v62) = v55;
  v64 = 4;
  sub_24028FAB8();
  sub_2402BDCD8();
  LOBYTE(v62) = 5;
  sub_2402BDCA8();
  LOBYTE(v62) = 6;
  sub_2402BDCA8();
  LOBYTE(v62) = 7;
  sub_2402BDCA8();
  LOBYTE(v62) = 8;
  sub_2402BDCA8();
  LOBYTE(v62) = 9;
  sub_2402BDCA8();
  LOBYTE(v62) = 10;
  sub_2402BDCA8();
  LOBYTE(v62) = 11;
  sub_2402BDCA8();
  LOBYTE(v62) = 12;
  sub_2402BDCA8();
  LOBYTE(v62) = 13;
  sub_2402BDCA8();
  LOBYTE(v62) = 14;
  sub_2402BDCA8();
  LOBYTE(v62) = 15;
  sub_2402BDC9C();
  v62 = v42;
  v64 = 16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_24026414C(&qword_254352228, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_2402BDCD8();
  v62 = v13;
  v64 = 17;
  sub_2402BDCD8();
  LOBYTE(v62) = 18;
  sub_2402BDCA8();
  LOBYTE(v62) = 19;
  sub_2402BDC9C();
  LOBYTE(v62) = 20;
  sub_2402BDCE4();
  LOBYTE(v62) = 21;
  sub_2402BDCA8();
  LOBYTE(v62) = 22;
  sub_2402BDCA8();
  LOBYTE(v62) = 23;
  sub_2402BDCA8();
  LOBYTE(v62) = 24;
  sub_2402BDCF0();
  LOBYTE(v62) = 25;
  sub_2402BDC9C();
  LOBYTE(v62) = 26;
  sub_2402BDCF0();
  LOBYTE(v62) = 27;
  sub_2402BDCA8();
  LOBYTE(v62) = 28;
  sub_2402BDCA8();
  LOBYTE(v62) = 29;
  sub_2402BDCA8();
  LOBYTE(v62) = 30;
  sub_2402BDCA8();
  LOBYTE(v62) = 31;
  sub_2402BDCA8();
  LOBYTE(v62) = 32;
  sub_2402BDCA8();
  LOBYTE(v62) = 33;
  sub_2402BDCA8();
  LOBYTE(v62) = 34;
  sub_2402BDCF0();
  LOBYTE(v62) = 35;
  sub_2402BDCF0();
  LOBYTE(v62) = 36;
  sub_2402BDCE4();
  LOBYTE(v62) = 37;
  sub_2402BDCA8();
  LOBYTE(v62) = 38;
  sub_2402BDCA8();
  LOBYTE(v62) = v10;
  v64 = 39;
  sub_24028FAFC();
  sub_2402BDCD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t XPCActivityCriteria.hashValue.getter()
{
  sub_2402BDE04();
  XPCActivityCriteria.hash(into:)();
  return sub_2402BDE34();
}

uint64_t XPCActivityCriteria.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[28];
  char v120;
  unsigned __int8 v121;
  uint64_t v122;
  char v123;
  _BYTE v124[7];
  uint64_t v125;
  char v126;
  _BYTE v127[7];
  uint64_t v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;
  char v134;
  char v135;
  char v136;
  char v137;
  char v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  _BYTE v146[7];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  char v155;
  _BYTE v156[7];
  __int128 v157;
  uint64_t v158;
  char v159;
  char v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  uint64_t v167;
  char v168;
  _BYTE v169[7];
  uint64_t v170;
  char v171;
  _BYTE v172[7];
  uint64_t v173;
  char v174;
  char v175;
  char v176;
  char v177;
  char v178;
  _BYTE v179[7];
  char v180;
  _BYTE v181[7];
  char v182;
  char v183;
  _BYTE v184[7];
  char v185;
  char v186;
  _BYTE v187[7];
  char v188;
  _BYTE v189[7];
  char v190;
  _DWORD v191[3];
  uint64_t v192;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543525E0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = 1;
  v188 = 1;
  v186 = 1;
  v185 = 1;
  v183 = 1;
  v182 = 1;
  v180 = 1;
  v178 = 1;
  v9 = a1[3];
  v100 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v9);
  sub_24028FA74();
  sub_2402BDE64();
  if (!v2)
  {
    LOBYTE(v122) = 0;
    v71 = sub_2402BDC60();
    LOBYTE(v122) = 1;
    LOBYTE(v70) = sub_2402BDC30() & 1;
    v70 = v70;
    LOBYTE(v122) = 2;
    v19 = sub_2402BDC0C();
    v21 = v20;
    v99 = v19;
    v190 = v20 & 1;
    LOBYTE(v122) = 3;
    v98 = sub_2402BDC0C();
    v188 = v22 & 1;
    LOBYTE(v107) = 4;
    v23 = v22;
    sub_24028FBA4();
    sub_2402BDC00();
    v69 = v23;
    v24 = v21;
    v25 = v122;
    LOBYTE(v122) = 5;
    v26 = sub_2402BDBD0();
    v97 = v25;
    v68 = v26;
    LOBYTE(v122) = 6;
    v67 = sub_2402BDBD0();
    LOBYTE(v122) = 7;
    v66 = sub_2402BDBD0();
    LOBYTE(v122) = 8;
    v27 = sub_2402BDBD0();
    v192 = 0;
    v65 = v27;
    LOBYTE(v122) = 9;
    v64 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 10;
    v106 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 11;
    v105 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 12;
    v104 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 13;
    v103 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 14;
    v102 = sub_2402BDBD0();
    v192 = 0;
    LOBYTE(v122) = 15;
    v96 = sub_2402BDBC4();
    v101 = v28;
    v192 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
    LOBYTE(v107) = 16;
    sub_24026414C(&qword_2543521E8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    swift_bridgeObjectRetain();
    v29 = v192;
    sub_2402BDC00();
    v192 = v29;
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v91 = 0;
      v92 = 0uLL;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v72 = 0;
      v75 = 0;
      v80 = 0;
    }
    else
    {
      LOBYTE(v107) = 17;
      v80 = v122;
      swift_bridgeObjectRetain();
      v30 = v192;
      sub_2402BDC00();
      v192 = v30;
      if (v30)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v91 = 0;
        v92 = 0uLL;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v72 = 0;
        v75 = 0;
      }
      else
      {
        v31 = v122;
        LOBYTE(v122) = 18;
        v32 = v31;
        swift_bridgeObjectRetain();
        v33 = v192;
        v90 = sub_2402BDBD0();
        v192 = v33;
        v75 = v32;
        if (!v33)
        {
          LOBYTE(v122) = 19;
          v95 = sub_2402BDBC4();
          v192 = 0;
          v35 = v34;
          LOBYTE(v122) = 20;
          swift_bridgeObjectRetain();
          v36 = v192;
          v94 = sub_2402BDC0C();
          v63 = v37;
          v192 = v36;
          v72 = v35;
          if (v36)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v84 = 0;
            v85 = 0;
            v86 = 0;
            v91 = 0;
            v92 = 0uLL;
            v93 = 0;
            v94 = 0;
            v73 = 2;
            v74 = 2;
            v76 = 2;
            v77 = 2;
            v78 = 2;
            v79 = 2;
            v81 = 2;
            v82 = 2;
            v83 = 2;
            v87 = 2;
            v88 = 2;
            v89 = 2;
          }
          else
          {
            v186 = v63 & 1;
            LOBYTE(v122) = 21;
            v89 = sub_2402BDBD0();
            v192 = 0;
            LOBYTE(v122) = 22;
            v88 = sub_2402BDBD0();
            v192 = 0;
            LOBYTE(v122) = 23;
            v87 = sub_2402BDBD0();
            v192 = 0;
            LOBYTE(v122) = 24;
            v93 = sub_2402BDC18();
            v62 = v38;
            v192 = 0;
            v185 = v38 & 1;
            LOBYTE(v122) = 25;
            *(_QWORD *)&v92 = sub_2402BDBC4();
            *((_QWORD *)&v92 + 1) = v39;
            v192 = 0;
            LOBYTE(v122) = 26;
            swift_bridgeObjectRetain();
            v40 = v192;
            v91 = sub_2402BDC18();
            v61 = v41;
            v192 = v40;
            if (v40)
            {
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v84 = 0;
              v85 = 0;
              v86 = 0;
              v91 = 0;
              v73 = 2;
              v74 = 2;
              v76 = 2;
              v77 = 2;
              v78 = 2;
              v79 = 2;
              v81 = 2;
              v82 = 2;
              v83 = 2;
            }
            else
            {
              v183 = v61 & 1;
              LOBYTE(v122) = 27;
              v83 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 28;
              v82 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 29;
              v81 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 30;
              v79 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 31;
              v78 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 32;
              v77 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 33;
              v76 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 34;
              v86 = sub_2402BDC18();
              v60 = v42;
              v192 = 0;
              v182 = v42 & 1;
              LOBYTE(v122) = 35;
              v85 = sub_2402BDC18();
              v59 = v43;
              v192 = 0;
              v180 = v43 & 1;
              LOBYTE(v122) = 36;
              v84 = sub_2402BDC0C();
              v58 = v44;
              v192 = 0;
              v178 = v44 & 1;
              LOBYTE(v122) = 37;
              v73 = sub_2402BDBD0();
              v192 = 0;
              LOBYTE(v122) = 38;
              v74 = sub_2402BDBD0();
              v192 = 0;
              v120 = 39;
              sub_24028FBE8();
              v45 = v192;
              sub_2402BDC00();
              v192 = v45;
              if (!v45)
              {
                (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                BYTE8(v108) = v24 & 1;
                BYTE8(v109) = v69 & 1;
                BYTE8(v114) = v63 & 1;
                BYTE8(v115) = v62 & 1;
                BYTE8(v117) = v61 & 1;
                BYTE8(v118) = v60 & 1;
                v119[8] = v59 & 1;
                v119[24] = v58 & 1;
                v69 = v121;
                *(_QWORD *)&v107 = v71;
                BYTE8(v107) = v70;
                *(_QWORD *)&v108 = v99;
                *(_QWORD *)&v109 = v98;
                BYTE9(v109) = v97;
                BYTE10(v109) = v68;
                BYTE11(v109) = v67;
                BYTE12(v109) = v66;
                BYTE13(v109) = v65;
                BYTE14(v109) = v64;
                HIBYTE(v109) = v106;
                LOBYTE(v110) = v105;
                BYTE1(v110) = v104;
                v46 = v103;
                BYTE2(v110) = v103;
                v47 = v102;
                BYTE3(v110) = v102;
                v48 = v101;
                *((_QWORD *)&v110 + 1) = v96;
                *(_QWORD *)&v111 = v101;
                v49 = v80;
                *((_QWORD *)&v111 + 1) = v80;
                *(_QWORD *)&v112 = v32;
                BYTE8(v112) = v90;
                *(_QWORD *)&v113 = v95;
                *((_QWORD *)&v113 + 1) = v35;
                *(_QWORD *)&v114 = v94;
                BYTE9(v114) = v89;
                BYTE10(v114) = v88;
                BYTE11(v114) = v87;
                v50 = *((_QWORD *)&v92 + 1);
                *(_QWORD *)&v115 = v93;
                v116 = v92;
                *(_QWORD *)&v117 = v91;
                BYTE9(v117) = v83;
                BYTE10(v117) = v82;
                BYTE11(v117) = v81;
                BYTE12(v117) = v79;
                BYTE13(v117) = v78;
                BYTE14(v117) = v77;
                HIBYTE(v117) = v76;
                *(_QWORD *)&v118 = v86;
                *(_QWORD *)v119 = v85;
                *(_QWORD *)&v119[16] = v84;
                v119[25] = v73;
                v119[26] = v74;
                v119[27] = v121;
                sub_24023DB20((uint64_t)&v107);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v51 = v118;
                a2[10] = v117;
                a2[11] = v51;
                a2[12] = *(_OWORD *)v119;
                *(_OWORD *)((char *)a2 + 204) = *(_OWORD *)&v119[12];
                v52 = v114;
                a2[6] = v113;
                a2[7] = v52;
                v53 = v116;
                a2[8] = v115;
                a2[9] = v53;
                v54 = v110;
                a2[2] = v109;
                a2[3] = v54;
                v55 = v112;
                a2[4] = v111;
                a2[5] = v55;
                v56 = v108;
                *a2 = v107;
                a2[1] = v56;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
                v122 = v71;
                v123 = v70;
                v125 = v99;
                v128 = v98;
                v130 = v97;
                v131 = v68;
                v132 = v67;
                v133 = v66;
                v134 = v65;
                v135 = v64;
                v136 = v106;
                v137 = v105;
                v138 = v104;
                v139 = v46;
                v140 = v47;
                *(_DWORD *)v124 = v191[0];
                *(_DWORD *)v127 = *(_DWORD *)v189;
                *(_DWORD *)&v124[3] = *(_DWORD *)((char *)v191 + 3);
                v126 = v190;
                *(_DWORD *)&v127[3] = *(_DWORD *)&v189[3];
                v129 = v188;
                v141 = v96;
                v142 = v48;
                v143 = v49;
                v144 = v32;
                v145 = v90;
                *(_DWORD *)v146 = *(_DWORD *)v187;
                *(_DWORD *)&v146[3] = *(_DWORD *)&v187[3];
                v147 = v95;
                v148 = v35;
                v149 = v94;
                v150 = v186;
                v151 = v89;
                v152 = v88;
                v153 = v87;
                v154 = v93;
                v155 = v185;
                *(_DWORD *)&v156[3] = *(_DWORD *)&v184[3];
                *(_DWORD *)v156 = *(_DWORD *)v184;
                *(_QWORD *)&v157 = v92;
                *((_QWORD *)&v157 + 1) = v50;
                v158 = v91;
                v159 = v183;
                v160 = v83;
                v161 = v82;
                v162 = v81;
                v163 = v79;
                v164 = v78;
                v165 = v77;
                v166 = v76;
                v167 = v86;
                v168 = v182;
                *(_DWORD *)&v169[3] = *(_DWORD *)&v181[3];
                *(_DWORD *)v169 = *(_DWORD *)v181;
                v170 = v85;
                v171 = v180;
                *(_DWORD *)&v172[3] = *(_DWORD *)&v179[3];
                *(_DWORD *)v172 = *(_DWORD *)v179;
                v173 = v84;
                v174 = v178;
                v175 = v73;
                v176 = v74;
                v17 = v69;
                goto LABEL_5;
              }
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v91 = 0;
        v92 = 0uLL;
        v93 = 0;
        v94 = 0;
        v95 = 0;
        v72 = 0;
      }
    }
    v73 = 2;
    v74 = 2;
    v76 = 2;
    v77 = 2;
    v78 = 2;
    v79 = 2;
    v81 = 2;
    v82 = 2;
    v83 = 2;
    v87 = 2;
    v88 = 2;
    v89 = 2;
    v90 = 2;
LABEL_13:
    v11 = v71;
    v10 = v70;
    v15 = v67;
    v16 = v68;
    v13 = v65;
    v14 = v66;
    v12 = v64;
    goto LABEL_4;
  }
  v192 = v2;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v91 = 0;
  v92 = 0uLL;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v72 = 0;
  v75 = 0;
  v80 = 0;
  v101 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  v10 = 0;
  v11 = 0;
  v73 = 2;
  v74 = 2;
  v76 = 2;
  v77 = 2;
  v78 = 2;
  v79 = 2;
  v81 = 2;
  v82 = 2;
  v83 = 2;
  v87 = 2;
  v88 = 2;
  v89 = 2;
  v90 = 2;
  v102 = 2;
  v103 = 2;
  v104 = 2;
  v105 = 2;
  v106 = 2;
  v12 = 2;
  v13 = 2;
  v14 = 2;
  v15 = 2;
  v16 = 2;
  v97 = 2;
LABEL_4:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
  v122 = v11;
  v123 = v10;
  v125 = v99;
  v128 = v98;
  v130 = v97;
  v131 = v16;
  v132 = v15;
  v133 = v14;
  v134 = v13;
  v135 = v12;
  v136 = v106;
  v137 = v105;
  v138 = v104;
  *(_DWORD *)v124 = v191[0];
  *(_DWORD *)&v124[3] = *(_DWORD *)((char *)v191 + 3);
  v126 = v190;
  *(_DWORD *)v127 = *(_DWORD *)v189;
  *(_DWORD *)&v127[3] = *(_DWORD *)&v189[3];
  v129 = v188;
  v139 = v103;
  v140 = v102;
  v141 = v96;
  v142 = v101;
  v143 = v80;
  v144 = v75;
  v145 = v90;
  *(_DWORD *)v146 = *(_DWORD *)v187;
  *(_DWORD *)&v146[3] = *(_DWORD *)&v187[3];
  v147 = v95;
  v148 = v72;
  v149 = v94;
  v150 = v186;
  v151 = v89;
  v152 = v88;
  v153 = v87;
  v154 = v93;
  v155 = v185;
  *(_DWORD *)&v156[3] = *(_DWORD *)&v184[3];
  *(_DWORD *)v156 = *(_DWORD *)v184;
  v157 = v92;
  v158 = v91;
  v159 = v183;
  v160 = v83;
  v161 = v82;
  v162 = v81;
  v163 = v79;
  v164 = v78;
  v165 = v77;
  v166 = v76;
  v167 = v86;
  v168 = v182;
  *(_DWORD *)&v169[3] = *(_DWORD *)&v181[3];
  *(_DWORD *)v169 = *(_DWORD *)v181;
  v170 = v85;
  v171 = v180;
  *(_DWORD *)&v172[3] = *(_DWORD *)&v179[3];
  *(_DWORD *)v172 = *(_DWORD *)v179;
  v173 = v84;
  v174 = v178;
  v175 = v73;
  v176 = v74;
  v17 = 7;
LABEL_5:
  v177 = v17;
  return sub_24028FB40((uint64_t)&v122);
}

uint64_t sub_24028EB44@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return XPCActivityCriteria.init(from:)(a1, a2);
}

uint64_t sub_24028EB58(_QWORD *a1)
{
  return XPCActivityCriteria.encode(to:)(a1);
}

uint64_t sub_24028EB70()
{
  sub_2402BDE04();
  XPCActivityCriteria.hash(into:)();
  return sub_2402BDE34();
}

uint64_t sub_24028EBB0()
{
  sub_2402BDE04();
  XPCActivityCriteria.hash(into:)();
  return sub_2402BDE34();
}

uint64_t XPCActivityCriteria.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_2402BD294();
  MEMORY[0x24BDAC7A8](v1);
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  sub_2402BD288();
  sub_2402BD2A0();
  sub_2402399E8();
  v2 = sub_2402BD2DC();
  v4 = v3;
  sub_2402BD660();
  v5 = sub_2402BD654();
  v7 = v6;
  sub_24027F72C(v2, v4);
  swift_release();
  if (!v7)
    return 32123;
  return v5;
}

uint64_t sub_24028ED88(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_2402BDD8C(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_2402BDD8C() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s20LighthouseBackground19XPCActivityCriteriaV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  char v83;
  uint64_t v84;
  char v85;
  int v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;

  result = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0)
    return result;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 41);
  v7 = *(unsigned __int8 *)(a1 + 42);
  v8 = *(unsigned __int8 *)(a1 + 43);
  v9 = *(unsigned __int8 *)(a1 + 44);
  v10 = *(unsigned __int8 *)(a1 + 45);
  v118 = *(unsigned __int8 *)(a1 + 47);
  v119 = *(unsigned __int8 *)(a1 + 46);
  v117 = *(unsigned __int8 *)(a1 + 48);
  v115 = *(unsigned __int8 *)(a1 + 49);
  v113 = *(unsigned __int8 *)(a1 + 50);
  v110 = *(unsigned __int8 *)(a1 + 51);
  v109 = *(_QWORD *)(a1 + 64);
  v105 = *(_QWORD *)(a1 + 56);
  v106 = *(_QWORD **)(a1 + 72);
  v103 = *(_QWORD **)(a1 + 80);
  v101 = *(unsigned __int8 *)(a1 + 88);
  v97 = *(_QWORD *)(a1 + 96);
  v99 = *(_QWORD *)(a1 + 104);
  v91 = *(_QWORD *)(a1 + 112);
  v95 = *(_BYTE *)(a1 + 120);
  v93 = *(unsigned __int8 *)(a1 + 121);
  v89 = *(unsigned __int8 *)(a1 + 122);
  v87 = *(unsigned __int8 *)(a1 + 123);
  v57 = *(_QWORD *)(a1 + 128);
  v85 = *(_BYTE *)(a1 + 136);
  v59 = *(_QWORD *)(a1 + 152);
  v60 = *(_QWORD *)(a1 + 144);
  v63 = *(_QWORD *)(a1 + 160);
  v62 = *(_BYTE *)(a1 + 168);
  v65 = *(unsigned __int8 *)(a1 + 169);
  v67 = *(unsigned __int8 *)(a1 + 170);
  v69 = *(unsigned __int8 *)(a1 + 171);
  v71 = *(unsigned __int8 *)(a1 + 172);
  v73 = *(unsigned __int8 *)(a1 + 173);
  v78 = *(unsigned __int8 *)(a1 + 174);
  v81 = *(unsigned __int8 *)(a1 + 175);
  v84 = *(_QWORD *)(a1 + 176);
  v83 = *(_BYTE *)(a1 + 184);
  v11 = *(_QWORD *)(a1 + 192);
  v12 = *(_BYTE *)(a1 + 200);
  v13 = *(_QWORD *)(a1 + 208);
  v14 = *(_BYTE *)(a1 + 216);
  v15 = *(unsigned __int8 *)(a1 + 217);
  v16 = *(unsigned __int8 *)(a1 + 218);
  v17 = *(unsigned __int8 *)(a1 + 219);
  v18 = *(unsigned __int8 *)(a2 + 41);
  v19 = *(unsigned __int8 *)(a2 + 42);
  v20 = *(unsigned __int8 *)(a2 + 43);
  v21 = *(unsigned __int8 *)(a2 + 44);
  v22 = *(unsigned __int8 *)(a2 + 45);
  v23 = *(unsigned __int8 *)(a2 + 46);
  v24 = *(unsigned __int8 *)(a2 + 47);
  v116 = *(unsigned __int8 *)(a2 + 48);
  v114 = *(unsigned __int8 *)(a2 + 49);
  v111 = *(unsigned __int8 *)(a2 + 51);
  v112 = *(unsigned __int8 *)(a2 + 50);
  v104 = *(_QWORD *)(a2 + 56);
  v108 = *(_QWORD *)(a2 + 64);
  v107 = *(_QWORD **)(a2 + 72);
  v102 = *(_QWORD **)(a2 + 80);
  v100 = *(unsigned __int8 *)(a2 + 88);
  v96 = *(_QWORD *)(a2 + 96);
  v98 = *(_QWORD *)(a2 + 104);
  v90 = *(_QWORD *)(a2 + 112);
  v94 = *(unsigned __int8 *)(a2 + 120);
  v92 = *(unsigned __int8 *)(a2 + 121);
  v88 = *(unsigned __int8 *)(a2 + 122);
  v86 = *(unsigned __int8 *)(a2 + 123);
  v51 = *(_QWORD *)(a2 + 128);
  v52 = *(unsigned __int8 *)(a2 + 136);
  v53 = *(_QWORD *)(a2 + 144);
  v54 = *(_QWORD *)(a2 + 152);
  v55 = *(_QWORD *)(a2 + 160);
  v56 = *(unsigned __int8 *)(a2 + 168);
  v58 = *(unsigned __int8 *)(a2 + 169);
  v61 = *(unsigned __int8 *)(a2 + 170);
  v64 = *(unsigned __int8 *)(a2 + 171);
  v66 = *(unsigned __int8 *)(a2 + 172);
  v68 = *(unsigned __int8 *)(a2 + 173);
  v70 = *(unsigned __int8 *)(a2 + 174);
  v72 = *(unsigned __int8 *)(a2 + 175);
  v74 = *(_QWORD *)(a2 + 176);
  v75 = *(unsigned __int8 *)(a2 + 184);
  v76 = *(_QWORD *)(a2 + 192);
  v77 = *(unsigned __int8 *)(a2 + 200);
  v79 = *(_QWORD *)(a2 + 208);
  v80 = *(unsigned __int8 *)(a2 + 216);
  v82 = *(unsigned __int8 *)(a2 + 217);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
      v25 = *(_BYTE *)(a2 + 24);
    else
      v25 = 1;
    if ((v25 & 1) != 0)
      return 0;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (v4 == *(_QWORD *)(a2 + 32))
      v26 = *(_BYTE *)(a2 + 40);
    else
      v26 = 1;
    if ((v26 & 1) != 0)
      return 0;
  }
  if (v6 == 2)
  {
    v42 = *(unsigned __int8 *)(a2 + 218);
    v43 = v12;
    v44 = v11;
    v45 = v14;
    v46 = v13;
    v47 = *(unsigned __int8 *)(a2 + 219);
    v48 = v15;
    v49 = v16;
    v50 = v17;
    if (v18 != 2)
      return 0;
  }
  else
  {
    if (v18 == 2)
      return 0;
    v42 = *(unsigned __int8 *)(a2 + 218);
    v43 = v12;
    v44 = v11;
    v45 = v14;
    v46 = v13;
    v47 = *(unsigned __int8 *)(a2 + 219);
    v48 = v15;
    v49 = v16;
    v50 = v17;
    if ((v6 & 1) != 0)
      v27 = 0x7974696C697455;
    else
      v27 = 0x616E65746E69614DLL;
    if ((v6 & 1) != 0)
      v28 = 0xE700000000000000;
    else
      v28 = 0xEB0000000065636ELL;
    if ((v18 & 1) != 0)
      v29 = 0x7974696C697455;
    else
      v29 = 0x616E65746E69614DLL;
    if ((v18 & 1) != 0)
      v30 = 0xE700000000000000;
    else
      v30 = 0xEB0000000065636ELL;
    if (v27 == v29 && v28 == v30)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v41 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v41 & 1) == 0)
        return result;
    }
  }
  if (v7 == 2)
  {
    if (v19 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v19 == 2 || ((((v7 & 1) == 0) ^ v19) & 1) == 0)
      return result;
  }
  if (v8 == 2)
  {
    if (v20 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v20 == 2 || ((((v8 & 1) == 0) ^ v20) & 1) == 0)
      return result;
  }
  if (v9 == 2)
  {
    if (v21 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v21 == 2 || ((((v9 & 1) == 0) ^ v21) & 1) == 0)
      return result;
  }
  if (v10 == 2)
  {
    if (v22 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v22 == 2 || ((((v10 & 1) == 0) ^ v22) & 1) == 0)
      return result;
  }
  if (v119 == 2)
  {
    if (v23 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v23 == 2 || ((((v119 & 1) == 0) ^ v23) & 1) == 0)
      return result;
  }
  if (v118 == 2)
  {
    if (v24 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v24 == 2 || ((((v118 & 1) == 0) ^ v24) & 1) == 0)
      return result;
  }
  if (v117 == 2)
  {
    if (v116 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v116 == 2 || ((((v117 & 1) == 0) ^ v116) & 1) == 0)
      return result;
  }
  if (v115 == 2)
  {
    if (v114 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v114 == 2 || ((((v115 & 1) == 0) ^ v114) & 1) == 0)
      return result;
  }
  if (v113 == 2)
  {
    if (v112 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v112 == 2 || ((((v113 & 1) == 0) ^ v112) & 1) == 0)
      return result;
  }
  if (v110 == 2)
  {
    if (v111 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v111 == 2 || ((((v110 & 1) == 0) ^ v111) & 1) == 0)
      return result;
  }
  if (!v109)
  {
    if (v108)
      return 0;
LABEL_94:
    if (v106)
    {
      if (!v107 || (sub_24028ED88(v106, v107) & 1) == 0)
        return 0;
    }
    else if (v107)
    {
      return 0;
    }
    if (v103)
    {
      if (!v102 || (sub_24028ED88(v103, v102) & 1) == 0)
        return 0;
    }
    else if (v102)
    {
      return 0;
    }
    if (v101 == 2)
    {
      if (v100 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v100 == 2 || ((((v101 & 1) == 0) ^ v100) & 1) == 0)
        return result;
    }
    if (v99)
    {
      if (!v98)
        return 0;
      if (v97 != v96 || v99 != v98)
      {
        v32 = sub_2402BDD8C();
        result = 0;
        if ((v32 & 1) == 0)
          return result;
      }
    }
    else if (v98)
    {
      return 0;
    }
    if ((v95 & 1) != 0)
    {
      if (!v94)
        return 0;
    }
    else
    {
      v33 = v94;
      if (v91 != v90)
        v33 = 1;
      if ((v33 & 1) != 0)
        return 0;
    }
    if (v93 == 2)
    {
      if (v92 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v92 == 2 || ((((v93 & 1) == 0) ^ v92) & 1) == 0)
        return result;
    }
    if (v89 == 2)
    {
      if (v88 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v88 == 2 || ((((v89 & 1) == 0) ^ v88) & 1) == 0)
        return result;
    }
    if (v87 == 2)
    {
      if (v86 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v86 == 2 || ((((v87 & 1) == 0) ^ v86) & 1) == 0)
        return result;
    }
    if ((v85 & 1) != 0)
    {
      if (!v52)
        return 0;
    }
    else
    {
      v34 = v52;
      if (v57 != v51)
        v34 = 1;
      if ((v34 & 1) != 0)
        return 0;
    }
    if (v59)
    {
      if (v54)
      {
        if (v60 != v53 || v59 != v54)
        {
          v35 = sub_2402BDD8C();
          result = 0;
          if ((v35 & 1) == 0)
            return result;
        }
LABEL_150:
        if ((v62 & 1) != 0)
        {
          if (!v56)
            return 0;
        }
        else
        {
          v36 = v56;
          if (v63 != v55)
            v36 = 1;
          if ((v36 & 1) != 0)
            return 0;
        }
        if (v65 == 2)
        {
          if (v58 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v58 == 2 || ((((v65 & 1) == 0) ^ v58) & 1) == 0)
            return result;
        }
        if (v67 == 2)
        {
          if (v61 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v61 == 2 || ((((v67 & 1) == 0) ^ v61) & 1) == 0)
            return result;
        }
        if (v69 == 2)
        {
          if (v64 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v64 == 2 || ((((v69 & 1) == 0) ^ v64) & 1) == 0)
            return result;
        }
        if (v71 == 2)
        {
          if (v66 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v66 == 2 || ((((v71 & 1) == 0) ^ v66) & 1) == 0)
            return result;
        }
        if (v73 == 2)
        {
          if (v68 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v68 == 2 || ((((v73 & 1) == 0) ^ v68) & 1) == 0)
            return result;
        }
        if (v78 == 2)
        {
          if (v70 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v70 == 2 || ((((v78 & 1) == 0) ^ v70) & 1) == 0)
            return result;
        }
        if (v81 == 2)
        {
          if (v72 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v72 == 2 || ((((v81 & 1) == 0) ^ v72) & 1) == 0)
            return result;
        }
        if ((v83 & 1) != 0)
        {
          if (!v75)
            return 0;
        }
        else
        {
          v37 = v75;
          if (v84 != v74)
            v37 = 1;
          if ((v37 & 1) != 0)
            return 0;
        }
        if ((v43 & 1) != 0)
        {
          if (!v77)
            return 0;
        }
        else
        {
          v38 = v77;
          if (v44 != v76)
            v38 = 1;
          if ((v38 & 1) != 0)
            return 0;
        }
        if ((v45 & 1) != 0)
        {
          if (!v80)
            return 0;
        }
        else
        {
          v39 = v80;
          if (v46 != v79)
            v39 = 1;
          if ((v39 & 1) != 0)
            return 0;
        }
        if (v48 == 2)
        {
          if (v82 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v82 == 2 || ((((v48 & 1) == 0) ^ v82) & 1) == 0)
            return result;
        }
        if (v49 == 2)
        {
          if (v42 != 2)
            return 0;
        }
        else
        {
          result = 0;
          if (v42 == 2 || ((((v49 & 1) == 0) ^ v42) & 1) == 0)
            return result;
        }
        if (v50 == 7)
        {
          if (v47 != 7)
            return 0;
        }
        else
        {
          if (v47 == 7)
            return 0;
          sub_240234E20(v50);
          if ((v40 & 1) == 0)
            return 0;
        }
        return 1;
      }
    }
    else if (!v54)
    {
      goto LABEL_150;
    }
    return 0;
  }
  if (!v108)
    return 0;
  if (v105 == v104 && v109 == v108)
    goto LABEL_94;
  v31 = sub_2402BDD8C();
  result = 0;
  if ((v31 & 1) != 0)
    goto LABEL_94;
  return result;
}

unint64_t sub_24028FA74()
{
  unint64_t result;

  result = qword_254352558;
  if (!qword_254352558)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5C68, &type metadata for XPCActivityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352558);
  }
  return result;
}

unint64_t sub_24028FAB8()
{
  unint64_t result;

  result = qword_254352498;
  if (!qword_254352498)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityPriority, &type metadata for XPCActivityPriority);
    atomic_store(result, (unint64_t *)&qword_254352498);
  }
  return result;
}

unint64_t sub_24028FAFC()
{
  unint64_t result;

  result = qword_2543524B0;
  if (!qword_2543524B0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityMotionState, &type metadata for XPCActivityMotionState);
    atomic_store(result, (unint64_t *)&qword_2543524B0);
  }
  return result;
}

uint64_t sub_24028FB40(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_24028FBA4()
{
  unint64_t result;

  result = qword_2543524A8;
  if (!qword_2543524A8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityPriority, &type metadata for XPCActivityPriority);
    atomic_store(result, (unint64_t *)&qword_2543524A8);
  }
  return result;
}

unint64_t sub_24028FBE8()
{
  unint64_t result;

  result = qword_2543524B8;
  if (!qword_2543524B8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityMotionState, &type metadata for XPCActivityMotionState);
    atomic_store(result, (unint64_t *)&qword_2543524B8);
  }
  return result;
}

unint64_t sub_24028FC30()
{
  unint64_t result;

  result = qword_256FE07E8;
  if (!qword_256FE07E8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityState, &type metadata for XPCActivityState);
    atomic_store(result, (unint64_t *)&qword_256FE07E8);
  }
  return result;
}

uint64_t sub_24028FC74()
{
  return sub_24026502C(&qword_256FE07F0, &qword_256FE07F8);
}

unint64_t sub_24028FC9C()
{
  unint64_t result;

  result = qword_256FE0800;
  if (!qword_256FE0800)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityMotionState, &type metadata for XPCActivityMotionState);
    atomic_store(result, (unint64_t *)&qword_256FE0800);
  }
  return result;
}

uint64_t sub_24028FCE0()
{
  return sub_24026502C(&qword_256FE0808, &qword_256FE0810);
}

unint64_t sub_24028FD08()
{
  unint64_t result;

  result = qword_256FE0818;
  if (!qword_256FE0818)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityPriority, &type metadata for XPCActivityPriority);
    atomic_store(result, (unint64_t *)&qword_256FE0818);
  }
  return result;
}

uint64_t sub_24028FD4C()
{
  return sub_24026502C(&qword_256FE0820, &qword_256FE0828);
}

unint64_t sub_24028FD74()
{
  unint64_t result;

  result = qword_256FE0830;
  if (!qword_256FE0830)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityCriteria, &type metadata for XPCActivityCriteria);
    atomic_store(result, (unint64_t *)&qword_256FE0830);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for XPCActivityState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24028FE04 + 4 * byte_2402C55DE[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24028FE38 + 4 * byte_2402C55D9[v4]))();
}

uint64_t sub_24028FE38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028FE40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24028FE48);
  return result;
}

uint64_t sub_24028FE54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24028FE5CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24028FE60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028FE68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityState()
{
  return &type metadata for XPCActivityState;
}

uint64_t storeEnumTagSinglePayload for XPCActivityMotionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24028FED0 + 4 * byte_2402C55E8[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24028FF04 + 4 * byte_2402C55E3[v4]))();
}

uint64_t sub_24028FF04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028FF0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24028FF14);
  return result;
}

uint64_t sub_24028FF20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24028FF28);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24028FF2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028FF34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityMotionState()
{
  return &type metadata for XPCActivityMotionState;
}

uint64_t storeEnumTagSinglePayload for XPCActivityPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24028FF9C + 4 * byte_2402C55F2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24028FFD0 + 4 * byte_2402C55ED[v4]))();
}

uint64_t sub_24028FFD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24028FFD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24028FFE0);
  return result;
}

uint64_t sub_24028FFEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24028FFF4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24028FFF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240290000(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityPriority()
{
  return &type metadata for XPCActivityPriority;
}

uint64_t destroy for XPCActivityCriteria()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for XPCActivityCriteria(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 41) = *(_QWORD *)(a2 + 41);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_WORD *)(a1 + 122) = *(_WORD *)(a2 + 122);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v6 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v6;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v7 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v7;
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for XPCActivityCriteria(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_BYTE *)(a1 + 45) = *(_BYTE *)(a2 + 45);
  *(_BYTE *)(a1 + 46) = *(_BYTE *)(a2 + 46);
  *(_BYTE *)(a1 + 47) = *(_BYTE *)(a2 + 47);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_BYTE *)(a1 + 123) = *(_BYTE *)(a2 + 123);
  v7 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v8;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_BYTE *)(a1 + 174) = *(_BYTE *)(a2 + 174);
  *(_BYTE *)(a1 + 175) = *(_BYTE *)(a2 + 175);
  v9 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v9;
  v10 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v10;
  v11 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v11;
  *(_BYTE *)(a1 + 217) = *(_BYTE *)(a2 + 217);
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(a2 + 218);
  *(_BYTE *)(a1 + 219) = *(_BYTE *)(a2 + 219);
  return a1;
}

__n128 __swift_memcpy220_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 204) = *(_OWORD *)(a2 + 204);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for XPCActivityCriteria(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 41) = *(_QWORD *)(a2 + 41);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_DWORD *)(a1 + 169) = *(_DWORD *)(a2 + 169);
  *(_BYTE *)(a1 + 173) = *(_BYTE *)(a2 + 173);
  *(_WORD *)(a1 + 174) = *(_WORD *)(a2 + 174);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCActivityCriteria(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 220))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivityCriteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 216) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 220) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 220) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityCriteria()
{
  return &type metadata for XPCActivityCriteria;
}

uint64_t storeEnumTagSinglePayload for XPCActivityCriteria.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 39 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 39) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD8)
    return ((uint64_t (*)(void))((char *)&loc_2402906A0 + 4 * byte_2402C55FC[v4]))();
  *a1 = a2 + 39;
  return ((uint64_t (*)(void))((char *)sub_2402906D4 + 4 * byte_2402C55F7[v4]))();
}

uint64_t sub_2402906D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402906DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402906E4);
  return result;
}

uint64_t sub_2402906F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402906F8);
  *(_BYTE *)result = a2 + 39;
  return result;
}

uint64_t sub_2402906FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240290704(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivityCriteria.CodingKeys()
{
  return &type metadata for XPCActivityCriteria.CodingKeys;
}

unint64_t sub_240290724()
{
  unint64_t result;

  result = qword_256FE0838;
  if (!qword_256FE0838)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5C40, &type metadata for XPCActivityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0838);
  }
  return result;
}

unint64_t sub_24029076C()
{
  unint64_t result;

  result = qword_2543524E8;
  if (!qword_2543524E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5BB0, &type metadata for XPCActivityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543524E8);
  }
  return result;
}

unint64_t sub_2402907B4()
{
  unint64_t result;

  result = qword_254352560;
  if (!qword_254352560)
  {
    result = MEMORY[0x2426820F8](&unk_2402C5BD8, &type metadata for XPCActivityCriteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352560);
  }
  return result;
}

uint64_t sub_2402907F8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79616C6564 && a2 == 0xE500000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x746142776F6C6C61 && a2 == 0xEC00000079726574 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA310 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA330 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x70614E7265776F70 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6572666552707061 && a2 == 0xEA00000000006873 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA0D0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x80000002402CA350 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6F6F62655279616DLL && a2 == 0xEF65636976654474 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002402CA380 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA3A0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA3C0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402CA3E0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x6465766C6F766E69 && a2 == 0xEF737365636F7250 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000002402CA400 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA420 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA440 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x6E4979726F6D656DLL && a2 == 0xEF657669736E6574 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x6E65746E49757063 && a2 == 0xEC00000065766973 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x65746E496B736964 && a2 == 0xED0000657669736ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402C9F60 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 24;
  }
  else if (a1 == 0x6D614E70756F7267 && a2 == 0xE900000000000065 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 25;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA0F0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 26;
  }
  else if (a1 == 0x74736E4974736F70 && a2 == 0xEB000000006C6C61 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 27;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEE00437373616C43 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 28;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEE00427373616C43 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 29;
  }
  else if (a1 == 0x7365726975716572 && a2 == 0xEE00417373616C43 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 30;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA1D0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 31;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002402CA460 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  else if (a1 == 0xD000000000000025 && a2 == 0x80000002402CA480 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 33;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA070 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 34;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA090 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 35;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA130 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 36;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402CA050 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 37;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000002402CA0B0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 38;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA4B0)
  {
    swift_bridgeObjectRelease();
    return 39;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 39;
    else
      return 40;
  }
}

unint64_t sub_2402917D8()
{
  unint64_t result;

  result = qword_2543524A0;
  if (!qword_2543524A0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityPriority, &type metadata for XPCActivityPriority);
    atomic_store(result, (unint64_t *)&qword_2543524A0);
  }
  return result;
}

unint64_t sub_24029181C()
{
  unint64_t result;

  result = qword_256FE0840;
  if (!qword_256FE0840)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityMotionState, &type metadata for XPCActivityMotionState);
    atomic_store(result, (unint64_t *)&qword_256FE0840);
  }
  return result;
}

unint64_t sub_240291860()
{
  unint64_t result;

  result = qword_256FE0848;
  if (!qword_256FE0848)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCActivityState, &type metadata for XPCActivityState);
    atomic_store(result, (unint64_t *)&qword_256FE0848);
  }
  return result;
}

void static XPCMessage.messageFormat.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2402918B0(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0468);
}

uint64_t static XPCMessage.messageType.getter()
{
  swift_getMetatypeMetadata();
  return sub_2402BD684();
}

uint64_t sub_2402918E8(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE0450);
}

uint64_t sub_2402918F4(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0440);
}

uint64_t sub_240291900(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_254352708);
}

uint64_t sub_24029190C(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0400);
}

uint64_t sub_240291918(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE03E8);
}

uint64_t sub_240291924(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0428);
}

uint64_t sub_240291930(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE0410);
}

uint64_t sub_24029193C(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE03D8);
}

uint64_t sub_240291948(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE03C0);
}

uint64_t sub_240291954(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE03B0);
}

uint64_t sub_240291960(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0398);
}

uint64_t sub_24029196C(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0388);
}

uint64_t sub_240291978(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE0370);
}

uint64_t sub_240291984(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0360);
}

uint64_t sub_240291990(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0348);
}

uint64_t sub_24029199C(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE04F0);
}

uint64_t sub_2402919A8(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE04D8);
}

uint64_t sub_2402919B4(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE04C8);
}

uint64_t sub_2402919C0(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE04B0);
}

uint64_t sub_2402919CC(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE04A0);
}

uint64_t sub_2402919D8(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0488);
}

uint64_t sub_2402919E4(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0478);
}

uint64_t sub_2402919F0(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0980);
}

uint64_t sub_2402919FC(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, (uint64_t *)&unk_256FE0338);
}

void *sub_240291A08(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v5 = (void *)sub_240291A50(a1, a2, a3, *(_QWORD *)(a4 + 8));
  v6 = v5;
  if (!v4)
    xpc_dictionary_set_BOOL(v5, "messageError", 1);
  return v6;
}

uint64_t sub_240291A50(uint64_t a1, const char **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, _QWORD, uint64_t);
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char **v22;
  uint64_t result;
  uint64_t v24;
  const char *const *reply;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a1;
  v30 = a3;
  v31 = a4;
  v29 = a2;
  v4 = sub_2402BD66C();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_2402BD2AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_2402BD2B8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  v13 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v14 = v30;
  v13(v12, *MEMORY[0x24BDCB358], v9);
  sub_2402BD2D0();
  v15 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v16 = v31;
  v15(v8, *MEMORY[0x24BDCB320], v5);
  sub_2402BD2C4();
  v17 = v33;
  v18 = sub_2402BD2DC();
  if (v17)
  {
    swift_release();
    return (uint64_t)v8;
  }
  v20 = v18;
  v21 = v19;
  v22 = v29;
  sub_2402BD660();
  result = sub_2402BD654();
  if (v24)
  {
    v33 = result;
    reply = v22;
    if (v22)
    {
      reply = (const char *const *)xpc_dictionary_create_reply(v22);
      v8 = (char *)reply;
      if (reply)
      {
LABEL_8:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 40))(&v34, v14, v16);
        xpc_dictionary_set_int64(v8, "messageFormat", v34);
        (*(void (**)(uint64_t, uint64_t))(v16 + 48))(v14, v16);
        v26 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v8, "messageType", (const char *)(v26 + 32));
        swift_release();
        v27 = sub_2402BD690();
        swift_bridgeObjectRelease();
        xpc_dictionary_set_string(v8, "messageBody", (const char *)(v27 + 32));
        swift_release();
        sub_24027F72C(v20, v21);
        swift_release();
        return (uint64_t)v8;
      }
      __break(1u);
    }
    v8 = (char *)xpc_dictionary_create(reply, 0, 0);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_240291CF0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _BYTE *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29[2];
  uint64_t v30;

  v3 = MEMORY[0x242682320]();
  if (v3 != sub_2402BD504()
    || !xpc_dictionary_get_BOOL(a1, "messageError")
    || (v4 = MEMORY[0x242682320](a1), v4 != sub_2402BD504())
    || !xpc_dictionary_get_string(a1, "messageType"))
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v5 = sub_2402BD4E0();
    __swift_project_value_buffer(v5, (uint64_t)qword_2543529A0);
    swift_unknownObjectRetain_n();
    v6 = sub_2402BD4C8();
    v7 = sub_2402BD960();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v29[0] = v9;
      v10 = objc_msgSend(a1, sel_description);
      v11 = sub_2402BD648();
      v13 = v12;

      v30 = sub_24023D440(v11, v13, v29);
      sub_2402BD9FC();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      v14 = "Decoding invalid error message: %s";
LABEL_8:
      _os_log_impl(&dword_24022D000, v6, v7, v14, v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242682188](v9, -1, -1);
      MEMORY[0x242682188](v8, -1, -1);

LABEL_27:
      sub_24027F6A4();
      swift_allocError();
      *v28 = 1;
      return swift_willThrow();
    }
LABEL_26:

    swift_unknownObjectRelease_n();
    goto LABEL_27;
  }
  v16 = sub_2402BD6CC();
  v17 = v15;
  if (v16 == 0x746F6D6552435058 && v15 == 0xEE00726F72724565 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    result = sub_240276330(a1);
    if (v1)
      return result;
    v19 = v29[1];
    sub_24027F608();
    swift_allocError();
    *v20 = v29[0];
    v20[1] = v19;
    return swift_willThrow();
  }
  if (v16 == 0xD000000000000012 && v17 == 0x80000002402CA520)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v21 = sub_2402BDD8C();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v23 = sub_2402BD4E0();
    __swift_project_value_buffer(v23, (uint64_t)qword_2543529A0);
    swift_unknownObjectRetain_n();
    v6 = sub_2402BD4C8();
    v7 = sub_2402BD960();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      *(_DWORD *)v8 = 136315138;
      v29[0] = v9;
      v24 = objc_msgSend(a1, sel_description);
      v25 = sub_2402BD648();
      v27 = v26;

      v30 = sub_24023D440(v25, v27, v29);
      sub_2402BD9FC();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      v14 = "Unrecognized error message: %s";
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_20:
  result = sub_240276708(a1);
  if (!v1)
  {
    sub_2402714A8();
    swift_allocError();
    *v22 = v29[0];
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2402921E8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _BYTE v38[12];
  int v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a2;
  v46 = a3;
  v4 = sub_2402BD234();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_2402BD240();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x242682320](a1);
  if (v12 != sub_2402BD504())
  {
    sub_24027F6A4();
    swift_allocError();
    *v13 = 4;
    return swift_willThrow();
  }
  v40 = v11;
  v41 = v4;
  v42 = v9;
  v43 = v7;
  v44 = v5;
  v14 = v45;
  v15 = v46;
  v16 = MEMORY[0x242682320](a1);
  if (v16 != sub_2402BD504() || (v17 = a1, (unint64_t)xpc_dictionary_get_int64(a1, "messageFormat") > 2))
  {
    sub_24027F6A4();
    swift_allocError();
    *v20 = 0;
    return swift_willThrow();
  }
  v18 = MEMORY[0x242682320](a1);
  if (v18 != sub_2402BD504() || !xpc_dictionary_get_string(a1, "messageType"))
    goto LABEL_6;
  v22 = sub_2402BD6CC();
  v24 = v23;
  v47 = v14;
  swift_getMetatypeMetadata();
  if (v22 == sub_2402BD684() && v24 == v25)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  if (v22 != (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 48))(v14, v15) || v24 != v27)
  {
    v39 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v43;
    v29 = v44;
    v30 = v8;
    v31 = v42;
    if ((v39 & 1) != 0)
      goto LABEL_19;
LABEL_6:
    sub_24027F6A4();
    swift_allocError();
    *v19 = 1;
    return swift_willThrow();
  }
  swift_bridgeObjectRelease_n();
  v28 = v43;
  v29 = v44;
  v30 = v8;
  v31 = v42;
LABEL_19:
  if (xpc_dictionary_get_string(v17, "messageBody"))
  {
    v32 = sub_2402BD6CC();
    v44 = v33;
    sub_2402BD27C();
    swift_allocObject();
    sub_2402BD270();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v31 + 104))(v40, *MEMORY[0x24BDCB1D8], v30);
    sub_2402BD258();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v29 + 104))(v28, *MEMORY[0x24BDCB1B8], v41);
    sub_2402BD24C();
    v34 = sub_2402BBC80(v32, v44);
    v36 = v35;
    sub_2402BD264();
    sub_24027F72C(v34, v36);
    return swift_release();
  }
  sub_24027F6A4();
  swift_allocError();
  *v37 = 2;
  return swift_willThrow();
}

LighthouseBackground::XPCMessageKey_optional __swiftcall XPCMessageKey.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::XPCMessageKey_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static XPCMessageKey.allCases.getter()
{
  return &unk_25108BBB0;
}

uint64_t XPCMessageKey.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240292670 + 4 * byte_2402C5D00[*v0]))(0x466567617373656DLL, 0xED000074616D726FLL);
}

uint64_t sub_240292670()
{
  return 0x546567617373656DLL;
}

uint64_t sub_240292690()
{
  return 0x426567617373656DLL;
}

uint64_t sub_2402926B0()
{
  return 0x456567617373656DLL;
}

void sub_2402926D0(char *a1)
{
  sub_2402361AC(*a1);
}

void sub_2402926DC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_240292734()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402927BC()
{
  __asm { BR              X10 }
}

uint64_t sub_240292804()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240292878()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_2402928CC()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::XPCMessageKey_optional sub_240292954(Swift::String *a1)
{
  return XPCMessageKey.init(rawValue:)(*a1);
}

uint64_t sub_240292960()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24029299C + 4 * byte_2402C5D10[*v0]))();
}

void sub_24029299C(_QWORD *a1@<X8>)
{
  *a1 = 0x546567617373656DLL;
  a1[1] = 0xEB00000000657079;
}

void sub_2402929C0(_QWORD *a1@<X8>)
{
  *a1 = 0x426567617373656DLL;
  a1[1] = 0xEB0000000079646FLL;
}

void sub_2402929E4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "messageError");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_240292A08(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108ADB0;
}

LighthouseBackground::XPCMessageFormat_optional __swiftcall XPCMessageFormat.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (LighthouseBackground::XPCMessageFormat_optional)rawValue;
}

void *static XPCMessageFormat.allCases.getter()
{
  return &unk_25108BBD8;
}

uint64_t XPCMessageFormat.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_240292A40()
{
  sub_2402BDE04();
  sub_2402BDE28();
  return sub_2402BDE34();
}

uint64_t sub_240292A84()
{
  return sub_2402BDE28();
}

uint64_t sub_240292AAC()
{
  sub_2402BDE04();
  sub_2402BDE28();
  return sub_2402BDE34();
}

LighthouseBackground::XPCMessageFormat_optional sub_240292AEC(Swift::Int64 *a1)
{
  return XPCMessageFormat.init(rawValue:)(*a1);
}

void sub_240292AF4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_240292B00(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AE78;
}

BOOL static XPCParsingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t XPCParsingError.hash(into:)()
{
  return sub_2402BDE10();
}

uint64_t XPCParsingError.hashValue.getter()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

void sub_240292B90(_BYTE *a1@<X8>)
{
  static XPCMessage.messageFormat.getter(a1);
}

uint64_t sub_240292BA4()
{
  return static XPCMessage.messageType.getter();
}

uint64_t sub_240292BB8()
{
  return 0x45636972656E6567;
}

uint64_t sub_240292BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x45636972656E6567 && a2 == 0xEC000000726F7272)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240292C84()
{
  sub_240292F18();
  return sub_2402BDE88();
}

uint64_t sub_240292CAC()
{
  sub_240292F18();
  return sub_2402BDE94();
}

uint64_t sub_240292CD4()
{
  return 12383;
}

uint64_t sub_240292CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_2402BDD8C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_240292D5C()
{
  sub_240292F5C();
  return sub_2402BDE88();
}

uint64_t sub_240292D84()
{
  sub_240292F5C();
  return sub_2402BDE94();
}

uint64_t XPCRemoteError.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0850);
  v13 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0858);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v12[1] = v1[1];
  v12[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240292F18();
  sub_2402BDE70();
  sub_240292F5C();
  sub_2402BDC90();
  sub_2402BDCFC();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_240292F18()
{
  unint64_t result;

  result = qword_256FE0860;
  if (!qword_256FE0860)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6378, &type metadata for XPCRemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0860);
  }
  return result;
}

unint64_t sub_240292F5C()
{
  unint64_t result;

  result = qword_256FE0868;
  if (!qword_256FE0868)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6328, &type metadata for XPCRemoteError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0868);
  }
  return result;
}

uint64_t XPCRemoteError.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0870);
  v3 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0878);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_240292F18();
  v10 = v30;
  sub_2402BDE64();
  if (v10)
    goto LABEL_7;
  v26 = v3;
  v27 = a1;
  v30 = v7;
  v11 = v6;
  if (*(_QWORD *)(sub_2402BDC78() + 16) != 1)
  {
    v15 = v6;
    v16 = sub_2402BDAE0();
    swift_allocError();
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE708);
    *v18 = &type metadata for XPCRemoteError;
    sub_2402BDBB8();
    sub_2402BDAD4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    v19 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  sub_240292F5C();
  v12 = v5;
  sub_2402BDBAC();
  v13 = v30;
  v14 = v29;
  v21 = sub_2402BDC24();
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v11);
  v24 = (uint64_t)v27;
  v25 = v28;
  *v28 = v21;
  v25[1] = v23;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_240293250(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0328);
}

uint64_t sub_24029325C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return XPCRemoteError.init(from:)(a1, a2);
}

uint64_t sub_240293270(_QWORD *a1)
{
  return XPCRemoteError.encode(to:)(a1);
}

void XPCEmptyReply.encode(to:)()
{
  sub_2402BDB4C();
  __break(1u);
}

void XPCEmptyReply.init(from:)(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_2402BDB4C();
  __break(1u);
}

unint64_t sub_24029331C()
{
  unint64_t result;

  result = qword_256FE0880;
  if (!qword_256FE0880)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCMessageKey, &type metadata for XPCMessageKey);
    atomic_store(result, (unint64_t *)&qword_256FE0880);
  }
  return result;
}

uint64_t sub_240293360()
{
  return sub_24026502C(&qword_256FE0888, &qword_256FE0890);
}

unint64_t sub_240293388()
{
  unint64_t result;

  result = qword_256FE0898;
  if (!qword_256FE0898)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCMessageFormat, &type metadata for XPCMessageFormat);
    atomic_store(result, (unint64_t *)&qword_256FE0898);
  }
  return result;
}

uint64_t sub_2402933CC()
{
  return sub_24026502C(&qword_256FE08A0, &qword_256FE08A8);
}

unint64_t sub_2402933F4()
{
  unint64_t result;

  result = qword_256FE08B0;
  if (!qword_256FE08B0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCParsingError, &type metadata for XPCParsingError);
    atomic_store(result, (unint64_t *)&qword_256FE08B0);
  }
  return result;
}

uint64_t sub_240293438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_24029344C, (uint64_t (*)(void))sub_24027F608);
}

unint64_t sub_24029344C()
{
  unint64_t result;

  result = qword_256FE08B8;
  if (!qword_256FE08B8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCRemoteError, &type metadata for XPCRemoteError);
    atomic_store(result, (unint64_t *)&qword_256FE08B8);
  }
  return result;
}

uint64_t sub_240293490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_24027F6E8, (uint64_t (*)(void))sub_2402934A4);
}

unint64_t sub_2402934A4()
{
  unint64_t result;

  result = qword_256FE08F8;
  if (!qword_256FE08F8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCRemoteError, &type metadata for XPCRemoteError);
    atomic_store(result, (unint64_t *)&qword_256FE08F8);
  }
  return result;
}

uint64_t sub_2402934E8(uint64_t a1, uint64_t a2)
{
  return sub_2402934F4(a1, a2, &qword_256FE0978);
}

uint64_t sub_2402934F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  return sub_2402BD684();
}

uint64_t sub_240293524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24026593C(a1, a2, a3, (uint64_t (*)(void))sub_240293538, (uint64_t (*)(void))sub_24029357C);
}

unint64_t sub_240293538()
{
  unint64_t result;

  result = qword_256FE0938;
  if (!qword_256FE0938)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCEmptyReply, &type metadata for XPCEmptyReply);
    atomic_store(result, (unint64_t *)&qword_256FE0938);
  }
  return result;
}

unint64_t sub_24029357C()
{
  unint64_t result;

  result = qword_256FE0940;
  if (!qword_256FE0940)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for XPCEmptyReply, &type metadata for XPCEmptyReply);
    atomic_store(result, (unint64_t *)&qword_256FE0940);
  }
  return result;
}

void sub_2402935C0(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  sub_2402BDB4C();
  __break(1u);
}

void sub_24029360C()
{
  sub_2402BDB4C();
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for XPCMessageKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2402936A0 + 4 * byte_2402C5D19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2402936D4 + 4 * byte_2402C5D14[v4]))();
}

uint64_t sub_2402936D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402936DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402936E4);
  return result;
}

uint64_t sub_2402936F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402936F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2402936FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_240293704(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCMessageKey()
{
  return &type metadata for XPCMessageKey;
}

uint64_t storeEnumTagSinglePayload for XPCMessageFormat(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24029376C + 4 * byte_2402C5D23[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2402937A0 + 4 * byte_2402C5D1E[v4]))();
}

uint64_t sub_2402937A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402937A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402937B0);
  return result;
}

uint64_t sub_2402937BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402937C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2402937C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402937D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCMessageFormat()
{
  return &type metadata for XPCMessageFormat;
}

uint64_t storeEnumTagSinglePayload for XPCParsingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_240293838 + 4 * byte_2402C5D2D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24029386C + 4 * byte_2402C5D28[v4]))();
}

uint64_t sub_24029386C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_240293874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24029387CLL);
  return result;
}

uint64_t sub_240293888(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x240293890);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_240293894(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029389C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCParsingError()
{
  return &type metadata for XPCParsingError;
}

uint64_t dispatch thunk of static XPCMessage.messageFormat.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static XPCMessage.messageType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

ValueMetadata *type metadata accessor for XPCRemoteError()
{
  return &type metadata for XPCRemoteError;
}

ValueMetadata *type metadata accessor for XPCEmptyReply()
{
  return &type metadata for XPCEmptyReply;
}

ValueMetadata *type metadata accessor for XPCRemoteError.CodingKeys()
{
  return &type metadata for XPCRemoteError.CodingKeys;
}

uint64_t _s20LighthouseBackground14XPCRemoteErrorO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24029393C + 4 * byte_2402C5D32[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24029395C + 4 * byte_2402C5D37[v4]))();
}

_BYTE *sub_24029393C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24029395C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_240293964(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24029396C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_240293974(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24029397C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCRemoteError.GenericErrorCodingKeys()
{
  return &type metadata for XPCRemoteError.GenericErrorCodingKeys;
}

unint64_t sub_24029399C()
{
  unint64_t result;

  result = qword_256FE0948;
  if (!qword_256FE0948)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6248, &type metadata for XPCRemoteError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0948);
  }
  return result;
}

unint64_t sub_2402939E4()
{
  unint64_t result;

  result = qword_256FE0950;
  if (!qword_256FE0950)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6300, &type metadata for XPCRemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0950);
  }
  return result;
}

unint64_t sub_240293A2C()
{
  unint64_t result;

  result = qword_256FE0958;
  if (!qword_256FE0958)
  {
    result = MEMORY[0x2426820F8](&unk_2402C61B8, &type metadata for XPCRemoteError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0958);
  }
  return result;
}

unint64_t sub_240293A74()
{
  unint64_t result;

  result = qword_256FE0960;
  if (!qword_256FE0960)
  {
    result = MEMORY[0x2426820F8](&unk_2402C61E0, &type metadata for XPCRemoteError.GenericErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0960);
  }
  return result;
}

unint64_t sub_240293ABC()
{
  unint64_t result;

  result = qword_256FE0968;
  if (!qword_256FE0968)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6270, &type metadata for XPCRemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0968);
  }
  return result;
}

unint64_t sub_240293B04()
{
  unint64_t result;

  result = qword_256FE0970;
  if (!qword_256FE0970)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6298, &type metadata for XPCRemoteError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0970);
  }
  return result;
}

uint64_t sub_240293B48(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_24029BDAC(0, v1, 0);
    v2 = v15;
    v4 = type metadata accessor for TaskStatusEvent(0);
    v5 = *(_QWORD *)(v4 - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      v8 = (uint64_t *)(v6 + *(int *)(v4 + 24));
      v10 = *v8;
      v9 = v8[1];
      v11 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      swift_bridgeObjectRetain();
      if (v11 >= v12 >> 1)
        sub_24029BDAC(v12 > 1, v11 + 1, 1);
      v6 += v7;
      *(_QWORD *)(v15 + 16) = v11 + 1;
      v13 = v15 + 16 * v11;
      *(_QWORD *)(v13 + 32) = v10;
      *(_QWORD *)(v13 + 40) = v9;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void sub_240293C4C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0AA8);
  sub_2402BD684();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEB40);
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  v0[4] = sub_240249150(MEMORY[0x24BEE4AF8]);
  v0[2] = 0x72476D6F74737543;
  v0[3] = 0xEB00000000687061;
  v2 = sub_240249150(v1);
  swift_beginAccess();
  v0[4] = v2;
  swift_bridgeObjectRelease();
  swift_retain();
  sub_24029C7B4((uint64_t)&unk_25108ACE8, (uint64_t)v0);
  swift_bridgeObjectRelease();
  swift_release();
  JUMPOUT(0x240293E54);
}

uint64_t CustomRegex.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2402BDBA0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t CustomRegex.rawValue.getter()
{
  return 0x462A5D465E5B5328;
}

uint64_t sub_240294198()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  return sub_2402BDE34();
}

uint64_t sub_2402941EC()
{
  return sub_2402BD6A8();
}

uint64_t sub_240294208()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  return sub_2402BDE34();
}

uint64_t sub_240294258@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_2402BDBA0();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_2402942A8(_QWORD *a1@<X8>)
{
  *a1 = 0x462A5D465E5B5328;
  a1[1] = 0xE900000000000029;
}

LighthouseBackground::LatencyRegex_optional __swiftcall LatencyRegex.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::LatencyRegex_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t LatencyRegex.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24029435C + 4 * byte_2402C63D0[*v0]))(0x4E5E5B4E283D3F28, 0xED000029294E2A5DLL);
}

uint64_t sub_24029435C()
{
  return 692277800;
}

uint64_t sub_24029436C()
{
  return 692474408;
}

uint64_t sub_240294380()
{
  return 692343336;
}

uint64_t sub_240294394()
{
  return 0x432A5D435E5B4428;
}

void sub_2402943E4(char *a1)
{
  sub_24023650C(*a1);
}

void sub_2402943F0()
{
  char *v0;

  sub_2402AA3D8(0, *v0);
}

void sub_2402943FC()
{
  __asm { BR              X10 }
}

uint64_t sub_240294444()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_2402944E0(uint64_t a1)
{
  char *v1;

  sub_2402AA3D8(a1, *v1);
}

LighthouseBackground::LatencyRegex_optional sub_2402944E8(Swift::String *a1)
{
  return LatencyRegex.init(rawValue:)(*a1);
}

uint64_t sub_2402944F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_240294530 + 4 * byte_2402C63DE[*v0]))();
}

void sub_240294530(_QWORD *a1@<X8>)
{
  *a1 = 692277800;
  a1[1] = 0xE400000000000000;
}

void sub_240294544(_QWORD *a1@<X8>)
{
  *a1 = 692474408;
  a1[1] = 0xE400000000000000;
}

void sub_24029456C(_QWORD *a1@<X8>)
{
  *a1 = 0x432A5D435E5B4428;
  a1[1] = 0xE900000000000029;
}

LighthouseBackground::PushRegex_optional __swiftcall PushRegex.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::PushRegex_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t PushRegex.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x2947495428;
  if (*v0 != 1)
    v1 = 0x295A53495428;
  if (*v0)
    return v1;
  else
    return 0x29525053495428;
}

uint64_t sub_240294670(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24023496C(*a1, *a2);
}

uint64_t sub_24029467C()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_240294714()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_240294788()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::PushRegex_optional sub_24029481C(Swift::String *a1)
{
  return PushRegex.init(rawValue:)(*a1);
}

void sub_240294828(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x2947495428;
  if (v2 != 1)
  {
    v5 = 0x295A53495428;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x29525053495428;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_240294880()
{
  uint64_t result;

  result = sub_240248DD4((uint64_t)&unk_25108BDA0);
  qword_256FE0988 = result;
  return result;
}

uint64_t registeredEventPassSet.getter()
{
  if (qword_256FDE080 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

Swift::String __swiftcall taskEventsToStringSequence(taskEvents:)(Swift::OpaquePointer taskEvents)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  _BYTE v16[8];
  uint64_t v17;

  v2 = type metadata accessor for LedgerState();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)&v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *((_QWORD *)taskEvents._rawValue + 2);
  if (v6)
  {
    v17 = MEMORY[0x24BEE4AF8];
    sub_24029BDAC(0, v6, 0);
    sub_240238BF0((uint64_t)taskEvents._rawValue+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    v7 = *v5;
    v8 = (void *)v5[1];
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    TaskStatus.init(rawValue:)(v9);
    __asm { BR              X9 }
  }
  v17 = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  v10 = sub_2402BD5F4();
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = v10;
  v14 = v12;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

Swift::String __swiftcall customEventsToStringSequence(customEvents:)(Swift::OpaquePointer customEvents)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String result;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for LedgerState();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *((_QWORD *)customEvents._rawValue + 2);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v22 = MEMORY[0x24BEE4AF8];
    sub_24029BDAC(0, v6, 0);
    v8 = (char *)customEvents._rawValue
       + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v21 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_240238BF0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      swift_bridgeObjectRetain();
      v9 = sub_2402BDBA0();
      swift_bridgeObjectRelease();
      v10 = 0xE100000000000000;
      v11 = 83;
      switch(v9)
      {
        case 0:
          break;
        case 1:
          v11 = 76;
          break;
        case 2:
          v11 = 80;
          break;
        case 3:
          v11 = 85;
          break;
        case 4:
          v11 = 70;
          break;
        default:
          v11 = 0;
          v10 = 0xE000000000000000;
          break;
      }
      sub_240238C34((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v7 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24029BDAC(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v22;
      }
      v13 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_24029BDAC(v12 > 1, v13 + 1, 1);
        v7 = v22;
      }
      *(_QWORD *)(v7 + 16) = v13 + 1;
      v14 = v7 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v11;
      *(_QWORD *)(v14 + 40) = v10;
      v8 += v21;
      --v6;
    }
    while (v6);
  }
  v22 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  v15 = sub_2402BD5F4();
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = v15;
  v19 = v17;
  result._object = v19;
  result._countAndFlagsBits = v18;
  return result;
}

double TelemetryBucketRange.startTimestamp.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

double TelemetryBucketRange.endTimestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t TelemetryBucketRange.telemetryStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TelemetryBucketRange() + 24);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TelemetryBucketRange.telemetryEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TelemetryBucketRange() + 28);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TelemetryBucketRange.init(from:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  double v11;
  uint64_t v12;

  v4 = sub_2402BD48C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402BD468();
  sub_2402BD408();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  type metadata accessor for TelemetryBucketRange();
  sub_2402BD3FC();
  sub_2402BD408();
  *(_QWORD *)(a1 + 8) = v8;
  sub_2402BD42C();
  result = sub_2402BD408();
  if (v10 >= a2)
    v11 = v10;
  else
    v11 = a2;
  if (a2 != 0.0)
    v10 = v11;
  *(double *)a1 = v10;
  return result;
}

LighthouseBackground::TelemetryConfig __swiftcall TelemetryConfig.init(bucketInterval:contextId:deviceTelemetry:pushTelemetry:)(LighthouseBackground::BucketInterval bucketInterval, Swift::String contextId, Swift::Bool deviceTelemetry, Swift::Bool pushTelemetry)
{
  uint64_t v4;
  LighthouseBackground::TelemetryConfig result;

  *(_BYTE *)v4 = *(_BYTE *)bucketInterval;
  *(Swift::String *)(v4 + 8) = contextId;
  *(_BYTE *)(v4 + 24) = deviceTelemetry;
  *(_BYTE *)(v4 + 25) = pushTelemetry;
  result.contextId = contextId;
  result.deviceTelemetry = deviceTelemetry;
  result.bucketInterval = bucketInterval;
  return result;
}

LighthouseBackground::CustomTelemetryStates_optional __swiftcall CustomTelemetryStates.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::CustomTelemetryStates_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static CustomTelemetryStates.allCases.getter()
{
  return &unk_25108BEF8;
}

uint64_t CustomTelemetryStates.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_240294FB4 + 4 * byte_2402C63F6[*v0]))(0x7472617473, 0xE500000000000000);
}

uint64_t sub_240294FB4()
{
  return 1684107116;
}

uint64_t sub_240294FC4()
{
  return 0x737365636F7270;
}

uint64_t sub_240294FDC()
{
  return 0x64616F6C7075;
}

uint64_t sub_240294FF0()
{
  return 0x64656873696E6966;
}

void sub_240295008(char *a1)
{
  sub_2402352BC(*a1);
}

void sub_240295014()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_24029505C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402950D8()
{
  __asm { BR              X10 }
}

uint64_t sub_240295110()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_240295178()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_2402951BC()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::CustomTelemetryStates_optional sub_240295238(Swift::String *a1)
{
  return CustomTelemetryStates.init(rawValue:)(*a1);
}

uint64_t sub_240295244()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_240295270 + 4 * byte_2402C640A[*v0]))();
}

void sub_240295270(_QWORD *a1@<X8>)
{
  *a1 = 1684107116;
  a1[1] = 0xE400000000000000;
}

void sub_240295284(_QWORD *a1@<X8>)
{
  *a1 = 0x737365636F7270;
  a1[1] = 0xE700000000000000;
}

void sub_2402952A0(_QWORD *a1@<X8>)
{
  *a1 = 0x64616F6C7075;
  a1[1] = 0xE600000000000000;
}

void sub_2402952B8(_QWORD *a1@<X8>)
{
  *a1 = 0x64656873696E6966;
  a1[1] = 0xE800000000000000;
}

void sub_2402952D4(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AFD8;
}

uint64_t processPushTelemetry(contextId:cutoff:allEvents:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 48) = a3;
  *(double *)(v4 + 40) = a4;
  *(_QWORD *)(v4 + 24) = a1;
  *(_QWORD *)(v4 + 32) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  v5 = type metadata accessor for TaskStatusEvent(0);
  *(_QWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc();
  *(_QWORD *)(v4 + 88) = swift_task_alloc();
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  *(_QWORD *)(v4 + 104) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_240295398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD *@<X8>);
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t result;
  char v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t *v68;
  void *v69;
  uint64_t v70;
  Swift::OpaquePointer v71;
  Swift::String v72;
  void *object;
  Swift::Double pushReceivedLatency;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  LighthouseBackground::PushTelemetry_optional v93;

  v1 = *(_QWORD *)(v0 + 48);
  countAndFlagsBits = MEMORY[0x24BEE4AF8];
  v93.value.contextId._countAndFlagsBits = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v1 + 16);
  v4 = swift_bridgeObjectRetain();
  v86 = v3;
  if (v3)
  {
    v6 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v5 + 72);
    v90 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v8 = v4 + v90;
    do
    {
      v9 = *(_QWORD *)(v0 + 104);
      v10 = *(_QWORD *)(v0 + 56);
      sub_240238BF0(v8, v9, type metadata accessor for TaskStatusEvent);
      sub_2402391FC(v9 + *(int *)(v6 + 32), v10, &qword_256FDE5C8);
      v11 = type metadata accessor for PushMetadata(0);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
      sub_24023D378(v10, &qword_256FDE5C8);
      v12 = *(_QWORD *)(v0 + 104);
      if ((_DWORD)v9 == 1)
      {
        sub_240238C34(v12, type metadata accessor for TaskStatusEvent);
      }
      else
      {
        sub_24023DBCC(v12, *(_QWORD *)(v0 + 96), type metadata accessor for TaskStatusEvent);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24029BE04(0, *(_QWORD *)(countAndFlagsBits + 16) + 1, 1);
          countAndFlagsBits = v93.value.contextId._countAndFlagsBits;
        }
        v14 = *(_QWORD *)(countAndFlagsBits + 16);
        v13 = *(_QWORD *)(countAndFlagsBits + 24);
        if (v14 >= v13 >> 1)
        {
          sub_24029BE04(v13 > 1, v14 + 1, 1);
          countAndFlagsBits = v93.value.contextId._countAndFlagsBits;
        }
        v15 = *(_QWORD *)(v0 + 96);
        *(_QWORD *)(countAndFlagsBits + 16) = v14 + 1;
        sub_24023DBCC(v15, countAndFlagsBits + v90 + v14 * v7, type metadata accessor for TaskStatusEvent);
      }
      v8 += v7;
      --v3;
    }
    while (v3);
    v3 = v86;
  }
  swift_bridgeObjectRelease();
  v16 = sub_240293B48(countAndFlagsBits);
  swift_release();
  v17 = sub_240248D40(v16);
  swift_bridgeObjectRelease();
  v18 = sub_2402493C4(MEMORY[0x24BEE4AF8]);
  if (v3)
  {
    v19 = *(_QWORD *)(v0 + 72);
    v84 = *(_QWORD *)(v0 + 64);
    v80 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v91 = *(_QWORD *)(v0 + 48) + v80;
    v20 = *(_QWORD *)(v19 + 72);
    v88 = v17 + 56;
    swift_bridgeObjectRetain();
    v21 = 0;
    v22 = 0;
    v82 = v20;
    while (1)
    {
      v23 = *(_QWORD *)(v0 + 88);
      sub_240238BF0(v91 + v22 * v20, v23, type metadata accessor for TaskStatusEvent);
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_16;
      v24 = (uint64_t *)(v23 + *(int *)(v84 + 24));
      v26 = *v24;
      v25 = v24[1];
      sub_2402BDE04();
      swift_bridgeObjectRetain();
      sub_2402BD6A8();
      v27 = sub_2402BDE34();
      v28 = -1 << *(_BYTE *)(v17 + 32);
      v29 = v27 & ~v28;
      if (((*(_QWORD *)(v88 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
      {
        v30 = *(_QWORD *)(v17 + 48);
        v31 = (_QWORD *)(v30 + 16 * v29);
        v32 = *v31 == v26 && v31[1] == v25;
        if (v32 || (sub_2402BDD8C() & 1) != 0)
        {
LABEL_24:
          v34 = *(_QWORD *)(v0 + 80);
          v33 = *(_QWORD *)(v0 + 88);
          swift_bridgeObjectRelease();
          sub_240238BF0(v33, v34, type metadata accessor for TaskStatusEvent);
          swift_bridgeObjectRetain();
          sub_24025A2CC((uint64_t)v21);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v93.value.contextId._countAndFlagsBits = v18;
          v37 = sub_240258860(v26, v25);
          v38 = *(_QWORD *)(v18 + 16);
          v39 = (v36 & 1) == 0;
          result = v38 + v39;
          if (__OFADD__(v38, v39))
          {
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          v41 = v36;
          if (*(_QWORD *)(v18 + 24) >= result)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_24025B008();
              v18 = v93.value.contextId._countAndFlagsBits;
            }
          }
          else
          {
            sub_240259748(result, isUniquelyReferenced_nonNull_native);
            v18 = v93.value.contextId._countAndFlagsBits;
            v42 = sub_240258860(v26, v25);
            if ((v41 & 1) != (v43 & 1))
              return sub_2402BDDC8();
            v37 = v42;
          }
          swift_bridgeObjectRelease();
          if ((v41 & 1) == 0)
          {
            *(_QWORD *)(v18 + 8 * (v37 >> 6) + 64) |= 1 << v37;
            v44 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v37);
            *v44 = v26;
            v44[1] = v25;
            *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v37) = MEMORY[0x24BEE4AF8];
            v45 = *(_QWORD *)(v18 + 16);
            v46 = v45 + 1;
            v47 = __OFADD__(v45, 1);
            result = swift_bridgeObjectRetain();
            if (v47)
              goto LABEL_83;
            *(_QWORD *)(v18 + 16) = v46;
          }
          v48 = *(_QWORD *)(v18 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v49 = *(_QWORD *)(v48 + 8 * v37);
          v50 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v48 + 8 * v37) = v49;
          if ((v50 & 1) == 0)
          {
            v49 = sub_2402585C0(0, *(_QWORD *)(v49 + 16) + 1, 1, v49);
            *(_QWORD *)(v48 + 8 * v37) = v49;
          }
          v52 = *(_QWORD *)(v49 + 16);
          v51 = *(_QWORD *)(v49 + 24);
          if (v52 >= v51 >> 1)
          {
            v49 = sub_2402585C0(v51 > 1, v52 + 1, 1, v49);
            *(_QWORD *)(v48 + 8 * v37) = v49;
          }
          v53 = *(_QWORD *)(v0 + 80);
          *(_QWORD *)(v49 + 16) = v52 + 1;
          v20 = v82;
          sub_24023DBCC(v53, v49 + v80 + v52 * v82, type metadata accessor for TaskStatusEvent);
          v21 = sub_2402555EC;
          goto LABEL_15;
        }
        v54 = ~v28;
        while (1)
        {
          v29 = (v29 + 1) & v54;
          if (((*(_QWORD *)(v88 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
            break;
          v55 = (_QWORD *)(v30 + 16 * v29);
          v56 = *v55 == v26 && v55[1] == v25;
          if (v56 || (sub_2402BDD8C() & 1) != 0)
            goto LABEL_24;
        }
      }
      v20 = v82;
LABEL_15:
      swift_bridgeObjectRelease();
      v3 = v86;
LABEL_16:
      ++v22;
      sub_240238C34(*(_QWORD *)(v0 + 88), type metadata accessor for TaskStatusEvent);
      if (v22 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
  }
  v21 = 0;
LABEL_51:
  result = swift_bridgeObjectRelease();
  v57 = 0;
  v58 = v18 + 64;
  v59 = -1;
  v60 = -1 << *(_BYTE *)(v18 + 32);
  if (-v60 < 64)
    v59 = ~(-1 << -(char)v60);
  v61 = v59 & *(_QWORD *)(v18 + 64);
  v62 = (unint64_t)(63 - v60) >> 6;
  v92 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v61)
    {
      v63 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
      v64 = v63 | (v57 << 6);
      goto LABEL_70;
    }
    v65 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    if (v65 >= v62)
      goto LABEL_78;
    v66 = *(_QWORD *)(v58 + 8 * v65);
    ++v57;
    if (!v66)
    {
      v57 = v65 + 1;
      if (v65 + 1 >= v62)
        goto LABEL_78;
      v66 = *(_QWORD *)(v58 + 8 * v57);
      if (!v66)
      {
        v57 = v65 + 2;
        if (v65 + 2 >= v62)
          goto LABEL_78;
        v66 = *(_QWORD *)(v58 + 8 * v57);
        if (!v66)
          break;
      }
    }
LABEL_69:
    v61 = (v66 - 1) & v66;
    v64 = __clz(__rbit64(v66)) + (v57 << 6);
LABEL_70:
    v68 = (uint64_t *)(*(_QWORD *)(v18 + 48) + 16 * v64);
    v70 = *v68;
    v69 = (void *)v68[1];
    v71._rawValue = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_2402BD8C4() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      sub_24025A2CC((uint64_t)v21);
      v78 = 0;
LABEL_79:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v78);
    }
    v72._countAndFlagsBits = v70;
    v72._object = v69;
    processPushEvents(pushTaskEvents:taskName:contextId:cutoff:)(&v93, v71, v72, *(Swift::String *)(v0 + 24), *(Swift::Double *)(v0 + 40));
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    object = v93.value.contextId._object;
    if (v93.value.contextId._object)
    {
      v81 = v93.value.contextId._countAndFlagsBits;
      v83 = v93.value.taskName._countAndFlagsBits;
      v87 = *(_OWORD *)&v93.value.countPushReceived;
      v89 = *(_OWORD *)&v93.value.countPushParameterError;
      pushReceivedLatency = v93.value.pushReceivedLatency;
      v85 = *(_OWORD *)&v93.value.pushErrorLatency;
      v79 = v93.value.taskName._object;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_240258498(0, v92[2] + 1, 1, v92);
        v92 = (_QWORD *)result;
      }
      v76 = v92[2];
      v75 = v92[3];
      if (v76 >= v75 >> 1)
      {
        result = (uint64_t)sub_240258498((_QWORD *)(v75 > 1), v76 + 1, 1, v92);
        v92 = (_QWORD *)result;
      }
      v92[2] = v76 + 1;
      v77 = &v92[11 * v76];
      v77[4] = v81;
      v77[5] = object;
      v77[6] = v83;
      v77[7] = v79;
      *((_OWORD *)v77 + 4) = v89;
      *((_OWORD *)v77 + 5) = v87;
      *((_OWORD *)v77 + 6) = v85;
      *((Swift::Double *)v77 + 14) = pushReceivedLatency;
    }
  }
  v67 = v65 + 3;
  if (v67 >= v62)
  {
LABEL_78:
    swift_release();
    sub_24025A2CC((uint64_t)v21);
    v78 = v92;
    goto LABEL_79;
  }
  v66 = *(_QWORD *)(v58 + 8 * v67);
  if (v66)
  {
    v57 = v67;
    goto LABEL_69;
  }
  while (1)
  {
    v57 = v67 + 1;
    if (__OFADD__(v67, 1))
      break;
    if (v57 >= v62)
      goto LABEL_78;
    v66 = *(_QWORD *)(v58 + 8 * v57);
    ++v67;
    if (v66)
      goto LABEL_69;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t sub_240295BDC(char a1, uint64_t a2)
{
  unint64_t v4;
  _BYTE v6[72];

  if (*(_QWORD *)(a2 + 16))
  {
    sub_2402BDE04();
    sub_24028A2E8((uint64_t)v6, a1);
    v4 = sub_2402BDE34() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

void __swiftcall processPushEvents(pushTaskEvents:taskName:contextId:cutoff:)(LighthouseBackground::PushTelemetry_optional *__return_ptr retstr, Swift::OpaquePointer pushTaskEvents, Swift::String taskName, Swift::String contextId, Swift::Double cutoff)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  Swift::OpaquePointer v25;
  char *v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  unint64_t *v31;
  _BOOL8 v32;
  Swift::Double v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  double v39;
  double v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  void (*v48)(char *, const char *, uint64_t);
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  void (*v53)(char *, uint64_t);
  const char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  Swift::String v62;
  Swift::String v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  void (*v74)(char *, const char *, uint64_t);
  char *v75;
  uint64_t v76;
  double v77;
  double v78;
  void (*v79)(char *, uint64_t);
  const char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  Swift::String v86;
  Swift::String v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  double v102;
  double v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  uint64_t v106;
  double v107;
  double v108;
  uint64_t v109;
  char *v110;
  const char *v111;
  const char *v112;
  Swift::OpaquePointer v113;
  LighthouseBackground::PushTelemetry_optional *v114;
  void *v115;
  void *v116;
  LighthouseBackground::PushTelemetry_optional *v117;
  Swift::OpaquePointer v118;
  int v119;
  uint64_t countAndFlagsBits;
  uint64_t v121;
  LighthouseBackground::PushTelemetry_optional *v122;
  char *rawValue;
  Swift::String v124;
  void *v125;
  void *object;
  Swift::OpaquePointer v127;
  const char *v128;
  char *v129;
  char *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  const char *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  object = contextId._object;
  countAndFlagsBits = contextId._countAndFlagsBits;
  v125 = taskName._object;
  v121 = taskName._countAndFlagsBits;
  v122 = retstr;
  v7 = sub_2402BD48C();
  v143 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v139 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v129 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v130 = (char *)&v118 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v127._rawValue = (char *)&v118 - v14;
  v15 = type metadata accessor for PushMetadata(0);
  v141 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v132 = (uint64_t)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v133 = (uint64_t)&v118 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v134 = (char *)&v118 - v20;
  v146 = type metadata accessor for TaskStatusEvent(0);
  v21 = *(_QWORD *)(v146 - 8);
  MEMORY[0x24BDAC7A8](v146);
  v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for LedgerState();
  v142 = *(_QWORD *)(v145 - 8);
  MEMORY[0x24BDAC7A8](v145);
  v24 = *((_QWORD *)pushTaskEvents._rawValue + 2);
  v25._rawValue = (void *)MEMORY[0x24BEE4AF8];
  v144 = v15;
  v136 = v21;
  v138 = v24;
  rawValue = (char *)pushTaskEvents._rawValue;
  if (v24)
  {
    v147 = MEMORY[0x24BEE4AF8];
    sub_24029BD64(0, v24, 0);
    v26 = (char *)pushTaskEvents._rawValue
        + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v137 = "";
    v135 = "TaskSuccessfullyRegistered";
    v131 = "TaskFailedToRegister";
    v128 = "TaskParametersStored";
    sub_240238BF0((uint64_t)v26, (uint64_t)v23, type metadata accessor for TaskStatusEvent);
    __asm { BR              X9 }
  }
  v27 = taskEventsToStringSequence(taskEvents:)(MEMORY[0x24BEE4AF8]);
  v28 = v27._countAndFlagsBits;
  v29 = v27._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = 0x29525053495428;
  v30._object = (void *)0xE700000000000000;
  v31 = (unint64_t *)getRangeFromRegex(regex:stringRepresentation:)(v30, v27);
  v32 = v31 != 0;
  v33 = -1.0;
  v34 = (uint64_t)v130;
  v124 = v27;
  if (v31)
  {
    v119 = 1;
    v35 = v31[2];
    v36 = v138;
    v118._rawValue = v31;
    if (v35)
    {
      v128 = 0;
      v137 = 0;
      v37 = v21;
      v131 = &rawValue[(*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)];
      v38 = v31 + 5;
      v39 = 0.0;
      v40 = 1.0;
      v41 = v127._rawValue;
      v135 = (const char *)v25._rawValue;
      v140 = v7;
      while (1)
      {
        v42 = *(v38 - 1);
        if (v42 >= v36)
          break;
        v43 = *v38;
        sub_2402391FC((uint64_t)&v131[*(_QWORD *)(v37 + 72) * v42 + *(int *)(v146 + 32)], (uint64_t)v41, &qword_256FDE5C8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v141 + 48))(v41, 1, v144) == 1)
        {
          sub_24023D378((uint64_t)v41, &qword_256FDE5C8);
        }
        else
        {
          sub_24023DBCC((uint64_t)v41, (uint64_t)v134, type metadata accessor for PushMetadata);
          if ((v43 & 0x8000000000000000) != 0)
            goto LABEL_67;
          v25._rawValue = (void *)v135;
          if (v43 >= *((_QWORD *)v135 + 2))
            goto LABEL_68;
          v44 = v143;
          v45 = &v135[(*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)];
          v46 = *(_QWORD *)(v142 + 72);
          v47 = &v45[v46 * v43 + *(int *)(v145 + 20)];
          v48 = *(void (**)(char *, const char *, uint64_t))(v143 + 16);
          v49 = v139;
          v50 = v140;
          v48(v139, v47, v140);
          sub_2402BD408();
          v52 = v51;
          v53 = *(void (**)(char *, uint64_t))(v44 + 8);
          v53(v49, v50);
          if (v52 >= cutoff)
          {
            if (v42 >= *((_QWORD *)v25._rawValue + 2))
              goto LABEL_73;
            v54 = &v45[v46 * v42 + *(int *)(v145 + 20)];
            v55 = v139;
            v56 = v140;
            v48(v139, v54, v140);
            v57 = (uint64_t)v134;
            sub_2402BD420();
            v59 = v58;
            v53(v55, v56);
            sub_240238C34(v57, type metadata accessor for PushMetadata);
            if (__OFADD__(v137, 1))
              goto LABEL_74;
            if (__OFADD__(v128, 1))
              goto LABEL_75;
            ++v128;
            ++v137;
            v39 = v39 + (v59 - v39) / v40;
            v40 = v40 + 1.0;
            v25._rawValue = (void *)v135;
            v37 = v136;
          }
          else
          {
            sub_240238C34((uint64_t)v134, type metadata accessor for PushMetadata);
            v37 = v136;
          }
          v36 = v138;
          v41 = v127._rawValue;
          v7 = v140;
        }
        v38 += 2;
        if (!--v35)
          goto LABEL_21;
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      JUMPOUT(0x240296DC0);
    }
    v37 = v21;
    v128 = 0;
    v137 = 0;
    v39 = 0.0;
    v40 = 1.0;
LABEL_21:
    v61 = getLatencyFromRange(matchIndices:events:)(v118, v25);
    swift_bridgeObjectRelease();
    v60 = v39 + v61;
    v34 = (uint64_t)v130;
    v29 = v124._object;
    v28 = v124._countAndFlagsBits;
    LOBYTE(v32) = v119;
    v21 = v37;
  }
  else
  {
    v128 = 0;
    v137 = 0;
    v39 = 0.0;
    v40 = 1.0;
    v60 = -1.0;
    v36 = v138;
  }
  v62._countAndFlagsBits = 0x2947495428;
  v62._object = (void *)0xE500000000000000;
  v63._countAndFlagsBits = v28;
  v63._object = v29;
  v64 = (unint64_t *)getRangeFromRegex(regex:stringRepresentation:)(v62, v63);
  if (v64)
  {
    v65 = v64[2];
    v127._rawValue = v64;
    if (v65)
    {
      v131 = 0;
      v66 = v21;
      v134 = &rawValue[(*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)];
      v135 = (const char *)v25._rawValue;
      v67 = v64 + 5;
      v140 = v7;
      while (1)
      {
        v68 = *(v67 - 1);
        if (v68 >= v36)
          goto LABEL_65;
        v69 = *v67;
        sub_2402391FC((uint64_t)&v134[*(_QWORD *)(v66 + 72) * v68 + *(int *)(v146 + 32)], v34, &qword_256FDE5C8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v34, 1, v144) == 1)
        {
          sub_24023D378(v34, &qword_256FDE5C8);
        }
        else
        {
          sub_24023DBCC(v34, v133, type metadata accessor for PushMetadata);
          if ((v69 & 0x8000000000000000) != 0)
            goto LABEL_69;
          v25._rawValue = (void *)v135;
          if (v69 >= *((_QWORD *)v135 + 2))
            goto LABEL_70;
          v70 = v143;
          v71 = &v135[(*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)];
          v72 = *(_QWORD *)(v142 + 72);
          v73 = &v71[v72 * v69 + *(int *)(v145 + 20)];
          v74 = *(void (**)(char *, const char *, uint64_t))(v143 + 16);
          v75 = v139;
          v76 = v140;
          v74(v139, v73, v140);
          sub_2402BD408();
          v78 = v77;
          v79 = *(void (**)(char *, uint64_t))(v70 + 8);
          v79(v75, v76);
          if (v78 >= cutoff)
          {
            if (v68 >= *((_QWORD *)v25._rawValue + 2))
              goto LABEL_76;
            v80 = &v71[v72 * v68 + *(int *)(v145 + 20)];
            v81 = v139;
            v82 = v140;
            v74(v139, v80, v140);
            v83 = v133;
            sub_2402BD420();
            v85 = v84;
            v79(v81, v82);
            sub_240238C34(v83, type metadata accessor for PushMetadata);
            if (__OFADD__(v137, 1))
              goto LABEL_77;
            if (__OFADD__(v131, 1))
              goto LABEL_78;
            ++v131;
            ++v137;
            v39 = v39 + (v85 - v39) / v40;
            v40 = v40 + 1.0;
            v25._rawValue = (void *)v135;
            v66 = v136;
          }
          else
          {
            sub_240238C34(v133, type metadata accessor for PushMetadata);
            v66 = v136;
          }
          v36 = v138;
          v34 = (uint64_t)v130;
          v7 = v140;
        }
        v67 += 2;
        if (!--v65)
          goto LABEL_40;
      }
    }
    v66 = v21;
    v131 = 0;
LABEL_40:
    v33 = getLatencyFromRange(matchIndices:events:)(v127, v25);
    swift_bridgeObjectRelease();
    LOBYTE(v32) = 1;
    v29 = v124._object;
    v28 = v124._countAndFlagsBits;
    v21 = v66;
  }
  else
  {
    v131 = 0;
  }
  v86._countAndFlagsBits = 0x295A53495428;
  v86._object = (void *)0xE600000000000000;
  v87._countAndFlagsBits = v28;
  v87._object = v29;
  v88 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v86, v87);
  swift_bridgeObjectRelease();
  v89 = (uint64_t)v129;
  if (v88)
  {
    v90 = *(_QWORD *)(v88 + 16);
    if (v90)
    {
      v91 = v21;
      v92 = (uint64_t)&rawValue[(*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)];
      swift_bridgeObjectRetain();
      v134 = 0;
      v130 = (char *)v88;
      v93 = (unint64_t *)(v88 + 40);
      v133 = v92;
      do
      {
        v94 = *(v93 - 1);
        if (v94 >= v138)
          goto LABEL_66;
        v95 = *v93;
        sub_2402391FC(v92 + *(_QWORD *)(v91 + 72) * v94 + *(int *)(v146 + 32), v89, &qword_256FDE5C8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v89, 1, v144) == 1)
        {
          sub_24023D378(v89, &qword_256FDE5C8);
        }
        else
        {
          sub_24023DBCC(v89, v132, type metadata accessor for PushMetadata);
          if ((v95 & 0x8000000000000000) != 0)
            goto LABEL_71;
          if (v95 >= *((_QWORD *)v25._rawValue + 2))
            goto LABEL_72;
          v96 = v143;
          v97 = (char *)v25._rawValue
              + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
          v98 = *(_QWORD *)(v142 + 72);
          v99 = &v97[v98 * v95 + *(int *)(v145 + 20)];
          v100 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
          v101 = v139;
          v100(v139, v99, v7);
          sub_2402BD408();
          v103 = v102;
          v104 = *(void (**)(char *, uint64_t))(v96 + 8);
          v104(v101, v7);
          if (v103 >= cutoff)
          {
            if (v94 >= *((_QWORD *)v25._rawValue + 2))
              goto LABEL_79;
            v105 = v139;
            v100(v139, &v97[v98 * v94 + *(int *)(v145 + 20)], v7);
            v106 = v132;
            sub_2402BD420();
            v108 = v107;
            v104(v105, v7);
            sub_240238C34(v106, type metadata accessor for PushMetadata);
            if (__OFADD__(v137, 1))
              goto LABEL_80;
            if (__OFADD__(v134, 1))
              goto LABEL_81;
            ++v134;
            ++v137;
            v39 = v39 + (v108 - v39) / v40;
            v40 = v40 + 1.0;
          }
          else
          {
            sub_240238C34(v132, type metadata accessor for PushMetadata);
          }
          v89 = (uint64_t)v129;
          v91 = v136;
          v92 = v133;
        }
        v93 += 2;
        --v90;
      }
      while (v90);
      v113._rawValue = v130;
      swift_bridgeObjectRelease();
      v110 = v137;
      v111 = v128;
      v112 = v131;
      v109 = (uint64_t)v134;
    }
    else
    {
      v109 = 0;
      v110 = v137;
      v111 = v128;
      v113._rawValue = (void *)v88;
      v112 = v131;
    }
    v33 = getLatencyFromRange(matchIndices:events:)(v113, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  swift_bridgeObjectRelease();
  if (v32)
  {
    v109 = 0;
    v110 = v137;
    v111 = v128;
    v112 = v131;
LABEL_62:
    v114 = v122;
    v115 = object;
    v122->value.contextId._countAndFlagsBits = countAndFlagsBits;
    v114->value.contextId._object = v115;
    v116 = v125;
    v114->value.taskName._countAndFlagsBits = v121;
    v114->value.taskName._object = v116;
    v114->value.countPushParameterError = v109;
    v114->value.countPushProcessed = (Swift::Int)v111;
    v114->value.countPushReceived = (Swift::Int)v110;
    v114->value.countPushRegistrationError = (Swift::Int)v112;
    v114->value.pushErrorLatency = v33;
    v114->value.pushFirstRunLatency = v60;
    v114->value.pushReceivedLatency = v39;
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117 = v122;
  v122->value.pushReceivedLatency = 0.0;
  *(_OWORD *)&v117->value.countPushReceived = 0u;
  *(_OWORD *)&v117->value.pushErrorLatency = 0u;
  v117->value.taskName = 0u;
  *(_OWORD *)&v117->value.countPushParameterError = 0u;
  v117->value.contextId = 0u;
}

uint64_t processTaskTelemetry(telemetryConfig:telemetryRange:allEvents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v3 + 88) = a2;
  *(_QWORD *)(v3 + 96) = a3;
  type metadata accessor for TelemetryBucketRange();
  *(_QWORD *)(v3 + 104) = swift_task_alloc();
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(type metadata accessor for DeviceTelemetry(0) - 8);
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  *(_QWORD *)(v3 + 128) = swift_task_alloc();
  v5 = sub_2402BD4E0();
  *(_QWORD *)(v3 + 136) = v5;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  *(_QWORD *)(v3 + 160) = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF18);
  *(_QWORD *)(v3 + 168) = swift_task_alloc();
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  *(_QWORD *)(v3 + 184) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  *(_QWORD *)(v3 + 192) = swift_task_alloc();
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  *(_QWORD *)(v3 + 208) = swift_task_alloc();
  *(_QWORD *)(v3 + 216) = swift_task_alloc();
  *(_QWORD *)(v3 + 224) = swift_task_alloc();
  *(_QWORD *)(v3 + 232) = swift_task_alloc();
  v6 = sub_2402BD48C();
  *(_QWORD *)(v3 + 240) = v6;
  *(_QWORD *)(v3 + 248) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  v7 = swift_task_alloc();
  *(_BYTE *)(v3 + 320) = *(_BYTE *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v3 + 264) = v7;
  *(_QWORD *)(v3 + 272) = v8;
  *(_QWORD *)(v3 + 280) = v9;
  *(_BYTE *)(v3 + 321) = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(v3 + 322) = *(_BYTE *)(a1 + 25);
  return swift_task_switch();
}

uint64_t sub_240296F9C()
{
  uint64_t v0;
  double *v1;
  double v2;
  unint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint8_t *v83;
  double *v85;
  double v86;
  _QWORD *v87;
  uint64_t v88;
  os_log_t log;
  os_log_t loga;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  double v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[3];

  v1 = *(double **)(v0 + 88);
  v2 = *v1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 24) = v3;
  v4 = v1[1];
  if (v4 > v2)
  {
    v5 = 0;
    v94 = *(_QWORD **)(v0 + 248);
    v96 = *(_QWORD *)(v0 + 184);
    v93 = *(_QWORD *)(v0 + 160);
    v88 = *(_QWORD *)(v0 + 112);
    v95 = *(_QWORD *)(v0 + 144);
    while (!__OFADD__(v5, 1))
    {
      if ((sub_2402BD8C4() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v100 = 0.0;
        v102 = 0;
        v104 = 0;
        v108 = 0;
        goto LABEL_32;
      }
      sub_2402BD3FC();
      sub_2402BD42C();
      sub_24029CC1C((unint64_t *)&qword_256FDEF20, MEMORY[0x24BDCE948]);
      if ((sub_2402BD60C() & 1) == 0)
        goto LABEL_36;
      v97 = v5 + 1;
      v98 = v5;
      v11 = *(_QWORD *)(v0 + 264);
      v12 = *(_QWORD *)(v0 + 240);
      v103 = v3;
      v105 = *(_QWORD *)(v0 + 232);
      v13 = *(_QWORD *)(v0 + 224);
      v14 = *(_QWORD *)(v0 + 168);
      v15 = *(_QWORD *)(v0 + 176);
      v16 = v15 + *(int *)(v93 + 48);
      v17 = (void (*)(uint64_t, uint64_t, uint64_t))v94[2];
      v17(v15, *(_QWORD *)(v0 + 256), v12);
      v17(v16, v11, v12);
      v18 = v14 + *(int *)(v93 + 48);
      v17(v14, v15, v12);
      v17(v18, v16, v12);
      v19 = (void (*)(uint64_t, uint64_t, uint64_t))v94[4];
      v19(v13, v14, v12);
      v20 = (void (*)(uint64_t, uint64_t))v94[1];
      v20(v18, v12);
      v21 = v14 + *(int *)(v93 + 48);
      v19(v14, v15, v12);
      v19(v21, v16, v12);
      v19(v13 + *(int *)(v96 + 36), v21, v12);
      v20(v14, v12);
      sub_240238F2C(v13, v105, (uint64_t *)&unk_256FE0BD0);
      if (qword_2543528A0 != -1)
        swift_once();
      v22 = *(_QWORD *)(v0 + 232);
      v24 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 216);
      v25 = __swift_project_value_buffer(*(_QWORD *)(v0 + 136), (uint64_t)qword_2543529A0);
      sub_2402391FC(v22, v23, (uint64_t *)&unk_256FE0BD0);
      sub_2402391FC(v22, v24, (uint64_t *)&unk_256FE0BD0);
      v106 = v25;
      v26 = sub_2402BD4C8();
      v27 = sub_2402BD954();
      v99 = v20;
      if (os_log_type_enabled(v26, v27))
      {
        v28 = *(_QWORD *)(v0 + 216);
        log = *(os_log_t *)(v0 + 208);
        v29 = swift_slowAlloc();
        v91 = swift_slowAlloc();
        v110[0] = v91;
        *(_DWORD *)v29 = 136315394;
        sub_24029CC1C(&qword_256FE09A0, MEMORY[0x24BDCE988]);
        v30 = sub_2402BDD68();
        *(_QWORD *)(v0 + 64) = sub_24023D440(v30, v31, v110);
        sub_2402BD9FC();
        swift_bridgeObjectRelease();
        sub_24023D378(v28, (uint64_t *)&unk_256FE0BD0);
        *(_WORD *)(v29 + 12) = 2080;
        v32 = sub_2402BDD68();
        *(_QWORD *)(v0 + 72) = sub_24023D440(v32, v33, v110);
        sub_2402BD9FC();
        swift_bridgeObjectRelease();
        sub_24023D378((uint64_t)log, (uint64_t *)&unk_256FE0BD0);
        _os_log_impl(&dword_24022D000, v26, v27, "Processing task telemetry for bucket from %s to %s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242682188](v91, -1, -1);
        MEMORY[0x242682188](v29, -1, -1);
      }
      else
      {
        v34 = *(_QWORD *)(v0 + 208);
        sub_24023D378(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_256FE0BD0);
        sub_24023D378(v34, (uint64_t *)&unk_256FE0BD0);
      }

      v35 = *(_QWORD *)(v0 + 272);
      v36 = *(_QWORD *)(v0 + 280);
      v37 = *(_BYTE *)(v0 + 320);
      v38 = *(_QWORD *)(v0 + 232);
      v39 = *(_QWORD *)(v0 + 152);
      v40 = *(_QWORD *)(v0 + 136);
      v41 = *(_QWORD *)(v0 + 96);
      v42 = swift_task_alloc();
      *(_QWORD *)(v42 + 16) = v38;
      swift_bridgeObjectRetain();
      v43 = sub_240256968((uint64_t (*)(char *))sub_24029CC00, v42, v41);
      swift_task_dealloc();
      LOBYTE(v110[0]) = v37;
      v44 = processEvents(bucketEvents:bucketRange:contextId:bucketInterval:)(v43, v38, v35, v36, (unsigned __int8 *)v110);
      v46 = v45;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v39, v106, v40);
      swift_bridgeObjectRetain_n();
      v47 = sub_2402BD4C8();
      v48 = sub_2402BD960();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = swift_slowAlloc();
        v50 = swift_slowAlloc();
        v109 = v50;
        *(_DWORD *)v49 = 134218242;
        *(_QWORD *)(v0 + 48) = *(_QWORD *)(v46 + 16);
        sub_2402BD9FC();
        *(_WORD *)(v49 + 12) = 2080;
        swift_bridgeObjectRetain_n();
        v51 = sub_24027118C(v46);
        swift_bridgeObjectRelease();
        v110[0] = (uint64_t)v51;
        sub_2402713A0(v110);
        v101 = *(_QWORD *)(v0 + 152);
        v92 = *(_QWORD *)(v0 + 136);
        swift_bridgeObjectRelease();
        v52 = MEMORY[0x242681588](v110[0], MEMORY[0x24BEE0D00]);
        v54 = v53;
        swift_release();
        *(_QWORD *)(v0 + 56) = sub_24023D440(v52, v54, &v109);
        sub_2402BD9FC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24022D000, v47, v48, "Processed %ld tasks in bucket. Task names: %s", (uint8_t *)v49, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242682188](v50, -1, -1);
        MEMORY[0x242682188](v49, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v101, v92);
      }
      else
      {
        v55 = *(_QWORD *)(v0 + 152);
        v56 = *(_QWORD *)(v0 + 136);
        swift_bridgeObjectRelease_n();

        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v55, v56);
      }
      v57 = *(unsigned __int8 *)(v0 + 321);
      sub_240299628(v44);
      sub_2402BD408();
      v59 = v58;
      if (v57 == 1)
      {
        v60 = *(_QWORD *)(v0 + 232);
        v61 = *(_QWORD *)(v0 + 192);
        sub_2402391FC(v60, *(_QWORD *)(v0 + 200), (uint64_t *)&unk_256FE0BD0);
        sub_2402391FC(v60, v61, (uint64_t *)&unk_256FE0BD0);
        v62 = sub_2402BD4C8();
        v63 = sub_2402BD954();
        if (os_log_type_enabled(v62, v63))
        {
          v64 = *(_QWORD *)(v0 + 200);
          loga = *(os_log_t *)(v0 + 192);
          v65 = swift_slowAlloc();
          v107 = swift_slowAlloc();
          v110[0] = v107;
          *(_DWORD *)v65 = 136315394;
          sub_24029CC1C(&qword_256FE09A0, MEMORY[0x24BDCE988]);
          v66 = sub_2402BDD68();
          *(_QWORD *)(v0 + 32) = sub_24023D440(v66, v67, v110);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          sub_24023D378(v64, (uint64_t *)&unk_256FE0BD0);
          *(_WORD *)(v65 + 12) = 2080;
          v68 = sub_2402BDD68();
          *(_QWORD *)(v0 + 40) = sub_24023D440(v68, v69, v110);
          sub_2402BD9FC();
          swift_bridgeObjectRelease();
          sub_24023D378((uint64_t)loga, (uint64_t *)&unk_256FE0BD0);
          _os_log_impl(&dword_24022D000, v62, v63, "Processing device telemetry for bucket from %s to %s", (uint8_t *)v65, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x242682188](v107, -1, -1);
          MEMORY[0x242682188](v65, -1, -1);
        }
        else
        {
          v70 = *(_QWORD *)(v0 + 192);
          sub_24023D378(*(_QWORD *)(v0 + 200), (uint64_t *)&unk_256FE0BD0);
          sub_24023D378(v70, (uint64_t *)&unk_256FE0BD0);
        }

        v72 = *(_QWORD *)(v0 + 120);
        v71 = *(_QWORD **)(v0 + 128);
        processAnalytics(taskAnalyticsMap:bucketRange:contextId:)(v46, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), v71);
        swift_bridgeObjectRelease();
        sub_240238BF0((uint64_t)v71, v72, type metadata accessor for DeviceTelemetry);
        v3 = v103;
        v7 = v97;
        v6 = v98;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_2402585E8(0, *(_QWORD *)(v103 + 16) + 1, 1, v103);
        v74 = *(_QWORD *)(v3 + 16);
        v73 = *(_QWORD *)(v3 + 24);
        if (v74 >= v73 >> 1)
          v3 = sub_2402585E8(v73 > 1, v74 + 1, 1, v3);
        v75 = *(_QWORD *)(v0 + 120);
        v76 = *(_QWORD *)(v0 + 128);
        *(_QWORD *)(v3 + 16) = v74 + 1;
        sub_24023DBCC(v75, v3+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v74, type metadata accessor for DeviceTelemetry);
        sub_240238C34(v76, type metadata accessor for DeviceTelemetry);
      }
      else
      {
        swift_bridgeObjectRelease();
        v3 = v103;
        v7 = v97;
        v6 = v98;
      }
      v8 = *(_QWORD *)(v0 + 264);
      v10 = *(_QWORD *)(v0 + 232);
      v9 = *(_QWORD *)(v0 + 240);
      v99(*(_QWORD *)(v0 + 256), v9);
      v99(v8, v9);
      sub_24023D378(v10, (uint64_t *)&unk_256FE0BD0);
      v5 = v6 + 1;
      if (v4 <= v2 + (double)v7 * 86400.0)
      {
        v2 = v59;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
LABEL_27:
  *(_QWORD *)(v0 + 296) = v3;
  *(double *)(v0 + 288) = v2;
  if (*(_BYTE *)(v0 + 322) == 1)
  {
    if (qword_2543528A0 == -1)
    {
LABEL_29:
      v77 = *(_QWORD *)(v0 + 104);
      v78 = *(_QWORD *)(v0 + 88);
      __swift_project_value_buffer(*(_QWORD *)(v0 + 136), (uint64_t)qword_2543529A0);
      sub_240238BF0(v78, v77, (uint64_t (*)(_QWORD))type metadata accessor for TelemetryBucketRange);
      v79 = sub_2402BD4C8();
      v80 = sub_2402BD954();
      v81 = os_log_type_enabled(v79, v80);
      v82 = *(_QWORD *)(v0 + 104);
      if (v81)
      {
        v83 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v83 = 134217984;
        *(_QWORD *)(v0 + 80) = *(_QWORD *)(v82 + 8);
        sub_2402BD9FC();
        sub_240238C34(v82, (uint64_t (*)(_QWORD))type metadata accessor for TelemetryBucketRange);
        _os_log_impl(&dword_24022D000, v79, v80, "Processing push telemetry with cutoff: %f", v83, 0xCu);
        MEMORY[0x242682188](v83, -1, -1);
      }
      else
      {
        sub_240238C34(*(_QWORD *)(v0 + 104), (uint64_t (*)(_QWORD))type metadata accessor for TelemetryBucketRange);
      }
      v85 = *(double **)(v0 + 88);

      v86 = *v85;
      v87 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 304) = v87;
      *v87 = v0;
      v87[1] = sub_240297CE0;
      return processPushTelemetry(contextId:cutoff:allEvents:)(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 96), v86);
    }
LABEL_37:
    swift_once();
    goto LABEL_29;
  }
  v108 = *(_QWORD *)(v0 + 16);
  v102 = *(_QWORD *)(v0 + 24);
  v104 = v3;
  v100 = v2;
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(double, uint64_t, unint64_t, uint64_t))(v0 + 8))(COERCE_DOUBLE(*(_QWORD *)&v100), v108, v104, v102);
}

uint64_t sub_240297CE0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_240297D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 312);
  if (v1)
  {
    sub_240299790(v1);
    v5 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v3 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v5, v4, v6, v3);
}

uint64_t sub_240297E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;
  uint64_t v17;

  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  MEMORY[0x24BDAC7A8](v17);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskStatusEvent(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v16 - v10;
  sub_2402BD48C();
  sub_24029CC1C((unint64_t *)&qword_256FDEF20, MEMORY[0x24BDCE948]);
  v12 = sub_2402BD600();
  sub_240238BF0(a1, (uint64_t)v11, type metadata accessor for TaskStatusEvent);
  sub_2402391FC(a2, (uint64_t)v5, (uint64_t *)&unk_256FE0BD0);
  if ((v12 & 1) != 0)
  {
    sub_24023D378((uint64_t)v5, (uint64_t *)&unk_256FE0BD0);
    sub_240238C34((uint64_t)v11, type metadata accessor for TaskStatusEvent);
    sub_240238BF0(a1, (uint64_t)v9, type metadata accessor for TaskStatusEvent);
LABEL_4:
    v14 = 0;
    goto LABEL_8;
  }
  v13 = sub_2402BD600();
  sub_24023D378((uint64_t)v5, (uint64_t *)&unk_256FE0BD0);
  sub_240238C34((uint64_t)v11, type metadata accessor for TaskStatusEvent);
  sub_240238BF0(a1, (uint64_t)v9, type metadata accessor for TaskStatusEvent);
  if ((v13 & 1) != 0)
    goto LABEL_4;
  if (qword_256FDE080 != -1)
    swift_once();
  v14 = sub_240295BDC(v9[*(int *)(v6 + 28)], qword_256FE0988);
LABEL_8:
  sub_240238C34((uint64_t)v9, type metadata accessor for TaskStatusEvent);
  return v14 & 1;
}

unint64_t processEvents(bucketEvents:bucketRange:contextId:bucketInterval:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *MLHostTask;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  Swift::OpaquePointer v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  Swift::String v92;
  Swift::String v93;
  unint64_t v94;
  Swift::Double v95;
  Swift::Double v96;
  Swift::String v97;
  unint64_t v98;
  Swift::String v99;
  unint64_t v100;
  Swift::Double v101;
  Swift::Double v102;
  Swift::String v103;
  unint64_t v104;
  Swift::String v105;
  unint64_t v106;
  Swift::Double v107;
  uint64_t *v108;
  Swift::String v109;
  unint64_t v110;
  Swift::Double v111;
  unsigned int (*v112)(uint64_t *, uint64_t, uint64_t);
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  int *v140;
  char *v141;
  uint64_t *v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD v147[3];
  const char *v148;
  uint64_t v149;
  const char *v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  unint64_t v191;

  v162 = a4;
  v161 = a3;
  v182 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  MEMORY[0x24BDAC7A8](v7);
  v160 = (char *)v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v9 = MEMORY[0x24BDAC7A8](v149);
  v159 = (char *)v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v181 = (uint64_t)v147 - v11;
  v158 = type metadata accessor for TaskTelemetry(0);
  v157 = *(_QWORD *)(v158 - 8);
  v12 = MEMORY[0x24BDAC7A8](v158);
  v180 = (uint64_t)v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v179 = (char *)v147 - v14;
  v167 = type metadata accessor for MLHostAnalytics();
  v15 = MEMORY[0x24BDAC7A8](v167);
  v166 = (uint64_t)v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v190 = (_QWORD *)((char *)v147 - v17);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE09A8);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v165 = (uint64_t)v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v169 = (char *)v147 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v171 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v156 = (uint64_t)v147 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v168 = (_QWORD *)((char *)v147 - v26);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v164 = (uint64_t)v147 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v163 = (uint64_t)v147 - v29;
  v30 = sub_2402BD48C();
  v31 = *(_QWORD *)(v30 - 8);
  v184 = v30;
  v185 = v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v178 = (char *)v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v174 = (uint64_t)v147 - v34;
  v35 = type metadata accessor for LedgerState();
  v189 = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v147 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v36);
  v187 = (uint64_t)v147 - v39;
  v40 = (int *)type metadata accessor for TaskStatusEvent(0);
  v41 = *((_QWORD *)v40 - 1);
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)v147 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = *a5;
  MLHostTask = getMLHostTaskGraph()();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEFE0);
  swift_allocObject();
  v45 = sub_24024D730((uint64_t)MLHostTask);
  swift_release();
  v46 = MEMORY[0x24BEE4AF8];
  v188 = sub_2402494E4(MEMORY[0x24BEE4AF8]);
  v172 = sub_240249284(v46);
  v183 = sub_240249698(v46);
  v47 = *(_QWORD *)(a1 + 16);
  v170 = v22;
  v186 = v35;
  if (v47)
  {
    v176 = v47;
    v48 = v40[5];
    v173 = &v43[v40[6]];
    v154 = v40[7];
    v177 = v43;
    v153 = &v43[v48];
    v49 = a1 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
    v152 = *(_QWORD **)(v41 + 72);
    v147[1] = a1;
    swift_bridgeObjectRetain();
    v151 = "";
    v150 = "TaskSuccessfullyRegistered";
    v148 = "TaskFailedToRegister";
    v147[2] = "TaskParametersStored";
    v50 = (uint64_t)v177;
    sub_240238BF0(v49, (uint64_t)v177, type metadata accessor for TaskStatusEvent);
    v175 = *(_QWORD *)v173;
    __asm { BR              X9 }
  }
  v51 = v22;
  v148 = 0;
  v52 = *(_QWORD *)(v172 + 64);
  v150 = (const char *)(v172 + 64);
  v53 = 1 << *(_BYTE *)(v172 + 32);
  v54 = -1;
  if (v53 < 64)
    v54 = ~(-1 << v53);
  v55 = v54 & v52;
  v56 = (uint64_t)v45 + qword_256FE1408;
  v154 = (uint64_t)v45 + *(_QWORD *)(*v45 + 112);
  swift_beginAccess();
  v153 = (char *)v56;
  swift_beginAccess();
  v57 = 0;
  v151 = (char *)((unint64_t)(v53 + 63) >> 6);
  v58 = MEMORY[0x24BEE4AF8];
  v59 = (uint64_t)v169;
  v60 = v171;
  v152 = v45;
  while (1)
  {
    v61 = v188;
    v177 = (char *)v58;
    if (v55)
    {
      v62 = v51;
      v176 = (v55 - 1) & v55;
      v63 = __clz(__rbit64(v55)) | (v57 << 6);
      goto LABEL_22;
    }
    v64 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      JUMPOUT(0x2402995E4);
    }
    if (v64 >= (uint64_t)v151)
      goto LABEL_82;
    v65 = *(_QWORD *)&v150[8 * v64];
    ++v57;
    if (!v65)
    {
      v57 = v64 + 1;
      if (v64 + 1 >= (uint64_t)v151)
        goto LABEL_82;
      v65 = *(_QWORD *)&v150[8 * v57];
      if (!v65)
      {
        v57 = v64 + 2;
        if (v64 + 2 >= (uint64_t)v151)
          goto LABEL_82;
        v65 = *(_QWORD *)&v150[8 * v57];
        if (!v65)
          break;
      }
    }
LABEL_21:
    v62 = v51;
    v176 = (v65 - 1) & v65;
    v63 = __clz(__rbit64(v65)) + (v57 << 6);
LABEL_22:
    v67 = (uint64_t *)(*(_QWORD *)(v172 + 48) + 16 * v63);
    v69 = *v67;
    v68 = v67[1];
    v70._rawValue = *(void **)(*(_QWORD *)(v172 + 56) + 8 * v63);
    v71 = *(_QWORD *)(v188 + 16);
    v187 = *v67;
    if (v71)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v72 = sub_240258860(v69, v68);
      v60 = v171;
      if ((v73 & 1) != 0)
      {
        sub_2402391FC(*(_QWORD *)(v61 + 56) + *(_QWORD *)(v171 + 72) * v72, v59, &qword_256FDEAE0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v62);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v171 + 56))(v59, 1, 1, v62);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v59, 1, 1, v62);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
    }
    v74 = v165;
    sub_240238F2C(v59, v165, &qword_256FE09A8);
    v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v74, 1, v62);
    v173 = (char *)v57;
    v76 = v163;
    if (v75 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v163, 1, 1, v186);
      sub_24023D378(v74, &qword_256FE09A8);
    }
    else
    {
      sub_240238F2C(v74, v163, &qword_256FDEAE0);
    }
    swift_bridgeObjectRelease();
    sub_240256B9C(v76);
    sub_24023D378(v76, &qword_256FDEAE0);
    v77 = *((_QWORD *)v70._rawValue + 2);
    if (v77)
    {
      v78 = v189;
      v79 = (uint64_t)v70._rawValue
          + ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
      swift_bridgeObjectRetain();
      v80 = *(_QWORD *)(v78 + 72);
      v81 = v77;
      do
      {
        sub_240238BF0(v79, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        sub_240257284((uint64_t)v38);
        sub_240238C34((uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        v79 += v80;
        --v81;
      }
      while (v81);
      swift_bridgeObjectRelease();
    }
    v82 = (uint64_t)v190;
    sub_240238BF0(v154, (uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    v83 = v164;
    sub_2402391FC((uint64_t)v153, v164, &qword_256FDEAE0);
    swift_bridgeObjectRetain();
    v84 = v188;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v191 = v84;
    v86 = v83;
    v87 = v187;
    sub_24025A5B4(v86, v187, v68, isUniquelyReferenced_nonNull_native);
    v188 = v191;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v88 = v82;
    v89 = v166;
    sub_240238BF0(v88, v166, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    swift_bridgeObjectRetain();
    v90 = v183;
    v91 = swift_isUniquelyReferenced_nonNull_native();
    v191 = v90;
    sub_24025A474(v89, v87, v68, v91);
    v183 = v191;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = taskEventsToStringSequence(taskEvents:)(v70);
    v93._countAndFlagsBits = 692277800;
    v93._object = (void *)0xE400000000000000;
    v94 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v93, v92);
    v95 = -1.0;
    v96 = -1.0;
    if (v94)
    {
      v96 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v94, v70);
      swift_bridgeObjectRelease();
    }
    v97._countAndFlagsBits = 0x4E5E5B4E283D3F28;
    v97._object = (void *)0xED000029294E2A5DLL;
    v98 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v97, v92);
    if (v98)
    {
      v95 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v98, v70);
      swift_bridgeObjectRelease();
    }
    v99._countAndFlagsBits = 692277800;
    v99._object = (void *)0xE400000000000000;
    v100 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v99, v92);
    v101 = -1.0;
    v102 = -1.0;
    if (v100)
    {
      v102 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v100, v70);
      swift_bridgeObjectRelease();
    }
    v103._countAndFlagsBits = 692474408;
    v103._object = (void *)0xE400000000000000;
    v104 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v103, v92);
    if (v104)
    {
      v101 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v104, v70);
      swift_bridgeObjectRelease();
    }
    v105._countAndFlagsBits = 692343336;
    v105._object = (void *)0xE400000000000000;
    v106 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v105, v92);
    if (v106)
    {
      v107 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v106, v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      v107 = -1.0;
    }
    v108 = v168;
    v109._object = (void *)0xE900000000000029;
    v109._countAndFlagsBits = 0x432A5D435E5B4428;
    v110 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v109, v92);
    if (v110)
    {
      v111 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v110, v70);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v111 = -1.0;
    }
    sub_2402391FC(v182, v181, (uint64_t *)&unk_256FE0BD0);
    sub_2402391FC((uint64_t)v190 + *(int *)(v167 + 28), (uint64_t)v108, &qword_256FDEAE0);
    v112 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v189 + 48);
    if (v112(v108, 1, v186) == 1)
    {
      sub_24023D378((uint64_t)v108, &qword_256FDEAE0);
      v113 = 0xE300000000000000;
      v174 = 4271950;
    }
    else
    {
      v113 = v108[1];
      v174 = *v108;
      swift_bridgeObjectRetain();
      sub_240238C34((uint64_t)v108, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
    }
    v114 = v185;
    v175 = v113;
    if (v77)
    {
      if (v77 > *((_QWORD *)v70._rawValue + 2))
      {
        __break(1u);
        JUMPOUT(0x2402995DCLL);
      }
      v115 = v77 - 1;
      v116 = v189;
      v117 = v156;
      sub_240238BF0((uint64_t)v70._rawValue+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(_QWORD *)(v189 + 72) * v115, v156, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v119 = v117;
      v120 = 0;
    }
    else
    {
      v118 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56);
      v117 = v156;
      v119 = v156;
      v120 = 1;
    }
    v121 = v186;
    v118(v119, v120, 1, v186);
    swift_bridgeObjectRelease();
    v122 = v112((uint64_t *)v117, 1, v121);
    v123 = (uint64_t)v160;
    v124 = (uint64_t)v159;
    v125 = v121;
    v126 = v184;
    if (v122 == 1)
    {
      sub_24023D378(v117, &qword_256FDEAE0);
      v127 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v160, v117 + *(int *)(v125 + 20), v184);
      sub_240238C34(v117, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
      v127 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v123, v127, 1, v126);
    sub_2402391FC(v182, v124, (uint64_t *)&unk_256FE0BD0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v123, 1, v126) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v178, v124 + *(int *)(v149 + 36), v126);
      sub_24023D378(v124, (uint64_t *)&unk_256FE0BD0);
      sub_24023D378(v123, &qword_2543521F0);
    }
    else
    {
      sub_24023D378(v124, (uint64_t *)&unk_256FE0BD0);
      (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v178, v123, v126);
    }
    v128 = *v190;
    if (*(_QWORD *)(*v190 + 16))
    {
      swift_bridgeObjectRetain();
      v129 = sub_240258860(0x6574656C706D6F43, 0xE900000000000064);
      if ((v130 & 1) != 0)
        v131 = *(_QWORD *)(*(_QWORD *)(v128 + 56) + 8 * v129);
      else
        v131 = 0;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v128 + 16))
      {
        swift_bridgeObjectRetain();
        v134 = sub_240258860(0x64656C696146, 0xE600000000000000);
        if ((v135 & 1) != 0)
          v132 = *(_QWORD *)(*(_QWORD *)(v128 + 56) + 8 * v134);
        else
          v132 = 0;
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v128 + 16))
        {
          swift_bridgeObjectRetain();
          v136 = sub_240258860(0x6465727265666544, 0xE800000000000000);
          if ((v137 & 1) != 0)
            v133 = *(_QWORD *)(*(_QWORD *)(v128 + 56) + 8 * v136);
          else
            v133 = 0;
          swift_bridgeObjectRelease();
        }
        else
        {
          v133 = 0;
        }
      }
      else
      {
        v132 = 0;
        v133 = 0;
      }
    }
    else
    {
      v132 = 0;
      v131 = 0;
      v133 = 0;
    }
    v138 = v179;
    v139 = v162;
    *(_QWORD *)v179 = v161;
    *((_QWORD *)v138 + 1) = v139;
    v140 = (int *)v158;
    sub_240238F2C(v181, (uint64_t)&v138[*(int *)(v158 + 20)], (uint64_t *)&unk_256FE0BD0);
    v141 = &v138[v140[7]];
    *(_QWORD *)v141 = v187;
    *((_QWORD *)v141 + 1) = v68;
    v142 = (uint64_t *)&v138[v140[8]];
    v143 = v175;
    *v142 = v174;
    v142[1] = v143;
    (*(void (**)(char *, char *, uint64_t))(v185 + 32))(&v138[v140[9]], v178, v184);
    *(_QWORD *)&v138[v140[10]] = v131;
    *(_QWORD *)&v138[v140[11]] = v132;
    *(_QWORD *)&v138[v140[12]] = v133;
    *(Swift::Double *)&v138[v140[13]] = v96;
    *(Swift::Double *)&v138[v140[14]] = v95;
    *(Swift::Double *)&v138[v140[15]] = v102;
    *(Swift::Double *)&v138[v140[16]] = v101;
    *(Swift::Double *)&v138[v140[17]] = v107;
    v138[v140[6]] = v155;
    *(Swift::Double *)&v138[v140[18]] = v111;
    sub_240238BF0((uint64_t)v138, v180, type metadata accessor for TaskTelemetry);
    swift_bridgeObjectRetain();
    v58 = (unint64_t)v177;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v58 = sub_2402585D4(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
    v51 = v170;
    v57 = (uint64_t)v173;
    v145 = *(_QWORD *)(v58 + 16);
    v144 = *(_QWORD *)(v58 + 24);
    if (v145 >= v144 >> 1)
      v58 = sub_2402585D4(v144 > 1, v145 + 1, 1, v58);
    *(_QWORD *)(v58 + 16) = v145 + 1;
    sub_24023DBCC(v180, v58+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(_QWORD *)(v157 + 72) * v145, type metadata accessor for TaskTelemetry);
    sub_240238C34((uint64_t)v179, type metadata accessor for TaskTelemetry);
    sub_240238C34((uint64_t)v190, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    v59 = (uint64_t)v169;
    v60 = v171;
    v55 = v176;
  }
  v66 = v64 + 3;
  if (v66 >= (uint64_t)v151)
    goto LABEL_82;
  v65 = *(_QWORD *)&v150[8 * v66];
  if (v65)
  {
    v57 = v66;
    goto LABEL_21;
  }
  while (1)
  {
    v57 = v66 + 1;
    if (__OFADD__(v66, 1))
    {
      __break(1u);
      JUMPOUT(0x2402995ECLL);
    }
    if (v57 >= (uint64_t)v151)
      break;
    v65 = *(_QWORD *)&v150[8 * v57];
    ++v66;
    if (v65)
      goto LABEL_21;
  }
LABEL_82:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_24025A2CC((uint64_t)v148);
  return v58;
}

uint64_t sub_240299628(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_2402585D4(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for TaskTelemetry(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_240299790(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_240258498(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[11 * v8 + 4];
  if (a1 + 32 < v9 + 88 * v2 && v9 < a1 + 32 + 88 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t processAnalytics(taskAnalyticsMap:bucketRange:contextId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t i;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t j;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t k;
  int64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t m;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;

  v96 = a5;
  v97 = a4;
  v94 = a2;
  v95 = a3;
  v6 = type metadata accessor for MLHostAnalytics();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v102 = (uint64_t *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v8);
  v100 = (uint64_t)&v93 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v103 = (uint64_t *)((char *)&v93 - v13);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v101 = (uint64_t)&v93 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v93 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v98 = (char *)&v93 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v93 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v93 - v24;
  v93 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 64);
  v104 = a1 + 64;
  v27 = 1 << *(_BYTE *)(a1 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v99 = (unint64_t)(v27 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v31 = 0;
  v32 = 0;
  if (!v29)
    goto LABEL_5;
LABEL_4:
  v33 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  for (i = v33 | (v31 << 6); ; i = __clz(__rbit64(v37)) + (v31 << 6))
  {
    sub_240238BF0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v7 + 72) * i, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    result = sub_24023DBCC((uint64_t)v25, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    v39 = *(_QWORD *)v23;
    v40 = *(_QWORD *)(*(_QWORD *)v23 + 16);
    if (v40)
    {
      result = sub_240258860(0x676E696E6E7552, 0xE700000000000000);
      v40 = (v41 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v39 + 56) + 8 * result) > 0;
    }
    v42 = __OFADD__(v32, v40);
    v32 += v40;
    if (v42)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    result = sub_240238C34((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
    if (v29)
      goto LABEL_4;
LABEL_5:
    v35 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_122;
    v36 = v7;
    if (v35 >= v99)
      goto LABEL_30;
    v37 = *(_QWORD *)(v104 + 8 * v35);
    ++v31;
    if (!v37)
    {
      v31 = v35 + 1;
      if (v35 + 1 >= v99)
        goto LABEL_30;
      v37 = *(_QWORD *)(v104 + 8 * v31);
      if (!v37)
      {
        v31 = v35 + 2;
        if (v35 + 2 >= v99)
          goto LABEL_30;
        v37 = *(_QWORD *)(v104 + 8 * v31);
        if (!v37)
        {
          v31 = v35 + 3;
          if (v35 + 3 >= v99)
            goto LABEL_30;
          v37 = *(_QWORD *)(v104 + 8 * v31);
          if (!v37)
          {
            v31 = v35 + 4;
            if (v35 + 4 >= v99)
              goto LABEL_30;
            v37 = *(_QWORD *)(v104 + 8 * v31);
            if (!v37)
              break;
          }
        }
      }
    }
LABEL_22:
    v29 = (v37 - 1) & v37;
  }
  v38 = v35 + 5;
  if (v38 >= v99)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    v43 = 1 << *(_BYTE *)(a1 + 32);
    v44 = -1;
    if (v43 < 64)
      v44 = ~(-1 << v43);
    v45 = v44 & *(_QWORD *)(a1 + 64);
    v99 = (unint64_t)(v43 + 63) >> 6;
    result = swift_bridgeObjectRetain_n();
    v46 = 0;
    v47 = 0;
    v48 = (uint64_t)v98;
    if (!v45)
      goto LABEL_34;
LABEL_33:
    v49 = __clz(__rbit64(v45));
    v45 &= v45 - 1;
    for (j = v49 | (v46 << 6); ; j = __clz(__rbit64(v52)) + (v46 << 6))
    {
      sub_240238BF0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v36 + 72) * j, v48, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
      result = sub_24023DBCC(v48, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
      v54 = *(_QWORD *)v18;
      v55 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      if (v55)
      {
        result = sub_240258860(0x6465727265666544, 0xE800000000000000);
        v55 = (v56 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * result) > 0;
      }
      v42 = __OFADD__(v47, v55);
      v47 += v55;
      if (v42)
        break;
      result = sub_240238C34((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
      if (v45)
        goto LABEL_33;
LABEL_34:
      v51 = v46 + 1;
      if (__OFADD__(v46, 1))
        goto LABEL_123;
      if (v51 >= v99)
      {
LABEL_59:
        swift_release();
        swift_bridgeObjectRelease();
        v57 = 1 << *(_BYTE *)(a1 + 32);
        v58 = -1;
        if (v57 < 64)
          v58 = ~(-1 << v57);
        v59 = v58 & *(_QWORD *)(a1 + 64);
        v60 = (unint64_t)(v57 + 63) >> 6;
        result = swift_bridgeObjectRetain_n();
        v61 = 0;
        v62 = 0;
        if (!v59)
          goto LABEL_63;
LABEL_62:
        v63 = __clz(__rbit64(v59));
        v59 &= v59 - 1;
        for (k = v63 | (v61 << 6); ; k = __clz(__rbit64(v66)) + (v61 << 6))
        {
          v68 = v101;
          sub_240238BF0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v36 + 72) * k, v101, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
          v69 = v68;
          v70 = v103;
          result = sub_24023DBCC(v69, (uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
          v71 = *v70;
          v72 = *(_QWORD *)(v71 + 16);
          if (v72)
          {
            result = sub_240258860(0x64656C696146, 0xE600000000000000);
            v72 = (v73 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * result) > 0;
          }
          v42 = __OFADD__(v62, v72);
          v62 += v72;
          if (v42)
            break;
          result = sub_240238C34((uint64_t)v103, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
          if (v59)
            goto LABEL_62;
LABEL_63:
          v65 = v61 + 1;
          if (__OFADD__(v61, 1))
            goto LABEL_124;
          if (v65 >= v60)
          {
LABEL_88:
            swift_release();
            swift_bridgeObjectRelease();
            v74 = 1 << *(_BYTE *)(a1 + 32);
            v75 = -1;
            if (v74 < 64)
              v75 = ~(-1 << v74);
            v76 = v75 & *(_QWORD *)(a1 + 64);
            v103 = (uint64_t *)((unint64_t)(v74 + 63) >> 6);
            result = swift_bridgeObjectRetain_n();
            v77 = 0;
            v78 = 0;
            if (!v76)
              goto LABEL_92;
LABEL_91:
            v79 = __clz(__rbit64(v76));
            v76 &= v76 - 1;
            for (m = v79 | (v77 << 6); ; m = __clz(__rbit64(v82)) + (v77 << 6))
            {
              v84 = v100;
              sub_240238BF0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v36 + 72) * m, v100, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
              v85 = v84;
              v86 = v102;
              result = sub_24023DBCC(v85, (uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
              v87 = *v86;
              v88 = *(_QWORD *)(v87 + 16);
              if (v88)
              {
                result = sub_240258860(0x6574656C706D6F43, 0xE900000000000064);
                v88 = (v89 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(v87 + 56) + 8 * result) > 0;
              }
              v42 = __OFADD__(v78, v88);
              v78 += v88;
              if (v42)
                break;
              result = sub_240238C34((uint64_t)v102, (uint64_t (*)(_QWORD))type metadata accessor for MLHostAnalytics);
              if (v76)
                goto LABEL_91;
LABEL_92:
              v81 = v77 + 1;
              if (__OFADD__(v77, 1))
                goto LABEL_125;
              if (v81 >= (uint64_t)v103)
              {
LABEL_117:
                swift_release();
                swift_bridgeObjectRelease();
                v90 = (int *)type metadata accessor for DeviceTelemetry(0);
                v91 = v96;
                sub_2402391FC(v94, (uint64_t)v96 + v90[5], (uint64_t *)&unk_256FE0BD0);
                v92 = v97;
                *v91 = v95;
                v91[1] = v92;
                *(_QWORD *)((char *)v91 + v90[6]) = v93;
                *(_QWORD *)((char *)v91 + v90[7]) = v32;
                *(_QWORD *)((char *)v91 + v90[8]) = v47;
                *(_QWORD *)((char *)v91 + v90[9]) = v62;
                *(_QWORD *)((char *)v91 + v90[10]) = v78;
                return swift_bridgeObjectRetain();
              }
              v82 = *(_QWORD *)(v104 + 8 * v81);
              ++v77;
              if (!v82)
              {
                v77 = v81 + 1;
                if (v81 + 1 >= (uint64_t)v103)
                  goto LABEL_117;
                v82 = *(_QWORD *)(v104 + 8 * v77);
                if (!v82)
                {
                  v77 = v81 + 2;
                  if (v81 + 2 >= (uint64_t)v103)
                    goto LABEL_117;
                  v82 = *(_QWORD *)(v104 + 8 * v77);
                  if (!v82)
                  {
                    v77 = v81 + 3;
                    if (v81 + 3 >= (uint64_t)v103)
                      goto LABEL_117;
                    v82 = *(_QWORD *)(v104 + 8 * v77);
                    if (!v82)
                    {
                      v77 = v81 + 4;
                      if (v81 + 4 >= (uint64_t)v103)
                        goto LABEL_117;
                      v82 = *(_QWORD *)(v104 + 8 * v77);
                      if (!v82)
                      {
                        v83 = v81 + 5;
                        if (v83 >= (uint64_t)v103)
                          goto LABEL_117;
                        v82 = *(_QWORD *)(v104 + 8 * v83);
                        if (!v82)
                        {
                          while (1)
                          {
                            v77 = v83 + 1;
                            if (__OFADD__(v83, 1))
                              goto LABEL_129;
                            if (v77 >= (uint64_t)v103)
                              goto LABEL_117;
                            v82 = *(_QWORD *)(v104 + 8 * v77);
                            ++v83;
                            if (v82)
                              goto LABEL_109;
                          }
                        }
                        v77 = v83;
                      }
                    }
                  }
                }
              }
LABEL_109:
              v76 = (v82 - 1) & v82;
            }
            goto LABEL_121;
          }
          v66 = *(_QWORD *)(v104 + 8 * v65);
          ++v61;
          if (!v66)
          {
            v61 = v65 + 1;
            if (v65 + 1 >= v60)
              goto LABEL_88;
            v66 = *(_QWORD *)(v104 + 8 * v61);
            if (!v66)
            {
              v61 = v65 + 2;
              if (v65 + 2 >= v60)
                goto LABEL_88;
              v66 = *(_QWORD *)(v104 + 8 * v61);
              if (!v66)
              {
                v61 = v65 + 3;
                if (v65 + 3 >= v60)
                  goto LABEL_88;
                v66 = *(_QWORD *)(v104 + 8 * v61);
                if (!v66)
                {
                  v61 = v65 + 4;
                  if (v65 + 4 >= v60)
                    goto LABEL_88;
                  v66 = *(_QWORD *)(v104 + 8 * v61);
                  if (!v66)
                  {
                    v67 = v65 + 5;
                    if (v67 >= v60)
                      goto LABEL_88;
                    v66 = *(_QWORD *)(v104 + 8 * v67);
                    if (!v66)
                    {
                      while (1)
                      {
                        v61 = v67 + 1;
                        if (__OFADD__(v67, 1))
                          goto LABEL_128;
                        if (v61 >= v60)
                          goto LABEL_88;
                        v66 = *(_QWORD *)(v104 + 8 * v61);
                        ++v67;
                        if (v66)
                          goto LABEL_80;
                      }
                    }
                    v61 = v67;
                  }
                }
              }
            }
          }
LABEL_80:
          v59 = (v66 - 1) & v66;
        }
        goto LABEL_120;
      }
      v52 = *(_QWORD *)(v104 + 8 * v51);
      ++v46;
      if (!v52)
      {
        v46 = v51 + 1;
        if (v51 + 1 >= v99)
          goto LABEL_59;
        v52 = *(_QWORD *)(v104 + 8 * v46);
        if (!v52)
        {
          v46 = v51 + 2;
          if (v51 + 2 >= v99)
            goto LABEL_59;
          v52 = *(_QWORD *)(v104 + 8 * v46);
          if (!v52)
          {
            v46 = v51 + 3;
            if (v51 + 3 >= v99)
              goto LABEL_59;
            v52 = *(_QWORD *)(v104 + 8 * v46);
            if (!v52)
            {
              v46 = v51 + 4;
              if (v51 + 4 >= v99)
                goto LABEL_59;
              v52 = *(_QWORD *)(v104 + 8 * v46);
              if (!v52)
              {
                v53 = v51 + 5;
                if (v53 >= v99)
                  goto LABEL_59;
                v52 = *(_QWORD *)(v104 + 8 * v53);
                if (!v52)
                {
                  while (1)
                  {
                    v46 = v53 + 1;
                    if (__OFADD__(v53, 1))
                      goto LABEL_127;
                    if (v46 >= v99)
                      goto LABEL_59;
                    v52 = *(_QWORD *)(v104 + 8 * v46);
                    ++v53;
                    if (v52)
                      goto LABEL_51;
                  }
                }
                v46 = v53;
              }
            }
          }
        }
      }
LABEL_51:
      v45 = (v52 - 1) & v52;
    }
    goto LABEL_119;
  }
  v37 = *(_QWORD *)(v104 + 8 * v38);
  if (v37)
  {
    v31 = v38;
    goto LABEL_22;
  }
  while (1)
  {
    v31 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v31 >= v99)
      goto LABEL_30;
    v37 = *(_QWORD *)(v104 + 8 * v31);
    ++v38;
    if (v37)
      goto LABEL_22;
  }
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
  return result;
}

unint64_t CustomEventAnalytics.coreAnalyticsDictionary.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  char *v61;
  unint64_t v62;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v61 - v6;
  v8 = sub_2402BD48C();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v61 - v12;
  v14 = sub_24024916C(MEMORY[0x24BEE4AF8]);
  v15 = *v0;
  if (*(_QWORD *)(*v0 + 16))
    sub_240258860(0x7472617473, 0xE500000000000000);
  v16 = sub_2402BD90C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62 = v14;
  sub_24025A170(v16, 0x617453746E756F63, 0xEA00000000007472, isUniquelyReferenced_nonNull_native);
  v18 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v15 + 16))
    sub_240258860(1684107116, 0xE400000000000000);
  v19 = sub_2402BD90C();
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v18;
  sub_24025A170(v19, 0x616F4C746E756F63, 0xE900000000000064, v20);
  v21 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v15 + 16))
    sub_240258860(0x737365636F7270, 0xE700000000000000);
  v22 = sub_2402BD90C();
  v23 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v21;
  sub_24025A170(v22, 0x6F7250746E756F63, 0xEC00000073736563, v23);
  v24 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v15 + 16))
    sub_240258860(0x64616F6C7075, 0xE600000000000000);
  v25 = sub_2402BD90C();
  v26 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v24;
  sub_24025A170(v25, 0x6C7055746E756F63, 0xEB0000000064616FLL, v26);
  v27 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v15 + 16))
    sub_240258860(0x64656873696E6966, 0xE800000000000000);
  v28 = sub_2402BD90C();
  v29 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v27;
  sub_24025A170(v28, 0x6E6946746E756F63, 0xED00006465687369, v29);
  v30 = v62;
  swift_bridgeObjectRelease();
  v31 = v0[1];
  if (*(_QWORD *)(v31 + 16))
    sub_2402587B4(0x7472617473, 0xE500000000000000, 1684107116, 0xE400000000000000);
  v32 = sub_2402BD8D0();
  v33 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v30;
  sub_24025A170(v32, 0x74614C7472617473, 0xEC00000079636E65, v33);
  v34 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
    sub_2402587B4(1684107116, 0xE400000000000000, 0x737365636F7270, 0xE700000000000000);
  v35 = sub_2402BD8D0();
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v34;
  sub_24025A170(v35, 0x6574614C64616F6CLL, 0xEB0000000079636ELL, v36);
  v37 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
    sub_2402587B4(0x737365636F7270, 0xE700000000000000, 0x64616F6C7075, 0xE600000000000000);
  v38 = sub_2402BD8D0();
  v39 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v37;
  sub_24025A170(v38, 0x4C737365636F7270, 0xEE0079636E657461, v39);
  v40 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
    sub_2402587B4(0x64616F6C7075, 0xE600000000000000, 0x64656873696E6966, 0xE800000000000000);
  v41 = sub_2402BD8D0();
  v42 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v40;
  sub_24025A170(v41, 0x614C64616F6C7075, 0xED000079636E6574, v42);
  v43 = v62;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v31 + 16))
    sub_2402587B4(0x7472617473, 0xE500000000000000, 0x64656873696E6966, 0xE800000000000000);
  v44 = sub_2402BD8D0();
  v45 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v43;
  sub_24025A170(v44, 0x74614C6C61746F74, 0xEC00000079636E65, v45);
  v46 = v62;
  swift_bridgeObjectRelease();
  v47 = type metadata accessor for CustomEventAnalytics();
  swift_bridgeObjectRetain();
  v48 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v49 = swift_isUniquelyReferenced_nonNull_native();
  v62 = v46;
  sub_24025A170(v48, 0x656D614E6B736174, 0xE800000000000000, v49);
  v50 = v62;
  swift_bridgeObjectRelease();
  sub_2402391FC((uint64_t)v1 + *(int *)(v47 + 36), (uint64_t)v7, &qword_2543521F0);
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v51(v7, 1, v8) == 1)
  {
    sub_24023D378((uint64_t)v7, &qword_2543521F0);
  }
  else
  {
    v52 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v52(v13, v7, v8);
    sub_2402391FC((uint64_t)v1 + *(int *)(v47 + 40), (uint64_t)v5, &qword_2543521F0);
    if (v51(v5, 1, v8) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      sub_24023D378((uint64_t)v5, &qword_2543521F0);
    }
    else
    {
      v53 = v61;
      v52(v61, v5, v8);
      sub_24029AB4C();
      v54 = sub_2402BD63C();
      swift_bridgeObjectRelease();
      v55 = swift_isUniquelyReferenced_nonNull_native();
      v62 = v50;
      sub_24025A170(v54, 0x745374656B637562, 0xEB00000000747261, v55);
      v56 = v62;
      swift_bridgeObjectRelease();
      sub_24029AB4C();
      v57 = sub_2402BD63C();
      swift_bridgeObjectRelease();
      v58 = swift_isUniquelyReferenced_nonNull_native();
      v62 = v56;
      sub_24025A170(v57, 0x6E4574656B637562, 0xE900000000000064, v58);
      v50 = v62;
      swift_bridgeObjectRelease();
      v59 = *(void (**)(char *, uint64_t))(v9 + 8);
      v59(v53, v8);
      v59(v13, v8);
    }
  }
  return v50;
}

uint64_t sub_24029AB4C()
{
  uint64_t result;
  double v1;
  id v2;
  id v3;
  uint64_t v4;

  result = sub_2402BD444();
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithLongLong_, (uint64_t)v1);
    v3 = objc_msgSend(v2, sel_stringValue);

    v4 = sub_2402BD648();
    return v4;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t processCustomTelemetry(customTelemetryEvents:bucketRange:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v2[7] = swift_task_alloc();
  v3 = type metadata accessor for CustomEventAnalytics();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v2[12] = swift_task_alloc();
  v4 = type metadata accessor for LedgerState();
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v5 = type metadata accessor for TaskCustomEvent(0);
  v2[17] = v5;
  v2[18] = *(_QWORD *)(v5 - 8);
  v2[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_24029AD2C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int isUniquelyReferenced_nonNull_native;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::OpaquePointer v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  unint64_t v58;
  Swift::Double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  char v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(_QWORD *@<X8>);
  _QWORD *v115;

  v1 = v0[5];
  v2 = sub_240249284(MEMORY[0x24BEE4AF8]);
  v3 = *(_QWORD *)(v1 + 16);
  v115 = v0;
  if (!v3)
  {
    v114 = 0;
    goto LABEL_28;
  }
  v5 = v0[17];
  v4 = v0[18];
  v101 = v0[14];
  v106 = v0[13];
  v108 = v0[16];
  v6 = v0[5] + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v110 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain();
  v114 = 0;
  v7 = type metadata accessor for TaskCustomEvent;
  v103 = v5;
  while (2)
  {
    sub_240238BF0(v6, v0[19], v7);
    swift_bridgeObjectRetain();
    v9 = sub_2402BDBA0();
    swift_bridgeObjectRelease();
    v112 = v3;
    v7 = (uint64_t (*)(uint64_t))v2;
    v10 = 0xE500000000000000;
    v2 = 0x7472617473;
    switch(v9)
    {
      case 0:
        goto LABEL_10;
      case 1:
        v10 = 0xE400000000000000;
        v2 = 1684107116;
        goto LABEL_10;
      case 2:
        v10 = 0xE700000000000000;
        v2 = 0x737365636F7270;
        goto LABEL_10;
      case 3:
        v10 = 0xE600000000000000;
        v2 = 0x64616F6C7075;
        goto LABEL_10;
      case 4:
        v10 = 0xE800000000000000;
        v2 = 0x64656873696E6966;
LABEL_10:
        v11 = v115[19];
        v12 = *(int *)(v5 + 20);
        v13 = (uint64_t *)(v11 + *(int *)(v5 + 24));
        v14 = (unint64_t *)v115[16];
        v15 = *v13;
        v16 = v13[1];
        v17 = v11 + v12;
        v18 = (char *)v14 + *(int *)(v106 + 20);
        v19 = sub_2402BD48C();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v17, v19);
        *v14 = v2;
        *(_QWORD *)(v108 + 8) = v10;
        swift_bridgeObjectRetain();
        sub_24025A2CC((uint64_t)v114);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v22 = sub_240258860(v15, v16);
        v23 = *((_QWORD *)v7 + 2);
        v24 = (v21 & 1) == 0;
        v25 = v23 + v24;
        if (__OFADD__(v23, v24))
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
          JUMPOUT(0x24029B7FCLL);
        }
        v26 = v21;
        if (*((_QWORD *)v7 + 3) >= v25)
        {
          v0 = v115;
          if (!isUniquelyReferenced_nonNull_native)
            sub_24025AAC8();
        }
        else
        {
          sub_240258DC0(v25, isUniquelyReferenced_nonNull_native);
          v27 = sub_240258860(v15, v16);
          v0 = v115;
          if ((v26 & 1) != (v28 & 1))
            return sub_2402BDDC8();
          v22 = v27;
        }
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          *((_QWORD *)v7 + (v22 >> 6) + 8) |= 1 << v22;
          v29 = (uint64_t *)(*((_QWORD *)v7 + 6) + 16 * v22);
          *v29 = v15;
          v29[1] = v16;
          *(_QWORD *)(*((_QWORD *)v7 + 7) + 8 * v22) = MEMORY[0x24BEE4AF8];
          v30 = *((_QWORD *)v7 + 2);
          v31 = v30 + 1;
          v32 = __OFADD__(v30, 1);
          swift_bridgeObjectRetain();
          if (v32)
            goto LABEL_76;
          *((_QWORD *)v7 + 2) = v31;
        }
        v33 = *((_QWORD *)v7 + 7);
        swift_bridgeObjectRetain();
        v34 = v7;
        swift_bridgeObjectRelease();
        v35 = *(_QWORD *)(v33 + 8 * v22);
        v36 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v33 + 8 * v22) = v35;
        if ((v36 & 1) == 0)
        {
          v35 = sub_24025816C(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
          *(_QWORD *)(v33 + 8 * v22) = v35;
        }
        v38 = *(_QWORD *)(v35 + 16);
        v37 = *(_QWORD *)(v35 + 24);
        if (v38 >= v37 >> 1)
        {
          v35 = sub_24025816C(v37 > 1, v38 + 1, 1, v35);
          *(_QWORD *)(v33 + 8 * v22) = v35;
        }
        v3 = v112;
        v7 = type metadata accessor for TaskCustomEvent;
        v8 = v0[16];
        *(_QWORD *)(v35 + 16) = v38 + 1;
        sub_24023DBCC(v8, v35+ ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80))+ *(_QWORD *)(v101 + 72) * v38, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
        swift_bridgeObjectRelease();
        v114 = sub_2402555EC;
        v2 = (unint64_t)v34;
        v5 = v103;
LABEL_4:
        sub_240238C34(v0[19], v7);
        v6 += v110;
        if (--v3)
          continue;
        swift_bridgeObjectRelease();
LABEL_28:
        v102 = v0[14];
        v99 = v0[11];
        v97 = v0[9];
        v111 = (int *)v0[8];
        sub_240293C4C();
        v100 = v2;
        v40 = *(_QWORD *)(v2 + 64);
        v95 = v2 + 64;
        v41 = -1 << *(_BYTE *)(v2 + 32);
        if (-v41 < 64)
          v42 = ~(-1 << -(char)v41);
        else
          v42 = -1;
        v43 = v42 & v40;
        v98 = v39 + *(_QWORD *)(*(_QWORD *)v39 + 112);
        swift_beginAccess();
        v44 = 0;
        v96 = (unint64_t)(63 - v41) >> 6;
        v45 = MEMORY[0x24BEE4AF8];
        v113 = MEMORY[0x24BEE4AF8];
        if (!v43)
          goto LABEL_33;
LABEL_32:
        v109 = (v43 - 1) & v43;
        v46 = __clz(__rbit64(v43)) | (v44 << 6);
        v47 = v100;
        while (1)
        {
          v51 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v46);
          v52 = *v51;
          v53 = v51[1];
          v54._rawValue = *(void **)(*(_QWORD *)(v47 + 56) + 8 * v46);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((sub_2402BD8C4() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_24025A2CC((uint64_t)v114);
            v45 = 0;
            goto LABEL_72;
          }
          v107 = v44;
          v55 = v0[12];
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v102 + 56))(v55, 1, 1, v0[13]);
          sub_240256ED8(v55);
          sub_24023D378(v55, &qword_256FDEAE0);
          v56 = customEventsToStringSequence(customEvents:)(v54);
          v57._countAndFlagsBits = 0x462A5D465E5B5328;
          v57._object = (void *)0xE900000000000029;
          v58 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(v57, v56);
          if (v58)
          {
            v59 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v58, v54);
            swift_bridgeObjectRelease();
          }
          else
          {
            v59 = -1.0;
          }
          swift_bridgeObjectRelease();
          v60 = *((_QWORD *)v54._rawValue + 2);
          if (v60)
          {
            v104 = v52;
            v61 = (uint64_t)v54._rawValue
                + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
            swift_bridgeObjectRetain();
            v62 = *(_QWORD *)(v102 + 72);
            do
            {
              v63 = v0[15];
              sub_240238BF0(v61, v63, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
              sub_240257290(v63);
              sub_240238C34(v63, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
              v61 += v62;
              --v60;
            }
            while (v60);
            swift_bridgeObjectRelease();
            v52 = v104;
          }
          v64 = v0[11];
          sub_240238BF0(v98, v64, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
          swift_bridgeObjectRelease();
          v65 = (_QWORD *)(v64 + v111[8]);
          swift_bridgeObjectRelease();
          *v65 = v52;
          v65[1] = v53;
          v66 = swift_isUniquelyReferenced_nonNull_native();
          v67 = *(_QWORD *)(v99 + 8);
          *(_QWORD *)(v99 + 8) = 0x8000000000000000;
          v69 = sub_2402587B4(0x7472617473, 0xE500000000000000, 0x64656873696E6966, 0xE800000000000000);
          v70 = *(_QWORD *)(v67 + 16);
          v71 = (v68 & 1) == 0;
          v72 = v70 + v71;
          if (__OFADD__(v70, v71))
            goto LABEL_75;
          v73 = v68;
          if (*(_QWORD *)(v67 + 24) >= v72)
          {
            if ((v66 & 1) == 0)
              sub_24025AAD4();
          }
          else
          {
            sub_240258DCC(v72, v66);
            v74 = sub_2402587B4(0x7472617473, 0xE500000000000000, 0x64656873696E6966, 0xE800000000000000);
            if ((v73 & 1) != (v75 & 1))
              return sub_2402BDDC8();
            v69 = v74;
          }
          *(_QWORD *)(v99 + 8) = v67;
          swift_bridgeObjectRelease();
          v76 = *(_QWORD **)(v99 + 8);
          if ((v73 & 1) == 0)
          {
            v76[(v69 >> 6) + 8] |= 1 << v69;
            v77 = (_QWORD *)(v76[6] + 32 * v69);
            *v77 = 0x7472617473;
            v77[1] = 0xE500000000000000;
            v77[2] = 0x64656873696E6966;
            v77[3] = 0xE800000000000000;
            v78 = (_QWORD *)(v76[7] + 32 * v69);
            *v78 = 0x7FEFFFFFFFFFFFFFLL;
            v78[1] = 0;
            v78[2] = 0;
            v78[3] = 0;
            v79 = v76[2];
            v80 = __OFADD__(v79, 1);
            v81 = v79 + 1;
            if (v80)
              goto LABEL_77;
            v76[2] = v81;
          }
          v82 = v0[11];
          v105 = v0[10];
          v83 = v0[6];
          v84 = v0[7];
          *(Swift::Double *)(v76[7] + 32 * v69 + 16) = v59;
          sub_2402BD3FC();
          v85 = sub_2402BD48C();
          v86 = *(_QWORD *)(v85 - 8);
          v87 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v86 + 56);
          v87(v84, 0, 1, v85);
          sub_24024A200(v84, v82 + v111[9], &qword_2543521F0);
          v88 = v82 + v111[10];
          sub_24023D378(v88, &qword_2543521F0);
          v89 = type metadata accessor for TelemetryBucketRange();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v88, v83 + *(int *)(v89 + 28), v85);
          v87(v88, 0, 1, v85);
          sub_240238BF0(v82, v105, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
          v45 = v113;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v45 = sub_2402585FC(0, *(_QWORD *)(v113 + 16) + 1, 1, v113);
          v43 = v109;
          v91 = *(_QWORD *)(v45 + 16);
          v90 = *(_QWORD *)(v45 + 24);
          v0 = v115;
          if (v91 >= v90 >> 1)
            v45 = sub_2402585FC(v90 > 1, v91 + 1, 1, v45);
          v92 = v115[10];
          v93 = v115[11];
          *(_QWORD *)(v45 + 16) = v91 + 1;
          sub_24023DBCC(v92, v45+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v91, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
          sub_240238C34(v93, (uint64_t (*)(_QWORD))type metadata accessor for CustomEventAnalytics);
          v44 = v107;
          v113 = v45;
          if (v109)
            goto LABEL_32;
LABEL_33:
          v48 = v44 + 1;
          v47 = v100;
          if (__OFADD__(v44, 1))
            goto LABEL_78;
          if (v48 >= v96)
            break;
          v49 = *(_QWORD *)(v95 + 8 * v48);
          ++v44;
          if (!v49)
          {
            v44 = v48 + 1;
            if (v48 + 1 >= v96)
              break;
            v49 = *(_QWORD *)(v95 + 8 * v44);
            if (!v49)
            {
              v44 = v48 + 2;
              if (v48 + 2 >= v96)
                break;
              v49 = *(_QWORD *)(v95 + 8 * v44);
              if (!v49)
              {
                v50 = v48 + 3;
                if (v50 >= v96)
                  break;
                v49 = *(_QWORD *)(v95 + 8 * v50);
                if (!v49)
                {
                  while (1)
                  {
                    v44 = v50 + 1;
                    if (__OFADD__(v50, 1))
                      goto LABEL_79;
                    if (v44 >= v96)
                      goto LABEL_71;
                    v49 = *(_QWORD *)(v95 + 8 * v44);
                    ++v50;
                    if (v49)
                      goto LABEL_46;
                  }
                }
                v44 = v50;
              }
            }
          }
LABEL_46:
          v109 = (v49 - 1) & v49;
          v46 = __clz(__rbit64(v49)) + (v44 << 6);
        }
LABEL_71:
        swift_release();
        swift_release();
        sub_24025A2CC((uint64_t)v114);
LABEL_72:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return ((uint64_t (*)(unint64_t))v0[1])(v45);
      default:
        goto LABEL_4;
    }
  }
}

Swift::Double __swiftcall getLatencyFromRegex(regex:events:stringRepresentation:)(Swift::String regex, Swift::OpaquePointer events, Swift::String stringRepresentation)
{
  unint64_t v4;
  double v5;

  v4 = (unint64_t)getRangeFromRegex(regex:stringRepresentation:)(regex, stringRepresentation);
  if (!v4)
    return -1.0;
  v5 = getLatencyFromRange(matchIndices:events:)((Swift::OpaquePointer)v4, events);
  swift_bridgeObjectRelease();
  return v5;
}

Swift::OpaquePointer_optional __swiftcall getRangeFromRegex(regex:stringRepresentation:)(Swift::String regex, Swift::String stringRepresentation)
{
  unint64_t object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  Swift::Bool v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::OpaquePointer_optional result;

  object = (unint64_t)stringRepresentation._object;
  countAndFlagsBits = stringRepresentation._countAndFlagsBits;
  v4 = regex._object;
  v5 = regex._countAndFlagsBits;
  objc_allocWithZone(MEMORY[0x24BDD1798]);
  swift_bridgeObjectRetain();
  v7 = (char *)sub_24029BC8C(v5, (uint64_t)v4, 0);
  if (!v7)
    goto LABEL_28;
  v8 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v8 = countAndFlagsBits;
  v9 = 7;
  if (((object >> 60) & ((countAndFlagsBits & 0x800000000000000) == 0)) != 0)
    v9 = 11;
  v33 = 15;
  v34 = v9 | (v8 << 16);
  v31 = countAndFlagsBits;
  v32 = object;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FE09B8);
  sub_2402348A0(&qword_256FE09C0, &qword_256FE09B8, MEMORY[0x24BEE1BC0]);
  sub_240232228();
  v10 = sub_2402BD9D8();
  v12 = v11;
  v13 = (void *)sub_2402BD63C();
  v14 = objc_msgSend(v7, sel_matchesInString_options_range_, v13, 0, v10, v12);

  sub_24029CC5C();
  v15 = sub_2402BD7B0();

  if (v15 >> 62)
    goto LABEL_23;
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
  {
LABEL_27:

    swift_bridgeObjectRelease();
LABEL_28:
    v18 = 0;
    goto LABEL_31;
  }
  while (2)
  {
    v30 = v7;
    v17 = 0;
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      if ((v15 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x242681894](v17, v15);
      else
        v20 = *(id *)(v15 + 8 * v17 + 32);
      v21 = v20;
      if ((uint64_t)objc_msgSend(v20, sel_numberOfRanges, v30, v31, v32, v33, v34) < 1)
        goto LABEL_10;
      v22 = (char *)objc_msgSend(v21, sel_rangeAtIndex_, 1);
      v24 = &v22[v23];
      if (__OFADD__(v22, v23))
        break;
      v7 = v24 - 1;
      if (__OFSUB__(v24, 1))
        goto LABEL_22;
      v25 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_24025838C(0, v18[2] + 1, 1, v18);
      v27 = v18[2];
      v26 = v18[3];
      if (v27 >= v26 >> 1)
        v18 = sub_24025838C((_QWORD *)(v26 > 1), v27 + 1, 1, v18);
      v18[2] = v27 + 1;
      v19 = &v18[2 * v27];
      v19[4] = v25;
      v19[5] = v7;
LABEL_10:
      ++v17;

      if (v16 == v17)
        goto LABEL_30;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    v28 = sub_2402BDB58();
    swift_bridgeObjectRelease();
    if (v28 < 1)
      goto LABEL_27;
    v30 = v7;
    swift_bridgeObjectRetain();
    v16 = sub_2402BDB58();
    swift_bridgeObjectRelease();
    if (v16)
    {
      if (v16 < 1)
      {
        __break(1u);
        goto LABEL_27;
      }
      continue;
    }
    break;
  }
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_30:

  swift_bridgeObjectRelease();
LABEL_31:
  v29 = v18;
  result.value._rawValue = v29;
  result.is_nil = v6;
  return result;
}

Swift::Double __swiftcall getLatencyFromRange(matchIndices:events:)(Swift::OpaquePointer matchIndices, Swift::OpaquePointer events)
{
  uint64_t v2;
  unint64_t v5;
  Swift::Double result;
  unint64_t *v7;
  double v8;
  double v9;
  double v11;

  v2 = *((_QWORD *)matchIndices._rawValue + 2);
  if (v2)
  {
    type metadata accessor for LedgerState();
    v5 = *((_QWORD *)events._rawValue + 2);
    swift_bridgeObjectRetain();
    v7 = (unint64_t *)((char *)matchIndices._rawValue + 40);
    v8 = 0.0;
    v9 = 1.0;
    while (*(v7 - 1) < v5 && *v7 < v5)
    {
      v7 += 2;
      sub_2402BD420();
      result = (v11 - v8) / v9;
      v8 = v8 + result;
      v9 = v9 + 1.0;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    __break(1u);
  }
  else
  {
    return 0.0;
  }
  return result;
}

id sub_24029BC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_2402BD360();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_24029BD64(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24029C11C(a1, a2, a3, (_QWORD *)*v3, &qword_256FDEFC8, (uint64_t (*)(_QWORD))type metadata accessor for LedgerState);
  *v3 = result;
  return result;
}

uint64_t sub_24029BD90(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24029BE68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24029BDAC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24029BFB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t type metadata accessor for TelemetryBucketRange()
{
  uint64_t result;

  result = qword_256FE0A68;
  if (!qword_256FE0A68)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24029BE04(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24029C11C(a1, a2, a3, (_QWORD *)*v3, &qword_256FDEFB0, type metadata accessor for TaskStatusEvent);
  *v3 = result;
  return result;
}

uint64_t sub_24029BE30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_24029C2FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_24029BE4C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_24029C484(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_24029BE68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0AB0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24029BFB4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2543524E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24029C11C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24029C2FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF58);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF60);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

uint64_t sub_24029C484(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF28);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_2402BDB88();
  __break(1u);
  return result;
}

char *sub_24029C5EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0AB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_24029C6E4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_2402BDB88();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_24029C78C(uint64_t a1)
{
  return sub_24029C5EC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24029C7A0(uint64_t a1)
{
  return sub_24029BFB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24029C7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  v10[2] = *(_QWORD *)(v13 - 8);
  v5 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v5);
  v12 = (char *)v10 - v6;
  v11 = type metadata accessor for LedgerState();
  MEMORY[0x24BDAC7A8](v11);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v10[1] = v2;
    v18 = MEMORY[0x24BEE4AF8];
    sub_24029BD90(0, v7, 0);
    v17 = a2 + 32;
    v8 = *(unsigned __int8 *)(a1 + 32);
    v14 = v18;
    v15 = a1 + 33;
    v16 = v7;
    __asm { BR              X11 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_24029CC00(uint64_t a1)
{
  uint64_t v1;

  return sub_240297E7C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_24029CC1C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_2402BD48C();
    result = MEMORY[0x2426820F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24029CC5C()
{
  unint64_t result;

  result = qword_256FE09C8;
  if (!qword_256FE09C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256FE09C8);
  }
  return result;
}

unint64_t sub_24029CC9C()
{
  unint64_t result;

  result = qword_256FE09D0;
  if (!qword_256FE09D0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CustomRegex, &type metadata for CustomRegex);
    atomic_store(result, (unint64_t *)&qword_256FE09D0);
  }
  return result;
}

unint64_t sub_24029CCE4()
{
  unint64_t result;

  result = qword_256FE09D8;
  if (!qword_256FE09D8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LatencyRegex, &type metadata for LatencyRegex);
    atomic_store(result, (unint64_t *)&qword_256FE09D8);
  }
  return result;
}

unint64_t sub_24029CD2C()
{
  unint64_t result;

  result = qword_256FE09E0;
  if (!qword_256FE09E0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for PushRegex, &type metadata for PushRegex);
    atomic_store(result, (unint64_t *)&qword_256FE09E0);
  }
  return result;
}

unint64_t sub_24029CD74()
{
  unint64_t result;

  result = qword_256FE09E8;
  if (!qword_256FE09E8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CustomTelemetryStates, &type metadata for CustomTelemetryStates);
    atomic_store(result, (unint64_t *)&qword_256FE09E8);
  }
  return result;
}

unint64_t sub_24029CDB8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_24029CDE4();
  result = sub_24029CE28();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_24029CDE4()
{
  unint64_t result;

  result = qword_256FE09F0;
  if (!qword_256FE09F0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CustomTelemetryStates, &type metadata for CustomTelemetryStates);
    atomic_store(result, (unint64_t *)&qword_256FE09F0);
  }
  return result;
}

unint64_t sub_24029CE28()
{
  unint64_t result;

  result = qword_256FE09F8;
  if (!qword_256FE09F8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CustomTelemetryStates, &type metadata for CustomTelemetryStates);
    atomic_store(result, (unint64_t *)&qword_256FE09F8);
  }
  return result;
}

uint64_t sub_24029CE6C()
{
  return sub_2402348A0(&qword_256FE0A00, &qword_256FE0A08, MEMORY[0x24BEE12E0]);
}

uint64_t storeEnumTagSinglePayload for CustomRegex(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24029CED8 + 4 * byte_2402C6425[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24029CEF8 + 4 * byte_2402C642A[v4]))();
}

_BYTE *sub_24029CED8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24029CEF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24029CF00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24029CF08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24029CF10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24029CF18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustomRegex()
{
  return &type metadata for CustomRegex;
}

uint64_t storeEnumTagSinglePayload for LatencyRegex(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_24029CF80 + 4 * byte_2402C6434[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_24029CFB4 + 4 * byte_2402C642F[v4]))();
}

uint64_t sub_24029CFB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029CFBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24029CFC4);
  return result;
}

uint64_t sub_24029CFD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24029CFD8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_24029CFDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029CFE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LatencyRegex()
{
  return &type metadata for LatencyRegex;
}

uint64_t storeEnumTagSinglePayload for PushRegex(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24029D04C + 4 * byte_2402C643E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24029D080 + 4 * byte_2402C6439[v4]))();
}

uint64_t sub_24029D080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029D088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24029D090);
  return result;
}

uint64_t sub_24029D09C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24029D0A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24029D0A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029D0B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushRegex()
{
  return &type metadata for PushRegex;
}

char *initializeBufferWithCopyOfBuffer for TelemetryBucketRange(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_2402BD48C();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v11(&v4[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v10);
  }
  return v4;
}

uint64_t destroy for TelemetryBucketRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_2402BD48C();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 28), v5);
}

char *initializeWithCopy for TelemetryBucketRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *assignWithCopy for TelemetryBucketRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *initializeWithTake for TelemetryBucketRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *assignWithTake for TelemetryBucketRange(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TelemetryBucketRange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24029D438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v6);
}

uint64_t storeEnumTagSinglePayload for TelemetryBucketRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24029D490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1 + *(int *)(a4 + 24), a2, a2, v7);
}

uint64_t sub_24029D4E0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD48C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for TelemetryConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TelemetryConfig(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TelemetryConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for TelemetryConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TelemetryConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TelemetryConfig()
{
  return &type metadata for TelemetryConfig;
}

uint64_t storeEnumTagSinglePayload for CustomTelemetryStates(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24029D740 + 4 * byte_2402C6448[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24029D774 + 4 * byte_2402C6443[v4]))();
}

uint64_t sub_24029D774(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029D77C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24029D784);
  return result;
}

uint64_t sub_24029D790(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24029D798);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24029D79C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24029D7A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomTelemetryStates()
{
  return &type metadata for CustomTelemetryStates;
}

id sub_24029D7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  void *v13;
  void *v14;
  id v15;

  v10 = sub_2402BD48C();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = 0;
  if (v12(a1, 1, v10) != 1)
  {
    v13 = (void *)sub_2402BD438();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = (void *)sub_2402BD438();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, v13, v14, a3, a4, a5 & 1);

  return v15;
}

unint64_t sub_24029D8D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  char **v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  char v34;
  char *v35;
  uint64_t v36;
  id v37;
  char *v38;
  void *v39;
  id v40;
  void *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD v62[2];
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  unint64_t v79;
  uint64_t v80;
  char v81;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_2402BD48C();
  v68 = *(_QWORD *)(v6 - 8);
  v69 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v64 = (char *)v62 - v9;
  v10 = sub_2402BD4B0();
  v72 = *(_QWORD *)(v10 - 8);
  v73 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v71 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0C10);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (_QWORD *)((char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (int *)type metadata accessor for TaskStatusEvent(0);
  v77 = *((_QWORD *)v15 - 1);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v76 = (uint64_t)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v70 = (uint64_t)v62 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v67 = v5;
    v62[1] = v1;
    swift_bridgeObjectRetain();
    v78 = v15;
    v79 = MEMORY[0x24BEE4AF8];
    v62[0] = a1;
    v20 = (id *)(a1 + 40);
    v21 = &off_251094000;
    v22 = v77;
    while (1)
    {
      v23 = *v20;
      v24 = objc_msgSend(v23, v21[183], v62[0]);
      if (!v24)
        goto LABEL_4;
      v25 = v24;
      v80 = sub_2402BD648();
      v27 = v26;

      v28 = objc_msgSend(v23, sel_taskState);
      if (!v28)
        break;
      v29 = v28;
      v30 = sub_2402BD648();
      v32 = v31;

      v33._countAndFlagsBits = v30;
      v33._object = v32;
      TaskStatus.init(rawValue:)(v33);
      v34 = v81;
      if (v81 != 11)
      {
        v35 = v71;
        sub_2402BD4A4();
        v74 = sub_2402BD498();
        v75 = v36;
        (*(void (**)(char *, uint64_t))(v72 + 8))(v35, v73);
        v15 = v78;
        sub_2402BD3FC();
        sub_2402A050C(objc_msgSend(v23, sel_pushMetadata), (uint64_t *)((char *)v14 + v15[8]));
        v37 = objc_msgSend(v23, sel_pullMetadata);
        v38 = (char *)v14 + v15[9];
        if (v37)
        {
          v39 = v37;
          v40 = objc_msgSend(v37, sel_creationDate);
          if (v40)
          {
            v41 = v40;
            v66 = v38;
            v42 = v65;
            sub_2402BD45C();

            v44 = (uint64_t)v67;
            v43 = v68;
            v45 = v42;
            v46 = v69;
            v63 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
            v63(v67, v45, v69);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v46);
            v47 = v46;
            v38 = v66;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v44, 1, v47) != 1)
            {
              v48 = v44;
              v49 = v69;
              v50 = v63;
              v63(v64, (char *)v48, v69);
              v50(v38, v64, v49);
              v51 = type metadata accessor for PullMetadata(0);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v38, 0, 1, v51);
              v15 = v78;
LABEL_18:
              v22 = v77;
              v53 = v74;

              v54 = v75;
              *v14 = v53;
              v14[1] = v54;
              v55 = (uint64_t *)((char *)v14 + v15[6]);
              *v55 = v80;
              v55[1] = v27;
              *((_BYTE *)v14 + v15[7]) = v34;
              (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v22 + 56))(v14, 0, 1, v15);
              v56 = v70;
              sub_24023DBCC((uint64_t)v14, v70, type metadata accessor for TaskStatusEvent);
              sub_24023DBCC(v56, v76, type metadata accessor for TaskStatusEvent);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                v57 = v79;
              else
                v57 = sub_2402585C0(0, *(_QWORD *)(v79 + 16) + 1, 1, v79);
              v59 = *(_QWORD *)(v57 + 16);
              v58 = *(_QWORD *)(v57 + 24);
              if (v59 >= v58 >> 1)
                v57 = sub_2402585C0(v58 > 1, v59 + 1, 1, v57);
              *(_QWORD *)(v57 + 16) = v59 + 1;
              v60 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
              v79 = v57;
              sub_24023DBCC(v76, v57 + v60 + *(_QWORD *)(v22 + 72) * v59, type metadata accessor for TaskStatusEvent);
              v21 = &off_251094000;
              goto LABEL_6;
            }
          }
          else
          {

            v44 = (uint64_t)v67;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v67, 1, 1, v69);
          }
          sub_24023D378(v44, &qword_2543521F0);
          v15 = v78;
        }
        v52 = type metadata accessor for PullMetadata(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v38, 1, 1, v52);
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();

      v22 = v77;
      v15 = v78;
      v21 = &off_251094000;
LABEL_5:
      (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v22 + 56))(v14, 1, 1, v15);
      sub_24023D378((uint64_t)v14, (uint64_t *)&unk_256FE0C10);
LABEL_6:
      v20 += 2;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        return v79;
      }
    }
    swift_bridgeObjectRelease();
LABEL_4:

    goto LABEL_5;
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t sub_24029DE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[3];
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C08);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_QWORD *)((char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for TaskErrorEvent(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v35 = (uint64_t)v32 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x24BEE4AF8];
  v32[2] = v1;
  swift_bridgeObjectRetain();
  v32[1] = a1;
  v13 = (id *)(a1 + 40);
  v14 = MEMORY[0x24BEE4AF8];
  v33 = v10;
  v34 = v7;
  do
  {
    v37 = v14;
    v15 = *v13;
    v16 = objc_msgSend(v15, sel_taskName);
    if (v16)
    {
      v17 = v16;
      v36 = sub_2402BD648();
      v19 = v18;

      v20 = objc_msgSend(v15, sel_errorCode);
      if (v20)
      {
        v21 = v20;
        v22 = sub_2402BD648();
        v24 = v23;

        sub_2402BD3FC();
        v25 = 0;
        *v5 = 4271950;
        v5[1] = 0xE300000000000000;
        v26 = (_QWORD *)((char *)v5 + *(int *)(v6 + 24));
        *v26 = v36;
        v26[1] = v19;
        v27 = (_QWORD *)((char *)v5 + *(int *)(v6 + 28));
        *v27 = v22;
        v27[1] = v24;
        v10 = v33;
        v7 = v34;
        goto LABEL_10;
      }
      swift_bridgeObjectRelease();
    }

    v25 = 1;
LABEL_10:
    v14 = v37;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v25, 1, v6);

    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_24023D378((uint64_t)v5, &qword_256FE0C08);
    }
    else
    {
      v28 = v35;
      sub_24023DBCC((uint64_t)v5, v35, type metadata accessor for TaskErrorEvent);
      sub_24023DBCC(v28, (uint64_t)v10, type metadata accessor for TaskErrorEvent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_24025873C(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
      v30 = *(_QWORD *)(v14 + 16);
      v29 = *(_QWORD *)(v14 + 24);
      if (v30 >= v29 >> 1)
        v14 = sub_24025873C(v29 > 1, v30 + 1, 1, v14);
      *(_QWORD *)(v14 + 16) = v30 + 1;
      sub_24023DBCC((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v30, type metadata accessor for TaskErrorEvent);
    }
    v13 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_24029E188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  unint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C00);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (_QWORD *)((char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for TaskCustomEvent(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v41 = (uint64_t)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v38 = (uint64_t)v35 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return MEMORY[0x24BEE4AF8];
  v35[2] = v1;
  swift_bridgeObjectRetain();
  v35[1] = a1;
  v12 = (id *)(a1 + 40);
  v13 = MEMORY[0x24BEE4AF8];
  v36 = v7;
  do
  {
    v14 = *v12;
    v15 = objc_msgSend(v14, sel_taskID);
    if (v15)
    {
      v16 = v15;
      v42 = v13;
      v40 = sub_2402BD648();
      v18 = v17;

      v19 = objc_msgSend(v14, sel_taskName);
      if (v19)
      {
        v20 = v19;
        v39 = sub_2402BD648();
        v22 = v21;

        v23 = objc_msgSend(v14, sel_eventName);
        if (v23)
        {
          v24 = v23;
          v25 = sub_2402BD648();
          v37 = v26;

          sub_2402BD3FC();
          v27 = 0;
          v28 = v39;
          *v5 = v40;
          v5[1] = v18;
          v29 = (uint64_t *)((char *)v5 + *(int *)(v6 + 24));
          *v29 = v28;
          v29[1] = v22;
          v30 = (uint64_t *)((char *)v5 + *(int *)(v6 + 28));
          *v30 = v25;
          v7 = v36;
          v30[1] = v37;
          v13 = v42;
          goto LABEL_13;
        }
        swift_bridgeObjectRelease();
      }
      v13 = v42;
      swift_bridgeObjectRelease();
    }

    v27 = 1;
LABEL_13:
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v27, 1, v6);

    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_24023D378((uint64_t)v5, &qword_256FE0C00);
    }
    else
    {
      v31 = v38;
      sub_24023DBCC((uint64_t)v5, v38, type metadata accessor for TaskCustomEvent);
      sub_24023DBCC(v31, v41, type metadata accessor for TaskCustomEvent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_240258764(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      v33 = *(_QWORD *)(v13 + 16);
      v32 = *(_QWORD *)(v13 + 24);
      if (v33 >= v32 >> 1)
        v13 = sub_240258764(v32 > 1, v33 + 1, 1, v13);
      *(_QWORD *)(v13 + 16) = v33 + 1;
      sub_24023DBCC(v41, v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v33, type metadata accessor for TaskCustomEvent);
    }
    v12 += 2;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_24029E4D0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a3(0);
  v13 = *(_QWORD *)(v30 - 8);
  v14 = MEMORY[0x24BDAC7A8](v30);
  v29 = (uint64_t)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v25 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return MEMORY[0x24BEE4AF8];
  v25[0] = a5;
  v25[1] = v5;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x24BEE4AF8];
  v20 = a1;
  v21 = 40;
  v26 = v20;
  v27 = a4;
  do
  {
    a4(*(id *)(v20 + v21));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v30) == 1)
    {
      sub_24023D378((uint64_t)v12, v28);
    }
    else
    {
      sub_24023DBCC((uint64_t)v12, (uint64_t)v17, a3);
      sub_24023DBCC((uint64_t)v17, v29, a3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v25[0])(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      v23 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v19 + 24);
      if (v23 >= v22 >> 1)
        v19 = ((uint64_t (*)(BOOL, unint64_t, uint64_t, uint64_t))v25[0])(v22 > 1, v23 + 1, 1, v19);
      *(_QWORD *)(v19 + 16) = v23 + 1;
      sub_24023DBCC(v29, v19+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v23, a3);
      v20 = v26;
      a4 = v27;
    }
    v21 += 16;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t LedgerClient.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  LedgerClient.init()();
  return v0;
}

_QWORD *LedgerClient.init()()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;

  swift_defaultActor_initialize();
  v1 = objc_msgSend((id)BiomeLibrary(), sel_Lighthouse);
  swift_unknownObjectRelease();
  v2 = objc_msgSend(v1, sel_Ledger);
  swift_unknownObjectRelease();
  v3 = objc_msgSend(v2, sel_TaskStatus);
  swift_unknownObjectRelease();
  v0[14] = v3;
  v4 = objc_msgSend((id)BiomeLibrary(), sel_Lighthouse);
  swift_unknownObjectRelease();
  v5 = objc_msgSend(v4, sel_Ledger);
  swift_unknownObjectRelease();
  v6 = objc_msgSend(v5, sel_TaskCustomEvent);
  swift_unknownObjectRelease();
  v0[15] = v6;
  v7 = objc_msgSend((id)BiomeLibrary(), sel_Lighthouse);
  swift_unknownObjectRelease();
  v8 = objc_msgSend(v7, sel_Ledger);
  swift_unknownObjectRelease();
  v9 = objc_msgSend(v8, sel_TaskError);
  swift_unknownObjectRelease();
  v0[16] = v9;
  v10 = objc_msgSend((id)BiomeLibrary(), sel_Lighthouse);
  swift_unknownObjectRelease();
  v11 = objc_msgSend(v10, sel_Ledger);
  swift_unknownObjectRelease();
  v12 = objc_msgSend(v11, sel_TaskTelemetry);
  swift_unknownObjectRelease();
  v0[17] = v12;
  v13 = objc_msgSend((id)BiomeLibrary(), sel_Lighthouse);
  swift_unknownObjectRelease();
  v14 = objc_msgSend(v13, sel_Ledger);
  swift_unknownObjectRelease();
  v15 = objc_msgSend(v14, sel_DeviceTelemetry);
  swift_unknownObjectRelease();
  v0[18] = v15;
  return v0;
}

unint64_t sub_24029E9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = sub_2402A09A4(*(void **)(v2 + 112), a1, a2, (uint64_t)&unk_251091AB0, (uint64_t)&block_descriptor_36, (uint64_t (*)(_QWORD))sub_2402A0DC4, (uint64_t)&block_descriptor_39);
  v4 = sub_24029D8D4(v3);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_24029EA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = sub_2402A09A4(*(void **)(v2 + 128), a1, a2, (uint64_t)&unk_251091A38, (uint64_t)&block_descriptor_27, (uint64_t (*)(_QWORD))sub_2402A0DA4, (uint64_t)&block_descriptor_30);
  v4 = sub_24029DE7C(v3);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_24029EA94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(*(id *)(v4 + 120), sel_source);
  if (qword_2543528A0 != -1)
    swift_once();
  v33 = a4;
  v13 = sub_2402BD4E0();
  __swift_project_value_buffer(v13, (uint64_t)qword_2543529A0);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v34 = a1;
  v14(v11, a1, a3);
  v15 = a2;
  v16 = sub_2402BD4C8();
  v17 = sub_2402BD960();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc();
    v32 = v12;
    v20 = v19;
    v31 = swift_slowAlloc();
    v35 = v31;
    *(_DWORD *)v20 = 136315394;
    HIDWORD(v30) = v18;
    v22 = *(_QWORD *)&v15[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName];
    v21 = *(_QWORD *)&v15[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName + 8];
    swift_bridgeObjectRetain();
    v36 = sub_24023D440(v22, v21, &v35);
    sub_2402BD9FC();

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    sub_2402BD750();
    v36 = sub_24023D440(v36, v37, &v35);
    sub_2402BD9FC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
    _os_log_impl(&dword_24022D000, v16, BYTE4(v30), "Writing task event for %s with state: %s", (uint8_t *)v20, 0x16u);
    v23 = v31;
    swift_arrayDestroy();
    MEMORY[0x242682188](v23, -1, -1);
    v24 = v20;
    v12 = v32;
    MEMORY[0x242682188](v24, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2402BD750();
  v25 = objc_allocWithZone(MEMORY[0x24BE0C460]);
  v26 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v27 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v28 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(v25, sel_initWithTaskID_taskName_eventName_, v26, v27, v28);

  objc_msgSend(v12, sel_sendEvent_, v29);
}

unint64_t sub_24029EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = sub_2402A09A4(*(void **)(v2 + 120), a1, a2, (uint64_t)&unk_2510919C0, (uint64_t)&block_descriptor_18, (uint64_t (*)(_QWORD))sub_2402A0D84, (uint64_t)&block_descriptor_21_0);
  sub_2402A0844(v3, (uint64_t (*)(double))sub_2402A0BF4);
  v5 = v4;
  swift_bridgeObjectRelease();
  v6 = sub_24029E188(v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_24029EEC4(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  if (a3)
  {
    swift_bridgeObjectRetain();
    v6 = objc_msgSend(a1, sel_taskName);
    if (v6)
    {
      v7 = v6;
      v8 = sub_2402BD648();
      v10 = v9;

      if (v8 == a2 && v10 == a3)
        v12 = 1;
      else
        v12 = sub_2402BDD8C();
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 1;
  }
  return v12 & 1;
}

uint64_t sub_24029EF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_2402A09A4(*(void **)(v2 + 136), a1, a2, (uint64_t)&unk_251091948, (uint64_t)&block_descriptor_9, (uint64_t (*)(_QWORD))sub_2402A0D64, (uint64_t)&block_descriptor_12);
  v4 = sub_24029E4D0(v3, &qword_256FE0BF8, type metadata accessor for TaskTelemetry, (void (*)(_QWORD))sub_24029F01C, (uint64_t)sub_2402585D4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24029F01C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  id v45;
  void *v46;
  char *v47;
  id v48;
  void *v49;
  char *v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  double v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  _QWORD *v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t *v113;
  NSObject *v114;

  v113 = a2;
  v3 = sub_2402BD4B0();
  v109 = *(_QWORD *)(v3 - 8);
  v110 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v108 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF18);
  v5 = MEMORY[0x24BDAC7A8](v105);
  v106 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v96 - v7;
  v103 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v9 = MEMORY[0x24BDAC7A8](v103);
  v104 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v107 = (uint64_t)&v96 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v96 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v96 - v19;
  v21 = sub_2402BD48C();
  v22 = *(_QWORD **)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v111 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v96 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v96 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v112 = (char *)&v96 - v31;
  v32 = objc_msgSend(a1, sel_taskName);
  if (!v32)
    goto LABEL_22;
  v33 = v32;
  v101 = v27;
  v100 = sub_2402BD648();
  v35 = v34;

  v36 = objc_msgSend(a1, sel_taskState);
  if (v36)
  {
    v37 = v36;
    v102 = v35;
    v98 = sub_2402BD648();
    v39 = v38;

    v40 = objc_msgSend(a1, sel_latestEventTimestamp);
    if (v40)
    {
      v41 = v40;
      sub_2402BD45C();

      v42 = (void (*)(char *, char *, uint64_t))v22[4];
      v42(v20, v30, v21);
      v99 = (char *)v22[7];
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v99)(v20, 0, 1, v21);
      v97 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[6];
      if (v97(v20, 1, v21) != 1)
      {
        v43 = v20;
        v44 = v42;
        v42(v112, v43, v21);
        v45 = objc_msgSend(a1, sel_bucketStart);
        if (v45)
        {
          v46 = v45;
          sub_2402BD45C();

          v44(v18, v30, v21);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v99)(v18, 0, 1, v21);
          if (v97(v18, 1, v21) != 1)
          {
            v96 = v39;
            v47 = v101;
            v44(v101, v18, v21);
            v48 = objc_msgSend(a1, sel_bucketEnd);
            if (v48)
            {
              v49 = v48;
              sub_2402BD45C();

              v44(v15, v30, v21);
              ((void (*)(char *, _QWORD, uint64_t, uint64_t))v99)(v15, 0, 1, v21);
              if (v97(v15, 1, v21) != 1)
              {
                v50 = v111;
                v44(v111, v15, v21);
                sub_24025B814();
                result = sub_2402BD60C();
                if ((result & 1) != 0)
                {
                  v52 = v105;
                  v53 = &v8[*(int *)(v105 + 48)];
                  v54 = (void (*)(char *, char *, uint64_t))v22[2];
                  v54(v8, v47, v21);
                  v99 = v53;
                  v54(v53, v50, v21);
                  v55 = v106;
                  v56 = &v106[*(int *)(v52 + 48)];
                  v54(v106, v8, v21);
                  v54(v56, v53, v21);
                  v57 = (char *)v104;
                  v44((char *)v104, v55, v21);
                  v58 = (void (*)(char *, uint64_t))v22[1];
                  v58(v56, v21);
                  v59 = &v55[*(int *)(v52 + 48)];
                  v44(v55, v8, v21);
                  v44(v59, v99, v21);
                  v44(&v57[*(int *)(v103 + 36)], v59, v21);
                  v58(v55, v21);
                  v60 = (uint64_t)v57;
                  v61 = v107;
                  sub_2402A0C78(v60, v107);
                  v62 = v111;
                  v63 = v101;
                  sub_2402BD474();
                  if (v64 <= 86400.0)
                    v65 = 6;
                  else
                    v65 = 7;
                  LODWORD(v106) = v65;
                  v105 = (int)objc_msgSend(a1, sel_countCompleted);
                  v104 = (int)objc_msgSend(a1, sel_countFailed);
                  v103 = (int)objc_msgSend(a1, sel_countDeferred);
                  objc_msgSend(a1, sel_dailyExecutionLatency);
                  v67 = v66;
                  objc_msgSend(a1, sel_crossExecutionDelay);
                  v69 = v68;
                  objc_msgSend(a1, sel_executionCompletionTime);
                  v71 = v70;
                  objc_msgSend(a1, sel_executionFailureTime);
                  v73 = v72;
                  objc_msgSend(a1, sel_executionDeferralTime);
                  v75 = v74;
                  v76 = v108;
                  sub_2402BD4A4();
                  v77 = sub_2402BD498();
                  v79 = v78;

                  (*(void (**)(char *, uint64_t))(v109 + 8))(v76, v110);
                  v58(v62, v21);
                  v58(v63, v21);
                  v80 = (int *)type metadata accessor for TaskTelemetry(0);
                  v81 = v113;
                  v44((char *)v113 + v80[9], v112, v21);
                  *v81 = v77;
                  v81[1] = v79;
                  sub_2402A0C78(v61, (uint64_t)v81 + v80[5]);
                  v82 = (uint64_t *)((char *)v81 + v80[7]);
                  v83 = v102;
                  *v82 = v100;
                  v82[1] = v83;
                  v84 = (uint64_t *)((char *)v81 + v80[8]);
                  v85 = v96;
                  *v84 = v98;
                  v84[1] = v85;
                  *(uint64_t *)((char *)v81 + v80[10]) = v105;
                  *(uint64_t *)((char *)v81 + v80[11]) = v104;
                  *(uint64_t *)((char *)v81 + v80[12]) = v103;
                  *(uint64_t *)((char *)v81 + v80[13]) = v67;
                  *(uint64_t *)((char *)v81 + v80[14]) = v69;
                  *(uint64_t *)((char *)v81 + v80[15]) = v71;
                  *(uint64_t *)((char *)v81 + v80[16]) = v73;
                  *(uint64_t *)((char *)v81 + v80[17]) = v75;
                  *((_BYTE *)v81 + v80[6]) = (_BYTE)v106;
                  *(uint64_t *)((char *)v81 + v80[18]) = 0;
                  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v80 - 1) + 56))(v81, 0, 1, v80);
                }
                else
                {
                  __break(1u);
                }
                return result;
              }
            }
            else
            {
              ((void (*)(char *, uint64_t, uint64_t, uint64_t))v99)(v15, 1, 1, v21);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v87 = (void (*)(char *, uint64_t))v22[1];
            v87(v47, v21);
            v87(v112, v21);
            v86 = (uint64_t)v15;
            goto LABEL_21;
          }
        }
        else
        {
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v99)(v18, 1, 1, v21);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v22[1])(v112, v21);
        v86 = (uint64_t)v18;
LABEL_21:
        sub_24023D378(v86, &qword_2543521F0);
        goto LABEL_22;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v22[7])(v20, 1, 1, v21);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v86 = (uint64_t)v20;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  if (qword_2543528A0 != -1)
    swift_once();
  v88 = sub_2402BD4E0();
  __swift_project_value_buffer(v88, (uint64_t)qword_2543529A0);
  v89 = a1;
  v90 = sub_2402BD4C8();
  v91 = sub_2402BD960();
  if (os_log_type_enabled(v90, v91))
  {
    v92 = (uint8_t *)swift_slowAlloc();
    v93 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v92 = 138412290;
    v114 = v89;
    v94 = v89;
    sub_2402BD9FC();
    *v93 = v89;

    _os_log_impl(&dword_24022D000, v90, v91, "Invalid event: %@", v92, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
    swift_arrayDestroy();
    MEMORY[0x242682188](v93, -1, -1);
    MEMORY[0x242682188](v92, -1, -1);
  }
  else
  {

    v90 = v89;
  }

  v95 = type metadata accessor for TaskTelemetry(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v113, 1, 1, v95);
}

uint64_t sub_24029FA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_2402A09A4(*(void **)(v2 + 144), a1, a2, (uint64_t)&unk_2510918D0, (uint64_t)&block_descriptor_4, (uint64_t (*)(_QWORD))sub_2402A0D44, (uint64_t)&block_descriptor_3_0);
  v4 = sub_24029E4D0(v3, (uint64_t *)&unk_256FE0BC0, type metadata accessor for DeviceTelemetry, (void (*)(_QWORD))sub_24029FAAC, (uint64_t)sub_2402585E8);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24029FAAC@<X0>(id a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  id v32;
  void *v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  int *v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  id v75;
  NSObject *v76;

  v4 = sub_2402BD4B0();
  v72 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v71 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEF18);
  v6 = MEMORY[0x24BDAC7A8](v68);
  v69 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)&v63 - v8;
  v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v9 = MEMORY[0x24BDAC7A8](v66);
  v67 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v70 = (uint64_t)&v63 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v63 - v16;
  v18 = sub_2402BD48C();
  v19 = *(_QWORD **)(v18 - 8);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v73 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v63 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v63 - v25;
  v27 = objc_msgSend(a1, sel_bucketStart);
  if (v27)
  {
    v28 = v27;
    v64 = v4;
    v74 = a2;
    v75 = a1;
    sub_2402BD45C();

    v29 = (void (*)(char *, char *, uint64_t))v19[4];
    v29(v17, v24, v18);
    v30 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
    v30(v17, 0, 1, v18);
    v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v19[6];
    if (v31(v17, 1, v18) == 1)
    {
      v15 = v17;
    }
    else
    {
      v29(v26, v17, v18);
      v32 = objc_msgSend(v75, sel_bucketEnd);
      if (v32)
      {
        v33 = v32;
        sub_2402BD45C();

        v29(v15, v24, v18);
        v30(v15, 0, 1, v18);
        if (v31(v15, 1, v18) != 1)
        {
          v34 = v73;
          v29(v73, v15, v18);
          sub_24025B814();
          result = sub_2402BD60C();
          if ((result & 1) != 0)
          {
            v36 = v68;
            v37 = v65;
            v38 = &v65[*(int *)(v68 + 48)];
            v39 = (void (*)(char *, char *, uint64_t))v19[2];
            v39(v65, v26, v18);
            v39(v38, v34, v18);
            v40 = (char *)v69;
            v41 = (char *)(v69 + *(int *)(v36 + 48));
            v39((char *)v69, v37, v18);
            v39(v41, v38, v18);
            v42 = v67;
            v29((char *)v67, v40, v18);
            v43 = (void (*)(char *, uint64_t))v19[1];
            v43(v41, v18);
            v44 = &v40[*(int *)(v36 + 48)];
            v29(v40, v37, v18);
            v29(v44, v38, v18);
            v29((char *)(v42 + *(int *)(v66 + 36)), v44, v18);
            v43(v40, v18);
            v45 = v70;
            sub_2402A0C78(v42, v70);
            v46 = v75;
            v69 = (int)objc_msgSend(v75, sel_tasksCount);
            v68 = (int)objc_msgSend(v46, sel_tasksRun);
            v67 = (int)objc_msgSend(v46, sel_tasksDeferred);
            v47 = (int)objc_msgSend(v46, sel_tasksFailed);
            v48 = (int)objc_msgSend(v46, sel_tasksCompleted);
            v49 = v71;
            sub_2402BD4A4();
            v50 = sub_2402BD498();
            v52 = v51;

            (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v64);
            v43(v73, v18);
            v43(v26, v18);
            v53 = v74;
            *v74 = v50;
            v53[1] = v52;
            v54 = (int *)type metadata accessor for DeviceTelemetry(0);
            sub_2402A0C78(v45, (uint64_t)v53 + v54[5]);
            *(uint64_t *)((char *)v53 + v54[6]) = v69;
            *(uint64_t *)((char *)v53 + v54[7]) = v68;
            *(uint64_t *)((char *)v53 + v54[8]) = v67;
            *(uint64_t *)((char *)v53 + v54[9]) = v47;
            *(uint64_t *)((char *)v53 + v54[10]) = v48;
            return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v54 - 1) + 56))(v53, 0, 1, v54);
          }
          else
          {
            __break(1u);
          }
          return result;
        }
      }
      else
      {
        v30(v15, 1, 1, v18);
      }
      ((void (*)(char *, uint64_t))v19[1])(v26, v18);
    }
    a2 = v74;
    a1 = v75;
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7])(v17, 1, 1, v18);
    v15 = v17;
  }
  sub_24023D378((uint64_t)v15, &qword_2543521F0);
  if (qword_2543528A0 != -1)
    swift_once();
  v55 = sub_2402BD4E0();
  __swift_project_value_buffer(v55, (uint64_t)qword_2543529A0);
  v56 = a1;
  v57 = sub_2402BD4C8();
  v58 = sub_2402BD960();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    v60 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v59 = 138412290;
    v76 = v56;
    v61 = v56;
    sub_2402BD9FC();
    *v60 = v56;

    _os_log_impl(&dword_24022D000, v57, v58, "Invalid event: %@", v59, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
    swift_arrayDestroy();
    MEMORY[0x242682188](v60, -1, -1);
    MEMORY[0x242682188](v59, -1, -1);
  }
  else
  {

    v57 = v56;
  }

  v62 = type metadata accessor for DeviceTelemetry(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(a2, 1, 1, v62);
}

void sub_2402A01CC(void *a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t, uint64_t))
{
  id v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  id v23;

  v6 = objc_msgSend(a1, sel_eventBody);
  if (v6)
  {
    v7 = v6;
    v8 = (uint64_t *)(a2 + 16);
    objc_msgSend(a1, sel_timestamp);
    v10 = v9;
    swift_beginAccess();
    v11 = *v8;
    v12 = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v8 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = a3(0, *(_QWORD *)(v11 + 16) + 1, 1, v11);
      *v8 = v11;
    }
    v15 = *(_QWORD *)(v11 + 16);
    v14 = *(_QWORD *)(v11 + 24);
    if (v15 >= v14 >> 1)
    {
      v11 = a3(v14 > 1, v15 + 1, 1, v11);
      *v8 = v11;
    }
    *(_QWORD *)(v11 + 16) = v15 + 1;
    v16 = v11 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v10;
    *(_QWORD *)(v16 + 40) = v12;
    swift_endAccess();

  }
  else
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v17 = sub_2402BD4E0();
    __swift_project_value_buffer(v17, (uint64_t)qword_2543529A0);
    v23 = a1;
    v18 = sub_2402BD4C8();
    v19 = sub_2402BD960();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v22 = v23;
      sub_2402BD9FC();
      *v21 = v23;

      _os_log_impl(&dword_24022D000, v18, v19, "Invalid event: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v21, -1, -1);
      MEMORY[0x242682188](v20, -1, -1);

    }
    else
    {

    }
  }
}

id *LedgerClient.deinit()
{
  id *v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t LedgerClient.__deallocating_deinit()
{
  id *v0;

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t LedgerClient.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2402A0500()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_2402A050C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  void (*v22)(char *, char *, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2402BD48C();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v43 - v12;
  if (!a1)
    goto LABEL_16;
  v14 = a1;
  v15 = objc_msgSend(v14, sel_channelID);
  if (!v15)
  {

    goto LABEL_16;
  }
  v16 = v15;
  v17 = sub_2402BD648();
  v19 = v18;

  v20 = objc_msgSend(v14, sel_creationDate);
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_11;
  }
  v21 = v20;
  v46 = v17;
  sub_2402BD45C();

  v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_11:
    swift_bridgeObjectRelease();

    sub_24023D378((uint64_t)v6, &qword_2543521F0);
    goto LABEL_16;
  }
  v22(v13, v6, v7);
  v23 = objc_msgSend(v14, sel_pushPriority);
  if (v23)
  {
    v24 = v23;
    v45 = v19;
    v25 = sub_2402BD648();
    v27 = v26;

    v28 = objc_msgSend(v14, sel_pushType);
    if (v28)
    {
      v29 = v28;
      v44 = sub_2402BD648();
      v31 = v30;

      v32 = objc_msgSend(v14, sel_topic);
      if (v32)
      {
        v33 = v32;
        v34 = sub_2402BD648();
        v43 = v25;
        v35 = v34;
        v36 = v31;
        v38 = v37;

        v39 = type metadata accessor for PushMetadata(0);
        v22((char *)a2 + *(int *)(v39 + 32), v13, v7);
        *a2 = v35;
        a2[1] = v38;
        v40 = v45;
        a2[2] = v46;
        a2[3] = v40;
        a2[4] = v44;
        a2[5] = v36;
        a2[6] = v43;
        a2[7] = v27;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a2, 0, 1, v39);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
LABEL_16:
  v42 = type metadata accessor for PushMetadata(0);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a2, 1, 1, v42);
}

void sub_2402A0844(uint64_t a1, uint64_t (*a2)(double))
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id *i;
  double v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = 0;
    v5 = a1 + 40;
    v6 = -(uint64_t)v2;
    v7 = MEMORY[0x24BEE4AF8];
    v16 = a1 + 40;
    v17 = *(_QWORD *)(a1 + 16);
    do
    {
      if (v4 <= v2)
        v8 = v2;
      else
        v8 = v4;
      v9 = -(uint64_t)v8;
      for (i = (id *)(v5 + 16 * v4++); ; i += 2)
      {
        if (v9 + v4 == 1)
        {
          __break(1u);
          return;
        }
        v11 = *((double *)i - 1);
        v12 = *i;
        if ((a2(v11) & 1) != 0)
          break;

        ++v4;
        if (v6 + v4 == 1)
          return;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_24029BE30(0, *(_QWORD *)(v7 + 16) + 1, 1);
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
        sub_24029BE30(v13 > 1, v14 + 1, 1);
      *(_QWORD *)(v7 + 16) = v14 + 1;
      v15 = v7 + 16 * v14;
      *(double *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
      v5 = v16;
      v2 = v17;
    }
    while (v6 + v4);
  }
}

uint64_t sub_2402A09A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t aBlock;
  uint64_t v30;
  void (*v31)(uint64_t, void *);
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  uint64_t v34;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&aBlock - v17;
  sub_24025BCB0();
  sub_2402A0CC0(a2, (uint64_t)v18);
  sub_2402A0CC0(a3, (uint64_t)v16);
  v19 = sub_24029D7C0((uint64_t)v18, (uint64_t)v16, 0, 0, 0);
  v20 = (void *)sub_2402BD63C();
  v21 = objc_msgSend(a1, sel_publisherWithUseCase_options_, v20, v19);

  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = MEMORY[0x24BEE4AF8];
  v33 = nullsub_1;
  v34 = 0;
  v23 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v30 = 1107296256;
  v31 = sub_24029D8D0;
  v32 = a5;
  v24 = _Block_copy(&aBlock);
  v33 = a6;
  v34 = v22;
  aBlock = v23;
  v30 = 1107296256;
  v31 = sub_24029D8D0;
  v32 = a7;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v26 = objc_msgSend(v21, sel_sinkWithCompletion_receiveInput_, v24, v25);

  _Block_release(v25);
  _Block_release(v24);

  swift_beginAccess();
  v27 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v27;
}

uint64_t sub_2402A0BF4(void *a1)
{
  uint64_t v1;

  return sub_24029EEC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for LedgerClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for LedgerClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LedgerClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of LedgerClient.getTaskStatusEvents(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of LedgerClient.getTaskErrorEvents(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of LedgerClient.sendCustomTaskEvent<A>(state:context:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of LedgerClient.getCustomTaskEvents(startDate:endDate:taskName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of LedgerClient.getTaskTelemetry(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of LedgerClient.getDeviceTelemetry(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_2402A0C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2402A0CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2543521F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2402A0D08()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

void sub_2402A0D44(void *a1)
{
  uint64_t v1;

  sub_2402A01CC(a1, v1, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_2402587A0);
}

void sub_2402A0D64(void *a1)
{
  uint64_t v1;

  sub_2402A01CC(a1, v1, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_24025878C);
}

void sub_2402A0D84(void *a1)
{
  uint64_t v1;

  sub_2402A01CC(a1, v1, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_240258778);
}

void sub_2402A0DA4(void *a1)
{
  uint64_t v1;

  sub_2402A01CC(a1, v1, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_240258750);
}

void sub_2402A0DC4(void *a1)
{
  uint64_t v1;

  sub_2402A01CC(a1, v1, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_240258610);
}

uint64_t DeviceTelemetry.init(contextId:bucketRange:tasksCount:tasksRun:tasksDeferred:tasksFailed:tasksCompleted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v16;
  uint64_t result;

  *a9 = a1;
  a9[1] = a2;
  v16 = (int *)type metadata accessor for DeviceTelemetry(0);
  result = sub_240238F2C(a3, (uint64_t)a9 + v16[5], (uint64_t *)&unk_256FE0BD0);
  *(_QWORD *)((char *)a9 + v16[6]) = a4;
  *(_QWORD *)((char *)a9 + v16[7]) = a5;
  *(_QWORD *)((char *)a9 + v16[8]) = a6;
  *(_QWORD *)((char *)a9 + v16[9]) = a7;
  *(_QWORD *)((char *)a9 + v16[10]) = a8;
  return result;
}

uint64_t type metadata accessor for DeviceTelemetry(uint64_t a1)
{
  return sub_24023DB98(a1, (uint64_t *)&unk_256FE0ED0);
}

void __swiftcall PushTelemetry.init(contextId:taskName:countPushParameterError:countPushProcessed:countPushReceived:countPushRegistrationError:pushErrorLatency:pushFirstRunLatency:pushReceivedLatency:)(LighthouseBackground::PushTelemetry *__return_ptr retstr, Swift::String contextId, Swift::String taskName, Swift::Int countPushParameterError, Swift::Int countPushProcessed, Swift::Int countPushReceived, Swift::Int countPushRegistrationError, Swift::Double pushErrorLatency, Swift::Double pushFirstRunLatency, Swift::Double pushReceivedLatency)
{
  retstr->contextId = contextId;
  retstr->taskName = taskName;
  retstr->countPushParameterError = countPushParameterError;
  retstr->countPushProcessed = countPushProcessed;
  retstr->countPushReceived = countPushReceived;
  retstr->countPushRegistrationError = countPushRegistrationError;
  retstr->pushErrorLatency = pushErrorLatency;
  retstr->pushFirstRunLatency = pushFirstRunLatency;
  retstr->pushReceivedLatency = pushReceivedLatency;
}

uint64_t TaskTelemetry.init(contextId:bucketRange:bucketInterval:taskName:taskState:latestEventTimestamp:countCompleted:countFailed:countDeferred:dailyExecutionLatency:crossExecutionDelay:executionCompletionTime:executionFailureTime:executionDeferralTime:deferralToCompletionTime:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t result;
  char v37;

  v37 = *a4;
  *a9 = a1;
  a9[1] = a2;
  v31 = (int *)type metadata accessor for TaskTelemetry(0);
  sub_240238F2C(a3, (uint64_t)a9 + v31[5], (uint64_t *)&unk_256FE0BD0);
  v32 = (_QWORD *)((char *)a9 + v31[7]);
  *v32 = a5;
  v32[1] = a6;
  v33 = (_QWORD *)((char *)a9 + v31[8]);
  *v33 = a7;
  v33[1] = a8;
  v34 = (char *)a9 + v31[9];
  v35 = sub_2402BD48C();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v34, a16, v35);
  *(_QWORD *)((char *)a9 + v31[10]) = a17;
  *(_QWORD *)((char *)a9 + v31[11]) = a18;
  *(_QWORD *)((char *)a9 + v31[12]) = a19;
  *(double *)((char *)a9 + v31[13]) = a10;
  *(double *)((char *)a9 + v31[14]) = a11;
  *(double *)((char *)a9 + v31[15]) = a12;
  *(double *)((char *)a9 + v31[16]) = a13;
  *(double *)((char *)a9 + v31[17]) = a14;
  *((_BYTE *)a9 + v31[6]) = v37;
  *(double *)((char *)a9 + v31[18]) = a15;
  return result;
}

uint64_t type metadata accessor for TaskTelemetry(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FE0F80);
}

uint64_t TaskStatusEvent.init(contextId:date:taskName:taskStatus:pushMetadata:pullMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  char v15;
  int *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;

  v15 = *a6;
  *a9 = a1;
  a9[1] = a2;
  v16 = (int *)type metadata accessor for TaskStatusEvent(0);
  v17 = (char *)a9 + v16[5];
  v18 = sub_2402BD48C();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a3, v18);
  v19 = (_QWORD *)((char *)a9 + v16[6]);
  *v19 = a4;
  v19[1] = a5;
  *((_BYTE *)a9 + v16[7]) = v15;
  sub_240238F2C(a7, (uint64_t)a9 + v16[8], &qword_256FDE5C8);
  return sub_240238F2C(a8, (uint64_t)a9 + v16[9], &qword_256FDE5D0);
}

uint64_t type metadata accessor for TaskStatusEvent(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FE0D40);
}

uint64_t TaskCustomEvent.init(contextId:date:taskName:eventName:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  return sub_2402A118C(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for TaskCustomEvent, a8);
}

uint64_t type metadata accessor for TaskCustomEvent(uint64_t a1)
{
  return sub_24023DB98(a1, qword_256FE0E38);
}

uint64_t TaskErrorEvent.init(contextId:date:taskName:errorMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  return sub_2402A118C(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for TaskErrorEvent, a8);
}

uint64_t sub_2402A118C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(_QWORD)@<X7>, _QWORD *a9@<X8>)
{
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;

  *a9 = a1;
  a9[1] = a2;
  v15 = (int *)a8(0);
  v16 = (char *)a9 + v15[5];
  v17 = sub_2402BD48C();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  v19 = (_QWORD *)((char *)a9 + v15[6]);
  *v19 = a4;
  v19[1] = a5;
  v20 = (_QWORD *)((char *)a9 + v15[7]);
  *v20 = a6;
  v20[1] = a7;
  return result;
}

uint64_t type metadata accessor for TaskErrorEvent(uint64_t a1)
{
  return sub_24023DB98(a1, (uint64_t *)&unk_254352770);
}

LighthouseBackground::CoreAnalyticsEvents_optional __swiftcall CoreAnalyticsEvents.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::CoreAnalyticsEvents_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 7;
  if (v3 < 7)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static CoreAnalyticsEvents.allCases.getter()
{
  return &unk_25108AF38;
}

uint64_t CoreAnalyticsEvents.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_2402A12D4 + 4 * byte_2402C68F0[*v0]))(0xD000000000000030, 0x80000002402C8ED0);
}

unint64_t sub_2402A12D4()
{
  return 0xD00000000000002ELL;
}

uint64_t sub_2402A130C@<X0>(uint64_t a1@<X8>)
{
  return a1 - 2;
}

uint64_t sub_2402A131C@<X0>(uint64_t a1@<X8>)
{
  return a1 - 9;
}

void sub_2402A132C()
{
  JUMPOUT(0x2402A1338);
}

void sub_2402A1344(char *a1)
{
  sub_24023577C(*a1);
}

void sub_2402A1350()
{
  char *v0;

  sub_2402AA980(0, *v0);
}

void sub_2402A135C(uint64_t a1)
{
  char *v1;

  sub_24028A0F0(a1, *v1);
}

void sub_2402A1364(uint64_t a1)
{
  char *v1;

  sub_2402AA980(a1, *v1);
}

LighthouseBackground::CoreAnalyticsEvents_optional sub_2402A136C(Swift::String *a1)
{
  return CoreAnalyticsEvents.init(rawValue:)(*a1);
}

uint64_t sub_2402A1378@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CoreAnalyticsEvents.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_2402A139C(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AF38;
}

uint64_t TaskStatusEvent.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2402A1D78(type metadata accessor for TaskStatusEvent, a1);
}

uint64_t TaskStatusEvent.taskName.getter()
{
  return sub_2402A1DD0(type metadata accessor for TaskStatusEvent);
}

uint64_t TaskStatusEvent.taskStatus.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TaskStatusEvent(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t TaskStatusEvent.pushMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TaskStatusEvent(0);
  return sub_2402391FC(v1 + *(int *)(v3 + 32), a1, &qword_256FDE5C8);
}

uint64_t TaskStatusEvent.pullMetadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TaskStatusEvent(0);
  return sub_2402391FC(v1 + *(int *)(v3 + 36), a1, &qword_256FDE5D0);
}

uint64_t sub_2402A146C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A14A0 + 4 * byte_2402C68F7[*v0]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A14A0()
{
  return 1702125924;
}

uint64_t sub_2402A14B0()
{
  return 0x656D614E6B736174;
}

uint64_t sub_2402A14C8()
{
  return 0x746174536B736174;
}

uint64_t sub_2402A14E4()
{
  return 0x6174654D68737570;
}

uint64_t sub_2402A1510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A8A2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402A1534()
{
  sub_2402A1810();
  return sub_2402BDE88();
}

uint64_t sub_2402A155C()
{
  sub_2402A1810();
  return sub_2402BDE94();
}

uint64_t TaskStatusEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402A1810();
  sub_2402BDE70();
  v11[15] = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v9 = type metadata accessor for TaskStatusEvent(0);
    v11[14] = 1;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDD2C();
    v11[13] = 2;
    sub_2402BDCFC();
    v11[12] = *(_BYTE *)(v3 + *(int *)(v9 + 28));
    v11[11] = 3;
    sub_24023DC98();
    sub_2402BDD2C();
    v11[10] = 4;
    type metadata accessor for PushMetadata(0);
    sub_240232E34(&qword_256FDE5E8, type metadata accessor for PushMetadata, (uint64_t)&protocol conformance descriptor for PushMetadata);
    sub_2402BDCD8();
    v11[9] = 5;
    type metadata accessor for PullMetadata(0);
    sub_240232E34(&qword_256FDE5F0, type metadata accessor for PullMetadata, (uint64_t)&protocol conformance descriptor for PullMetadata);
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2402A1810()
{
  unint64_t result;

  result = qword_256FE0C28;
  if (!qword_256FE0C28)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7464, &type metadata for TaskStatusEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0C28);
  }
  return result;
}

uint64_t TaskStatusEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
  MEMORY[0x24BDAC7A8](v5);
  v31 = (uint64_t)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_2402BD48C();
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C30);
  v10 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for TaskStatusEvent(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_2402A1810();
  v17 = v12;
  v18 = v36;
  sub_2402BDE64();
  if (v18)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v36 = v10;
  v19 = v32;
  v20 = v33;
  v43 = 0;
  v21 = v34;
  *v15 = sub_2402BDC24();
  v15[1] = v22;
  v42 = 1;
  sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_2402BDC54();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))((char *)v15 + v13[5], v9, v20);
  v41 = 2;
  v23 = sub_2402BDC24();
  v24 = (uint64_t *)((char *)v15 + v13[6]);
  *v24 = v23;
  v24[1] = v25;
  v39 = 3;
  sub_24023DD20();
  v28[1] = 0;
  sub_2402BDC54();
  *((_BYTE *)v15 + v13[7]) = v40;
  type metadata accessor for PushMetadata(0);
  v38 = 4;
  sub_240232E34(&qword_256FDE600, type metadata accessor for PushMetadata, (uint64_t)&protocol conformance descriptor for PushMetadata);
  sub_2402BDC00();
  sub_240238F2C(v31, (uint64_t)v15 + v13[8], &qword_256FDE5C8);
  type metadata accessor for PullMetadata(0);
  v37 = 5;
  sub_240232E34(&qword_256FDE608, type metadata accessor for PullMetadata, (uint64_t)&protocol conformance descriptor for PullMetadata);
  v26 = (uint64_t)v30;
  sub_2402BDC00();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v21);
  sub_240238F2C(v26, (uint64_t)v15 + v13[9], &qword_256FDE5D0);
  sub_240238BF0((uint64_t)v15, v29, type metadata accessor for TaskStatusEvent);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  return sub_240238C34((uint64_t)v15, type metadata accessor for TaskStatusEvent);
}

uint64_t sub_2402A1D44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskStatusEvent.init(from:)(a1, a2);
}

uint64_t sub_2402A1D58(_QWORD *a1)
{
  return TaskStatusEvent.encode(to:)(a1);
}

uint64_t TaskErrorEvent.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2402A1D78(type metadata accessor for TaskErrorEvent, a1);
}

uint64_t sub_2402A1D78@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t TaskErrorEvent.taskName.getter()
{
  return sub_2402A1DD0(type metadata accessor for TaskErrorEvent);
}

uint64_t sub_2402A1DD0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t TaskErrorEvent.errorMessage.getter()
{
  return sub_2402A2004(type metadata accessor for TaskErrorEvent);
}

uint64_t sub_2402A1E1C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A1E50 + 4 * byte_2402C68FD[*v0]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A1E50()
{
  return 1702125924;
}

uint64_t sub_2402A1E60()
{
  return 0x656D614E6B736174;
}

uint64_t sub_2402A1E78()
{
  return 0x73654D726F727265;
}

uint64_t sub_2402A1E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A8CE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402A1EBC()
{
  sub_2402A1F40();
  return sub_2402BDE88();
}

uint64_t sub_2402A1EE4()
{
  sub_2402A1F40();
  return sub_2402BDE94();
}

uint64_t TaskErrorEvent.encode(to:)(_QWORD *a1)
{
  return sub_2402A2160(a1, &qword_256FE0C38, (void (*)(void))sub_2402A1F40, (uint64_t)&type metadata for TaskErrorEvent.CodingKeys, (uint64_t)type metadata accessor for TaskErrorEvent);
}

unint64_t sub_2402A1F40()
{
  unint64_t result;

  result = qword_256FE0C40;
  if (!qword_256FE0C40)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7414, &type metadata for TaskErrorEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0C40);
  }
  return result;
}

uint64_t TaskErrorEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402A239C(a1, &qword_256FE0C48, type metadata accessor for TaskErrorEvent, (void (*)(void))sub_2402A1F40, a2);
}

uint64_t sub_2402A1FB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskErrorEvent.init(from:)(a1, a2);
}

uint64_t sub_2402A1FCC(_QWORD *a1)
{
  return TaskErrorEvent.encode(to:)(a1);
}

uint64_t TaskCustomEvent.date.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2402A1D78(type metadata accessor for TaskCustomEvent, a1);
}

uint64_t TaskCustomEvent.taskName.getter()
{
  return sub_2402A1DD0(type metadata accessor for TaskCustomEvent);
}

uint64_t TaskCustomEvent.eventName.getter()
{
  return sub_2402A2004(type metadata accessor for TaskCustomEvent);
}

uint64_t sub_2402A2004(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_2402A2044()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A2078 + 4 * byte_2402C6901[*v0]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A2078()
{
  return 1702125924;
}

uint64_t sub_2402A2088()
{
  return 0x656D614E6B736174;
}

uint64_t sub_2402A20A0()
{
  return 0x6D614E746E657665;
}

uint64_t sub_2402A20B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A8EAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402A20DC()
{
  sub_2402A2324();
  return sub_2402BDE88();
}

uint64_t sub_2402A2104()
{
  sub_2402A2324();
  return sub_2402BDE94();
}

uint64_t TaskCustomEvent.encode(to:)(_QWORD *a1)
{
  return sub_2402A2160(a1, &qword_256FE0C50, (void (*)(void))sub_2402A2324, (uint64_t)&type metadata for TaskCustomEvent.CodingKeys, (uint64_t)type metadata accessor for TaskCustomEvent);
}

uint64_t sub_2402A2160(_QWORD *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  char v15;
  char v16;
  char v17;

  v13[0] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_2402BDE70();
  v17 = 0;
  v11 = v13[1];
  sub_2402BDCFC();
  if (!v11)
  {
    ((void (*)(_QWORD))v13[0])(0);
    v16 = 1;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDD2C();
    v15 = 2;
    sub_2402BDCFC();
    v14 = 3;
    sub_2402BDCFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_2402A2324()
{
  unint64_t result;

  result = qword_256FE0C58;
  if (!qword_256FE0C58)
  {
    result = MEMORY[0x2426820F8](&unk_2402C73C4, &type metadata for TaskCustomEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0C58);
  }
  return result;
}

uint64_t TaskCustomEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2402A239C(a1, &qword_256FE0C60, type metadata accessor for TaskCustomEvent, (void (*)(void))sub_2402A2324, a2);
}

uint64_t sub_2402A239C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  _QWORD *v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v38 = a4;
  v32 = a5;
  v8 = sub_2402BD48C();
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v34 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v12 = (void (*)(void))((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = a3;
  v13 = (int *)a3(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v32 - v14);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v38();
  v38 = v12;
  v16 = (uint64_t)v39;
  sub_2402BDE64();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = v10;
  v39 = a1;
  v18 = v34;
  v19 = v35;
  v20 = v36;
  v43 = 0;
  v21 = (uint64_t)v15;
  *v15 = sub_2402BDC24();
  v15[1] = v22;
  v42 = 1;
  sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  sub_2402BDC54();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))((char *)v15 + v13[5], v18, v20);
  v41 = 2;
  v23 = sub_2402BDC24();
  v24 = (uint64_t *)((char *)v15 + v13[6]);
  *v24 = v23;
  v24[1] = v25;
  v40 = 3;
  v26 = sub_2402BDC24();
  v28 = v27;
  (*(void (**)(void (*)(void), uint64_t))(v17 + 8))(v38, v37);
  v29 = (uint64_t *)(v21 + v13[7]);
  *v29 = v26;
  v29[1] = v28;
  v30 = v33;
  sub_240238BF0(v21, v32, v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return sub_240238C34(v21, v30);
}

uint64_t sub_2402A26C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskCustomEvent.init(from:)(a1, a2);
}

uint64_t sub_2402A26D8(_QWORD *a1)
{
  return TaskCustomEvent.encode(to:)(a1);
}

uint64_t DeviceTelemetry.bucketRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2402A3948(type metadata accessor for DeviceTelemetry, a1);
}

uint64_t DeviceTelemetry.tasksCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceTelemetry(0) + 24));
}

uint64_t DeviceTelemetry.tasksRun.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceTelemetry(0) + 28));
}

uint64_t DeviceTelemetry.tasksDeferred.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceTelemetry(0) + 32));
}

uint64_t DeviceTelemetry.tasksFailed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceTelemetry(0) + 36));
}

uint64_t DeviceTelemetry.tasksCompleted.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for DeviceTelemetry(0) + 40));
}

uint64_t sub_2402A2798()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A27CC + 4 * byte_2402C6905[*v0]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A27CC()
{
  return 0x615274656B637562;
}

uint64_t sub_2402A27EC()
{
  return 0x756F43736B736174;
}

uint64_t sub_2402A2808()
{
  return 0x6E7552736B736174;
}

uint64_t sub_2402A2820()
{
  return 0x666544736B736174;
}

uint64_t sub_2402A2844()
{
  return 0x696146736B736174;
}

uint64_t sub_2402A2864()
{
  return 0x6D6F43736B736174;
}

uint64_t sub_2402A2888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A9064(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402A28AC()
{
  sub_2402A2B3C();
  return sub_2402BDE88();
}

uint64_t sub_2402A28D4()
{
  sub_2402A2B3C();
  return sub_2402BDE94();
}

uint64_t DeviceTelemetry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C68);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402A2B3C();
  sub_2402BDE70();
  v8[15] = 0;
  sub_2402BDCFC();
  if (!v1)
  {
    type metadata accessor for DeviceTelemetry(0);
    v8[14] = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    sub_2402A2F1C(&qword_256FE0C78, (unint64_t *)&unk_254352688, MEMORY[0x24BDCE920], MEMORY[0x24BEE1B98]);
    sub_2402BDD2C();
    v8[13] = 2;
    sub_2402BDD20();
    v8[12] = 3;
    sub_2402BDD20();
    v8[11] = 4;
    sub_2402BDD20();
    v8[10] = 5;
    sub_2402BDD20();
    v8[9] = 6;
    sub_2402BDD20();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2402A2B3C()
{
  unint64_t result;

  result = qword_256FE0C70;
  if (!qword_256FE0C70)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7374, &type metadata for DeviceTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0C70);
  }
  return result;
}

uint64_t DeviceTelemetry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v20 = a2;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  MEMORY[0x24BDAC7A8](v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C80);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for DeviceTelemetry(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v11);
  sub_2402A2B3C();
  v12 = v24;
  sub_2402BDE64();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v13 = v22;
  v24 = v5;
  v31 = 0;
  *v10 = sub_2402BDC24();
  v10[1] = v14;
  v30 = 1;
  sub_2402A2F1C(&qword_256FE0C88, &qword_254352248, MEMORY[0x24BDCE960], MEMORY[0x24BEE1BC8]);
  sub_2402BDC54();
  sub_240238F2C((uint64_t)v4, (uint64_t)v10 + v8[5], (uint64_t *)&unk_256FE0BD0);
  v29 = 2;
  *(uint64_t *)((char *)v10 + v8[6]) = sub_2402BDC48();
  v28 = 3;
  *(uint64_t *)((char *)v10 + v8[7]) = sub_2402BDC48();
  v27 = 4;
  v15 = sub_2402BDC48();
  v16 = v24;
  *(uint64_t *)((char *)v10 + v8[8]) = v15;
  v26 = 5;
  *(uint64_t *)((char *)v10 + v8[9]) = sub_2402BDC48();
  v25 = 6;
  v17 = sub_2402BDC48();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v13);
  *(uint64_t *)((char *)v10 + v8[10]) = v17;
  sub_240238BF0((uint64_t)v10, v20, type metadata accessor for DeviceTelemetry);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_240238C34((uint64_t)v10, type metadata accessor for DeviceTelemetry);
}

uint64_t sub_2402A2F1C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_256FE0BD0);
    v10 = sub_240232E34(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], a3);
    result = MEMORY[0x2426820F8](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2402A2FA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DeviceTelemetry.init(from:)(a1, a2);
}

uint64_t sub_2402A2FB4(_QWORD *a1)
{
  return DeviceTelemetry.encode(to:)(a1);
}

uint64_t PushTelemetry.contextId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushTelemetry.taskName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PushTelemetry.countPushParameterError.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PushTelemetry.countPushParameterError.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*PushTelemetry.countPushParameterError.modify())()
{
  return nullsub_1;
}

uint64_t PushTelemetry.countPushProcessed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t PushTelemetry.countPushProcessed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*PushTelemetry.countPushProcessed.modify())()
{
  return nullsub_1;
}

uint64_t PushTelemetry.countPushReceived.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t PushTelemetry.countPushReceived.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*PushTelemetry.countPushReceived.modify())()
{
  return nullsub_1;
}

uint64_t PushTelemetry.countPushRegistrationError.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t PushTelemetry.countPushRegistrationError.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*PushTelemetry.countPushRegistrationError.modify())()
{
  return nullsub_1;
}

double PushTelemetry.pushErrorLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

void PushTelemetry.pushErrorLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
}

uint64_t (*PushTelemetry.pushErrorLatency.modify())()
{
  return nullsub_1;
}

double PushTelemetry.pushFirstRunLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

void PushTelemetry.pushFirstRunLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 72) = a1;
}

uint64_t (*PushTelemetry.pushFirstRunLatency.modify())()
{
  return nullsub_1;
}

double PushTelemetry.pushReceivedLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 80);
}

void PushTelemetry.pushReceivedLatency.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 80) = a1;
}

uint64_t (*PushTelemetry.pushReceivedLatency.modify())()
{
  return nullsub_1;
}

uint64_t sub_2402A3100(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A3138 + 4 * byte_2402C690C[a1]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A3138()
{
  return 0x656D614E6B736174;
}

unint64_t sub_2402A3150()
{
  return 0xD000000000000017;
}

unint64_t sub_2402A31D0()
{
  return 0xD000000000000013;
}

uint64_t sub_2402A31F8()
{
  unsigned __int8 *v0;

  return sub_2402A3100(*v0);
}

uint64_t sub_2402A3200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A93D8(a1, a2);
  *a3 = result;
  return result;
}

void sub_2402A3224(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_2402A3230()
{
  sub_2402A3504();
  return sub_2402BDE88();
}

uint64_t sub_2402A3258()
{
  sub_2402A3504();
  return sub_2402BDE94();
}

uint64_t PushTelemetry.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD v14[6];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0C90);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = v1[2];
  v14[4] = v1[3];
  v14[5] = v7;
  v8 = v1[4];
  v14[2] = v1[5];
  v14[3] = v8;
  v9 = v1[6];
  v14[0] = v1[7];
  v14[1] = v9;
  v10 = a1[3];
  v11 = a1;
  v12 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v11, v10);
  sub_2402A3504();
  sub_2402BDE70();
  v23 = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v22 = 1;
    sub_2402BDCFC();
    v21 = 2;
    sub_2402BDD20();
    v20 = 3;
    sub_2402BDD20();
    v19 = 4;
    sub_2402BDD20();
    v18 = 5;
    sub_2402BDD20();
    v17 = 6;
    sub_2402BDD14();
    v16 = 7;
    sub_2402BDD14();
    v15 = 8;
    sub_2402BDD14();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
}

unint64_t sub_2402A3504()
{
  unint64_t result;

  result = qword_256FE0C98;
  if (!qword_256FE0C98)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7324, &type metadata for PushTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0C98);
  }
  return result;
}

uint64_t PushTelemetry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0CA0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402A3504();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v40 = 0;
  v9 = sub_2402BDC24();
  v11 = v10;
  v31 = v9;
  v39 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2402BDC24();
  v14 = v13;
  v29 = v12;
  v30 = v11;
  v38 = 2;
  swift_bridgeObjectRetain();
  v28 = sub_2402BDC48();
  v37 = 3;
  v27 = sub_2402BDC48();
  v36 = 4;
  v26 = sub_2402BDC48();
  v35 = 5;
  v16 = sub_2402BDC48();
  v34 = 6;
  sub_2402BDC3C();
  v18 = v17;
  v33 = 7;
  sub_2402BDC3C();
  v25 = v19;
  v32 = 8;
  sub_2402BDC3C();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v30;
  *a2 = v31;
  a2[1] = v22;
  a2[2] = v29;
  a2[3] = v14;
  v23 = v27;
  a2[4] = v28;
  a2[5] = v23;
  a2[6] = v26;
  a2[7] = v16;
  v24 = v25;
  a2[8] = v18;
  a2[9] = v24;
  a2[10] = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2402A38E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PushTelemetry.init(from:)(a1, a2);
}

uint64_t sub_2402A38FC(_QWORD *a1)
{
  return PushTelemetry.encode(to:)(a1);
}

uint64_t TaskTelemetry.contextId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskTelemetry.bucketRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2402A3948(type metadata accessor for TaskTelemetry, a1);
}

uint64_t sub_2402A3948@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a1(0);
  return sub_2402391FC(v2 + *(int *)(v4 + 20), a2, (uint64_t *)&unk_256FE0BD0);
}

uint64_t TaskTelemetry.bucketInterval.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TaskTelemetry(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t TaskTelemetry.taskName.getter()
{
  return sub_2402A2004(type metadata accessor for TaskTelemetry);
}

uint64_t TaskTelemetry.taskState.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskTelemetry.latestEventTimestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TaskTelemetry(0) + 36);
  v4 = sub_2402BD48C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TaskTelemetry.countCompleted.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 40));
}

uint64_t TaskTelemetry.countFailed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 44));
}

uint64_t TaskTelemetry.countDeferred.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 48));
}

double TaskTelemetry.dailyExecutionLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 52));
}

double TaskTelemetry.crossExecutionDelay.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 56));
}

double TaskTelemetry.executionCompletionTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 60));
}

double TaskTelemetry.executionFailureTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 64));
}

double TaskTelemetry.executionDeferralTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 68));
}

double TaskTelemetry.deferralToCompletionTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TaskTelemetry(0) + 72));
}

uint64_t sub_2402A3B68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402A3BA0 + 4 * byte_2402C6915[a1]))(0x49747865746E6F63, 0xE900000000000064);
}

uint64_t sub_2402A3BA0()
{
  return 0x615274656B637562;
}

uint64_t sub_2402A3BC0()
{
  return 0x6E4974656B637562;
}

uint64_t sub_2402A3BE4()
{
  return 0x656D614E6B736174;
}

uint64_t sub_2402A3BFC()
{
  return 0x746174536B736174;
}

unint64_t sub_2402A3C14()
{
  return 0xD000000000000014;
}

unint64_t sub_2402A3CEC()
{
  return 0xD000000000000015;
}

void sub_2402A3D04()
{
  JUMPOUT(0x2402A3D18);
}

uint64_t sub_2402A3D24()
{
  unsigned __int8 *v0;

  return sub_2402A3B68(*v0);
}

uint64_t sub_2402A3D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402A9744(a1, a2);
  *a3 = result;
  return result;
}

void sub_2402A3D50(_BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t sub_2402A3D5C()
{
  sub_2402A41A0();
  return sub_2402BDE88();
}

uint64_t sub_2402A3D84()
{
  sub_2402A41A0();
  return sub_2402BDE94();
}

uint64_t TaskTelemetry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[15];
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0CA8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402A41A0();
  sub_2402BDE70();
  v12 = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v9 = type metadata accessor for TaskTelemetry(0);
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    sub_2402A2F1C(&qword_256FE0C78, (unint64_t *)&unk_254352688, MEMORY[0x24BDCE920], MEMORY[0x24BEE1B98]);
    sub_2402BDD2C();
    v12 = *(_BYTE *)(v3 + *(int *)(v9 + 24));
    v11[14] = 2;
    sub_2402A41E4();
    sub_2402BDD2C();
    v12 = 3;
    sub_2402BDCFC();
    v12 = 4;
    sub_2402BDCFC();
    v12 = 5;
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&unk_254352688, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_2402BDD2C();
    v12 = 6;
    sub_2402BDD20();
    v12 = 7;
    sub_2402BDD20();
    v12 = 8;
    sub_2402BDD20();
    v12 = 9;
    sub_2402BDD14();
    v12 = 10;
    sub_2402BDD14();
    v12 = 11;
    sub_2402BDD14();
    v12 = 12;
    sub_2402BDD14();
    v12 = 13;
    sub_2402BDD14();
    v12 = 14;
    sub_2402BDD14();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2402A41A0()
{
  unint64_t result;

  result = qword_256FE0CB0;
  if (!qword_256FE0CB0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C72D4, &type metadata for TaskTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0CB0);
  }
  return result;
}

unint64_t sub_2402A41E4()
{
  unint64_t result;

  result = qword_256FE0CB8;
  if (!qword_256FE0CB8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for BucketInterval, &type metadata for BucketInterval);
    atomic_store(result, (unint64_t *)&qword_256FE0CB8);
  }
  return result;
}

uint64_t TaskTelemetry.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int *v45;
  uint64_t *v46;
  char v47;
  char v48;

  v39 = a2;
  v4 = sub_2402BD48C();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE0CC0);
  v10 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (int *)type metadata accessor for TaskTelemetry(0);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (uint64_t *)((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a1[3];
  v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_2402A41A0();
  v40 = v12;
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  v37 = v6;
  v38 = v10;
  v48 = 0;
  v15 = sub_2402BDC24();
  v16 = v46;
  *v46 = v15;
  v16[1] = v17;
  v48 = 1;
  sub_2402A2F1C(&qword_256FE0C88, &qword_254352248, MEMORY[0x24BDCE960], MEMORY[0x24BEE1BC8]);
  sub_2402BDC54();
  v18 = v45;
  sub_240238F2C((uint64_t)v9, (uint64_t)v16 + v45[5], (uint64_t *)&unk_256FE0BD0);
  v47 = 2;
  sub_2402A48F0();
  sub_2402BDC54();
  *((_BYTE *)v16 + v18[6]) = v48;
  v48 = 3;
  v19 = sub_2402BDC24();
  v20 = (uint64_t *)((char *)v16 + v18[7]);
  *v20 = v19;
  v20[1] = v21;
  v48 = 4;
  v22 = sub_2402BDC24();
  v23 = (uint64_t *)((char *)v16 + v18[8]);
  *v23 = v22;
  v23[1] = v24;
  v48 = 5;
  sub_240232E34(&qword_254352248, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v25 = v37;
  v26 = v43;
  sub_2402BDC54();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v16 + v18[9], v25, v26);
  v48 = 6;
  *(uint64_t *)((char *)v16 + v18[10]) = sub_2402BDC48();
  v48 = 7;
  *(uint64_t *)((char *)v16 + v18[11]) = sub_2402BDC48();
  v48 = 8;
  *(uint64_t *)((char *)v16 + v18[12]) = sub_2402BDC48();
  v48 = 9;
  sub_2402BDC3C();
  *(uint64_t *)((char *)v46 + v45[13]) = v27;
  v48 = 10;
  sub_2402BDC3C();
  *(uint64_t *)((char *)v46 + v45[14]) = v28;
  v48 = 11;
  sub_2402BDC3C();
  *(uint64_t *)((char *)v46 + v45[15]) = v29;
  v48 = 12;
  sub_2402BDC3C();
  *(uint64_t *)((char *)v46 + v45[16]) = v30;
  v48 = 13;
  sub_2402BDC3C();
  *(uint64_t *)((char *)v46 + v45[17]) = v31;
  v48 = 14;
  sub_2402BDC3C();
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
  v34 = (uint64_t)v46;
  *(uint64_t *)((char *)v46 + v45[18]) = v33;
  sub_240238BF0(v34, v39, type metadata accessor for TaskTelemetry);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  return sub_240238C34(v34, type metadata accessor for TaskTelemetry);
}

unint64_t sub_2402A48F0()
{
  unint64_t result;

  result = qword_256FE0CC8;
  if (!qword_256FE0CC8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for BucketInterval, &type metadata for BucketInterval);
    atomic_store(result, (unint64_t *)&qword_256FE0CC8);
  }
  return result;
}

uint64_t sub_2402A4934@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TaskTelemetry.init(from:)(a1, a2);
}

uint64_t sub_2402A4948(_QWORD *a1)
{
  return TaskTelemetry.encode(to:)(a1);
}

unint64_t DeviceTelemetry.coreAnalyticsDictionary.getter()
{
  unint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v0 = sub_24024916C(MEMORY[0x24BEE4AF8]);
  v1 = sub_2402BD63C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v1, 0x49747865746E6F63, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  type metadata accessor for DeviceTelemetry(0);
  v3 = sub_2402BD90C();
  v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v3, 0x756F43736B736174, 0xEA0000000000746ELL, v4);
  swift_bridgeObjectRelease();
  v5 = sub_2402BD90C();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v5, 0x6E7552736B736174, 0xE800000000000000, v6);
  swift_bridgeObjectRelease();
  v7 = sub_2402BD90C();
  v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v7, 0x666544736B736174, 0xED00006465727265, v8);
  swift_bridgeObjectRelease();
  v9 = sub_2402BD90C();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v9, 0x696146736B736174, 0xEB0000000064656CLL, v10);
  swift_bridgeObjectRelease();
  v11 = sub_2402BD90C();
  v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v11, 0x6D6F43736B736174, 0xEE00646574656C70, v12);
  swift_bridgeObjectRelease();
  sub_24029AB4C();
  v13 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v13, 0x745374656B637562, 0xEB00000000747261, v14);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  sub_24029AB4C();
  v15 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v15, 0x6E4574656B637562, 0xE900000000000064, v16);
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t PushTelemetry.coreAnalyticsDictionary.getter()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  id v13;
  char v14;
  id v15;
  char v16;
  id v17;
  char v18;
  id v19;
  char v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  char v26;

  v2 = *((_QWORD *)v0 + 4);
  v1 = *((_QWORD *)v0 + 5);
  v4 = *((_QWORD *)v0 + 6);
  v3 = *((_QWORD *)v0 + 7);
  v6 = v0[8];
  v5 = v0[9];
  v7 = v0[10];
  v8 = sub_24024916C(MEMORY[0x24BEE4AF8]);
  v9 = sub_2402BD63C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v9, 0x49747865746E6F63, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v11 = sub_2402BD63C();
  v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v11, 0x656D614E6B736174, 0xE800000000000000, v12);
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v2);
  v14 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v13, 0xD000000000000017, 0x80000002402CA640, v14);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v1);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v15, 0xD000000000000012, 0x80000002402CA660, v16);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v4);
  v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v17, 0xD000000000000011, 0x80000002402CA680, v18);
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v3);
  v20 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v19, 0xD00000000000001ALL, 0x80000002402CA6A0, v20);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v6);
  v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v21, 0xD000000000000010, 0x80000002402CA6C0, v22);
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v5);
  v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v23, 0xD000000000000013, 0x80000002402CA6E0, v24);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v7);
  v26 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v25, 0xD000000000000013, 0x80000002402CA700, v26);
  swift_bridgeObjectRelease();
  return v8;
}

void TaskTelemetry.coreAnalyticsDictionary.getter()
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  sub_24024916C(MEMORY[0x24BEE4AF8]);
  v1 = sub_2402BD63C();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v1, 0x49747865746E6F63, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for TaskTelemetry(0);
  sub_24029AB4C();
  v4 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v4, 0x745374656B637562, 0xEB00000000747261, v5);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  sub_24029AB4C();
  v6 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v6, 0x6E4574656B637562, 0xE900000000000064, v7);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_2402A5188()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  id v12;
  char v13;
  id v14;
  char v15;
  id v16;
  char v17;
  id v18;
  char v19;
  id v20;
  char v21;
  id v22;
  char v23;
  id v24;
  char v25;
  id v26;
  char v27;
  id v28;
  char v29;

  v4 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v4, 0x6E4974656B637562, 0xEE006C6176726574, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v6 = sub_2402BD63C();
  v7 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v6, 0x656D614E6B736174, 0xE800000000000000, v7);
  swift_bridgeObjectRelease();
  v8 = sub_2402BD63C();
  v9 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v8, 0x746174536B736174, v3 + 1, v9);
  swift_bridgeObjectRelease();
  sub_2402BD444();
  sub_2402BD8DC();
  v10 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v10, 0xD000000000000014, 0x80000002402CA720, v11);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v0 + v2[10]));
  v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v12, 0x6D6F43746E756F63, 0xEE00646574656C70, v13);
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v0 + v2[11]));
  v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v14, 0x696146746E756F63, 0xEB0000000064656CLL, v15);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, *(_QWORD *)(v0 + v2[12]));
  v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v16, 0x666544746E756F63, 0xED00006465727265, v17);
  swift_bridgeObjectRelease();
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[13]));
  v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v18, 0xD000000000000015, 0x80000002402CA740, v19);
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[14]));
  v21 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v20, 0xD000000000000013, 0x80000002402CA760, v21);
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[15]));
  v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v22, 0xD000000000000017, 0x80000002402CA780, v23);
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[16]));
  v25 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v24, 0xD000000000000014, 0x80000002402CA7A0, v25);
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[17]));
  v27 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v26, 0xD000000000000015, 0x80000002402CA7C0, v27);
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, *(double *)(v0 + v2[18]));
  v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170((uint64_t)v28, 0xD000000000000018, 0x80000002402CA7E0, v29);
  swift_bridgeObjectRelease();
  return v1;
}

unint64_t sub_2402A56EC()
{
  unint64_t result;

  result = qword_256FE0CD0;
  if (!qword_256FE0CD0)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for CoreAnalyticsEvents, &type metadata for CoreAnalyticsEvents);
    atomic_store(result, (unint64_t *)&qword_256FE0CD0);
  }
  return result;
}

unint64_t sub_2402A5734()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FE0CD8;
  if (!qword_256FE0CD8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256FE0CE0);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256FE0CD8);
  }
  return result;
}

uint64_t dispatch thunk of CoreAnalyticsConvertible.coreAnalyticsDictionary.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for CoreAnalyticsEvents()
{
  return &type metadata for CoreAnalyticsEvents;
}

_QWORD *initializeBufferWithCopyOfBuffer for TaskStatusEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(_QWORD *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2402BD48C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v42 = v12;
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)v4 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v16) = *((_BYTE *)a2 + v14);
    *v15 = v17;
    v15[1] = v18;
    *((_BYTE *)v4 + v14) = (_BYTE)v16;
    v19 = a3[8];
    v20 = (_QWORD *)((char *)v4 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = type metadata accessor for PushMetadata(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v27 = v21[1];
      *v20 = *v21;
      v20[1] = v27;
      v28 = v21[3];
      v20[2] = v21[2];
      v20[3] = v28;
      v29 = v21[5];
      v20[4] = v21[4];
      v20[5] = v29;
      v41 = v11;
      v30 = v21[7];
      v20[6] = v21[6];
      v20[7] = v30;
      v31 = *(int *)(v22 + 32);
      v40 = (char *)v20 + v31;
      v32 = (char *)v21 + v31;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = v41;
      swift_bridgeObjectRetain();
      v42(v40, v32, v41);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v33 = a3[9];
    v34 = (char *)v4 + v33;
    v35 = (char *)a2 + v33;
    v36 = type metadata accessor for PullMetadata(0);
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v42(v34, v35, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
    }
  }
  return v4;
}

uint64_t destroy for TaskStatusEvent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_2402BD48C();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + a2[8];
  v7 = type metadata accessor for PushMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11(v6 + *(int *)(v7 + 32), v5);
  }
  v8 = a1 + a2[9];
  v9 = type metadata accessor for PullMetadata(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8, v5);
  return result;
}

_QWORD *initializeWithCopy for TaskStatusEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v40 = v11;
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  LOBYTE(v15) = *((_BYTE *)a2 + v13);
  *v14 = v16;
  v14[1] = v17;
  *((_BYTE *)a1 + v13) = (_BYTE)v15;
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = type metadata accessor for PushMetadata(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  if (v23(v20, 1, v21))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = v20[1];
    *v19 = *v20;
    v19[1] = v25;
    v26 = v20[3];
    v19[2] = v20[2];
    v19[3] = v26;
    v27 = v20[5];
    v19[4] = v20[4];
    v19[5] = v27;
    v39 = v10;
    v28 = v20[7];
    v19[6] = v20[6];
    v19[7] = v28;
    v29 = *(int *)(v21 + 32);
    v38 = (char *)v19 + v29;
    v30 = (char *)v20 + v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = v39;
    swift_bridgeObjectRetain();
    v40(v38, v30, v39);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v31 = a3[9];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for PullMetadata(0);
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v40(v32, v33, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  return a1;
}

_QWORD *assignWithCopy for TaskStatusEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v37 = *(_QWORD *)(v9 - 8);
  v36 = *(void (**)(char *, char *, uint64_t))(v37 + 24);
  v36(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v13 = a3[8];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = type metadata accessor for PushMetadata(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      v14[3] = v15[3];
      v14[4] = v15[4];
      v14[5] = v15[5];
      v14[6] = v15[6];
      v14[7] = v15[7];
      v21 = *(int *)(v16 + 32);
      v22 = (char *)v15 + v21;
      v34 = (char *)v14 + v21;
      v35 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v35(v34, v22, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_240238C34((uint64_t)v14, type metadata accessor for PushMetadata);
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[2] = v15[2];
  v14[3] = v15[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[4] = v15[4];
  v14[5] = v15[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[6] = v15[6];
  v14[7] = v15[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36((char *)v14 + *(int *)(v16 + 32), (char *)v15 + *(int *)(v16 + 32), v9);
LABEL_7:
  v24 = a3[9];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for PullMetadata(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      v36(v25, v26, v9);
      return a1;
    }
    sub_240238C34((uint64_t)v25, type metadata accessor for PullMetadata);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v25, v26, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

_OWORD *initializeWithTake for TaskStatusEvent(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[8];
  v13 = (_OWORD *)((char *)a1 + v12);
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = type metadata accessor for PushMetadata(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = v14[1];
    *v13 = *v14;
    v13[1] = v18;
    v19 = v14[3];
    v13[2] = v14[2];
    v13[3] = v19;
    v10((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = a3[9];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = type metadata accessor for PullMetadata(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v10(v21, v22, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

_QWORD *assignWithTake for TaskStatusEvent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t, uint64_t);
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v42 = *(_QWORD *)(v10 - 8);
  v41 = *(void (**)(char *, char *, uint64_t))(v42 + 40);
  v41(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = type metadata accessor for PushMetadata(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      v24 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v24;
      v25 = *((_OWORD *)v18 + 3);
      *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
      *((_OWORD *)v17 + 3) = v25;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v17 + *(int *)(v19 + 32), (char *)v18 + *(int *)(v19 + 32), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    sub_240238C34((uint64_t)v17, type metadata accessor for PushMetadata);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v37 = v18[1];
  *v17 = *v18;
  v17[1] = v37;
  swift_bridgeObjectRelease();
  v38 = v18[3];
  v17[2] = v18[2];
  v17[3] = v38;
  swift_bridgeObjectRelease();
  v39 = v18[5];
  v17[4] = v18[4];
  v17[5] = v39;
  swift_bridgeObjectRelease();
  v40 = v18[7];
  v17[6] = v18[6];
  v17[7] = v40;
  swift_bridgeObjectRelease();
  v41((char *)v17 + *(int *)(v19 + 32), (char *)v18 + *(int *)(v19 + 32), v10);
LABEL_7:
  v27 = a3[9];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for PullMetadata(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      v41(v28, v29, v10);
      return a1;
    }
    sub_240238C34((uint64_t)v28, type metadata accessor for PullMetadata);
    goto LABEL_12;
  }
  if (v34)
  {
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v28, v29, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskStatusEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A64FC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2402BD48C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TaskStatusEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A65D4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_2402BD48C();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5C8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDE5D0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_2402A669C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_2402BD48C();
  if (v0 <= 0x3F)
  {
    sub_24023F568(319, &qword_256FDE940, (void (*)(uint64_t))type metadata accessor for PushMetadata);
    if (v1 <= 0x3F)
    {
      sub_24023F568(319, qword_256FDE948, (void (*)(uint64_t))type metadata accessor for PullMetadata);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for TaskErrorEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TaskErrorEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *_s20LighthouseBackground14TaskErrorEventVwCP_0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2402BD48C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (uint64_t *)((char *)v4 + v14);
    v19 = (uint64_t *)((char *)a2 + v14);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t _s20LighthouseBackground14TaskErrorEventVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s20LighthouseBackground14TaskErrorEventVwcp_0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_QWORD *)((char *)a1 + v13);
  v18 = (_QWORD *)((char *)a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s20LighthouseBackground14TaskErrorEventVwca_0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *_s20LighthouseBackground14TaskErrorEventVwtk_0(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *_s20LighthouseBackground14TaskErrorEventVwta_0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskCustomEvent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TaskCustomEvent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_2402A6CC4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_2402BD48C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DeviceTelemetry(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2402BD48C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
    v14 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v4 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v15) = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)v4 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  }
  return v4;
}

uint64_t destroy for DeviceTelemetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2402BD48C();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v8(v4, v5);
  v6 = v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v5);
}

_QWORD *initializeWithCopy for DeviceTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithCopy for DeviceTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for DeviceTelemetry(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *assignWithTake for DeviceTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceTelemetry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A7224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for DeviceTelemetry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A72B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_2402A7328()
{
  unint64_t v0;

  sub_2402A73B0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_2402A73B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256FE0EE0)
  {
    sub_2402BD48C();
    sub_240232E34((unint64_t *)&qword_256FDEF20, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v0 = sub_2402BD948();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256FE0EE0);
  }
}

uint64_t initializeWithCopy for PushTelemetry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PushTelemetry(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PushTelemetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushTelemetry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PushTelemetry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushTelemetry()
{
  return &type metadata for PushTelemetry;
}

_QWORD *initializeBufferWithCopyOfBuffer for TaskTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_2402BD48C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    v12(&v9[*(int *)(v13 + 36)], &v10[*(int *)(v13 + 36)], v11);
    v14 = a3[7];
    *((_BYTE *)v4 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[8];
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (char *)v4 + v19;
    v24 = (char *)a2 + v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v23, v24, v11);
    v25 = a3[11];
    *(_QWORD *)((char *)v4 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
    *(_QWORD *)((char *)v4 + v25) = *(_QWORD *)((char *)a2 + v25);
    v26 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    *(_QWORD *)((char *)v4 + v26) = *(_QWORD *)((char *)a2 + v26);
    v27 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
    *(_QWORD *)((char *)v4 + v27) = *(_QWORD *)((char *)a2 + v27);
    v28 = a3[17];
    *(_QWORD *)((char *)v4 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
    *(_QWORD *)((char *)v4 + v28) = *(_QWORD *)((char *)a2 + v28);
    *(_QWORD *)((char *)v4 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  }
  return v4;
}

uint64_t destroy for TaskTelemetry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_2402BD48C();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v8(v4, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v8(v4 + *(int *)(v6 + 36), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(a1 + *(int *)(a2 + 36), v5);
}

_QWORD *initializeWithCopy for TaskTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[8];
  v18 = a3[9];
  v19 = (_QWORD *)((char *)a1 + v17);
  v20 = (_QWORD *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (char *)a1 + v18;
  v23 = (char *)a2 + v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v22, v23, v10);
  v24 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  v25 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v26 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  v27 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  return a1;
}

_QWORD *assignWithCopy for TaskTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[8];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10((char *)a1 + a3[9], (char *)a2 + a3[9], v9);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  return a1;
}

_OWORD *initializeWithTake for TaskTelemetry(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_2402BD48C();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v10(&v7[*(int *)(v11 + 36)], &v8[*(int *)(v11 + 36)], v9);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v10((char *)a1 + v13, (char *)a2 + v13, v9);
  v14 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  v16 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  v17 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  return a1;
}

_QWORD *assignWithTake for TaskTelemetry(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_2402BD48C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
  v11(&v8[*(int *)(v12 + 36)], &v9[*(int *)(v12 + 36)], v10);
  v13 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v11((char *)a1 + a3[9], (char *)a2 + a3[9], v10);
  v23 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
  v24 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
  v25 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v25) = *(_QWORD *)((char *)a2 + v25);
  v26 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)((char *)a2 + v26);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskTelemetry()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A7DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_2402BD48C();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TaskTelemetry()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2402A7E94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BD0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_2402BD48C();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_2402A7F34()
{
  unint64_t v0;
  unint64_t v1;

  sub_2402A73B0();
  if (v0 <= 0x3F)
  {
    sub_2402BD48C();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for TaskTelemetry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskTelemetry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_2402A80C8 + 4 * byte_2402C6931[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_2402A80FC + 4 * byte_2402C692C[v4]))();
}

uint64_t sub_2402A80FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402A810CLL);
  return result;
}

uint64_t sub_2402A8118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402A8120);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_2402A8124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A812C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskTelemetry.CodingKeys()
{
  return &type metadata for TaskTelemetry.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PushTelemetry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PushTelemetry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_2402A8224 + 4 * byte_2402C693B[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_2402A8258 + 4 * byte_2402C6936[v4]))();
}

uint64_t sub_2402A8258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402A8268);
  return result;
}

uint64_t sub_2402A8274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402A827CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_2402A8280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushTelemetry.CodingKeys()
{
  return &type metadata for PushTelemetry.CodingKeys;
}

uint64_t _s20LighthouseBackground19CoreAnalyticsEventsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2402A82F0 + 4 * byte_2402C6945[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2402A8324 + 4 * byte_2402C6940[v4]))();
}

uint64_t sub_2402A8324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A832C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402A8334);
  return result;
}

uint64_t sub_2402A8340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402A8348);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2402A834C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceTelemetry.CodingKeys()
{
  return &type metadata for DeviceTelemetry.CodingKeys;
}

ValueMetadata *type metadata accessor for TaskCustomEvent.CodingKeys()
{
  return &type metadata for TaskCustomEvent.CodingKeys;
}

uint64_t _s20LighthouseBackground15TaskCustomEventV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2402A83D0 + 4 * byte_2402C694F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2402A8404 + 4 * byte_2402C694A[v4]))();
}

uint64_t sub_2402A8404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A840C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402A8414);
  return result;
}

uint64_t sub_2402A8420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402A8428);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2402A842C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskErrorEvent.CodingKeys()
{
  return &type metadata for TaskErrorEvent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TaskStatusEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_2402A849C + 4 * byte_2402C6959[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_2402A84D0 + 4 * byte_2402C6954[v4]))();
}

uint64_t sub_2402A84D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A84D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402A84E0);
  return result;
}

uint64_t sub_2402A84EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402A84F4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_2402A84F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402A8500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TaskStatusEvent.CodingKeys()
{
  return &type metadata for TaskStatusEvent.CodingKeys;
}

unint64_t sub_2402A8520()
{
  unint64_t result;

  result = qword_256FE0FF0;
  if (!qword_256FE0FF0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6F14, &type metadata for TaskStatusEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0FF0);
  }
  return result;
}

unint64_t sub_2402A8568()
{
  unint64_t result;

  result = qword_256FE0FF8;
  if (!qword_256FE0FF8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6FCC, &type metadata for TaskErrorEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE0FF8);
  }
  return result;
}

unint64_t sub_2402A85B0()
{
  unint64_t result;

  result = qword_256FE1000;
  if (!qword_256FE1000)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7084, &type metadata for TaskCustomEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1000);
  }
  return result;
}

unint64_t sub_2402A85F8()
{
  unint64_t result;

  result = qword_256FE1008;
  if (!qword_256FE1008)
  {
    result = MEMORY[0x2426820F8](&unk_2402C713C, &type metadata for DeviceTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1008);
  }
  return result;
}

unint64_t sub_2402A8640()
{
  unint64_t result;

  result = qword_256FE1010;
  if (!qword_256FE1010)
  {
    result = MEMORY[0x2426820F8](&unk_2402C71F4, &type metadata for PushTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1010);
  }
  return result;
}

unint64_t sub_2402A8688()
{
  unint64_t result;

  result = qword_256FE1018;
  if (!qword_256FE1018)
  {
    result = MEMORY[0x2426820F8](&unk_2402C72AC, &type metadata for TaskTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1018);
  }
  return result;
}

unint64_t sub_2402A86D0()
{
  unint64_t result;

  result = qword_256FE1020;
  if (!qword_256FE1020)
  {
    result = MEMORY[0x2426820F8](&unk_2402C721C, &type metadata for TaskTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1020);
  }
  return result;
}

unint64_t sub_2402A8718()
{
  unint64_t result;

  result = qword_256FE1028;
  if (!qword_256FE1028)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7244, &type metadata for TaskTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1028);
  }
  return result;
}

unint64_t sub_2402A8760()
{
  unint64_t result;

  result = qword_256FE1030;
  if (!qword_256FE1030)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7164, &type metadata for PushTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1030);
  }
  return result;
}

unint64_t sub_2402A87A8()
{
  unint64_t result;

  result = qword_256FE1038;
  if (!qword_256FE1038)
  {
    result = MEMORY[0x2426820F8](&unk_2402C718C, &type metadata for PushTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1038);
  }
  return result;
}

unint64_t sub_2402A87F0()
{
  unint64_t result;

  result = qword_256FE1040;
  if (!qword_256FE1040)
  {
    result = MEMORY[0x2426820F8](&unk_2402C70AC, &type metadata for DeviceTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1040);
  }
  return result;
}

unint64_t sub_2402A8838()
{
  unint64_t result;

  result = qword_256FE1048;
  if (!qword_256FE1048)
  {
    result = MEMORY[0x2426820F8](&unk_2402C70D4, &type metadata for DeviceTelemetry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1048);
  }
  return result;
}

unint64_t sub_2402A8880()
{
  unint64_t result;

  result = qword_256FE1050;
  if (!qword_256FE1050)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6FF4, &type metadata for TaskCustomEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1050);
  }
  return result;
}

unint64_t sub_2402A88C8()
{
  unint64_t result;

  result = qword_256FE1058;
  if (!qword_256FE1058)
  {
    result = MEMORY[0x2426820F8](&unk_2402C701C, &type metadata for TaskCustomEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1058);
  }
  return result;
}

unint64_t sub_2402A8910()
{
  unint64_t result;

  result = qword_256FE1060;
  if (!qword_256FE1060)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6F3C, &type metadata for TaskErrorEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1060);
  }
  return result;
}

unint64_t sub_2402A8958()
{
  unint64_t result;

  result = qword_256FE1068;
  if (!qword_256FE1068)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6F64, &type metadata for TaskErrorEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1068);
  }
  return result;
}

unint64_t sub_2402A89A0()
{
  unint64_t result;

  result = qword_256FE1070;
  if (!qword_256FE1070)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6E84, &type metadata for TaskStatusEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1070);
  }
  return result;
}

unint64_t sub_2402A89E8()
{
  unint64_t result;

  result = qword_256FE1078;
  if (!qword_256FE1078)
  {
    result = MEMORY[0x2426820F8](&unk_2402C6EAC, &type metadata for TaskStatusEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1078);
  }
  return result;
}

uint64_t sub_2402A8A2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746174536B736174 && a2 == 0xEA00000000007375 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6174654D68737570 && a2 == 0xEC00000061746164 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6174654D6C6C7570 && a2 == 0xEC00000061746164)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_2402A8CE0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73654D726F727265 && a2 == 0xEC00000065676173)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2402A8EAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D614E746E657665 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2402A9064(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615274656B637562 && a2 == 0xEB0000000065676ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x756F43736B736174 && a2 == 0xEA0000000000746ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E7552736B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x666544736B736174 && a2 == 0xED00006465727265 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696146736B736174 && a2 == 0xEB0000000064656CLL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D6F43736B736174 && a2 == 0xEE00646574656C70)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_2402A93D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402CA640 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000002402CA660 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000002402CA680 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000002402CA6A0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA6C0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA6E0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA700)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_2402A9744(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49747865746E6F63 && a2 == 0xE900000000000064;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615274656B637562 && a2 == 0xEB0000000065676ELL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E4974656B637562 && a2 == 0xEE006C6176726574 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D614E6B736174 && a2 == 0xE800000000000000 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746174536B736174 && a2 == 0xE900000000000065 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002402CA720 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6D6F43746E756F63 && a2 == 0xEE00646574656C70 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x696146746E756F63 && a2 == 0xEB0000000064656CLL || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x666544746E756F63 && a2 == 0xED00006465727265 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA740 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000002402CA760 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002402CA780 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000002402CA7A0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002402CA7C0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002402CA7E0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t sub_2402A9DAC()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402A9E54(char a1)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402A9EB0()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402A9F68(char a1)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402A9FB0()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA04C(char a1)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA0A0()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA140(char a1)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA198()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_2402AA254()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA2F8(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA33C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA3D8(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA430()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA4E0(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA530()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_2402AA5D0()
{
  sub_2402BDE04();
  sub_2402BDE28();
  return sub_2402BDE34();
}

uint64_t sub_2402AA61C()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA6C0(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA718()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA7D0(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA824()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t sub_2402AA8E0()
{
  sub_2402BDE04();
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AA980(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AA9D8()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AAA74(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AAAB8()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402AAB8C(uint64_t a1, char a2)
{
  sub_2402BDE04();
  __asm { BR              X10 }
}

uint64_t sub_2402AABE4()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

uint64_t MLHostParameters.systemParameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  return sub_2402AACF8(v3, v4);
}

uint64_t sub_2402AACF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t MLHostParameters.taskParameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t MLHostParameters.init(taskParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;

  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 1;
  v8 = type metadata accessor for MLHostParameters(0, a2, a3, a4);
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5 + *(int *)(v8 + 44), a1, a2);
}

void __swiftcall MLHostSystemParameters.init()(LighthouseBackground::MLHostSystemParameters *__return_ptr retstr)
{
  retstr->sampling.value = 0.0;
  retstr->sampling.is_nil = 1;
  retstr->mobileAsset.value.assetType = 0u;
  retstr->mobileAsset.value.assetSpecifier = 0u;
}

uint64_t type metadata accessor for MLHostParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHostParameters);
}

uint64_t MLHostParameters.init(systemParameters:taskParameters:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  __int128 v9;
  uint64_t v10;

  v8 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a6 = *(_QWORD *)a1;
  *(_BYTE *)(a6 + 8) = v8;
  v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a6 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a6 + 32) = v9;
  v10 = a6 + *(int *)(type metadata accessor for MLHostParameters(0, a3, a4, a5) + 44);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v10, a2, a3);
}

BOOL sub_2402AAE38(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_2402AAE48()
{
  return sub_2402BDE10();
}

uint64_t sub_2402AAE6C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x80000002402CA9C0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617261506B736174 && a2 == 0xEE0073726574656DLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2402AAF7C()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_2402AAFC0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x617261506B736174;
  else
    return 0xD000000000000010;
}

BOOL sub_2402AB008(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_2402AAE38(*a1, *a2);
}

uint64_t sub_2402AB020()
{
  return sub_2402AAF7C();
}

uint64_t sub_2402AB034()
{
  return sub_2402AAE48();
}

uint64_t sub_2402AB048()
{
  sub_2402BDE04();
  sub_2402AAE48();
  return sub_2402BDE34();
}

uint64_t sub_2402AB090()
{
  char *v0;

  return sub_2402AAFC0(*v0);
}

uint64_t sub_2402AB0A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402AAE6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402AB0D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_2402AE100();
  *a1 = result;
  return result;
}

uint64_t sub_2402AB104(uint64_t a1)
{
  MEMORY[0x2426820F8](&unk_2402C7ED8, a1);
  return sub_2402BDE88();
}

uint64_t sub_2402AB138(uint64_t a1)
{
  MEMORY[0x2426820F8](&unk_2402C7ED8, a1);
  return sub_2402BDE94();
}

uint64_t MLHostParameters.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;

  v3 = v2;
  v6 = a2[2];
  v7 = a2[3];
  v17[0] = a2[4];
  v17[1] = v6;
  v8 = type metadata accessor for MLHostParameters.CodingKeys(255, v6, v7, v17[0]);
  MEMORY[0x2426820F8](&unk_2402C7ED8, v8);
  v9 = sub_2402BDD50();
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v17 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402BDE70();
  v12 = *((_BYTE *)v3 + 8);
  v20 = *v3;
  v21 = v12;
  v13 = *((_OWORD *)v3 + 2);
  v22 = *((_OWORD *)v3 + 1);
  v23 = v13;
  v24 = 0;
  sub_2402AB300();
  v14 = v19;
  sub_2402BDD2C();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
  v16 = v18;
  LOBYTE(v20) = 1;
  sub_2402BDD2C();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v11, v9);
}

uint64_t type metadata accessor for MLHostParameters.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MLHostParameters.CodingKeys);
}

unint64_t sub_2402AB300()
{
  unint64_t result;

  result = qword_256FE1088;
  if (!qword_256FE1088)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostSystemParameters, &type metadata for MLHostSystemParameters);
    atomic_store(result, (unint64_t *)&qword_256FE1088);
  }
  return result;
}

uint64_t MLHostParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;

  v34 = a5;
  v33 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MLHostParameters.CodingKeys(255, v10, v11, v12);
  MEMORY[0x2426820F8](&unk_2402C7ED8, v13);
  v39 = sub_2402BDC84();
  v35 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v15 = (char *)&v30 - v14;
  v37 = a2;
  v38 = a3;
  v32 = type metadata accessor for MLHostParameters(0, a2, a3, a4);
  v16 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v18 = (char *)&v30 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v40 = v15;
  v19 = (uint64_t)v41;
  sub_2402BDE64();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = v35;
  v20 = v36;
  v31 = v16;
  v22 = v37;
  v41 = a1;
  v46 = 0;
  sub_2402AB5FC();
  v23 = v39;
  sub_2402BDC54();
  v24 = v43;
  v25 = v18;
  *(_QWORD *)v18 = v42;
  v18[8] = v24;
  v26 = v45;
  *((_OWORD *)v18 + 1) = v44;
  *((_OWORD *)v18 + 2) = v26;
  LOBYTE(v42) = 1;
  sub_2402BDC54();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v40, v23);
  v27 = v32;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v18[*(int *)(v32 + 44)], v20, v22);
  v28 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v34, v25, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v25, v27);
}

unint64_t sub_2402AB5FC()
{
  unint64_t result;

  result = qword_256FE1090;
  if (!qword_256FE1090)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostSystemParameters, &type metadata for MLHostSystemParameters);
    atomic_store(result, (unint64_t *)&qword_256FE1090);
  }
  return result;
}

uint64_t sub_2402AB640(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2402AB670@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return MLHostParameters.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_2402AB690(_QWORD *a1, _QWORD *a2)
{
  return MLHostParameters.encode(to:)(a1, a2);
}

uint64_t MLHostSystemParameters.sampling.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t MLHostSystemParameters.mobileAsset.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_2402AACF8(v2, v3);
}

void __swiftcall MLHostSystemParameters.init(sampling:mobileAsset:)(LighthouseBackground::MLHostSystemParameters *__return_ptr retstr, Swift::Double_optional sampling, LighthouseBackground::MLHostAssetParameters_optional mobileAsset)
{
  Swift::String v3;

  retstr->sampling.value = *(Swift::Double *)&sampling.is_nil;
  retstr->sampling.is_nil = mobileAsset.value.assetType._countAndFlagsBits & 1;
  v3 = (Swift::String)*((_OWORD *)mobileAsset.value.assetType._object + 1);
  retstr->mobileAsset.value.assetType = *(Swift::String *)mobileAsset.value.assetType._object;
  retstr->mobileAsset.value.assetSpecifier = v3;
}

uint64_t sub_2402AB6DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7341656C69626F6DLL;
  else
    return 0x676E696C706D6173;
}

uint64_t sub_2402AB720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402AE108(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402AB744()
{
  sub_2402AB900();
  return sub_2402BDE88();
}

uint64_t sub_2402AB76C()
{
  sub_2402AB900();
  return sub_2402BDE94();
}

uint64_t MLHostSystemParameters.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE1098);
  v15 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13 = v1[3];
  v14 = v7;
  v8 = v1[4];
  v11 = v1[5];
  v12 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402AB900();
  sub_2402BDE70();
  LOBYTE(v16) = 0;
  sub_2402BDCB4();
  if (!v2)
  {
    v16 = v14;
    v17 = v13;
    v18 = v12;
    v19 = v11;
    v20 = 1;
    sub_2402AB944();
    sub_2402BDCD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v6, v4);
}

unint64_t sub_2402AB900()
{
  unint64_t result;

  result = qword_256FE10A0;
  if (!qword_256FE10A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7E88, &type metadata for MLHostSystemParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE10A0);
  }
  return result;
}

unint64_t sub_2402AB944()
{
  unint64_t result;

  result = qword_256FE10A8;
  if (!qword_256FE10A8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostAssetParameters, &type metadata for MLHostAssetParameters);
    atomic_store(result, (unint64_t *)&qword_256FE10A8);
  }
  return result;
}

uint64_t MLHostSystemParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  _OWORD v15[2];
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE10B0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402AB900();
  sub_2402BDE64();
  if (!v2)
  {
    LOBYTE(v15[0]) = 0;
    v9 = sub_2402BDBDC();
    v11 = v10;
    v16 = 1;
    sub_2402ABAFC();
    sub_2402BDC00();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v15[0];
    v13 = v15[1];
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v11 & 1;
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_2402ABAFC()
{
  unint64_t result;

  result = qword_256FE10B8;
  if (!qword_256FE10B8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostAssetParameters, &type metadata for MLHostAssetParameters);
    atomic_store(result, (unint64_t *)&qword_256FE10B8);
  }
  return result;
}

uint64_t sub_2402ABB40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MLHostSystemParameters.init(from:)(a1, a2);
}

uint64_t sub_2402ABB54(_QWORD *a1)
{
  return MLHostSystemParameters.encode(to:)(a1);
}

uint64_t MLHostAssetParameters.assetType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostAssetParameters.assetSpecifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

LighthouseBackground::MLHostAssetParameters __swiftcall MLHostAssetParameters.init(assetType:assetSpecifier:)(Swift::String assetType, Swift::String assetSpecifier)
{
  Swift::String *v2;
  LighthouseBackground::MLHostAssetParameters result;

  *v2 = assetType;
  v2[1] = assetSpecifier;
  result.assetSpecifier = assetSpecifier;
  result.assetType = assetType;
  return result;
}

uint64_t sub_2402ABBCC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6570537465737361;
  else
    return 0x7079547465737361;
}

uint64_t sub_2402ABC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402AE210(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402ABC3C()
{
  sub_2402ABDC0();
  return sub_2402BDE88();
}

uint64_t sub_2402ABC64()
{
  sub_2402ABDC0();
  return sub_2402BDE94();
}

uint64_t MLHostAssetParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE10C0);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v9[1] = *(_QWORD *)(v1 + 24);
  v9[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402ABDC0();
  sub_2402BDE70();
  v12 = 0;
  sub_2402BDCFC();
  if (!v2)
  {
    v11 = 1;
    sub_2402BDCFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

unint64_t sub_2402ABDC0()
{
  unint64_t result;

  result = qword_256FE10C8;
  if (!qword_256FE10C8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7E38, &type metadata for MLHostAssetParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE10C8);
  }
  return result;
}

uint64_t MLHostAssetParameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE10D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402ABDC0();
  sub_2402BDE64();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  v9 = sub_2402BDC24();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2402BDC24();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2402ABFA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return MLHostAssetParameters.init(from:)(a1, a2);
}

uint64_t sub_2402ABFB8(_QWORD *a1)
{
  return MLHostAssetParameters.encode(to:)(a1);
}

uint64_t sub_2402ABFCC()
{
  sub_2402AC0E0();
  return sub_2402BDE88();
}

uint64_t sub_2402ABFF4()
{
  sub_2402AC0E0();
  return sub_2402BDE94();
}

uint64_t MLHostEmptyParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE10D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402AC0E0();
  sub_2402BDE70();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_2402AC0E0()
{
  unint64_t result;

  result = qword_256FE10E0;
  if (!qword_256FE10E0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7DE8, &type metadata for MLHostEmptyParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE10E0);
  }
  return result;
}

uint64_t MLHostEmptyParameters.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2402AC148(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_2402AC16C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE10D8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402AC0E0();
  sub_2402BDE70();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

LighthouseBackground::MLHostCommonError_optional __swiftcall MLHostCommonError.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::MLHostCommonError_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

unint64_t MLHostCommonError.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 == 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 0xD000000000000019;
}

uint64_t sub_2402AC2E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_240235A48(*a1, *a2);
}

uint64_t sub_2402AC2F4()
{
  return sub_2402AA254();
}

uint64_t sub_2402AC2FC()
{
  return sub_24028A1BC();
}

uint64_t sub_2402AC304()
{
  return sub_2402AA8E0();
}

LighthouseBackground::MLHostCommonError_optional sub_2402AC30C(Swift::String *a1)
{
  return MLHostCommonError.init(rawValue:)(*a1);
}

unint64_t sub_2402AC318@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = MLHostCommonError.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t MLHostExtensionContext.taskId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostExtensionContext.taskName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MLHostExtensionContext.taskFolder.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder);
  swift_bridgeObjectRetain();
  return v1;
}

id MLHostExtensionContext.__allocating_init(taskId:taskName:taskFolder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  v13 = (char *)objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v13[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v13[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v13;
  v18.super_class = v6;
  return objc_msgSendSuper2(&v18, sel_init);
}

id MLHostExtensionContext.init(taskId:taskName:taskFolder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  objc_class *ObjectType;
  char *v14;
  char *v15;
  char *v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType();
  v14 = &v6[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId];
  *(_QWORD *)v14 = a1;
  *((_QWORD *)v14 + 1) = a2;
  v15 = &v6[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = &v6[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder];
  *(_QWORD *)v16 = a5;
  *((_QWORD *)v16 + 1) = a6;
  v18.receiver = v6;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, sel_init);
}

unint64_t MLHostExtensionContext.description.getter()
{
  uint64_t v0;
  unint64_t v2;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder + 8))
  {
    v2 = 0;
    sub_2402BDA98();
    sub_2402BD6C0();
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    sub_2402BD6C0();
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    sub_2402BD6C0();
    sub_2402BD6C0();
  }
  else
  {
    sub_2402BDA98();
    swift_bridgeObjectRelease();
    v2 = 0xD00000000000001FLL;
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
    sub_2402BD6C0();
    swift_bridgeObjectRetain();
    sub_2402BD6C0();
    swift_bridgeObjectRelease();
  }
  sub_2402BD6C0();
  return v2;
}

uint64_t static MLHostExtensionContext.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_256FE1080;
}

uint64_t static MLHostExtensionContext.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_256FE1080 = a1;
  return result;
}

uint64_t (*static MLHostExtensionContext.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

Swift::Void __swiftcall MLHostExtensionContext.encode(with:)(NSCoder with)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithUTF8String_, sub_2402BD690() + 32);
  swift_release();
  v4 = (void *)sub_2402BD63C();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithUTF8String_, sub_2402BD690() + 32);
  swift_release();
  v6 = (void *)sub_2402BD63C();
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder + 8))
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithUTF8String_, sub_2402BD690() + 32);
    swift_release();
    v8 = (id)sub_2402BD63C();
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  }
}

id MLHostExtensionContext.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MLHostExtensionContext.init(coder:)(a1);
}

id MLHostExtensionContext.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  id v22;
  char *v23;
  objc_super v25;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_2402ACC6C();
  v5 = v2;
  v6 = sub_2402BD9CC();
  if (!v6)
    goto LABEL_6;
  v7 = (void *)v6;
  v8 = sub_2402BD9CC();
  if (!v8)
  {

LABEL_6:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v9 = (void *)v8;
  v10 = sub_2402BD648();
  v11 = (uint64_t *)&v5[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId];
  *v11 = v10;
  v11[1] = v12;
  v13 = sub_2402BD648();
  v14 = (uint64_t *)&v5[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName];
  *v14 = v13;
  v14[1] = v15;
  v16 = sub_2402BD9CC();
  if (v16)
  {
    v17 = (void *)v16;
    v18 = sub_2402BD648();
    v20 = v19;

    v21 = (uint64_t *)&v5[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder];
    *v21 = v18;
    v21[1] = v20;
  }
  else
  {

    v23 = &v5[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder];
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
  }

  v25.receiver = v5;
  v25.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v25, sel_init);

  return v22;
}

unint64_t sub_2402ACC6C()
{
  unint64_t result;

  result = qword_254352970;
  if (!qword_254352970)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254352970);
  }
  return result;
}

void MLHostExtensionContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void *static MLHostResultStatus.allCases.getter()
{
  return &unk_25108C0E8;
}

void sub_2402ACD94(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AF00;
}

unint64_t MLHostResultPolicy.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

void *static MLHostResultPolicy.allCases.getter()
{
  return &unk_25108C120;
}

BOOL sub_2402ACDC4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2402ACDD8()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t sub_2402ACE1C()
{
  return sub_2402BDE10();
}

uint64_t sub_2402ACE44()
{
  sub_2402BDE04();
  sub_2402BDE10();
  return sub_2402BDE34();
}

uint64_t *sub_2402ACE84@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

void sub_2402ACEA0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_2402ACEAC(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108AEC8;
}

uint64_t MLHostResult.status.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status);
}

uint64_t MLHostResult.policy.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy);
}

id MLHostResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MLHostResult.init()()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = 1;
  v2 = &v0[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id MLHostResult.__allocating_init(status:policy:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = a2;
  v6 = &v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id MLHostResult.init(status:policy:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = a2;
  v6 = &v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

id MLHostResult.__allocating_init(error:policy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  v8 = sub_2402AE330(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id MLHostResult.init(error:policy:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = sub_2402ADF40((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t MLHostResult.errorString.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status))
    return 0;
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error);
  swift_bridgeObjectRetain();
  return v1;
}

id sub_2402AD23C(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  void *v5;

  v4 = a1;
  a3();

  v5 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t MLHostResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error + 8))
  {
    sub_2402BDA98();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status) < 3uLL)
    {
      sub_2402BD6C0();
      swift_bridgeObjectRelease();
      sub_2402BD6C0();
      v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy);
      if (!v1 || v1 == 2 || v1 == 1)
      {
        sub_2402BD6C0();
        swift_bridgeObjectRelease();
        sub_2402BD6C0();
        sub_2402BD6C0();
LABEL_16:
        sub_2402BD6C0();
        return 0xD000000000000015;
      }
    }
  }
  else
  {
    sub_2402BDA98();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status) < 3uLL)
    {
      sub_2402BD6C0();
      swift_bridgeObjectRelease();
      sub_2402BD6C0();
      v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy);
      if (!v2 || v2 == 2 || v2 == 1)
      {
        sub_2402BD6C0();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
  }
  result = sub_2402BDDB0();
  __break(1u);
  return result;
}

uint64_t static MLHostResult.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return byte_256FE1081;
}

uint64_t static MLHostResult.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  byte_256FE1081 = a1;
  return result;
}

uint64_t (*static MLHostResult.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

Swift::Void __swiftcall MLHostResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status);
  v4 = (void *)sub_2402BD63C();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy);
  v6 = (void *)sub_2402BD63C();
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v5, v6);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error + 8))
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithUTF8String_, sub_2402BD690() + 32);
    swift_release();
    v8 = (id)sub_2402BD63C();
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v7, v8);

  }
}

id MLHostResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MLHostResult.init(coder:)(a1);
}

id MLHostResult.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  char *v14;
  objc_super v16;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = v2;
  v6 = (void *)sub_2402BD63C();
  v7 = objc_msgSend(a1, sel_decodeIntegerForKey_, v6);

  if ((unint64_t)v7 > 2
    || (v8 = (void *)sub_2402BD63C(),
        v9 = objc_msgSend(a1, sel_decodeIntegerForKey_, v8),
        v8,
        (unint64_t)v9 > 2))
  {

    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = v7;
    *(_QWORD *)&v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = v9;
    sub_2402ACC6C();
    if (sub_2402BD9CC())
    {
      v10 = sub_2402BD678();
      v11 = (uint64_t *)&v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
      *v11 = v10;
      v11[1] = v12;
    }
    else
    {
      v14 = &v5[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
    }

    v16.receiver = v5;
    v16.super_class = ObjectType;
    v13 = objc_msgSendSuper2(&v16, sel_init);

  }
  return v13;
}

id _s20LighthouseBackground22MLHostExtensionContextCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MLHostResultStatus.description.getter(unint64_t a1)
{
  uint64_t result;

  if (a1 < 3)
    return *(_QWORD *)&aFailure_1[8 * a1];
  result = sub_2402BDDB0();
  __break(1u);
  return result;
}

uint64_t sub_2402ADAB4()
{
  _QWORD *v0;
  uint64_t result;

  if (*v0 < 3uLL)
    return *(_QWORD *)&aFailure_1[8 * *v0];
  result = sub_2402BDDB0();
  __break(1u);
  return result;
}

uint64_t MLHostResultPolicy.description.getter(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      return 0x65747563657865;
    case 2:
      return 0x6C65636E6163;
    case 1:
      return 0x7564656863736572;
  }
  result = sub_2402BDDB0();
  __break(1u);
  return result;
}

uint64_t sub_2402ADB90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = *v0;
  if (!*v0)
    return 0x65747563657865;
  if (v1 == 2)
    return 0x6C65636E6163;
  if (v1 == 1)
    return 0x7564656863736572;
  result = sub_2402BDDB0();
  __break(1u);
  return result;
}

uint64_t MLHostParameters.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *boxed_opaque_existential_0Tm;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12[4];

  v3 = sub_2402BDE58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[3] = a1;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_0Tm, v1, a1);
  sub_2402BDE40();
  sub_2402BDE4C();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v8 = sub_24025D6B0();
  swift_release();
  v12[0] = sub_2402BDEA0();
  v12[1] = v9;
  sub_2402BD6C0();
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  sub_2402BD5F4();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v12[0];
}

unint64_t MLHostSystemParameters.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  ValueMetadata *v17;

  v1 = sub_2402BDE58();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  v6 = *((_BYTE *)v0 + 8);
  v7 = v0[2];
  v8 = v0[3];
  v10 = v0[4];
  v9 = v0[5];
  v17 = &type metadata for MLHostSystemParameters;
  v11 = swift_allocObject();
  v15 = v11;
  *(_QWORD *)(v11 + 16) = v5;
  *(_BYTE *)(v11 + 24) = v6;
  *(_QWORD *)(v11 + 32) = v7;
  *(_QWORD *)(v11 + 40) = v8;
  *(_QWORD *)(v11 + 48) = v10;
  *(_QWORD *)(v11 + 56) = v9;
  sub_2402AACF8(v7, v8);
  sub_2402BDE40();
  sub_2402BDE4C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v12 = sub_24025D6B0();
  swift_release();
  v15 = 0xD000000000000017;
  v16 = 0x80000002402CA880;
  v14 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254352220);
  sub_2402348A0(&qword_254352230, &qword_254352220, MEMORY[0x24BEE12B0]);
  sub_2402BD5F4();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return v15;
}

id sub_2402ADF40(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  objc_class *ObjectType;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t AssociatedTypeWitness;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  objc_super v23;
  uint64_t v24[5];
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;

  ObjectType = (objc_class *)swift_getObjectType();
  v26 = a4;
  v27 = a5;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_0Tm, a1, a4);
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 0;
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = a2;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24[3] = AssociatedTypeWitness;
  v24[4] = swift_getAssociatedConformanceWitness();
  v13 = __swift_allocate_boxed_opaque_existential_0Tm(v24);
  v14 = a3;
  v15 = sub_2402BD750();
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(char *, uint64_t *, uint64_t))(v16 + 16))((char *)&v23 - v17, v13, AssociatedTypeWitness);
  v18 = sub_2402BD714();
  v19 = (uint64_t *)&v14[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *v19 = v18;
  v19[1] = v20;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v23.receiver = v14;
  v23.super_class = ObjectType;
  v21 = objc_msgSendSuper2(&v23, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return v21;
}

uint64_t sub_2402AE100()
{
  return 2;
}

uint64_t sub_2402AE108(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E696C706D6173 && a2 == 0xE800000000000000;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7341656C69626F6DLL && a2 == 0xEB00000000746573)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_2402AE210(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7079547465737361 && a2 == 0xE900000000000065;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570537465737361 && a2 == 0xEE00726569666963)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

id sub_2402AE330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Class v12;
  char *v13;
  uint64_t v15;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)objc_allocWithZone(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_2402ADF40((uint64_t)v11, a2, v13, a4, a5);
}

uint64_t sub_2402AE3D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

unint64_t sub_2402AE40C()
{
  unint64_t result;

  result = qword_256FE1120;
  if (!qword_256FE1120)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostCommonError, &type metadata for MLHostCommonError);
    atomic_store(result, (unint64_t *)&qword_256FE1120);
  }
  return result;
}

unint64_t sub_2402AE450(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_2402AE47C();
  result = sub_2402AE4C0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_2402AE47C()
{
  unint64_t result;

  result = qword_256FE1150;
  if (!qword_256FE1150)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostCommonError, &type metadata for MLHostCommonError);
    atomic_store(result, (unint64_t *)&qword_256FE1150);
  }
  return result;
}

unint64_t sub_2402AE4C0()
{
  unint64_t result;

  result = qword_256FE1158;
  if (!qword_256FE1158)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostCommonError, &type metadata for MLHostCommonError);
    atomic_store(result, (unint64_t *)&qword_256FE1158);
  }
  return result;
}

unint64_t sub_2402AE508()
{
  unint64_t result;

  result = qword_256FE1160;
  if (!qword_256FE1160)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostResultStatus, &type metadata for MLHostResultStatus);
    atomic_store(result, (unint64_t *)&qword_256FE1160);
  }
  return result;
}

uint64_t sub_2402AE54C()
{
  return sub_2402348A0(&qword_256FE1168, &qword_256FE1170, MEMORY[0x24BEE12E0]);
}

unint64_t sub_2402AE57C()
{
  unint64_t result;

  result = qword_256FE1178;
  if (!qword_256FE1178)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostResultPolicy, &type metadata for MLHostResultPolicy);
    atomic_store(result, (unint64_t *)&qword_256FE1178);
  }
  return result;
}

uint64_t sub_2402AE5C0()
{
  return sub_2402348A0(&qword_256FE1180, (uint64_t *)&unk_256FE1188, MEMORY[0x24BEE12E0]);
}

uint64_t sub_2402AE5EC()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2402AE5F4()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_2402AE66C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 48) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v11 = a2[3];
    if (v11)
    {
      v4[2] = a2[2];
      v4[3] = v11;
      v12 = a2[5];
      v4[4] = a2[4];
      v4[5] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v13 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v4 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v4 + 2) = v13;
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 48) & ~v7, ((unint64_t)a2 + v7 + 48) & ~v7, v5);
  }
  return v4;
}

uint64_t sub_2402AE770(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t sub_2402AE7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 48 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 48 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_2402AE860(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = (_OWORD *)(a1 + 16);
  v8 = a2 + 2;
  v9 = a2[3];
  if (*(_QWORD *)(a1 + 24))
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2402AE978(a1 + 16);
      v10 = v8[1];
      *v7 = *v8;
      v7[1] = v10;
    }
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = *((_OWORD *)a2 + 2);
    *v7 = *v8;
    *(_OWORD *)(a1 + 32) = v11;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(unsigned __int8 *)(v12 + 80) + 48 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t sub_2402AE978(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_2402AE9A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_2402AEA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    sub_2402AE978((uint64_t)v6);
LABEL_5:
    v10 = v7[1];
    *v6 = *v7;
    v6[1] = v10;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
LABEL_6:
  v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))((*(unsigned __int8 *)(v11 + 80) + 48 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 48 + a2) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t sub_2402AEAB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;
  int v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 48) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 > 0x7FFFFFFE)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 48) & ~v7);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      v16 = v15 - 1;
      if (v16 < 0)
        v16 = -1;
      return (v16 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_2402AEB8C + 4 * byte_2402C750B[(v9 - 1)]))();
}

void sub_2402AEC10(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for MLHostSystemParameters(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MLHostSystemParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v3;
    v4 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for MLHostSystemParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = (_OWORD *)(a1 + 16);
  v6 = a2 + 2;
  v7 = a2[3];
  if (*(_QWORD *)(a1 + 24))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2402AE978(a1 + 16);
      v8 = v6[1];
      *v5 = *v6;
      v5[1] = v8;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *((_OWORD *)a2 + 2);
    *v5 = *v6;
    *(_OWORD *)(a1 + 32) = v9;
  }
  return a1;
}

uint64_t assignWithTake for MLHostSystemParameters(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = (_OWORD *)(a1 + 16);
  v4 = (_OWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_5;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    sub_2402AE978((uint64_t)v3);
LABEL_5:
    v8 = v4[1];
    *v3 = *v4;
    v3[1] = v8;
    return a1;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MLHostSystemParameters(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MLHostSystemParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MLHostSystemParameters()
{
  return &type metadata for MLHostSystemParameters;
}

ValueMetadata *type metadata accessor for MLHostAssetParameters()
{
  return &type metadata for MLHostAssetParameters;
}

ValueMetadata *type metadata accessor for MLHostEmptyParameters()
{
  return &type metadata for MLHostEmptyParameters;
}

uint64_t storeEnumTagSinglePayload for MLHostCommonError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2402AF170 + 4 * byte_2402C751E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2402AF1A4 + 4 * byte_2402C7519[v4]))();
}

uint64_t sub_2402AF1A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402AF1AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402AF1B4);
  return result;
}

uint64_t sub_2402AF1C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402AF1C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2402AF1CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402AF1D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MLHostCommonError()
{
  return &type metadata for MLHostCommonError;
}

uint64_t type metadata accessor for MLHostExtensionContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for MLHostExtensionContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MLHostExtensionContext.__allocating_init(taskId:taskName:taskFolder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MLHostExtensionContext.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

ValueMetadata *type metadata accessor for MLHostResultStatus()
{
  return &type metadata for MLHostResultStatus;
}

ValueMetadata *type metadata accessor for MLHostResultPolicy()
{
  return &type metadata for MLHostResultPolicy;
}

uint64_t type metadata accessor for MLHostResult()
{
  return objc_opt_self();
}

uint64_t method lookup function for MLHostResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MLHostResult.__allocating_init(status:policy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of MLHostResult.__allocating_init(error:policy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MLHostResult.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

ValueMetadata *type metadata accessor for MLHostEmptyParameters.CodingKeys()
{
  return &type metadata for MLHostEmptyParameters.CodingKeys;
}

ValueMetadata *type metadata accessor for MLHostAssetParameters.CodingKeys()
{
  return &type metadata for MLHostAssetParameters.CodingKeys;
}

ValueMetadata *type metadata accessor for MLHostSystemParameters.CodingKeys()
{
  return &type metadata for MLHostSystemParameters.CodingKeys;
}

uint64_t sub_2402AF2C4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t _s20LighthouseBackground21MLHostAssetParametersV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2402AF318 + 4 * byte_2402C7528[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2402AF34C + 4 * byte_2402C7523[v4]))();
}

uint64_t sub_2402AF34C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402AF354(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402AF35CLL);
  return result;
}

uint64_t sub_2402AF368(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402AF370);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2402AF374(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402AF37C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_2402AF388()
{
  JUMPOUT(0x2426820F8);
}

unint64_t sub_2402AF39C()
{
  unint64_t result;

  result = qword_256FE1280;
  if (!qword_256FE1280)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7CB8, &type metadata for MLHostSystemParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1280);
  }
  return result;
}

unint64_t sub_2402AF3E4()
{
  unint64_t result;

  result = qword_256FE1288;
  if (!qword_256FE1288)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7D70, &type metadata for MLHostAssetParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1288);
  }
  return result;
}

unint64_t sub_2402AF42C()
{
  unint64_t result;

  result = qword_256FE1290;
  if (!qword_256FE1290)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7D98, &type metadata for MLHostEmptyParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1290);
  }
  return result;
}

unint64_t sub_2402AF474()
{
  unint64_t result;

  result = qword_256FE1298;
  if (!qword_256FE1298)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7DC0, &type metadata for MLHostEmptyParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE1298);
  }
  return result;
}

unint64_t sub_2402AF4BC()
{
  unint64_t result;

  result = qword_256FE12A0;
  if (!qword_256FE12A0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7CE0, &type metadata for MLHostAssetParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE12A0);
  }
  return result;
}

unint64_t sub_2402AF504()
{
  unint64_t result;

  result = qword_256FE12A8;
  if (!qword_256FE12A8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7D08, &type metadata for MLHostAssetParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE12A8);
  }
  return result;
}

unint64_t sub_2402AF54C()
{
  unint64_t result;

  result = qword_256FE12B0;
  if (!qword_256FE12B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7C28, &type metadata for MLHostSystemParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE12B0);
  }
  return result;
}

unint64_t sub_2402AF594()
{
  unint64_t result;

  result = qword_256FE12B8;
  if (!qword_256FE12B8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C7C50, &type metadata for MLHostSystemParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE12B8);
  }
  return result;
}

void sub_2402AF5D8()
{
  JUMPOUT(0x2426820F8);
}

void sub_2402AF5E8()
{
  JUMPOUT(0x2426820F8);
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24268208C](a1, v6, a5);
}

uint64_t sub_2402AF678()
{
  return swift_task_switch();
}

uint64_t sub_2402AF68C()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  char *v3;
  id v4;

  v1 = (objc_class *)type metadata accessor for MLHostResult();
  v2 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = 0;
  v3 = &v2[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v1;
  v4 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t MLHostExtension.shouldRun(context:)()
{
  return swift_task_switch();
}

uint64_t sub_2402AF728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_2402716A8;
  return MLHostExtension.loadConfig<A>(context:)(a1, a2, v12, a3, v13, a4, a5);
}

uint64_t MLHostExtension.loadConfig<A>(context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a2;
  v7[7] = a4;
  v7[5] = a1;
  v8 = sub_2402BD234();
  v7[10] = v8;
  v7[11] = *(_QWORD *)(v8 - 8);
  v7[12] = swift_task_alloc();
  v9 = sub_2402BD240();
  v7[13] = v9;
  v7[14] = *(_QWORD *)(v9 - 8);
  v7[15] = swift_task_alloc();
  v10 = sub_2402BD36C();
  v7[16] = v10;
  v7[17] = *(_QWORD *)(v10 - 8);
  v7[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(qword_254352810);
  v7[19] = swift_task_alloc();
  v11 = sub_2402BD3A8();
  v7[20] = v11;
  v7[21] = *(_QWORD *)(v11 - 8);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2402AF8BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_t log;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  if (!*(_QWORD *)(v0[6] + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskFolder + 8))
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v25 = sub_2402BD4E0();
    __swift_project_value_buffer(v25, (uint64_t)qword_2543529A0);
    v26 = sub_2402BD4C8();
    v27 = sub_2402BD96C();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_18;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "TaskFolder missing.";
    goto LABEL_17;
  }
  v1 = v0[22];
  v39 = v0[23];
  v41 = v0[20];
  v2 = v0[18];
  v4 = v0[16];
  v3 = v0[17];
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v0[21] + 56))(v0[19], 1, 1);
  v5 = *MEMORY[0x24BDCD7A0];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  v6(v2, v5, v4);
  swift_bridgeObjectRetain();
  v0 = v44;
  sub_2402BD390();
  v44[2] = 0x6574656D61726170;
  v44[3] = 0xEF6E6F736A2E7372;
  v6(v2, v5, v4);
  sub_240232228();
  sub_2402BD39C();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_bridgeObjectRelease();
  v7 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
  v7(v1, v41);
  sub_2402BD384();
  v7(v39, v41);
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_defaultManager);
  v10 = (void *)sub_2402BD63C();
  v11 = objc_msgSend(v9, sel_fileExistsAtPath_, v10);

  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_2543528A0 != -1)
      swift_once();
    v30 = sub_2402BD4E0();
    __swift_project_value_buffer(v30, (uint64_t)qword_2543529A0);
    v26 = sub_2402BD4C8();
    v27 = sub_2402BD96C();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_18;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "ParameterFile missing.";
    goto LABEL_17;
  }
  v12 = objc_msgSend(v8, sel_defaultManager);
  v13 = (void *)sub_2402BD63C();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_contentsAtPath_, v13);

  if (!v14)
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v31 = sub_2402BD4E0();
    __swift_project_value_buffer(v31, (uint64_t)qword_2543529A0);
    v26 = sub_2402BD4C8();
    v27 = sub_2402BD96C();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_18;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    v29 = "ParameterFile invalid.";
LABEL_17:
    _os_log_impl(&dword_24022D000, v26, v27, v29, v28, 2u);
    MEMORY[0x242682188](v28, -1, -1);
LABEL_18:
    v33 = v0[8];
    v32 = v0[9];
    v34 = v0[7];
    v35 = v0[5];

    v36 = type metadata accessor for MLHostParameters(0, v34, v33, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    goto LABEL_19;
  }
  v16 = v44[14];
  v15 = v44[15];
  v17 = v44[12];
  v18 = v44[13];
  v20 = v44[10];
  v19 = v44[11];
  v42 = v44[9];
  log = (os_log_t)v44[7];
  v40 = v44[8];
  v21 = sub_2402BD3F0();
  v23 = v22;

  sub_2402BD27C();
  swift_allocObject();
  sub_2402BD270();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, *MEMORY[0x24BDCB1D8], v18);
  sub_2402BD258();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v17, *MEMORY[0x24BDCB1B8], v20);
  sub_2402BD24C();
  v24 = type metadata accessor for MLHostParameters(0, (uint64_t)log, v40, v42);
  MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostParameters<A>, v24);
  sub_2402BD264();
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v44[5], 0, 1, v24);
  swift_release();
  sub_24027F72C(v21, v23);
  v0 = v44;
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v0[1])();
}

id MLHostExtension.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  id result;

  result = sub_2402B2634(v4, a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_2402B0064(void *a1, uint64_t a2)
{
  id v3;

  objc_msgSend(a1, sel_setExportedObject_, a2);
  v3 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_256FF7310);
  objc_msgSend(a1, sel_setExportedInterface_, v3);

  objc_msgSend(a1, sel_resume);
  return 1;
}

void sub_2402B00EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *log;
  os_log_t loga;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;

  v3 = v2;
  type metadata accessor for SandboxExtension();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) = 1;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = qword_2543528A0;
  swift_bridgeObjectRetain();
  if (v7 != -1)
    swift_once();
  v8 = sub_2402BD4E0();
  __swift_project_value_buffer(v8, (uint64_t)qword_2543529A0);
  swift_retain_n();
  v9 = sub_2402BD4C8();
  v10 = sub_2402BD960();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v53 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_retain();
    v13 = SandboxExtension.description.getter();
    v14 = v3;
    v16 = v15;
    swift_release();
    v56 = (id)sub_24023D440(v13, v16, &v53);
    sub_2402BD9FC();
    swift_release_n();
    v3 = v14;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24022D000, v9, v10, "Processing sandbox extension: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242682188](v12, -1, -1);
    MEMORY[0x242682188](v11, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  SandboxExtension.consume()();
  if (v17)
  {
    v56 = v17;
    v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
    if (!swift_dynamicCast())
    {
LABEL_10:

      swift_bridgeObjectRetain_n();
      v22 = sub_2402BD4C8();
      v23 = sub_2402BD96C();
      log = v22;
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        v49 = swift_slowAlloc();
        v53 = v49;
        *(_DWORD *)v24 = 136315138;
        swift_bridgeObjectRetain();
        v25 = sub_2402B82D4(16);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        swift_bridgeObjectRelease();
        v32 = MEMORY[0x242681468](v25, v27, v29, v31);
        v34 = v33;
        swift_bridgeObjectRelease();
        v56 = (id)sub_24023D440(v32, v34, &v53);
        sub_2402BD9FC();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24022D000, log, v23, "Failed at consuming sandbox extension for token: %s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242682188](v49, -1, -1);
        MEMORY[0x242682188](v24, -1, -1);

        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release();

      }
      return;
    }
    v20 = v53;
    v19 = v54;
    v21 = v55;
    if ((unint64_t)(v55 - 1) < 2)
    {
      sub_2402B3314(v53, v54, v55);
      goto LABEL_10;
    }

    swift_bridgeObjectRetain();
    v44 = sub_2402BD4C8();
    v45 = sub_2402BD96C();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc();
      loga = (os_log_t)swift_slowAlloc();
      v52 = loga;
      *(_DWORD *)v46 = 67109378;
      sub_2402BD9FC();
      *(_WORD *)(v46 + 8) = 2080;
      if (v21)
        v47 = v19;
      else
        v47 = 0;
      if (v21)
        v48 = v21;
      else
        v48 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_24023D440(v47, v48, (uint64_t *)&v52);
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      sub_2402B3314(v20, v19, v21);
      sub_2402B3314(v20, v19, v21);
      _os_log_impl(&dword_24022D000, v44, v45, "Failed at consuming sandbox extension: %d %s", (uint8_t *)v46, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x242682188](loga, -1, -1);
      MEMORY[0x242682188](v46, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      sub_2402B3314(v20, v19, v21);
      sub_2402B3314(v20, v19, v21);
    }

  }
  else
  {
    v35 = (_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v3) + 0x68));
    swift_beginAccess();
    v36 = swift_retain();
    MEMORY[0x242681558](v36);
    if (*(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_2402BD7E0();
    sub_2402BD810();
    sub_2402BD7C8();
    swift_endAccess();
    swift_retain_n();
    v37 = sub_2402BD4C8();
    v38 = sub_2402BD960();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v53 = v40;
      *(_DWORD *)v39 = 136315138;
      swift_retain();
      v41 = SandboxExtension.description.getter();
      v43 = v42;
      swift_release();
      v56 = (id)sub_24023D440(v41, v43, &v53);
      sub_2402BD9FC();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24022D000, v37, v38, "Consumed sandbox extension: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242682188](v40, -1, -1);
      MEMORY[0x242682188](v39, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t sub_2402B088C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;

  v2 = sub_2402BD648();
  v4 = v3;
  v5 = a1;
  sub_2402B00EC(v2, v4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_2402B08E0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v10;
  _QWORD *v11;

  v7[18] = a6;
  v7[19] = a7;
  v7[16] = a4;
  v7[17] = a5;
  v10 = *MEMORY[0x24BEE4EA0];
  v7[20] = *a4;
  v7[21] = v10;
  v11 = (_QWORD *)swift_task_alloc();
  v7[22] = v11;
  *v11 = v7;
  v11[1] = sub_2402B0964;
  return sub_2402B1698((uint64_t)(v7 + 2), a4, a5);
}

uint64_t sub_2402B0964()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402B09B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int *v13;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 273) = *(_BYTE *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 192) = v2;
  *(_QWORD *)(v0 + 200) = v1;
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 208) = v3;
  *(_QWORD *)(v0 + 216) = v4;
  if (v1)
  {
    sub_2402AACF8(v2, v1);
    v12 = (char *)&dword_256FDEDB8 + dword_256FDEDB8;
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v5;
    *v5 = v0;
    v5[1] = sub_2402B0AF8;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v12)(*(_QWORD *)(v0 + 136), v2, v1, v3, v4);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160) & *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v7 + 0x58);
    *(_QWORD *)(v0 + 240) = v8;
    v9 = *(int **)(v8 + 16);
    v10 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)(v0 + 248) = v10;
    v13 = (int *)((char *)v9 + *v9);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v11;
    *v11 = v0;
    v11[1] = sub_2402B1160;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v13)(*(_QWORD *)(v0 + 136), v10, v8);
  }
}

uint64_t sub_2402B0AF8(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  *(_QWORD *)(*v2 + 232) = v1;
  swift_task_dealloc();
  v5 = *(_QWORD *)(v4 + 192);
  v6 = *(_QWORD *)(v4 + 200);
  if (!v1)
    *(_BYTE *)(v4 + 274) = a1 & 1;
  sub_2402AB640(v5, v6);
  return swift_task_switch();
}

uint64_t sub_2402B0B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  char *v14;
  id v15;
  int *v16;

  if ((*(_BYTE *)(v0 + 274) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 160) & *(_QWORD *)(v0 + 168);
    v2 = *(_QWORD *)(v1 + 0x58);
    *(_QWORD *)(v0 + 240) = v2;
    v3 = *(int **)(v2 + 16);
    v4 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v0 + 248) = v4;
    v16 = (int *)((char *)v3 + *v3);
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v5;
    *v5 = v0;
    v5[1] = sub_2402B1160;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v16)(*(_QWORD *)(v0 + 136), v4, v2);
  }
  else
  {
    sub_2402AB640(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
    if (qword_2543528A0 != -1)
      swift_once();
    v7 = sub_2402BD4E0();
    __swift_project_value_buffer(v7, (uint64_t)qword_2543529A0);
    v8 = sub_2402BD4C8();
    v9 = sub_2402BD954();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_24022D000, v8, v9, "MobileAsset not available. Rescheduling.", v10, 2u);
      MEMORY[0x242682188](v10, -1, -1);
    }
    v12 = *(uint64_t (**)(uint64_t))(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 136);

    v14 = (char *)objc_allocWithZone((Class)type metadata accessor for MLHostResult());
    v15 = sub_2402B2394(1, 1, v14);
    sub_2402B28F8((uint64_t)v15, v13, v12, v11);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2402B0D58()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  void *v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  char *v33;
  id v34;

  v1 = *(void **)(v0 + 232);
  sub_2402AB640(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  *(_QWORD *)(v0 + 104) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEEB8);
  if ((swift_dynamicCast() & 1) != 0)
  {

    v3 = *(_BYTE *)(v0 + 272);
    if (qword_2543528A0 != -1)
      swift_once();
    v4 = sub_2402BD4E0();
    __swift_project_value_buffer(v4, (uint64_t)qword_2543529A0);
    v5 = sub_2402BD4C8();
    v6 = sub_2402BD96C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      sub_2402539A8();
      swift_allocError();
      *v9 = v3;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 120) = v10;
      sub_2402BD9FC();
      *v8 = v10;
      _os_log_impl(&dword_24022D000, v5, v6, "Got MLHostError while accessing MAAutoAsset: %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v8, -1, -1);
      MEMORY[0x242682188](v7, -1, -1);
    }
    v12 = *(uint64_t (**)(uint64_t))(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 136);

    v14 = (char *)objc_allocWithZone((Class)type metadata accessor for MLHostResult());
    v15 = sub_2402B21A0(v3, 1, v14);
    sub_2402B28F8((uint64_t)v15, v13, v12, v11);

    v16 = *(void **)(v0 + 104);
  }
  else
  {

    if (qword_2543528A0 != -1)
      swift_once();
    v17 = *(void **)(v0 + 232);
    v18 = sub_2402BD4E0();
    __swift_project_value_buffer(v18, (uint64_t)qword_2543529A0);
    v19 = v17;
    v20 = v17;
    v21 = sub_2402BD4C8();
    v22 = sub_2402BD96C();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(void **)(v0 + 232);
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      v27 = v24;
      v28 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v0 + 112) = v28;
      sub_2402BD9FC();
      *v26 = v28;

      _os_log_impl(&dword_24022D000, v21, v22, "Got unexpected non-MLHostError while accessing MAAutoAsset: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256FE0BE0);
      swift_arrayDestroy();
      MEMORY[0x242682188](v26, -1, -1);
      MEMORY[0x242682188](v25, -1, -1);
    }
    else
    {

    }
    v29 = *(void **)(v0 + 232);
    v31 = *(uint64_t (**)(uint64_t))(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 136);

    v33 = (char *)objc_allocWithZone((Class)type metadata accessor for MLHostResult());
    v34 = sub_2402B2394(2, 1, v33);
    sub_2402B28F8((uint64_t)v34, v32, v31, v30);

    v16 = v29;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2402B1160(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402B11BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  id v41;
  uint64_t v42;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy);
  sub_2402AB640(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  if (v1)
  {
    if (qword_2543528A0 != -1)
      swift_once();
    v2 = sub_2402BD4E0();
    __swift_project_value_buffer(v2, (uint64_t)qword_2543529A0);
    v3 = sub_2402BD4C8();
    v4 = sub_2402BD954();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_24022D000, v3, v4, "Extension indicated shouldRun() = false.", v5, 2u);
      MEMORY[0x242682188](v5, -1, -1);
    }
    v6 = *(void **)(v0 + 264);
    v8 = *(uint64_t (**)(uint64_t))(v0 + 144);
    v7 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 136);

    v10 = (uint64_t)v6;
    v11 = v9;
    v12 = v8;
    v13 = v7;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v0 + 273) & 1) != 0)
  {
LABEL_18:
    v6 = *(void **)(v0 + 264);
    v12 = *(uint64_t (**)(uint64_t))(v0 + 144);
    v13 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 136);
    v10 = (uint64_t)v6;
LABEL_19:
    sub_2402B28F8(v10, v11, v12, v13);
    goto LABEL_20;
  }
  if (qword_2543528A0 != -1)
    swift_once();
  v14 = *(void **)(v0 + 136);
  v15 = sub_2402BD4E0();
  __swift_project_value_buffer(v15, (uint64_t)qword_2543529A0);
  v16 = v14;
  v17 = sub_2402BD4C8();
  v18 = sub_2402BD954();
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(char **)(v0 + 136);
  if (v19)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v42 = v22;
    *(_DWORD *)v21 = 136315138;
    v24 = *(_QWORD *)&v20[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId];
    v23 = *(_QWORD *)&v20[OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId + 8];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 96) = sub_24023D440(v24, v23, &v42);
    sub_2402BD9FC();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24022D000, v17, v18, "Evaluating system sampling condition for task: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242682188](v22, -1, -1);
    MEMORY[0x242682188](v21, -1, -1);
  }
  else
  {

  }
  v25 = sub_2402B2118(0x20000000000001uLL);
  v26 = *(double *)(v0 + 184);
  if (v25 == 0x20000000000000)
  {
    v27 = 1.0;
    if (v26 >= 1.0)
    {
LABEL_15:
      v28 = sub_2402BD4C8();
      v29 = sub_2402BD954();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v30 = 134217984;
        *(double *)(v0 + 80) = v27;
        sub_2402BD9FC();
        _os_log_impl(&dword_24022D000, v28, v29, "Device has been selected for execution this time. Executing. Score: %f", v30, 0xCu);
        MEMORY[0x242682188](v30, -1, -1);
      }

      goto LABEL_18;
    }
  }
  else
  {
    v27 = (double)v25 * 1.11022302e-16 + 0.0;
    if (v26 >= v27)
      goto LABEL_15;
  }
  v32 = sub_2402BD4C8();
  v33 = sub_2402BD954();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v34 = 134217984;
    *(double *)(v0 + 88) = v27;
    sub_2402BD9FC();
    _os_log_impl(&dword_24022D000, v32, v33, "Device has not been selected for execution this time. Rescheduling. Score: %f", v34, 0xCu);
    MEMORY[0x242682188](v34, -1, -1);
  }
  v6 = *(void **)(v0 + 264);
  v36 = *(uint64_t (**)(uint64_t))(v0 + 144);
  v35 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 136);

  v38 = (objc_class *)type metadata accessor for MLHostResult();
  v39 = (char *)objc_allocWithZone(v38);
  *(_QWORD *)&v39[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 2;
  *(_QWORD *)&v39[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = 1;
  v40 = &v39[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  *(_QWORD *)(v0 + 64) = v39;
  *(_QWORD *)(v0 + 72) = v38;
  v41 = objc_msgSendSuper2((objc_super *)(v0 + 64), sel_init);
  sub_2402B28F8((uint64_t)v41, v37, v36, v35);

LABEL_20:
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2402B1698(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v11)(uint64_t, uint64_t, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 64) = a1;
  v5 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a2) + 0x58);
  v6 = *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *a2) + 0x50);
  v11 = (uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, unint64_t, unint64_t, uint64_t, uint64_t))(**(int **)(v5 + 32) + *(_QWORD *)(v5 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 72) = v7;
  v8 = sub_2402B328C();
  v9 = sub_2402B32D0();
  *v7 = v3;
  v7[1] = sub_2402B1760;
  return v11(v3 + 16, a3, &type metadata for MLHostEmptyParameters, v8, v9, v6, v5);
}

uint64_t sub_2402B1760()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402B17B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1 == 1)
  {
    v2 = 0;
    v3 = 0;
    v1 = 0;
    v4 = 0uLL;
    v5 = 1;
  }
  else
  {
    v4 = *(_OWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 32);
    v2 = *(_QWORD *)(v0 + 16);
    v5 = *(_BYTE *)(v0 + 24) & 1;
  }
  v6 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)v6 = v2;
  *(_BYTE *)(v6 + 8) = v5;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v1;
  *(_OWORD *)(v6 + 32) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2402B1808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_2402BD8AC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_2402BD8A0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_240272C98(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_2402BD870();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_2402B194C(void *a1, int a2, void *a3, void *a4)
{
  return sub_2402B1BE4(a1, a2, a3, a4, (uint64_t)&unk_2510927F0, (uint64_t)sub_2402B3338, (uint64_t)&unk_251092818, (uint64_t)&unk_256FE1380);
}

uint64_t sub_2402B1970(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  uint64_t v18;

  v10 = __swift_instantiateConcreteTypeFromMangledName(qword_2543528B0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_2402BD8AC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v5;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v15 = v5;
  v16 = a1;
  swift_retain();
  *(_QWORD *)((char *)v15 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v15) + 0x70)) = sub_2402B1808((uint64_t)v12, a5, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_2402B1A80(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  v9 = *MEMORY[0x24BEE4EA0] & *a4;
  v10 = *(_QWORD *)(v9 + 0x58);
  v7[5] = v10;
  v11 = *(int **)(v10 + 24);
  v12 = *(_QWORD *)(v9 + 80);
  v7[6] = v12;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v13 = (_QWORD *)swift_task_alloc();
  v7[7] = v13;
  *v13 = v7;
  v13[1] = sub_2402B1B20;
  return v15(a5, v12, v10);
}

uint64_t sub_2402B1B20(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2402B1B7C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);
  sub_2402B28F8((uint64_t)v1, *(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_2402B1BC0(void *a1, int a2, void *a3, void *a4)
{
  return sub_2402B1BE4(a1, a2, a3, a4, (uint64_t)&unk_251092728, (uint64_t)sub_2402B2E08, (uint64_t)&unk_251092750, (uint64_t)&unk_256FE1360);
}

uint64_t sub_2402B1BE4(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v13;
  uint64_t v14;
  id v15;
  id v16;

  v13 = _Block_copy(aBlock);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v13;
  v15 = a3;
  v16 = a1;
  sub_2402B1970(v15, a6, v14, a7, a8);

  return swift_release();
}

void sub_2402B1C88()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (qword_2543528A0 != -1)
    swift_once();
  v2 = sub_2402BD4E0();
  __swift_project_value_buffer(v2, (uint64_t)qword_2543529A0);
  v3 = sub_2402BD4C8();
  v4 = sub_2402BD954();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_24022D000, v3, v4, "Extension asked to stop!", v5, 2u);
    MEMORY[0x242682188](v5, -1, -1);
  }

  if (*(_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v1) + 0x70)))
  {
    swift_retain();
    sub_2402BD8B8();
    swift_release();
  }
}

void sub_2402B1DB4(void *a1)
{
  id v1;

  v1 = a1;
  sub_2402B1C88();

}

unint64_t TaskErrorEvent.coreAnalyticsDictionary.getter()
{
  unint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v0 = sub_24024916C(MEMORY[0x24BEE4AF8]);
  type metadata accessor for TaskErrorEvent(0);
  sub_24029AB4C();
  v1 = sub_2402BD63C();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v1, 0x6D61745365746164, 0xE900000000000070, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = sub_2402BD63C();
  v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v3, 0x656D614E6B736174, 0xE800000000000000, v4);
  swift_bridgeObjectRelease();
  v5 = sub_2402BD63C();
  v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_24025A170(v5, 0x73654D726F727265, 0xEC00000065676173, v6);
  swift_bridgeObjectRelease();
  return v0;
}

id sub_2402B1F44(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_2402B30FC();
    v4 = (void *)sub_2402BD570();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

void sub_2402B1FB8()
{
  sub_2402B2DB8();
}

uint64_t sub_2402B1FD4(char *a1)
{
  (*(void (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x50) - 8) + 8))(&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x60)]);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_2402B2048(void *a1)
{
  uint64_t *v1;

  sub_2402B0064(a1, *v1);
  return 1;
}

uint64_t sub_2402B2068(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_2402B20CC;
  return v6(a1);
}

uint64_t sub_2402B20CC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_2402B2118(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x242682194](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x242682194](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_2402B21A0(char a1, uint64_t a2, char *a3)
{
  unint64_t v6;
  objc_class *ObjectType;
  _QWORD *v8;
  uint64_t *boxed_opaque_existential_0Tm;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  objc_super v19;
  uint64_t v20[5];
  _QWORD v21[5];

  v6 = 0xD000000000000014;
  ObjectType = (objc_class *)swift_getObjectType();
  v21[3] = &type metadata for MLHostAssetError;
  v21[4] = sub_2402B3204();
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 0;
  LOBYTE(v21[0]) = a1;
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = a2;
  v8 = __swift_project_boxed_opaque_existential_1(v21, (uint64_t)&type metadata for MLHostAssetError);
  v20[3] = swift_getAssociatedTypeWitness();
  v20[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v20);
  if (*(_BYTE *)v8)
  {
    if (*(_BYTE *)v8 == 1)
    {
      v6 = 0xD00000000000001ELL;
      v10 = "failedToExpressInterestInAsset";
    }
    else
    {
      v6 = 0xD000000000000023;
      v10 = "failedToGetMAAutoAssetCurrentStatus";
    }
  }
  else
  {
    v10 = "failedToGetAutoAsset";
  }
  *boxed_opaque_existential_0Tm = v6;
  boxed_opaque_existential_0Tm[1] = (unint64_t)(v10 - 32) | 0x8000000000000000;
  MEMORY[0x24BDAC7A8](boxed_opaque_existential_0Tm);
  (*(void (**)(char *))(v12 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a3;
  v14 = sub_2402BD714();
  v15 = (uint64_t *)&v13[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *v15 = v14;
  v15[1] = v16;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v19.receiver = v13;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v17;
}

id sub_2402B2394(char a1, uint64_t a2, char *a3)
{
  unint64_t v6;
  objc_class *ObjectType;
  _QWORD *v8;
  uint64_t *boxed_opaque_existential_0Tm;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  objc_super v19;
  uint64_t v20[5];
  _QWORD v21[5];

  v6 = 0xD000000000000011;
  ObjectType = (objc_class *)swift_getObjectType();
  v21[3] = &type metadata for MLHostCommonError;
  v21[4] = sub_2402B3248();
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status] = 0;
  LOBYTE(v21[0]) = a1;
  *(_QWORD *)&a3[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_policy] = a2;
  v8 = __swift_project_boxed_opaque_existential_1(v21, (uint64_t)&type metadata for MLHostCommonError);
  v20[3] = swift_getAssociatedTypeWitness();
  v20[4] = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v20);
  if (*(_BYTE *)v8)
  {
    if (*(_BYTE *)v8 == 1)
    {
      v6 = 0xD000000000000016;
      v10 = "mobileAssetUnavailable";
    }
    else
    {
      v10 = "mobileAssetFailed";
    }
  }
  else
  {
    v6 = 0xD000000000000019;
    v10 = "extensionInvocationFailed";
  }
  *boxed_opaque_existential_0Tm = v6;
  boxed_opaque_existential_0Tm[1] = (unint64_t)(v10 - 32) | 0x8000000000000000;
  MEMORY[0x24BDAC7A8](boxed_opaque_existential_0Tm);
  (*(void (**)(char *))(v12 + 16))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a3;
  v14 = sub_2402BD714();
  v15 = (uint64_t *)&v13[OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error];
  *v15 = v14;
  v15[1] = v16;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  v19.receiver = v13;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v17;
}

id sub_2402B2588(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  _QWORD *v4;
  uint64_t v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *MEMORY[0x24BEE4EA0] & *(_QWORD *)v1;
  *(_QWORD *)&v1[*(_QWORD *)(v5 + 0x68)] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v1[*(_QWORD *)((*v4 & *(_QWORD *)v1) + 0x70)] = 0;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 16))(&v1[*(_QWORD *)((*v4 & *(_QWORD *)v1) + 0x60)], a1);
  v7.receiver = v1;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id sub_2402B2634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;

  v5 = objc_allocWithZone((Class)type metadata accessor for _MLHostExtensionConfiguration.ExportedObject(0, a2, a3, a4));
  return sub_2402B2588(a1);
}

uint64_t dispatch thunk of MLHostExtension.shouldRun(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_2402B332C;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of MLHostExtension.doWork(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_240250760;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of MLHostExtension.loadConfig<A>(context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 32)
                                                                                              + *(_QWORD *)(a7 + 32));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_240272D3C;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2402B2804()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for _MLHostExtensionConfiguration.ExportedObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MLHostExtensionConfiguration.ExportedObject);
}

void sub_2402B2898(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _MLHostExtensionConfiguration(255, *a1, a1[1], a4);
  JUMPOUT(0x2426820F8);
}

uint64_t type metadata accessor for _MLHostExtensionConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _MLHostExtensionConfiguration);
}

uint64_t sub_2402B28CC(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x2426820F8](&unk_2402C8088);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2402B28F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[2];
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t aBlock[7];

  v60 = a4;
  v7 = (int *)type metadata accessor for TaskErrorEvent(0);
  v58 = *((_QWORD *)v7 - 1);
  v8 = *(_QWORD *)(v58 + 64);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v59 = (uint64_t)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v57 = (uint64_t)v50 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (_QWORD *)((char *)v50 - v12);
  v14 = sub_2402BD48C();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)v50 - v20;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_status))
    return a3(a1);
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error + 8);
  if (!v23)
    return a3(a1);
  v54 = a1;
  v56 = (void (*)(uint64_t))a3;
  v51 = *(_QWORD *)(a1 + OBJC_IVAR____TtC20LighthouseBackground12MLHostResult_error);
  v24 = v19;
  swift_bridgeObjectRetain();
  sub_2402BD468();
  sub_2402BD408();
  v52 = *(void (**)(char *, uint64_t))(v15 + 8);
  v52(v21, v24);
  sub_2402BD3FC();
  v26 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId);
  v25 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskId + 8);
  v27 = (char *)v13 + v7[5];
  v28 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v53 = v18;
  v55 = v24;
  v28(v27, v18, v24);
  v29 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName);
  v30 = *(_QWORD *)(a2 + OBJC_IVAR____TtC20LighthouseBackground22MLHostExtensionContext_taskName + 8);
  *v13 = v26;
  v13[1] = v25;
  v31 = (_QWORD *)((char *)v13 + v7[6]);
  *v31 = v29;
  v31[1] = v30;
  v32 = (_QWORD *)((char *)v13 + v7[7]);
  *v32 = v51;
  v32[1] = v23;
  v33 = qword_2543528A0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v33 != -1)
    swift_once();
  v34 = sub_2402BD4E0();
  __swift_project_value_buffer(v34, (uint64_t)qword_2543529A0);
  v35 = v57;
  sub_2402B2F3C((uint64_t)v13, v57);
  v36 = sub_2402BD4C8();
  v37 = sub_2402BD960();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v51 = swift_slowAlloc();
    aBlock[0] = v51;
    *(_DWORD *)v38 = 136315138;
    v50[1] = v38 + 4;
    TaskErrorEvent.coreAnalyticsDictionary.getter();
    sub_2402B30FC();
    v39 = sub_2402BD588();
    v41 = v40;
    swift_bridgeObjectRelease();
    v61 = sub_24023D440(v39, v41, aBlock);
    sub_2402BD9FC();
    swift_bridgeObjectRelease();
    sub_2402B2F80(v35);
    _os_log_impl(&dword_24022D000, v36, v37, "Sending Error: %s", v38, 0xCu);
    v42 = v51;
    swift_arrayDestroy();
    MEMORY[0x242682188](v42, -1, -1);
    MEMORY[0x242682188](v38, -1, -1);
  }
  else
  {
    sub_2402B2F80(v35);
  }

  v43 = v56;
  v44 = v54;
  v45 = (void *)sub_2402BD63C();
  v46 = v59;
  sub_2402B2F3C((uint64_t)v13, v59);
  v47 = (*(unsigned __int8 *)(v58 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  v48 = swift_allocObject();
  sub_2402B3068(v46, v48 + v47);
  aBlock[4] = (uint64_t)sub_2402B30AC;
  aBlock[5] = v48;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_2402B1F44;
  aBlock[3] = (uint64_t)&block_descriptor_5;
  v49 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v49);

  v43(v44);
  sub_2402B2F80((uint64_t)v13);
  return ((uint64_t (*)(char *, uint64_t))v52)(v53, v55);
}

void sub_2402B2DB8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2402B2DE4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_2402B2E08()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_2402B2E1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_240272D3C;
  return sub_2402B1A80(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_2402B2EA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2402B2ECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2402716A8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_256FE1368 + dword_256FE1368))(a1, v4);
}

uint64_t sub_2402B2F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TaskErrorEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2402B2F80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TaskErrorEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2402B2FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for TaskErrorEvent(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  v4 = v3 + *(int *)(v1 + 20);
  v5 = sub_2402BD48C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2402B3068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TaskErrorEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_2402B30AC()
{
  type metadata accessor for TaskErrorEvent(0);
  return TaskErrorEvent.coreAnalyticsDictionary.getter();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t sub_2402B30FC()
{
  unint64_t result;

  result = qword_254352730;
  if (!qword_254352730)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254352730);
  }
  return result;
}

uint64_t objectdestroy_7Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2402B3178(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_240272D3C;
  return sub_2402B08E0(a1, v4, v5, v6, v7, v9, v8);
}

unint64_t sub_2402B3204()
{
  unint64_t result;

  result = qword_256FE1390;
  if (!qword_256FE1390)
  {
    result = MEMORY[0x2426820F8](&unk_2402C0CC4, &type metadata for MLHostAssetError);
    atomic_store(result, (unint64_t *)&qword_256FE1390);
  }
  return result;
}

unint64_t sub_2402B3248()
{
  unint64_t result;

  result = qword_256FE1398;
  if (!qword_256FE1398)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostCommonError, &type metadata for MLHostCommonError);
    atomic_store(result, (unint64_t *)&qword_256FE1398);
  }
  return result;
}

unint64_t sub_2402B328C()
{
  unint64_t result;

  result = qword_254352788[0];
  if (!qword_254352788[0])
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostEmptyParameters, &type metadata for MLHostEmptyParameters);
    atomic_store(result, qword_254352788);
  }
  return result;
}

unint64_t sub_2402B32D0()
{
  unint64_t result;

  result = qword_254352780;
  if (!qword_254352780)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for MLHostEmptyParameters, &type metadata for MLHostEmptyParameters);
    atomic_store(result, (unint64_t *)&qword_254352780);
  }
  return result;
}

uint64_t sub_2402B3314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if ((unint64_t)(a3 - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t currentDataVersion.getter()
{
  return 1;
}

LighthouseBackground::LHStreams_optional __swiftcall LHStreams.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  LighthouseBackground::LHStreams_optional result;
  char v5;

  v2 = v1;
  v3 = sub_2402BDBA0();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static LHStreams.allCases.getter()
{
  return &unk_25108C1D8;
}

uint64_t LHStreams.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402B33DC + 4 * byte_2402C80D0[*v0]))(0x746174536B736154, 0xEA00000000007375);
}

uint64_t sub_2402B33DC()
{
  return 0x6F7272456B736154;
}

uint64_t sub_2402B33F8()
{
  return 0x656C65546B736154;
}

uint64_t sub_2402B341C()
{
  return 0x6554656369766544;
}

void sub_2402B3440(char *a1)
{
  sub_240234A74(*a1);
}

void sub_2402B344C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_2402B349C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

void sub_2402B3528()
{
  __asm { BR              X10 }
}

uint64_t sub_2402B3568()
{
  sub_2402BD6A8();
  return swift_bridgeObjectRelease();
}

void sub_2402B35E0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_2402BDE04();
  __asm { BR              X9 }
}

uint64_t sub_2402B362C()
{
  sub_2402BD6A8();
  swift_bridgeObjectRelease();
  return sub_2402BDE34();
}

LighthouseBackground::LHStreams_optional sub_2402B36B8(Swift::String *a1)
{
  return LHStreams.init(rawValue:)(*a1);
}

uint64_t sub_2402B36C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_2402B36F8 + 4 * byte_2402C80E0[*v0]))();
}

void sub_2402B36F8(_QWORD *a1@<X8>)
{
  *a1 = 0x6F7272456B736154;
  a1[1] = 0xE900000000000072;
}

void sub_2402B3718(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "TaskTelemetry");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_2402B3740(_QWORD *a1@<X8>)
{
  *a1 = 0x6554656369766544;
  a1[1] = 0xEF797274656D656CLL;
}

void sub_2402B3768(_QWORD *a1@<X8>)
{
  *a1 = &unk_25108B078;
}

uint64_t sub_2402B37BC()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_2402B3848(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_2402B3890())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

double sub_2402B38D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_2402B3918(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;

  v3 = (double *)(v1 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*sub_2402B3968())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_2402B39AC()
{
  return sub_2402B3A78(&OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType);
}

uint64_t sub_2402B39B8(uint64_t a1, uint64_t a2)
{
  return sub_2402B3AD4(a1, a2, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType);
}

uint64_t (*sub_2402B39C4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_2402B3A08(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v6 = *a1;
  v5 = a1[1];
  v7 = (_QWORD *)(*a2 + *a5);
  swift_beginAccess();
  *v7 = v6;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2402B3A6C()
{
  return sub_2402B3A78(&OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload);
}

uint64_t sub_2402B3A78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_2402B3AC8(uint64_t a1, uint64_t a2)
{
  return sub_2402B3AD4(a1, a2, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload);
}

uint64_t sub_2402B3AD4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_2402B3B2C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id LHStoreItem.__allocating_init(dataVersion:messageTimestamp:messageType:messagePayload:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  objc_class *v6;
  char *v13;
  char *v14;
  char *v15;
  objc_super v17;

  v13 = (char *)objc_allocWithZone(v6);
  *(_DWORD *)&v13[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion] = a1;
  *(double *)&v13[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp] = a6;
  v14 = &v13[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  v15 = &v13[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload];
  *(_QWORD *)v15 = a4;
  *((_QWORD *)v15 + 1) = a5;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

id LHStoreItem.init(dataVersion:messageTimestamp:messageType:messagePayload:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  char *v6;
  char *v7;
  char *v8;
  objc_super v10;

  *(_DWORD *)&v6[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion] = a1;
  *(double *)&v6[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp] = a6;
  v7 = &v6[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType];
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  v8 = &v6[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload];
  *(_QWORD *)v8 = a4;
  *((_QWORD *)v8 + 1) = a5;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for LHStoreItem();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t type metadata accessor for LHStoreItem()
{
  return objc_opt_self();
}

uint64_t static LHStoreItem.event(with:dataVersion:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[2];

  v4 = sub_2402BD234();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_2402BD240();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = 0;
  if (a3 == 1)
  {
    sub_2402BD27C();
    swift_allocObject();
    sub_2402BD270();
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BDCB1D8], v8);
    sub_2402BD258();
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BDCB1B8], v4);
    sub_2402BD24C();
    sub_2402B402C(&qword_2543526C0, (uint64_t)&protocol conformance descriptor for LHStoreItem);
    sub_2402BD264();
    swift_release();
    return v13[1];
  }
  return result;
}

uint64_t sub_2402B3EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = sub_2402BD2AC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_2402BD2B8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402BD2F4();
  swift_allocObject();
  sub_2402BD2E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BDCB358], v5);
  sub_2402BD2D0();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCB320], v1);
  sub_2402BD2C4();
  v12 = v0;
  type metadata accessor for LHStoreItem();
  sub_2402B402C(&qword_2543526B8, (uint64_t)&protocol conformance descriptor for LHStoreItem);
  v9 = sub_2402BD2DC();
  swift_release();
  return v9;
}

uint64_t sub_2402B402C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LHStoreItem();
    result = MEMORY[0x2426820F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id LHStoreItem.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LHStoreItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_2402B4150()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402B4188 + 4 * byte_2402C80E4[*v0]))(0x7372655661746164, 0xEB000000006E6F69);
}

unint64_t sub_2402B4188()
{
  return 0xD000000000000010;
}

uint64_t sub_2402B41A4()
{
  return 0x546567617373656DLL;
}

uint64_t sub_2402B41C4()
{
  return 0x506567617373656DLL;
}

uint64_t sub_2402B41E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402B4E50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402B420C()
{
  sub_2402B450C();
  return sub_2402BDE88();
}

uint64_t sub_2402B4234()
{
  sub_2402B450C();
  return sub_2402BDE94();
}

id LHStoreItem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LHStoreItem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2402B42CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[88];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352720);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402B450C();
  sub_2402BDE70();
  swift_beginAccess();
  v8[64] = 0;
  sub_2402BDD44();
  if (v1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  swift_beginAccess();
  v8[40] = 1;
  sub_2402BDD14();
  swift_beginAccess();
  v8[16] = 2;
  swift_bridgeObjectRetain();
  sub_2402BDCFC();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8[15] = 3;
  swift_bridgeObjectRetain();
  sub_2402BDCFC();
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  return swift_bridgeObjectRelease();
}

unint64_t sub_2402B450C()
{
  unint64_t result;

  result = qword_254352698;
  if (!qword_254352698)
  {
    result = MEMORY[0x2426820F8](&unk_2402C8324, &type metadata for LHStoreItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254352698);
  }
  return result;
}

id LHStoreItem.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return LHStoreItem.init(from:)(a1);
}

id LHStoreItem.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  objc_super v25;
  char v26;

  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_254352710);
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  sub_2402B450C();
  v24 = v1;
  sub_2402BDE64();
  if (v2)
  {
    v20 = v24;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);

    type metadata accessor for LHStoreItem();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v26 = 0;
    v8 = v22;
    v9 = sub_2402BDC6C();
    v11 = v24;
    *(_DWORD *)&v24[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion] = v9;
    v26 = 1;
    sub_2402BDC3C();
    *(_QWORD *)&v11[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp] = v12;
    v26 = 2;
    v13 = sub_2402BDC24();
    v14 = (uint64_t *)&v11[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType];
    *v14 = v13;
    v14[1] = v15;
    v26 = 3;
    v16 = sub_2402BDC24();
    v17 = (uint64_t *)&v11[OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload];
    *v17 = v16;
    v17[1] = v18;

    v19 = (objc_class *)type metadata accessor for LHStoreItem();
    v25.receiver = v11;
    v25.super_class = v19;
    v20 = objc_msgSendSuper2(&v25, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  return v20;
}

unint64_t sub_2402B47F0()
{
  unint64_t result;

  result = qword_256FE13C8;
  if (!qword_256FE13C8)
  {
    result = MEMORY[0x2426820F8](&protocol conformance descriptor for LHStreams, &type metadata for LHStreams);
    atomic_store(result, (unint64_t *)&qword_256FE13C8);
  }
  return result;
}

unint64_t sub_2402B4838()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256FE13D0;
  if (!qword_256FE13D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_256FE13D8);
    result = MEMORY[0x2426820F8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256FE13D0);
  }
  return result;
}

id sub_2402B4884@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id result;

  v5 = objc_allocWithZone((Class)type metadata accessor for LHStoreItem());
  result = LHStoreItem.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_2402B48D4(_QWORD *a1)
{
  return sub_2402B42CC(a1);
}

uint64_t sub_2402B48F4@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(*a1 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_2402B4944(int *a1, _QWORD *a2)
{
  int v2;
  _DWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_DWORD *)(*a2 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_dataVersion);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

double sub_2402B4990@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double *v3;
  double result;

  v3 = (double *)(*a1 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp);
  swift_beginAccess();
  result = *v3;
  *a2 = *(_QWORD *)v3;
  return result;
}

uint64_t sub_2402B49E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageTimestamp);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_2402B4A34@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_3Tm(a1, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType, a2);
}

uint64_t sub_2402B4A40(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2402B3A08(a1, a2, a3, a4, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messageType);
}

uint64_t sub_2402B4A5C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_3Tm(a1, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload, a2);
}

uint64_t keypath_get_3Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(*a1 + *a2);
  swift_beginAccess();
  v5 = v4[1];
  *a3 = *v4;
  a3[1] = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2402B4AB8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_2402B3A08(a1, a2, a3, a4, &OBJC_IVAR____TtC20LighthouseBackground11LHStoreItem_messagePayload);
}

ValueMetadata *type metadata accessor for LHStreams()
{
  return &type metadata for LHStreams;
}

uint64_t method lookup function for LHStoreItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LHStoreItem.dataVersion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of LHStoreItem.dataVersion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of LHStoreItem.dataVersion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of LHStoreItem.messageTimestamp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of LHStoreItem.messageTimestamp.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of LHStoreItem.messageTimestamp.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of LHStoreItem.messageType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of LHStoreItem.messageType.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of LHStoreItem.messageType.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of LHStoreItem.messagePayload.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of LHStoreItem.messagePayload.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of LHStoreItem.messagePayload.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of LHStoreItem.__allocating_init(dataVersion:messageTimestamp:messageType:messagePayload:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of LHStoreItem.serialize()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of LHStoreItem.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of LHStoreItem.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t _s20LighthouseBackground9LHStreamsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_2402B4CF8 + 4 * byte_2402C80ED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_2402B4D2C + 4 * byte_2402C80E8[v4]))();
}

uint64_t sub_2402B4D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402B4D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2402B4D3CLL);
  return result;
}

uint64_t sub_2402B4D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2402B4D50);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_2402B4D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2402B4D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LHStoreItem.CodingKeys()
{
  return &type metadata for LHStoreItem.CodingKeys;
}

unint64_t sub_2402B4D7C()
{
  unint64_t result;

  result = qword_256FE13E8;
  if (!qword_256FE13E8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C82FC, &type metadata for LHStoreItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256FE13E8);
  }
  return result;
}

unint64_t sub_2402B4DC4()
{
  unint64_t result;

  result = qword_2543526B0;
  if (!qword_2543526B0)
  {
    result = MEMORY[0x2426820F8](&unk_2402C826C, &type metadata for LHStoreItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543526B0);
  }
  return result;
}

unint64_t sub_2402B4E0C()
{
  unint64_t result;

  result = qword_2543526A8;
  if (!qword_2543526A8)
  {
    result = MEMORY[0x2426820F8](&unk_2402C8294, &type metadata for LHStoreItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2543526A8);
  }
  return result;
}

uint64_t sub_2402B4E50(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7372655661746164 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000002402CABF0 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079 || (sub_2402BDD8C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x506567617373656DLL && a2 == 0xEE0064616F6C7961)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_2402BDD8C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_2402B5054(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_24027F72C(a1, a2);
  return a1;
}

uint64_t sub_2402B5068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v26;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC70);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v16 = *(_QWORD *)(v4 + 32);
  if (!*(_QWORD *)(v16 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_7:
    sub_24023D378((uint64_t)v11, &qword_256FDEC70);
    return 0;
  }
  swift_bridgeObjectRetain();
  v17 = sub_240258860(a1, a2);
  if ((v18 & 1) != 0)
  {
    sub_2402391FC(*(_QWORD *)(v16 + 56) + *(_QWORD *)(v13 + 72) * v17, (uint64_t)v11, &qword_256FDEC78);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v19, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    goto LABEL_7;
  sub_24024FB00((uint64_t)v11, (uint64_t)v15);
  v21 = *(_QWORD *)&v15[*(int *)(v12 + 52)];
  v22 = *(_QWORD *)(v21 + 16);
  if (v22)
  {
    v23 = (_QWORD *)(v21 + 56);
    while (1)
    {
      v24 = *(v23 - 1) == a3 && *v23 == a4;
      if (v24 || (sub_2402BDD8C() & 1) != 0)
        break;
      v23 += 4;
      if (!--v22)
        goto LABEL_16;
    }
    v20 = 1;
  }
  else
  {
LABEL_16:
    v20 = 0;
  }
  sub_24023D378((uint64_t)v15, &qword_256FDEC78);
  return v20;
}

uint64_t StateMachineAnalytics.firstEventTimestamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  v9 = type metadata accessor for LedgerState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    sub_24023D378((uint64_t)v8, &qword_256FDEAE0);
    v10 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
  }
  else
  {
    v12 = &v8[*(int *)(v9 + 20)];
    v13 = sub_2402BD48C();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a3, v12, v13);
    sub_240231F00((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
}

uint64_t StateMachineAnalytics.lastEventTimestamp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
  v9 = type metadata accessor for LedgerState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    sub_24023D378((uint64_t)v8, &qword_256FDEAE0);
    v10 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
  }
  else
  {
    v12 = &v8[*(int *)(v9 + 20)];
    v13 = sub_2402BD48C();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a3, v12, v13);
    sub_240231F00((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
}

uint64_t StateMachineAnalytics.description.getter(uint64_t a1, uint64_t a2)
{
  sub_2402BDA98();
  sub_2402BD6C0();
  (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  swift_bridgeObjectRelease();
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  swift_bridgeObjectRelease();
  sub_2402BDD68();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  sub_2402BD6C0();
  return 0;
}

char *LedgerStateMachine.__allocating_init(inputGraph:)(uint64_t a1)
{
  char *v2;

  swift_allocObject();
  v2 = sub_2402B7544(a1);
  swift_release();
  return v2;
}

uint64_t sub_2402B566C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402391FC(v2 + *(int *)(a1 + 24), (uint64_t)v7, &qword_256FDEAE0);
  v8 = type metadata accessor for LedgerState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    sub_24023D378((uint64_t)v7, &qword_256FDEAE0);
    v9 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  else
  {
    v11 = &v7[*(int *)(v8 + 20)];
    v12 = sub_2402BD48C();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a2, v11, v12);
    sub_240231F00((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
}

uint64_t sub_2402B579C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2402391FC(v2 + *(int *)(a1 + 28), (uint64_t)v7, &qword_256FDEAE0);
  v8 = type metadata accessor for LedgerState();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    sub_24023D378((uint64_t)v7, &qword_256FDEAE0);
    v9 = sub_2402BD48C();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  else
  {
    v11 = &v7[*(int *)(v8 + 20)];
    v12 = sub_2402BD48C();
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a2, v11, v12);
    sub_240231F00((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
}

void sub_2402B58CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

LighthouseBackground::LedgerTransitionStatistics __swiftcall LedgerTransitionStatistics.init()()
{
  _QWORD *v0;
  LighthouseBackground::LedgerTransitionStatistics result;

  *v0 = 0x7FEFFFFFFFFFFFFFLL;
  v0[1] = 0;
  v0[2] = 0;
  v0[3] = 0;
  return result;
}

double LedgerTransitionStatistics.min.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LedgerTransitionStatistics.min.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*LedgerTransitionStatistics.min.modify())()
{
  return nullsub_1;
}

double LedgerTransitionStatistics.max.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void LedgerTransitionStatistics.max.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*LedgerTransitionStatistics.max.modify())()
{
  return nullsub_1;
}

double LedgerTransitionStatistics.mean.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void LedgerTransitionStatistics.mean.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*LedgerTransitionStatistics.mean.modify())()
{
  return nullsub_1;
}

uint64_t LedgerTransitionStatistics.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t LedgerTransitionStatistics.count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*LedgerTransitionStatistics.count.modify())()
{
  return nullsub_1;
}

Swift::Void __swiftcall LedgerTransitionStatistics.processTime(delta:)(Swift::Double delta)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (*(double *)v1 > delta)
    *(Swift::Double *)v1 = delta;
  if (*(double *)(v1 + 8) < delta)
    *(Swift::Double *)(v1 + 8) = delta;
  v2 = *(_QWORD *)(v1 + 24);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 24) = v4;
    *(double *)(v1 + 16) = *(double *)(v1 + 16) + (delta - *(double *)(v1 + 16)) / (double)v4;
  }
}

double LedgerTransitionStatistics.cumulativeTotalLatency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16) * (double)*(uint64_t *)(v0 + 24);
}

uint64_t LedgerTransitionStatistics.description.getter()
{
  sub_2402BDA98();
  sub_2402BD6C0();
  sub_2402BD8E8();
  sub_2402BD6C0();
  sub_2402BD8E8();
  sub_2402BD6C0();
  sub_2402BD8E8();
  return 0;
}

uint64_t sub_2402B5AC0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2402B5AE8 + 4 * byte_2402C8380[*v0]))(7235949, 0xE300000000000000);
}

uint64_t sub_2402B5AE8()
{
  return 7889261;
}

uint64_t sub_2402B5AF4()
{
  return 1851876717;
}

uint64_t sub_2402B5B04()
{
  return 0x746E756F63;
}

uint64_t sub_2402B5B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2402B7A84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2402B5B3C()
{
  sub_2402B76B8();
  return sub_2402BDE88();
}

uint64_t sub_2402B5B64()
{
  sub_2402B76B8();
  return sub_2402BDE94();
}

uint64_t LedgerTransitionStatistics.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE13F0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402B76B8();
  sub_2402BDE70();
  v8[15] = 0;
  sub_2402BDD14();
  if (!v1)
  {
    v8[14] = 1;
    sub_2402BDD14();
    v8[13] = 2;
    sub_2402BDD14();
    v8[12] = 3;
    sub_2402BDD20();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t LedgerTransitionStatistics.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FE1400);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2402B76B8();
  sub_2402BDE64();
  if (!v2)
  {
    v17[15] = 0;
    sub_2402BDC3C();
    v10 = v9;
    v17[14] = 1;
    sub_2402BDC3C();
    v12 = v11;
    v17[13] = 2;
    sub_2402BDC3C();
    v15 = v14;
    v17[12] = 3;
    v16 = sub_2402BDC48();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
    a2[1] = v12;
    a2[2] = v15;
    a2[3] = v16;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2402B5EC8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return LedgerTransitionStatistics.init(from:)(a1, a2);
}

uint64_t sub_2402B5EDC(_QWORD *a1)
{
  return LedgerTransitionStatistics.encode(to:)(a1);
}

uint64_t sub_2402B5EF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + qword_256FE1408;
  swift_beginAccess();
  return sub_2402391FC(v3, a1, &qword_256FDEAE0);
}

uint64_t sub_2402B5F50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + qword_256FE1408;
  swift_beginAccess();
  sub_240287C78(a1, v3);
  return swift_endAccess();
}

uint64_t sub_2402B5FA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_2402B600C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

char *LedgerStateMachine.init(inputGraph:)(uint64_t a1)
{
  char *v1;

  v1 = sub_2402B7544(a1);
  swift_release();
  return v1;
}

uint64_t sub_2402B60A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_24027118C(v0);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x242681588](v1, MEMORY[0x24BEE0D00]);
  swift_release();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEC78);
  sub_2402BD588();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_2402BD6C0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_2402B61C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v19 = a1;
  v2 = *v1;
  v3 = type metadata accessor for LedgerState();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v2 + 80);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v18 - v15;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v18((char *)&v18 - v15, 1, 1, v3);
  sub_2402B5F50((uint64_t)v16);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 88) + 144))(v8);
  sub_2402B600C((uint64_t)v10);
  sub_2402391FC(v19, (uint64_t)v14, &qword_256FDEAE0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v14, 1, v3) == 1)
    return sub_24023D378((uint64_t)v14, &qword_256FDEAE0);
  sub_24024FABC((uint64_t)v14, (uint64_t)v7);
  sub_240231EBC((uint64_t)v7, (uint64_t)v16);
  v18(v16, 0, 1, v3);
  sub_2402B5F50((uint64_t)v16);
  sub_2402B6B84((uint64_t)v7);
  return sub_240231F00((uint64_t)v7);
}

uint64_t sub_2402B63A8(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90[4];
  uint64_t v91;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v84 - v9;
  v11 = type metadata accessor for LedgerState();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t *)((char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BDAC7A8](v13);
  v86 = (uint64_t *)((char *)&v84 - v16);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v84 - v17);
  v19 = (uint64_t)v2 + qword_256FE1408;
  swift_beginAccess();
  sub_2402391FC(v19, (uint64_t)v10, &qword_256FDEAE0);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  v88 = v2;
  if (v20 != 1)
  {
    v85 = v4;
    sub_24024FABC((uint64_t)v10, (uint64_t)v18);
    v42 = *v18;
    v43 = v18[1];
    v44 = v18;
    v21 = a1;
    v46 = *a1;
    v45 = a1[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47 = sub_2402B5068(v42, v43, v46, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
    {
      v84 = v44;
      if (qword_2543528A0 == -1)
        goto LABEL_9;
      goto LABEL_29;
    }
    sub_2402B6CA4(v44, v21);
    sub_240231EBC((uint64_t)v21, (uint64_t)v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    sub_2402B5F50((uint64_t)v8);
    v48 = (uint64_t)v44;
    return sub_240231F00(v48);
  }
  sub_24023D378((uint64_t)v10, &qword_256FDEAE0);
  sub_240231EBC((uint64_t)a1, (uint64_t)v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
  sub_2402B5F50((uint64_t)v8);
  v21 = a1;
  v23 = *a1;
  v22 = a1[1];
  swift_beginAccess();
  v26 = v4 + 80;
  v25 = *(_QWORD *)(v4 + 80);
  v24 = *(_QWORD *)(v26 + 8);
  v27 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48);
  swift_bridgeObjectRetain();
  v28 = (_QWORD *)v27(v90, v25, v24);
  v30 = v29;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v89 = *(_QWORD **)v30;
  v32 = v89;
  *(_QWORD *)v30 = 0x8000000000000000;
  v34 = sub_240258860(v23, v22);
  v35 = v32[2];
  v36 = (v33 & 1) == 0;
  v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
    __break(1u);
    goto LABEL_28;
  }
  v38 = v33;
  if (v32[3] < v37)
  {
    sub_24025913C(v37, isUniquelyReferenced_nonNull_native);
    v39 = sub_240258860(v23, v22);
    if ((v38 & 1) == (v40 & 1))
    {
      v34 = v39;
      v41 = (uint64_t)v21;
      goto LABEL_12;
    }
    goto LABEL_34;
  }
  v41 = (uint64_t)v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_31;
  while (1)
  {
LABEL_12:
    *(_QWORD *)v30 = v89;
    swift_bridgeObjectRelease();
    v61 = *(_QWORD **)v30;
    swift_bridgeObjectRetain();
    if ((v38 & 1) == 0)
    {
      sub_24025A794(v34, v23, v22, 0, v61);
      swift_bridgeObjectRetain();
    }
    v62 = v61[7];
    v63 = *(_QWORD *)(v62 + 8 * v34);
    v64 = __OFADD__(v63, 1);
    v65 = v63 + 1;
    if (!v64)
    {
      *(_QWORD *)(v62 + 8 * v34) = v65;
      ((void (*)(uint64_t *, _QWORD))v28)(v90, 0);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_2402B6B84(v41);
    }
LABEL_28:
    __break(1u);
LABEL_29:
    swift_once();
LABEL_9:
    v49 = sub_2402BD4E0();
    __swift_project_value_buffer(v49, (uint64_t)qword_2543529A0);
    v50 = v86;
    sub_240231EBC((uint64_t)v84, (uint64_t)v86);
    v51 = v21;
    v52 = v87;
    sub_240231EBC((uint64_t)v21, (uint64_t)v87);
    v53 = sub_2402BD4C8();
    v54 = sub_2402BD960();
    v34 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc();
      v56 = swift_slowAlloc();
      v90[0] = v56;
      *(_DWORD *)v55 = 136315394;
      v57 = *v50;
      v58 = v50[1];
      swift_bridgeObjectRetain();
      v91 = sub_24023D440(v57, v58, v90);
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      sub_240231F00((uint64_t)v50);
      *(_WORD *)(v55 + 12) = 2080;
      v59 = *v52;
      v60 = v52[1];
      swift_bridgeObjectRetain();
      v91 = sub_24023D440(v59, v60, v90);
      v51 = v21;
      sub_2402BD9FC();
      swift_bridgeObjectRelease();
      sub_240231F00((uint64_t)v52);
      _os_log_impl(&dword_24022D000, v53, (os_log_type_t)v34, "Invalid StateMachine transition, incrementing state: %s -> %s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242682188](v56, -1, -1);
      MEMORY[0x242682188](v55, -1, -1);
    }
    else
    {
      sub_240231F00((uint64_t)v50);
      sub_240231F00((uint64_t)v52);
    }

    v67 = v85;
    v23 = *v51;
    v41 = v51[1];
    swift_beginAccess();
    v69 = v67 + 80;
    v22 = *(_QWORD *)(v67 + 80);
    v68 = *(_QWORD *)(v69 + 8);
    v70 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    v21 = (uint64_t *)v70(v90, v22, v68);
    v28 = v71;
    v38 = swift_isUniquelyReferenced_nonNull_native();
    v89 = (_QWORD *)*v28;
    v72 = v89;
    *v28 = 0x8000000000000000;
    v30 = sub_240258860(v23, v41);
    v74 = v72[2];
    v75 = (v73 & 1) == 0;
    v76 = v74 + v75;
    if (!__OFADD__(v74, v75))
      break;
    __break(1u);
LABEL_31:
    sub_24025ACA4();
  }
  v77 = v73;
  if (v72[3] >= v76)
  {
    if ((v38 & 1) == 0)
      goto LABEL_33;
    goto LABEL_22;
  }
  sub_24025913C(v76, v38);
  v78 = sub_240258860(v23, v41);
  if ((v77 & 1) == (v79 & 1))
  {
    v30 = v78;
    while (1)
    {
LABEL_22:
      *v28 = v89;
      swift_bridgeObjectRelease();
      v80 = (_QWORD *)*v28;
      swift_bridgeObjectRetain();
      if ((v77 & 1) == 0)
      {
        sub_24025A794(v30, v23, v41, 0, v80);
        swift_bridgeObjectRetain();
      }
      v81 = v80[7];
      v82 = *(_QWORD *)(v81 + 8 * v30);
      v64 = __OFADD__(v82, 1);
      v83 = v82 + 1;
      if (!v64)
        break;
      __break(1u);
LABEL_33:
      sub_24025ACA4();
    }
    *(_QWORD *)(v81 + 8 * v30) = v83;
    ((void (*)(uint64_t *, _QWORD))v21)(v90, 0);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = (uint64_t)v84;
    return sub_240231F00(v48);
  }
LABEL_34:
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

uint64_t sub_2402B6AC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(type metadata accessor for LedgerState() - 8);
    v7 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    v8 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_2402B63A8(v7);
      v7 = (uint64_t *)((char *)v7 + v8);
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  v9 = *v2;
  v10 = (uint64_t)v2 + *(_QWORD *)(*v2 + 112);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 80) - 8) + 16))(a2, v10);
}

uint64_t sub_2402B6B84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_240231EBC(a1, (uint64_t)v6);
  v7 = type metadata accessor for LedgerState();
  v8 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 0, 1, v7);
  swift_beginAccess();
  v11 = v3 + 80;
  v10 = *(_QWORD *)(v3 + 80);
  v9 = *(_QWORD *)(v11 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 88))(v6, v10, v9);
  sub_240231EBC(a1, (uint64_t)v6);
  v8(v6, 0, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 112))(v6, v10, v9);
  return swift_endAccess();
}

uint64_t sub_2402B6CA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t);
  unint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD **v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void (*v55)(_BYTE *, _QWORD);
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _BYTE v59[32];

  v3 = v2;
  v6 = *v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256FDEAE0);
  MEMORY[0x24BDAC7A8](v7);
  v54 = (uint64_t)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[1];
  v57 = *a1;
  v11 = *a2;
  v10 = a2[1];
  v52 = type metadata accessor for LedgerState();
  v53 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_2402BD474();
  v13 = v12;
  swift_beginAccess();
  v14 = *(_QWORD *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 88);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  v56 = v14;
  v55 = (void (*)(_BYTE *, _QWORD))v16(v59, v14, v15);
  v18 = v17;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v58 = *(_QWORD **)v18;
  v20 = v58;
  *(_QWORD *)v18 = 0x8000000000000000;
  v22 = sub_240258860(v11, v10);
  v23 = v20[2];
  v24 = (v21 & 1) == 0;
  v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_24;
  }
  LOBYTE(v14) = v21;
  if (v20[3] >= v25)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_27;
    while (1)
    {
LABEL_6:
      *(_QWORD *)v18 = v58;
      swift_bridgeObjectRelease();
      v28 = *(_QWORD **)v18;
      if ((v14 & 1) == 0)
      {
        sub_24025A794(v22, v11, v10, 0, *(_QWORD **)v18);
        swift_bridgeObjectRetain();
      }
      v29 = v28[7];
      v30 = *(_QWORD *)(v29 + 8 * v22);
      v31 = __OFADD__(v30, 1);
      v32 = v30 + 1;
      if (v31)
        break;
      *(_QWORD *)(v29 + 8 * v22) = v32;
      v55(v59, 0);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v55 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 72))(v59, v56, v15);
      v34 = v33;
      LOBYTE(v14) = swift_isUniquelyReferenced_nonNull_native();
      v58 = *v34;
      v35 = v58;
      *v34 = (_QWORD *)0x8000000000000000;
      v18 = sub_2402587B4(v57, v9, v11, v10);
      v37 = v35[2];
      v38 = (v36 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_25;
      v22 = v36;
      if (v35[3] >= v39)
      {
        if ((v14 & 1) == 0)
          sub_24025AAD4();
      }
      else
      {
        sub_240258DCC(v39, v14);
        v40 = sub_2402587B4(v57, v9, v11, v10);
        if ((v22 & 1) != (v41 & 1))
          goto LABEL_29;
        v18 = v40;
      }
      *v34 = v58;
      swift_bridgeObjectRelease();
      v42 = *v34;
      if ((v22 & 1) == 0)
      {
        sub_24025A738(v18, v57, v9, v11, v10, 0, *v34, 1.79769313e308, 0.0, 0.0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v43 = v42[7];
      v44 = (double *)(v43 + 32 * v18);
      if (v13 < *v44)
        *v44 = v13;
      v46 = v44[1];
      v45 = v44 + 1;
      if (v46 < v13)
        *v45 = v13;
      v47 = v43 + 32 * v18;
      v48 = *(_QWORD *)(v47 + 24);
      v31 = __OFADD__(v48, 1);
      v49 = v48 + 1;
      if (!v31)
      {
        *(_QWORD *)(v47 + 24) = v49;
        *(double *)(v47 + 16) = *(double *)(v47 + 16) + (v13 - *(double *)(v47 + 16)) / (double)v49;
        v55(v59, 0);
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50 = v54;
        sub_240231EBC((uint64_t)v53, v54);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1);
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 112))(v50, v56, v15);
        return swift_endAccess();
      }
LABEL_26:
      __break(1u);
LABEL_27:
      sub_24025ACA4();
    }
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  sub_24025913C(v25, isUniquelyReferenced_nonNull_native);
  v26 = sub_240258860(v11, v10);
  if ((v14 & 1) == (v27 & 1))
  {
    v22 = v26;
    goto LABEL_6;
  }
  sub_2402BDDC8();
  __break(1u);
LABEL_29:
  result = sub_2402BDDC8();
  __break(1u);
  return result;
}

