void sub_248BE6E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

void sub_248BE6FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_248BE72A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;
  void *v14;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a10);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_248BE7590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  void *v28;
  void *v29;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a11);
  if (a17 < 0)
    operator delete(__p);
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void sub_248BE7734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_248BE77B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_248BE79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  void *v18;
  void *v19;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a16);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_248BE7C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_248BE7D4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_248BE7EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2519D5B18, MEMORY[0x24BEDAAF0]);
}

void sub_248BE7FB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<int>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::string_view::compare[abi:ne180100](_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2519D5B20, MEMORY[0x24BEDAB00]);
}

void sub_248BE82BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

TokenGenerationCore::TGModes_optional __swiftcall TGModes.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  TokenGenerationCore::TGModes_optional result;

  v2._rawValue = &outlined read-only object #0 of TGModes.init(rawValue:);
  TGModes.init(rawValue:)(rawValue, v2, v1);
  return result;
}

uint64_t TGModes.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 != 1)
    v1 = 0x657A696E656B6F74;
  if (*v0)
    return v1;
  else
    return 0x6574656C706D6F63;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TGModes(unsigned __int8 *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance TGModes()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TGModes(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TGModes()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

TokenGenerationCore::TGModes_optional protocol witness for RawRepresentable.init(rawValue:) in conformance TGModes(Swift::String *a1)
{
  return TGModes.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TGModes(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = TGModes.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.mode.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.modelBundleId.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.temperature.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AutomationJSON.maxTokens.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t AutomationJSON.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

void AutomationJSON.prompt.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.input.getter()
{
  return swift_bridgeObjectRetain();
}

TokenGenerationCore::AutomationJSON::InputPromptType_optional __swiftcall AutomationJSON.InputPromptType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  TokenGenerationCore::AutomationJSON::InputPromptType_optional result;

  v2._rawValue = &outlined read-only object #0 of AutomationJSON.InputPromptType.init(rawValue:);
  TGModes.init(rawValue:)(rawValue, v2, v1);
  return result;
}

uint64_t AutomationJSON.InputPromptType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x444974706D6F7270;
  if (*v0 != 1)
    v1 = 0x655474706D6F7270;
  if (*v0)
    return v1;
  else
    return 0x74706D6F7270;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.InputPromptType(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.InputPromptType()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutomationJSON.InputPromptType(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.InputPromptType()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

TokenGenerationCore::AutomationJSON::InputPromptType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutomationJSON.InputPromptType(Swift::String *a1)
{
  return AutomationJSON.InputPromptType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutomationJSON.InputPromptType(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = AutomationJSON.InputPromptType.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_23();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputPromptType()
{
  lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputPromptType()
{
  lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  return RawRepresentable<>.encode(to:)();
}

void AutomationJSON.inputPromptType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 104);
}

uint64_t AutomationJSON.inputVariableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.messages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.responses.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.responses.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 128) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*AutomationJSON.responses.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.output.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.output.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 136) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*AutomationJSON.output.modify())()
{
  return AutomationJSON.responses.modify;
}

void AutomationJSON.RenderedPrompt.originalPrompt.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.RenderedPrompt.renderedString.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.RenderedPrompt.segments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.RenderedPrompt.tokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.RenderedPrompt.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.RenderedPrompt.Source.identifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.RenderedPrompt.Source.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_99();
}

uint64_t (*AutomationJSON.RenderedPrompt.Source.identifier.modify())()
{
  return AutomationJSON.responses.modify;
}

void AutomationJSON.RenderedPrompt.Source.version.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.RenderedPrompt.Source.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_99();
}

uint64_t (*AutomationJSON.RenderedPrompt.Source.version.modify())()
{
  return AutomationJSON.responses.modify;
}

TokenGenerationCore::AutomationJSON::RenderedPrompt::Source __swiftcall AutomationJSON.RenderedPrompt.Source.init(identifier:version:)(Swift::String identifier, Swift::String version)
{
  Swift::String *v2;
  TokenGenerationCore::AutomationJSON::RenderedPrompt::Source result;

  *v2 = identifier;
  v2[1] = version;
  result.version = version;
  result.identifier = identifier;
  return result;
}

BOOL static AutomationJSON.RenderedPrompt.Source.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AutomationJSON.RenderedPrompt.Source.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t AutomationJSON.RenderedPrompt.Source.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AutomationJSON.RenderedPrompt.Source.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t AutomationJSON.RenderedPrompt.Source.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F6973726576;
  else
    return 0x696669746E656469;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static AutomationJSON.RenderedPrompt.Source.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  char *v0;

  AutomationJSON.RenderedPrompt.Source.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys(uint64_t a1)
{
  char *v1;

  AutomationJSON.RenderedPrompt.Source.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  char *v0;

  return AutomationJSON.RenderedPrompt.Source.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.RenderedPrompt.Source.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  return AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.RenderedPrompt.Source.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.RenderedPrompt.Source.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.RenderedPrompt.Source.CodingKeys>)
                 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_47();
  if (!v0)
    OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495A8DFC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source.CodingKeys, &unk_2519D6FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source.CodingKeys, &unk_2519D6FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source.CodingKeys, &unk_2519D6FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source.CodingKeys, &unk_2519D6FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys);
  }
  return result;
}

void AutomationJSON.RenderedPrompt.Source.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;

  OUTLINED_FUNCTION_2();
  a21 = v26;
  a22 = v27;
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.RenderedPrompt.Source.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source.CodingKeys and conformance AutomationJSON.RenderedPrompt.Source.CodingKeys();
  OUTLINED_FUNCTION_19();
  if (v23)
  {
    OUTLINED_FUNCTION_61();
  }
  else
  {
    OUTLINED_FUNCTION_113();
    v31 = KeyedDecodingContainer.decode(_:forKey:)();
    v33 = v32;
    a12 = 1;
    OUTLINED_FUNCTION_41();
    v34 = KeyedDecodingContainer.decode(_:forKey:)();
    v36 = v35;
    v37 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
    v38 = v34;
    OUTLINED_FUNCTION_8((uint64_t)v30, v37);
    *v24 = v31;
    v24[1] = v33;
    v24[2] = v38;
    v24[3] = v36;
    OUTLINED_FUNCTION_4();
    __swift_destroy_boxed_opaque_existential_1(v22);
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_7();
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

#error "248BE8C90: call analysis failed (funcsize=5)"

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.RenderedPrompt.Source()
{
  AutomationJSON.RenderedPrompt.Source.encode(to:)();
}

uint64_t AutomationJSON.RenderedPrompt.source.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall AutomationJSON.RenderedPrompt.init(originalPrompt:renderedString:segments:tokenIDs:userInfo:source:)(TokenGenerationCore::AutomationJSON::RenderedPrompt *__return_ptr retstr, Swift::String originalPrompt, Swift::String renderedString, Swift::OpaquePointer segments, Swift::OpaquePointer tokenIDs, Swift::OpaquePointer userInfo, TokenGenerationCore::AutomationJSON::RenderedPrompt::Source source)
{
  Swift::String v7;
  uint64_t v8;
  void *v9;

  v7 = *(Swift::String *)source.identifier._countAndFlagsBits;
  v8 = *(_QWORD *)(source.identifier._countAndFlagsBits + 16);
  v9 = *(void **)(source.identifier._countAndFlagsBits + 24);
  retstr->originalPrompt = originalPrompt;
  retstr->renderedString = renderedString;
  retstr->segments = segments;
  retstr->tokenIDs = tokenIDs;
  retstr->userInfo = userInfo;
  retstr->source.identifier = v7;
  retstr->source.version._countAndFlagsBits = v8;
  retstr->source.version._object = v9;
}

uint64_t AutomationJSON.RenderedPrompt.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 0x6C616E696769726FLL && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x64657265646E6572 && a2 == 0xEE00676E69727453;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x73746E656D676573 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x7344496E656B6F74 && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

uint64_t AutomationJSON.RenderedPrompt.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t AutomationJSON.RenderedPrompt.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248BE8FFC + 4 * byte_248C8F180[a1]))(0x6C616E696769726FLL, 0xEE0074706D6F7250);
}

uint64_t sub_248BE8FFC()
{
  return 0x64657265646E6572;
}

uint64_t sub_248BE9020()
{
  return 0x73746E656D676573;
}

uint64_t sub_248BE9038()
{
  return 0x7344496E656B6F74;
}

uint64_t sub_248BE9050()
{
  return 0x6F666E4972657375;
}

uint64_t sub_248BE9068()
{
  return 0x656372756F73;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  unsigned __int8 *v0;

  return AutomationJSON.RenderedPrompt.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.RenderedPrompt.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.RenderedPrompt.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.RenderedPrompt.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.RenderedPrompt.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.RenderedPrompt.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.RenderedPrompt.CodingKeys>);
  OUTLINED_FUNCTION_81();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v5 = v3[3];
  v6 = v3;
  v8 = v7;
  __swift_project_boxed_opaque_existential_1(v6, v5);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  OUTLINED_FUNCTION_128();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  OUTLINED_FUNCTION_47();
  if (!v0)
  {
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_153();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    OUTLINED_FUNCTION_63();
    OUTLINED_FUNCTION_150();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    OUTLINED_FUNCTION_63();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    OUTLINED_FUNCTION_65();
    lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source();
    OUTLINED_FUNCTION_65();
  }
  OUTLINED_FUNCTION_8(v8, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.CodingKeys, &unk_2519D6F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.CodingKeys, &unk_2519D6F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.CodingKeys, &unk_2519D6F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.CodingKeys, &unk_2519D6F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495A8E08](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source, &type metadata for AutomationJSON.RenderedPrompt.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt.Source, &type metadata for AutomationJSON.RenderedPrompt.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source);
  }
  return result;
}

void AutomationJSON.RenderedPrompt.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.RenderedPrompt.CodingKeys>);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_60();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.CodingKeys and conformance AutomationJSON.RenderedPrompt.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_135();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_105();
    LOBYTE(v24) = 1;
    v8 = v7;
    OUTLINED_FUNCTION_41();
    v23 = v8;
    v21 = OUTLINED_FUNCTION_105();
    v22 = v6;
    v10 = v9;
    OUTLINED_FUNCTION_89();
    OUTLINED_FUNCTION_153();
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    v12 = v11;
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_143();
    OUTLINED_FUNCTION_44();
    v13 = v12 == 0;
    if (v12)
    {
      OUTLINED_FUNCTION_11();
      OUTLINED_FUNCTION_101();
      OUTLINED_FUNCTION_13();
      v14 = 0;
      v15 = 0;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      OUTLINED_FUNCTION_150();
      lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
      v17 = v16;
      OUTLINED_FUNCTION_75();
      OUTLINED_FUNCTION_143();
      OUTLINED_FUNCTION_44();
      if (v17)
      {
        OUTLINED_FUNCTION_11();
        OUTLINED_FUNCTION_101();
        OUTLINED_FUNCTION_121();
        OUTLINED_FUNCTION_13();
        v14 = 0;
        v15 = 0;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
        v19 = v18;
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_143();
        OUTLINED_FUNCTION_44();
        if (v19)
        {
          OUTLINED_FUNCTION_11();
          OUTLINED_FUNCTION_101();
          OUTLINED_FUNCTION_121();
          OUTLINED_FUNCTION_13();
          OUTLINED_FUNCTION_7();
          v15 = 0;
          v14 = 1;
        }
        else
        {
          v20 = lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt.Source and conformance AutomationJSON.RenderedPrompt.Source();
          OUTLINED_FUNCTION_4();
          OUTLINED_FUNCTION_143();
          OUTLINED_FUNCTION_44();
          if (!v20)
          {
            OUTLINED_FUNCTION_11();
            OUTLINED_FUNCTION_4();
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_75();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_118();
            OUTLINED_FUNCTION_13();
            OUTLINED_FUNCTION_26();
            *v4 = v22;
            v4[1] = v23;
            v4[2] = v21;
            v4[3] = v10;
            v4[4] = v24;
            v4[5] = v24;
            v4[6] = v24;
            v4[7] = v24;
            v4[8] = v25;
            v4[9] = v26;
            v4[10] = v27;
            OUTLINED_FUNCTION_135();
            OUTLINED_FUNCTION_88();
            OUTLINED_FUNCTION_82();
            OUTLINED_FUNCTION_123();
            OUTLINED_FUNCTION_26();
            OUTLINED_FUNCTION_13();
            OUTLINED_FUNCTION_118();
            goto LABEL_10;
          }
          OUTLINED_FUNCTION_11();
          OUTLINED_FUNCTION_101();
          OUTLINED_FUNCTION_121();
          OUTLINED_FUNCTION_13();
          OUTLINED_FUNCTION_7();
          OUTLINED_FUNCTION_26();
          v14 = 1;
          v15 = 1;
        }
      }
    }
    OUTLINED_FUNCTION_135();
    OUTLINED_FUNCTION_101();
    OUTLINED_FUNCTION_121();
    if (v13)
    {
      OUTLINED_FUNCTION_13();
      if ((v14 & 1) != 0)
      {
LABEL_6:
        OUTLINED_FUNCTION_7();
        if ((v15 & 1) == 0)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
    else if (v14)
    {
      goto LABEL_6;
    }
    if (v15)
LABEL_10:
      swift_bridgeObjectRelease();
  }
LABEL_11:
  OUTLINED_FUNCTION_0_0();
}

void lazy protocol witness table accessor for type [String] and conformance <A> [A](uint64_t a1)
{
  uint64_t *v1;

  if (!OUTLINED_FUNCTION_119(a1))
  {
    OUTLINED_FUNCTION_117(0, v1);
    OUTLINED_FUNCTION_146();
  }
  OUTLINED_FUNCTION_73();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.RenderedPrompt()
{
  AutomationJSON.RenderedPrompt.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.RenderedPrompt()
{
  AutomationJSON.RenderedPrompt.encode(to:)();
}

uint64_t AutomationJSON.renderedPrompts.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.renderedPrompts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*AutomationJSON.renderedPrompts.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.constraintValidation.getter()
{
  return swift_bridgeObjectRetain();
}

void AutomationJSON.constraintValidation.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 152) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*AutomationJSON.constraintValidation.modify())()
{
  return AutomationJSON.responses.modify;
}

uint64_t AutomationJSON.frequencyPenalty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t AutomationJSON.lengthPenalty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

void AutomationJSON.stopSequence.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.prewarm.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 208);
}

uint64_t AutomationJSON.promptLookupDraftSteps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t AutomationJSON.speculativeSampling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 225);
}

uint64_t AutomationJSON.tokenHealing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 226);
}

void AutomationJSON.schema.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.grammar.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.dynamicPartsOfGrammars.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.iterationCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t AutomationJSON.promptDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

void AutomationJSON.samplingStrategyConfiguration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 336);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 328);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 1802530676 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7375656C63756ELL && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x78616D677261 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 1802530676;
  if (a1 == 1)
    return 0x7375656C63756ELL;
  return 0x78616D677261;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys.stringValue.getter()
{
  return 0x6C6F687365726874;
}

uint64_t static AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.== infix(_:_:)()
{
  return 1;
}

void AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.stringValue.getter()
{
  return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  char *v0;

  return AutomationJSON.SamplingStrategyConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.SamplingStrategyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  return AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = static AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.SamplingStrategyConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys>);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  v20 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys>);
  v21 = *(_QWORD *)(v7 - 8);
  v22 = v7;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys>);
  v19 = *(_QWORD *)(v11 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.SamplingStrategyConfiguration.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_59();
  v25 = *v2;
  v16 = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v16)
  {
    if (v16 != 1)
    {
      OUTLINED_FUNCTION_152();
      v18 = v20;
      OUTLINED_FUNCTION_70();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v18, v24);
      OUTLINED_FUNCTION_92();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_136();
    OUTLINED_FUNCTION_70();
    v17 = v22;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v17);
  }
  else
  {
    v27 = 0;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
    OUTLINED_FUNCTION_70();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v11);
  }
  OUTLINED_FUNCTION_92();
LABEL_7:
  OUTLINED_FUNCTION_72();
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys, &unk_2519D78F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys, &unk_2519D78F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys, &unk_2519D78F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys, &unk_2519D78F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys, &unk_2519D7A10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys, &unk_2519D7A10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys, &unk_2519D7A10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys, &unk_2519D7A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys, &unk_2519D7A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys, &unk_2519D7A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys, &unk_2519D7A30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys, &unk_2519D7980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys, &unk_2519D7980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys, &unk_2519D7980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys, &unk_2519D7980);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys);
  }
  return result;
}

void AutomationJSON.SamplingStrategyConfiguration.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys>);
  v31 = *(_QWORD *)(v32 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_49();
  v34 = v7;
  v30 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_49();
  v36 = v9;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys>);
  v10 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_59();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.SamplingStrategyConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_110();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_56(a1);
  lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.CodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.CodingKeys();
  OUTLINED_FUNCTION_131();
  if (v37)
    goto LABEL_10;
  v38 = a1;
  v13 = v2;
  v14 = KeyedDecodingContainer.allKeys.getter();
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v11;
  if (!v15)
  {
LABEL_9:
    v23 = type metadata accessor for DecodingError();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v25 = &type metadata for AutomationJSON.SamplingStrategyConfiguration;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v13, v16);
    a1 = v38;
LABEL_10:
    v26 = (uint64_t)a1;
    goto LABEL_11;
  }
  v17 = v2;
  v18 = *(unsigned __int8 *)(v14 + 32);
  specialized ArraySlice.subscript.getter(1, v15, v14, v14 + 32, 0, (2 * v15) | 1);
  v20 = v19;
  v22 = v21;
  OUTLINED_FUNCTION_88();
  if (v20 != v22 >> 1)
  {
    v13 = v17;
    goto LABEL_9;
  }
  if (v18)
  {
    if (v18 == 1)
    {
      OUTLINED_FUNCTION_136();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedDecodingContainer.decode(_:forKey:)();
      v28 = v27;
      OUTLINED_FUNCTION_30(v36, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
      OUTLINED_FUNCTION_87();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v17, v16);
      v29 = v28;
    }
    else
    {
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_84();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v32);
      OUTLINED_FUNCTION_87();
      OUTLINED_FUNCTION_104();
      v29 = 0;
    }
  }
  else
  {
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys();
    OUTLINED_FUNCTION_84();
    v29 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_46(v3, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    OUTLINED_FUNCTION_87();
    OUTLINED_FUNCTION_104();
  }
  *(_QWORD *)a2 = v29;
  *(_BYTE *)(a2 + 8) = v18;
  v26 = (uint64_t)v38;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1(v26);
  OUTLINED_FUNCTION_72();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.SamplingStrategyConfiguration(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AutomationJSON.SamplingStrategyConfiguration.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.SamplingStrategyConfiguration(_QWORD *a1)
{
  AutomationJSON.SamplingStrategyConfiguration.encode(to:)(a1);
}

void AutomationJSON.useCaseIdentifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.inputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 360);
  v3 = *(_QWORD *)(v1 + 368);
  v4 = *(_QWORD *)(v1 + 376);
  v5 = *(_QWORD *)(v1 + 384);
  v6 = *(_QWORD *)(v1 + 392);
  v7 = *(_QWORD *)(v1 + 400);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(v1 + 408);
  return outlined copy of AutomationJSON.InputSafetyConfiguration?(v2, v3);
}

uint64_t AutomationJSON.outputSafetyConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int16 v5;

  v2 = *(_QWORD *)(v1 + 416);
  v3 = *(_QWORD *)(v1 + 424);
  v4 = *(_BYTE *)(v1 + 434);
  v5 = *(_WORD *)(v1 + 432);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 18) = v4;
  *(_WORD *)(a1 + 16) = v5;
  return outlined copy of AutomationJSON.OutputSafetyConfiguration?(v2, v3);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.ovs.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.textModeration.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.textSanitization.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 7566959;
  if (a1 == 1)
    return 0x65646F4D74786574;
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  char *v0;

  return AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)();
}

{
  uint64_t v0;
  void (*v1)(void);
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);

  OUTLINED_FUNCTION_2();
  v7 = v1;
  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(v4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  v7();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_79();
  }
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  void (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  char v11;
  char v12;
  _BYTE *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  v5 = v4;
  v13 = v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(v7);
  v8 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_60();
  v9 = OUTLINED_FUNCTION_56(v5);
  v3(v9);
  OUTLINED_FUNCTION_131();
  if (!v0)
  {
    v10 = OUTLINED_FUNCTION_76();
    v11 = OUTLINED_FUNCTION_76();
    v12 = OUTLINED_FUNCTION_76();
    OUTLINED_FUNCTION_77(v1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    *v13 = v10 & 1;
    v13[1] = v11 & 1;
    v13[2] = v12 & 1;
  }
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)();
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.topK.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(language:topK:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1265659764 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1265659764;
  else
    return 0x65676175676E616CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  char *v0;

  return AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  OUTLINED_FUNCTION_94();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale.LanguageCode]);
  lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]();
  OUTLINED_FUNCTION_64();
  if (!v0)
  {
    OUTLINED_FUNCTION_125();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys();
  OUTLINED_FUNCTION_19();
  if (v1)
  {
    OUTLINED_FUNCTION_61();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale.LanguageCode]);
    lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]();
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_98();
    OUTLINED_FUNCTION_141();
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_6();
    *v2 = v3;
    v2[1] = v5;
    __swift_destroy_boxed_opaque_existential_1(v0);
    OUTLINED_FUNCTION_7();
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.encode(to:)();
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.isEmojiAllowed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(script:isEmojiAllowed:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x747069726373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x41696A6F6D457369 && a2 == 0xEE006465776F6C6CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x41696A6F6D457369;
  else
    return 0x747069726373;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  char *v0;

  return AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  OUTLINED_FUNCTION_94();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale]);
  lazy protocol witness table accessor for type [Locale] and conformance <A> [A]();
  OUTLINED_FUNCTION_64();
  if (!v0)
    OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys();
  OUTLINED_FUNCTION_19();
  if (v1)
  {
    OUTLINED_FUNCTION_61();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Locale]);
    lazy protocol witness table accessor for type [Locale] and conformance <A> [A]();
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_98();
    OUTLINED_FUNCTION_141();
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_6();
    *(_QWORD *)v2 = v3;
    *(_BYTE *)(v2 + 8) = v5 & 1;
    __swift_destroy_boxed_opaque_existential_1(v0);
    OUTLINED_FUNCTION_7();
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.encode(to:)();
}

void AutomationJSON.InputSafetyConfiguration.denyListIdentifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.InputSafetyConfiguration.languageRecognizer.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_OWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.InputSafetyConfiguration.languageScriptValidator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t AutomationJSON.InputSafetyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  char v6;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248C98020
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x6961726472617567 && a2 == 0xEA0000000000736CLL;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000012 && a2 == 0x8000000248C98040
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000017 && a2 == 0x8000000248C98060)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        return 3;
      else
        return 4;
    }
  }
}

uint64_t AutomationJSON.InputSafetyConfiguration.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t AutomationJSON.InputSafetyConfiguration.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248BEB270 + 4 * byte_248C8F186[a1]))(0xD000000000000012, 0x8000000248C98020);
}

uint64_t sub_248BEB270()
{
  return 0x6961726472617567;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  unsigned __int8 *v0;

  return AutomationJSON.InputSafetyConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.InputSafetyConfiguration.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.InputSafetyConfiguration.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.InputSafetyConfiguration.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_56(v3);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_58();
  if (!v0)
  {
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_153();
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer();
    OUTLINED_FUNCTION_40();
    OUTLINED_FUNCTION_150();
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator();
    OUTLINED_FUNCTION_40();
  }
  OUTLINED_FUNCTION_8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.InputSafetyConfiguration.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.InputSafetyConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_36();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys();
  OUTLINED_FUNCTION_128();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_61();
  }
  else
  {
    LOBYTE(v13) = 0;
    v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9 = v8;
    v10 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_57();
    if (v10)
    {
      OUTLINED_FUNCTION_10(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      OUTLINED_FUNCTION_13();
      v11 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_153();
      lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      OUTLINED_FUNCTION_150();
      v12 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator();
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_57();
      OUTLINED_FUNCTION_10(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      if (!v12)
      {
        OUTLINED_FUNCTION_4();
        *(_QWORD *)v5 = v7;
        *(_QWORD *)(v5 + 8) = v9;
        *(_BYTE *)(v5 + 18) = BYTE2(v13);
        *(_WORD *)(v5 + 16) = v13;
        *(_QWORD *)(v5 + 24) = v13;
        *(_QWORD *)(v5 + 32) = v14;
        *(_QWORD *)(v5 + 40) = v13;
        *(_BYTE *)(v5 + 48) = v14;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_7();
        goto LABEL_9;
      }
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_88();
      v11 = 1;
    }
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_13();
    if (v11)
LABEL_9:
      swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.InputSafetyConfiguration()
{
  AutomationJSON.InputSafetyConfiguration.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.InputSafetyConfiguration()
{
  AutomationJSON.InputSafetyConfiguration.encode(to:)();
}

uint64_t AutomationJSON.OutputSafetyConfiguration.Guardrails.ovs.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.init(ovs:textModeration:textSanitization:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v7;

  v2 = a1 == 7566959 && a2 == 0xE300000000000000;
  if (v2 || (OUTLINED_FUNCTION_67() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x65646F4D74786574 && a2 == 0xEE006E6F69746172;
    if (v6 || (OUTLINED_FUNCTION_67() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000248C98000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = OUTLINED_FUNCTION_67();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.OutputSafetyConfiguration.Guardrails.encode(to:)()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.encode(to:)();
}

void AutomationJSON.OutputSafetyConfiguration.Guardrails.init(from:)()
{
  AutomationJSON.InputSafetyConfiguration.Guardrails.init(from:)();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  AutomationJSON.OutputSafetyConfiguration.Guardrails.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  AutomationJSON.OutputSafetyConfiguration.Guardrails.encode(to:)();
}

void AutomationJSON.OutputSafetyConfiguration.denyListIdentifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.OutputSafetyConfiguration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248C98020
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6961726472617567 && a2 == 0xEA0000000000736CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t AutomationJSON.OutputSafetyConfiguration.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6961726472617567;
  else
    return 0xD000000000000012;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  char *v0;

  return AutomationJSON.OutputSafetyConfiguration.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.OutputSafetyConfiguration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.OutputSafetyConfiguration.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.OutputSafetyConfiguration.CodingKeys>)
                 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_95();
  OUTLINED_FUNCTION_56(v2);
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_58();
  if (!v0)
  {
    lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails();
    OUTLINED_FUNCTION_125();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.OutputSafetyConfiguration.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_85();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.OutputSafetyConfiguration.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys();
  OUTLINED_FUNCTION_19();
  if (v13)
  {
    OUTLINED_FUNCTION_61();
  }
  else
  {
    OUTLINED_FUNCTION_113();
    v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v18 = v17;
    lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_6();
    *(_QWORD *)v14 = v16;
    *(_QWORD *)(v14 + 8) = v18;
    *(_BYTE *)(v14 + 18) = a12;
    *(_WORD *)(v14 + 16) = a11;
    __swift_destroy_boxed_opaque_existential_1(v12);
    OUTLINED_FUNCTION_7();
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  _BYTE vars8[7];

  AutomationJSON.OutputSafetyConfiguration.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, *(int *)vars8, *(__int16 *)&vars8[4], vars8[6]);
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.OutputSafetyConfiguration()
{
  AutomationJSON.OutputSafetyConfiguration.encode(to:)();
}

void AutomationJSON.decoder.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void AutomationJSON.decoderConfig.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v2[136];

  v1 = outlined init with take of AutomationJSON.DecoderConfig?(v0 + 456, (uint64_t)v2);
  OUTLINED_FUNCTION_142(v1);
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v2);
}

uint64_t AutomationJSON.decoderConfig.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[136];
  _BYTE v5[144];

  outlined init with take of AutomationJSON.DecoderConfig?(a1, (uint64_t)v4);
  outlined init with take of AutomationJSON.DecoderConfig?(v1 + 456, (uint64_t)v5);
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v5);
  return OUTLINED_FUNCTION_142(v2);
}

uint64_t (*AutomationJSON.decoderConfig.modify())()
{
  return AutomationJSON.responses.modify;
}

TokenGenerationCore::AutomationJSON::Role_optional __swiftcall AutomationJSON.Role.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  TokenGenerationCore::AutomationJSON::Role_optional result;

  v2._rawValue = &outlined read-only object #0 of AutomationJSON.Role.init(rawValue:);
  TGModes.init(rawValue:)(rawValue, v2, v1);
  return result;
}

void TGModes.init(rawValue:)(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  swift_bridgeObjectRelease();
  v8 = 3;
  if (v7 < 3)
    v8 = v7;
  *a3 = v8;
  OUTLINED_FUNCTION_99();
}

uint64_t AutomationJSON.Role.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1919251317;
  if (*v0 != 1)
    v1 = 0x6E61747369737361;
  if (*v0)
    return v1;
  else
    return 0x6D6574737973;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.Role(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.Role()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutomationJSON.Role(uint64_t a1)
{
  char *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.Role()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

TokenGenerationCore::AutomationJSON::Role_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutomationJSON.Role(Swift::String *a1)
{
  return AutomationJSON.Role.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AutomationJSON.Role(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = AutomationJSON.Role.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_23();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AutomationJSON.Role()
{
  lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutomationJSON.Role()
{
  lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
  return RawRepresentable<>.encode(to:)();
}

void AutomationJSON.Turn.role.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void AutomationJSON.Turn.content.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t AutomationJSON.Turn.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701605234 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void AutomationJSON.RenderedPrompt.Source.CodingKeys.hashValue.getter(char a1)
{
  OUTLINED_FUNCTION_97();
  Hasher._combine(_:)(a1 & 1);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t AutomationJSON.Turn.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E65746E6F63;
  else
    return 1701605234;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_138();
  OUTLINED_FUNCTION_139(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.Turn.CodingKeys()
{
  char *v0;

  return AutomationJSON.Turn.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.Turn.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.Turn.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.Turn.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.Turn.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.Turn.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.Turn.CodingKeys>);
  OUTLINED_FUNCTION_110();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_56(v3);
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  OUTLINED_FUNCTION_43();
  lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
  OUTLINED_FUNCTION_125();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v0)
    OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_39(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.Turn.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_2();
  v15 = v14;
  v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.Turn.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys();
  OUTLINED_FUNCTION_38();
  if (!v13)
  {
    lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v19 = OUTLINED_FUNCTION_124();
    v21 = v20;
    OUTLINED_FUNCTION_42();
    *(_BYTE *)v17 = a13;
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 16) = v21;
  }
  __swift_destroy_boxed_opaque_existential_1(v15);
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.Turn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;
  uint64_t vars8;

  AutomationJSON.Turn.init(from:)(a1, a2, a3, a4, a5, a6, a7, a8, vars0, vars8, SWORD2(vars8), SBYTE6(vars8), SHIBYTE(vars8));
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.Turn()
{
  AutomationJSON.Turn.encode(to:)();
}

void AutomationJSON.Response.content.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

TokenGenerationCore::AutomationJSON::Response __swiftcall AutomationJSON.Response.init(content:)(TokenGenerationCore::AutomationJSON::Response content)
{
  TokenGenerationCore::AutomationJSON::Response *v1;

  *v1 = content;
  return content;
}

uint64_t AutomationJSON.Response.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t AutomationJSON.Response.CodingKeys.stringValue.getter()
{
  return 0x746E65746E6F63;
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.Response.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.Response.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.Response.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.Response.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.Response.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;

  OUTLINED_FUNCTION_2();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  v24 = v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.Response.CodingKeys>);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_56(v24);
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  OUTLINED_FUNCTION_43();
  KeyedEncodingContainer.encode(_:forKey:)();
  OUTLINED_FUNCTION_77((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.Response.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.Response.CodingKeys>);
  OUTLINED_FUNCTION_20();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_12();
  lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys();
  OUTLINED_FUNCTION_38();
  if (!v0)
  {
    v6 = OUTLINED_FUNCTION_124();
    v8 = v7;
    OUTLINED_FUNCTION_42();
    *v4 = v6;
    v4[1] = v8;
  }
  __swift_destroy_boxed_opaque_existential_1(v2);
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.Response()
{
  AutomationJSON.Response.init(from:)();
}

#error "248BEC8CC: call analysis failed (funcsize=5)"

uint64_t AutomationJSON.DecoderConfig.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v11;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000248C98080
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x6E75427466617264 && a2 == 0xEF68746150656C64;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v6 = a1 == 0x646E7542796E6974 && a2 == 0xEE0068746150656CLL;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v7 = a1 == 0x657A696E656B6F74 && a2 == 0xED00006874615072;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000018 && a2 == 0x8000000248C980A0
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x8000000248C980C0
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          v8 = a1 == 0x6574537466617264 && a2 == 0xEA00000000007370;
          if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            v9 = a1 == 0x6572547466617264 && a2 == 0xEF726F7463614665;
            if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else
            {
              v10 = a1 == 0x6164417466617264 && a2 == 0xED00006576697470;
              if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else if (a1 == 0xD000000000000017 && a2 == 0x8000000248C980E0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v11 & 1) != 0)
                  return 9;
                else
                  return 10;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t AutomationJSON.DecoderConfig.CodingKeys.init(intValue:)()
{
  return 10;
}

uint64_t AutomationJSON.DecoderConfig.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248BECDB0 + 4 * byte_248C8F18A[a1]))(0xD000000000000010, 0x8000000248C98080);
}

uint64_t sub_248BECDB0()
{
  return 0x6E75427466617264;
}

uint64_t sub_248BECDD4()
{
  return 0x646E7542796E6974;
}

uint64_t sub_248BECDF8()
{
  return 0x657A696E656B6F74;
}

uint64_t sub_248BECE1C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  unsigned __int8 *v0;

  return AutomationJSON.DecoderConfig.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.DecoderConfig.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.DecoderConfig.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.DecoderConfig.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.DecoderConfig.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.DecoderConfig.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.DecoderConfig.CodingKeys>);
  OUTLINED_FUNCTION_81();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_59();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_58();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_47();
    OUTLINED_FUNCTION_137();
    OUTLINED_FUNCTION_137();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  OUTLINED_FUNCTION_46(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.DecoderConfig.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[17];
  _QWORD v34[13];
  char v35;
  _BYTE v36[7];
  uint64_t v37;
  char v38;
  char v39;
  int v40;
  char v41;
  char v42;
  char v43;
  char v44;
  _BYTE v45[7];
  char v46;

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.DecoderConfig.CodingKeys>);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_116();
  v46 = 1;
  v44 = 1;
  v43 = 1;
  v6 = v2[3];
  __swift_project_boxed_opaque_existential_1(v2, v6);
  lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_130();
  }
  else
  {
    v27 = v4;
    v7 = OUTLINED_FUNCTION_14();
    v9 = v8;
    OUTLINED_FUNCTION_41();
    v26 = OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31(2);
    OUTLINED_FUNCTION_115();
    v32 = v6;
    v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_31(3);
    v31 = v6;
    v24 = OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31(4);
    v30 = v6;
    v23 = OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31(5);
    v29 = v6;
    v22 = OUTLINED_FUNCTION_14();
    OUTLINED_FUNCTION_31(6);
    v28 = v6;
    v21 = OUTLINED_FUNCTION_91();
    v20 = v10;
    v46 = v10 & 1;
    v11 = OUTLINED_FUNCTION_91();
    v18 = v12;
    v44 = v12 & 1;
    LOBYTE(v34[0]) = 8;
    OUTLINED_FUNCTION_115();
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17 = v11;
    v42 = 9;
    OUTLINED_FUNCTION_115();
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v14 = v13;
    v15 = HIDWORD(v13) & 1;
    v16 = v13;
    OUTLINED_FUNCTION_3();
    v43 = v15;
    v33[0] = v7;
    v33[1] = v9;
    v33[2] = v26;
    v33[3] = v32;
    v33[4] = v25;
    v33[5] = v31;
    v33[6] = v24;
    v33[7] = v30;
    v33[8] = v23;
    v33[9] = v29;
    v33[10] = v22;
    v33[11] = v28;
    v33[12] = v21;
    LOBYTE(v33[13]) = v20 & 1;
    v33[14] = v17;
    LOBYTE(v33[15]) = v18 & 1;
    BYTE1(v33[15]) = v19;
    HIDWORD(v33[15]) = v14;
    LOBYTE(v33[16]) = v15;
    outlined retain of AutomationJSON.DecoderConfig((uint64_t)v33);
    OUTLINED_FUNCTION_7();
    OUTLINED_FUNCTION_118();
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_82();
    OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_88();
    memcpy(v27, v33, 0x81uLL);
    OUTLINED_FUNCTION_130();
    v34[0] = v7;
    v34[1] = v9;
    v34[2] = v26;
    v34[3] = v32;
    v34[4] = v25;
    v34[5] = v31;
    v34[6] = v24;
    v34[7] = v30;
    v34[8] = v23;
    v34[9] = v29;
    v34[10] = v22;
    v34[11] = v28;
    v34[12] = v21;
    v35 = v46;
    *(_DWORD *)v36 = *(_DWORD *)v45;
    *(_DWORD *)&v36[3] = *(_DWORD *)&v45[3];
    v37 = v17;
    v38 = v44;
    v39 = v19;
    v40 = v16;
    v41 = v43;
    outlined release of AutomationJSON.DecoderConfig((uint64_t)v34);
  }
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON.DecoderConfig()
{
  AutomationJSON.DecoderConfig.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON.DecoderConfig()
{
  AutomationJSON.DecoderConfig.encode(to:)();
}

void *AutomationJSON.init(input:mode:modelBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  _BYTE v13[136];
  _OWORD __src[37];

  _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_(v13);
  *(_QWORD *)&__src[0] = a2;
  *((_QWORD *)&__src[0] + 1) = a3;
  *(_QWORD *)&__src[1] = a4;
  *((_QWORD *)&__src[1] + 1) = a5;
  *(_QWORD *)&__src[2] = 0;
  BYTE8(__src[2]) = 1;
  *(_QWORD *)&__src[3] = 0;
  BYTE8(__src[3]) = 1;
  *(_QWORD *)&__src[4] = 0;
  BYTE8(__src[4]) = 1;
  __src[5] = 0uLL;
  *(_QWORD *)&__src[6] = a1;
  BYTE8(__src[6]) = 3;
  memset(&__src[7], 0, 56);
  BYTE8(__src[10]) = 1;
  *(_QWORD *)&__src[11] = 0;
  BYTE8(__src[11]) = 1;
  *((_QWORD *)&__src[13] + 1) = 0;
  memset(&__src[12], 0, 17);
  LOBYTE(__src[14]) = 1;
  *(_WORD *)((char *)&__src[14] + 1) = 514;
  *(_OWORD *)((char *)&__src[14] + 8) = 0u;
  *(_OWORD *)((char *)&__src[15] + 8) = 0u;
  *((_QWORD *)&__src[16] + 1) = 0;
  *(_QWORD *)&__src[17] = 1;
  BYTE8(__src[17]) = 0;
  *(_QWORD *)&__src[18] = 0;
  BYTE8(__src[18]) = 0;
  __src[19] = 0uLL;
  LOBYTE(__src[20]) = -1;
  *((_QWORD *)&__src[20] + 1) = 0;
  LOBYTE(__src[21]) = -1;
  __src[22] = xmmword_248C90B70;
  *((_QWORD *)&__src[21] + 1) = 0x6974616D6F747561;
  *(_QWORD *)&__src[23] = 1;
  *(_OWORD *)((char *)&__src[23] + 8) = 0u;
  *(_OWORD *)((char *)&__src[24] + 8) = 0u;
  BYTE8(__src[25]) = 0;
  __src[26] = xmmword_248C90B80;
  LOWORD(__src[27]) = 0;
  BYTE2(__src[27]) = 0;
  *(_QWORD *)&__src[28] = 0;
  *((_QWORD *)&__src[27] + 1) = 0;
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v13, (uint64_t)&__src[28] + 8);
  return memcpy(a6, __src, 0x249uLL);
}

void static AutomationJSON.Parse(filePath:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;

  OUTLINED_FUNCTION_2();
  v15 = v5;
  v6 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_110();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_36();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5();
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_116();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v3, *MEMORY[0x24BDCD7A0], v6);
  OUTLINED_FUNCTION_75();
  URL.init(filePath:directoryHint:relativeTo:)();
  v11 = Data.init(contentsOf:options:)();
  if (v0)
  {
    OUTLINED_FUNCTION_30(v4, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  }
  else
  {
    v13 = v11;
    v14 = v12;
    OUTLINED_FUNCTION_30(v4, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    type metadata accessor for JSONDecoder();
    OUTLINED_FUNCTION_133();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    outlined consume of Data._Representation(v13, v14);
    OUTLINED_FUNCTION_112(v15, &v16);
  }
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_0_0();
}

void static AutomationJSON.Serialize(json:)()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  uint64_t v3;
  _QWORD v5[76];

  OUTLINED_FUNCTION_2();
  v2 = v1;
  v5[74] = *MEMORY[0x24BDAC8D0];
  type metadata accessor for JSONEncoder.OutputFormatting();
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_60();
  type metadata accessor for JSONEncoder();
  OUTLINED_FUNCTION_133();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  OUTLINED_FUNCTION_112(v5, v2);
  lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
    __asm { BR              X10 }
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_83();
}

BOOL static AutomationJSON.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AutomationJSON.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t AutomationJSON.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  char v28;

  v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E75426C65646F6DLL && a2 == 0xED00006449656C64;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6E656B6F5478616DLL && a2 == 0xE900000000000073;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x65536D6F646E6172 && a2 == 0xEA00000000006465;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              v11 = a1 == 0x7475706E69 && a2 == 0xE500000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                v12 = a1 == 0x6F72507475706E69 && a2 == 0xEF6570795474706DLL;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else if (a1 == 0xD000000000000015 && a2 == 0x8000000248C98100
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 8;
                }
                else
                {
                  v13 = a1 == 0x736567617373656DLL && a2 == 0xE800000000000000;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    v14 = a1 == 0x65736E6F70736572 && a2 == 0xE900000000000073;
                    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      swift_bridgeObjectRelease();
                      return 10;
                    }
                    else
                    {
                      v15 = a1 == 0x74757074756FLL && a2 == 0xE600000000000000;
                      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      {
                        swift_bridgeObjectRelease();
                        return 11;
                      }
                      else
                      {
                        v16 = a1 == 0x64657265646E6572 && a2 == -1192481450101870000;
                        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 12;
                        }
                        else if (a1 == 0xD000000000000014 && a2 == 0x8000000248C98120
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 13;
                        }
                        else if (a1 == 0xD000000000000010 && a2 == 0x8000000248C98140
                               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                        {
                          swift_bridgeObjectRelease();
                          return 14;
                        }
                        else
                        {
                          v17 = a1 == 0x65506874676E656CLL && a2 == 0xED000079746C616ELL;
                          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          {
                            swift_bridgeObjectRelease();
                            return 15;
                          }
                          else
                          {
                            v18 = a1 == 0x75716553706F7473 && a2 == 0xEC00000065636E65;
                            if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            {
                              swift_bridgeObjectRelease();
                              return 16;
                            }
                            else
                            {
                              v19 = a1 == 0x6D726177657270 && a2 == 0xE700000000000000;
                              if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 17;
                              }
                              else if (a1 == 0xD000000000000016 && a2 == 0x8000000248C98160
                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 18;
                              }
                              else if (a1 == 0xD000000000000013 && a2 == 0x8000000248C98180
                                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                              {
                                swift_bridgeObjectRelease();
                                return 19;
                              }
                              else
                              {
                                v20 = a1 == 0x6165486E656B6F74 && a2 == 0xEC000000676E696CLL;
                                if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                {
                                  swift_bridgeObjectRelease();
                                  return 20;
                                }
                                else
                                {
                                  v21 = a1 == 0x616D65686373 && a2 == 0xE600000000000000;
                                  if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  {
                                    swift_bridgeObjectRelease();
                                    return 21;
                                  }
                                  else
                                  {
                                    v22 = a1 == 0x72616D6D617267 && a2 == 0xE700000000000000;
                                    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                    {
                                      swift_bridgeObjectRelease();
                                      return 22;
                                    }
                                    else if (a1 == 0xD000000000000016 && a2 == 0x8000000248C981A0
                                           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                    {
                                      swift_bridgeObjectRelease();
                                      return 23;
                                    }
                                    else
                                    {
                                      v23 = a1 == 0x6F69746172657469 && a2 == 0xEE00746E756F436ELL;
                                      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                      {
                                        swift_bridgeObjectRelease();
                                        return 24;
                                      }
                                      else
                                      {
                                        v24 = a1 == 0x654474706D6F7270 && a2 == 0xEB0000000079616CLL;
                                        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                        {
                                          swift_bridgeObjectRelease();
                                          return 25;
                                        }
                                        else
                                        {
                                          v25 = a1 == 0x6174614472657375 && a2 == 0xE800000000000000;
                                          if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 26;
                                          }
                                          else if (a1 == 0xD00000000000001DLL && a2 == 0x8000000248C981C0
                                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 27;
                                          }
                                          else if (a1 == 0xD000000000000011 && a2 == 0x8000000248C981E0
                                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 28;
                                          }
                                          else if (a1 == 0xD000000000000018 && a2 == 0x8000000248C98200
                                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 29;
                                          }
                                          else if (a1 == 0xD000000000000019 && a2 == 0x8000000248C98220
                                                 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                          {
                                            swift_bridgeObjectRelease();
                                            return 30;
                                          }
                                          else
                                          {
                                            v26 = a1 == 0x7265646F636564 && a2 == 0xE700000000000000;
                                            if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                            {
                                              swift_bridgeObjectRelease();
                                              return 31;
                                            }
                                            else if (a1 == 0x437265646F636564 && a2 == 0xED00006769666E6FLL)
                                            {
                                              swift_bridgeObjectRelease();
                                              return 32;
                                            }
                                            else
                                            {
                                              v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                              swift_bridgeObjectRelease();
                                              if ((v28 & 1) != 0)
                                                return 32;
                                              else
                                                return 33;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t AutomationJSON.CodingKeys.init(intValue:)()
{
  return 33;
}

void AutomationJSON.RenderedPrompt.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_97();
  Hasher._combine(_:)(a1);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t AutomationJSON.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248BEEA64 + 4 * byte_248C8F194[a1]))(1701080941, 0xE400000000000000);
}

uint64_t sub_248BEEA64()
{
  return 0x6E75426C65646F6DLL;
}

uint64_t sub_248BEEA88()
{
  return 0x74617265706D6574;
}

uint64_t sub_248BEEAA8()
{
  return 0x6E656B6F5478616DLL;
}

uint64_t sub_248BEEB70()
{
  return 0x74757074756FLL;
}

uint64_t sub_248BEEB84()
{
  return 0x64657265646E6572;
}

unint64_t sub_248BEEBA8()
{
  return 0xD000000000000014;
}

unint64_t sub_248BEEBC0()
{
  return 0xD000000000000010;
}

uint64_t sub_248BEEBD8()
{
  return 0x65506874676E656CLL;
}

uint64_t sub_248BEEBFC()
{
  return 0x75716553706F7473;
}

uint64_t sub_248BEEC1C()
{
  return 0x6D726177657270;
}

unint64_t sub_248BEEC34()
{
  return 0xD000000000000016;
}

uint64_t sub_248BEECBC()
{
  return 0x6F69746172657469;
}

uint64_t sub_248BEECE0()
{
  return 0x654474706D6F7270;
}

uint64_t sub_248BEED00()
{
  return 0x6174614472657375;
}

unint64_t sub_248BEED18()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_248BEED30()
{
  return 0xD000000000000011;
}

unint64_t sub_248BEED48()
{
  return 0xD000000000000018;
}

void sub_248BEED60()
{
  JUMPOUT(0x248BEED74);
}

void sub_248BEED80()
{
  JUMPOUT(0x248BEED90);
}

uint64_t sub_248BEED98()
{
  return 0x437265646F636564;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutomationJSON.CodingKeys(char *a1, char *a2)
{
  return static AutomationJSON.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance AutomationJSON.CodingKeys()
{
  unsigned __int8 *v0;

  AutomationJSON.RenderedPrompt.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AutomationJSON.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  AutomationJSON.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AutomationJSON.CodingKeys()
{
  unsigned __int8 *v0;

  return AutomationJSON.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutomationJSON.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = AutomationJSON.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AutomationJSON.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AutomationJSON.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutomationJSON.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutomationJSON.CodingKeys()
{
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void AutomationJSON.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE v40[144];

  OUTLINED_FUNCTION_2();
  v5 = v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutomationJSON.CodingKeys>);
  OUTLINED_FUNCTION_81();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_36();
  v32 = *(_QWORD *)(v0 + 96);
  v31 = *(_BYTE *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = *(_QWORD *)(v0 + 112);
  v27 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 128);
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 312);
  v11 = *(_BYTE *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  v13 = *(_BYTE *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 360);
  v15 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 384);
  v20 = *(_QWORD *)(v0 + 376);
  v17 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 392);
  v16 = *(_BYTE *)(v0 + 408);
  v23 = *(_QWORD *)(v0 + 416);
  v24 = *(_QWORD *)(v0 + 424);
  v21 = *(unsigned __int16 *)(v0 + 432);
  v22 = *(unsigned __int8 *)(v0 + 434);
  outlined init with take of AutomationJSON.DecoderConfig?(v0 + 456, (uint64_t)v40);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  OUTLINED_FUNCTION_128();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v33) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v6);
  }
  else
  {
    OUTLINED_FUNCTION_29(1);
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_29(2);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_29(3);
    OUTLINED_FUNCTION_106();
    OUTLINED_FUNCTION_29(4);
    OUTLINED_FUNCTION_106();
    OUTLINED_FUNCTION_29(5);
    OUTLINED_FUNCTION_107();
    v33 = v32;
    OUTLINED_FUNCTION_89();
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v33) = v31;
    lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v33 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
    OUTLINED_FUNCTION_62();
    v33 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AutomationJSON.Turn]]);
    lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type [[AutomationJSON.Turn]] and conformance <A> [A]);
    OUTLINED_FUNCTION_62();
    v33 = v28;
    OUTLINED_FUNCTION_89();
    OUTLINED_FUNCTION_122((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.Response] and conformance <A> [A]);
    OUTLINED_FUNCTION_102();
    v33 = v27;
    OUTLINED_FUNCTION_28(11);
    v33 = v26;
    OUTLINED_FUNCTION_89();
    OUTLINED_FUNCTION_122((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.RenderedPrompt?] and conformance <A> [A]);
    OUTLINED_FUNCTION_102();
    v33 = v25;
    OUTLINED_FUNCTION_28(13);
    OUTLINED_FUNCTION_29(14);
    OUTLINED_FUNCTION_111();
    OUTLINED_FUNCTION_29(15);
    OUTLINED_FUNCTION_111();
    OUTLINED_FUNCTION_29(16);
    OUTLINED_FUNCTION_32();
    LOBYTE(v33) = 17;
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_29(18);
    OUTLINED_FUNCTION_69();
    LOBYTE(v33) = 19;
    OUTLINED_FUNCTION_71();
    LOBYTE(v33) = 20;
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_29(21);
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_29(22);
    OUTLINED_FUNCTION_32();
    v33 = v8;
    OUTLINED_FUNCTION_28(23);
    OUTLINED_FUNCTION_29(24);
    OUTLINED_FUNCTION_69();
    OUTLINED_FUNCTION_29(25);
    OUTLINED_FUNCTION_69();
    v33 = v9;
    v34 = v10;
    LOBYTE(v35) = v11;
    lazy protocol witness table accessor for type JSON and conformance JSON();
    OUTLINED_FUNCTION_22();
    v33 = v12;
    LOBYTE(v34) = v13;
    lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_29(28);
    OUTLINED_FUNCTION_32();
    v33 = v14;
    v34 = v15;
    v35 = v20;
    v36 = v19;
    v37 = v18;
    v38 = v17;
    v39 = v16;
    lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
    OUTLINED_FUNCTION_22();
    v33 = v23;
    v34 = v24;
    BYTE2(v35) = (v21 | (v22 << 16)) >> 16;
    LOWORD(v35) = v21;
    lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
    OUTLINED_FUNCTION_22();
    OUTLINED_FUNCTION_29(31);
    OUTLINED_FUNCTION_32();
    outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v40, (uint64_t)&v33);
    lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig();
    OUTLINED_FUNCTION_102();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v6);
  }
  OUTLINED_FUNCTION_0_0();
}

void AutomationJSON.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  _BOOL4 v115;
  uint64_t v116;
  _BYTE v117[136];
  _BYTE v118[136];
  _QWORD v119[5];
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  __int16 v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  char v183;
  uint64_t v184;
  _QWORD v185[5];
  char v186;
  uint64_t v187;
  char v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  char v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  __int16 v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE v239[136];
  _BYTE v240[144];

  OUTLINED_FUNCTION_2();
  v3 = v2;
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutomationJSON.CodingKeys>);
  OUTLINED_FUNCTION_81();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_36();
  v197 = 0u;
  v198 = 0u;
  _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_(v240);
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v240, (uint64_t)v239);
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys();
  OUTLINED_FUNCTION_128();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    v8 = 0x1FFFFFC9DLL;
LABEL_4:
    v9 = v8 + 0x100003F63;
    goto LABEL_5;
  }
  v112 = v5;
  v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v22 = v21;
  v185[0] = v7;
  v185[1] = v21;
  v23 = v7;
  OUTLINED_FUNCTION_41();
  v24 = OUTLINED_FUNCTION_145();
  v26 = v25;
  v111 = v23;
  v185[2] = v24;
  v185[3] = v25;
  v27 = v24;
  OUTLINED_FUNCTION_41();
  v109 = v22;
  v107 = v27;
  v185[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v186 = v28 & 1;
  v105 = v22;
  v106 = v27;
  v187 = OUTLINED_FUNCTION_74(3);
  v188 = v29 & 1;
  v104 = v22;
  v103 = v27;
  v189 = OUTLINED_FUNCTION_74(4);
  v190 = v30 & 1;
  LOBYTE(v176) = 5;
  v100 = v30;
  v101 = v189;
  v191 = OUTLINED_FUNCTION_145();
  v192 = v31;
  v99 = v191;
  v32 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  LOBYTE(v119[0]) = 6;
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  v102 = v32;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_114();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v98 = v26;
  v33 = v176;
  v193 = v176;
  LOBYTE(v119[0]) = 7;
  v34 = lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_127();
  if (v34)
  {
    OUTLINED_FUNCTION_10(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_21();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_88();
    v8 = 0x1FFFFFD00;
    goto LABEL_4;
  }
  v35 = v176;
  v194 = v176;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : String]]);
  LOBYTE(v119[0]) = 8;
  lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]();
  OUTLINED_FUNCTION_114();
  OUTLINED_FUNCTION_127();
  v195 = v176;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[AutomationJSON.Turn]]);
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type [[AutomationJSON.Turn]] and conformance <A> [A]);
  v96 = v176;
  OUTLINED_FUNCTION_4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v196 = v176;
  OUTLINED_FUNCTION_89();
  LOBYTE(v119[0]) = 10;
  OUTLINED_FUNCTION_122((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.Response] and conformance <A> [A]);
  v37 = v36;
  v95 = v176;
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_9();
  if (v37)
  {
    v9 = 0x100003F63;
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_21();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_24();
  }
  else
  {
    *(_QWORD *)&v197 = v176;
    v94 = v176;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_9();
    *((_QWORD *)&v197 + 1) = v176;
    OUTLINED_FUNCTION_89();
    LOBYTE(v119[0]) = 12;
    OUTLINED_FUNCTION_122((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.RenderedPrompt?] and conformance <A> [A]);
    v39 = v38;
    v93 = v176;
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_9();
    if (!v39)
    {
      *(_QWORD *)&v198 = v176;
      v40 = v176;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_9();
      *((_QWORD *)&v198 + 1) = v176;
      v92 = v176;
      swift_bridgeObjectRetain();
      v91 = OUTLINED_FUNCTION_103();
      v90 = v41;
      v199 = v91;
      v200 = v41 & 1;
      v89 = OUTLINED_FUNCTION_103();
      v88 = v42;
      v201 = v89;
      v202 = v42 & 1;
      v86 = OUTLINED_FUNCTION_17();
      v87 = v43;
      v203 = v86;
      v204 = v43;
      swift_bridgeObjectRetain();
      v85 = OUTLINED_FUNCTION_53();
      v205 = v85;
      v84 = OUTLINED_FUNCTION_52();
      v83 = v44;
      v206 = v84;
      v207 = v44 & 1;
      v82 = OUTLINED_FUNCTION_53();
      v208 = v82;
      v81 = OUTLINED_FUNCTION_53();
      v209 = v81;
      v80 = OUTLINED_FUNCTION_17();
      v46 = v45;
      v210 = v80;
      v211 = v45;
      LOBYTE(v176) = 22;
      swift_bridgeObjectRetain();
      v78 = OUTLINED_FUNCTION_17();
      v79 = v47;
      v212 = v78;
      v213 = v47;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_9();
      v214 = v176;
      v97 = v176;
      swift_bridgeObjectRetain();
      v77 = OUTLINED_FUNCTION_52();
      v76 = v48;
      v215 = v77;
      v216 = v48 & 1;
      LOBYTE(v176) = 25;
      v75 = OUTLINED_FUNCTION_52();
      v74 = v49;
      v217 = v75;
      v218 = v49 & 1;
      lazy protocol witness table accessor for type JSON and conformance JSON();
      OUTLINED_FUNCTION_9();
      v219 = v176;
      v220 = v177;
      v221 = v178;
      LOBYTE(v119[0]) = 27;
      v50 = v176;
      v72 = v177;
      v73 = v178;
      outlined copy of JSON?(v176, v177, v178);
      lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration();
      OUTLINED_FUNCTION_9();
      v69 = v176;
      v222 = v176;
      v68 = v177;
      v223 = v177;
      LOBYTE(v176) = 28;
      v70 = OUTLINED_FUNCTION_17();
      v71 = v51;
      v224 = v70;
      v225 = v51;
      LOBYTE(v119[0]) = 29;
      v52 = lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration();
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_9();
      v115 = v52 == 0;
      if (v52)
      {
        OUTLINED_FUNCTION_1_0();
        OUTLINED_FUNCTION_120();
        outlined consume of JSON?(v50, v177, v178);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_21();
        OUTLINED_FUNCTION_15();
        OUTLINED_FUNCTION_25();
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_35();
        OUTLINED_FUNCTION_37();
        OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_66();
        OUTLINED_FUNCTION_93();
        v15 = 0;
        v14 = 0;
      }
      else
      {
        v226 = v176;
        v227 = v177;
        v228 = v178;
        v229 = v179;
        v230 = v180;
        v231 = v181;
        v232 = v182;
        LOBYTE(v119[0]) = 30;
        v61 = v176;
        v62 = v178;
        v66 = v177;
        v67 = v180;
        v63 = v179;
        v64 = v181;
        v65 = v182;
        outlined copy of AutomationJSON.InputSafetyConfiguration?(v176, v177);
        lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration();
        OUTLINED_FUNCTION_9();
        v53 = v176;
        v233 = v176;
        v234 = v177;
        v236 = BYTE2(v178);
        v235 = v178;
        LOBYTE(v176) = 31;
        v58 = v53;
        v59 = v177;
        v60 = (unsigned __int16)v178 | (BYTE2(v178) << 16);
        outlined copy of AutomationJSON.OutputSafetyConfiguration?(v53, v177);
        v56 = OUTLINED_FUNCTION_17();
        v57 = v54;
        v237 = v56;
        v238 = v54;
        v183 = 32;
        v55 = lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig();
        OUTLINED_FUNCTION_4();
        OUTLINED_FUNCTION_9();
        if (!v55)
        {
          OUTLINED_FUNCTION_1_0();
          outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)&v184, (uint64_t)v117);
          outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v239, (uint64_t)v118);
          outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v117);
          outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v118);
          outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v117, (uint64_t)v239);
          v119[2] = v107;
          v119[4] = v106;
          v120 = v105 & 1;
          v121 = v103;
          v122 = v104 & 1;
          v123 = v101;
          v124 = v100 & 1;
          v125 = v99;
          v128 = v35;
          v135 = v91;
          v136 = v90 & 1;
          v137 = v89;
          v138 = v88 & 1;
          v139 = v86;
          v141 = v85;
          v142 = v84;
          v143 = v83 & 1;
          v144 = v82;
          v145 = v81;
          v146 = v80;
          v148 = v78;
          v151 = v77;
          v152 = v76 & 1;
          v153 = v75;
          v154 = v74 & 1;
          v158 = v69;
          v159 = v68;
          v160 = v70;
          v172 = BYTE2(v60);
          v171 = v60;
          v119[0] = v111;
          v150 = v97;
          v119[1] = v109;
          v119[3] = v98;
          v126 = v102;
          v127 = v33;
          v129 = v96;
          v130 = v95;
          v131 = v94;
          v132 = v93;
          v133 = v40;
          v134 = v92;
          v140 = v87;
          v147 = v46;
          v149 = v79;
          v155 = v50;
          v156 = v72;
          v157 = v73;
          v161 = v71;
          v162 = v61;
          v163 = v66;
          v164 = v62;
          v165 = v63;
          v166 = v67;
          v167 = v64;
          v168 = v65;
          v169 = v58;
          v170 = v59;
          v173 = v56;
          v174 = v57;
          outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v117, (uint64_t)&v175);
          outlined retain of AutomationJSON((uint64_t)v119);
          outlined retain of AutomationJSON.DecoderConfig?((uint64_t)v117);
          swift_bridgeObjectRelease();
          outlined consume of AutomationJSON.OutputSafetyConfiguration?(v58, v59);
          outlined consume of AutomationJSON.InputSafetyConfiguration?(v61, v66);
          OUTLINED_FUNCTION_120();
          outlined consume of JSON?(v50, v72, v73);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_21();
          OUTLINED_FUNCTION_15();
          OUTLINED_FUNCTION_25();
          OUTLINED_FUNCTION_24();
          OUTLINED_FUNCTION_33();
          OUTLINED_FUNCTION_35();
          OUTLINED_FUNCTION_37();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_45();
          OUTLINED_FUNCTION_55();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_66();
          OUTLINED_FUNCTION_93();
          OUTLINED_FUNCTION_112(v112, v119);
          OUTLINED_FUNCTION_148();
          OUTLINED_FUNCTION_112(&v176, v185);
          outlined release of AutomationJSON((uint64_t)&v176);
          goto LABEL_32;
        }
        OUTLINED_FUNCTION_1_0();
        swift_bridgeObjectRelease();
        outlined consume of AutomationJSON.OutputSafetyConfiguration?(v58, v177);
        OUTLINED_FUNCTION_51();
        OUTLINED_FUNCTION_120();
        outlined consume of JSON?(v50, v177, v178);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_21();
        OUTLINED_FUNCTION_15();
        OUTLINED_FUNCTION_25();
        OUTLINED_FUNCTION_24();
        OUTLINED_FUNCTION_33();
        OUTLINED_FUNCTION_35();
        OUTLINED_FUNCTION_37();
        OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_55();
        OUTLINED_FUNCTION_13();
        OUTLINED_FUNCTION_66();
        OUTLINED_FUNCTION_93();
        v15 = 1;
        v14 = 1;
      }
      OUTLINED_FUNCTION_148();
      LOBYTE(v20) = 1;
      LODWORD(v10) = 1;
      LODWORD(v11) = 1;
      LODWORD(v108) = 1;
      LODWORD(v110) = 1;
      LODWORD(v113) = 1;
      LODWORD(v114) = 1;
      LODWORD(v116) = 1;
      LODWORD(v12) = 1;
      LODWORD(v13) = 1;
      v16 = 1;
      goto LABEL_13;
    }
    v9 = 0x100003F63;
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_21();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_24();
    OUTLINED_FUNCTION_33();
    OUTLINED_FUNCTION_35();
  }
  swift_bridgeObjectRelease();
LABEL_5:
  OUTLINED_FUNCTION_148();
  v10 = (v9 >> 5) & 1;
  v11 = (v9 >> 6) & 1;
  v108 = (v9 >> 8) & 1;
  v110 = (v9 >> 9) & 1;
  v113 = (v9 >> 16) & 1;
  v114 = (v9 >> 21) & 1;
  v116 = (v9 >> 22) & 1;
  v12 = (v9 >> 23) & 1;
  v13 = (v9 >> 26) & 1;
  if ((v9 & 1) == 0)
  {
    v14 = 0;
    v15 = 0;
    v115 = 0;
    v16 = 0;
    if ((v9 & 2) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
  v16 = 0;
  v115 = 0;
  v15 = 0;
  v14 = 0;
  v20 = (v9 >> 1) & 1;
LABEL_13:
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_7:
    if ((_DWORD)v10)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    v17 = v12;
    if ((v11 & 1) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  v17 = v12;
  if (!(_DWORD)v11)
  {
LABEL_9:
    v18 = v116;
    if ((_DWORD)v108)
      goto LABEL_10;
LABEL_17:
    v19 = v115;
    if (!(_DWORD)v110)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_16:
  swift_bridgeObjectRelease();
  v18 = v116;
  if ((v108 & 1) == 0)
    goto LABEL_17;
LABEL_10:
  swift_bridgeObjectRelease();
  v19 = v115;
  if ((v110 & 1) != 0)
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((_DWORD)v113)
    swift_bridgeObjectRelease();
  if ((_DWORD)v114)
  {
    swift_bridgeObjectRelease();
    if (!v18)
    {
LABEL_23:
      if (!v17)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  else if (!v18)
  {
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  if (v17)
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
  if ((_DWORD)v13)
  {
    outlined consume of JSON?(v219, v220, v221);
    if (!v16)
    {
LABEL_27:
      if (!v19)
        goto LABEL_28;
      goto LABEL_38;
    }
  }
  else if (!v16)
  {
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
  if (!v19)
  {
LABEL_28:
    if (!v15)
      goto LABEL_29;
LABEL_39:
    outlined consume of AutomationJSON.OutputSafetyConfiguration?(v233, v234);
    if (!v14)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_38:
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v226, v227);
  if (v15)
    goto LABEL_39;
LABEL_29:
  if (v14)
LABEL_30:
    swift_bridgeObjectRelease();
LABEL_31:
  outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)v239, (uint64_t)&v176);
  outlined retain of AutomationJSON.DecoderConfig?((uint64_t)&v176);
LABEL_32:
  OUTLINED_FUNCTION_0_0();
}

void protocol witness for Decodable.init(from:) in conformance AutomationJSON()
{
  AutomationJSON.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance AutomationJSON()
{
  AutomationJSON.encode(to:)();
}

uint64_t default argument 2 of Grammar.init(backusNaurForm:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 2 of Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 1 of Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 0 of Prompt.transformToPrepareForTokenGenerationPrompt(customDataTransformers:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t outlined copy of AutomationJSON.InputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of AutomationJSON.OutputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7308);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys, &unk_2519D7420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys, &unk_2519D7420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys, &unk_2519D7420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys, &unk_2519D7420);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Locale.LanguageCode] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale.LanguageCode]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode((uint64_t)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale.LanguageCode]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode((uint64_t)&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale.LanguageCode] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys, &unk_2519D7530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys, &unk_2519D7530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys, &unk_2519D7530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys, &unk_2519D7530);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Locale] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Locale] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Locale] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Locale] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Locale]);
    lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Locale] and conformance <A> [A]);
  }
  return result;
}

void lazy protocol witness table accessor for type Locale.LanguageCode and conformance Locale.LanguageCode(uint64_t a1)
{
  void (*v1)(uint64_t);

  if (!OUTLINED_FUNCTION_119(a1))
  {
    v1(255);
    OUTLINED_FUNCTION_146();
  }
  OUTLINED_FUNCTION_23();
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.CodingKeys, &unk_2519D7278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.CodingKeys, &unk_2519D7278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.CodingKeys, &unk_2519D7278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.CodingKeys, &unk_2519D7278);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.CodingKeys and conformance AutomationJSON.InputSafetyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails, &type metadata for AutomationJSON.InputSafetyConfiguration.Guardrails);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.Guardrails, &type metadata for AutomationJSON.InputSafetyConfiguration.Guardrails);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.Guardrails and conformance AutomationJSON.InputSafetyConfiguration.Guardrails);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer, &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer, &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageRecognizer and conformance AutomationJSON.InputSafetyConfiguration.LanguageRecognizer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator, &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator, &type metadata for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator and conformance AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys, &unk_2519D7758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.CodingKeys, &unk_2519D76C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.CodingKeys, &unk_2519D76C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.CodingKeys, &unk_2519D76C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.CodingKeys, &unk_2519D76C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.CodingKeys and conformance AutomationJSON.OutputSafetyConfiguration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails, &type metadata for AutomationJSON.OutputSafetyConfiguration.Guardrails);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration.Guardrails, &type metadata for AutomationJSON.OutputSafetyConfiguration.Guardrails);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration.Guardrails and conformance AutomationJSON.OutputSafetyConfiguration.Guardrails);
  }
  return result;
}

uint64_t outlined init with take of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.DecoderConfig?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void outlined retain of AutomationJSON.DecoderConfig?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char);
  char v4;

  v2 = OUTLINED_FUNCTION_119(a1);
  v4 = *(_BYTE *)(v1 + 128);
  v3(v2, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), v4);
  OUTLINED_FUNCTION_34();
}

uint64_t outlined consume of AutomationJSON.DecoderConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn.CodingKeys, &unk_2519D7C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn.CodingKeys, &unk_2519D7C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn.CodingKeys, &unk_2519D7C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn.CodingKeys, &unk_2519D7C48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn.CodingKeys and conformance AutomationJSON.Turn.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Role and conformance AutomationJSON.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Role, &type metadata for AutomationJSON.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Role, &type metadata for AutomationJSON.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Role, &type metadata for AutomationJSON.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Role, &type metadata for AutomationJSON.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Role and conformance AutomationJSON.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response.CodingKeys, &unk_2519D7D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response.CodingKeys, &unk_2519D7D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response.CodingKeys, &unk_2519D7D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response.CodingKeys, &unk_2519D7D58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response.CodingKeys and conformance AutomationJSON.Response.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig.CodingKeys, &unk_2519D6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig.CodingKeys, &unk_2519D6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig.CodingKeys, &unk_2519D6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig.CodingKeys, &unk_2519D6E20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig.CodingKeys and conformance AutomationJSON.DecoderConfig.CodingKeys);
  }
  return result;
}

uint64_t outlined retain of AutomationJSON.DecoderConfig(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of AutomationJSON.DecoderConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void _s19TokenGenerationCore14AutomationJSONV13DecoderConfigVSgWOi0_(void *a1)
{
  bzero(a1, 0x81uLL);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

unint64_t lazy protocol witness table accessor for type AutomationJSON and conformance AutomationJSON()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON;
  if (!lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON, &type metadata for AutomationJSON);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON;
  if (!lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON, &type metadata for AutomationJSON);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON and conformance AutomationJSON);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.CodingKeys, &unk_2519D6D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.CodingKeys, &unk_2519D6D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.CodingKeys, &unk_2519D6D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.CodingKeys, &unk_2519D6D90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.CodingKeys and conformance AutomationJSON.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputPromptType, &type metadata for AutomationJSON.InputPromptType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputPromptType, &type metadata for AutomationJSON.InputPromptType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputPromptType, &type metadata for AutomationJSON.InputPromptType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputPromptType, &type metadata for AutomationJSON.InputPromptType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputPromptType and conformance AutomationJSON.InputPromptType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    v3 = v2;
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

void lazy protocol witness table accessor for type [AutomationJSON.Turn] and conformance <A> [A]()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.Turn] and conformance <A> [A]);
}

{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type [AutomationJSON.Turn] and conformance <A> [A]);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Turn and conformance AutomationJSON.Turn()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn, &type metadata for AutomationJSON.Turn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Turn, &type metadata for AutomationJSON.Turn);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Turn and conformance AutomationJSON.Turn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.Response and conformance AutomationJSON.Response()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response, &type metadata for AutomationJSON.Response);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response;
  if (!lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.Response, &type metadata for AutomationJSON.Response);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.Response and conformance AutomationJSON.Response);
  }
  return result;
}

void lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?()
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt? and conformance <A> A?);
}

{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt? and conformance <A> A?);
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt, &type metadata for AutomationJSON.RenderedPrompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt;
  if (!lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.RenderedPrompt, &type metadata for AutomationJSON.RenderedPrompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.RenderedPrompt and conformance AutomationJSON.RenderedPrompt);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JSON and conformance JSON()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON, &type metadata for JSON);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON, &type metadata for JSON);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON and conformance JSON;
  if (!lazy protocol witness table cache variable for type JSON and conformance JSON)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON, &type metadata for JSON);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON and conformance JSON);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration, &type metadata for AutomationJSON.SamplingStrategyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.SamplingStrategyConfiguration, &type metadata for AutomationJSON.SamplingStrategyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.SamplingStrategyConfiguration and conformance AutomationJSON.SamplingStrategyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration, &type metadata for AutomationJSON.InputSafetyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.InputSafetyConfiguration, &type metadata for AutomationJSON.InputSafetyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.InputSafetyConfiguration and conformance AutomationJSON.InputSafetyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration, &type metadata for AutomationJSON.OutputSafetyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration;
  if (!lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.OutputSafetyConfiguration, &type metadata for AutomationJSON.OutputSafetyConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.OutputSafetyConfiguration and conformance AutomationJSON.OutputSafetyConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig, &type metadata for AutomationJSON.DecoderConfig);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig;
  if (!lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for AutomationJSON.DecoderConfig, &type metadata for AutomationJSON.DecoderConfig);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomationJSON.DecoderConfig and conformance AutomationJSON.DecoderConfig);
  }
  return result;
}

uint64_t outlined consume of AutomationJSON.OutputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined consume of AutomationJSON.InputSafetyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of JSON?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined consume of JSON(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of JSON(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 4 || a3 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

void lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!OUTLINED_FUNCTION_119(a1))
  {
    v5 = OUTLINED_FUNCTION_117(0, v4);
    v6 = v3();
    atomic_store(MEMORY[0x2495A8E14](v2, v5, &v6), v1);
  }
  OUTLINED_FUNCTION_73();
}

uint64_t outlined copy of JSON?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return outlined copy of JSON(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of JSON(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 2 || a3 == 4 || a3 == 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined retain of AutomationJSON(uint64_t a1)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 312);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 368);
  v7 = *(_QWORD *)(a1 + 360);
  v8 = *(_QWORD *)(a1 + 424);
  v9 = *(_QWORD *)(a1 + 416);
  v11 = *(_QWORD *)(a1 + 456);
  v10 = *(_QWORD *)(a1 + 464);
  v2 = *(_BYTE *)(a1 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of JSON?(v5, v4, v2);
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.InputSafetyConfiguration?(v7, v6);
  outlined copy of AutomationJSON.OutputSafetyConfiguration?(v9, v8);
  swift_bridgeObjectRetain();
  outlined copy of AutomationJSON.DecoderConfig?(v11, v10);
  return a1;
}

uint64_t outlined release of AutomationJSON(uint64_t a1)
{
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 312);
  v5 = *(_QWORD *)(a1 + 304);
  v6 = *(_QWORD *)(a1 + 368);
  v7 = *(_QWORD *)(a1 + 360);
  v8 = *(_QWORD *)(a1 + 424);
  v9 = *(_QWORD *)(a1 + 416);
  v11 = *(_QWORD *)(a1 + 456);
  v10 = *(_QWORD *)(a1 + 464);
  v2 = *(_BYTE *)(a1 + 320);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of JSON?(v5, v4, v2);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.InputSafetyConfiguration?(v7, v6);
  outlined consume of AutomationJSON.OutputSafetyConfiguration?(v9, v8);
  swift_bridgeObjectRelease();
  outlined consume of AutomationJSON.DecoderConfig?(v11, v10);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TGModes and conformance TGModes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TGModes and conformance TGModes;
  if (!lazy protocol witness table cache variable for type TGModes and conformance TGModes)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for TGModes, &type metadata for TGModes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TGModes and conformance TGModes);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for TGModes()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON(uint64_t a1)
{
  int v2;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 320);
  if (v2 != 255)
    outlined consume of JSON(*(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), v2);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 368) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 424) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 464);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AutomationJSON(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v7;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v8;
  v9 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v9;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  v11 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v11;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v12 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v12;
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  v13 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v13;
  v14 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v14;
  v16 = *(_QWORD *)(a2 + 264);
  v15 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 264) = v16;
  *(_QWORD *)(a1 + 272) = v15;
  v17 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v17;
  v18 = *(unsigned __int8 *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18 == 255)
  {
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 304);
    v20 = *(_QWORD *)(a2 + 312);
    outlined copy of JSON(v19, v20, v18);
    *(_QWORD *)(a1 + 304) = v19;
    *(_QWORD *)(a1 + 312) = v20;
    *(_BYTE *)(a1 + 320) = v18;
  }
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  v21 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v21;
  v22 = *(_QWORD *)(a2 + 368);
  swift_bridgeObjectRetain();
  if (v22 == 1)
  {
    v23 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v23;
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  }
  else
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = v22;
    *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
    *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
    v24 = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    *(_QWORD *)(a1 + 392) = v24;
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v25 = *(_QWORD *)(a2 + 424);
  if (v25 == 1)
  {
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_DWORD *)(a1 + 431) = *(_DWORD *)(a2 + 431);
  }
  else
  {
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = v25;
    *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    swift_bridgeObjectRetain();
  }
  v26 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v26;
  v27 = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRetain();
  if (v27)
  {
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a1 + 464) = v27;
    v28 = *(_QWORD *)(a2 + 480);
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    *(_QWORD *)(a1 + 480) = v28;
    v29 = *(_QWORD *)(a2 + 496);
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
    *(_QWORD *)(a1 + 496) = v29;
    v30 = *(_QWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
    *(_QWORD *)(a1 + 512) = v30;
    *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
    *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
    *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
    *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
    *(_WORD *)(a1 + 576) = *(_WORD *)(a2 + 576);
    *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
    *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy((void *)(a1 + 456), (const void *)(a2 + 456), 0x81uLL);
  }
  return a1;
}

uint64_t assignWithCopy for AutomationJSON(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  __int16 v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v7;
  v8 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v9 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v9;
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v10;
  v11 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v11;
  v12 = (__int128 *)(a1 + 304);
  v13 = (__int128 *)(a2 + 304);
  v14 = *(unsigned __int8 *)(a2 + 320);
  if (*(unsigned __int8 *)(a1 + 320) == 255)
  {
    if (v14 == 255)
    {
      v23 = *v13;
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      *v12 = v23;
    }
    else
    {
      v20 = *(_QWORD *)(a2 + 304);
      v21 = *(_QWORD *)(a2 + 312);
      outlined copy of JSON(v20, v21, *(_BYTE *)(a2 + 320));
      *(_QWORD *)(a1 + 304) = v20;
      *(_QWORD *)(a1 + 312) = v21;
      *(_BYTE *)(a1 + 320) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of JSON(a1 + 304);
    v22 = *(_BYTE *)(a2 + 320);
    *v12 = *v13;
    *(_BYTE *)(a1 + 320) = v22;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 304);
    v16 = *(_QWORD *)(a2 + 312);
    outlined copy of JSON(v15, v16, *(_BYTE *)(a2 + 320));
    v17 = *(_QWORD *)(a1 + 304);
    v18 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 304) = v15;
    *(_QWORD *)(a1 + 312) = v16;
    v19 = *(_BYTE *)(a1 + 320);
    *(_BYTE *)(a1 + 320) = v14;
    outlined consume of JSON(v17, v18, v19);
  }
  v24 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v24;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = (_OWORD *)(a1 + 360);
  v26 = (__int128 *)(a2 + 360);
  v27 = *(_QWORD *)(a2 + 368);
  if (*(_QWORD *)(a1 + 368) == 1)
  {
    if (v27 == 1)
    {
      v28 = *v26;
      v29 = *(_OWORD *)(a2 + 376);
      v30 = *(_OWORD *)(a2 + 392);
      *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
      *(_OWORD *)(a1 + 376) = v29;
      *(_OWORD *)(a1 + 392) = v30;
      *v25 = v28;
    }
    else
    {
      *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
      v34 = *(_WORD *)(a2 + 376);
      *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
      *(_WORD *)(a1 + 376) = v34;
      *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
      *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
      *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
      *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v27 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 360);
    v32 = *(_OWORD *)(a2 + 376);
    v31 = *(_OWORD *)(a2 + 392);
    v33 = *v26;
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
    *(_OWORD *)(a1 + 376) = v32;
    *(_OWORD *)(a1 + 392) = v31;
    *v25 = v33;
  }
  else
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = *(_WORD *)(a2 + 376);
    *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
    *(_WORD *)(a1 + 376) = v35;
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
    *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
  }
  v36 = (__int128 *)(a1 + 416);
  v37 = (__int128 *)(a2 + 416);
  v38 = *(_QWORD *)(a2 + 424);
  if (*(_QWORD *)(a1 + 424) == 1)
  {
    if (v38 == 1)
    {
      v39 = *v37;
      *(_DWORD *)(a1 + 431) = *(_DWORD *)(a2 + 431);
      *v36 = v39;
    }
    else
    {
      *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
      *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
      v41 = *(_WORD *)(a2 + 432);
      *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
      *(_WORD *)(a1 + 432) = v41;
      swift_bridgeObjectRetain();
    }
  }
  else if (v38 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 416);
    v40 = *(_DWORD *)(a2 + 431);
    *v36 = *v37;
    *(_DWORD *)(a1 + 431) = v40;
  }
  else
  {
    *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v42 = *(_WORD *)(a2 + 432);
    *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
    *(_WORD *)(a1 + 432) = v42;
  }
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(a2 + 464);
  if (!*(_QWORD *)(a1 + 464))
  {
    if (v43)
    {
      *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
      *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
      *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
      *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
      *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
      *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
      *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
      *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
      *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
      *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
      v46 = *(_QWORD *)(a2 + 552);
      *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
      *(_QWORD *)(a1 + 552) = v46;
      v47 = *(_QWORD *)(a2 + 568);
      *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
      *(_QWORD *)(a1 + 568) = v47;
      *(_BYTE *)(a1 + 577) = *(_BYTE *)(a2 + 577);
      LODWORD(v47) = *(_DWORD *)(a2 + 580);
      *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
      *(_DWORD *)(a1 + 580) = v47;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_28:
    memcpy((void *)(a1 + 456), (const void *)(a2 + 456), 0x81uLL);
    return a1;
  }
  if (!v43)
  {
    outlined destroy of AutomationJSON.DecoderConfig(a1 + 456);
    goto LABEL_28;
  }
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 552) = v44;
  v45 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = v45;
  *(_BYTE *)(a1 + 577) = *(_BYTE *)(a2 + 577);
  LODWORD(v45) = *(_DWORD *)(a2 + 580);
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  *(_DWORD *)(a1 + 580) = v45;
  return a1;
}

uint64_t outlined destroy of JSON(uint64_t a1)
{
  destroy for JSON(a1);
  return a1;
}

uint64_t outlined destroy of AutomationJSON.InputSafetyConfiguration(uint64_t a1)
{
  destroy for AutomationJSON.InputSafetyConfiguration();
  return a1;
}

uint64_t outlined destroy of AutomationJSON.OutputSafetyConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of AutomationJSON.DecoderConfig(uint64_t a1)
{
  destroy for AutomationJSON.DecoderConfig();
  return a1;
}

void *__swift_memcpy585_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x249uLL);
}

uint64_t assignWithTake for AutomationJSON(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  v7 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_WORD *)(a1 + 225) = *(_WORD *)(a2 + 225);
  v8 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  v10 = (_OWORD *)(a2 + 304);
  v11 = *(unsigned __int8 *)(a1 + 320);
  if (v11 != 255)
  {
    v12 = *(unsigned __int8 *)(a2 + 320);
    if (v12 != 255)
    {
      v13 = *(_QWORD *)(a1 + 304);
      v14 = *(_QWORD *)(a1 + 312);
      *(_OWORD *)(a1 + 304) = *v10;
      *(_BYTE *)(a1 + 320) = v12;
      outlined consume of JSON(v13, v14, v11);
      goto LABEL_6;
    }
    outlined destroy of JSON(a1 + 304);
  }
  *(_OWORD *)(a1 + 304) = *v10;
  *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
LABEL_6:
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  v15 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = v15;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 368) == 1)
  {
LABEL_9:
    v17 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v17;
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
    goto LABEL_11;
  }
  v16 = *(_QWORD *)(a2 + 368);
  if (v16 == 1)
  {
    outlined destroy of AutomationJSON.InputSafetyConfiguration(a1 + 360);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = v16;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 376) = *(_WORD *)(a2 + 376);
  *(_BYTE *)(a1 + 378) = *(_BYTE *)(a2 + 378);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v18;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
LABEL_11:
  if (*(_QWORD *)(a1 + 424) == 1)
  {
LABEL_14:
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_DWORD *)(a1 + 431) = *(_DWORD *)(a2 + 431);
    goto LABEL_16;
  }
  v19 = *(_QWORD *)(a2 + 424);
  if (v19 == 1)
  {
    outlined destroy of AutomationJSON.OutputSafetyConfiguration(a1 + 416);
    goto LABEL_14;
  }
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = v19;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 432) = *(_WORD *)(a2 + 432);
  *(_BYTE *)(a1 + 434) = *(_BYTE *)(a2 + 434);
LABEL_16:
  v20 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v20;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 464))
  {
LABEL_20:
    memcpy((void *)(a1 + 456), (const void *)(a2 + 456), 0x81uLL);
    return a1;
  }
  v21 = *(_QWORD *)(a2 + 464);
  if (!v21)
  {
    outlined destroy of AutomationJSON.DecoderConfig(a1 + 456);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = v24;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_WORD *)(a1 + 576) = *(_WORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_BYTE *)(a1 + 584) = *(_BYTE *)(a2 + 584);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 585))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 584) = 0;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 585) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 585) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for AutomationJSON.InputPromptType()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON.RenderedPrompt()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AutomationJSON.RenderedPrompt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AutomationJSON.RenderedPrompt(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for AutomationJSON.RenderedPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.RenderedPrompt()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON.RenderedPrompt.Source()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AutomationJSON.RenderedPrompt.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AutomationJSON.RenderedPrompt.Source(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for AutomationJSON.RenderedPrompt.Source(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt.Source(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt.Source(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.RenderedPrompt.Source()
{
  OUTLINED_FUNCTION_18();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.SamplingStrategyConfiguration(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.SamplingStrategyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for AutomationJSON.SamplingStrategyConfiguration(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for AutomationJSON.SamplingStrategyConfiguration(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for AutomationJSON.SamplingStrategyConfiguration()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON.InputSafetyConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_WORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.InputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for AutomationJSON.InputSafetyConfiguration()
{
  OUTLINED_FUNCTION_18();
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

void type metadata accessor for AutomationJSON.InputSafetyConfiguration.Guardrails()
{
  OUTLINED_FUNCTION_18();
}

_QWORD *initializeBufferWithCopyOfBuffer for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer()
{
  OUTLINED_FUNCTION_18();
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 9))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON.OutputSafetyConfiguration()
{
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_23();
}

uint64_t assignWithCopy for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_WORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.OutputSafetyConfiguration(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 19))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.OutputSafetyConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for AutomationJSON.OutputSafetyConfiguration()
{
  OUTLINED_FUNCTION_18();
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.Guardrails(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return OUTLINED_FUNCTION_151(-1);
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return OUTLINED_FUNCTION_151((*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962);
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return OUTLINED_FUNCTION_151((*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962);
    }
  }
  v4 = *(unsigned __int8 *)a1;
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return OUTLINED_FUNCTION_151(v6);
}

_BYTE *storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.Guardrails(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    result[2] = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        result[3] = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
      return OUTLINED_FUNCTION_149(result, a2 + 1);
    }
    result[3] = 0;
    if (a2)
      return OUTLINED_FUNCTION_149(result, a2 + 1);
  }
  return result;
}

void type metadata accessor for AutomationJSON.OutputSafetyConfiguration.Guardrails()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for AutomationJSON.Role()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for AutomationJSON.Turn()
{
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_23();
}

uint64_t assignWithCopy for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AutomationJSON.Turn(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Turn(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Turn(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.Turn()
{
  OUTLINED_FUNCTION_18();
}

_QWORD *initializeBufferWithCopyOfBuffer for AutomationJSON.Response(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AutomationJSON.Response(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AutomationJSON.Response(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Response(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Response(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.Response()
{
  OUTLINED_FUNCTION_18();
}

uint64_t initializeBufferWithCopyOfBuffer for AutomationJSON.DecoderConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AutomationJSON.DecoderConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v4;
  v5 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v5;
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  LODWORD(v5) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = v5;
  return a1;
}

void *__swift_memcpy129_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x81uLL);
}

uint64_t assignWithTake for AutomationJSON.DecoderConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.DecoderConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 129))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.DecoderConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 129) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 129) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for AutomationJSON.DecoderConfig()
{
  OUTLINED_FUNCTION_18();
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for _opaque_pthread_mutex_t(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for _opaque_pthread_mutex_t)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for _opaque_pthread_mutex_t);
  }
}

uint64_t getEnumTagSinglePayload for AutomationJSON.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE0)
  {
    if (a2 + 32 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 32) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 33;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x21;
  v5 = v6 - 33;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 32 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 32) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDF)
    return ((uint64_t (*)(void))((char *)&loc_248BF4834 + 4 * byte_248C8F1BA[v4]))();
  *a1 = a2 + 32;
  return ((uint64_t (*)(void))((char *)sub_248BF4868 + 4 * byte_248C8F1B5[v4]))();
}

uint64_t sub_248BF4868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF4878);
  return result;
}

uint64_t sub_248BF4884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF488CLL);
  *(_BYTE *)result = a2 + 32;
  return result;
}

uint64_t sub_248BF4890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for AutomationJSON.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AutomationJSON.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for AutomationJSON.CodingKeys()
{
  return &unk_2519D6D90;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.DecoderConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.DecoderConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_248BF4998 + 4 * byte_248C8F1C4[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_248BF49CC + 4 * byte_248C8F1BF[v4]))();
}

uint64_t sub_248BF49CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF49D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF49DCLL);
  return result;
}

uint64_t sub_248BF49E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF49F0);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_248BF49F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF49FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AutomationJSON.DecoderConfig.CodingKeys()
{
  return &unk_2519D6E20;
}

uint64_t getEnumTag for AutomationJSON.Response.CodingKeys()
{
  return 0;
}

void *type metadata accessor for AutomationJSON.Response.CodingKeys()
{
  return &unk_2519D7D58;
}

void *type metadata accessor for AutomationJSON.Turn.CodingKeys()
{
  return &unk_2519D7C48;
}

void *type metadata accessor for AutomationJSON.OutputSafetyConfiguration.CodingKeys()
{
  return &unk_2519D76C8;
}

void *type metadata accessor for AutomationJSON.OutputSafetyConfiguration.Guardrails.CodingKeys()
{
  return &unk_2519D7758;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.InputSafetyConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_248BF4B48 + 4 * byte_248C8F1CE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_248BF4B7C + 4 * byte_248C8F1C9[v4]))();
}

uint64_t sub_248BF4B7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4B84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF4B8CLL);
  return result;
}

uint64_t sub_248BF4B98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF4BA0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_248BF4BA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4BAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.CodingKeys()
{
  return &unk_2519D7278;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageScriptValidator.CodingKeys()
{
  return &unk_2519D7530;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.LanguageRecognizer.CodingKeys()
{
  return &unk_2519D7420;
}

void *type metadata accessor for AutomationJSON.InputSafetyConfiguration.Guardrails.CodingKeys()
{
  return &unk_2519D7308;
}

uint64_t getEnumTagSinglePayload for TGModes(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_151(-1);
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 3);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 3);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 3);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_151(v8);
}

uint64_t storeEnumTagSinglePayload for TGModes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_248BF4CC8 + 4 * byte_248C8F1D8[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_248BF4CFC + 4 * byte_248C8F1D3[v4]))();
}

uint64_t sub_248BF4CFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4D04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF4D0CLL);
  return result;
}

uint64_t sub_248BF4D14(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF4D1CLL);
  return OUTLINED_FUNCTION_149();
}

uint64_t sub_248BF4D20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4D28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.CodingKeys()
{
  return &unk_2519D78F0;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys()
{
  return &unk_2519D7980;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Response.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return getEnumTag for AutomationJSON.Response.CodingKeys();
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Response.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248BF4DE0 + 4 * byte_248C8F1DD[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248BF4E00 + 4 * byte_248C8F1E2[v4]))();
}

_BYTE *sub_248BF4DE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248BF4E00(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248BF4E08(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248BF4E10(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248BF4E18(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248BF4E20(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys()
{
  return &unk_2519D7A30;
}

void *type metadata accessor for AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys()
{
  return &unk_2519D7A10;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.RenderedPrompt.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.RenderedPrompt.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_248BF4F20 + 4 * byte_248C8F1EC[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_248BF4F54 + 4 * byte_248C8F1E7[v4]))();
}

uint64_t sub_248BF4F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF4F64);
  return result;
}

uint64_t sub_248BF4F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF4F78);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_248BF4F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF4F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for AutomationJSON.RenderedPrompt.CodingKeys()
{
  return &unk_2519D6F50;
}

uint64_t getEnumTagSinglePayload for AutomationJSON.Turn.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_151(-1);
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 2);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 2);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_151((*a1 | (v4 << 8)) - 2);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_151(v8);
}

uint64_t storeEnumTagSinglePayload for AutomationJSON.Turn.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248BF5070 + 4 * byte_248C8F1F6[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248BF50A4 + 4 * byte_248C8F1F1[v4]))();
}

uint64_t sub_248BF50A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF50AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248BF50B4);
  return result;
}

uint64_t sub_248BF50BC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248BF50C4);
  return OUTLINED_FUNCTION_149();
}

uint64_t sub_248BF50C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248BF50D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AutomationJSON.RenderedPrompt.Source.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for AutomationJSON.RenderedPrompt.Source.CodingKeys()
{
  return &unk_2519D6FE0;
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v2, *(_QWORD *)(v0 + 456));
}

uint64_t OUTLINED_FUNCTION_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_9()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_10@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

_QWORD *OUTLINED_FUNCTION_12()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_19()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_21()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_27()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_28@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = a1;
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_29(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 456) = a1;
}

uint64_t OUTLINED_FUNCTION_30@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_31@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 248) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_32()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_33()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_35()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_39@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_40()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_42()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_43()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_44()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_46@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_47()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_51()
{
  uint64_t v0;

  return outlined consume of AutomationJSON.InputSafetyConfiguration?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_52()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_53()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_54()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_55()
{
  return swift_bridgeObjectRelease();
}

_QWORD *OUTLINED_FUNCTION_56(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_57()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_58()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_61()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_62()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_63()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_64()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_65()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_66()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_67()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_68()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_69()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_70()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_71()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_74@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1352) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_75()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_76()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_77@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_79()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_82()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

Swift::Int OUTLINED_FUNCTION_86()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_87()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_88()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_89()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_90()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_91()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_92()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_93()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_94()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

void OUTLINED_FUNCTION_96(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;

  v2 = *(_WORD *)(v1 + 16);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(v1 + 18);
  *(_WORD *)a1 = v2;
}

uint64_t OUTLINED_FUNCTION_97()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_98()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 82) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_100()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_103()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 168) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_105()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_106()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_107()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_111()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

void *OUTLINED_FUNCTION_112(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x249uLL);
}

uint64_t OUTLINED_FUNCTION_113()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 0;
  return v0 - 65;
}

uint64_t OUTLINED_FUNCTION_114()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_117(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
}

uint64_t OUTLINED_FUNCTION_118()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_119(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_120()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_121()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_122(uint64_t a1)
{
  lazy protocol witness table accessor for type AutomationJSON.RenderedPrompt? and conformance <A> A?(a1);
}

uint64_t OUTLINED_FUNCTION_123()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_124()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_126()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v2, *(_QWORD *)(v0 + 424));
}

uint64_t OUTLINED_FUNCTION_127()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_129()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_130()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 - 72));
}

uint64_t OUTLINED_FUNCTION_131()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_133()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_134()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_135()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0);
}

unint64_t OUTLINED_FUNCTION_136()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 82) = 1;
  return lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.NucleusCodingKeys();
}

uint64_t OUTLINED_FUNCTION_137()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_138()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_139(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

void OUTLINED_FUNCTION_140()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_141()
{
  uint64_t v0;

  return v0 - 82;
}

uint64_t OUTLINED_FUNCTION_142(uint64_t a1, ...)
{
  uint64_t v1;
  va_list va;

  va_start(va, a1);
  return outlined init with take of AutomationJSON.DecoderConfig?((uint64_t)va, v1);
}

uint64_t OUTLINED_FUNCTION_144()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_145()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void OUTLINED_FUNCTION_146()
{
  JUMPOUT(0x2495A8E14);
}

uint64_t OUTLINED_FUNCTION_148()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 472));
}

_BYTE *OUTLINED_FUNCTION_149@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *result = a2;
  return result;
}

void OUTLINED_FUNCTION_150()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
}

uint64_t OUTLINED_FUNCTION_151@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

unint64_t OUTLINED_FUNCTION_152()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 2;
  return lazy protocol witness table accessor for type AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys and conformance AutomationJSON.SamplingStrategyConfiguration.ArgmaxCodingKeys();
}

void OUTLINED_FUNCTION_153()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
}

uint64_t static BackusNaurParser.parsedRules(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)&v44 = a2;
  v3 = lazy protocol witness table accessor for type String and conformance String();
  v4 = MEMORY[0x2495A7FD4](10, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x24BEE0D00], v3);
  v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v5 = v43;
  v40 = *(_QWORD *)(v4 + 16);
  v38 = v2;
  if (v40)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = (uint64_t *)(v4 + 56);
    do
    {
      v8 = *(v7 - 3);
      v9 = *(v7 - 2);
      v10 = *(v7 - 1);
      v11 = *v7;
      v43 = v5;
      v13 = v5[2];
      v12 = v5[3];
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        OUTLINED_FUNCTION_0_1();
        v5 = v43;
      }
      v5[2] = v13 + 1;
      v14 = &v5[5 * v13];
      v14[4] = v6;
      v14[5] = v8;
      v14[6] = v9;
      v14[7] = v10;
      v14[8] = v11;
      v7 += 4;
      ++v6;
    }
    while (v40 != v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v15 = v5[2];
  v16 = MEMORY[0x24BEE4AF8];
  if (v15)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    lazy protocol witness table accessor for type String and conformance String();
    v17 = v5 + 8;
    do
    {
      v18 = *(v17 - 4);
      v19 = (_QWORD *)*(v17 - 3);
      v21 = *(v17 - 2);
      v20 = *(v17 - 1);
      v22 = *v17;
      v43 = v19;
      *(_QWORD *)&v44 = v21;
      *((_QWORD *)&v44 + 1) = v20;
      v45 = v22;
      v41 = v18;
      swift_bridgeObjectRetain();
      if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v46 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_0_1();
          v16 = v46;
        }
        v23 = *(_QWORD *)(v16 + 16);
        v24 = v16;
        if (v23 >= *(_QWORD *)(v16 + 24) >> 1)
        {
          OUTLINED_FUNCTION_0_1();
          v24 = v46;
        }
        *(_QWORD *)(v24 + 16) = v23 + 1;
        v25 = (_QWORD *)(v24 + 40 * v23);
        v25[4] = v41;
        v25[5] = v19;
        v25[6] = v21;
        v25[7] = v20;
        v25[8] = v22;
        v16 = v24;
      }
      v17 += 5;
      --v15;
    }
    while (v15);
  }
  swift_release();
  v26 = *(_QWORD *)(v16 + 16);
  if (v26)
  {
    v42 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v27 = v42;
    for (i = v16 + 64; ; i += 40)
    {
      v29 = *(_QWORD *)(i - 32);
      v30 = *(_QWORD *)(i - 24);
      v31 = *(_QWORD *)(i - 16);
      v32 = *(_QWORD *)(i - 8);
      swift_bridgeObjectRetain();
      static BackusNaurParser.parse(line:lineNumber:)(v30, v31, v32, v29, (uint64_t)&v43);
      if (v38)
        break;
      swift_bridgeObjectRelease();
      v33 = v43;
      v34 = v44;
      v35 = *(_QWORD *)(v42 + 16);
      if (v35 >= *(_QWORD *)(v42 + 24) >> 1)
      {
        v39 = v44;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v34 = v39;
      }
      *(_QWORD *)(v42 + 16) = v35 + 1;
      v36 = v42 + 24 * v35;
      *(_QWORD *)(v36 + 32) = v33;
      *(_OWORD *)(v36 + 40) = v34;
      if (!--v26)
      {
        swift_release();
        return v27;
      }
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v27;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t static BackusNaurParser.parse(line:lineNumber:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[25];
  uint64_t v24;

  v10 = type metadata accessor for Symbol(0);
  v23[8] = *(_QWORD *)(v10 - 8);
  v23[9] = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v23[11] = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v23[10] = (char *)v23 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v23[4] = (char *)v23 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v23[3] = (char *)v23 - v17;
  v24 = type metadata accessor for CharacterSet();
  v23[24] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[23] = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[20] = a2 >> 14;
  if (a2 >> 14 != a1 >> 14)
  {
    v23[2] = a4;
    v23[18] = a2;
    v23[0] = a5;
    v23[19] = a3;
    swift_bridgeObjectRetain();
    v23[13] = 0;
    v23[1] = 0;
    v23[6] = 0;
    v23[5] = MEMORY[0x24BEE4AF8];
    v23[12] = MEMORY[0x24BEE4AF8];
    v23[17] = a1;
    Substring.subscript.getter();
    v21 = Substring.index(after:)();
    v23[16] = 0;
    v23[21] = v21;
    v23[22] = 1;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRetain();
  v19 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError();
  swift_allocError();
  *(_OWORD *)v20 = xmmword_248C90BD0;
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = v19;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _QWORD v20[5];

  result = (uint64_t)specialized _NativeDictionary.makeIterator()(v20);
  v6 = v20[0];
  v7 = v20[1];
  v8 = v20[3];
  v9 = v20[4];
  v10 = (unint64_t)(v20[2] + 64) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_20;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    if (v13 >= v10)
      goto LABEL_26;
    v14 = *(_QWORD *)(v7 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v10)
        goto LABEL_26;
      v14 = *(_QWORD *)(v7 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v10)
          goto LABEL_26;
        v14 = *(_QWORD *)(v7 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v10)
            goto LABEL_26;
          v14 = *(_QWORD *)(v7 + 8 * v15);
          if (!v14)
          {
            v15 = v8 + 5;
            if (v8 + 5 >= v10)
              goto LABEL_26;
            v14 = *(_QWORD *)(v7 + 8 * v15);
            if (!v14)
            {
              v16 = v8 + 6;
              while (v16 < v10)
              {
                v14 = *(_QWORD *)(v7 + 8 * v16++);
                if (v14)
                {
                  v15 = v16 - 1;
                  goto LABEL_19;
                }
              }
LABEL_26:
              v19 = 0;
LABEL_27:
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_release();
              return v19;
            }
          }
        }
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_20:
    v17 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v12);
    if (*v17 != a2 || v17[1] != a3)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
        continue;
    }
    v19 = 1;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void SyntaxError.Issue.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v3;

  switch(a3)
  {
    case 0:
      v3 = 0;
      goto LABEL_9;
    case 1:
      v3 = 1;
      goto LABEL_9;
    case 2:
      v3 = 2;
      goto LABEL_9;
    case 3:
      v3 = 3;
      goto LABEL_9;
    case 4:
      v3 = 5;
      goto LABEL_9;
    case 5:
      v3 = 6;
LABEL_9:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(4uLL);
      String.hash(into:)();
      break;
  }
}

uint64_t static SyntaxError.Issue.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      return !a4;
    case 1:
      return a4 == 1;
    case 2:
      return a4 == 2;
    case 3:
      return a4 == 3;
    case 4:
      return a4 == 4;
    case 5:
      return a4 == 5;
    default:
      if (a4 < 6)
        return 0;
      if (a1 == a3 && a2 == a4)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int SyntaxError.Issue.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  SyntaxError.Issue.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SyntaxError.Issue()
{
  uint64_t *v0;

  return SyntaxError.Issue.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance SyntaxError.Issue(uint64_t a1)
{
  uint64_t *v1;

  SyntaxError.Issue.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SyntaxError.Issue()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  SyntaxError.Issue.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SyntaxError.Issue(uint64_t *a1, uint64_t a2)
{
  return static SyntaxError.Issue.== infix(_:_:)(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

unint64_t SyntaxError.description.getter(uint64_t a1, void *a2)
{
  unint64_t result;
  Swift::String v4;

  result = 0xD000000000000025;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0xD00000000000001ELL;
      break;
    case 2uLL:
      result = 0xD00000000000002ALL;
      break;
    case 3uLL:
      result = 0xD00000000000002BLL;
      break;
    case 4uLL:
      result = 0xD000000000000015;
      break;
    case 5uLL:
      result = 0xD00000000000001ALL;
      break;
    default:
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000025;
      v4._object = a2;
      String.append(_:)(v4);
      outlined consume of SyntaxError.Issue(0xD000000000000025, (unint64_t)a2);
      result = 0xD00000000000001DLL;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SyntaxError()
{
  uint64_t v0;

  return SyntaxError.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE1E18], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SyntaxError and conformance SyntaxError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError;
  if (!lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for SyntaxError, &type metadata for SyntaxError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxError and conformance SyntaxError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Character] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Character] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Character] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Character]);
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Character] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with copy of Symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Symbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Symbol(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Symbol(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t destroy for SyntaxError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 6)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for SyntaxError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 6)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

_QWORD *assignWithCopy for SyntaxError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] >= 6uLL)
  {
    if (v4 >= 6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of Character((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 < 6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t outlined destroy of Character(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE0718] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for SyntaxError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) >= 6uLL)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 >= 6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Character(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyntaxError(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 2147483641;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 6;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SyntaxError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2147483642;
    *(_QWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFF9)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFF9)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for SyntaxError()
{
  return &type metadata for SyntaxError;
}

uint64_t outlined consume of SyntaxError.Issue(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t destroy for SyntaxError.Issue(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SyntaxError.Issue(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for SyntaxError.Issue(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SyntaxError.Issue(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SyntaxError.Issue(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SyntaxError.Issue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for SyntaxError.Issue(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for SyntaxError.Issue(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SyntaxError.Issue()
{
  return &type metadata for SyntaxError.Issue;
}

unint64_t lazy protocol witness table accessor for type SyntaxError.Issue and conformance SyntaxError.Issue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue;
  if (!lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for SyntaxError.Issue, &type metadata for SyntaxError.Issue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyntaxError.Issue and conformance SyntaxError.Issue);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t destroy for JSON(uint64_t a1)
{
  return outlined consume of JSON(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for JSON(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSON(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSON(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of JSON(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of JSON(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for JSON(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of JSON(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSON(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFB && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSON(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for JSON(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveInjectEnumTag for JSON(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(_QWORD *)result = a2 - 5;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSON()
{
  return &type metadata for JSON;
}

uint64_t JSON.JSONCodingKey.init(intValue:)()
{
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JSON.JSONCodingKey()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JSON.JSONCodingKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = AutomationJSON.responses.modify();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance JSON.JSONCodingKey()
{
  return AutomationJSON.SamplingStrategyConfiguration.TopkCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance JSON.JSONCodingKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = JSON.JSONCodingKey.init(intValue:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JSON.JSONCodingKey()
{
  lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JSON.JSONCodingKey()
{
  lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey();
  return CodingKey.debugDescription.getter();
}

uint64_t JSON.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JSON.JSONCodingKey>?);
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JSON.JSONCodingKey>);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_3_0();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
    OUTLINED_FUNCTION_4_0();
  v5 = OUTLINED_FUNCTION_0_2();
  if ((MEMORY[0x2495A834C](v5) & 1) != 0)
  {
    OUTLINED_FUNCTION_8_0();
    v6 = 0;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)() & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v6;
}

void JSON.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JSON.JSONCodingKey>);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_49();
  __asm { BR              X10 }
}

uint64_t sub_248BF9224()
{
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11_0();
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return OUTLINED_FUNCTION_8_0();
}

void JSON.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

void sub_248BF9628()
{
  char v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0 & 1);
}

uint64_t static JSON.== infix(_:_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(void))((char *)sub_248BF96F0 + 4 * byte_248C90CF6[a3]))();
}

uint64_t sub_248BF96F0(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  char v6;

  if (a6)
    v6 = 0;
  else
    v6 = ((a1 & 1) == 0) ^ a4;
  return v6 & 1;
}

Swift::Int JSON.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  JSON.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance JSON@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = JSON.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance JSON(uint64_t a1)
{
  uint64_t v1;

  JSON.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JSON()
{
  uint64_t v0;

  return JSON.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance JSON(uint64_t a1)
{
  uint64_t v1;

  JSON.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JSON()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)();
  JSON.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JSON(uint64_t a1)
{
  return static JSON.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

unint64_t lazy protocol witness table accessor for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON.JSONCodingKey, &unk_2519D8668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON.JSONCodingKey, &unk_2519D8668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey;
  if (!lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for JSON.JSONCodingKey, &unk_2519D8668);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JSON.JSONCodingKey and conformance JSON.JSONCodingKey);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined destroy of SingleValueDecodingContainer?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of UnkeyedDecodingContainer(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *type metadata accessor for JSON.JSONCodingKey()
{
  return &unk_2519D8668;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with take of UnkeyedDecodingContainer((__int128 *)(v0 - 160), v0 - 120);
  v1 = *(_QWORD *)(v0 - 96);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 120), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of Encoder.singleValueContainer()();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return v1;
}

void OUTLINED_FUNCTION_4_0()
{
  JUMPOUT(0x2495A8D84);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 224) + 8))(*(_QWORD *)(v1 - 192), v0);
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 - 120), v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_7_0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  return outlined consume of JSON(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_1(v0 - 120);
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  uint64_t v0;

  return __swift_mutable_project_boxed_opaque_existential_1(v0 - 120, *(_QWORD *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  uint64_t v0;

  return __swift_mutable_project_boxed_opaque_existential_1(v0 - 120, *(_QWORD *)(v0 - 96));
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_14_0()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_15_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay19TokenGenerationCore17NonTerminalSymbolVGG_AJ_Sits5NeverOTg506_sSi19fg6Core17ijk41VACSiIgynrd_Si6offset_AC7elementtAC_Sits5L148OIegnrzr_TR04_s19ab67Core14flattenGrammar7grammarSi_SayAA12EarleyParserC0H4RuleVGSayAA14ef33OGSayAA03NonjK0VGtAA0E0V_tFAM_SitM10_AMtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v11 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    v3 = 0;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = (_QWORD *)(v11 + 24 * v8);
      v9[5] = v6;
      v9[6] = v3;
      v4 += 2;
      v9[4] = v5;
      ++v3;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore12EarleyParserC0H6SymbolOG_SSs5NeverOTg504_s19de6Core12gh56C4ItemV14getDescription7grammarSSAC0E7GrammarC_tFSSAC0E6I6OXEfU_AH0hS0CTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v12 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v3 = v12;
    v4 = a1 + 40;
    do
    {
      v5 = EarleyParser.ParserSymbol.getDescription(grammar:)();
      v7 = v6;
      v9 = *(_QWORD *)(v12 + 16);
      v8 = *(_QWORD *)(v12 + 24);
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v4 += 16;
      *(_QWORD *)(v12 + 16) = v9 + 1;
      v10 = v12 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v5;
      *(_QWORD *)(v10 + 40) = v7;
      --v1;
    }
    while (v1);
    swift_release();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t EarleyParser.ParserSymbol.getDescription(grammar:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  int v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_6_1();
  v46 = v0;
  v47 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_79_0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_83_0();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v38 - v18;
  if (v3)
  {
    if (v3 != 1)
      return OUTLINED_FUNCTION_117_0();
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v20 = *(_QWORD *)(v7 + 16);
      if (*(_QWORD *)(v20 + 16) > v5)
      {
        v21 = v20 + 16 * v5;
        v22 = *(_QWORD *)(v21 + 32);
        v23 = *(void **)(v21 + 40);
        v44 = 60;
        v45 = 0xE100000000000000;
        OUTLINED_FUNCTION_58_0();
        v24._countAndFlagsBits = v22;
        v24._object = v23;
        String.append(_:)(v24);
        OUTLINED_FUNCTION_124_0(62);
        OUTLINED_FUNCTION_25_0();
        return OUTLINED_FUNCTION_117_0();
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v25 = *(_QWORD *)(v7 + 24);
  if (*(_QWORD *)(v25 + 16) > v5)
  {
    OUTLINED_FUNCTION_123_0(v25+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v5, (uint64_t)&v38 - v18);
    OUTLINED_FUNCTION_123_0((uint64_t)v19, (uint64_t)v15);
    v26 = OUTLINED_FUNCTION_74_0();
    if (v26)
    {
      if (v26 != 1)
      {
        OUTLINED_FUNCTION_161((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
        CharacterSet.description.getter();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        goto LABEL_15;
      }
      v27._countAndFlagsBits = *v15;
      v28 = (void *)v15[1];
      v44 = 34;
      v45 = 0xE100000000000000;
      v27._object = v28;
      String.append(_:)(v27);
    }
    else
    {
      v29 = *v15;
      v30 = v15[1];
      v44 = 34;
      v45 = 0xE100000000000000;
      v42 = v29;
      v43 = v30;
      v40 = 92;
      v41 = 0xE100000000000000;
      v38 = 23644;
      v39 = 0xE200000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v31 = OUTLINED_FUNCTION_70_0();
      v33 = v32;
      OUTLINED_FUNCTION_25_0();
      v42 = v31;
      v43 = v33;
      v40 = 34;
      v41 = 0xE100000000000000;
      v38 = 8796;
      v39 = 0xE200000000000000;
      v34 = OUTLINED_FUNCTION_70_0();
      v36 = v35;
      OUTLINED_FUNCTION_88();
      v37._countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_124_0(34);
LABEL_15:
    outlined destroy of Grammar((uint64_t)v19, type metadata accessor for TerminalSymbol);
    return OUTLINED_FUNCTION_117_0();
  }
LABEL_20:
  __break(1u);
  return result;
}

void EarleyParser.ParserSymbol.hash(into:)()
{
  char v0;
  Swift::UInt v1;

  OUTLINED_FUNCTION_148_0();
  if (!v0)
  {
    v1 = 1;
    goto LABEL_5;
  }
  if (v0 == 1)
  {
    v1 = 2;
LABEL_5:
    Hasher._combine(_:)(v1);
  }
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_23();
}

uint64_t static EarleyParser.ParserSymbol.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1)
        return getEnumTag for AutomationJSON.Response.CodingKeys();
      return a1 == a3;
    }
    if (a4 == 2 && !a3)
      return 1;
  }
  else if (!a4)
  {
    return a1 == a3;
  }
  return getEnumTag for AutomationJSON.Response.CodingKeys();
}

void EarleyParser.ParserSymbol.hashValue.getter(Swift::UInt a1, char a2)
{
  Swift::UInt v4;
  Swift::UInt v5;

  OUTLINED_FUNCTION_97();
  if (!a2)
  {
    v5 = 1;
    goto LABEL_5;
  }
  v4 = 0;
  if (a2 == 1)
  {
    v5 = 2;
LABEL_5:
    Hasher._combine(_:)(v5);
    v4 = a1;
  }
  Hasher._combine(_:)(v4);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void protocol witness for Hashable.hashValue.getter in conformance EarleyParser.ParserSymbol()
{
  uint64_t v0;

  EarleyParser.ParserSymbol.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.ParserSymbol()
{
  EarleyParser.ParserSymbol.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.ParserSymbol()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      v1 = 0;
      goto LABEL_7;
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  Hasher._combine(_:)(v3);
LABEL_7:
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.ParserSymbol(uint64_t a1, uint64_t a2)
{
  return static EarleyParser.ParserSymbol.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

_QWORD *EarleyParser.ParserGrammar.init(grammar:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  v2 = flattenGrammar(grammar:)();
  v65 = v3;
  v66 = v2;
  v5 = v4;
  v69 = v6;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = MEMORY[0x24BEE4AF8];
  v76 = OUTLINED_FUNCTION_149_0();
  v9 = OUTLINED_FUNCTION_149_0();
  v10 = specialized Array.init(repeating:count:)(0, v7);
  v11 = v5;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v13 = v12;
  v72 = *(_QWORD *)(v5 + 16);
  v75 = v5;
  v64 = a1;
  if (v72)
  {
    v77 = v12;
    OUTLINED_FUNCTION_165();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
LABEL_99:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v9 = v63;
    }
    v14 = 0;
    v15 = v9 + 32;
    v70 = *(_QWORD *)a1;
    v71 = v11 + 32;
    v68 = *(_QWORD *)a1 + 40;
    v74 = MEMORY[0x24BEE4AF8];
    v78 = v9;
    do
    {
      if (v14 >= *(_QWORD *)(v11 + 16))
        goto LABEL_92;
      v16 = (unint64_t *)(v71 + 16 * v14);
      a1 = *v16;
      v17 = v16[1];
      v11 = *(_QWORD *)(v70 + 16);
      if (v11)
      {
        if ((a1 & 0x8000000000000000) != 0)
          goto LABEL_95;
        if (a1 >= *(_QWORD *)(v69 + 16))
          goto LABEL_96;
        v18 = (_QWORD *)v68;
        v19 = (uint64_t *)(v69 + 32 + 16 * a1);
        v21 = *v19;
        v20 = v19[1];
        while (1)
        {
          v22 = *(v18 - 1) == v21 && *v18 == v20;
          if (v22 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
            break;
          v18 += 2;
          if (!--v11)
            goto LABEL_15;
        }
        OUTLINED_FUNCTION_38_0();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_51_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v74 = v38;
        }
        v23 = *(_QWORD *)(v74 + 16);
        if (v23 >= *(_QWORD *)(v74 + 24) >> 1)
        {
          OUTLINED_FUNCTION_134_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v74 = v39;
        }
        *(_QWORD *)(v74 + 16) = v23 + 1;
        *(_QWORD *)(v74 + 8 * v23 + 32) = v14;
      }
      else
      {
LABEL_15:
        OUTLINED_FUNCTION_38_0();
      }
      v11 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        if ((a1 & 0x8000000000000000) != 0)
          goto LABEL_93;
      }
      else
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v11 = v35;
        if ((a1 & 0x8000000000000000) != 0)
          goto LABEL_93;
      }
      if (a1 >= *(_QWORD *)(v11 + 16))
        goto LABEL_94;
      v76 = v11;
      v11 += 32;
      v24 = *(_QWORD *)(v11 + 8 * a1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v11 + 8 * a1) = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        OUTLINED_FUNCTION_78();
        v24 = v36;
        *(_QWORD *)(v11 + 8 * a1) = v36;
      }
      v26 = *(_QWORD *)(v24 + 16);
      if (v26 >= *(_QWORD *)(v24 + 24) >> 1)
      {
        OUTLINED_FUNCTION_78();
        v24 = v37;
        *(_QWORD *)(v11 + 8 * a1) = v37;
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      *(_QWORD *)(v24 + 8 * v26 + 32) = v14;
      v27 = *(_QWORD **)(v17 + 16);
      if (v27)
      {
        v73 = v10;
        a1 = 0;
        v10 = v17 + 40;
        while (a1 < *(_QWORD *)(v17 + 16))
        {
          if (*(_BYTE *)v10 == 1)
          {
            v11 = *(_QWORD *)(v10 - 8);
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_82;
            if (v11 >= *(_QWORD *)(v9 + 16))
              goto LABEL_83;
            v28 = *(_QWORD *)(v15 + 8 * v11);
            v29 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v15 + 8 * v11) = v28;
            if ((v29 & 1) == 0)
            {
              OUTLINED_FUNCTION_78();
              v28 = v31;
              *(_QWORD *)(v15 + 8 * v11) = v31;
            }
            v30 = *(_QWORD *)(v28 + 16);
            if (v30 >= *(_QWORD *)(v28 + 24) >> 1)
            {
              OUTLINED_FUNCTION_78();
              v28 = v32;
              *(_QWORD *)(v15 + 8 * v11) = v32;
            }
            *(_QWORD *)(v28 + 16) = v30 + 1;
            *(_QWORD *)(v28 + 8 * v30 + 32) = v14;
            v9 = v78;
          }
          ++a1;
          v10 += 16;
          if (v27 == (_QWORD *)a1)
          {
            v11 = v75;
            v10 = v73;
            goto LABEL_47;
          }
        }
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()();
        v10 = v40;
      }
      v33 = v77;
      if (a1 >= *(_QWORD *)(v10 + 16))
        goto LABEL_98;
      *(_BYTE *)(v10 + a1 + 32) = 1;
      v34 = *(_QWORD *)(v77 + 16);
      if (v34 >= *(_QWORD *)(v77 + 24) >> 1)
      {
        OUTLINED_FUNCTION_134_0();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v33 = v41;
      }
      *(_QWORD *)(v33 + 16) = v34 + 1;
      v77 = v33;
      *(_QWORD *)(v33 + 8 * v34 + 32) = a1;
      v11 = v75;
LABEL_47:
      ++v14;
      OUTLINED_FUNCTION_37_0();
    }
    while (v14 != v72);
    OUTLINED_FUNCTION_15_1();
    v13 = v77;
  }
  else
  {
    v74 = v8;
  }
  v42 = v9 + 32;
  v43 = v11 + 32;
LABEL_53:
  v44 = *(_QWORD *)(v13 + 16) + 3;
  while (v44 != 3)
  {
    v45 = *(_QWORD *)(v13 + 8 * v44);
    *(_QWORD *)(v13 + 16) = v44 - 4;
    if ((v45 & 0x8000000000000000) != 0)
      goto LABEL_85;
    if (v45 >= *(_QWORD *)(v9 + 16))
      goto LABEL_86;
    v46 = *(_QWORD *)(v42 + 8 * v45);
    v47 = *(_QWORD **)(v46 + 16);
    --v44;
    if (v47)
    {
      v72 = v42;
      v77 = v13;
      v48 = v46 + 32;
      OUTLINED_FUNCTION_38_0();
      a1 = 0;
      v79 = v43;
      while (a1 < *(_QWORD *)(v46 + 16))
      {
        v49 = *(_QWORD *)(v48 + 8 * a1);
        if ((v49 & 0x8000000000000000) != 0)
          goto LABEL_88;
        if (v49 >= *(_QWORD *)(v11 + 16))
          goto LABEL_89;
        v50 = (unint64_t *)(v43 + 16 * v49);
        v51 = *v50;
        if ((*v50 & 0x8000000000000000) != 0)
          goto LABEL_90;
        v52 = *(_QWORD *)(v10 + 16);
        if (v51 >= v52)
          goto LABEL_91;
        if ((*(_BYTE *)(v10 + 32 + v51) & 1) == 0)
        {
          v53 = v50[1];
          v54 = *(_QWORD *)(v53 + 16);
          if (v54)
          {
            v55 = (_BYTE *)(v53 + 40);
            while (*v55 == 1)
            {
              v56 = *((_QWORD *)v55 - 1);
              if (v56 >= v52)
                goto LABEL_84;
              if (*(_BYTE *)(v10 + 32 + v56) != 1)
                break;
              v55 += 16;
              if (!--v54)
                goto LABEL_71;
            }
          }
          else
          {
LABEL_71:
            v57 = v9;
            v58 = *(_QWORD *)(v77 + 16);
            v59 = *(_QWORD *)(v77 + 24);
            OUTLINED_FUNCTION_152_0();
            if (v58 >= v59 >> 1)
            {
              OUTLINED_FUNCTION_134_0();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            else
            {
              v60 = v77;
            }
            *(_QWORD *)(v60 + 16) = v58 + 1;
            v77 = v60;
            *(_QWORD *)(v60 + 8 * v58 + 32) = v51;
            v9 = v57;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew()();
              v10 = v61;
            }
            v11 = v75;
            v43 = v79;
            v48 = v46 + 32;
            if ((int64_t)v51 >= *(_QWORD *)(v10 + 16))
              goto LABEL_97;
            *(_BYTE *)(v10 + v51 + 32) = 1;
            OUTLINED_FUNCTION_88();
          }
        }
        if ((_QWORD *)++a1 == v47)
        {
          OUTLINED_FUNCTION_37_0();
          v13 = v77;
          v42 = v72;
          goto LABEL_53;
        }
      }
      goto LABEL_87;
    }
  }
  outlined destroy of Grammar(v64, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_15_1();
  v67[2] = v69;
  v67[3] = v65;
  v67[4] = v10;
  v67[5] = v66;
  v67[6] = v11;
  v67[7] = v74;
  v67[8] = v76;
  swift_bridgeObjectRelease();
  return v67;
}

uint64_t flattenGrammar(grammar:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String_optional *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int EnumCaseMultiPayload;
  unint64_t v65;
  uint64_t v66;
  Swift::String_optional v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  BOOL v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t result;
  _QWORD v150[2];
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;

  OUTLINED_FUNCTION_6_1();
  v186 = v0;
  v187 = v1;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int)?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_35_0();
  v159 = v5;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v150 - v7;
  v180 = OUTLINED_FUNCTION_54_0();
  v178 = *(_QWORD *)(v180 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_35_0();
  v163 = v10;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_84_0();
  v151 = v12;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_84_0();
  v166 = v14;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_84_0();
  v168 = v16;
  OUTLINED_FUNCTION_27_0();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v150 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v150 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (Swift::String_optional *)((char *)v150 - v25);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_84_0();
  v170 = v27;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v28);
  v177 = (uint64_t)v150 - v29;
  v169 = OUTLINED_FUNCTION_69_0();
  v172 = *(_QWORD *)(v169 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_49();
  v175 = v31;
  v152 = v3;
  v32 = *(_QWORD *)(v3 + 32);
  v33 = *(_QWORD *)(v32 + 16);
  v34 = MEMORY[0x24BEE4AF8];
  v165 = v8;
  v179 = (uint64_t)v23;
  v155 = v32;
  if (v33)
  {
    v182 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_80_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v34 = v182;
    v35 = (uint64_t *)(v32 + 40);
    do
    {
      v37 = *(v35 - 1);
      v36 = *v35;
      v182 = v34;
      v38 = *(_QWORD *)(v34 + 16);
      v39 = *(_QWORD *)(v34 + 24);
      OUTLINED_FUNCTION_38_0();
      if (v38 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v34 = v182;
      }
      v35 += 3;
      *(_QWORD *)(v34 + 16) = v38 + 1;
      v40 = v34 + 16 * v38;
      *(_QWORD *)(v40 + 32) = v37;
      *(_QWORD *)(v40 + 40) = v36;
      --v33;
    }
    while (v33);
    v32 = v155;
    OUTLINED_FUNCTION_82();
    v8 = v165;
    v23 = (char *)v179;
  }
  specialized Set.init<A>(_:)(v34);
  specialized _copyCollectionToContiguousArray<A>(_:)();
  v42 = v41;
  OUTLINED_FUNCTION_123();
  v43 = swift_retain();
  v44 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay19TokenGenerationCore17NonTerminalSymbolVGG_AJ_Sits5NeverOTg506_sSi19fg6Core17ijk41VACSiIgynrd_Si6offset_AC7elementtAC_Sits5L148OIegnrzr_TR04_s19ab67Core14flattenGrammar7grammarSi_SayAA12EarleyParserC0H4RuleVGSayAA14ef33OGSayAA03NonjK0VGtAA0E0V_tFAM_SitM10_AMtXEfU0_Tf3nnnpf_nTf1cn_n(v43);
  v150[1] = v42;
  swift_release();
  v45 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v44);
  v153 = *(_QWORD *)(v32 + 16);
  if (v153)
  {
    v154 = v32 + 32;
    OUTLINED_FUNCTION_80_0();
    v46 = 0;
    v47 = MEMORY[0x24BEE4B00];
    v164 = MEMORY[0x24BEE4AF8];
    v48 = v175;
    v174 = v45;
    do
    {
      if (v46 >= *(_QWORD *)(v32 + 16))
        goto LABEL_123;
      v49 = (uint64_t *)(v154 + 24 * v46);
      v50 = v49[2];
      v160 = *(_QWORD *)(v50 + 16);
      if (v160)
      {
        v150[0] = v46;
        v51 = v49[1];
        v157 = *v49;
        v161 = v50 + 32;
        v158 = v51;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_88_0();
        v52 = 0;
        v156 = v50;
        do
        {
          if (v52 >= *(_QWORD *)(v50 + 16))
            goto LABEL_120;
          v173 = *(_QWORD *)(*(_QWORD *)(v161 + 8 * v52) + 16);
          if (v173)
          {
            v162 = v52;
            OUTLINED_FUNCTION_65_0();
            v171 = v54 + v53;
            v176 = v54;
            swift_bridgeObjectRetain();
            v55 = v176;
            v56 = 0;
            v57 = MEMORY[0x24BEE4AF8];
            do
            {
              if (v56 >= *(_QWORD *)(v55 + 16))
                goto LABEL_116;
              outlined init with copy of Grammar(v171 + *(_QWORD *)(v172 + 72) * v56, v48, type metadata accessor for Symbol);
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                if (!*(_QWORD *)(v45 + 16))
                  goto LABEL_124;
                specialized __RawDictionaryStorage.find<A>(_:)();
                if ((v59 & 1) == 0)
                  goto LABEL_124;
                v60 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v58);
                OUTLINED_FUNCTION_82();
                if ((OUTLINED_FUNCTION_46_0() & 1) == 0)
                {
                  OUTLINED_FUNCTION_47_0();
                  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v57 = v105;
                }
                v61 = *(_QWORD *)(v57 + 16);
                v55 = v176;
                if (v61 >= *(_QWORD *)(v57 + 24) >> 1)
                {
                  OUTLINED_FUNCTION_47_0();
                  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v57 = v106;
                  v55 = v176;
                }
                *(_QWORD *)(v57 + 16) = v61 + 1;
                v62 = v57 + 16 * v61;
                *(_QWORD *)(v62 + 32) = v60;
                *(_BYTE *)(v62 + 40) = 1;
              }
              else
              {
                v63 = v177;
                outlined init with take of TerminalSymbol(v48, v177, type metadata accessor for TerminalSymbol);
                OUTLINED_FUNCTION_99_0(v63, (uint64_t)v170);
                EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
                if (EnumCaseMultiPayload)
                {
                  if (EnumCaseMultiPayload == 1)
                    swift_bridgeObjectRelease();
                  else
                    OUTLINED_FUNCTION_73_0((uint64_t)v170);
                  v87 = v168;
                  OUTLINED_FUNCTION_99_0(v177, v168);
                  v88 = (uint64_t *)(v47 + 16);
                  if (*(_QWORD *)(v47 + 16))
                  {
                    v89 = OUTLINED_FUNCTION_121_0(v87);
                    if ((v90 & 1) != 0)
                      v88 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 8 * v89);
                  }
                  v167 = *v88;
                  OUTLINED_FUNCTION_73_0(v168);
                  v91 = v166;
                  OUTLINED_FUNCTION_99_0(v177, v166);
                  swift_isUniquelyReferenced_nonNull_native();
                  v182 = v47;
                  OUTLINED_FUNCTION_121_0(v91);
                  OUTLINED_FUNCTION_158();
                  if (v74)
                    goto LABEL_117;
                  v94 = v92;
                  v95 = v93;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TerminalSymbol, Int>);
                  if (OUTLINED_FUNCTION_157())
                  {
                    v96 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
                    if ((v95 & 1) != (v97 & 1))
                      goto LABEL_128;
                    v94 = v96;
                  }
                  v47 = v182;
                  if ((v95 & 1) != 0)
                  {
                    v98 = v167;
                    *(_QWORD *)(*(_QWORD *)(v182 + 56) + 8 * v94) = v167;
                  }
                  else
                  {
                    OUTLINED_FUNCTION_44_0();
                    outlined init with copy of Grammar(v91, v99, type metadata accessor for TerminalSymbol);
                    v98 = v167;
                    *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v94) = v167;
                    v100 = *(_QWORD *)(v47 + 16);
                    v74 = __OFADD__(v100, 1);
                    v101 = v100 + 1;
                    if (v74)
                      goto LABEL_118;
                    *(_QWORD *)(v47 + 16) = v101;
                  }
                  swift_bridgeObjectRelease();
                  OUTLINED_FUNCTION_73_0(v91);
                  v102 = OUTLINED_FUNCTION_46_0();
                  v23 = (char *)v179;
                  if ((v102 & 1) == 0)
                  {
                    OUTLINED_FUNCTION_47_0();
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v57 = v107;
                  }
                  v103 = *(_QWORD *)(v57 + 16);
                  if (v103 >= *(_QWORD *)(v57 + 24) >> 1)
                  {
                    OUTLINED_FUNCTION_47_0();
                    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v57 = v108;
                  }
                  *(_QWORD *)(v57 + 16) = v103 + 1;
                  v104 = v57 + 16 * v103;
                  *(_QWORD *)(v104 + 32) = v98;
                  *(_BYTE *)(v104 + 40) = 0;
                }
                else
                {
                  v65 = v170[1];
                  v66 = HIBYTE(v65) & 0xF;
                  if ((v65 & 0x2000000000000000) == 0)
                    v66 = *v170 & 0xFFFFFFFFFFFFLL;
                  v182 = *v170;
                  v183 = v65;
                  v184 = 0;
                  v185 = v66;
                  while (1)
                  {
                    v67 = String.Iterator.next()();
                    if (!v67.value._object)
                      break;
                    *v26 = v67;
                    OUTLINED_FUNCTION_129_0();
                    OUTLINED_FUNCTION_99_0((uint64_t)v26, (uint64_t)v23);
                    v68 = (uint64_t *)(v47 + 16);
                    if (*(_QWORD *)(v47 + 16))
                    {
                      v69 = OUTLINED_FUNCTION_121_0((uint64_t)v23);
                      if ((v70 & 1) != 0)
                        v68 = (uint64_t *)(*(_QWORD *)(v47 + 56) + 8 * v69);
                    }
                    v71 = *v68;
                    OUTLINED_FUNCTION_73_0((uint64_t)v23);
                    OUTLINED_FUNCTION_99_0((uint64_t)v26, (uint64_t)v20);
                    swift_isUniquelyReferenced_nonNull_native();
                    v181 = v47;
                    OUTLINED_FUNCTION_121_0((uint64_t)v20);
                    OUTLINED_FUNCTION_158();
                    if (v74)
                    {
                      __break(1u);
LABEL_115:
                      __break(1u);
LABEL_116:
                      __break(1u);
LABEL_117:
                      __break(1u);
LABEL_118:
                      __break(1u);
LABEL_119:
                      __break(1u);
LABEL_120:
                      __break(1u);
LABEL_121:
                      __break(1u);
LABEL_122:
                      __break(1u);
LABEL_123:
                      __break(1u);
LABEL_124:
                      OUTLINED_FUNCTION_82();
                      __break(1u);
LABEL_125:
                      __break(1u);
LABEL_126:
                      OUTLINED_FUNCTION_13();
                      __break(1u);
LABEL_127:
                      __break(1u);
LABEL_128:
                      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                      return result;
                    }
                    v75 = v72;
                    v76 = v73;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<TerminalSymbol, Int>);
                    if (OUTLINED_FUNCTION_157())
                    {
                      v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
                      if ((v76 & 1) != (v78 & 1))
                        goto LABEL_128;
                      v75 = v77;
                    }
                    v47 = v181;
                    if ((v76 & 1) != 0)
                    {
                      *(_QWORD *)(*(_QWORD *)(v181 + 56) + 8 * v75) = v71;
                    }
                    else
                    {
                      OUTLINED_FUNCTION_44_0();
                      outlined init with copy of Grammar((uint64_t)v20, v79, type metadata accessor for TerminalSymbol);
                      *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v75) = v71;
                      v80 = *(_QWORD *)(v47 + 16);
                      v74 = __OFADD__(v80, 1);
                      v81 = v80 + 1;
                      if (v74)
                        goto LABEL_115;
                      *(_QWORD *)(v47 + 16) = v81;
                    }
                    swift_bridgeObjectRelease();
                    OUTLINED_FUNCTION_73_0((uint64_t)v20);
                    v82 = OUTLINED_FUNCTION_46_0();
                    v23 = (char *)v179;
                    if ((v82 & 1) == 0)
                    {
                      OUTLINED_FUNCTION_47_0();
                      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                      v57 = v85;
                    }
                    v83 = *(_QWORD *)(v57 + 16);
                    if (v83 >= *(_QWORD *)(v57 + 24) >> 1)
                    {
                      OUTLINED_FUNCTION_47_0();
                      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                      v57 = v86;
                    }
                    *(_QWORD *)(v57 + 16) = v83 + 1;
                    v84 = v57 + 16 * v83;
                    *(_QWORD *)(v84 + 32) = v71;
                    *(_BYTE *)(v84 + 40) = 0;
                    OUTLINED_FUNCTION_73_0((uint64_t)v26);
                  }
                  swift_bridgeObjectRelease();
                }
                OUTLINED_FUNCTION_73_0(v177);
                v55 = v176;
              }
              ++v56;
              v45 = v174;
              v48 = v175;
            }
            while (v56 != v173);
            swift_bridgeObjectRelease();
            v52 = v162;
          }
          else
          {
            v57 = MEMORY[0x24BEE4AF8];
          }
          if (!*(_QWORD *)(v45 + 16))
            goto LABEL_121;
          v109 = v52;
          OUTLINED_FUNCTION_75();
          specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v111 & 1) == 0)
            goto LABEL_126;
          v112 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v110);
          OUTLINED_FUNCTION_13();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_51_0();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v164 = v118;
          }
          v114 = *(_QWORD *)(v164 + 16);
          v113 = *(_QWORD *)(v164 + 24);
          if (v114 >= v113 >> 1)
          {
            OUTLINED_FUNCTION_173(v113);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v115 = v109;
            v164 = v119;
          }
          else
          {
            v115 = v109;
          }
          v52 = v115 + 1;
          v116 = v164;
          *(_QWORD *)(v164 + 16) = v114 + 1;
          v117 = v116 + 16 * v114;
          *(_QWORD *)(v117 + 32) = v112;
          *(_QWORD *)(v117 + 40) = v57;
          v8 = v165;
          v45 = v174;
          v48 = v175;
          v50 = v156;
        }
        while (v52 != v160);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_40_0();
        v46 = v150[0];
      }
      ++v46;
      v32 = v155;
    }
    while (v46 != v153);
    OUTLINED_FUNCTION_82();
  }
  else
  {
    v164 = MEMORY[0x24BEE4AF8];
    v47 = MEMORY[0x24BEE4B00];
  }
  v120 = *(_QWORD *)(v152 + 8);
  v121 = *(_QWORD *)(v152 + 16);
  OUTLINED_FUNCTION_38_0();
  v179 = specialized Dictionary.subscript.getter(v120, v121, v45);
  v123 = v122;
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_123();
  if ((v123 & 1) != 0)
    goto LABEL_127;
  v124 = (uint64_t)v151;
  *v151 = 46;
  *(_QWORD *)(v124 + 8) = 0xE100000000000000;
  OUTLINED_FUNCTION_129_0();
  v125 = specialized Array.init(repeating:count:)(v124, *(_QWORD *)(v47 + 16));
  v126 = *(_QWORD *)(v47 + 64);
  v180 = v47 + 64;
  v127 = 1 << *(_BYTE *)(v47 + 32);
  v128 = -1;
  if (v127 < 64)
    v128 = ~(-1 << v127);
  v129 = v128 & v126;
  v130 = (unint64_t)(v127 + 63) >> 6;
  v177 = v130 - 1;
  OUTLINED_FUNCTION_120_0();
  v131 = 0;
  v132 = v159;
  if (!v129)
    goto LABEL_87;
LABEL_85:
  v133 = __clz(__rbit64(v129));
  v129 &= v129 - 1;
  v134 = v133 | (v131 << 6);
LABEL_86:
  OUTLINED_FUNCTION_123_0(*(_QWORD *)(v47 + 48) + *(_QWORD *)(v178 + 72) * v134, v132);
  v135 = *(_QWORD *)(v47 + 56);
  v136 = OUTLINED_FUNCTION_169();
  v137 = *(_QWORD *)(v135 + 8 * v134);
  v132 = v159;
  *(_QWORD *)(v159 + *(int *)(v136 + 48)) = v137;
  __swift_storeEnumTagSinglePayload(v132, 0, 1, v136);
  v8 = v165;
  while (1)
  {
    outlined init with take of (key: TerminalSymbol, value: Int)?(v132, (uint64_t)v8);
    v142 = OUTLINED_FUNCTION_169();
    v143 = OUTLINED_FUNCTION_159();
    OUTLINED_FUNCTION_89_0(v143, v144, v142);
    if (v145)
      goto LABEL_113;
    v146 = *(_QWORD *)&v8[*(int *)(v142 + 48)];
    outlined init with take of TerminalSymbol((uint64_t)v8, v163, type metadata accessor for TerminalSymbol);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      break;
    if ((v146 & 0x8000000000000000) != 0)
      goto LABEL_112;
LABEL_108:
    if (v146 >= *(_QWORD *)(v125 + 16))
      goto LABEL_119;
    OUTLINED_FUNCTION_65_0();
    outlined assign with take of TerminalSymbol(v163, v125 + v147 + *(_QWORD *)(v148 + 72) * v146);
    v8 = v165;
    if (v129)
      goto LABEL_85;
LABEL_87:
    v138 = v131 + 1;
    if (__OFADD__(v131, 1))
      goto LABEL_122;
    if (v138 < v130)
    {
      v139 = *(_QWORD *)(v180 + 8 * v138);
      if (v139)
        goto LABEL_90;
      v140 = v131 + 2;
      ++v131;
      if (v138 + 1 < v130)
      {
        v139 = *(_QWORD *)(v180 + 8 * v140);
        if (v139)
          goto LABEL_93;
        v131 = v138 + 1;
        if (v138 + 2 < v130)
        {
          v139 = *(_QWORD *)(v180 + 8 * (v138 + 2));
          if (v139)
          {
            v138 += 2;
            goto LABEL_90;
          }
          v140 = v138 + 3;
          v131 = v138 + 2;
          if (v138 + 3 < v130)
          {
            v139 = *(_QWORD *)(v180 + 8 * v140);
            if (!v139)
            {
              while (1)
              {
                v138 = v140 + 1;
                if (__OFADD__(v140, 1))
                  goto LABEL_125;
                if (v138 >= v130)
                {
                  v131 = v177;
                  goto LABEL_104;
                }
                v139 = *(_QWORD *)(v180 + 8 * v138);
                ++v140;
                if (v139)
                  goto LABEL_90;
              }
            }
LABEL_93:
            v138 = v140;
LABEL_90:
            v129 = (v139 - 1) & v139;
            v134 = __clz(__rbit64(v139)) + (v138 << 6);
            v131 = v138;
            goto LABEL_86;
          }
        }
      }
    }
LABEL_104:
    v141 = OUTLINED_FUNCTION_169();
    __swift_storeEnumTagSinglePayload(v132, 1, 1, v141);
    v129 = 0;
  }
  v125 = specialized _ArrayBuffer._consumeAndCreateNew()();
  if ((v146 & 0x8000000000000000) == 0)
    goto LABEL_108;
LABEL_112:
  __break(1u);
LABEL_113:
  swift_release();
  OUTLINED_FUNCTION_118();
  return v179;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      v4 = type metadata accessor for TerminalSymbol(0);
      v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v5 + 16) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      outlined init with copy of Grammar(a1, v5 + v7, type metadata accessor for TerminalSymbol);
      v8 = a2 - 1;
      if (a2 != 1)
      {
        v9 = *(_QWORD *)(v6 + 72);
        v10 = v5 + v9 + v7;
        do
        {
          outlined init with copy of Grammar(a1, v10, type metadata accessor for TerminalSymbol);
          v10 += v9;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v5 = MEMORY[0x24BEE4AF8];
    }
    outlined destroy of Grammar(a1, type metadata accessor for TerminalSymbol);
    return v5;
  }
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  if (a2 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
      v4 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v5 = v4;
      v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = v4 + 6;
          do
          {
            *v7++ = a1;
            swift_bridgeObjectRetain();
            --v6;
          }
          while (v6);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(char a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1 & 1, a2);
    return v4;
  }
  return result;
}

uint64_t EarleyParser.ParserGrammar.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EarleyParser.ParserGrammar.__deallocating_deinit()
{
  EarleyParser.ParserGrammar.deinit();
  return swift_deallocClassInstance();
}

void EarleyParser.ParserRule.hash(into:)(int a1, Swift::UInt a2, uint64_t a3)
{
  uint64_t v3;

  OUTLINED_FUNCTION_155(a1, a2);
  specialized Array<A>.hash(into:)(v3, a3);
}

uint64_t static EarleyParser.ParserRule.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3)
    return specialized static Array<A>.== infix(_:_:)(a2, a4);
  else
    return getEnumTag for AutomationJSON.Response.CodingKeys();
}

void EarleyParser.ParserRule.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];

  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_100_0();
  specialized Array<A>.hash(into:)((uint64_t)v3, a2);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

void protocol witness for Hashable.hashValue.getter in conformance EarleyParser.ParserRule()
{
  uint64_t *v0;

  EarleyParser.ParserRule.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.ParserRule(int a1)
{
  uint64_t v1;

  EarleyParser.ParserRule.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.ParserRule()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Array<A>.hash(into:)((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.ParserRule(uint64_t *a1, uint64_t *a2)
{
  return static EarleyParser.ParserRule.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t EarleyParser.Item.getDescription(grammar:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = *(_QWORD *)(result + 48);
  if (*(_QWORD *)(v4 + 16) <= a2)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = v4 + 16 * a2;
  v6 = *(_QWORD *)(v5 + 32);
  if ((v6 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(result + 16);
  if (v6 >= *(_QWORD *)(v7 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(v5 + 40);
  v10 = v7 + 16 * v6;
  v12 = *(_QWORD *)(v10 + 32);
  v11 = *(void **)(v10 + 40);
  OUTLINED_FUNCTION_43_0();
  OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_38_0();
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore12EarleyParserC0H6SymbolOG_SSs5NeverOTg504_s19de6Core12gh56C4ItemV14getDescription7grammarSSAC0E7GrammarC_tFSSAC0E6I6OXEfU_AH0hS0CTf1cn_n(v9);
  result = OUTLINED_FUNCTION_82();
  if (*(_QWORD *)(v13 + 16) < a4)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
    specialized Array.replaceSubrange<A>(_:with:)(a4, a4, 12226530, 0xA300000000000000);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v14 = BidirectionalCollection<>.joined(separator:)();
    v16 = v15;
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_38_0();
    v17._countAndFlagsBits = v12;
    v17._object = v11;
    String.append(_:)(v17);
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_124_0(62);
    OUTLINED_FUNCTION_37_0();
    v18._countAndFlagsBits = 0x203D3A3A20;
    v18._object = (void *)0xE500000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v14;
    v19._object = v16;
    String.append(_:)(v19);
    OUTLINED_FUNCTION_82();
    v20._countAndFlagsBits = 31520;
    v20._object = (void *)0xE200000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_124_0(125);
    return 60;
  }
LABEL_13:
  __break(1u);
  return result;
}

void EarleyParser.Item.hash(into:)(int a1, Swift::UInt a2)
{
  OUTLINED_FUNCTION_155(a1, a2);
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_99();
}

BOOL static EarleyParser.Item.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

void EarleyParser.Item.hashValue.getter(Swift::UInt a1)
{
  OUTLINED_FUNCTION_97();
  Hasher._combine(_:)(a1);
  OUTLINED_FUNCTION_100_0();
  OUTLINED_FUNCTION_57_0();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

void protocol witness for Hashable.hashValue.getter in conformance EarleyParser.Item()
{
  Swift::UInt *v0;

  EarleyParser.Item.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser.Item(int a1)
{
  Swift::UInt *v1;

  EarleyParser.Item.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.Item()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser.Item(uint64_t *a1, uint64_t *a2)
{
  return static EarleyParser.Item.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void EarleyParser.State.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt *v3;
  Swift::UInt v4;
  Swift::UInt v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  OUTLINED_FUNCTION_57_0();
  if (v2)
  {
    v3 = (Swift::UInt *)(v1 + 48);
    do
    {
      v4 = *(v3 - 2);
      v5 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      OUTLINED_FUNCTION_100_0();
      Hasher._combine(_:)(v5);
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_17_0();
}

BOOL static EarleyParser.State.== infix(_:_:)(int64x2_t **a1, int64x2_t **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    v7 = OUTLINED_FUNCTION_41_0();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v8 = a2 + 7;
  v9 = a1 + 7;
  v10 = 1;
  while (v10 < v2)
  {
    result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      result = OUTLINED_FUNCTION_41_0();
      if ((result & 1) == 0)
        return 0;
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10)
      return 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return getEnumTag for AutomationJSON.Response.CodingKeys();
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return getEnumTag for AutomationJSON.Response.CodingKeys();
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  BOOL v5;
  char v6;
  char v7;

  OUTLINED_FUNCTION_113_0();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == *(_QWORD *)(v1 + 16))
  {
    if (!v2 || v0 == v1)
      return 1;
    v3 = v1 + 48;
    for (i = v0 + 48; ; i += 24)
    {
      v5 = *(_QWORD *)(i - 16) == *(_QWORD *)(v3 - 16) && *(_QWORD *)(i - 8) == *(_QWORD *)(v3 - 8);
      if (!v5 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
        break;
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_38_0();
      OUTLINED_FUNCTION_88_0();
      specialized static Array<A>.== infix(_:_:)();
      v7 = v6;
      OUTLINED_FUNCTION_25_0();
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_40_0();
      if ((v7 & 1) == 0)
        break;
      v3 += 24;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

void specialized static Array<A>.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v3 = v2;
  v4 = OUTLINED_FUNCTION_79_0();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(v3 + 16);
  if (v11 == *(_QWORD *)(v1 + 16) && v11 && v3 != v1)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    v22 = v8;
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v14 = v11 - 1;
    do
    {
      v15 = v3;
      v13(v10, v3 + v12, v4);
      v16 = v1;
      v13(v7, v1 + v12, v4);
      lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB768]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v18 = *(void (**)(char *, uint64_t))(v22 + 8);
      v18(v7, v4);
      v18(v10, v4);
      v20 = v14-- != 0;
      if ((v17 & 1) == 0)
        break;
      v12 += v21;
      v1 = v16;
      v3 = v15;
    }
    while (v20);
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_79_0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_62_0();
  v9 = v8 - v7;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_63_0();
  v99 = OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_35_0();
  v91 = v12;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_84_0();
  v90 = v14;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_84_0();
  v89 = v16;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v17);
  v100 = (uint64_t)&v79 - v18;
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Symbol(0);
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_35_0();
  v93 = (uint64_t *)v22;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_84_0();
  v94 = v24;
  OUTLINED_FUNCTION_27_0();
  v26 = MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v79 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v31 = (char *)&v79 - v30;
  v32 = *(_QWORD *)(v4 + 16);
  if (v32 != *(_QWORD *)(v2 + 16) || !v32 || v4 == v2)
  {
LABEL_50:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  v85 = v29;
  v86 = v9;
  v87 = v6;
  v88 = v5;
  v33 = 0;
  v34 = v4 + 32;
  v35 = v2 + 32;
  v36 = v94;
  v96 = v0;
  v82 = v32;
  v81 = v4 + 32;
  v80 = v35;
  while (1)
  {
    v37 = *(_QWORD *)(v35 + 8 * v33);
    v103 = *(_QWORD *)(v34 + 8 * v33);
    v38 = *(_QWORD *)(v103 + 16);
    v39 = *(_QWORD *)(v37 + 16);
    if (v38 != v39)
      goto LABEL_50;
    if (v38 && v103 != v37)
      break;
LABEL_38:
    if (++v33 == v32)
      goto LABEL_50;
  }
  v83 = v38 == v39;
  v84 = v33;
  v40 = v85;
  v41 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_120_0();
  v42 = 0;
  v95 = *(_QWORD *)(v40 + 72);
  v97 = v38;
  v98 = v37;
  while (1)
  {
    OUTLINED_FUNCTION_115_0(v103 + v41, (uint64_t)v31);
    if (v42 >= *(_QWORD *)(v37 + 16))
      break;
    OUTLINED_FUNCTION_115_0(v37 + v41, (uint64_t)v28);
    v43 = &v21[*(int *)(v101 + 48)];
    OUTLINED_FUNCTION_49_0((uint64_t)v31, (uint64_t)v21);
    OUTLINED_FUNCTION_49_0((uint64_t)v28, (uint64_t)v43);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      OUTLINED_FUNCTION_49_0((uint64_t)v21, v36);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined destroy of Grammar(v36, type metadata accessor for TerminalSymbol);
        goto LABEL_43;
      }
      v54 = v100;
      OUTLINED_FUNCTION_141_0((uint64_t)v43, v100);
      v55 = v96;
      v56 = (uint64_t *)(v96 + *(int *)(v92 + 48));
      v57 = OUTLINED_FUNCTION_160();
      OUTLINED_FUNCTION_49_0(v57, v58);
      OUTLINED_FUNCTION_49_0(v54, (uint64_t)v56);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          v60 = v55;
          v61 = v90;
          OUTLINED_FUNCTION_142_0(v60);
          v63 = *v61;
          v62 = v61[1];
          if (OUTLINED_FUNCTION_168() != 1)
            goto LABEL_44;
          goto LABEL_25;
        }
        v71 = v91;
        outlined init with copy of Grammar(v55, v91, type metadata accessor for TerminalSymbol);
        if (OUTLINED_FUNCTION_168() != 2)
        {
          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v71, v88);
          goto LABEL_47;
        }
        v73 = v86;
        v72 = v87;
        v74 = v88;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v87 + 32))(v86, v56, v88);
        v75 = static CharacterSet.== infix(_:_:)();
        v76 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
        v76(v73, v74);
        v76(v91, v74);
        v70 = v94;
        v53 = v97;
        if ((v75 & 1) == 0)
        {
LABEL_45:
          outlined destroy of Grammar(v96, type metadata accessor for TerminalSymbol);
          goto LABEL_48;
        }
      }
      else
      {
        v64 = v55;
        v65 = v89;
        OUTLINED_FUNCTION_142_0(v64);
        v63 = *v65;
        v62 = v65[1];
        if (swift_getEnumCaseMultiPayload())
        {
LABEL_44:
          OUTLINED_FUNCTION_82();
          v55 = v96;
LABEL_47:
          v78 = v94;
          outlined destroy of (Locale?, Locale?)(v55, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
          v70 = v78;
LABEL_48:
          OUTLINED_FUNCTION_24_0(v100);
          OUTLINED_FUNCTION_24_0(v70);
          outlined destroy of Grammar((uint64_t)v21, type metadata accessor for Symbol);
LABEL_49:
          OUTLINED_FUNCTION_24_0((uint64_t)v28);
          OUTLINED_FUNCTION_24_0((uint64_t)v31);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_118();
          goto LABEL_50;
        }
LABEL_25:
        v66 = *v56;
        v67 = v56[1];
        if (v63 == v66 && v62 == v67)
        {
          v77 = v94;
          v53 = v97;
          OUTLINED_FUNCTION_40_0();
          v70 = v77;
        }
        else
        {
          v69 = OUTLINED_FUNCTION_41_0();
          OUTLINED_FUNCTION_25_0();
          OUTLINED_FUNCTION_82();
          v70 = v94;
          v53 = v97;
          if ((v69 & 1) == 0)
            goto LABEL_45;
        }
      }
      OUTLINED_FUNCTION_56_0(v96);
      OUTLINED_FUNCTION_56_0(v100);
      v36 = v70;
      OUTLINED_FUNCTION_56_0(v70);
      goto LABEL_36;
    }
    v44 = v31;
    v45 = v28;
    v46 = v93;
    outlined init with copy of Grammar((uint64_t)v21, (uint64_t)v93, type metadata accessor for Symbol);
    v48 = *v46;
    v47 = v46[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      OUTLINED_FUNCTION_82();
      v28 = v45;
      v31 = v44;
LABEL_43:
      outlined destroy of (Locale?, Locale?)((uint64_t)v21, &demangling cache variable for type metadata for (Symbol, Symbol));
      goto LABEL_49;
    }
    v49 = *(_QWORD *)v43;
    v50 = *((_QWORD *)v43 + 1);
    if (v48 == v49 && v47 == v50)
    {
      OUTLINED_FUNCTION_40_0();
      v28 = v45;
      v31 = v44;
      v53 = v97;
    }
    else
    {
      v52 = OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_82();
      OUTLINED_FUNCTION_25_0();
      v28 = v45;
      v31 = v44;
      v53 = v97;
      if ((v52 & 1) == 0)
      {
        outlined destroy of Grammar((uint64_t)v21, type metadata accessor for Symbol);
        goto LABEL_49;
      }
    }
LABEL_36:
    ++v42;
    OUTLINED_FUNCTION_56_0((uint64_t)v21);
    OUTLINED_FUNCTION_56_0((uint64_t)v28);
    OUTLINED_FUNCTION_56_0((uint64_t)v31);
    v41 += v95;
    v37 = v98;
    if (v53 == v42)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_118();
      v32 = v82;
      v33 = v84;
      v34 = v81;
      v35 = v80;
      goto LABEL_38;
    }
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v3 = v2;
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_49();
  v41 = v5;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_62_0();
  v9 = v8 - v7;
  v10 = type metadata accessor for Symbol(0);
  OUTLINED_FUNCTION_83_0();
  MEMORY[0x24BDAC7A8](v11);
  v42 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_27_0();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v39 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v21 = (char *)&v39 - v19;
  v22 = *(_QWORD *)(v3 + 16);
  if (v22 != *(_QWORD *)(v1 + 16))
    goto LABEL_25;
  if (!v22)
    goto LABEL_25;
  v23 = v3;
  v24 = v1;
  if (v3 == v1)
    goto LABEL_25;
  v47 = v9;
  v40 = v20;
  v25 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v43 = *(_QWORD *)(v18 + 72);
  v44 = v10;
  v45 = v17;
  v46 = (char *)&v39 - v19;
  v39 = v3;
  while (1)
  {
    OUTLINED_FUNCTION_72_0(v23 + v25, (uint64_t)v21);
    OUTLINED_FUNCTION_72_0(v24 + v25, (uint64_t)v17);
    v26 = (_QWORD *)(v9 + *(int *)(v48 + 48));
    OUTLINED_FUNCTION_72_0((uint64_t)v21, v9);
    OUTLINED_FUNCTION_72_0((uint64_t)v17, (uint64_t)v26);
    if (OUTLINED_FUNCTION_74_0() != 1)
      break;
    v27 = v24;
    v28 = v42;
    outlined init with copy of Grammar(v9, (uint64_t)v42, type metadata accessor for Symbol);
    v29 = *v28;
    v30 = v28[1];
    if (OUTLINED_FUNCTION_74_0() != 1)
    {
      OUTLINED_FUNCTION_13();
      goto LABEL_22;
    }
    if (v29 == *v26 && v30 == v26[1])
    {
      OUTLINED_FUNCTION_40_0();
    }
    else
    {
      OUTLINED_FUNCTION_117_0();
      v32 = OUTLINED_FUNCTION_41_0();
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_123();
      if ((v32 & 1) == 0)
      {
        outlined destroy of Grammar(v9, type metadata accessor for Symbol);
        v17 = v45;
        goto LABEL_23;
      }
    }
    OUTLINED_FUNCTION_24_0(v9);
    v24 = v27;
    v23 = v39;
    v17 = v45;
    v38 = (uint64_t)v46;
LABEL_18:
    OUTLINED_FUNCTION_24_0((uint64_t)v17);
    OUTLINED_FUNCTION_24_0(v38);
    v25 += v43;
    --v22;
    v21 = (char *)v38;
    if (!v22)
      goto LABEL_25;
  }
  v33 = v23;
  v34 = v40;
  OUTLINED_FUNCTION_72_0(v9, v40);
  if (OUTLINED_FUNCTION_74_0() != 1)
  {
    v35 = v41;
    outlined init with take of TerminalSymbol((uint64_t)v26, v41, type metadata accessor for TerminalSymbol);
    static TerminalSymbol.== infix(_:_:)();
    v37 = v36;
    OUTLINED_FUNCTION_56_0(v35);
    OUTLINED_FUNCTION_56_0(v34);
    OUTLINED_FUNCTION_24_0(v9);
    v23 = v33;
    v17 = v45;
    v38 = (uint64_t)v46;
    if ((v37 & 1) == 0)
      goto LABEL_24;
    goto LABEL_18;
  }
  outlined destroy of Grammar(v34, type metadata accessor for TerminalSymbol);
LABEL_22:
  v17 = v45;
  outlined destroy of (Locale?, Locale?)(v9, &demangling cache variable for type metadata for (Symbol, Symbol));
LABEL_23:
  v38 = (uint64_t)v46;
LABEL_24:
  OUTLINED_FUNCTION_24_0((uint64_t)v17);
  OUTLINED_FUNCTION_24_0(v38);
LABEL_25:
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_6_1();
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_63_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_62_0();
  v12 = v11 - v10;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_102_0();
  type metadata accessor for Prompt.RenderedPromptFragment(v15);
  OUTLINED_FUNCTION_83_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_101_0();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v21 = (uint64_t *)((char *)&v33 - v20);
  v22 = *(_QWORD *)(v6 + 16);
  if (v22 == *(_QWORD *)(v4 + 16))
  {
    v36 = v13;
    if (v22)
    {
      if (v6 != v4)
      {
        v40 = v18;
        v34 = v0;
        v35 = v12;
        v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        v38 = *(_QWORD *)(v19 + 72);
        v24 = v36;
        v39 = v6;
        v37 = v4;
        while (1)
        {
          OUTLINED_FUNCTION_72_0(v6 + v23, (uint64_t)v21);
          OUTLINED_FUNCTION_72_0(v4 + v23, (uint64_t)v2);
          v25 = *v21 == *v2 && v21[1] == v2[1];
          if (!v25 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
            break;
          v26 = v1 + *(int *)(v24 + 48);
          OUTLINED_FUNCTION_143_0();
          OUTLINED_FUNCTION_143_0();
          OUTLINED_FUNCTION_89_0(v1, 1, v7);
          if (v25)
          {
            OUTLINED_FUNCTION_89_0(v26, 1, v7);
            if (!v25)
              goto LABEL_20;
            outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for Prompt.SpecialToken?);
          }
          else
          {
            v27 = v35;
            OUTLINED_FUNCTION_143_0();
            OUTLINED_FUNCTION_89_0(v26, 1, v7);
            if (v28)
            {
              outlined destroy of Grammar(v27, type metadata accessor for Prompt.SpecialToken);
LABEL_20:
              outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
              break;
            }
            outlined init with take of TerminalSymbol(v26, v34, type metadata accessor for Prompt.SpecialToken);
            static Prompt.SpecialToken.== infix(_:_:)();
            v30 = v29;
            v31 = OUTLINED_FUNCTION_27();
            outlined destroy of Grammar(v31, v32);
            outlined destroy of Grammar(v27, type metadata accessor for Prompt.SpecialToken);
            outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for Prompt.SpecialToken?);
            v24 = v36;
            if ((v30 & 1) == 0)
              break;
          }
          OUTLINED_FUNCTION_24_0((uint64_t)v2);
          OUTLINED_FUNCTION_24_0((uint64_t)v21);
          v4 = v37;
          v23 += v38;
          --v22;
          v6 = v39;
          if (!v22)
            goto LABEL_22;
        }
        OUTLINED_FUNCTION_24_0((uint64_t)v2);
        OUTLINED_FUNCTION_24_0((uint64_t)v21);
      }
    }
  }
LABEL_22:
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_6_1();
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for Locale();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_59();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v53 = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_102_0();
  type metadata accessor for Prompt.Delimiter(v13);
  OUTLINED_FUNCTION_83_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_101_0();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v19 = (uint64_t *)((char *)&v45 - v18);
  v20 = *(_QWORD *)(v6 + 16);
  if (v20 == *(_QWORD *)(v4 + 16) && v20 && v6 != v4)
  {
    v54 = v16;
    v47 = v0;
    v48 = v8;
    v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v49 = *(_QWORD *)(v17 + 72);
    v50 = v6;
    v22 = v20 - 1;
    v51 = v4;
    v52 = v11;
    v46 = v1;
    while (1)
    {
      OUTLINED_FUNCTION_115_0(v6 + v21, (uint64_t)v19);
      OUTLINED_FUNCTION_115_0(v4 + v21, (uint64_t)v2);
      v23 = *v19 == *v2 && v19[1] == v2[1];
      if (!v23 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
        break;
      v24 = OUTLINED_FUNCTION_180();
      v25 = v1 + *(int *)(v11 + 48);
      OUTLINED_FUNCTION_176();
      OUTLINED_FUNCTION_176();
      OUTLINED_FUNCTION_89_0(v1, 1, v7);
      if (v23)
      {
        OUTLINED_FUNCTION_89_0(v25, 1, v7);
        if (!v23)
          goto LABEL_35;
        outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for Locale?);
        v11 = v52;
      }
      else
      {
        OUTLINED_FUNCTION_176();
        OUTLINED_FUNCTION_89_0(v25, 1, v7);
        if (v26)
        {
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v53, v7);
LABEL_35:
          outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for (Locale?, Locale?));
          break;
        }
        v28 = v47;
        v27 = v48;
        v29 = v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v47, v25, v7);
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
        v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        v31 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
        v32 = v28;
        v33 = v29;
        v1 = v46;
        v31(v32, v7);
        v31(v33, v7);
        outlined destroy of (Locale?, Locale?)(v1, &demangling cache variable for type metadata for Locale?);
        v11 = v52;
        if ((v30 & 1) == 0)
          break;
      }
      v34 = *(int *)(v24 + 24);
      v35 = (_QWORD *)((char *)v19 + v34);
      v36 = *(_QWORD *)((char *)v19 + v34 + 8);
      v37 = (_QWORD *)((char *)v2 + v34);
      v38 = v37[1];
      if (v36)
      {
        if (!v38)
          break;
        v39 = *v35 == *v37 && v36 == v38;
        if (!v39 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
          break;
      }
      else if (v38)
      {
        break;
      }
      if (*(_QWORD *)((char *)v19 + *(int *)(v54 + 20)) != *(_QWORD *)((char *)v2 + *(int *)(v54 + 20)))
        break;
      v40 = *(int *)(v54 + 24);
      v41 = *(_QWORD *)((char *)v19 + v40);
      v42 = *(_QWORD *)((char *)v2 + v40);
      outlined destroy of Grammar((uint64_t)v2, type metadata accessor for Prompt.Delimiter);
      outlined destroy of Grammar((uint64_t)v19, type metadata accessor for Prompt.Delimiter);
      v44 = v22-- != 0;
      if (v41 == v42)
      {
        v6 = v50;
        v21 += v49;
        v4 = v51;
        if (v44)
          continue;
      }
      goto LABEL_37;
    }
    OUTLINED_FUNCTION_24_0((uint64_t)v2);
    OUTLINED_FUNCTION_24_0((uint64_t)v19);
  }
LABEL_37:
  OUTLINED_FUNCTION_8_1();
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_6_1();
  v20 = *(_QWORD *)(v12 + 16);
  if (v20 == *(_QWORD *)(v13 + 16) && v20 && v12 != v13)
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_248BFC9EC + 4 * byte_248C90E80[*(unsigned __int8 *)(v12 + 48)]))(v12, v13, v14, v15, v16, v17, v18, v19, a9, a10, a11, a12);
  else
    OUTLINED_FUNCTION_8_1();
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BOOL8 result;
  _QWORD *v17;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = a1 + 4;
    v4 = a2 + 4;
    if (a1[4] == a2[4])
    {
      v5 = a1[5];
      v6 = a2[5];
      v7 = *(_QWORD *)(v5 + 16);
      if (v7 == *(_QWORD *)(v6 + 16))
      {
        v8 = 1;
        while (!v7 || v5 == v6)
        {
LABEL_25:
          result = v8 == v2;
          if (v8 != v2 && v3[2 * v8] == v4[2 * v8])
          {
            v5 = v3[2 * v8 + 1];
            v17 = &v4[2 * v8++];
            v6 = v17[1];
            v7 = *(_QWORD *)(v5 + 16);
            if (v7 == *(_QWORD *)(v6 + 16))
              continue;
          }
          return result;
        }
        v9 = (_BYTE *)(v5 + 40);
        v10 = (unsigned __int8 *)(v6 + 40);
        while (1)
        {
          v11 = *((_QWORD *)v10 - 1);
          v12 = *v10;
          if (!*v9)
            break;
          if (*v9 == 1)
          {
            v13 = v12 == 1;
            goto LABEL_14;
          }
          if (v12 != 2 || v11 != 0)
            return 0;
LABEL_24:
          v9 += 16;
          v10 += 16;
          if (!--v7)
            goto LABEL_25;
        }
        v13 = v12 == 0;
LABEL_14:
        if (!v13 || *((_QWORD *)v9 - 1) != v11)
          return 0;
        goto LABEL_24;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v5;
  int64x2_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  int64x2_t *v12;
  int64x2_t *v13;
  int32x2_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    while (1)
    {
      v5 = *(int64x2_t **)(v4 + 8 * v3);
      v6 = *(int64x2_t **)(a2 + 32 + 8 * v3);
      v7 = v5[1].i64[0];
      if (v7 != v6[1].i64[0])
        break;
      if (v7)
        v8 = v5 == v6;
      else
        v8 = 1;
      if (!v8)
      {
        if (v5[2].i64[0] != v6[2].i64[0] || v5[2].i64[1] != v6[2].i64[1] || v5[3].i64[0] != v6[3].i64[0])
          return 0;
        v12 = v6 + 4;
        v13 = v5 + 4;
        while (--v7)
        {
          result = 0;
          if (v13[-1].i64[1] == v12[-1].i64[1])
          {
            v14 = vmovn_s64(vceqq_s64(*v13, *v12));
            if ((v14.i8[0] & 1) != 0)
            {
              v12 = (int64x2_t *)((char *)v12 + 24);
              v13 = (int64x2_t *)((char *)v13 + 24);
              if ((v14.i8[4] & 1) != 0)
                continue;
            }
          }
          return result;
        }
      }
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  _BYTE *v3;
  unsigned __int8 *i;
  uint64_t v5;
  int v6;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 40);
    for (i = (unsigned __int8 *)(a2 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      if (!*v3)
        break;
      if (*v3 == 1)
      {
        v7 = v6 == 1;
        goto LABEL_9;
      }
      if (v6 != 2 || v5 != 0)
        return 0;
LABEL_19:
      v3 += 16;
      if (!--v2)
        return 1;
    }
    v7 = v6 == 0;
LABEL_9:
    if (!v7 || *((_QWORD *)v3 - 1) != v5)
      return 0;
    goto LABEL_19;
  }
  return 1;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
      __asm { BR              X8 }
  }
  return 0;
}

BOOL specialized static Array<A>.== infix(_:_:)(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2;
  _BOOL8 result;
  int64x2_t *v6;
  int64x2_t *v7;
  int32x2_t v8;

  v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[2].i64[0] != a2[2].i64[0] || a1[2].i64[1] != a2[2].i64[1] || a1[3].i64[0] != a2[3].i64[0])
    return 0;
  v6 = a2 + 4;
  v7 = a1 + 4;
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    if (v7[-1].i64[1] != v6[-1].i64[1])
      break;
    v8 = vmovn_s64(vceqq_s64(*v7, *v6));
    if ((v8.i8[0] & 1) == 0)
      break;
    v6 = (int64x2_t *)((char *)v6 + 24);
    v7 = (int64x2_t *)((char *)v7 + 24);
  }
  while ((v8.i8[4] & 1) != 0);
  return result;
}

void EarleyParser.State.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v2[72];

  v1 = *v0;
  OUTLINED_FUNCTION_97();
  specialized Array<A>.hash(into:)((uint64_t)v2, v1);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser.State()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t EarleyParser.characterSetsUsedInGrammar.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t EarleyParser.partialMatch.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_1();
  return *(unsigned __int8 *)(v0 + 24);
}

void EarleyParser.partialMatch.setter(char a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_1();
  *(_BYTE *)(v1 + 24) = a1;
  OUTLINED_FUNCTION_153_0();
}

void EarleyParser.partialMatch.modify()
{
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_23();
}

uint64_t EarleyParser.fullMatch.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_1();
  return *(unsigned __int8 *)(v0 + 25);
}

void EarleyParser.fullMatch.setter(char a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_9_1();
  *(_BYTE *)(v1 + 25) = a1;
  OUTLINED_FUNCTION_153_0();
}

void EarleyParser.fullMatch.modify()
{
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_23();
}

uint64_t EarleyParser.lastConsumedCharacter.getter()
{
  OUTLINED_FUNCTION_3_1();
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_27();
}

void EarleyParser.lastConsumedCharacter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_110_0();
}

void EarleyParser.lastConsumedCharacter.modify()
{
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_23();
}

void EarleyParser.__allocating_init(grammar:)()
{
  OUTLINED_FUNCTION_18_0();
  EarleyParser.init(grammar:)();
  OUTLINED_FUNCTION_23();
}

void EarleyParser.init(grammar:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_6_1();
  v2 = v0;
  v4 = v3;
  type metadata accessor for Grammar(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5();
  *(_BYTE *)(v0 + 24) = 1;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v4 + *(int *)(v6 + 32));
  outlined init with copy of Grammar(v4, v1, v7);
  type metadata accessor for EarleyParser.ParserGrammar();
  v8 = OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_75();
  EarleyParser.ParserGrammar.init(grammar:)(v1);
  *(_BYTE *)(v2 + 25) = 0;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 48) = v8;
  *(_QWORD *)(v2 + 56) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EarleyParser.State>);
  v10 = OUTLINED_FUNCTION_18_0();
  *(_OWORD *)(v10 + 16) = xmmword_248C911B0;
  v11 = *(_QWORD *)(v8 + 40);
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(v8 + 64);
  if (v11 >= *(_QWORD *)(v12 + 16))
  {
LABEL_11:
    __break(1u);
    return;
  }
  v13 = *(_QWORD *)(v12 + 8 * v11 + 32);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = MEMORY[0x24BEE4AF8];
  if (v14)
  {
    v22 = v10;
    v23 = v4;
    v24 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_75();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v16 = 0;
    v15 = v24;
    v17 = *(_QWORD *)(v24 + 16);
    v18 = 24 * v17;
    do
    {
      v19 = *(_QWORD *)(v13 + 32 + 8 * v16);
      v20 = v17 + v16 + 1;
      if ((unint64_t)(v17 + v16) >= *(_QWORD *)(v24 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v16;
      *(_QWORD *)(v24 + 16) = v20;
      v21 = (_QWORD *)(v24 + v18);
      v21[5] = 0;
      v21[6] = 0;
      v21[4] = v19;
      v18 += 24;
    }
    while (v14 != v16);
    OUTLINED_FUNCTION_13();
    v10 = v22;
    v4 = v23;
  }
  *(_QWORD *)(v10 + 32) = v15;
  *(_QWORD *)(v2 + 64) = v10;
  EarleyParser.parse(character:)((Swift::String_optional)0);
  outlined destroy of Grammar(v4, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_8_1();
}

Swift::Bool __swiftcall EarleyParser.parse(character:)(Swift::String_optional character)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  char v4;
  Swift::Bool result;

  object = character.value._object;
  countAndFlagsBits = character.value._countAndFlagsBits;
  OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v1 + 32) = countAndFlagsBits;
  *(_QWORD *)(v1 + 40) = object;
  OUTLINED_FUNCTION_165();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_9_1();
  if ((*(_BYTE *)(v1 + 24) & 1) != 0
    && (!object
     || (EarleyParser.scan(character:)(countAndFlagsBits, (unint64_t)object),
         *(_BYTE *)(v1 + 24) = v4 & 1,
         (v4 & 1) != 0)))
  {
    EarleyParser.predictAndComplete()();
    EarleyParser.updateFullMatch()();
    return 1;
  }
  else
  {
    OUTLINED_FUNCTION_9_1();
    result = 0;
    *(_BYTE *)(v1 + 25) = 0;
  }
  return result;
}

uint64_t EarleyParser.init(copying:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;

  *(_BYTE *)(v1 + 24) = 1;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(a1 + 48);
  OUTLINED_FUNCTION_3_1();
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(a1 + 56);
  OUTLINED_FUNCTION_3_1();
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(a1 + 64);
  OUTLINED_FUNCTION_3_1();
  v3 = *(_BYTE *)(a1 + 24);
  OUTLINED_FUNCTION_9_1();
  *(_BYTE *)(v1 + 24) = v3;
  OUTLINED_FUNCTION_3_1();
  *(_BYTE *)(v1 + 25) = *(_BYTE *)(a1 + 25);
  v4 = *(_QWORD *)(a1 + 16);
  swift_retain();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_152_0();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_45_0();
  *(_QWORD *)(v1 + 16) = v4;
  return v1;
}

void EarleyParser.copy()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_18_0();
  v0 = OUTLINED_FUNCTION_43_0();
  EarleyParser.init(copying:)(v0);
  OUTLINED_FUNCTION_23();
}

void EarleyParser.childParser(consumingCharacter:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  Swift::String_optional v5;

  OUTLINED_FUNCTION_18_0();
  v4 = OUTLINED_FUNCTION_43_0();
  EarleyParser.init(copying:)(v4);
  v5.value._countAndFlagsBits = a1;
  v5.value._object = a2;
  EarleyParser.parse(character:)(v5);
  OUTLINED_FUNCTION_99();
}

uint64_t EarleyParser.totalCharactersParsed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  swift_beginAccess();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16);
  result = swift_beginAccess();
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16);
  v4 = __OFADD__(v1, v3);
  v5 = v1 + v3;
  if (v4)
  {
    __break(1u);
    goto LABEL_5;
  }
  result = v5 - 1;
  if (__OFSUB__(v5, 1))
LABEL_5:
    __break(1u);
  return result;
}

uint64_t EarleyParser.activeSetIndex(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16);
  result = a1 - v3;
  if (__OFSUB__(a1, v3))
    __break(1u);
  return result;
}

void EarleyParser.predictAndComplete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  char v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int64x2_t *v58;
  uint64_t v59;
  int64x2_t *v60;
  int32x2_t v61;
  char v62;
  unint64_t v63;
  int64x2_t v64;
  int64x2_t *v65;
  uint64_t v66;
  int64x2_t *v67;
  int64x2_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  int64x2_t *v73;
  uint64_t v74;
  int64x2_t *v75;
  int32x2_t v76;
  char v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t *v80;
  uint64_t v81;
  int64x2_t *v82;
  int64x2_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  int64x2_t v96;
  int64x2_t v97;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 48);
  v85 = v1;
  v3 = *(_QWORD *)(v1 + 32);
  v4 = EarleyParser.totalCharactersParsed()();
  v5 = EarleyParser.activeSetIndex(from:)(v4);
  if (v5 < 0)
    goto LABEL_105;
  v6 = v5;
  swift_bridgeObjectRetain();
  v86 = v3;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v87 = v0 + 56;
  swift_beginAccess();
  v95 = (uint64_t *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v7 + 16);
  if (v6 >= v8)
    goto LABEL_96;
  v9 = 0;
  v10 = v2 + 32;
  v90 = v2;
  v91 = v6;
  v92 = v2 + 32;
  while (1)
  {
    v11 = v7 + 32;
    v12 = *(_QWORD *)(v7 + 32 + 8 * v6);
    if (v9 >= *(_QWORD *)(v12 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v13 = (int64x2_t *)(v12 + 24 * v9);
    v14 = v13[2];
    v15 = v13[2].u64[0];
    if ((v15 & 0x8000000000000000) != 0)
      goto LABEL_97;
    if (v15 >= *(_QWORD *)(v2 + 16))
      goto LABEL_98;
    v16 = v13[3].i64[0];
    v17 = (uint64_t *)(v10 + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v93 = v19;
    if (v16 >= *(_QWORD *)(v18 + 16))
      break;
    v20 = v18 + 16 * v16;
    if (*(_BYTE *)(v20 + 40))
    {
      if (*(_BYTE *)(v20 + 40) != 1)
        break;
      v21 = *(_QWORD *)(v20 + 32);
      if ((v21 & 0x8000000000000000) != 0)
        goto LABEL_101;
      v22 = *(_QWORD *)(v85 + 64);
      if (v21 >= *(_QWORD *)(v22 + 16))
        goto LABEL_102;
      v88 = v9;
      v23 = *(_QWORD *)(v22 + 8 * v21 + 32);
      v24 = *(_QWORD *)(v23 + 16);
      v96 = v14;
      if (v24)
      {
        v84 = v21;
        v94 = v16;
        swift_bridgeObjectRetain();
        v25 = 0;
        while (v25 < *(_QWORD *)(v23 + 16))
        {
          v26 = *(_QWORD *)(v23 + 32 + 8 * v25);
          swift_beginAccess();
          v27 = *v95;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v95 = v27;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew()();
            v27 = v38;
            *v95 = v38;
          }
          if (v6 >= *(_QWORD *)(v27 + 16))
            goto LABEL_94;
          v29 = v27 + 32;
          v30 = *(_QWORD **)(v27 + 32 + 8 * v6);
          v31 = v30[2];
          if (v31)
          {
            v32 = v30 + 6;
            while (1)
            {
              v33 = *(v32 - 2) == v26 && *(v32 - 1) == v4;
              if (v33 && *v32 == 0)
                break;
              v32 += 3;
              if (!--v31)
                goto LABEL_28;
            }
          }
          else
          {
LABEL_28:
            v35 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v29 + 8 * v6) = v30;
            if ((v35 & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v30 = v39;
              *(_QWORD *)(v29 + 8 * v6) = v39;
            }
            v36 = v30[2];
            if (v36 >= v30[3] >> 1)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v30 = v40;
              *(_QWORD *)(v29 + 8 * v91) = v40;
            }
            v30[2] = v36 + 1;
            v37 = &v30[3 * v36];
            v37[4] = v26;
            v37[5] = v4;
            v37[6] = 0;
            v2 = v90;
            v6 = v91;
          }
          ++v25;
          swift_endAccess();
          if (v25 == v24)
          {
            swift_bridgeObjectRelease();
            v10 = v92;
            v16 = v94;
            v21 = v84;
            goto LABEL_69;
          }
        }
        goto LABEL_93;
      }
LABEL_69:
      if ((int64_t)v21 >= *(_QWORD *)(v86 + 16))
        goto LABEL_103;
      v9 = v88;
      if (*(_BYTE *)(v86 + 32 + v21) == 1)
      {
        swift_beginAccess();
        v69 = *v95;
        v70 = swift_isUniquelyReferenced_nonNull_native();
        *v95 = v69;
        if ((v70 & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          v69 = v81;
          *v95 = v81;
        }
        if (v6 >= *(_QWORD *)(v69 + 16))
          goto LABEL_104;
        v71 = v16 + 1;
        v72 = v69 + 32;
        v73 = *(int64x2_t **)(v69 + 32 + 8 * v6);
        v74 = v73[1].i64[0];
        if (v74)
        {
          v75 = v73 + 3;
          while (1)
          {
            v76 = vmovn_s64(vceqq_s64(v75[-1], v96));
            if ((v76.i8[0] & 1) != 0 && (v76.i8[4] & 1) != 0 && v75->i64[0] == v71)
              break;
            v75 = (int64x2_t *)((char *)v75 + 24);
            if (!--v74)
              goto LABEL_80;
          }
        }
        else
        {
LABEL_80:
          v77 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v72 + 8 * v6) = v73;
          if ((v77 & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v73 = v82;
            *(_QWORD *)(v72 + 8 * v6) = v82;
          }
          v78 = v73[1].u64[0];
          v79 = v96;
          if (v78 >= (unint64_t)v73[1].i64[1] >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v79 = v96;
            v73 = v83;
          }
          v73[1].i64[0] = v78 + 1;
          v80 = (int64x2_t *)((char *)v73 + 24 * v78);
          v80[2] = v79;
          v80[3].i64[0] = v71;
          *(_QWORD *)(v72 + 8 * v6) = v73;
        }
        swift_endAccess();
        goto LABEL_86;
      }
    }
LABEL_87:
    ++v9;
    v7 = *v95;
    v8 = *(_QWORD *)(*v95 + 16);
    if (v6 >= (uint64_t)v8)
      goto LABEL_96;
  }
  if (v14.i64[1] >= *(_QWORD *)(*(_QWORD *)v87 + 16))
  {
    v42 = EarleyParser.activeSetIndex(from:)(v14.i64[1]);
    if (v42 >= v8)
      goto LABEL_100;
    v41 = (uint64_t *)(v11 + 8 * v42);
  }
  else
  {
    if (v14.i64[1] < 0)
      goto LABEL_99;
    v41 = (uint64_t *)(*(_QWORD *)v87 + 8 * v14.i64[1] + 32);
  }
  v43 = *v41;
  swift_bridgeObjectRetain();
  v44 = *(_QWORD *)(v43 + 16);
  if (!v44)
  {
    swift_bridgeObjectRelease();
LABEL_86:
    v10 = v92;
    goto LABEL_87;
  }
  v89 = v9;
  v45 = 0;
  v46 = v92;
  while (v45 < *(_QWORD *)(v43 + 16))
  {
    v47 = v43 + 32 + 24 * v45;
    v48 = *(int64x2_t *)v47;
    v49 = *(_QWORD *)v47;
    if ((*(_QWORD *)v47 & 0x8000000000000000) != 0)
      goto LABEL_91;
    if (v49 >= *(_QWORD *)(v2 + 16))
      goto LABEL_92;
    v50 = *(_QWORD *)(v47 + 16);
    v51 = *(_QWORD *)(v46 + 16 * v49 + 8);
    if (v50 < *(_QWORD *)(v51 + 16))
    {
      v52 = v51 + 16 * v50;
      if (*(_BYTE *)(v52 + 40) == 1 && *(_QWORD *)(v52 + 32) == v93)
      {
        v97 = v48;
        swift_beginAccess();
        v54 = *v95;
        v55 = swift_isUniquelyReferenced_nonNull_native();
        *v95 = v54;
        if ((v55 & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()();
          v54 = v66;
          *v95 = v66;
        }
        if (v6 >= *(_QWORD *)(v54 + 16))
          goto LABEL_95;
        v56 = v50 + 1;
        v57 = v54 + 32;
        v58 = *(int64x2_t **)(v54 + 32 + 8 * v6);
        v59 = v58[1].i64[0];
        if (v59)
        {
          v60 = v58 + 3;
          while (1)
          {
            v61 = vmovn_s64(vceqq_s64(v60[-1], v97));
            if ((v61.i8[0] & 1) != 0 && (v61.i8[4] & 1) != 0 && v60->i64[0] == v56)
              break;
            v60 = (int64x2_t *)((char *)v60 + 24);
            if (!--v59)
              goto LABEL_60;
          }
        }
        else
        {
LABEL_60:
          v62 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v57 + 8 * v6) = v58;
          if ((v62 & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v58 = v67;
            *(_QWORD *)(v57 + 8 * v6) = v67;
          }
          v63 = v58[1].u64[0];
          v64 = v97;
          if (v63 >= (unint64_t)v58[1].i64[1] >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v64 = v97;
            v58 = v68;
            *(_QWORD *)(v57 + 8 * v91) = v68;
          }
          v58[1].i64[0] = v63 + 1;
          v65 = (int64x2_t *)((char *)v58 + 24 * v63);
          v65[2] = v64;
          v65[3].i64[0] = v56;
          v2 = v90;
          v6 = v91;
        }
        swift_endAccess();
        v46 = v92;
      }
    }
    if (++v45 == v44)
    {
      swift_bridgeObjectRelease();
      v10 = v92;
      v9 = v89;
      goto LABEL_87;
    }
  }
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
}

void EarleyParser.scan(character:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t *v48;
  uint64_t v49;
  int64x2_t *v50;
  int32x2_t v51;
  char v52;
  unint64_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  uint64_t v56;
  int64x2_t *v57;
  int64x2_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v70 = a2;
  v72 = a1;
  v65 = type metadata accessor for CharacterSet();
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x24BDAC7A8](v65);
  v63 = (char *)v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TerminalSymbol(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v77 = (_QWORD *)((char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v76 = (uint64_t)v61 - v8;
  v9 = v2[6];
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v9 + 24);
  v12 = EarleyParser.totalCharactersParsed()();
  v13 = v12;
  swift_beginAccess();
  v14 = v2[7];
  if (v12 < *(_QWORD *)(v14 + 16))
  {
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_6;
    __break(1u);
  }
  v13 = EarleyParser.activeSetIndex(from:)(v12);
  v15 = v2 + 8;
  swift_beginAccess();
  if ((v13 & 0x8000000000000000) != 0)
    goto LABEL_59;
  v14 = *v15;
  if (v13 >= *(_QWORD *)(*v15 + 16))
  {
LABEL_60:
    __break(1u);
    return;
  }
LABEL_6:
  v16 = *(_QWORD *)(v14 + 8 * v13 + 32);
  swift_bridgeObjectRetain();
  if (__OFADD__(v12, 1))
    goto LABEL_58;
  v74 = EarleyParser.activeSetIndex(from:)(v12 + 1);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = v2 + 8;
    v61[1] = v16;
    v19 = v16 + 32;
    v78 = v10 + 32;
    v71 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v20 = v71;
    v67 = 0;
    v21 = 0;
    v22 = v72;
    v66 = v11;
    v69 = v10;
    v73 = v18;
    v62 = v5;
    v61[2] = v4;
    v68 = v16 + 32;
    while (1)
    {
      v23 = (int64x2_t *)(v19 + 24 * v21);
      v24 = *v23;
      v25 = v23->i64[0];
      if (v23->i64[0] < 0)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      if (v25 >= *(_QWORD *)(v10 + 16))
        goto LABEL_53;
      v26 = v23[1].i64[0];
      v27 = *(_QWORD *)(v78 + 16 * v25 + 8);
      if (v26 < *(_QWORD *)(v27 + 16))
      {
        v28 = v27 + 16 * v26;
        if (!*(_BYTE *)(v28 + 40))
          break;
      }
LABEL_48:
      if (++v21 == v20)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
    }
    v29 = *(_QWORD *)(v28 + 32);
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_54;
    if (v29 >= *(_QWORD *)(v11 + 16))
      goto LABEL_55;
    v75 = v24;
    v30 = v76;
    outlined init with copy of Grammar(v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v29, v76, type metadata accessor for TerminalSymbol);
    outlined init with copy of Grammar(v30, (uint64_t)v77, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      v33 = v64;
      v34 = v63;
      v35 = v65;
      v36 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v64 + 32))(v63, v77, v65);
      MEMORY[0x24BDAC7A8](v36);
      v61[-2] = v34;
      v37 = v70;
      swift_bridgeObjectRetain();
      v38 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for closure #1 in TerminalSymbol.contains(_:), (uint64_t)&v61[-4], v22, v37);
      swift_bridgeObjectRelease();
      v18 = v73;
      v5 = v62;
      v39 = v35;
      v11 = v66;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v39);
      if ((v38 & 1) == 0)
        goto LABEL_47;
    }
    else if (*v77 == v22 && v77[1] == v70)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
LABEL_47:
        outlined destroy of Grammar(v76, type metadata accessor for TerminalSymbol);
        v22 = v72;
        v10 = v69;
        v19 = v68;
        v20 = v71;
        goto LABEL_48;
      }
    }
    v40 = v74;
    if (v74 >= *(_QWORD *)(*v18 + 16))
    {
      swift_beginAccess();
      v41 = *v18;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v18 = v41;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v59;
        *v18 = v59;
      }
      v43 = *(_QWORD *)(v41 + 16);
      if (v43 >= *(_QWORD *)(v41 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v41 = v60;
        *v73 = v60;
      }
      *(_QWORD *)(v41 + 16) = v43 + 1;
      *(_QWORD *)(v41 + 8 * v43 + 32) = MEMORY[0x24BEE4AF8];
      swift_endAccess();
      v18 = v73;
      v40 = v74;
    }
    swift_beginAccess();
    v44 = *v18;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    *v18 = v44;
    if ((v45 & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v44 = v56;
      *v18 = v56;
    }
    if ((v40 & 0x8000000000000000) != 0)
      goto LABEL_56;
    if (v40 >= *(_QWORD *)(v44 + 16))
      goto LABEL_57;
    v46 = v26 + 1;
    v47 = v44 + 32;
    v48 = *(int64x2_t **)(v44 + 32 + 8 * v40);
    v49 = v48[1].i64[0];
    if (v49)
    {
      v50 = v48 + 3;
      while (1)
      {
        v51 = vmovn_s64(vceqq_s64(v50[-1], v75));
        if ((v51.i8[0] & 1) != 0 && (v51.i8[4] & 1) != 0 && v50->i64[0] == v46)
          break;
        v50 = (int64x2_t *)((char *)v50 + 24);
        if (!--v49)
          goto LABEL_41;
      }
    }
    else
    {
LABEL_41:
      v52 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v47 + 8 * v40) = v48;
      if ((v52 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v48 = v57;
        *(_QWORD *)(v47 + 8 * v40) = v57;
      }
      v53 = v48[1].u64[0];
      v54 = v75;
      if (v53 >= (unint64_t)v48[1].i64[1] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v54 = v75;
        v48 = v58;
      }
      v48[1].i64[0] = v53 + 1;
      v55 = (int64x2_t *)((char *)v48 + 24 * v53);
      v55[2] = v54;
      v55[3].i64[0] = v46;
      *(_QWORD *)(v47 + 8 * v74) = v48;
      v11 = v66;
    }
    swift_endAccess();
    v67 = 1;
    v18 = v73;
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
}

uint64_t EarleyParser.updateFullMatch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v1 + 40);
  v2 = *(_QWORD *)(v1 + 48);
  result = swift_beginAccess();
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6 || (v7 = *(_QWORD *)(v5 + 8 * v6 + 24), (v8 = *(_QWORD *)(v7 + 16)) == 0))
  {
LABEL_14:
    v15 = 0;
LABEL_15:
    result = swift_beginAccess();
    *(_BYTE *)(v0 + 25) = v15;
    return result;
  }
  v9 = v2 + 32;
  v10 = (_QWORD *)(v7 + 48);
  while (1)
  {
    if (*(v10 - 1))
      goto LABEL_13;
    v11 = *(v10 - 2);
    if ((v11 & 0x8000000000000000) != 0)
      break;
    if (v11 >= *(_QWORD *)(v2 + 16))
      goto LABEL_18;
    if (*(_QWORD *)(v9 + 16 * v11) == v3)
    {
      v12 = *(_QWORD *)(v9 + 16 * v11 + 8);
      if (*v10 >= *(_QWORD *)(v12 + 16)
        || ((v13 = v12 + 16 * *v10, *(_BYTE *)(v13 + 40) == 2) ? (v14 = *(_QWORD *)(v13 + 32) == 0) : (v14 = 0), v14))
      {
        v15 = 1;
        goto LABEL_15;
      }
    }
LABEL_13:
    v10 += 3;
    if (!--v8)
      goto LABEL_14;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall EarleyParser.optimizeState()()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_9_1();
  v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
  swift_endAccess();
  *(_QWORD *)(v0 + 64) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
}

void specialized Array.append<A>(contentsOf:)()
{
  uint64_t v0;
  char **v1;
  char *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char *v7;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_34_0();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_31_0() || (OUTLINED_FUNCTION_136_0(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_47_0();
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, v9, v10);
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_0();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = OUTLINED_FUNCTION_59_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v11, v12);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v2;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v4)
  {
    *((_QWORD *)v2 + 2) = v13;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_0();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_31_0() || (OUTLINED_FUNCTION_136_0(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_47_0();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_0();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_59_0();
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v2;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  OUTLINED_FUNCTION_34_0();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_31_0() || (OUTLINED_FUNCTION_136_0(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_175();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_0();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = (char *)OUTLINED_FUNCTION_59_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v8, v9, v10);
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v2;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  OUTLINED_FUNCTION_6_1();
  v4 = v3 >> 1;
  v5 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = *v0;
  v7 = *(_QWORD *)(*v0 + 16);
  if (__OFADD__(v7, v5))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = v2;
  v9 = v1;
  if (!OUTLINED_FUNCTION_31_0() || (v10 = *(_QWORD *)(v6 + 24) >> 1, v10 < v7 + v5))
  {
    OUTLINED_FUNCTION_175();
    v6 = v11;
    v10 = *(_QWORD *)(v11 + 24) >> 1;
  }
  if (v4 == v8)
  {
    if (v5 <= 0)
    {
LABEL_13:
      swift_unknownObjectRelease();
      *v0 = v6;
      OUTLINED_FUNCTION_8_1();
      return;
    }
    __break(1u);
  }
  v12 = *(_QWORD *)(v6 + 16);
  if (v10 - v12 < v5)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v9 + 8 * v8), v5, (char *)(v6 + 8 * v12 + 32));
  if (v5 <= 0)
    goto LABEL_13;
  OUTLINED_FUNCTION_87_0();
  if (!v14)
  {
    *(_QWORD *)(v6 + 16) = v13;
    goto LABEL_13;
  }
LABEL_17:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_0();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_31_0() || (OUTLINED_FUNCTION_136_0(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_47_0();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_0();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_59_0();
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v2;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(_QWORD);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  void (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  OUTLINED_FUNCTION_6_1();
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *v1;
  v7 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v8 = v3;
  v9 = v2;
  if (!OUTLINED_FUNCTION_31_0() || v7 + v5 > *(_QWORD *)(v6 + 24) >> 1)
  {
    OUTLINED_FUNCTION_47_0();
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v5)
      goto LABEL_11;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v6 + 16);
  v11 = (*(_QWORD *)(v6 + 24) >> 1) - v10;
  v9(0);
  if (v11 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_147();
  v8(v0 + v13, v5, v6 + v13 + *(_QWORD *)(v12 + 72) * v10);
  if (!v5)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v6;
    OUTLINED_FUNCTION_8_1();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v15)
  {
    *(_QWORD *)(v6 + 16) = v14;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_34_0();
  if (v4)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!OUTLINED_FUNCTION_31_0() || (OUTLINED_FUNCTION_136_0(), !(v6 ^ v4 | v5)))
  {
    OUTLINED_FUNCTION_47_0();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v7;
  }
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v3)
      goto LABEL_11;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_33_0();
  if (v6 != v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_59_0();
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v3)
  {
LABEL_11:
    OUTLINED_FUNCTION_15_1();
    *v1 = v2;
    OUTLINED_FUNCTION_17_0();
    return;
  }
  OUTLINED_FUNCTION_87_0();
  if (!v4)
  {
    *(_QWORD *)(v2 + 16) = v8;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(_QWORD *)(v3 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v6;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (!v2)
      goto LABEL_11;
    goto LABEL_13;
  }
  if ((*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *v1 = v3;
    return;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFADD__(v7, v2);
  v9 = v7 + v2;
  if (!v8)
  {
    *(_QWORD *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  int64_t v43;
  unint64_t v44;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = a1;
  if (!swift_isUniquelyReferenced_nonNull_native() || (v8 = *(_QWORD *)(v4 + 24) >> 1, v8 < v6))
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v4 = v9;
    v8 = *(_QWORD *)(v9 + 24) >> 1;
  }
  v10 = *(_QWORD *)(v4 + 16);
  v11 = v8 - v10;
  specialized Sequence._copySequenceContents(initializing:)(v41, (_QWORD *)(v4 + 24 * v10 + 32), v8 - v10, v7);
  if (v12 < v3)
    goto LABEL_12;
  if (v12)
  {
    v13 = *(_QWORD *)(v4 + 16);
    v14 = __OFADD__(v13, v12);
    v15 = v13 + v12;
    if (v14)
    {
      __break(1u);
      goto LABEL_48;
    }
    *(_QWORD *)(v4 + 16) = v15;
  }
  if (v12 != v11)
    goto LABEL_10;
LABEL_13:
  v2 = *(_QWORD *)(v4 + 16);
  v7 = v42;
  v39 = v41[1];
  v40 = v41[0];
  v6 = v43;
  v37 = v42;
  if (!v44)
  {
LABEL_48:
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return;
    }
    v22 = (unint64_t)(v7 + 64) >> 6;
    if (v27 >= v22)
      goto LABEL_10;
    v34 = *(_QWORD *)(v39 + 8 * v27);
    if (!v34)
    {
      v35 = v6 + 2;
      if (v6 + 2 >= v22)
        goto LABEL_10;
      v34 = *(_QWORD *)(v39 + 8 * v35);
      if (v34)
      {
LABEL_56:
        v27 = v35;
      }
      else
      {
        if (v6 + 3 >= v22)
          goto LABEL_10;
        v34 = *(_QWORD *)(v39 + 8 * (v6 + 3));
        if (!v34)
          goto LABEL_62;
        v27 = v6 + 3;
      }
    }
LABEL_51:
    v16 = (v34 - 1) & v34;
    v17 = __clz(__rbit64(v34)) + (v27 << 6);
    v6 = v27;
    v7 = v37;
    goto LABEL_15;
  }
  v16 = (v44 - 1) & v44;
  v17 = __clz(__rbit64(v44)) | (v43 << 6);
LABEL_15:
  v18 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 24 * v17);
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  OUTLINED_FUNCTION_107_0();
  swift_bridgeObjectRetain();
  if (!v20)
    goto LABEL_10;
  v38 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    v23 = *(_QWORD *)(v4 + 24) >> 1;
    if (v23 < v2 + 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v33;
      v23 = *(_QWORD *)(v33 + 24) >> 1;
    }
    if (v2 < v23)
      break;
LABEL_45:
    *(_QWORD *)(v4 + 16) = v2;
    if (!v20)
      goto LABEL_10;
  }
  while (1)
  {
    v24 = (_QWORD *)(v4 + 32 + 24 * v2);
    *v24 = v19;
    v24[1] = v20;
    v24[2] = v21;
    ++v2;
    if (!v16)
      break;
    v25 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v26 = v25 | (v6 << 6);
LABEL_32:
    v30 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 24 * v26);
    v19 = *v30;
    v20 = v30[1];
    v21 = v30[2];
    OUTLINED_FUNCTION_107_0();
    swift_bridgeObjectRetain();
    if (v20)
      v31 = v2 < v23;
    else
      v31 = 0;
    if (!v31)
      goto LABEL_45;
  }
  v27 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v27 >= v38)
      goto LABEL_52;
    v28 = *(_QWORD *)(v39 + 8 * v27);
    if (v28)
      goto LABEL_31;
    v29 = v6 + 2;
    if (v6 + 2 >= v38)
      goto LABEL_52;
    v28 = *(_QWORD *)(v39 + 8 * v29);
    if (!v28)
    {
      if (v6 + 3 >= v38)
        goto LABEL_52;
      v28 = *(_QWORD *)(v39 + 8 * (v6 + 3));
      if (v28)
      {
        v27 = v6 + 3;
        goto LABEL_31;
      }
      v29 = v6 + 4;
      if (v6 + 4 >= v38)
        goto LABEL_52;
      v28 = *(_QWORD *)(v39 + 8 * v29);
      if (!v28)
      {
        v27 = v6 + 5;
        if (v6 + 5 >= v38)
          goto LABEL_52;
        v28 = *(_QWORD *)(v39 + 8 * v27);
        if (!v28)
        {
          v32 = v6 + 6;
          while (v32 < v38)
          {
            v28 = *(_QWORD *)(v39 + 8 * v32++);
            if (v28)
            {
              v27 = v32 - 1;
              goto LABEL_31;
            }
          }
LABEL_52:
          *(_QWORD *)(v4 + 16) = v2;
          goto LABEL_10;
        }
        goto LABEL_31;
      }
    }
    v27 = v29;
LABEL_31:
    v16 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v6 = v27;
    goto LABEL_32;
  }
  __break(1u);
LABEL_62:
  v35 = v27 + 3;
  if (v27 + 3 < v22)
  {
    v34 = *(_QWORD *)(v39 + 8 * v35);
    if (v34)
      goto LABEL_56;
    v27 += 4;
    if (v27 >= v22)
      goto LABEL_10;
    v34 = *(_QWORD *)(v39 + 8 * v27);
    if (!v34)
    {
      v36 = v6 + 6;
      while (v36 < v22)
      {
        v34 = *(_QWORD *)(v39 + 8 * v36++);
        if (v34)
        {
          v27 = v36 - 1;
          goto LABEL_51;
        }
      }
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_10:
  outlined consume of Set<Rule>.Iterator._Variant();
  *v1 = v4;
}

void EarleyParser.nextValidTerminals()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_6_1();
  v22 = *(_QWORD *)(OUTLINED_FUNCTION_54_0() - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_3_1();
  v3 = v1[8];
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    OUTLINED_FUNCTION_3_1();
    v3 = v1[7];
    v4 = *(_QWORD *)(v3 + 16);
    if (!v4)
      goto LABEL_19;
  }
  v5 = *(_QWORD *)(v3 + 8 * v4 + 24);
  OUTLINED_FUNCTION_152_0();
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
LABEL_18:
    OUTLINED_FUNCTION_88();
LABEL_19:
    OUTLINED_FUNCTION_8_1();
    return;
  }
  v7 = v1[6];
  v8 = *(_QWORD *)(v7 + 48);
  v9 = *(_QWORD *)(v7 + 24);
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_75();
  v10 = (_QWORD *)(v5 + 48);
  v11 = MEMORY[0x24BEE4AF8];
  v21 = v0;
  while (1)
  {
    v12 = *(v10 - 2);
    if ((v12 & 0x8000000000000000) != 0)
      break;
    if (v12 >= *(_QWORD *)(v8 + 16))
      goto LABEL_22;
    v13 = *(_QWORD *)(v8 + 32 + 16 * v12 + 8);
    if (*v10 < *(_QWORD *)(v13 + 16))
    {
      v14 = v13 + 16 * *v10;
      if (!*(_BYTE *)(v14 + 40))
      {
        v15 = *(_QWORD *)(v14 + 32);
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_23;
        if (v15 >= *(_QWORD *)(v9 + 16))
          goto LABEL_24;
        v16 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        v17 = *(_QWORD *)(v22 + 72);
        outlined init with copy of Grammar(v9 + v16 + v17 * v15, v0, type metadata accessor for TerminalSymbol);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_108_0();
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        v19 = *(_QWORD *)(v11 + 16);
        v18 = *(_QWORD *)(v11 + 24);
        if (v19 >= v18 >> 1)
        {
          OUTLINED_FUNCTION_60_0(v18);
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(_QWORD *)(v11 + 16) = v19 + 1;
        v20 = v11 + v16 + v19 * v17;
        v0 = v21;
        outlined init with take of TerminalSymbol(v21, v20, type metadata accessor for TerminalSymbol);
      }
    }
    v10 += 3;
    if (!--v6)
    {
      OUTLINED_FUNCTION_13();
      OUTLINED_FUNCTION_25_0();
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
}

Swift::tuple_cacheKey_Int_optional_nextValidTerminals_OpaquePointer __swiftcall EarleyParser.nextValidTerminalsWithCacheKey()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Bool v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v45;
  __n128 v46;
  char v47;
  char v48;
  char v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  Swift::Int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Swift::tuple_cacheKey_Int_optional_nextValidTerminals_OpaquePointer result;

  OUTLINED_FUNCTION_6_1();
  v65 = *(_QWORD *)(OUTLINED_FUNCTION_54_0() - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_62_0();
  v4 = v3 - v2;
  OUTLINED_FUNCTION_3_1();
  v5 = v0[8];
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    OUTLINED_FUNCTION_3_1();
    v5 = v0[7];
    v6 = *(_QWORD *)(v5 + 16);
    if (!v6)
      goto LABEL_57;
  }
  v7 = *(_QWORD *)(v5 + 8 * v6 + 24);
  OUTLINED_FUNCTION_58_0();
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
    OUTLINED_FUNCTION_25_0();
LABEL_57:
    v57 = 0;
    v14 = (void *)MEMORY[0x24BEE4AF8];
    goto LABEL_59;
  }
  v9 = (_QWORD *)v0[6];
  v10 = v9[6];
  v11 = v9[3];
  OUTLINED_FUNCTION_38_0();
  v12 = OUTLINED_FUNCTION_80_0();
  v15 = v10 + 32;
  v16 = v7 + 32;
  v17 = 0;
  v18 = 0;
  v19 = MEMORY[0x24BEE4AF8];
  v20 = 24;
  v59 = MEMORY[0x24BEE4AF8];
  v61 = v4;
  v62 = v9;
  v63 = v10 + 32;
  v64 = v7 + 32;
  v60 = v7;
LABEL_5:
  v58 = v17;
  do
  {
    if (v18 >= *(_QWORD *)(v7 + 16))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    v21 = (unint64_t *)(v16 + v18 * v20);
    v22 = *v21;
    if ((*v21 & 0x8000000000000000) != 0)
      goto LABEL_62;
    if (v22 >= *(_QWORD *)(v10 + 16))
      goto LABEL_63;
    v23 = v21[2];
    ++v18;
    v24 = *(_QWORD *)(v15 + 16 * v22 + 8);
    if (v23 < *(_QWORD *)(v24 + 16))
    {
      v25 = v24 + 16 * v23;
      if (*(_BYTE *)(v25 + 40))
      {
        if (*(_BYTE *)(v25 + 40) != 1)
          continue;
        v26 = v9[7];
        v27 = *(_QWORD *)(v26 + 16);
        if (!v27)
          continue;
        if (*(_QWORD *)(v26 + 32) != v22)
        {
          if (v27 == 1)
            continue;
          v40 = 5;
          while (1)
          {
            v41 = v40 - 3;
            if (__OFADD__(v40 - 4, 1))
              goto LABEL_64;
            if (*(_QWORD *)(v26 + 8 * v40) == v22)
              break;
            ++v40;
            if (v41 == v27)
              goto LABEL_38;
          }
        }
        if (v23)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            OUTLINED_FUNCTION_51_0();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v59 = v52;
          }
          v46 = OUTLINED_FUNCTION_104_0();
          if (v47)
          {
            OUTLINED_FUNCTION_135_0(v45);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v46 = OUTLINED_FUNCTION_162(v53);
          }
          OUTLINED_FUNCTION_85_0(v46);
          goto LABEL_50;
        }
      }
      else
      {
        v28 = *(_QWORD *)(v25 + 32);
        if ((v28 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_68:
          __break(1u);
          goto LABEL_69;
        }
        if (v28 >= *(_QWORD *)(v11 + 16))
          goto LABEL_68;
        v29 = v10;
        v30 = v8;
        v31 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
        v32 = v11;
        v33 = v11 + v31;
        v34 = *(_QWORD *)(v65 + 72);
        outlined init with copy of Grammar(v33 + v34 * v28, v4, type metadata accessor for TerminalSymbol);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v36 = *(_QWORD *)(v19 + 16);
        v35 = *(_QWORD *)(v19 + 24);
        v66 = v19;
        if (v36 >= v35 >> 1)
        {
          OUTLINED_FUNCTION_173(v35);
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(_QWORD *)(v66 + 16) = v36 + 1;
        v19 = v66;
        v37 = v66 + v31 + v36 * v34;
        v4 = v61;
        outlined init with take of TerminalSymbol(v61, v37, type metadata accessor for TerminalSymbol);
        v9 = v62;
        v38 = v62[7];
        v39 = *(_QWORD *)(v38 + 16);
        if (!v39)
        {
          v11 = v32;
          v8 = v30;
          v10 = v29;
          v7 = v60;
          v15 = v63;
          v16 = v64;
          v20 = 24;
          continue;
        }
        v11 = v32;
        v8 = v30;
        v10 = v29;
        v7 = v60;
        v15 = v63;
        v16 = v64;
        v20 = 24;
        if (*(_QWORD *)(v38 + 32) != v22)
        {
          if (v39 == 1)
            continue;
          v42 = 5;
          while (1)
          {
            v43 = v42 - 3;
            if (__OFADD__(v42 - 4, 1))
              break;
            if (*(_QWORD *)(v38 + 8 * v42) == v22)
              goto LABEL_24;
            ++v42;
            if (v43 == v39)
              goto LABEL_38;
          }
LABEL_65:
          __break(1u);
LABEL_66:
          v56 = (void *)v19;
          OUTLINED_FUNCTION_82();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_25_0();
          goto LABEL_55;
        }
LABEL_24:
        if (v23)
        {
          v49 = swift_isUniquelyReferenced_nonNull_native();
          if ((v49 & 1) == 0)
          {
            OUTLINED_FUNCTION_51_0();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v59 = v54;
          }
          v51 = OUTLINED_FUNCTION_104_0();
          if (v47)
          {
            OUTLINED_FUNCTION_135_0(v50);
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v51 = OUTLINED_FUNCTION_162(v55);
          }
          OUTLINED_FUNCTION_85_0(v51);
          v19 = v66;
LABEL_50:
          v9 = v62;
          if (!v48)
            goto LABEL_5;
          goto LABEL_66;
        }
      }
    }
LABEL_38:
    ;
  }
  while (v18 != v8);
  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_25_0();
  if ((v58 & 1) != 0)
  {
    v56 = (void *)v19;
LABEL_55:
    v57 = specialized Collection<>.itemCacheKey()(v59);
    OUTLINED_FUNCTION_25_0();
    v13 = 0;
    v14 = v56;
    goto LABEL_60;
  }
  swift_bridgeObjectRelease();
  v14 = (void *)v19;
  v57 = 0;
LABEL_59:
  v13 = 1;
LABEL_60:
  v12 = v57;
LABEL_69:
  result.nextValidTerminals._rawValue = v14;
  result.cacheKey.value = v12;
  result.cacheKey.is_nil = v13;
  return result;
}

Swift::Int specialized Collection<>.itemCacheKey()(uint64_t a1)
{
  uint64_t v2;
  Swift::UInt *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  _BYTE v8[72];
  _BYTE __dst[72];

  Hasher.init()();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (Swift::UInt *)(a1 + 48);
    do
    {
      v4 = *(v3 - 2);
      v5 = *(v3 - 1);
      v6 = *v3;
      v3 += 3;
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      --v2;
    }
    while (v2);
  }
  memcpy(__dst, v8, sizeof(__dst));
  return Hasher.finalize()();
}

uint64_t static EarleyParser.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  OUTLINED_FUNCTION_148_0();
  if (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(*(_QWORD *)(v2 + 48) + 48), *(_QWORD **)(*(_QWORD *)(v3 + 48) + 48))&& (OUTLINED_FUNCTION_3_1(), v4 = *(_QWORD *)(v1 + 56), OUTLINED_FUNCTION_3_1(), (specialized static Array<A>.== infix(_:_:)(v4, *(_QWORD *)(v0 + 56)) & 1) != 0))
  {
    OUTLINED_FUNCTION_3_1();
    v5 = *(_QWORD *)(v1 + 64);
    OUTLINED_FUNCTION_3_1();
    v6 = specialized static Array<A>.== infix(_:_:)(v5, *(_QWORD *)(v0 + 64));
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void EarleyParser.hash(into:)(uint64_t a1)
{
  _QWORD *v1;

  specialized Array<A>.hash(into:)(a1, *(_QWORD *)(v1[6] + 48));
  OUTLINED_FUNCTION_3_1();
  specialized Array<A>.hash(into:)(a1, v1[7]);
  OUTLINED_FUNCTION_3_1();
  specialized Array<A>.hash(into:)(a1, v1[8]);
}

uint64_t EarleyParser.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t EarleyParser.__deallocating_deinit()
{
  EarleyParser.deinit();
  return swift_deallocClassInstance();
}

void EarleyParser.hashValue.getter()
{
  _BYTE v0[72];

  OUTLINED_FUNCTION_97();
  EarleyParser.hash(into:)((uint64_t)v0);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t protocol witness for CharacterGrammarParser.partialMatch.getter in conformance EarleyParser()
{
  return EarleyParser.partialMatch.getter() & 1;
}

uint64_t protocol witness for CharacterGrammarParser.fullMatch.getter in conformance EarleyParser()
{
  return EarleyParser.fullMatch.getter() & 1;
}

uint64_t protocol witness for CharacterGrammarParser.lastConsumedCharacter.getter in conformance EarleyParser()
{
  return EarleyParser.lastConsumedCharacter.getter();
}

void protocol witness for CharacterGrammarParser.characterSetsUsedInGrammar.getter in conformance EarleyParser()
{
  EarleyParser.characterSetsUsedInGrammar.getter();
  OUTLINED_FUNCTION_23();
}

void protocol witness for CharacterGrammarParser.childParser(consumingCharacter:) in conformance EarleyParser(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  EarleyParser.childParser(consumingCharacter:)(a1, a2);
  *a3 = v4;
  OUTLINED_FUNCTION_23();
}

void protocol witness for CharacterGrammarParser.nextValidTerminals() in conformance EarleyParser()
{
  EarleyParser.nextValidTerminals()();
  OUTLINED_FUNCTION_23();
}

unint64_t protocol witness for CharacterGrammarParser.nextValidTerminalsWithCacheKey() in conformance EarleyParser()
{
  return (unint64_t)EarleyParser.nextValidTerminalsWithCacheKey()();
}

void protocol witness for CharacterGrammarParser.optimizeState() in conformance EarleyParser()
{
  EarleyParser.optimizeState()();
  OUTLINED_FUNCTION_23();
}

void protocol witness for CharacterGrammarParser.copy() in conformance EarleyParser(_QWORD *a1@<X8>)
{
  uint64_t v2;

  EarleyParser.copy()();
  *a1 = v2;
}

void protocol witness for Hashable.hashValue.getter in conformance EarleyParser()
{
  EarleyParser.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance EarleyParser(uint64_t a1)
{
  EarleyParser.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EarleyParser()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  EarleyParser.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EarleyParser()
{
  return static EarleyParser.== infix(_:_:)() & 1;
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NonTerminalSymbol, Int>);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v4 = v1;
  v2 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t EarleyParser.debugDescription.getter()
{
  uint64_t v0;
  uint64_t inited;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[EarleyParser.State]>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248C911C0;
  OUTLINED_FUNCTION_3_1();
  *(_QWORD *)(inited + 32) = *(_QWORD *)(v0 + 56);
  v32 = inited + 32;
  OUTLINED_FUNCTION_3_1();
  v34 = v0;
  *(_QWORD *)(inited + 40) = *(_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_165();
  OUTLINED_FUNCTION_58_0();
  v2 = 0;
  v3 = 0;
  v4 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v5 = v2;
    v6 = *(_QWORD *)(*(_QWORD *)(v32 + 8 * v3) + 16);
    result = swift_bridgeObjectRetain();
    v33 = v5;
    if (v6)
      break;
LABEL_17:
    swift_bridgeObjectRelease();
    v2 = 1;
    v3 = 1;
    if ((v33 & 1) != 0)
    {
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      v37[0] = v4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      BidirectionalCollection<>.joined(separator:)();
      OUTLINED_FUNCTION_37_0();
      return OUTLINED_FUNCTION_27();
    }
  }
  v8 = 0;
  v35 = result + 32;
  v36 = result;
  while (v8 < v6)
  {
    v9 = *(_QWORD *)(v35 + 8 * v8);
    OUTLINED_FUNCTION_80_0();
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    strcpy((char *)v37, "==== State: ");
    BYTE5(v37[1]) = 0;
    HIWORD(v37[1]) = -5120;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    OUTLINED_FUNCTION_25_0();
    v11._countAndFlagsBits = 0x3D3D3D3D20;
    v11._object = (void *)0xE500000000000000;
    String.append(_:)(v11);
    v12 = v37[0];
    v13 = v37[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_108_0();
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v29;
    }
    v15 = *(_QWORD *)(v4 + 16);
    v14 = *(_QWORD *)(v4 + 24);
    if (v15 >= v14 >> 1)
    {
      OUTLINED_FUNCTION_60_0(v14);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v30;
    }
    *(_QWORD *)(v4 + 16) = v15 + 1;
    v16 = v4 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v12;
    *(_QWORD *)(v16 + 40) = v13;
    v17 = *(_QWORD *)(v9 + 16);
    if (v17)
    {
      v18 = *(_QWORD *)(v34 + 48);
      v19 = (uint64_t *)(v9 + 48);
      do
      {
        v20 = EarleyParser.Item.getDescription(grammar:)(v18, *(v19 - 2), *(v19 - 1), *v19);
        v22 = v21;
        v23 = *(_QWORD *)(v4 + 16);
        if (v23 >= *(_QWORD *)(v4 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v4 = v25;
        }
        v19 += 3;
        *(_QWORD *)(v4 + 16) = v23 + 1;
        v24 = v4 + 16 * v23;
        *(_QWORD *)(v24 + 32) = v20;
        *(_QWORD *)(v24 + 40) = v22;
        --v17;
      }
      while (v17);
    }
    OUTLINED_FUNCTION_82();
    v27 = *(_QWORD *)(v4 + 16);
    v26 = *(_QWORD *)(v4 + 24);
    if (v27 >= v26 >> 1)
    {
      OUTLINED_FUNCTION_60_0(v26);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v31;
    }
    result = v36;
    ++v8;
    *(_QWORD *)(v4 + 16) = v27 + 1;
    v28 = v4 + 16 * v27;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 40) = 0xE000000000000000;
    v6 = *(_QWORD *)(v36 + 16);
    if (v8 == v6)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EarleyParser()
{
  return EarleyParser.debugDescription.getter();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_179();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_22_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (v3)
  {
    OUTLINED_FUNCTION_29_0(v7, v8, v9, v10, v11);
    v12 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_178();
    v12[2] = v2;
    v12[3] = v13;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_172();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_140_0(v7, v8, (uint64_t)(v12 + 4));
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  void (*v1)(_QWORD, uint64_t, char *, uint64_t);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;

  OUTLINED_FUNCTION_106_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v9 != v10)
    {
      OUTLINED_FUNCTION_22_0();
      if (v9)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (v12)
  {
    OUTLINED_FUNCTION_29_0(v3, v4, v5, v6, v7);
    v13 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_111_0(v13);
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  v14 = (char *)(v12 + 32);
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v0 + 32), v11, v14);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v1(0, v11, v14, v0);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_71_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_118_0(v6);
  }
  if ((v1 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_77_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_86_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_99();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_71_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_22_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v7 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * v8 - 64;
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)OUTLINED_FUNCTION_77_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_86_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
  OUTLINED_FUNCTION_99();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_133_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_22_0();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_29_0(v2, v3, v4, v5, v6);
    v12 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_177();
    v12[2] = v10;
    v12[3] = v13;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_171();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_103_0(v2, v3, (uint64_t)(v12 + 4));
  }
  OUTLINED_FUNCTION_23_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_179();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (v2)
  {
    OUTLINED_FUNCTION_29_0(v6, v7, v8, v9, v10);
    v11 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    v6 = OUTLINED_FUNCTION_61_0(v11);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_172();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_140_0(v6, v7, v2 + 32);
  }
  OUTLINED_FUNCTION_23_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_133_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_22_0();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v7 = v3;
  }
  v10 = *(_QWORD *)(v0 + 16);
  if (v7 <= v10)
    v11 = *(_QWORD *)(v0 + 16);
  else
    v11 = v7;
  if (v11)
  {
    OUTLINED_FUNCTION_29_0(v2, v3, v4, v5, v6);
    v12 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    _swift_stdlib_malloc_size(v12);
    OUTLINED_FUNCTION_178();
    v12[2] = v10;
    v12[3] = v13;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v1 & 1) != 0)
  {
    OUTLINED_FUNCTION_171();
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    OUTLINED_FUNCTION_103_0(v2, v3, (uint64_t)(v12 + 4));
  }
  OUTLINED_FUNCTION_23_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_71_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_55_0(v6);
  }
  if ((v1 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_77_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_86_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_71_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, String)>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_55_0(v6);
  }
  if ((v1 & 1) != 0)
  {
    v7 = (char *)OUTLINED_FUNCTION_77_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_86_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
  OUTLINED_FUNCTION_17_0();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(_QWORD);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;

  OUTLINED_FUNCTION_106_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v9 != v10)
    {
      OUTLINED_FUNCTION_22_0();
      if (v9)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_29_0(v3, v4, v5, v6, v7);
  v13 = *(_QWORD *)(((uint64_t (*)(_QWORD))v1)(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_3();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_18:
  v1(0);
  OUTLINED_FUNCTION_65_0();
  v20 = (unint64_t)v16 + v19;
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + v19, v11, v20, v1);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v20, v0, v1);
  }
  return (uint64_t)v16;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(symbol: String, position: Int, priority: Int)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, a4);
  }
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 3 * v4;
    v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
    goto LABEL_11;
  }
  v5 = a4 + 8 * a1 + 32;
  if (v5 >= a3 + 8 * v4 || v5 + 8 * v4 <= a3)
  {
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_153_0();
    return;
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_67_0();
LABEL_11:
  OUTLINED_FUNCTION_11_1();
  __break(1u);
}

{
  uint64_t v4;
  unint64_t v5;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
    goto LABEL_11;
  }
  v5 = a4 + 16 * a1 + 32;
  if (v5 >= a3 + 16 * v4 || v5 + 16 * v4 <= a3)
  {
    OUTLINED_FUNCTION_119_0();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_153_0();
    return;
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_67_0();
LABEL_11:
  OUTLINED_FUNCTION_11_1();
  __break(1u);
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
    goto LABEL_11;
  }
  v6 = a4 + 8 * a1 + 32;
  if (v6 >= a3 + 8 * v5 || v6 + 8 * v5 <= a3)
  {
    OUTLINED_FUNCTION_29_0(a1, a2, a3, a4, a5);
    OUTLINED_FUNCTION_98_0();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_93_0();
    return;
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_67_0();
LABEL_11:
  OUTLINED_FUNCTION_11_1();
  __break(1u);
}

{
  uint64_t v5;
  unint64_t v6;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
    goto LABEL_11;
  }
  v6 = a4 + 16 * a1 + 32;
  if (v6 >= a3 + 16 * v5 || v6 + 16 * v5 <= a3)
  {
    OUTLINED_FUNCTION_29_0(a1, a2, a3, a4, a5);
    OUTLINED_FUNCTION_98_0();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_93_0();
    return;
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_67_0();
LABEL_11:
  OUTLINED_FUNCTION_11_1();
  __break(1u);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
    goto LABEL_11;
  }
  a5(0);
  OUTLINED_FUNCTION_147();
  v11 = *(_QWORD *)(v10 + 72);
  v12 = a4 + v9 + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_15_1();
    return v14;
  }
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_67_0();
LABEL_11:
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    result = (char *)OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_1_2(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BE3B5D8]);
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_2_1();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_148_0();
    if (v9 < v8 || v5 + *(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a4)(0) - 8) + 72) * v4 <= a3)
    {
      a4(0);
      OUTLINED_FUNCTION_163();
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a3 == v5)
    {
      OUTLINED_FUNCTION_110_0();
    }
    else
    {
      OUTLINED_FUNCTION_163();
      swift_arrayInitWithTakeBackToFront();
    }
  }
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [EarleyParser.State]);
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

{
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_52_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_22_0();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (v4)
  {
    OUTLINED_FUNCTION_29_0(v8, v9, v10, v11, v12);
    v13 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_61_0(v13);
  }
  v14 = OUTLINED_FUNCTION_138_0();
  if ((v3 & 1) != 0)
  {
    v2(v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v14);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_23_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  OUTLINED_FUNCTION_71_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_22_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(symbol: String, position: Int, priority: Int)>);
    v7 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 32);
  }
  v9 = (char *)OUTLINED_FUNCTION_77_0();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v9, v10);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_99();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_52_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_22_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (v5)
  {
    OUTLINED_FUNCTION_29_0(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    _swift_stdlib_malloc_size(v14);
    OUTLINED_FUNCTION_177();
    v14[2] = v4;
    v14[3] = v15;
  }
  v16 = OUTLINED_FUNCTION_138_0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  OUTLINED_FUNCTION_71_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_118_0(v6);
  }
  v7 = (char *)OUTLINED_FUNCTION_77_0();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v7, v8, v9);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_99();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(char *, uint64_t, char *);
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;

  OUTLINED_FUNCTION_106_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v9 != v10)
    {
      OUTLINED_FUNCTION_22_0();
      if (v9)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v8 = v4;
  }
  v11 = *(_QWORD *)(v0 + 16);
  if (v8 <= v11)
    v12 = *(_QWORD *)(v0 + 16);
  else
    v12 = v8;
  if (v12)
  {
    OUTLINED_FUNCTION_29_0(v3, v4, v5, v6, v7);
    v13 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_111_0(v13);
  }
  else
  {
    v12 = MEMORY[0x24BEE4AF8];
  }
  v14 = (char *)(v12 + 32);
  v15 = (char *)(v0 + 32);
  if ((v2 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, v11, v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v11, v14);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;

  OUTLINED_FUNCTION_71_0();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_22_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(tokenID: Int, tokenText: String)>);
    v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_55_0(v6);
  }
  v7 = (char *)OUTLINED_FUNCTION_77_0();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v7, v8);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  size_t v10;
  char *v11;

  OUTLINED_FUNCTION_71_0();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_22_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_28_0();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    v7 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * v8 - 64;
  }
  v9 = (char *)OUTLINED_FUNCTION_77_0();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_99();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_52_0();
  if ((v5 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v6 != v7)
    {
      OUTLINED_FUNCTION_22_0();
      if (v6)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (v4)
  {
    OUTLINED_FUNCTION_29_0(v8, v9, v10, v11, v12);
    v13 = (_QWORD *)OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_61_0(v13);
  }
  v14 = OUTLINED_FUNCTION_138_0();
  if ((v3 & 1) != 0)
  {
    v2(v14);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v14);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_23_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, unint64_t);
  void (*v2)(_QWORD);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_52_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_1();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_22_0();
      if (v10)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_4_1();
    }
  }
  else
  {
    v9 = v5;
  }
  v12 = *(_QWORD *)(v0 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(v0 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_29_0(v4, v5, v6, v7, v8);
  v14 = *(_QWORD *)(((uint64_t (*)(_QWORD))v2)(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1)
    goto LABEL_23;
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_18:
  v2(0);
  OUTLINED_FUNCTION_65_0();
  v21 = (unint64_t)v17 + v20;
  v22 = v0 + v20;
  if ((v3 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v22, v12, v21, v2);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v22, v12, v21);
  }
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_8_1();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NonTerminalSymbol, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_39;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_6:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v27);
    *v32 = v22;
    v32[1] = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27) = v23;
    ++*(_QWORD *)(v7 + 16);
    if (v10)
      goto LABEL_6;
LABEL_7:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_41;
    if (v16 >= v35)
    {
      swift_release();
      v3 = v34;
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_34;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_32;
      v18 = *(_QWORD *)(v36 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_18:
    v10 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v35)
  {
    v18 = *(_QWORD *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_42;
        if (v13 >= v35)
          goto LABEL_32;
        v18 = *(_QWORD *)(v36 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_18;
      }
    }
    v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  v3 = v34;
LABEL_34:
  if ((v37 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v5 + 32);
    if (v33 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    else
      *v17 = -1 << v33;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_39:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (!v4)
    return swift_bridgeObjectRelease_n();
  v5 = 0;
  for (i = (uint64_t *)(a1 + 48); ; i += 3)
  {
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_24;
    }
    v8 = *(i - 1);
    v7 = *i;
    v9 = *(i - 2);
    swift_bridgeObjectRetain();
    if (!v8)
      return swift_bridgeObjectRelease_n();
    v10 = (_QWORD *)*a3;
    specialized __RawDictionaryStorage.find<A>(_:)();
    v13 = v12;
    v14 = v10[2];
    v15 = (v11 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      goto LABEL_21;
    v17 = v11;
    if (v10[3] < v16)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_16;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<NonTerminalSymbol, Int>);
      _NativeDictionary.copy()();
      if ((v17 & 1) != 0)
        goto LABEL_16;
    }
LABEL_12:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v21 = (_QWORD *)(v20[6] + 16 * v13);
    *v21 = v9;
    v21[1] = v8;
    *(_QWORD *)(v20[7] + 8 * v13) = v7;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_22;
    ++v5;
    v20[2] = v24;
    a2 = 1;
    if (v4 == v5)
      return swift_bridgeObjectRelease_n();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v19 & 1))
    goto LABEL_23;
  v13 = v18;
  if ((v17 & 1) == 0)
    goto LABEL_12;
LABEL_16:
  v25 = swift_allocError();
  swift_willThrow();
  MEMORY[0x2495A8D90](v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return MEMORY[0x2495A8D84](v25);
  }
LABEL_24:
  _StringGuts.grow(_:)(30);
  v27._object = (void *)0x8000000248C986E0;
  v27._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v27);
  _print_unlocked<A, B>(_:_:)();
  v28._countAndFlagsBits = 39;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (result < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = result;
  v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v10 > *(_QWORD *)(v6 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    v6 = v13;
  }
  v14 = v6 + 32 + 16 * v8;
  result = swift_arrayDestroy();
  if (!v10)
    goto LABEL_13;
  v15 = *(_QWORD *)(v6 + 16);
  if (__OFSUB__(v15, a2))
    goto LABEL_19;
  result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + 32 + 16 * a2), v15 - a2, (char *)(v14 + 16));
  v16 = *(_QWORD *)(v6 + 16);
  v17 = __OFADD__(v16, v10);
  v18 = v16 + v10;
  if (!v17)
  {
    *(_QWORD *)(v6 + 16) = v18;
LABEL_13:
    *(_QWORD *)v14 = a3;
    *(_QWORD *)(v14 + 8) = a4;
    *v4 = v6;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

void specialized Array<A>.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_6_1();
  v3 = v2;
  v4 = OUTLINED_FUNCTION_79_0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_59();
  v7 = *(_QWORD *)(v3 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    OUTLINED_FUNCTION_65_0();
    v9 = v3 + v8;
    v10 = *(_QWORD *)(v5 + 72);
    v11 = *(void (**)(uint64_t))(v5 + 16);
    while (1)
    {
      v12 = OUTLINED_FUNCTION_160();
      v11(v12);
      OUTLINED_FUNCTION_174(v1, 0);
      v13 = OUTLINED_FUNCTION_159();
      OUTLINED_FUNCTION_89_0(v13, v14, v4);
      if (v15)
        break;
      v16 = OUTLINED_FUNCTION_117_0();
      v17(v16);
      lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0, v4);
      v9 += v10;
      if (!--v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v18 = OUTLINED_FUNCTION_159();
    OUTLINED_FUNCTION_174(v18, v19);
  }
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_79_0();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v4);
  v6 = OUTLINED_FUNCTION_26_0(v5, v35);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v9);
  v49 = (uint64_t)&v35 - v10;
  v50 = OUTLINED_FUNCTION_69_0();
  v41 = *(_QWORD *)(v50 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_48_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v35 - v13;
  v15 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_16_0(v15);
  v37 = v15;
  if (v15)
  {
    v16 = 0;
    v36 = v2 + 32;
    while (1)
    {
      v17 = v36 + 24 * v16;
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_75();
      String.hash(into:)();
      OUTLINED_FUNCTION_25_0();
      OUTLINED_FUNCTION_16_0(*(_QWORD *)(v19 + 16));
      v43 = *(_QWORD *)(v19 + 16);
      if (v43)
        break;
      OUTLINED_FUNCTION_13();
LABEL_21:
      ++v16;
      OUTLINED_FUNCTION_25_0();
      if (v16 == v37)
        goto LABEL_22;
    }
    v39 = v18;
    v40 = v16;
    v42 = v19 + 32;
    v38 = v19;
    OUTLINED_FUNCTION_75();
    v20 = 0;
    v21 = (uint64_t)v48;
LABEL_5:
    v22 = *(_QWORD *)(v42 + 8 * v20);
    OUTLINED_FUNCTION_16_0(*(_QWORD *)(v22 + 16));
    v23 = *(_QWORD *)(v22 + 16);
    if (!v23)
      goto LABEL_18;
    v24 = v41;
    OUTLINED_FUNCTION_65_0();
    v25 = v22;
    v27 = v22 + v26;
    v44 = v25;
    v45 = v20;
    OUTLINED_FUNCTION_88_0();
    v51 = *(_QWORD *)(v24 + 72);
    while (1)
    {
      OUTLINED_FUNCTION_49_0(v27, (uint64_t)v14);
      OUTLINED_FUNCTION_49_0((uint64_t)v14, v0);
      if (OUTLINED_FUNCTION_170() != 1)
        break;
      OUTLINED_FUNCTION_16_0(1uLL);
      OUTLINED_FUNCTION_107_0();
      OUTLINED_FUNCTION_128_0();
      OUTLINED_FUNCTION_40_0();
LABEL_16:
      outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Symbol);
      v27 += v51;
      if (!--v23)
      {
        OUTLINED_FUNCTION_40_0();
        v20 = v45;
LABEL_18:
        if (++v20 == v43)
        {
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_25_0();
          v16 = v40;
          goto LABEL_21;
        }
        goto LABEL_5;
      }
    }
    v28 = v49;
    OUTLINED_FUNCTION_141_0(v0, v49);
    OUTLINED_FUNCTION_16_0(0);
    OUTLINED_FUNCTION_49_0(v28, v21);
    v29 = OUTLINED_FUNCTION_74_0();
    if (v29)
    {
      if (v29 != 1)
      {
        v31 = v46;
        v30 = v47;
        v32 = OUTLINED_FUNCTION_109_0();
        v33(v32);
        OUTLINED_FUNCTION_16_0(2uLL);
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
        dispatch thunk of Hashable.hash(into:)();
        v34 = v6;
        v6 = v21;
        v21 = (uint64_t)v48;
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v30);
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_16_0(1uLL);
      String.hash(into:)();
    }
    else
    {
      OUTLINED_FUNCTION_16_0(0);
      OUTLINED_FUNCTION_128_0();
    }
    swift_bridgeObjectRelease();
LABEL_15:
    outlined destroy of Grammar(v49, type metadata accessor for TerminalSymbol);
    goto LABEL_16;
  }
LABEL_22:
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_79_0();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v4);
  v6 = OUTLINED_FUNCTION_26_0(v5, v30);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v9);
  v38 = (uint64_t)&v30 - v10;
  v39 = OUTLINED_FUNCTION_69_0();
  v30 = *(_QWORD *)(v39 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_48_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - v13;
  v15 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_16_0(v15);
  v32 = v15;
  if (!v15)
    goto LABEL_17;
  v16 = 0;
  v31 = v2 + 32;
  do
  {
    v17 = *(_QWORD *)(v31 + 8 * v16);
    v18 = *(_QWORD *)(v17 + 16);
    OUTLINED_FUNCTION_16_0(v18);
    if (!v18)
      goto LABEL_16;
    v33 = v17;
    v34 = v16;
    v19 = v30;
    OUTLINED_FUNCTION_65_0();
    v21 = v17 + v20;
    OUTLINED_FUNCTION_88_0();
    v40 = *(_QWORD *)(v19 + 72);
    v22 = (uint64_t)v37;
    do
    {
      outlined init with copy of Grammar(v21, (uint64_t)v14, type metadata accessor for Symbol);
      outlined init with copy of Grammar((uint64_t)v14, v0, type metadata accessor for Symbol);
      if (OUTLINED_FUNCTION_170() == 1)
      {
        OUTLINED_FUNCTION_16_0(1uLL);
        OUTLINED_FUNCTION_80_0();
        OUTLINED_FUNCTION_127_0();
        OUTLINED_FUNCTION_40_0();
        goto LABEL_14;
      }
      v23 = v38;
      OUTLINED_FUNCTION_141_0(v0, v38);
      OUTLINED_FUNCTION_16_0(0);
      OUTLINED_FUNCTION_49_0(v23, v22);
      v24 = OUTLINED_FUNCTION_74_0();
      if (v24)
      {
        if (v24 != 1)
        {
          v26 = v35;
          v25 = v36;
          v27 = OUTLINED_FUNCTION_109_0();
          v28(v27);
          OUTLINED_FUNCTION_16_0(2uLL);
          lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
          OUTLINED_FUNCTION_94_0();
          v29 = v6;
          v6 = v22;
          v22 = (uint64_t)v37;
          (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
          goto LABEL_13;
        }
        OUTLINED_FUNCTION_16_0(1uLL);
        OUTLINED_FUNCTION_126_0();
      }
      else
      {
        OUTLINED_FUNCTION_16_0(0);
        OUTLINED_FUNCTION_125_0();
      }
      swift_bridgeObjectRelease();
LABEL_13:
      outlined destroy of Grammar(v38, type metadata accessor for TerminalSymbol);
LABEL_14:
      outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Symbol);
      v21 += v40;
      --v18;
    }
    while (v18);
    OUTLINED_FUNCTION_40_0();
    v16 = v34;
LABEL_16:
    ++v16;
  }
  while (v16 != v32);
LABEL_17:
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::UInt v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_79_0();
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v4);
  v6 = OUTLINED_FUNCTION_26_0(v5, v23);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_35_0();
  v28 = v8;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v9);
  v29 = (uint64_t)&v23 - v10;
  v30 = OUTLINED_FUNCTION_69_0();
  v11 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_48_0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_16_0(v15);
  if (v15)
  {
    OUTLINED_FUNCTION_65_0();
    v17 = v2 + v16;
    v27 = *(_QWORD *)(v11 + 72);
    v23 = v6;
    while (1)
    {
      outlined init with copy of Grammar(v17, (uint64_t)v14, type metadata accessor for Symbol);
      outlined init with copy of Grammar((uint64_t)v14, v0, type metadata accessor for Symbol);
      if (swift_getEnumCaseMultiPayload() != 1)
        break;
      OUTLINED_FUNCTION_16_0(1uLL);
      OUTLINED_FUNCTION_107_0();
      OUTLINED_FUNCTION_125_0();
      OUTLINED_FUNCTION_40_0();
LABEL_12:
      outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Symbol);
      v17 += v27;
      if (!--v15)
        goto LABEL_13;
    }
    v18 = v29;
    OUTLINED_FUNCTION_141_0(v0, v29);
    OUTLINED_FUNCTION_16_0(0);
    OUTLINED_FUNCTION_49_0(v18, v28);
    v19 = OUTLINED_FUNCTION_74_0();
    if (v19)
    {
      if (v19 != 1)
      {
        v20 = v24;
        v21 = v25;
        v22 = v26;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v28, v26);
        OUTLINED_FUNCTION_16_0(2uLL);
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
        OUTLINED_FUNCTION_94_0();
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
        goto LABEL_11;
      }
      OUTLINED_FUNCTION_16_0(1uLL);
      OUTLINED_FUNCTION_126_0();
    }
    else
    {
      OUTLINED_FUNCTION_16_0(0);
      OUTLINED_FUNCTION_127_0();
    }
    swift_bridgeObjectRelease();
LABEL_11:
    outlined destroy of Grammar(v29, type metadata accessor for TerminalSymbol);
    goto LABEL_12;
  }
LABEL_13:
  OUTLINED_FUNCTION_8_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  OUTLINED_FUNCTION_113_0();
  OUTLINED_FUNCTION_32_0(v2, v3);
  if (v0)
  {
    v4 = (Swift::UInt *)(v1 + 64);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      Hasher._combine(_:)(0);
      OUTLINED_FUNCTION_100_0();
      v7 = OUTLINED_FUNCTION_117_0();
      outlined copy of Data._Representation(v7, v8);
      Data.hash(into:)();
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      v9 = OUTLINED_FUNCTION_117_0();
      outlined consume of Data._Representation(v9, v10);
      v4 += 5;
      --v0;
    }
    while (v0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v2 = type metadata accessor for Locale();
  v20 = *(_QWORD *)(v2 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49();
  v19 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_59();
  v6 = type metadata accessor for Prompt.Delimiter(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_62_0();
  v10 = v9 - v8;
  v11 = *(_QWORD *)(v1 + 16);
  OUTLINED_FUNCTION_16_0(v11);
  if (v11)
  {
    OUTLINED_FUNCTION_65_0();
    v13 = v1 + v12;
    v21 = *(_QWORD *)(v7 + 72);
    v18 = v6;
    do
    {
      OUTLINED_FUNCTION_123_0(v13, v10);
      OUTLINED_FUNCTION_120_0();
      OUTLINED_FUNCTION_27();
      String.hash(into:)();
      OUTLINED_FUNCTION_118();
      v14 = OUTLINED_FUNCTION_180();
      outlined init with copy of Locale?();
      v15 = OUTLINED_FUNCTION_159();
      OUTLINED_FUNCTION_89_0(v15, v16, v2);
      if (v17)
      {
        OUTLINED_FUNCTION_114_0(0);
      }
      else
      {
        OUTLINED_FUNCTION_161(v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
        OUTLINED_FUNCTION_114_0(1u);
        lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
        dispatch thunk of Hashable.hash(into:)();
        v6 = v18;
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v2);
      }
      if (*(_QWORD *)(v10 + *(int *)(v14 + 24) + 8))
      {
        OUTLINED_FUNCTION_114_0(1u);
        OUTLINED_FUNCTION_120_0();
        String.hash(into:)();
        OUTLINED_FUNCTION_118();
      }
      else
      {
        OUTLINED_FUNCTION_114_0(0);
      }
      OUTLINED_FUNCTION_16_0(*(_QWORD *)(v10 + *(int *)(v6 + 20)));
      Hasher._combine(_:)(*(_QWORD *)(v10 + *(int *)(v6 + 24)));
      outlined destroy of Grammar(v10, type metadata accessor for Prompt.Delimiter);
      v13 += v21;
      --v11;
    }
    while (v11);
  }
  OUTLINED_FUNCTION_8_1();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_32_0(a1, a2);
  if (v2)
  {
    v4 = v3 + 40;
    do
    {
      OUTLINED_FUNCTION_38_0();
      OUTLINED_FUNCTION_116_0();
      OUTLINED_FUNCTION_37_0();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v2;

  OUTLINED_FUNCTION_32_0(a1, a2);
  if (v2)
    __asm { BR              X9 }
  OUTLINED_FUNCTION_17_0();
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  Swift::UInt v9;
  Swift::UInt v10;
  Swift::UInt v11;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v5 = a2 + 32;
    do
    {
      v6 = *(_QWORD *)(v5 + 8 * v4);
      Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v8 = (Swift::UInt *)(v6 + 48);
        do
        {
          v9 = *(v8 - 2);
          v10 = *(v8 - 1);
          v11 = *v8;
          v8 += 3;
          Hasher._combine(_:)(v9);
          Hasher._combine(_:)(v10);
          Hasher._combine(_:)(v11);
          --v7;
        }
        while (v7);
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt *)(a2 + 48);
    do
    {
      v5 = *(v4 - 2);
      v6 = *(v4 - 1);
      v7 = *v4;
      v4 += 3;
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  Swift::UInt v7;
  uint64_t v8;
  _BYTE *v9;
  Swift::UInt v10;
  Swift::UInt v11;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = 0;
    v5 = a2 + 32;
    while (1)
    {
      v6 = (Swift::UInt *)(v5 + 16 * v4);
      v7 = v6[1];
      Hasher._combine(_:)(*v6);
      Hasher._combine(_:)(*(_QWORD *)(v7 + 16));
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
        break;
LABEL_12:
      if (++v4 == v3)
        return;
    }
    v9 = (_BYTE *)(v7 + 40);
    while (1)
    {
      v10 = *((_QWORD *)v9 - 1);
      if (*v9)
      {
        if (*v9 != 1)
        {
          v10 = 0;
          goto LABEL_11;
        }
        v11 = 2;
      }
      else
      {
        v11 = 1;
      }
      Hasher._combine(_:)(v11);
LABEL_11:
      v9 += 16;
      Hasher._combine(_:)(v10);
      if (!--v8)
        goto LABEL_12;
    }
  }
}

{
  Swift::UInt v3;
  _BYTE *v4;
  Swift::UInt v5;
  Swift::UInt v6;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (_BYTE *)(a2 + 40);
    do
    {
      v5 = *((_QWORD *)v4 - 1);
      if (*v4)
      {
        if (*v4 != 1)
        {
          v5 = 0;
          goto LABEL_9;
        }
        v6 = 2;
      }
      else
      {
        v6 = 1;
      }
      Hasher._combine(_:)(v6);
LABEL_9:
      v4 += 16;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::UInt *v4;
  Swift::UInt v5;

  OUTLINED_FUNCTION_32_0(a1, a2);
  if (v2)
  {
    v4 = (Swift::UInt *)(v3 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_99();
}

uint64_t type metadata accessor for EarleyParser.ParserGrammar()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x2495A8E14](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.State and conformance EarleyParser.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State;
  if (!lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for EarleyParser.State, &type metadata for EarleyParser.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.State and conformance EarleyParser.State);
  }
  return result;
}

void base witness table accessor for Equatable in EarleyParser(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type EarleyParser and conformance EarleyParser, a2, (uint64_t (*)(uint64_t))type metadata accessor for EarleyParser, (uint64_t)&protocol conformance descriptor for EarleyParser);
}

uint64_t type metadata accessor for EarleyParser()
{
  return objc_opt_self();
}

uint64_t method lookup function for EarleyParser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EarleyParser.__allocating_init(grammar:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

void type metadata accessor for EarleyParser.State()
{
  OUTLINED_FUNCTION_18();
}

uint64_t getEnumTagSinglePayload for EarleyParser.Item(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EarleyParser.Item(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for EarleyParser.Item()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for EarleyParser.ParserRule()
{
  OUTLINED_FUNCTION_18();
}

unint64_t lazy protocol witness table accessor for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule;
  if (!lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for EarleyParser.ParserRule, &type metadata for EarleyParser.ParserRule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.ParserRule and conformance EarleyParser.ParserRule);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EarleyParser.Item and conformance EarleyParser.Item()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item;
  if (!lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for EarleyParser.Item, &type metadata for EarleyParser.Item);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.Item and conformance EarleyParser.Item);
  }
  return result;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

void outlined init with copy of Locale?()
{
  uint64_t *v0;
  uint64_t v1;

  OUTLINED_FUNCTION_148_0();
  v1 = __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_81_0(v1);
  OUTLINED_FUNCTION_23();
}

void outlined init with take of TerminalSymbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  OUTLINED_FUNCTION_23();
}

void outlined init with copy of Grammar(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  OUTLINED_FUNCTION_81_0(v3);
  OUTLINED_FUNCTION_23();
}

void outlined destroy of Grammar(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_92_0(v2);
  OUTLINED_FUNCTION_23();
}

void lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;

  if (!*a1)
  {
    v6 = a3(a2);
    atomic_store(MEMORY[0x2495A8E14](a4, v6), a1);
  }
  OUTLINED_FUNCTION_23();
}

void outlined destroy of (Locale?, Locale?)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_92_0(v2);
  OUTLINED_FUNCTION_23();
}

uint64_t outlined consume of Set<Rule>.Iterator._Variant()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in TerminalSymbol.contains(_:)()
{
  return closure #1 in TerminalSymbol.contains(_:)() & 1;
}

uint64_t outlined init with take of (key: TerminalSymbol, value: Int)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: TerminalSymbol, value: Int)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of TerminalSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TerminalSymbol(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EarleyParser.ParserSymbol()
{
  OUTLINED_FUNCTION_18();
}

unint64_t lazy protocol witness table accessor for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol;
  if (!lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for EarleyParser.ParserSymbol, &type metadata for EarleyParser.ParserSymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EarleyParser.ParserSymbol and conformance EarleyParser.ParserSymbol);
  }
  return result;
}

void *OUTLINED_FUNCTION_1_2@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_14_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, int a12, char a13, int a14, char a15, int a16, char a17, int a18, char a19, int a20,char a21,int a22,char a23,int a24,char a25,int a26,char a27,int a28,char a29,int a30,char a31,int a32,char a33)
{
  char v33;
  char v34;
  uint64_t v35;

  *(_BYTE *)(v35 - 112) = v34;
  *(_BYTE *)(v35 - 111) = a11;
  *(_BYTE *)(v35 - 110) = a13;
  *(_BYTE *)(v35 - 109) = a15;
  *(_BYTE *)(v35 - 108) = a27;
  *(_BYTE *)(v35 - 107) = a17;
  *(_BYTE *)(v35 - 106) = a19;
  *(_BYTE *)(v35 - 105) = a21;
  *(_BYTE *)(v35 - 104) = v33;
  *(_BYTE *)(v35 - 103) = a23;
  *(_BYTE *)(v35 - 102) = a25;
  *(_BYTE *)(v35 - 101) = a29;
  *(_BYTE *)(v35 - 100) = a31;
  *(_BYTE *)(v35 - 99) = a33;
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_16_0(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_21_0(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of Data._Representation(a1, v1);
}

void OUTLINED_FUNCTION_24_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(a1, v1);
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_26_0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for TerminalSymbol(0);
}

uint64_t OUTLINED_FUNCTION_29_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_32_0(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_44_0()
{
  unint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 8 * (v0 >> 6) + 64) |= 1 << v0;
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_49_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_54_0()
{
  return type metadata accessor for TerminalSymbol(0);
}

size_t OUTLINED_FUNCTION_55_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

void OUTLINED_FUNCTION_56_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(a1, v1);
}

void OUTLINED_FUNCTION_57_0()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  uint64_t v0;

  return v0 + 32;
}

BOOL OUTLINED_FUNCTION_60_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

size_t OUTLINED_FUNCTION_61_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / v2);
  return result;
}

uint64_t OUTLINED_FUNCTION_69_0()
{
  return type metadata accessor for Symbol(0);
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void OUTLINED_FUNCTION_72_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, a2, v2);
}

void OUTLINED_FUNCTION_73_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(a1, v1);
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  uint64_t v0;

  return v0 + 32;
}

void OUTLINED_FUNCTION_78()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  return type metadata accessor for CharacterSet();
}

uint64_t OUTLINED_FUNCTION_80_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_81_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_82_0(const void *a1, uint64_t a2, size_t a3)
{
  const void *v3;

  return memcmp(a1, v3, a3);
}

void OUTLINED_FUNCTION_85_0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 *v7;

  v6 = *(_QWORD *)(v5 - 216);
  *(_QWORD *)(v6 + 16) = v3;
  v7 = (__n128 *)(v6 + v2 * v1);
  v7[2] = a1;
  v7[3].n128_u64[0] = v4;
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_89_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_92_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_96_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_98_0()
{
  return swift_arrayInitWithCopy();
}

void OUTLINED_FUNCTION_99_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, a2, v2);
}

void OUTLINED_FUNCTION_100_0()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_103_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  return v4(0, v6, a3, v3, v5);
}

__n128 OUTLINED_FUNCTION_104_0()
{
  uint64_t v0;

  return *(__n128 *)(v0 - 208);
}

uint64_t OUTLINED_FUNCTION_107_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 136);
}

size_t OUTLINED_FUNCTION_111_0(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 16);
  return result;
}

uint64_t OUTLINED_FUNCTION_112_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

void OUTLINED_FUNCTION_114_0(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

void OUTLINED_FUNCTION_115_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_116_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_117_0()
{
  uint64_t v0;

  return v0;
}

size_t OUTLINED_FUNCTION_118_0(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_120_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_121_0(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_122_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

void OUTLINED_FUNCTION_123_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, a2, v2);
}

void OUTLINED_FUNCTION_124_0(uint64_t a1)
{
  unint64_t v1;

  v1 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_125_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_126_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_127_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_128_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_132()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_134_0()
{
  char v0;
  char v1;

  return (!v1 & v0) != 0;
}

BOOL OUTLINED_FUNCTION_135_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_138_0()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_140_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v5;

  return v4(0, v5, a3, v3);
}

void OUTLINED_FUNCTION_141_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of TerminalSymbol(a1, a2, v2);
}

void OUTLINED_FUNCTION_142_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with copy of Grammar(a1, v1, v2);
}

void OUTLINED_FUNCTION_143_0()
{
  outlined init with copy of Locale?();
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Array.init(repeating:count:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_152_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_155(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

BOOL OUTLINED_FUNCTION_157()
{
  Swift::Bool v0;
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_159()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_160()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_161@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

__n128 OUTLINED_FUNCTION_162(uint64_t a1)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 208);
  *(_QWORD *)(v1 - 216) = a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_163()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_165()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_167()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_168()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_169()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_170()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_171()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

uint64_t OUTLINED_FUNCTION_172()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0 + 32, v2);
}

BOOL OUTLINED_FUNCTION_173@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_175()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_176()
{
  outlined init with copy of Locale?();
}

uint64_t OUTLINED_FUNCTION_180()
{
  return type metadata accessor for Prompt.SpecialToken(0);
}

void GenerationError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  type metadata accessor for Locale();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for String.LocalizationValue();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for String.LocalizationValue.StringInterpolation();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  type metadata accessor for GenerationError();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_62_0();
  outlined init with copy of GenerationError(v0, v7 - v6);
  v8 = (char *)sub_248C05BFC + 4 * byte_248C911D0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_248C05BFC()
{
  Swift::String *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_2();
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_9_2(v1 + 18, (uint64_t)"Encountered an unknown special token: ");
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*v0);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v2);
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_4_2();
  OUTLINED_FUNCTION_0_4();
  v3 = String.init(localized:table:bundle:locale:comment:)();
  outlined destroy of Prompt.SpecialToken((uint64_t)v0, type metadata accessor for Prompt.SpecialToken);
  return v3;
}

uint64_t type metadata accessor for GenerationError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GenerationError;
  if (!type metadata singleton initialization cache for GenerationError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of GenerationError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Prompt.SpecialToken(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GenerationError and conformance GenerationError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GenerationError and conformance GenerationError;
  if (!lazy protocol witness table cache variable for type GenerationError and conformance GenerationError)
  {
    v1 = type metadata accessor for GenerationError();
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for GenerationError, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      v17 = type metadata accessor for Prompt.SpecialToken(0);
      v18 = *(int *)(v17 + 20);
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
      }
      v27 = *(int *)(v17 + 24);
      v28 = (uint64_t *)((char *)a1 + v27);
      v29 = (uint64_t *)((char *)a2 + v27);
      v30 = v29[1];
      *v28 = *v29;
      v28[1] = v30;
      swift_bridgeObjectRetain();
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(uint64_t *)((char *)a1 + *(int *)(v31 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v31 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v31 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v31 + 64));
      goto LABEL_14;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = type metadata accessor for Prompt.SpecialToken(0);
      v10 = *(int *)(v9 + 20);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      v23 = *(int *)(v9 + 24);
      v24 = (uint64_t *)((char *)a1 + v23);
      v25 = (uint64_t *)((char *)a2 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for GenerationError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    swift_bridgeObjectRelease();
    v3 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
    v4 = type metadata accessor for Locale();
    if (!__swift_getEnumTagSinglePayload(v3, 1, v4))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for GenerationError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    v15 = type metadata accessor for Prompt.SpecialToken(0);
    v16 = *(int *)(v15 + 20);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
    }
    v25 = *(int *)(v15 + 24);
    v26 = (_QWORD *)((char *)a1 + v25);
    v27 = (_QWORD *)((char *)a2 + v25);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
    *(_QWORD *)((char *)a1 + *(int *)(v29 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v29 + 48));
    *(_QWORD *)((char *)a1 + *(int *)(v29 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v29 + 64));
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = type metadata accessor for Prompt.SpecialToken(0);
    v9 = *(int *)(v8 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    v21 = *(int *)(v8 + 24);
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_QWORD *assignWithCopy for GenerationError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    outlined destroy of Prompt.SpecialToken((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for GenerationError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v13 = type metadata accessor for Prompt.SpecialToken(0);
      v14 = *(int *)(v13 + 20);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      }
      v22 = *(int *)(v13 + 24);
      v23 = (_QWORD *)((char *)a1 + v22);
      v24 = (_QWORD *)((char *)a2 + v22);
      *v23 = *v24;
      v23[1] = v24[1];
      swift_bridgeObjectRetain();
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(_QWORD *)((char *)a1 + *(int *)(v25 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v25 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v25 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v25 + 64));
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v7 = type metadata accessor for Prompt.SpecialToken(0);
      v8 = *(int *)(v7 + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      }
      v19 = *(int *)(v7 + 24);
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      *v20 = *v21;
      v20[1] = v21[1];
      swift_bridgeObjectRetain();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t outlined destroy of Prompt.SpecialToken(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *initializeWithTake for GenerationError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v13 = type metadata accessor for Prompt.SpecialToken(0);
    v14 = *(int *)(v13 + 20);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
    *(_QWORD *)((char *)a1 + *(int *)(v19 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v19 + 48));
    *(_QWORD *)((char *)a1 + *(int *)(v19 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v19 + 64));
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    v7 = type metadata accessor for Prompt.SpecialToken(0);
    v8 = *(int *)(v7 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_12:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for GenerationError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    outlined destroy of Prompt.SpecialToken((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for GenerationError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v13 = type metadata accessor for Prompt.SpecialToken(0);
      v14 = *(int *)(v13 + 20);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for Locale();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
      *(_QWORD *)((char *)a1 + *(int *)(v19 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v19 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v19 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v19 + 64));
      goto LABEL_13;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      v7 = type metadata accessor for Prompt.SpecialToken(0);
      v8 = *(int *)(v7 + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Locale();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for GenerationError()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for GenerationError()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = type metadata accessor for Prompt.SpecialToken(319);
  if (v1 <= 0x3F)
  {
    v2[4] = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return static Locale.current.getter();
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of Prompt.SpecialToken(v1, v0);
}

void OUTLINED_FUNCTION_9_2(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

uint64_t destroy for GenerationOverrides(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GenerationOverrides(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v5;
  swift_release();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenerationOverrides(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenerationOverrides(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenerationOverrides()
{
  return &type metadata for GenerationOverrides;
}

uint64_t static GenerationOverrides.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void (*v3)(uint64_t *__return_ptr, id);
  int v4;
  void (*v5)(uint64_t *__return_ptr, id);
  id v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  unsigned int v12;
  uint64_t v14;
  unsigned __int8 v15;

  v2 = *(void **)a2;
  v3 = *(void (**)(uint64_t *__return_ptr, id))(a2 + 24);
  v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 1)
  {
    v5 = *(void (**)(uint64_t *__return_ptr, id))(a1 + 24);
    v6 = *(id *)a1;
    swift_bridgeObjectRetain();
    swift_retain();
    v5(&v14, v6);
    swift_release();
    swift_bridgeObjectRelease();

    v7 = v14;
    v8 = v15;
    if (!v4)
    {
LABEL_3:
      v9 = 0;
      v10 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v8 = 1;
    if (!*(_BYTE *)(a2 + 40))
      goto LABEL_3;
  }
  v11 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  v3(&v14, v11);
  swift_release();
  swift_bridgeObjectRelease();

  v9 = v14;
  v10 = v15;
LABEL_6:
  v12 = (v7 == v9) & ~v10;
  if ((v8 & 1) != 0)
    return v10;
  else
    return v12;
}

uint64_t static CharacterSet.swiftIdentifierHead.getter()
{
  Swift::String v0;
  Swift::String v1;

  CharacterSet.init(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  v0._object = (void *)0x8000000248C988E0;
  v0._countAndFlagsBits = 0x100000000000001FLL;
  CharacterSet.insert(charactersIn:)(v0);
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  v1._countAndFlagsBits = 9732578;
  v1._object = (void *)0xA300000000000000;
  CharacterSet.insert(charactersIn:)(v1);
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  CharacterSet.insert(charactersIn:)();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_0_5();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  OUTLINED_FUNCTION_0_5();
  CharacterSet.insert(charactersIn:)();
  return OUTLINED_FUNCTION_0_5();
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return CharacterSet.insert(charactersIn:)();
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySSGSay19TokenGenerationCore7GrammarVGG_AI6ChoiceVs5NeverOTg506_sSS19fg5Core7i4VAA6j17VIggnr_SS_ACtAEs5k157OIegnrzr_TR04_s19ab5Core7d104V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6E30VG_SDyAjCGztFZAaKVSS_R16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  Swift::String v50;
  Swift::String v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Grammar));
  v4 = MEMORY[0x24BDAC7A8](v68);
  v67 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v61 = (uint64_t *)((char *)&v59 - v7);
  MEMORY[0x24BDAC7A8](v6);
  v60 = (uint64_t *)((char *)&v59 - v8);
  v9 = *(_QWORD *)(a1 + 16);
  v70 = *(_QWORD *)(a2 + 16);
  v71 = v9;
  if (v70 >= v9)
    v10 = v9;
  else
    v10 = v70;
  v76 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v62 = a2;
  v63 = a1;
  if (v10)
  {
    v66 = *(_QWORD *)(type metadata accessor for Grammar(0) - 8);
    v65 = a2 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (void **)(a1 + 40);
    v64 = xmmword_248C91300;
    v69 = v10;
    v13 = v67;
    while (v71 != v11)
    {
      if (v70 == v11)
        goto LABEL_27;
      v14 = (uint64_t)*(v12 - 1);
      v15 = *v12;
      v73 = (uint64_t)v12;
      *(_QWORD *)&v72 = v14;
      v16 = v65 + *(_QWORD *)(v66 + 72) * v11;
      v17 = (uint64_t)v13 + *(int *)(v68 + 48);
      *v13 = v14;
      v13[1] = v15;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v16, v17, type metadata accessor for Grammar);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      v18 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
      v19 = *(_QWORD *)(v18 + 72);
      v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v64;
      v22 = (uint64_t *)(v21 + v20);
      v74 = 0;
      v75 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v74 = 0x3A2265707974227BLL;
      v75 = 0xEA00000000002220;
      v23._countAndFlagsBits = v72;
      v23._object = v15;
      String.append(_:)(v23);
      v24._countAndFlagsBits = 0x756C617622202C22;
      v24._object = (void *)0xEC000000203A2265;
      String.append(_:)(v24);
      v25 = v75;
      *v22 = v74;
      v22[1] = v25;
      type metadata accessor for TerminalSymbol(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v26 = (_QWORD *)(v21 + v20 + v19);
      v27 = *(_QWORD *)(v17 + 8);
      v28 = *(_QWORD *)(v17 + 16);
      *v26 = v27;
      v26[1] = v28;
      swift_storeEnumTagMultiPayload();
      v29 = (_QWORD *)(v21 + v20 + 2 * v19);
      *v29 = 125;
      v29[1] = 0xE100000000000000;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      outlined destroy of (Locale?, Locale?)((uint64_t)v13, &demangling cache variable for type metadata for (String, Grammar));
      v30 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v30 = v76;
      }
      v10 = v69;
      v31 = *(_QWORD *)(v30 + 16);
      if (v31 >= *(_QWORD *)(v30 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v30 = v76;
      }
      ++v11;
      *(_QWORD *)(v30 + 16) = v31 + 1;
      *(_QWORD *)(v30 + 8 * v31 + 32) = v21;
      v12 = (void **)(v73 + 16);
      if (v10 == v11)
        goto LABEL_15;
    }
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_15:
    if (v71 <= v70)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v32 = v62;
    v33 = (uint64_t *)(v63 + 16 * v10 + 40);
    v72 = xmmword_248C91300;
    while (v10 < v71)
    {
      if (v70 == v10)
        goto LABEL_25;
      if (v10 >= v70)
        goto LABEL_29;
      v35 = *(v33 - 1);
      v34 = *v33;
      v36 = *(_QWORD *)(type metadata accessor for Grammar(0) - 8);
      v37 = v32 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v38 = *(_QWORD *)(v36 + 72);
      v69 = v10;
      v39 = v68;
      v40 = (uint64_t)v61;
      v41 = (uint64_t)v61 + *(int *)(v68 + 48);
      *v61 = v35;
      *(_QWORD *)(v40 + 8) = v34;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v37 + v38 * v10, v41, type metadata accessor for Grammar);
      v42 = v60;
      outlined init with take of (String, Grammar)(v40, (uint64_t)v60);
      v43 = (void *)v42[1];
      v73 = *v42;
      v44 = (char *)v42 + *(int *)(v39 + 48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      v45 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
      v46 = *(_QWORD *)(v45 + 72);
      v47 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v72;
      v49 = (uint64_t *)(v48 + v47);
      v74 = 0;
      v75 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v74 = 0x3A2265707974227BLL;
      v75 = 0xEA00000000002220;
      v50._countAndFlagsBits = v73;
      v50._object = v43;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 0x756C617622202C22;
      v51._object = (void *)0xEC000000203A2265;
      String.append(_:)(v51);
      v52 = v75;
      *v49 = v74;
      v49[1] = v52;
      type metadata accessor for TerminalSymbol(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v53 = (uint64_t *)((char *)v49 + v46);
      v54 = *((_QWORD *)v44 + 2);
      *v53 = *((_QWORD *)v44 + 1);
      v53[1] = v54;
      swift_storeEnumTagMultiPayload();
      v55 = (uint64_t *)((char *)v49 + 2 * v46);
      *v55 = 125;
      v55[1] = 0xE100000000000000;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      outlined destroy of (Locale?, Locale?)((uint64_t)v42, &demangling cache variable for type metadata for (String, Grammar));
      v56 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v56 = v76;
      }
      v57 = *(_QWORD *)(v56 + 16);
      v32 = v62;
      v58 = v69;
      if (v57 >= *(_QWORD *)(v56 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v56 = v76;
      }
      v10 = v58 + 1;
      *(_QWORD *)(v56 + 16) = v57 + 1;
      *(_QWORD *)(v56 + 8 * v57 + 32) = v48;
      v33 += 2;
      if (v71 == v10)
        goto LABEL_25;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a2;
  v3 = result;
  v21 = *(_QWORD *)(result + 16);
  if (v21)
  {
    v4 = 0;
    v18 = a2 + 40;
    v19 = result + 32;
    v20 = MEMORY[0x24BEE4AF8];
    v17 = result;
    do
    {
      v5 = v4;
      while (1)
      {
        if (v5 >= *(_QWORD *)(v3 + 16))
        {
          __break(1u);
          return result;
        }
        v6 = v5 + 1;
        v7 = *(_QWORD *)(v2 + 16);
        if (v7)
          break;
LABEL_10:
        v5 = v6;
        if (v6 == v21)
          goto LABEL_19;
      }
      v22 = v5 + 1;
      v8 = (uint64_t *)(v19 + 16 * v5);
      v9 = *v8;
      v10 = v8[1];
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v11 = v2;
      swift_bridgeObjectRetain();
      v12 = v18;
      while ((BidirectionalCollection<>.starts<A>(with:)() & 1) == 0)
      {
        v12 += 16;
        if (!--v7)
        {
          swift_bridgeObjectRelease();
          v2 = v11;
          result = swift_bridgeObjectRelease();
          v3 = v17;
          v6 = v22;
          goto LABEL_10;
        }
      }
      v2 = v11;
      swift_bridgeObjectRelease();
      v13 = v20;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v13 = v20;
      }
      v15 = *(_QWORD *)(v13 + 16);
      v14 = *(_QWORD *)(v13 + 24);
      if (v15 >= v14 >> 1)
      {
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v13 = v20;
      }
      *(_QWORD *)(v13 + 16) = v15 + 1;
      v20 = v13;
      v16 = v13 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v9;
      *(_QWORD *)(v16 + 40) = v10;
      v4 = v22;
      v3 = v17;
    }
    while (v22 != v21);
  }
  else
  {
    v20 = MEMORY[0x24BEE4AF8];
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_SSs5NeverOTg509_s19Tokeng76Core7GrammarV5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I70VG_SDyAjCGztFZSSALcfu_32cce7deb5d5afe638d5ea480a0fbc1d0cALSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for GenerationSchema.Choice() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = GenerationSchema.Choice.identifier.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_05TokenG4Core7GrammarVs5NeverOTg504_s19jg5Core7l64V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I22VG_SDyAjCGztFZAcLXEfU_ANXMtSDyAhNGTf1cn_n(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  Swift::Int v35;
  unint64_t v36;
  char v37;
  Swift::Bool v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;

  v50 = a2;
  v4 = type metadata accessor for GenerationSchema();
  v57 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v58 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v48 - v7;
  v9 = type metadata accessor for Grammar(0);
  v55 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v52 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v49 = (uint64_t)&v48 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v56 = (uint64_t)&v48 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = MEMORY[0x24BEE4AF8];
  if (!v15)
    return v16;
  v48 = v2;
  v60 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v17 = *(_QWORD *)(type metadata accessor for GenerationSchema.Choice() - 8);
  v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v51 = *(_QWORD *)(v17 + 72);
  v19 = v50;
  while (1)
  {
    v53 = v18;
    v54 = v15;
    GenerationSchema.Choice.schema.getter();
    v20 = *v19;
    if (*(_QWORD *)(*v19 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)(v55 + 72);
        v24 = *(_QWORD *)(v20 + 56) + v23 * v21;
        v25 = v49;
        _s19TokenGenerationCore7GrammarVWOcTm_0(v24, v49, type metadata accessor for Grammar);
        outlined init with take of Grammar(v25, v56, type metadata accessor for Grammar);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v8, v4);
        goto LABEL_15;
      }
    }
    v26 = v56;
    closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(v8, 1, v19);
    v27 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
    v28 = v4;
    v27(v58, v8, v4);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v26, v52, type metadata accessor for Grammar);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v59 = (_QWORD *)*v19;
    v30 = v59;
    *v19 = 0x8000000000000000;
    specialized __RawDictionaryStorage.find<A>(_:)();
    v33 = v30[2];
    v34 = (v32 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    v37 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GenerationSchema, Grammar>);
    v38 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v35);
    v4 = v28;
    if (v38)
    {
      specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v37 & 1) != (v40 & 1))
        goto LABEL_23;
      v36 = v39;
    }
    v41 = v59;
    if ((v37 & 1) != 0)
    {
      v23 = *(_QWORD *)(v55 + 72);
      outlined assign with take of Symbol(v52, v59[7] + v23 * v36, type metadata accessor for Grammar);
    }
    else
    {
      v59[(v36 >> 6) + 8] |= 1 << v36;
      v27((char *)(v41[6] + *(_QWORD *)(v57 + 72) * v36), v58, v28);
      v23 = *(_QWORD *)(v55 + 72);
      outlined init with take of Grammar(v52, v41[7] + v23 * v36, type metadata accessor for Grammar);
      v42 = v41[2];
      v43 = __OFADD__(v42, 1);
      v44 = v42 + 1;
      if (v43)
        goto LABEL_22;
      v41[2] = v44;
      v41 = v59;
    }
    v19 = v50;
    *v50 = v41;
    swift_bridgeObjectRelease();
    v45 = *(void (**)(char *, uint64_t))(v57 + 8);
    v45(v58, v28);
    v45(v8, v28);
LABEL_15:
    v16 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v16 = v60;
    }
    v46 = *(_QWORD *)(v16 + 16);
    if (v46 >= *(_QWORD *)(v16 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v16 = v60;
    }
    *(_QWORD *)(v16 + 16) = v46 + 1;
    outlined init with take of Grammar(v56, v16 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80)) + v23 * v46, type metadata accessor for Grammar);
    v18 = v53 + v51;
    v15 = v54 - 1;
    if (v54 == 1)
      return v16;
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore7GrammarVG_SSs5NeverOTg504_s19de5Core7G182V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6ChoiceVG_SDyAjCGztFZSSACcfu1_33_9505c99dfe7c0469d75fe5206cfe3972ACSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = *(_QWORD *)(type metadata accessor for Grammar(0) - 8);
    v5 = *(_QWORD *)(v4 + 72);
    v6 = (uint64_t *)(((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                   + a1
                   + 16);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 40) = v7;
      v6 = (uint64_t *)((char *)v6 + v5);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay29GenerativeFunctionsFoundation16GenerationSchemaO5FieldVGG_05TokenG4Core6ChoiceVs5NeverOTg504_s19jg81Core7GrammarV10jsonObject33_DD88DD49DE63EB9CBD61CBF820251C8ALL6fields4withACSay29de13Foundation0B6h2O5i17VG_SDyAjCGztFZAA6L8VAMXEfU_SDyAjM6SymbolOGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v2;
  v28 = a2;
  v5 = type metadata accessor for Symbol(0);
  v26 = *(_QWORD *)(v5 - 8);
  v27 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (_QWORD *)((char *)v23 - v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v36 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v10 = v36;
    v11 = (uint64_t *)(a1 + 32);
    v23[1] = type metadata accessor for TerminalSymbol(0);
    v34 = xmmword_248C911B0;
    v12 = v25;
    do
    {
      v31 = v10;
      v32 = v9;
      v30 = *v11;
      v13 = (uint64_t)v24;
      *v24 = 123;
      *(_QWORD *)(v13 + 8) = 0xE100000000000000;
      swift_storeEnumTagMultiPayload();
      v14 = swift_storeEnumTagMultiPayload();
      MEMORY[0x24BDAC7A8](v14);
      v23[-2] = v28;
      v15 = swift_bridgeObjectRetain();
      v29 = specialized Sequence.flatMap<A>(_:)(v15, (uint64_t (*)(_QWORD, char *))partial apply for closure #1 in closure #1 in static Grammar.jsonObject(fields:with:));
      v33 = v3;
      *v12 = 125;
      v12[1] = 0xE100000000000000;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      v16 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = v34;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v13, v17 + v16, type metadata accessor for Symbol);
      v35 = v17;
      specialized Array.append<A>(contentsOf:)();
      v18 = v35;
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = v34;
      _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v12, v19 + v16, type metadata accessor for Symbol);
      v35 = v18;
      specialized Array.append<A>(contentsOf:)();
      v10 = v31;
      v20 = v35;
      outlined destroy of Grammar((uint64_t)v12, type metadata accessor for Symbol);
      outlined destroy of Grammar(v13, type metadata accessor for Symbol);
      swift_bridgeObjectRelease();
      v36 = v10;
      v21 = *(_QWORD *)(v10 + 16);
      if (v21 >= *(_QWORD *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v10 = v36;
      }
      *(_QWORD *)(v10 + 16) = v21 + 1;
      *(_QWORD *)(v10 + 8 * v21 + 32) = v20;
      ++v11;
      v3 = v33;
      v9 = v32 - 1;
    }
    while (v32 != 1);
  }
  return v10;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.Field?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenerationSchema.Field();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v6);
  specialized Array._customRemoveLast()((uint64_t)v5);
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
    outlined destroy of (Locale?, Locale?)((uint64_t)v5, &demangling cache variable for type metadata for GenerationSchema.Field?);
    specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v1 + 16) - 1, a1);
  }
  else
  {
    v11 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v11(v9, v5, v6);
    v11((char *)a1, v9, v6);
  }
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v6);
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Array.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    OUTLINED_FUNCTION_17_1();
    v11 = MEMORY[0x24BEE4AF8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    v10 = a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    OUTLINED_FUNCTION_17_1();
    v10 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  OUTLINED_FUNCTION_17_1();
  return v10;
}

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_13_1();
  _s19TokenGenerationCore7GrammarVWOcTm_0(a1, v1, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_19_1();
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)();
  outlined destroy of Grammar(a1, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_9_3(v4, v5);
  OUTLINED_FUNCTION_17_0();
}

void GuidedGenerationConstraints.init(schema:tokenizer:stopTokenIDs:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;

  v7 = OUTLINED_FUNCTION_15_2();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (_QWORD *)((char *)&v19 - v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a1, v7);
  Grammar.init(schema:)(v3, v14);
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v14, (uint64_t)v12, type metadata accessor for Grammar);
  v21 = OUTLINED_FUNCTION_19_1();
  v22 = &protocol witness table for TokenizerRunner;
  v20 = a2;
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)();
  outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Grammar);
  v15 = v23;
  v16 = v25;
  v17 = v26;
  v18 = v27;
  LOBYTE(v12) = v28;
  v19 = v24;
  OUTLINED_FUNCTION_16_1(a1, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  *(_QWORD *)a3 = v15;
  *(_OWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 24) = v16;
  *(_BYTE *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 40) = v18;
  *(_BYTE *)(a3 + 48) = (_BYTE)v12;
  OUTLINED_FUNCTION_8_1();
}

void Grammar.init(schema:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for GenerationSchema();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  v8 = v7 - v6;
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_62_0();
  v12 = (_QWORD *)(v11 - v10);
  v15 = MEMORY[0x24BEE4B00];
  Schema.type.getter();
  static Grammar.grammar(for:with:wrapStringsInQuotes:)(v8, &v15, 0, v12);
  OUTLINED_FUNCTION_16_1(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  v13 = (_QWORD *)swift_bridgeObjectRetain();
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v13, 1, (uint64_t)&outlined read-only object #0 of Grammar.init(schema:), a2);
  v14 = OUTLINED_FUNCTION_15_2();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  outlined destroy of Grammar((uint64_t)v12, type metadata accessor for Grammar);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_17_0();
}

void GuidedGenerationConstraints.init(schema:tokenizer:stopTokenIDs:numParallelTasks:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE v13[40];
  uint64_t v14;
  __n128 v15;

  v4 = OUTLINED_FUNCTION_15_2();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  v8 = v7 - v6;
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_62_0();
  v12 = (_QWORD *)(v11 - v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  Grammar.init(schema:)(v8, v12);
  outlined init with copy of GuidedGenerationTokenizer(a2, (uint64_t)v13);
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)();
  __swift_destroy_boxed_opaque_existential_1(a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  OUTLINED_FUNCTION_9_3(v14, v15);
  OUTLINED_FUNCTION_8_1();
}

uint64_t GuidedGenerationConstraints.init(schemaString:tokenizerPath:stopTokenIDs:numParallelTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v8 + 152) = a8;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  OUTLINED_FUNCTION_15_2();
  *(_QWORD *)(v8 + 72) = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_1();
  *(_QWORD *)(v8 + 80) = OUTLINED_FUNCTION_8_3();
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  v9 = type metadata accessor for GenerationSchema();
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 104) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 112) = OUTLINED_FUNCTION_8_3();
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  v10 = type metadata accessor for String.Encoding();
  *(_QWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 136) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 144) = OUTLINED_FUNCTION_14_2();
  return swift_task_switch();
}

uint64_t GuidedGenerationConstraints.init(schemaString:tokenizerPath:stopTokenIDs:numParallelTasks:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v4 = v3;
  swift_bridgeObjectRelease();
  result = OUTLINED_FUNCTION_16_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (v4 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v6 = *(_QWORD **)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
    Schema.init(type:)();
    Grammar.init(schema:)(v7, v6);
    OUTLINED_FUNCTION_19_1();
    swift_allocObject();
    TokenizerRunner.init(tokenizerPath:)();
    v12 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 16);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v9, *(_QWORD *)(v0 + 80), type metadata accessor for Grammar);
    swift_retain();
    GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)();
    OUTLINED_FUNCTION_18_1();
    OUTLINED_FUNCTION_5_3();
    swift_release();
    outlined destroy of Grammar(v9, type metadata accessor for Grammar);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    *(_QWORD *)v8 = v13;
    *(_OWORD *)(v8 + 8) = v14;
    *(_QWORD *)(v8 + 24) = v15;
    *(_BYTE *)(v8 + 32) = v16;
    *(_QWORD *)(v8 + 40) = v17;
    *(_BYTE *)(v8 + 48) = v18;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

void static Grammar.grammar(for:with:wrapStringsInQuotes:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  _BYTE v21[4];
  int v22;
  _QWORD *v23;

  v22 = a3;
  v23 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for GenerationSchema();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Grammar(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v19 & 1) != 0))
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v14 + 72) * v18, (uint64_t)v16, type metadata accessor for Grammar);
    outlined init with take of Grammar((uint64_t)v16, (uint64_t)v23, type metadata accessor for Grammar);
  }
  else
  {
    v20 = v23;
    closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, v22 & 1, a2, v23);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v20, (uint64_t)v8, type metadata accessor for Grammar);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v13);
    specialized Dictionary.subscript.setter((uint64_t)v8);
  }
}

uint64_t outlined init with copy of GuidedGenerationTokenizer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema;
  if (!lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema)
  {
    v1 = type metadata accessor for GenerationSchema();
    result = MEMORY[0x2495A8E14](MEMORY[0x24BE3B670], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema;
  if (!lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema)
  {
    v1 = type metadata accessor for GenerationSchema();
    result = MEMORY[0x2495A8E14](MEMORY[0x24BE3B660], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

void closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int EnumTagSinglePayload;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  _BYTE v40[4];
  int v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;

  v42 = a3;
  v43 = a4;
  v41 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)&v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (uint64_t *)&v40[-v10];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v40[-v12];
  v14 = type metadata accessor for GenerationSchema();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = &v40[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = &v40[-v20];
  MEMORY[0x24BDAC7A8](v19);
  v23 = &v40[-v22];
  v24 = *(_QWORD **)(v15 + 16);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v24)(&v40[-v22], a1, v14);
  v25 = (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 88))(v23, v14);
  if (v25 == *MEMORY[0x24BE3B628])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    v14 = *(_QWORD *)v23;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (enumerator: [String]?, constraints: GenerationSchema.StringConstraint?));
    v27 = (uint64_t *)swift_projectBox();
    v28 = *v27;
    outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v27 + *(int *)(v26 + 48), (uint64_t)v13);
    outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v13, (uint64_t)v11);
    v24 = (_QWORD *)type metadata accessor for GenerationSchema.StringConstraint();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, (uint64_t)v24);
    v30 = (_DWORD *)MEMORY[0x24BE3B598];
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of (Locale?, Locale?)((uint64_t)v11, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
      if (!v28)
        goto LABEL_21;
    }
    else
    {
      a1 = *(v24 - 1);
      if ((*(unsigned int (**)(uint64_t *, _QWORD *))(a1 + 88))(v11, v24) == *v30)
      {
        (*(void (**)(uint64_t *, _QWORD *))(a1 + 96))(v11, v24);
        a1 = *v11;
        v31 = v11[1];
        if (v28)
        {
          v32 = *(_QWORD *)(v31 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!v32)
          {
            v33 = specialized _ArrayProtocol.filter(_:)(v28, a1);
            static Grammar.enumerator(cases:wrapInQuotes:)(v33, v41 & 1, (uint64_t)v43);
LABEL_26:
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
          __break(1u);
          goto LABEL_38;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_21:
        outlined init with copy of GenerationSchema.StringConstraint?((uint64_t)v13, (uint64_t)v8);
        if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v24) == 1)
        {
          outlined destroy of (Locale?, Locale?)((uint64_t)v8, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
LABEL_28:
          static Grammar.string(wrapInQuotes:)(v41 & 1, (uint64_t)v43);
          goto LABEL_29;
        }
        v36 = *(v24 - 1);
        if ((*(unsigned int (**)(uint64_t *, _QWORD *))(v36 + 88))(v8, v24) != *v30)
        {
          (*(void (**)(uint64_t *, _QWORD *))(v36 + 8))(v8, v24);
          goto LABEL_28;
        }
        (*(void (**)(uint64_t *, _QWORD *))(v36 + 96))(v8, v24);
        v37 = *v8;
        v38 = *(_QWORD *)(v8[1] + 16);
        swift_bridgeObjectRelease();
        if (!v38)
        {
          static Grammar.startsWith(prefixes:)(v37, (uint64_t)v43);
          goto LABEL_26;
        }
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      (*(void (**)(uint64_t *, _QWORD *))(a1 + 8))(v11, v24);
      if (!v28)
        goto LABEL_21;
    }
    static Grammar.enumerator(cases:wrapInQuotes:)(v28, v41 & 1, (uint64_t)v43);
LABEL_29:
    outlined destroy of (Locale?, Locale?)((uint64_t)v13, &demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
    goto LABEL_30;
  }
  if (v25 == *MEMORY[0x24BE3B620])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    static Grammar.jsonObject(fields:with:)(*(_QWORD *)(*(_QWORD *)v23 + 16), v42, (uint64_t)v43);
LABEL_30:
    swift_release();
    return;
  }
  if (v25 == *MEMORY[0x24BE3B5F8])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    v34 = swift_projectBox();
    ((void (*)(_BYTE *, uint64_t, uint64_t))v24)(v21, v34, v14);
    static Grammar.array(schema:with:)((uint64_t)v21, (uint64_t)v42, (uint64_t)v43);
LABEL_17:
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v21, v14);
    goto LABEL_30;
  }
  if (v25 == *MEMORY[0x24BE3B590])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    v35 = swift_projectBox();
    ((void (*)(_BYTE *, uint64_t, uint64_t))v24)(v21, v35, v14);
    static Grammar.dictionary(schema:with:)((uint64_t)v21, (uint64_t)v42, (uint64_t)v43);
    goto LABEL_17;
  }
  if (v25 == *MEMORY[0x24BE3B600])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    static Grammar.oneOf(choices:with:)(*(_QWORD *)(*(_QWORD *)v23 + 16), v42, v43);
    goto LABEL_30;
  }
  if (v25 == *MEMORY[0x24BE3B640])
  {
    (*(void (**)(_BYTE *, uint64_t))(v15 + 96))(v23, v14);
    static Grammar.hardcoded(value:)(*(_QWORD *)(*(_QWORD *)v23 + 16), *(void **)(*(_QWORD *)v23 + 24), v43);
    goto LABEL_30;
  }
  if (v25 == *MEMORY[0x24BE3B630])
  {
    static Grammar.BOOLean()(v43);
    return;
  }
  if (v25 == *MEMORY[0x24BE3B638])
  {
    static Grammar.integer()(v43);
    return;
  }
LABEL_39:
  ((void (*)(_BYTE *, uint64_t, uint64_t))v24)(v18, a1, v14);
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  v39._object = (void *)0x8000000248C98A00;
  v39._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v39);
  _print_unlocked<A, B>(_:_:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void static Grammar.BOOLean()(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_248C911B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_248C911C0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Symbol(0) - 8) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_248C911B0;
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 1702195828;
  v6[1] = 0xE400000000000000;
  type metadata accessor for TerminalSymbol(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + 32) = v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_248C911B0;
  v8 = (_QWORD *)(v7 + v4);
  *v8 = 0x65736C6166;
  v8[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + 40) = v7;
  *(_QWORD *)(v1 + 32) = 0x6E61656C6F6F42;
  *(_QWORD *)(v1 + 40) = 0xE700000000000000;
  *(_QWORD *)(v1 + 48) = v2;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v1, 0, MEMORY[0x24BEE4AF8], a1);
}

void static Grammar.integer()(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_248C91310;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_248C91300;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  v3 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 72);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_248C911B0;
  v7 = (_QWORD *)(v6 + v4);
  *v7 = 0x7469676944;
  v7[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + 32) = v6;
  v8 = v5;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_248C911C0;
  v10 = (_QWORD *)(v9 + v4);
  *v10 = 0xD000000000000010;
  v10[1] = 0x8000000248C98A20;
  swift_storeEnumTagMultiPayload();
  strcpy((char *)(v9 + v4 + v8), "PositiveDigit");
  *(_WORD *)((char *)v10 + v8 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + 40) = v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_248C91300;
  v12 = (_QWORD *)(v11 + v4);
  *v12 = 0xD000000000000010;
  v12[1] = 0x8000000248C98A20;
  swift_storeEnumTagMultiPayload();
  strcpy((char *)(v11 + v4 + v8), "PositiveDigit");
  *(_WORD *)((char *)v12 + v8 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  v13 = (_QWORD *)(v11 + v4 + 2 * v8);
  *v13 = 0x737469676944;
  v13[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v2 + 48) = v11;
  *(_QWORD *)(v1 + 32) = 0x72656765746E49;
  *(_QWORD *)(v1 + 40) = 0xE700000000000000;
  *(_QWORD *)(v1 + 48) = v2;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_248C911C0;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_248C911B0;
  v16 = (_QWORD *)(v15 + v4);
  *v16 = 45;
  v16[1] = 0xE100000000000000;
  type metadata accessor for TerminalSymbol(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 + 32) = v15;
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_248C911B0;
  v18 = (_QWORD *)(v17 + v4);
  *v18 = 0;
  v18[1] = 0xE000000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 + 40) = v17;
  *(_QWORD *)(v1 + 56) = 0xD000000000000010;
  *(_QWORD *)(v1 + 64) = 0x8000000248C98A20;
  *(_QWORD *)(v1 + 72) = v14;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_248C911C0;
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_248C911B0;
  v21 = (_QWORD *)(v20 + v4);
  *v21 = 0x7469676944;
  v21[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v19 + 32) = v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_248C911C0;
  v23 = (_QWORD *)(v22 + v4);
  *v23 = 0x737469676944;
  v23[1] = 0xE600000000000000;
  swift_storeEnumTagMultiPayload();
  v24 = (_QWORD *)(v22 + v4 + v8);
  *v24 = 0x7469676944;
  v24[1] = 0xE500000000000000;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v19 + 40) = v22;
  *(_QWORD *)(v1 + 80) = 0x737469676944;
  *(_QWORD *)(v1 + 88) = 0xE600000000000000;
  *(_QWORD *)(v1 + 96) = v19;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_248C911C0;
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_248C911B0;
  v27 = (_QWORD *)(v26 + v4);
  *v27 = 48;
  v27[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v25 + 32) = v26;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_248C911B0;
  strcpy((char *)(v28 + v4), "PositiveDigit");
  *(_WORD *)(v28 + v4 + 14) = -4864;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v25 + 40) = v28;
  *(_QWORD *)(v1 + 104) = 0x7469676944;
  *(_QWORD *)(v1 + 112) = 0xE500000000000000;
  *(_QWORD *)(v1 + 120) = v25;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_248C91320;
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_248C911B0;
  v31 = (_QWORD *)(v30 + v4);
  *v31 = 49;
  v31[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 32) = v30;
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_248C911B0;
  v33 = (_QWORD *)(v32 + v4);
  *v33 = 50;
  v33[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 40) = v32;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_248C911B0;
  v35 = (_QWORD *)(v34 + v4);
  *v35 = 51;
  v35[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 48) = v34;
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_248C911B0;
  v37 = (_QWORD *)(v36 + v4);
  *v37 = 52;
  v37[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 56) = v36;
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_248C911B0;
  v39 = (_QWORD *)(v38 + v4);
  *v39 = 53;
  v39[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 64) = v38;
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_248C911B0;
  v41 = (_QWORD *)(v40 + v4);
  *v41 = 54;
  v41[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 72) = v40;
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_248C911B0;
  v43 = (_QWORD *)(v42 + v4);
  *v43 = 55;
  v43[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 80) = v42;
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_248C911B0;
  v45 = (_QWORD *)(v44 + v4);
  *v45 = 56;
  v45[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 88) = v44;
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_248C911B0;
  v47 = (_QWORD *)(v46 + v4);
  *v47 = 57;
  v47[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v29 + 96) = v46;
  strcpy((char *)(v1 + 128), "PositiveDigit");
  *(_WORD *)(v1 + 142) = -4864;
  *(_QWORD *)(v1 + 144) = v29;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v1, 0, MEMORY[0x24BEE4AF8], a1);
}

void static Grammar.enumerator(cases:wrapInQuotes:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  Swift::String v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v6 = type metadata accessor for Grammar(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (uint64_t *)((char *)&v44 - v11);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v44 - v13;
  if ((a2 & 1) != 0)
  {
    v49 = a3;
    static Grammar.enumerator(cases:wrapInQuotes:)(a1, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    v15 = swift_allocObject();
    v48 = xmmword_248C911B0;
    *(_OWORD *)(v15 + 16) = xmmword_248C911B0;
    v54 = 0x6465746F7551;
    v55 = 0xE600000000000000;
    v17 = (void *)*((_QWORD *)v14 + 2);
    v50 = *((_QWORD *)v14 + 1);
    v16 = v50;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v51 = v55;
    *(_QWORD *)&v52 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    v20 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
    v21 = *(_QWORD *)(v20 + 72);
    v22 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_248C91300;
    v24 = (_QWORD *)(v23 + v22);
    *v24 = 34;
    v24[1] = 0xE100000000000000;
    type metadata accessor for TerminalSymbol(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v25 = (_QWORD *)((char *)v24 + v21);
    *v25 = v50;
    v25[1] = (uint64_t)v17;
    swift_storeEnumTagMultiPayload();
    v26 = (_QWORD *)((char *)v24 + 2 * v21);
    *v26 = 34;
    v26[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v19 + 32) = v23;
    v27 = v51;
    *(_QWORD *)(v15 + 32) = v52;
    *(_QWORD *)(v15 + 40) = v27;
    *(_QWORD *)(v15 + 48) = v19;
    v54 = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v54, 0, MEMORY[0x24BEE4AF8], v12);
    outlined init with take of Grammar((uint64_t)v12, v49, type metadata accessor for Grammar);
    outlined destroy of Grammar((uint64_t)v14, type metadata accessor for Grammar);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    *(_QWORD *)&v48 = swift_allocObject();
    v52 = xmmword_248C911B0;
    *(_OWORD *)(v48 + 16) = xmmword_248C911B0;
    v54 = 0x746172656D756E45;
    v55 = 0xEB0000000020726FLL;
    v53 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v28._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29 = (_QWORD *)v54;
    v30 = v55;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v31)
    {
      v45 = v55;
      v46 = (_QWORD *)v54;
      v47 = v9;
      v49 = a3;
      v54 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v32 = (_QWORD *)v54;
      v33 = type metadata accessor for Symbol(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v50 = v35 + *(_QWORD *)(v34 + 72);
      v51 = v33;
      v36 = (uint64_t *)(a1 + 40);
      do
      {
        v38 = *(v36 - 1);
        v37 = *v36;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
        v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = v52;
        v40 = (_QWORD *)(v39 + v35);
        *v40 = v38;
        v40[1] = v37;
        type metadata accessor for TerminalSymbol(0);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        v54 = (uint64_t)v32;
        v41 = v32[2];
        v42 = v32[3];
        swift_bridgeObjectRetain();
        if (v41 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v32 = (_QWORD *)v54;
        }
        v36 += 2;
        v32[2] = v41 + 1;
        v32[v41 + 4] = v39;
        --v31;
      }
      while (v31);
      a3 = v49;
      v29 = v46;
      v9 = v47;
      v30 = v45;
    }
    v43 = (_QWORD *)v48;
    *(_QWORD *)(v48 + 32) = v29;
    v43[5] = v30;
    v43[6] = v32;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v43, 0, MEMORY[0x24BEE4AF8], v9);
    outlined init with take of Grammar((uint64_t)v9, a3, type metadata accessor for Grammar);
  }
}

void static Grammar.startsWith(prefixes:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::String v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v4 = type metadata accessor for Grammar(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t *)((char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v42 - v8;
  static Grammar.string(wrapInQuotes:)(0, (uint64_t)&v42 - v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v10 = swift_allocObject();
  v59 = xmmword_248C911B0;
  *(_OWORD *)(v10 + 16) = xmmword_248C911B0;
  v63 = 0x6957737472617453;
  v64 = 0xEB00000000206874;
  v62 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v11._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)v63;
  v13 = v64;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v43 = v64;
    v44 = (_QWORD *)v63;
    v45 = v10;
    v48 = v7;
    v49 = a2;
    v15 = *((_QWORD *)v9 + 2);
    v58 = *((_QWORD *)v9 + 1);
    v47 = v9;
    v57 = type metadata accessor for Symbol(0);
    v16 = *(_QWORD *)(v57 - 8);
    v17 = *(_QWORD *)(v16 + 72);
    v18 = *(unsigned __int8 *)(v16 + 80);
    v19 = (v18 + 32) & ~v18;
    v52 = v18 | 7;
    v53 = v19 + v17;
    v54 = v19;
    v55 = v17;
    v51 = v19 + 2 * v17;
    swift_bridgeObjectRetain();
    v46 = a1;
    v20 = (_QWORD *)(a1 + 40);
    v21 = MEMORY[0x24BEE4AF8];
    v50 = xmmword_248C911C0;
    v56 = v15;
    while (1)
    {
      v60 = v20;
      v61 = v14;
      v22 = *(v20 - 1);
      v23 = *v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v59;
      v25 = v54;
      v26 = (_QWORD *)(v24 + v54);
      *v26 = v22;
      v26[1] = v23;
      type metadata accessor for TerminalSymbol(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = v50;
      v28 = (_QWORD *)(v27 + v25);
      *v28 = v22;
      v28[1] = v23;
      v29 = v56;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      v30 = (_QWORD *)(v27 + v25 + v55);
      *v30 = v58;
      v30[1] = v29;
      swift_storeEnumTagMultiPayload();
      v31 = *(_QWORD *)(v21 + 16);
      if (__OFADD__(v31, 2))
        break;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v31 + 2 > *(_QWORD *)(v21 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v21 = v32;
      }
      v34 = v60;
      v33 = v61;
      v35 = *(_QWORD *)(v21 + 16);
      v36 = *(_QWORD *)(v21 + 24);
      v37 = v35 + 1;
      swift_bridgeObjectRetain();
      if (v35 >= v36 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v21 = v40;
      }
      *(_QWORD *)(v21 + 16) = v37;
      *(_QWORD *)(v21 + 8 * v35 + 32) = v24;
      v38 = *(_QWORD *)(v21 + 24);
      v39 = v35 + 2;
      swift_bridgeObjectRetain();
      if (v39 > (uint64_t)(v38 >> 1))
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v21 = v41;
      }
      v20 = v34 + 2;
      *(_QWORD *)(v21 + 16) = v39;
      *(_QWORD *)(v21 + 8 * v37 + 32) = v27;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v33 - 1;
      if (!v14)
      {
        swift_bridgeObjectRelease();
        v7 = v48;
        a2 = v49;
        v9 = v47;
        v10 = v45;
        v12 = v44;
        v13 = v43;
        goto LABEL_14;
      }
    }
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v21 = MEMORY[0x24BEE4AF8];
LABEL_14:
    *(_QWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 40) = v13;
    *(_QWORD *)(v10 + 48) = v21;
    v63 = v10;
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v63, 0, MEMORY[0x24BEE4AF8], v7);
    outlined init with take of Grammar((uint64_t)v7, a2, type metadata accessor for Grammar);
    outlined destroy of Grammar((uint64_t)v9, type metadata accessor for Grammar);
  }
}

void static Grammar.string(wrapInQuotes:)(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  __int128 v131;

  v129 = a2;
  v3 = type metadata accessor for Grammar(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (unint64_t *)((char *)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v116 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  if ((a1 & 1) != 0)
  {
    v9 = swift_allocObject();
    v120 = xmmword_248C91310;
    *(_OWORD *)(v9 + 16) = xmmword_248C91310;
    v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    v10 = swift_allocObject();
    v131 = xmmword_248C911B0;
    *(_OWORD *)(v10 + 16) = xmmword_248C911B0;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    v12 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
    v13 = *(_QWORD *)(v12 + 72);
    v14 = *(unsigned __int8 *)(v12 + 80);
    v121 = 3 * v13;
    v15 = (v14 + 32) & ~v14;
    v124 = v14 | 7;
    v16 = v11;
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_248C91300;
    v18 = (_QWORD *)(v17 + v15);
    *v18 = 34;
    v18[1] = 0xE100000000000000;
    v19 = type metadata accessor for TerminalSymbol(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v20 = (_QWORD *)(v17 + v15 + v13);
    v116 = 0x8000000248C97F70;
    *v20 = 0xD000000000000019;
    v20[1] = 0x8000000248C97F70;
    swift_storeEnumTagMultiPayload();
    v21 = (_QWORD *)(v17 + v15 + 2 * v13);
    *v21 = 34;
    v21[1] = 0xE100000000000000;
    v119 = v19;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v10 + 32) = v17;
    v130 = (_QWORD *)v9;
    strcpy((char *)(v9 + 32), "QuotedString");
    *(_BYTE *)(v9 + 45) = 0;
    *(_WORD *)(v9 + 46) = -5120;
    *(_QWORD *)(v9 + 48) = v10;
    v22 = swift_allocObject();
    v126 = xmmword_248C911C0;
    *(_OWORD *)(v22 + 16) = xmmword_248C911C0;
    v127 = v15 + v13;
    v123 = v16;
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = v131;
    v122 = v8;
    v24 = (_QWORD *)(v23 + v15);
    *v24 = 0;
    v24[1] = 0xE000000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v22 + 32) = v23;
    v25 = v13;
    v125 = v13;
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v126;
    v27 = (_QWORD *)(v26 + v15);
    v28 = v116;
    *v27 = 0xD000000000000019;
    v27[1] = v28;
    swift_storeEnumTagMultiPayload();
    v29 = (_QWORD *)(v26 + v15 + v25);
    v117 = 0xD000000000000013;
    v118 = 0x8000000248C98A40;
    *v29 = 0xD000000000000013;
    v29[1] = 0x8000000248C98A40;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v22 + 40) = v26;
    v30 = v130;
    v130[7] = 0xD000000000000019;
    v30[8] = v28;
    v30[9] = v22;
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v126;
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = v131;
    v33 = (_QWORD *)(v32 + v15);
    *v33 = 0xD000000000000029;
    v33[1] = 0x8000000248C98A60;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v31 + 32) = v32;
    v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = v126;
    v35 = (_QWORD *)(v34 + v15);
    v36 = v15;
    *v35 = 92;
    v35[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v37 = (_QWORD *)(v34 + v15 + v125);
    *v37 = 0x657061637345;
    v37[1] = 0xE600000000000000;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v31 + 40) = v34;
    v38 = v130;
    v39 = v118;
    v130[10] = v117;
    v38[11] = v39;
    v38[12] = v31;
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_248C91320;
    v41 = v40;
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = v131;
    v43 = (_QWORD *)(v42 + v36);
    *v43 = 34;
    v43[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v41 + 32) = v42;
    *(_QWORD *)&v126 = v41;
    v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = v131;
    v45 = (_QWORD *)(v44 + v36);
    *v45 = 92;
    v45[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v41 + 40) = v44;
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = v131;
    v47 = (_QWORD *)(v46 + v36);
    *v47 = 47;
    v47[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48 = (_QWORD *)v126;
    *(_QWORD *)(v126 + 48) = v46;
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = v131;
    v50 = (_QWORD *)(v49 + v36);
    *v50 = 98;
    v50[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48[7] = v49;
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v131;
    v52 = (_QWORD *)(v51 + v36);
    *v52 = 102;
    v52[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48[8] = v51;
    v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = v131;
    v54 = (_QWORD *)(v53 + v36);
    *v54 = 110;
    v54[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48[9] = v53;
    v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = v131;
    v56 = (_QWORD *)(v55 + v36);
    *v56 = 114;
    v56[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48[10] = v55;
    v57 = swift_allocObject();
    *(_OWORD *)(v57 + 16) = v131;
    v58 = (_QWORD *)(v57 + v36);
    *v58 = 116;
    v58[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v48[11] = v57;
    v59 = v125;
    v60 = swift_allocObject();
    *(_OWORD *)(v60 + 16) = v120;
    v61 = (_QWORD *)(v60 + v36);
    *v61 = 117;
    v61[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v62 = (_QWORD *)(v60 + v36 + v59);
    *v62 = 7890248;
    v62[1] = 0xE300000000000000;
    swift_storeEnumTagMultiPayload();
    v63 = (_QWORD *)(v60 + v36 + 2 * v59);
    *v63 = 7890248;
    v63[1] = 0xE300000000000000;
    swift_storeEnumTagMultiPayload();
    v64 = (_QWORD *)(v60 + v36 + v121);
    *v64 = 7890248;
    v64[1] = 0xE300000000000000;
    swift_storeEnumTagMultiPayload();
    v65 = (_QWORD *)(v60 + v36 + 4 * v59);
    *v65 = 7890248;
    v65[1] = 0xE300000000000000;
    swift_storeEnumTagMultiPayload();
    v48[12] = v60;
    v66 = v130;
    v130[13] = 0x657061637345;
    v66[14] = 0xE600000000000000;
    v66[15] = v48;
    v67 = swift_allocObject();
    *(_OWORD *)(v67 + 16) = xmmword_248C91330;
    v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = v131;
    v69 = (_QWORD *)(v68 + v36);
    *v69 = 48;
    v69[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 32) = v68;
    v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = v131;
    v71 = (_QWORD *)(v70 + v36);
    *v71 = 49;
    v71[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 40) = v70;
    v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = v131;
    v73 = (_QWORD *)(v72 + v36);
    *v73 = 50;
    v73[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 48) = v72;
    v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = v131;
    v75 = (_QWORD *)(v74 + v36);
    *v75 = 51;
    v75[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 56) = v74;
    v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = v131;
    v77 = (_QWORD *)(v76 + v36);
    *v77 = 52;
    v77[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 64) = v76;
    v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = v131;
    v79 = (_QWORD *)(v78 + v36);
    *v79 = 53;
    v79[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 72) = v78;
    v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = v131;
    v81 = (_QWORD *)(v80 + v36);
    *v81 = 54;
    v81[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 80) = v80;
    v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = v131;
    v83 = (_QWORD *)(v82 + v36);
    *v83 = 55;
    v83[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 88) = v82;
    v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = v131;
    v85 = (_QWORD *)(v84 + v36);
    *v85 = 56;
    v85[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 96) = v84;
    v86 = swift_allocObject();
    *(_OWORD *)(v86 + 16) = v131;
    v87 = (_QWORD *)(v86 + v36);
    *v87 = 57;
    v87[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 104) = v86;
    v88 = swift_allocObject();
    *(_OWORD *)(v88 + 16) = v131;
    v89 = (_QWORD *)(v88 + v36);
    *v89 = 65;
    v89[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 112) = v88;
    v90 = swift_allocObject();
    *(_OWORD *)(v90 + 16) = v131;
    v91 = (_QWORD *)(v90 + v36);
    *v91 = 66;
    v91[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 120) = v90;
    v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = v131;
    v93 = (_QWORD *)(v92 + v36);
    *v93 = 67;
    v93[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 128) = v92;
    v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = v131;
    v95 = (_QWORD *)(v94 + v36);
    *v95 = 68;
    v95[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 136) = v94;
    v96 = swift_allocObject();
    *(_OWORD *)(v96 + 16) = v131;
    v97 = (_QWORD *)(v96 + v36);
    *v97 = 69;
    v97[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 144) = v96;
    v98 = swift_allocObject();
    *(_OWORD *)(v98 + 16) = v131;
    v99 = (_QWORD *)(v98 + v36);
    *v99 = 70;
    v99[1] = 0xE100000000000000;
    swift_storeEnumTagMultiPayload();
    v100 = v122;
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)(v67 + 152) = v98;
    v101 = v130;
    v130[16] = 7890248;
    v101[17] = 0xE300000000000000;
    v101[18] = v67;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v101, 0, MEMORY[0x24BEE4AF8], v100);
  }
  else
  {
    v102 = swift_allocObject();
    v131 = xmmword_248C911B0;
    *(_OWORD *)(v102 + 16) = xmmword_248C911B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
    v103 = swift_allocObject();
    v130 = v6;
    v104 = (_QWORD *)v103;
    *(_OWORD *)(v103 + 16) = xmmword_248C91300;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    v105 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
    v106 = *(_QWORD *)(v105 + 72);
    v107 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
    v108 = swift_allocObject();
    *(_OWORD *)(v108 + 16) = v131;
    v109 = (_QWORD *)(v108 + v107);
    *v109 = 0;
    v109[1] = 0xE000000000000000;
    type metadata accessor for TerminalSymbol(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v104[4] = v108;
    v110 = swift_allocObject();
    *(_OWORD *)(v110 + 16) = v131;
    v111 = (_QWORD *)(v110 + v107);
    *v111 = 0x48435F4C4147454CLL;
    v111[1] = 0xEF52455443415241;
    swift_storeEnumTagMultiPayload();
    v104[5] = v110;
    v112 = swift_allocObject();
    *(_OWORD *)(v112 + 16) = xmmword_248C911C0;
    v113 = (_QWORD *)(v112 + v107);
    *v113 = 0x6C62616568636143;
    v113[1] = 0xEF676E6972745365;
    swift_storeEnumTagMultiPayload();
    v114 = (_QWORD *)(v112 + v107 + v106);
    *v114 = 0x48435F4C4147454CLL;
    v114[1] = 0xEF52455443415241;
    swift_storeEnumTagMultiPayload();
    v104[6] = v112;
    *(_QWORD *)(v102 + 32) = 0x6C62616568636143;
    *(_QWORD *)(v102 + 40) = 0xEF676E6972745365;
    *(_QWORD *)(v102 + 48) = v104;
    v115 = v130;
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v102, 0, MEMORY[0x24BEE4AF8], v130);
    v100 = v115;
  }
  outlined init with take of Grammar((uint64_t)v100, v129, type metadata accessor for Grammar);
}

uint64_t static Grammar.jsonObject(fields:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  _QWORD *v42;
  void (*v43)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  Swift::Bool v53;
  unint64_t v54;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  _BOOL8 v69;
  Swift::Int v70;
  unint64_t v71;
  char v72;
  Swift::Bool v73;
  unint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  Swift::Int *v84;
  Swift::Int v85;
  Swift::Int v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::String v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, unint64_t, uint64_t);
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;

  v112 = type metadata accessor for Symbol(0);
  v108 = *(_QWORD *)(v112 - 8);
  v6 = MEMORY[0x24BDAC7A8](v112);
  v109 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v111 = (uint64_t *)((char *)&v97 - v8);
  v9 = type metadata accessor for GenerationSchema();
  v118 = *(_QWORD **)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v119 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v97 - v12;
  v14 = type metadata accessor for Grammar(0);
  v113 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v101 = (uint64_t)&v97 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v114 = (uint64_t)&v97 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v103 = (uint64_t)&v97 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v102 = (uint64_t)&v97 - v25;
  MEMORY[0x24BDAC7A8](v24);
  v122 = (uint64_t *)((char *)&v97 - v26);
  v27 = type metadata accessor for GenerationSchema.Field();
  v28 = MEMORY[0x24BDAC7A8](v27);
  v110 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v97 - v31;
  v126 = MEMORY[0x24BEE4B00];
  v107 = *(_QWORD *)(a1 + 16);
  if (v107)
  {
    v99 = v17;
    v100 = a3;
    v106 = a1 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v115 = *(_QWORD *)(v30 + 72);
    v104 = v30;
    v121 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v98 = a1;
    swift_bridgeObjectRetain();
    v33 = 0;
    v34 = MEMORY[0x24BEE4B08];
    v105 = v9;
    v116 = v32;
    v117 = v13;
    v120 = v27;
    while (1)
    {
      v121(v32, v106 + v115 * v33, v27);
      GenerationSchema.Field.type.getter();
      v35 = (_QWORD *)*a2;
      if (*(_QWORD *)(*a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v37 & 1) != 0))
      {
        v38 = v103;
        _s19TokenGenerationCore7GrammarVWOcTm_0(v35[7] + *(_QWORD *)(v113 + 72) * v36, v103, type metadata accessor for Grammar);
        v39 = v38;
        v40 = v102;
        outlined init with take of Grammar(v39, v102, type metadata accessor for Grammar);
        outlined init with take of Grammar(v40, (uint64_t)v122, type metadata accessor for Grammar);
        v41 = (void (*)(char *, uint64_t))v118[1];
      }
      else
      {
        v42 = v122;
        closure #1 in static Grammar.grammar(for:with:wrapStringsInQuotes:)(v13, 1, a2);
        v43 = (void (*)(char *, char *, uint64_t))v118[2];
        v43(v119, v13, v9);
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v42, v114, type metadata accessor for Grammar);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v123 = *a2;
        v45 = (_QWORD *)v123;
        *a2 = 0x8000000000000000;
        specialized __RawDictionaryStorage.find<A>(_:)();
        v48 = v45[2];
        v49 = (v47 & 1) == 0;
        v50 = v48 + v49;
        if (__OFADD__(v48, v49))
          goto LABEL_32;
        v51 = v46;
        v52 = v47;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GenerationSchema, Grammar>);
        v53 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50);
        v27 = v120;
        if (v53)
        {
          specialized __RawDictionaryStorage.find<A>(_:)();
          if ((v52 & 1) != (v55 & 1))
            goto LABEL_35;
          v51 = v54;
        }
        v56 = (_QWORD *)v123;
        if ((v52 & 1) != 0)
        {
          outlined assign with take of Symbol(v114, *(_QWORD *)(v123 + 56) + *(_QWORD *)(v113 + 72) * v51, type metadata accessor for Grammar);
        }
        else
        {
          *(_QWORD *)(v123 + 8 * (v51 >> 6) + 64) |= 1 << v51;
          v43((char *)(v56[6] + v118[9] * v51), v119, v9);
          outlined init with take of Grammar(v114, v56[7] + *(_QWORD *)(v113 + 72) * v51, type metadata accessor for Grammar);
          v57 = v56[2];
          v58 = __OFADD__(v57, 1);
          v59 = v57 + 1;
          if (v58)
            goto LABEL_34;
          v56[2] = v59;
          v56 = (_QWORD *)v123;
        }
        *a2 = (uint64_t)v56;
        swift_bridgeObjectRelease();
        v41 = (void (*)(char *, uint64_t))v118[1];
        v41(v119, v9);
        v32 = v116;
        v13 = v117;
      }
      v60 = (uint64_t)v109;
      v41(v13, v9);
      v61 = v110;
      v121(v110, (unint64_t)v32, v27);
      v62 = v122[2];
      v63 = (uint64_t)v111;
      *v111 = v122[1];
      *(_QWORD *)(v63 + 8) = v62;
      swift_storeEnumTagMultiPayload();
      outlined init with take of Grammar(v63, v60, type metadata accessor for Symbol);
      swift_bridgeObjectRetain();
      v64 = (_QWORD *)v126;
      v65 = swift_isUniquelyReferenced_nonNull_native();
      v123 = (uint64_t)v64;
      v126 = 0x8000000000000000;
      specialized __RawDictionaryStorage.find<A>(_:)();
      v68 = v64[2];
      v69 = (v67 & 1) == 0;
      v70 = v68 + v69;
      if (__OFADD__(v68, v69))
        break;
      v71 = v66;
      v72 = v67;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GenerationSchema.Field, Symbol>);
      v73 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v65, v70);
      v27 = v120;
      if (v73)
      {
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v72 & 1) != (v75 & 1))
          goto LABEL_35;
        v71 = v74;
      }
      v76 = (_QWORD *)v123;
      if ((v72 & 1) != 0)
      {
        outlined assign with take of Symbol(v60, *(_QWORD *)(v123 + 56) + *(_QWORD *)(v108 + 72) * v71, type metadata accessor for Symbol);
      }
      else
      {
        *(_QWORD *)(v123 + 8 * (v71 >> 6) + 64) |= 1 << v71;
        v121((char *)(v76[6] + v71 * v115), (unint64_t)v61, v27);
        outlined init with take of Grammar(v60, v76[7] + *(_QWORD *)(v108 + 72) * v71, type metadata accessor for Symbol);
        v77 = v76[2];
        v58 = __OFADD__(v77, 1);
        v78 = v77 + 1;
        if (v58)
          goto LABEL_33;
        v76[2] = v78;
        v76 = (_QWORD *)v123;
      }
      v126 = (unint64_t)v76;
      swift_bridgeObjectRelease();
      v79 = *(void (**)(char *, uint64_t))(v104 + 8);
      v79(v61, v27);
      v80 = v122[4];
      v81 = v34;
      v125 = v34;
      v82 = *(_QWORD *)(v80 + 16);
      if (v82)
      {
        v83 = a2;
        swift_bridgeObjectRetain();
        v84 = (Swift::Int *)(v80 + 48);
        do
        {
          v85 = *(v84 - 2);
          v86 = *(v84 - 1);
          v87 = *v84;
          v84 += 3;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v123, v85, v86, v87);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          --v82;
        }
        while (v82);
        swift_bridgeObjectRelease();
        v81 = v125;
        a2 = v83;
        v27 = v120;
      }
      v34 = v81;
      ++v33;
      outlined destroy of Grammar((uint64_t)v122, type metadata accessor for Grammar);
      v32 = v116;
      v79(v116, v27);
      v9 = v105;
      v13 = v117;
      if (v33 == v107)
      {
        a1 = v98;
        swift_bridgeObjectRelease();
        a3 = v100;
        v17 = v99;
        v88 = v34;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v88 = MEMORY[0x24BEE4B08];
LABEL_30:
    v89 = static Grammar.fieldCombinations(for:)(a1);
    v90 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySay29GenerativeFunctionsFoundation16GenerationSchemaO5FieldVGG_05TokenG4Core6ChoiceVs5NeverOTg504_s19jg81Core7GrammarV10jsonObject33_DD88DD49DE63EB9CBD61CBF820251C8ALL6fields4withACSay29de13Foundation0B6h2O5i17VG_SDyAjCGztFZAA6L8VAMXEfU_SDyAjM6SymbolOGTf1cn_n(v89, (uint64_t)&v126);
    swift_bridgeObjectRelease();
    v123 = 0x2D7463656A624FLL;
    v124 = 0xE700000000000000;
    v125 = *(_QWORD *)(*a2 + 16) + 1;
    v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    v92 = (_QWORD *)v123;
    v93 = v124;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = xmmword_248C911B0;
    *(_QWORD *)(v94 + 32) = v92;
    *(_QWORD *)(v94 + 40) = v93;
    *(_QWORD *)(v94 + 48) = v90;
    v123 = v94;
    specialized Array.append<A>(contentsOf:)(v88);
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v123, 0, MEMORY[0x24BEE4AF8], v17);
    v95 = v101;
    outlined init with take of Grammar((uint64_t)v17, v101, type metadata accessor for Grammar);
    outlined init with take of Grammar(v95, a3, type metadata accessor for Grammar);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void static Grammar.dictionary(schema:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  _QWORD *v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;

  v81 = a3;
  v5 = type metadata accessor for Grammar(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v80 = (uint64_t *)((char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x24BDAC7A8](v6);
  v79 = (uint64_t)&v68 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v68 - v10;
  v78 = (char *)&v68 - v10;
  static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, a2, 1);
  v12 = *((_QWORD *)v11 + 1);
  v13 = (void *)*((_QWORD *)v11 + 2);
  v92 = 7955787;
  v93 = 0xE300000000000000;
  swift_bridgeObjectRetain_n();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 1919508816;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  v84 = (_QWORD *)v92;
  v85 = v93;
  v92 = 0x654B664F7473694CLL;
  v93 = 0xE900000000000079;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v12;
  v77 = v12;
  v16._object = v13;
  String.append(_:)(v16);
  v72 = (uint64_t)v13;
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 1919508816;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  v89 = v93;
  v90 = (_QWORD *)v92;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v87 = swift_allocObject();
  v91 = xmmword_248C91300;
  *(_OWORD *)(v87 + 16) = xmmword_248C91300;
  v92 = 0x664F74636944;
  v93 = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v12;
  v18._object = v13;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v75 = (_QWORD *)v92;
  v74 = v93;
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v91;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  v21 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
  v22 = *(_QWORD *)(v21 + 72);
  v23 = *(unsigned __int8 *)(v21 + 80);
  v24 = (v23 + 32) & ~v23;
  v76 = v24 + v22;
  v82 = v23 | 7;
  v25 = swift_allocObject();
  v88 = xmmword_248C911B0;
  *(_OWORD *)(v25 + 16) = xmmword_248C911B0;
  v26 = (_QWORD *)(v25 + v24);
  v27 = v24;
  *v26 = 32123;
  v26[1] = 0xE200000000000000;
  v28 = type metadata accessor for TerminalSymbol(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v19 + 32) = v25;
  v69 = v19;
  v71 = 3 * v22;
  v86 = v27 + 3 * v22;
  v70 = v20;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v91;
  v30 = (_QWORD *)(v29 + v27);
  *v30 = 123;
  v30[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v31 = (_QWORD *)(v29 + v27 + v22);
  v33 = v84;
  v32 = v85;
  *v31 = v84;
  v31[1] = v32;
  swift_storeEnumTagMultiPayload();
  v34 = (_QWORD *)(v29 + v27 + 2 * v22);
  *v34 = 125;
  v34[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v19 + 40) = v29;
  v83 = v27;
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_248C91310;
  v36 = (_QWORD *)(v35 + v27);
  *v36 = 123;
  v36[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v37 = (_QWORD *)(v35 + v27 + v22);
  *v37 = v33;
  v37[1] = v32;
  swift_storeEnumTagMultiPayload();
  v38 = (_QWORD *)(v35 + v27 + 2 * v22);
  *v38 = 8236;
  v38[1] = 0xE200000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v39 = (_QWORD *)(v35 + v27 + v71);
  v40 = v89;
  *v39 = v90;
  v39[1] = v40;
  swift_storeEnumTagMultiPayload();
  v41 = (_QWORD *)(v35 + v27 + 4 * v22);
  *v41 = 125;
  v41[1] = 0xE100000000000000;
  v68 = v28;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v42 = v69;
  *(_QWORD *)(v69 + 48) = v35;
  v43 = (_QWORD *)v87;
  v44 = v74;
  *(_QWORD *)(v87 + 32) = v75;
  v43[5] = v44;
  v43[6] = v42;
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = v88;
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v91;
  v47 = v46 + v83;
  strcpy((char *)(v46 + v83), "QuotedString");
  *(_BYTE *)(v47 + 13) = 0;
  *(_WORD *)(v47 + 14) = -5120;
  swift_storeEnumTagMultiPayload();
  v48 = (_QWORD *)(v47 + v22);
  *v48 = 8250;
  v48[1] = 0xE200000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v49 = (uint64_t *)(v47 + 2 * v22);
  v50 = v72;
  *v49 = v77;
  v49[1] = v50;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v45 + 32) = v46;
  v52 = v84;
  v51 = v85;
  v43[7] = v84;
  v43[8] = v51;
  v43[9] = v45;
  v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_248C911C0;
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = v88;
  v55 = v83;
  v56 = (_QWORD *)(v54 + v83);
  *v56 = v52;
  v56[1] = v51;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v53 + 32) = v54;
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = v91;
  v58 = (_QWORD *)(v57 + v55);
  v59 = v89;
  v60 = v90;
  *v58 = v90;
  v58[1] = v59;
  swift_storeEnumTagMultiPayload();
  v61 = (_QWORD *)((char *)v58 + v22);
  *v61 = 8236;
  v61[1] = 0xE200000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v62 = (_QWORD *)((char *)v58 + 2 * v22);
  v63 = (uint64_t)v78;
  *v62 = v52;
  v62[1] = v51;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v53 + 40) = v57;
  v64 = (_QWORD *)v87;
  *(_QWORD *)(v87 + 80) = v60;
  v64[11] = v59;
  v64[12] = v53;
  v92 = (uint64_t)v64;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v65 = (_QWORD *)v92;
  v66 = v79;
  static Grammar.string(wrapInQuotes:)(1, v79);
  swift_bridgeObjectRetain();
  outlined destroy of Grammar(v66, type metadata accessor for Grammar);
  v92 = (uint64_t)v65;
  specialized Array.append<A>(contentsOf:)();
  v67 = v80;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v92, 0, MEMORY[0x24BEE4AF8], v80);
  outlined init with take of Grammar((uint64_t)v67, v81, type metadata accessor for Grammar);
  outlined destroy of Grammar(v63, type metadata accessor for Grammar);
}

void static Grammar.array(schema:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t *v32;
  Swift::String v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  Swift::String v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;

  v66 = a3;
  v5 = type metadata accessor for Grammar(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v65 = (uint64_t *)((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v54 - v8;
  v64 = (char *)&v54 - v8;
  static Grammar.grammar(for:with:wrapStringsInQuotes:)(a1, a2, 1);
  v11 = (void *)*((_QWORD *)v9 + 2);
  v54 = *((_QWORD *)v9 + 1);
  v10 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v69 = swift_allocObject();
  v63 = xmmword_248C911C0;
  *(_OWORD *)(v69 + 16) = xmmword_248C911C0;
  v71 = 0x664F7961727241;
  v72 = 0xE700000000000000;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  v60 = v72;
  v61 = (_QWORD *)v71;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  v13 = swift_allocObject();
  v70 = xmmword_248C91300;
  *(_OWORD *)(v13 + 16) = xmmword_248C91300;
  v14 = v13;
  v67 = (_QWORD *)v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  v16 = *(_QWORD *)(type metadata accessor for Symbol(0) - 8);
  v17 = *(_QWORD *)(v16 + 72);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 32) & ~v18;
  v59 = v19 + v17;
  v20 = v18 | 7;
  v68 = v15;
  v21 = swift_allocObject();
  v58 = xmmword_248C911B0;
  *(_OWORD *)(v21 + 16) = xmmword_248C911B0;
  v22 = (_QWORD *)(v21 + v19);
  *v22 = 23899;
  v22[1] = 0xE200000000000000;
  type metadata accessor for TerminalSymbol(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v14 + 32) = v21;
  v55 = 3 * v17;
  v56 = v20;
  v57 = v19 + 3 * v17;
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = v70;
  v24 = (_QWORD *)(v23 + v19);
  *v24 = 91;
  v24[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v25 = (uint64_t *)(v23 + v19 + v17);
  v26 = v54;
  *v25 = v54;
  v25[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  v27 = (_QWORD *)(v23 + v19 + 2 * v17);
  *v27 = 93;
  v27[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v67[5] = v23;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_248C91310;
  v29 = (_QWORD *)(v28 + v19);
  *v29 = 91;
  v29[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v30 = (uint64_t *)(v28 + v19 + v17);
  *v30 = v26;
  v30[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  v31 = (_QWORD *)(v28 + v19 + 2 * v17);
  *v31 = 8236;
  v31[1] = 0xE200000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v32 = (uint64_t *)(v28 + v19 + v55);
  v71 = 0x664F7473694CLL;
  v72 = 0xE600000000000000;
  swift_bridgeObjectRetain_n();
  v33._countAndFlagsBits = v26;
  v33._object = v11;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34 = v72;
  *v32 = v71;
  v32[1] = v34;
  swift_storeEnumTagMultiPayload();
  v35 = (_QWORD *)(v28 + v19 + 4 * v17);
  *v35 = 93;
  v35[1] = 0xE100000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v36 = v67;
  v67[6] = v28;
  v37 = v69;
  v38 = v60;
  *(_QWORD *)(v69 + 32) = v61;
  *(_QWORD *)(v37 + 40) = v38;
  *(_QWORD *)(v37 + 48) = v36;
  v71 = 0x664F7473694CLL;
  v72 = 0xE600000000000000;
  swift_bridgeObjectRetain();
  v39 = v26;
  v40._countAndFlagsBits = v26;
  v40._object = v11;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v67 = (_QWORD *)v71;
  v61 = (_QWORD *)v72;
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v63;
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v58;
  v43 = (uint64_t *)(v42 + v19);
  *v43 = v39;
  v43[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v41 + 32) = v42;
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v70;
  v45 = (uint64_t *)(v44 + v19);
  v71 = 0x664F7473694CLL;
  v72 = 0xE600000000000000;
  swift_bridgeObjectRetain_n();
  v46._countAndFlagsBits = v39;
  v46._object = v11;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47 = v72;
  *v45 = v71;
  v45[1] = v47;
  swift_storeEnumTagMultiPayload();
  v48 = (_QWORD *)(v44 + v19 + v17);
  *v48 = 8236;
  v48[1] = 0xE200000000000000;
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  v49 = (uint64_t *)(v44 + v19 + 2 * v17);
  *v49 = v39;
  v49[1] = (uint64_t)v11;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v41 + 40) = v44;
  v50 = (uint64_t)v64;
  v51 = (_QWORD *)v69;
  v52 = v61;
  *(_QWORD *)(v69 + 56) = v67;
  v51[8] = v52;
  v51[9] = v41;
  v71 = (uint64_t)v51;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v53 = v65;
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v71, 0, MEMORY[0x24BEE4AF8], v65);
  outlined init with take of Grammar((uint64_t)v53, v66, type metadata accessor for Grammar);
  outlined destroy of Grammar(v50, type metadata accessor for Grammar);
}

void static Grammar.oneOf(choices:with:)(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_SSs5NeverOTg509_s19Tokeng76Core7GrammarV5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I70VG_SDyAjCGztFZSSALcfu_32cce7deb5d5afe638d5ea480a0fbc1d0cALSSTf3nnnpk_nTf1cn_n(a1);
  v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay29GenerativeFunctionsFoundation16GenerationSchemaO6ChoiceVG_05TokenG4Core7GrammarVs5NeverOTg504_s19jg5Core7l64V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29de13Foundation0B6h2O6I22VG_SDyAjCGztFZAcLXEfU_ANXMtSDyAhNGTf1cn_n(a1, a2);
  v31 = v7;
  v8 = *(_QWORD *)(v7 + 16);
  v32 = a3;
  if (v8)
  {
    v9 = v7;
    v10 = *(_QWORD *)(type metadata accessor for Grammar(0) - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = v9 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)) + 32;
    v13 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v14 = *(_QWORD *)v12;
      v15 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      v16 = *(_QWORD *)(v13 + 16);
      if (__OFADD__(v16, v15))
        break;
      swift_bridgeObjectRetain();
      if (!swift_isUniquelyReferenced_nonNull_native() || v16 + v15 > *(_QWORD *)(v13 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v13 = v17;
      }
      if (*(_QWORD *)(v14 + 16))
      {
        v18 = *(_QWORD *)(v13 + 16);
        if ((*(_QWORD *)(v13 + 24) >> 1) - v18 < v15)
          goto LABEL_22;
        v19 = v13 + 24 * v18 + 32;
        if (v14 + 32 < v19 + 24 * v15 && v19 < v14 + 32 + 24 * v15)
          goto LABEL_24;
        swift_arrayInitWithCopy();
        if (v15)
        {
          v21 = *(_QWORD *)(v13 + 16);
          v22 = __OFADD__(v21, v15);
          v23 = v21 + v15;
          if (v22)
            goto LABEL_23;
          *(_QWORD *)(v13 + 16) = v23;
        }
      }
      else if (v15)
      {
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
      v12 += v11;
      if (!--v8)
        goto LABEL_19;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
LABEL_19:
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore7GrammarVG_SSs5NeverOTg504_s19de5Core7G182V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6ChoiceVG_SDyAjCGztFZSSACcfu1_33_9505c99dfe7c0469d75fe5206cfe3972ACSSTf3nnnpk_nTf1cn_n(v31);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v24 = BidirectionalCollection<>.joined(separator:)();
    v26 = v25;
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_248C911B0;
    _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySaySSGSay19TokenGenerationCore7GrammarVGG_AI6ChoiceVs5NeverOTg506_sSS19fg5Core7i4VAA6j17VIggnr_SS_ACtAEs5k157OIegnrzr_TR04_s19ab5Core7d104V5oneOf33_DD88DD49DE63EB9CBD61CBF820251C8ALL7choices4withACSay29GenerativeFunctionsFoundation0B6SchemaO6E30VG_SDyAjCGztFZAaKVSS_R16XEfU0_Tf3nnnpf_nTf1cn_n(v6, v31);
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v28 + 32) = 0x20664F656E4FLL;
    *(_QWORD *)(v28 + 40) = 0xE600000000000000;
    *(_QWORD *)(v28 + 48) = v30;
    specialized Array.append<A>(contentsOf:)();
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v28, 0, MEMORY[0x24BEE4AF8], v32);
  }
}

void static Grammar.hardcoded(value:)(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_248C911B0;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_248C911B0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Symbol(0) - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_248C911B0;
  v12 = (uint64_t *)(v11 + v10);
  *v12 = a1;
  v12[1] = (uint64_t)a2;
  type metadata accessor for TerminalSymbol(0);
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v6 + 32) = 0x65646F6364726148;
  *(_QWORD *)(v6 + 40) = 0xEA00000000002064;
  *(_QWORD *)(v6 + 48) = v8;
  swift_bridgeObjectRetain();
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)((_QWORD *)v6, 0, MEMORY[0x24BEE4AF8], a3);
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, char *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  _QWORD v38[2];
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD, char *);

  v46 = a2;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: GenerationSchema.Field));
  v3 = MEMORY[0x24BDAC7A8](v45);
  v44 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v38 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v43 = v7;
  v38[1] = a1;
  if (v7)
  {
    v8 = type metadata accessor for GenerationSchema.Field();
    v9 = 0;
    v10 = *(_QWORD *)(v8 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v41 = v10;
    v42 = v8;
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v39 = v12;
    v40 = v13;
    v14 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v15 = v45;
      v16 = &v44[*(int *)(v45 + 48)];
      v17 = v42;
      v40(v16, v11, v42);
      v18 = &v6[*(int *)(v15 + 48)];
      *(_QWORD *)v6 = v9;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v18, v16, v17);
      v19 = v46(*(_QWORD *)v6, &v6[*(int *)(v15 + 48)]);
      outlined destroy of (Locale?, Locale?)((uint64_t)v6, &demangling cache variable for type metadata for (offset: Int, element: GenerationSchema.Field));
      v20 = *(_QWORD *)(v19 + 16);
      v21 = *(_QWORD *)(v14 + 16);
      if (__OFADD__(v21, v20))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v21 + v20 > *(_QWORD *)(v14 + 24) >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v19 + 16))
      {
        v22 = *(_QWORD *)(v14 + 16);
        v23 = (*(_QWORD *)(v14 + 24) >> 1) - v22;
        v24 = type metadata accessor for Symbol(0);
        if (v23 < v20)
          goto LABEL_24;
        v25 = *(_QWORD *)(v24 - 8);
        v26 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
        v27 = *(_QWORD *)(v25 + 72);
        v28 = v14 + v26 + v27 * v22;
        v29 = v19 + v26;
        v30 = v27 * v20;
        v31 = v28 + v30;
        v32 = v29 + v30;
        if (v29 < v31 && v28 < v32)
          goto LABEL_26;
        swift_arrayInitWithCopy();
        if (v20)
        {
          v34 = *(_QWORD *)(v14 + 16);
          v35 = __OFADD__(v34, v20);
          v36 = v34 + v20;
          if (v35)
            goto LABEL_25;
          *(_QWORD *)(v14 + 16) = v36;
        }
      }
      else if (v20)
      {
        goto LABEL_23;
      }
      ++v9;
      swift_bridgeObjectRelease();
      v11 += v39;
      if (v43 == v9)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v14 = MEMORY[0x24BEE4AF8];
LABEL_21:
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

uint64_t static Grammar.fieldCombinations(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t *, uint64_t, uint64_t);
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, char *, uint64_t);
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  v61 = a1;
  v1 = type metadata accessor for GenerationSchema();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (uint64_t *)((char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for GenerationSchema.Field();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v67 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v52 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v52 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v52 - v15;
  v17 = swift_allocObject();
  v18 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v17 + 16) = MEMORY[0x24BEE4AF8];
  *v4 = v17;
  v19 = *MEMORY[0x24BE3B620];
  v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 104);
  v20(v4, v19, v1);
  GenerationSchema.Field.init(name:type:required:)();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v18;
  *v4 = v21;
  v20(v4, v19, v1);
  v22 = v14;
  GenerationSchema.Field.init(name:type:required:)();
  v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v55 = v16;
  v23(v11, v16, v5);
  v64 = type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)();
  v24 = swift_allocObject();
  v25 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v66 = v11;
  v63 = v25;
  v25(v24+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v11, v5);
  *(_QWORD *)(v24
            + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children) = MEMORY[0x24BEE4AF8];
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v26 = swift_allocObject();
  v56 = xmmword_248C91340;
  *(_OWORD *)(v26 + 16) = xmmword_248C91340;
  *(_QWORD *)(v26 + 32) = v24;
  v70 = v26;
  specialized Array._endMutation()();
  v71 = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenerationSchema.Field>);
  v27 = *(_QWORD *)(v6 + 72);
  v68 = v6;
  v28 = *(unsigned __int8 *)(v6 + 80);
  v29 = v22;
  v30 = (v28 + 32) & ~v28;
  v62 = v27;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_248C911B0;
  v65 = v23;
  v23((char *)(v31 + v30), v29, v5);
  v70 = v61;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  result = v70;
  v61 = *(_QWORD *)(v70 + 16);
  if (!v61)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    v47 = swift_allocObject();
    v48 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v47 + 16) = MEMORY[0x24BEE4AF8];
    v49 = (uint64_t *)(v47 + 16);
    v69 = v48;
    recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(v24, &v69, v47);
    swift_release();
    swift_bridgeObjectRelease();
    v50 = *(void (**)(char *, uint64_t))(v68 + 8);
    v50(v29, v5);
    v50(v55, v5);
    swift_beginAccess();
    v51 = *v49;
    swift_bridgeObjectRetain();
    swift_release();
    return v51;
  }
  v53 = v24;
  v54 = v29;
  v33 = 0;
  v59 = v5;
  v60 = v70 + v30;
  v34 = v67;
  v58 = v70;
  while (v33 < *(_QWORD *)(result + 16))
  {
    v35 = v65;
    v65(v34, (char *)(v60 + v33 * v62), v5);
    v36 = v66;
    v35(v66, v34, v5);
    v37 = swift_allocObject();
    v63(v37+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v36, v5);
    *(_QWORD *)(v37
              + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children) = MEMORY[0x24BEE4AF8];
    v38 = v71;
    if (v71 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v39 = result;
      if (!result)
        goto LABEL_16;
    }
    else
    {
      v39 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v39)
        goto LABEL_16;
    }
    if (v39 < 1)
      goto LABEL_26;
    v40 = 0;
    do
    {
      if ((v38 & 0xC000000000000001) != 0)
      {
        v41 = MEMORY[0x2495A8070](v40, v38);
      }
      else
      {
        v41 = *(_QWORD *)(v38 + 8 * v40 + 32);
        swift_retain();
      }
      v42 = (_QWORD *)(v41
                     + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children);
      swift_beginAccess();
      v43 = swift_retain();
      MEMORY[0x2495A7E0C](v43);
      if (*(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v40;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      swift_release();
    }
    while (v39 != v40);
LABEL_16:
    swift_bridgeObjectRelease();
    v34 = v67;
    if ((GenerationSchema.Field.required.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = v56;
      *(_QWORD *)(v44 + 32) = v37;
      v70 = v44;
      specialized Array._endMutation()();
      v45 = v70;
      v5 = v59;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v34, v59);
      v71 = v45;
    }
    else
    {
      v46 = swift_retain();
      MEMORY[0x2495A7E0C](v46);
      v5 = v59;
      if (*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v34, v5);
    }
    ++v33;
    result = v58;
    if (v33 == v61)
    {
      swift_bridgeObjectRelease();
      v29 = v54;
      v24 = v53;
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in static Grammar.jsonObject(fields:with:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Symbol?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Symbol(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t *)((char *)&v29 - v15);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v29 - v17;
  specialized Dictionary.subscript.getter(a2, *a3);
  result = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    outlined init with take of Grammar((uint64_t)v8, (uint64_t)v18, type metadata accessor for Symbol);
    v20 = 8236;
    if (!a1)
      v20 = 0;
    v21 = 0xE200000000000000;
    if (!a1)
      v21 = 0xE000000000000000;
    *v16 = v20;
    v16[1] = v21;
    type metadata accessor for TerminalSymbol(0);
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    v29 = 34;
    v30 = 0xE100000000000000;
    v22._countAndFlagsBits = GenerationSchema.Field.name.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 2112034;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    v24 = v30;
    *v13 = v29;
    v13[1] = v24;
    swift_storeEnumTagMultiPayload();
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
    v25 = *(_QWORD *)(v10 + 72);
    v26 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_248C91300;
    v28 = v27 + v26;
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v16, v28, type metadata accessor for Symbol);
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v13, v28 + v25, type metadata accessor for Symbol);
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v18, v28 + 2 * v25, type metadata accessor for Symbol);
    outlined destroy of Grammar((uint64_t)v13, type metadata accessor for Symbol);
    outlined destroy of Grammar((uint64_t)v16, type metadata accessor for Symbol);
    outlined destroy of Grammar((uint64_t)v18, type metadata accessor for Symbol);
    return v27;
  }
  return result;
}

void recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.Field?);
  MEMORY[0x24BDAC7A8](v6);
  v33 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GenerationSchema.Field();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_children);
  swift_beginAccess();
  if (!((unint64_t)*v12 >> 62))
  {
    if (*(_QWORD *)((*v12 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_13:
    v21 = (uint64_t *)(a3 + 16);
    v22 = specialized Collection.suffix(from:)(1, *a2);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    swift_bridgeObjectRetain();
    v29 = specialized Array.init<A>(_:)(v22, v24, v26, v28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v30 = *(_QWORD *)(*v21 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
    v31 = *v21;
    *(_QWORD *)(v31 + 16) = v30 + 1;
    *(_QWORD *)(v31 + 8 * v30 + 32) = v29;
    swift_endAccess();
    return;
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_13;
LABEL_3:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1+ OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field, v8);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v13 = *(_QWORD *)(*a2 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
  v14 = *a2;
  *(_QWORD *)(v14 + 16) = v13 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v13, v11, v8);
  *a2 = v14;
  v15 = *v12;
  if ((unint64_t)*v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();
    v19 = v33;
    specialized RangeReplaceableCollection<>.popLast()(v33);
    outlined destroy of (Locale?, Locale?)(v19, &demangling cache variable for type metadata for GenerationSchema.Field?);
    return;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16)
    goto LABEL_11;
LABEL_5:
  if (v16 >= 1)
  {
    for (i = 0; i != v16; ++i)
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        v18 = MEMORY[0x2495A8070](i, v15);
      }
      else
      {
        v18 = *(_QWORD *)(v15 + 8 * i + 32);
        swift_retain();
      }
      recurse #1 (node:path:) in static Grammar.fieldCombinations(for:)(v18, a2, a3);
      swift_release();
    }
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t specialized Collection.suffix(from:)(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    type metadata accessor for GenerationSchema.Field();
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t __deallocating_deinit in Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCZFV19TokenGenerationCore7GrammarP33_DD88DD49DE63EB9CBD61CBF820251C8A17fieldCombinationsFT3forGSaVO29GenerativeFunctionsFoundation16GenerationSchema5Field__GSaGSaS3___L_4Node_field;
  v2 = type metadata accessor for GenerationSchema.Field();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for Node #1 in static Grammar.fieldCombinations(for:)()
{
  return type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)();
}

uint64_t type metadata accessor for Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Node #1 in static Grammar.fieldCombinations(for:);
  if (!type metadata singleton initialization cache for Node #1 in static Grammar.fieldCombinations(for:))
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for Node #1 in static Grammar.fieldCombinations(for:)()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GenerationSchema.Field();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_248C0E25C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()()
{
  OUTLINED_FUNCTION_1_3();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  OUTLINED_FUNCTION_1_3();
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized Array.remove(at:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = type metadata accessor for GenerationSchema.Field();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(_QWORD *)(v8 + 72);
    v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 32))(a2, v10, v7);
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10 + v9, v6 - 1 - a1, v10);
    *(_QWORD *)(v5 + 16) = v6 - 1;
    *v2 = v5;
  }
}

uint64_t specialized Array._customRemoveLast()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew()();
    v3 = result;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v5 - 1;
    v7 = type metadata accessor for GenerationSchema.Field();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v6, v7);
    *(_QWORD *)(v3 + 16) = v6;
    *v1 = v3;
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of GenerationSchema.StringConstraint?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerationSchema.StringConstraint?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined init with take of Grammar(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_23();
}

void outlined assign with take of Symbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  OUTLINED_FUNCTION_23();
}

uint64_t partial apply for closure #1 in closure #1 in static Grammar.jsonObject(fields:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in static Grammar.jsonObject(fields:with:)(a1, a2, *(uint64_t **)(v2 + 16));
}

void _s19TokenGenerationCore7GrammarVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_23();
}

uint64_t outlined init with take of (String, Grammar)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Grammar));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_6_3@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_9_3(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  *(_QWORD *)v6 = a1;
  *(__n128 *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 24) = v2;
  *(_BYTE *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v4;
  *(_BYTE *)(v6 + 48) = v5;
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return type metadata accessor for Grammar(0);
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return type metadata accessor for Schema();
}

uint64_t OUTLINED_FUNCTION_16_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  return type metadata accessor for TokenizerRunner();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF17NonTerminalSymbolVs5NeverOTg504_s19de63Core7GrammarV5rules22prependSpaceToRootRule30cacheableResursiveh35TerminalsACSayAA0J0VG_SbSaySSGtKcfcw3M14iJ55VAHcfu_33_9193222a294e39e08c9aa65de551d98cAhLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v11;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v8 = *(_QWORD *)(v11 + 16);
      v7 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 += 3;
      *(_QWORD *)(v11 + 16) = v8 + 1;
      v9 = v11 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore6SymbolOG_SSs5NeverOTg504_s19de73Core7GrammarV29validateNoRightRecursiveRules5rulesySayAA4RuleVG_tKFZSSAA6G53Ocfu_32f5710a733efaae9cdfe884b2973571ecAJSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  Swift::String v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v2 = type metadata accessor for CharacterSet();
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v42 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for TerminalSymbol(0);
  v4 = MEMORY[0x24BDAC7A8](v45);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v48 = (uint64_t)&v41 - v7;
  v47 = type metadata accessor for Symbol(0);
  v8 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v10 = (uint64_t *)((char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v57 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v46 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0(v13, (uint64_t)v10, type metadata accessor for Symbol);
      if (swift_getEnumCaseMultiPayload() != 1)
        break;
      v14 = *v10;
      v15 = (void *)v10[1];
      v55 = 60;
      v56 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      v16._countAndFlagsBits = v14;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 62;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18 = v55;
      v19 = v56;
LABEL_12:
      v12 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v57;
      }
      v38 = *(_QWORD *)(v12 + 16);
      v37 = *(_QWORD *)(v12 + 24);
      if (v38 >= v37 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
        v12 = v57;
      }
      *(_QWORD *)(v12 + 16) = v38 + 1;
      v39 = v12 + 16 * v38;
      *(_QWORD *)(v39 + 32) = v18;
      *(_QWORD *)(v39 + 40) = v19;
      v13 += v46;
      if (!--v11)
        return v12;
    }
    v20 = v48;
    outlined init with take of Grammar((uint64_t)v10, v48, type metadata accessor for TerminalSymbol);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v20, (uint64_t)v6, type metadata accessor for TerminalSymbol);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        v33 = v42;
        v34 = v43;
        v35 = v44;
        (*(void (**)(char *, uint64_t *, uint64_t))(v43 + 32))(v42, v6, v44);
        v18 = CharacterSet.description.getter();
        v19 = v36;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
        goto LABEL_11;
      }
      v22._countAndFlagsBits = *v6;
      v23 = (void *)v6[1];
      v55 = 34;
      v56 = 0xE100000000000000;
      v22._object = v23;
      String.append(_:)(v22);
    }
    else
    {
      v24 = *v6;
      v54 = v6[1];
      v55 = 34;
      v56 = 0xE100000000000000;
      v52 = 0xE100000000000000;
      v53 = v24;
      v51 = 92;
      v49 = 23644;
      v50 = 0xE200000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v27 = v26;
      swift_bridgeObjectRelease();
      v53 = v25;
      v54 = v27;
      v51 = 34;
      v52 = 0xE100000000000000;
      v49 = 8796;
      v50 = 0xE200000000000000;
      v28 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v30 = v29;
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = v28;
      v31._object = v30;
      String.append(_:)(v31);
    }
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 34;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v18 = v55;
    v19 = v56;
LABEL_11:
    outlined destroy of Grammar(v48, type metadata accessor for TerminalSymbol);
    goto LABEL_12;
  }
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_SSs5NeverOTg504_s19de35Core7GrammarV11descriptionSSvgSSAA4G53Vcfu_32dd3a78f75bedf894b6433eb10654a64fAFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v13 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v13;
    v4 = a1 + 40;
    do
    {
      Rule.description.getter();
      v6 = v5;
      v8 = v7;
      v10 = *(_QWORD *)(v13 + 16);
      v9 = *(_QWORD *)(v13 + 24);
      if (v10 >= v9 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
      v4 += 24;
      *(_QWORD *)(v13 + 16) = v10 + 1;
      v11 = v13 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v6;
      *(_QWORD *)(v11 + 40) = v8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v2 = v9;
    v4 = (uint64_t *)(a1 + 48);
    do
    {
      v5 = *v4;
      v7 = *(_QWORD *)(v9 + 16);
      v6 = *(_QWORD *)(v9 + 24);
      OUTLINED_FUNCTION_75();
      if (v7 >= v6 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v9 + 16) = v7 + 1;
      *(_QWORD *)(v9 + 8 * v7 + 32) = v5;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = OUTLINED_FUNCTION_128_1();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          OUTLINED_FUNCTION_134_1();
        }
        v10 = _decodeScalar(_:startingAt:)();
      }
      v12 = v11;
      LODWORD(v17[0]) = v10;
      v13 = a1(v17);
      if (v4)
      {
        OUTLINED_FUNCTION_37_0();
        return v14 & 1;
      }
      if ((v13 & 1) != 0)
        break;
      v9 += v12;
      if (v9 >= v5)
      {
        OUTLINED_FUNCTION_37_0();
        goto LABEL_17;
      }
    }
    OUTLINED_FUNCTION_37_0();
    v14 = 1;
  }
  else
  {
LABEL_17:
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t static Symbol.nonterminal(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for Symbol(0);
  swift_storeEnumTagMultiPayload();
  return OUTLINED_FUNCTION_71_1();
}

uint64_t type metadata accessor for Symbol(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Symbol);
}

TokenGenerationCore::Choice __swiftcall Choice.init(sequence:)(TokenGenerationCore::Choice sequence)
{
  TokenGenerationCore::Choice *v1;

  v1->sequence._rawValue = sequence.sequence._rawValue;
  return sequence;
}

uint64_t static Symbol.terminal(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return static Symbol.terminal(_:)(a1, a2, a3);
}

{
  return static Symbol.terminal(_:)(a1, a2, a3);
}

{
  *a3 = a1;
  a3[1] = a2;
  OUTLINED_FUNCTION_54_0();
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Symbol(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for TerminalSymbol(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for TerminalSymbol);
}

TokenGenerationCore::Rule __swiftcall Rule.init(symbol:_:)(Swift::String symbol, Swift::OpaquePointer _)
{
  uint64_t v2;
  TokenGenerationCore::Rule result;

  *(Swift::String *)v2 = symbol;
  *(Swift::OpaquePointer *)(v2 + 16) = _;
  result.symbol.identifier = symbol;
  result.expression.choices = _;
  return result;
}

void NonTerminalSymbol.description.getter()
{
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_124_0(62);
  OUTLINED_FUNCTION_73();
}

uint64_t *TerminalSymbol.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  int v8;
  Swift::String v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = OUTLINED_FUNCTION_79_0();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TerminalSymbol(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_33_1(v6, v7, v17);
  v8 = OUTLINED_FUNCTION_131_1();
  if (v8)
  {
    if (v8 != 1)
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v0, v1);
      CharacterSet.description.getter();
      OUTLINED_FUNCTION_130_1();
      OUTLINED_FUNCTION_113_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      return v0;
    }
    v9._countAndFlagsBits = *v0;
    v10 = (void *)v0[1];
    v23 = 34;
    v24 = 0xE100000000000000;
    v9._object = v10;
    String.append(_:)(v9);
  }
  else
  {
    v11 = *v0;
    v12 = v0[1];
    v23 = 34;
    v24 = 0xE100000000000000;
    v21 = v11;
    v22 = v12;
    v19 = 92;
    v20 = 0xE100000000000000;
    v17 = 23644;
    v18 = 0xE200000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v13 = OUTLINED_FUNCTION_44_1();
    v15 = v14;
    OUTLINED_FUNCTION_15_1();
    v21 = v13;
    v22 = v15;
    v19 = 34;
    v20 = 0xE100000000000000;
    v17 = 8796;
    v18 = 0xE200000000000000;
    OUTLINED_FUNCTION_44_1();
    OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_36_0();
  }
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_124_0(34);
  return (uint64_t *)v23;
}

Swift::Bool __swiftcall TerminalSymbol.contains(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  void *v14;
  uint64_t v16;
  Swift::Bool result;
  _BYTE v18[16];

  v4 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v7 = OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_92_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_59();
  OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)&v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s19TokenGenerationCore7GrammarVWOcTm_0(v4, (uint64_t)v11, v12);
  if (swift_getEnumCaseMultiPayload() > 1)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v3 + 32))(v2, v11, v7);
    MEMORY[0x24BDAC7A8](v16);
    *(_QWORD *)&v18[-16] = v2;
    OUTLINED_FUNCTION_165();
    specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))_s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0, (uint64_t)&v18[-32], countAndFlagsBits, (unint64_t)object);
    OUTLINED_FUNCTION_15_1();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v7);
  }
  else
  {
    v13 = *v11;
    v14 = (void *)v11[1];
    if (v13 == countAndFlagsBits && v14 == object)
    {
      OUTLINED_FUNCTION_15_1();
    }
    else
    {
      OUTLINED_FUNCTION_28_1();
      OUTLINED_FUNCTION_25_0();
    }
  }
  OUTLINED_FUNCTION_23_0();
  return result;
}

void Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  char *v124;
  id v125;
  void *v126;
  uint64_t v127;
  id v128;
  id v129;
  void *v130;
  uint64_t v131;
  id v132;
  id v133;
  id v134;
  id v135;
  void *v136;
  uint64_t v137;
  id v138;
  id v139;
  id v140;
  id v141;
  void *v142;
  char v143;
  void *v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, char *, uint64_t);
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int internalBuild;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  _QWORD *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, char *, uint64_t);
  uint64_t v185;
  __int128 v186;
  _QWORD v187[5];
  char v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  void (*v192)();
  uint64_t v193;
  char v194;
  id v195;
  unint64_t v196;
  unint64_t v197;
  void (*v198)();
  uint64_t v199;
  char v200;
  id v201;
  unint64_t v202;
  unint64_t v203;
  void (*v204)();
  uint64_t v205;
  char v206;
  uint64_t v207;

  v5 = v4;
  LODWORD(v167) = a2;
  v175 = type metadata accessor for TerminalSymbol(0);
  v166 = *(_QWORD *)(v175 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v171 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_23_1();
  v14 = v12 - v13;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v162 - v16;
  v183 = type metadata accessor for CharacterSet();
  v18 = *(_QWORD *)(v183 - 8);
  MEMORY[0x24BDAC7A8](v183);
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_101_1();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_101_1();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_101_1();
  MEMORY[0x24BDAC7A8](v21);
  v207 = (uint64_t)&v162 - v22;
  v170 = a4;
  *a4 = a3;
  v23 = OUTLINED_FUNCTION_38_0();
  v24 = Array<A>.nonTerminals()(v23);
  v178 = a1;
  OUTLINED_FUNCTION_37_0();
  v25 = *(_QWORD *)(v24 + 16);
  v185 = v18;
  if (v25)
  {
    v168 = v4;
    v26 = 0;
    v179 = (char *)(v24 + 32);
    v27 = MEMORY[0x24BEE4AF8];
    v176 = xmmword_248C911B0;
    v28 = v183;
    v174 = v17;
    v173 = v24;
    v172 = v25;
    while (1)
    {
      if (v26 >= *(_QWORD *)(v24 + 16))
      {
        __break(1u);
        goto LABEL_131;
      }
      v29 = &v179[16 * v26];
      v30 = *((_QWORD *)v29 + 1);
      v181 = *(char **)v29;
      v31 = one-time initialization token for characterSetLookup;
      *(_QWORD *)&v186 = v30;
      swift_bridgeObjectRetain();
      if (v31 != -1)
        swift_once();
      v32 = static Grammar.characterSetLookup;
      if (*(_QWORD *)(static Grammar.characterSetLookup + 16))
      {
        OUTLINED_FUNCTION_58_0();
        v33 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v34 & 1) != 0)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v17, *(_QWORD *)(v32 + 56) + *(_QWORD *)(v18 + 72) * v33, v28);
          v35 = 0;
        }
        else
        {
          v35 = 1;
        }
        OUTLINED_FUNCTION_174((uint64_t)v17, v35);
        OUTLINED_FUNCTION_18_2();
        if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v28) != 1)
        {
          v184 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
          v184(v207, v17, v28);
          v36 = *(_QWORD *)(v27 + 16);
          v180 = v27;
          if (v36)
          {
            OUTLINED_FUNCTION_65_0();
            v38 = v27 + v37;
            OUTLINED_FUNCTION_107_0();
            v39 = *(_QWORD *)(v18 + 72);
            v40 = *(_QWORD *)(v18 + 16);
            while (1)
            {
              OUTLINED_FUNCTION_121_1(v14, v38);
              OUTLINED_FUNCTION_174(v14, 0);
              if (__swift_getEnumTagSinglePayload(v14, 1, v28) == 1)
              {
                v46 = v180;
                OUTLINED_FUNCTION_123();
                v47 = v185;
                goto LABEL_22;
              }
              v41 = v40;
              v42 = v182;
              OUTLINED_FUNCTION_94_1(v182, v14);
              lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB768]);
              v43 = dispatch thunk of static Equatable.== infix(_:_:)();
              v44 = v28;
              v45 = *(void (**)(uint64_t, uint64_t))(v185 + 8);
              v45(v42, v44);
              if ((v43 & 1) != 0)
                break;
              v38 += v39;
              --v36;
              v28 = v183;
              v40 = v41;
              if (!v36)
                goto LABEL_20;
            }
            v27 = v180;
            OUTLINED_FUNCTION_7();
            v62 = v183;
            v45(v207, v183);
            v28 = v62;
            OUTLINED_FUNCTION_18_2();
            v18 = v185;
            v17 = v174;
          }
          else
          {
            OUTLINED_FUNCTION_107_0();
LABEL_20:
            OUTLINED_FUNCTION_174(v14, 1);
            v46 = v180;
            OUTLINED_FUNCTION_123();
            v47 = v185;
LABEL_22:
            OUTLINED_FUNCTION_121_1(v177, v207);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_60_1();
              v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            v180 = v46;
            v49 = *(_QWORD *)(v46 + 16);
            v48 = *(_QWORD *)(v46 + 24);
            if (v49 >= v48 >> 1)
            {
              OUTLINED_FUNCTION_80_1(v48);
              v180 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            *(_QWORD *)(v180 + 16) = v49 + 1;
            OUTLINED_FUNCTION_65_0();
            OUTLINED_FUNCTION_94_1(v51 + v50 + *(_QWORD *)(v47 + 72) * v49, v177);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
            v52 = OUTLINED_FUNCTION_18_0();
            *(_OWORD *)(v52 + 16) = v176;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
            v53 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_25_1() - 8) + 80);
            v54 = (v53 + 32) & ~v53;
            v55 = swift_allocObject();
            *(_OWORD *)(v55 + 16) = v176;
            v56 = v55 + v54;
            v28 = v183;
            OUTLINED_FUNCTION_121_1(v56, v207);
            swift_storeEnumTagMultiPayload();
            OUTLINED_FUNCTION_135_1();
            *(_QWORD *)(v52 + 32) = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
              v57 = v178;
            }
            else
            {
              OUTLINED_FUNCTION_60_1();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v57 = v63;
            }
            v17 = v174;
            v59 = v57[2];
            v58 = v57[3];
            v27 = v180;
            if (v59 >= v58 >> 1)
            {
              OUTLINED_FUNCTION_80_1(v58);
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v57 = v64;
            }
            v57[2] = v59 + 1;
            v178 = v57;
            v60 = &v57[3 * v59];
            v61 = v186;
            v60[4] = v181;
            v60[5] = v61;
            v60[6] = v52;
            v18 = v185;
            (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v207, v28);
          }
          v24 = v173;
          v25 = v172;
          goto LABEL_33;
        }
      }
      else
      {
        OUTLINED_FUNCTION_174((uint64_t)v17, 1);
      }
      OUTLINED_FUNCTION_18_2();
      outlined destroy of (Locale?, Locale?)((uint64_t)v17, &demangling cache variable for type metadata for CharacterSet?);
LABEL_33:
      if (++v26 == v25)
      {
        OUTLINED_FUNCTION_118();
        v5 = v168;
        goto LABEL_37;
      }
    }
  }
  OUTLINED_FUNCTION_118();
  v27 = MEMORY[0x24BEE4AF8];
LABEL_37:
  *(_QWORD *)&v176 = type metadata accessor for Grammar(0);
  v177 = *(int *)(v176 + 32);
  *(_QWORD *)((char *)v170 + v177) = v27;
  OUTLINED_FUNCTION_107_0();
  v65 = OUTLINED_FUNCTION_38_0();
  v66 = v5;
  v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF17NonTerminalSymbolVs5NeverOTg504_s19de63Core7GrammarV5rules22prependSpaceToRootRule30cacheableResursiveh35TerminalsACSayAA0J0VG_SbSaySSGtKcfcw3M14iJ55VAHcfu_33_9193222a294e39e08c9aa65de551d98cAhLTf3nnnpk_nTf1cn_n(v65);
  OUTLINED_FUNCTION_37_0();
  v68 = OUTLINED_FUNCTION_38_0();
  v69 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(v68);
  v182 = v66;
  OUTLINED_FUNCTION_37_0();
  v181 = (char *)v69;
  *(_QWORD *)&v186 = *(_QWORD *)(v69 + 16);
  v179 = (char *)v67;
  if ((_QWORD)v186)
  {
    v184 = (void (*)(uint64_t, char *, uint64_t))(v181 + 32);
    swift_bridgeObjectRetain();
    v70 = 0;
    v71 = MEMORY[0x24BEE4AF8];
    v180 = v27;
    while (1)
    {
      v72 = *((_QWORD *)v184 + v70);
      v73 = *(_QWORD *)(v72 + 16);
      if (v73)
      {
        v207 = v71;
        swift_bridgeObjectRetain_n();
        v74 = 0;
        v75 = MEMORY[0x24BEE4AF8];
        while (1)
        {
          v76 = *(_QWORD *)(v72 + 8 * v74 + 32);
          v77 = *(_QWORD *)(v76 + 16);
          v78 = *(_QWORD *)(v75 + 16);
          if (__OFADD__(v78, v77))
          {
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }
          OUTLINED_FUNCTION_107_0();
          if (!swift_isUniquelyReferenced_nonNull_native() || v78 + v77 > *(_QWORD *)(v75 + 24) >> 1)
            v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          if (*(_QWORD *)(v76 + 16))
          {
            v79 = (*(_QWORD *)(v75 + 24) >> 1) - *(_QWORD *)(v75 + 16);
            OUTLINED_FUNCTION_25_1();
            if (v79 < v77)
              goto LABEL_105;
            OUTLINED_FUNCTION_16_2();
            OUTLINED_FUNCTION_68_1();
            v82 = v82 || v80 >= v81;
            if (!v82)
              goto LABEL_143;
            swift_arrayInitWithCopy();
            if (v77)
            {
              v83 = *(_QWORD *)(v75 + 16);
              v84 = __OFADD__(v83, v77);
              v85 = v83 + v77;
              if (v84)
              {
                __break(1u);
LABEL_108:
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Choice>);
                v113 = v76;
                v114 = OUTLINED_FUNCTION_18_0();
                v186 = xmmword_248C911B0;
                *(_OWORD *)(v114 + 16) = xmmword_248C911B0;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Symbol>);
                v115 = *(_QWORD *)(OUTLINED_FUNCTION_25_1() - 8);
                v116 = *(_QWORD *)(v115 + 72);
                v117 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
                v118 = swift_allocObject();
                *(_OWORD *)(v118 + 16) = xmmword_248C911C0;
                v119 = (_QWORD *)(v118 + v117);
                *v119 = 32;
                v119[1] = 0xE100000000000000;
                OUTLINED_FUNCTION_135_1();
                OUTLINED_FUNCTION_135_1();
                v120 = (_QWORD *)((char *)v119 + v116);
                v72 = v114;
                *v120 = v79;
                v120[1] = v113;
                swift_storeEnumTagMultiPayload();
                *(_QWORD *)(v114 + 32) = v118;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Rule>);
                v121 = OUTLINED_FUNCTION_18_0();
                *(_OWORD *)(v121 + 16) = v186;
                *(_QWORD *)(v121 + 32) = v73;
                *(_QWORD *)(v121 + 40) = v75;
                *(_QWORD *)(v121 + 48) = v114;
                v187[0] = v121;
                swift_bridgeObjectRetain();
                OUTLINED_FUNCTION_86_1();
                OUTLINED_FUNCTION_107_0();
                specialized Array.append<A>(contentsOf:)();
                v178 = (_QWORD *)v187[0];
LABEL_109:
                v163 = 0x45444E4550455250;
                v76 = 0xEF45434150535F44;
                goto LABEL_110;
              }
              *(_QWORD *)(v75 + 16) = v85;
            }
          }
          else if (v77)
          {
            goto LABEL_104;
          }
          ++v74;
          OUTLINED_FUNCTION_7();
          if (v73 == v74)
          {
            swift_bridgeObjectRelease_n();
            v71 = v207;
            goto LABEL_59;
          }
        }
      }
      v75 = MEMORY[0x24BEE4AF8];
LABEL_59:
      v86 = *(_QWORD *)(v75 + 16);
      v87 = *(_QWORD *)(v71 + 16);
      if (__OFADD__(v87, v86))
        break;
      if (!swift_isUniquelyReferenced_nonNull_native() || v87 + v86 > *(_QWORD *)(v71 + 24) >> 1)
        v71 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v75 + 16))
      {
        v88 = (*(_QWORD *)(v71 + 24) >> 1) - *(_QWORD *)(v71 + 16);
        OUTLINED_FUNCTION_25_1();
        if (v88 < v86)
          goto LABEL_133;
        OUTLINED_FUNCTION_16_2();
        OUTLINED_FUNCTION_68_1();
        if (!v82 && v89 < v90)
          goto LABEL_143;
        swift_arrayInitWithCopy();
        if (v86)
        {
          v92 = *(_QWORD *)(v71 + 16);
          v84 = __OFADD__(v92, v86);
          v93 = v92 + v86;
          if (v84)
            goto LABEL_134;
          *(_QWORD *)(v71 + 16) = v93;
        }
      }
      else if (v86)
      {
        goto LABEL_132;
      }
      ++v70;
      OUTLINED_FUNCTION_13();
      if (v70 == (_QWORD)v186)
      {
        OUTLINED_FUNCTION_7();
        OUTLINED_FUNCTION_7();
        v67 = (uint64_t)v179;
        goto LABEL_77;
      }
    }
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    goto LABEL_135;
  }
  OUTLINED_FUNCTION_18_2();
LABEL_77:
  OUTLINED_FUNCTION_7();
  Array<A>.nonTerminals()();
  v95 = v94;
  Array<A>.terminals()();
  v97 = v96;
  swift_bridgeObjectRelease();
  v98 = *(_QWORD *)(v95 + 16);
  if (v98)
  {
    v207 = v97;
    v99 = 0;
    v100 = *(_QWORD *)(v67 + 16);
    *(_QWORD *)&v186 = v95;
    v101 = v95 + 32;
    v102 = (_QWORD *)(v67 + 40);
    while (1)
    {
      v103 = v101;
      v104 = (uint64_t *)(v101 + 16 * v99);
      v105 = *v104;
      v106 = v104[1];
      ++v99;
      v107 = v102;
      v108 = v100;
      if (!v100)
        break;
      while (1)
      {
        v109 = *(v102 - 1) == v105 && *v102 == v106;
        if (v109 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
          break;
        v102 += 2;
        if (!--v108)
          goto LABEL_89;
      }
      v101 = v103;
      v102 = v107;
      if (v99 == v98)
      {
        OUTLINED_FUNCTION_18_2();
        OUTLINED_FUNCTION_18_2();
        v97 = v207;
        goto LABEL_91;
      }
    }
LABEL_89:
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_18_2();
    OUTLINED_FUNCTION_18_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_2();
    lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
    OUTLINED_FUNCTION_82_1();
    *(_QWORD *)v110 = v105;
    *(_QWORD *)(v110 + 8) = v106;
    *(_BYTE *)(v110 + 16) = 0;
    goto LABEL_100;
  }
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_123();
LABEL_91:
  if (!v178[2])
  {
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_15_1();
    lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
    OUTLINED_FUNCTION_82_1();
    *(_QWORD *)v112 = 0;
    *(_QWORD *)(v112 + 8) = 0;
    *(_BYTE *)(v112 + 16) = 2;
LABEL_100:
    swift_willThrow();
    goto LABEL_101;
  }
  v79 = v178[4];
  v76 = v178[5];
  v72 = v178[6];
  v207 = v97;
  if ((v167 & 1) != 0)
  {
    v75 = 0xEF45434150535F44;
    v73 = 0x45444E4550455250;
    if (v79 == 0x45444E4550455250 && v76 == 0xEF45434150535F44)
    {
LABEL_106:
      OUTLINED_FUNCTION_86_1();
      swift_bridgeObjectRetain();
      goto LABEL_109;
    }
    if ((OUTLINED_FUNCTION_41_0() & 1) == 0)
      goto LABEL_108;
  }
  v163 = v79;
  OUTLINED_FUNCTION_107_0();
  swift_bridgeObjectRetain();
LABEL_110:
  v122 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v122 + 16) = 0xD00000000000001CLL;
  *(_QWORD *)(v122 + 24) = 0x8000000248C98A90;
  v123 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v124 = (char *)@nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  if (!v124)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v181 = v124;
  v125 = (id)MobileGestalt_get_current_device();
  if (!v125)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v126 = v125;
  LODWORD(v180) = MobileGestalt_get_internalBuild();

  v127 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v127 + 16) = 0xD000000000000014;
  *(_QWORD *)(v127 + 24) = 0x8000000248C98AD0;
  v128 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v179 = (char *)OUTLINED_FUNCTION_42_0();
  if (!v179)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  *(_QWORD *)&v186 = v76;
  v184 = (void (*)(uint64_t, char *, uint64_t))v72;
  v129 = (id)MobileGestalt_get_current_device();
  if (!v129)
  {
LABEL_138:
    __break(1u);
    goto LABEL_139;
  }
  v130 = v129;
  LODWORD(v174) = MobileGestalt_get_internalBuild();

  v131 = OUTLINED_FUNCTION_18_0();
  v173 = (unint64_t)"enableRightRecursion";
  v172 = 0xD000000000000010;
  *(_QWORD *)(v131 + 16) = 0xD000000000000010;
  *(_QWORD *)(v131 + 24) = 0x8000000248C98AF0;
  v132 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v133 = OUTLINED_FUNCTION_42_0();
  if (!v133)
  {
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v134 = v133;
  v167 = (unint64_t)"XCEPT_QUOTE_AND_BACKSLASH";
  v168 = v122;
  v135 = (id)MobileGestalt_get_current_device();
  if (!v135)
  {
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  v136 = v135;
  v165 = v127;
  internalBuild = MobileGestalt_get_internalBuild();

  v137 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v137 + 16) = 0xD000000000000014;
  *(_QWORD *)(v137 + 24) = 0x8000000248C98B10;
  v138 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v139 = OUTLINED_FUNCTION_42_0();
  if (v139)
  {
    v140 = v139;
    v141 = (id)MobileGestalt_get_current_device();
    if (!v141)
      goto LABEL_142;
    v142 = v141;
    v143 = MobileGestalt_get_internalBuild();

    v187[0] = v181;
    v187[1] = 0xD00000000000001CLL;
    v187[2] = v167 | 0x8000000000000000;
    v187[3] = partial apply for closure #1 in Overridable<A>.init(key:);
    v187[4] = v168;
    v188 = v180;
    v189 = v179;
    v190 = 0xD000000000000014;
    v191 = 0x8000000248C98AD0;
    v192 = closure #1 in Overridable<A>.init(key:)partial apply;
    v193 = v165;
    v194 = (char)v174;
    v195 = v134;
    v196 = v172;
    v197 = v173 | 0x8000000000000000;
    v198 = partial apply for closure #1 in Overridable<A>.init(key:);
    v199 = v131;
    v200 = internalBuild;
    v201 = v140;
    v202 = 0xD000000000000014;
    v203 = 0x8000000248C98B10;
    v204 = closure #1 in Overridable<A>.init(key:)partial apply;
    v205 = v137;
    v206 = v143;
    if ((v174 & 1) != 0)
    {
      v144 = v179;
      outlined retain of GuidedGenerationOverrides((uint64_t)v187);
      v145 = v144;
      OUTLINED_FUNCTION_120_0();
      swift_retain();
      partial apply for closure #1 in Overridable<A>.init(key:)();
    }
    v146 = v185;
    v147 = v182;
    v148 = v207;
    v149 = v184;
    v150 = v178;
    v151 = OUTLINED_FUNCTION_165();
    static Grammar.validateNoRightRecursiveRules(rules:)(v151);
    if (!v147)
    {
      v182 = 0;
      OUTLINED_FUNCTION_15_1();
      v152 = v170;
      v153 = v186;
      v170[1] = v163;
      v152[2] = v153;
      v152[3] = v149;
      v152[4] = v150;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_38_0();
      CharacterSet.init()();
      v154 = *(_QWORD *)(v148 + 16);
      if (v154)
      {
        OUTLINED_FUNCTION_65_0();
        v156 = v148 + v155;
        v158 = *(_QWORD *)(v157 + 72);
        OUTLINED_FUNCTION_120_0();
        v159 = v169;
        do
        {
          _s19TokenGenerationCore7GrammarVWOcTm_0(v156, v171, type metadata accessor for TerminalSymbol);
          if (swift_getEnumCaseMultiPayload() > 1)
          {
            v161 = v183;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32))(v159, v171, v183);
            CharacterSet.formUnion(_:)();
            (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v159, v161);
          }
          else
          {
            v160 = v182;
            specialized Sequence.forEach(_:)(*(_QWORD *)v171, *(_QWORD *)(v171 + 8));
            v182 = v160;
            OUTLINED_FUNCTION_13();
          }
          v156 += v158;
          --v154;
        }
        while (v154);
        OUTLINED_FUNCTION_18_2();
      }
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_120_1();
      OUTLINED_FUNCTION_118();
      goto LABEL_102;
    }
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_118();
    OUTLINED_FUNCTION_120_1();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_18_2();
LABEL_101:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_102:
    OUTLINED_FUNCTION_0_0();
    return;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  OUTLINED_FUNCTION_0_3();
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

void Grammar.init(rules:prependSpaceToRootRule:)(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(a1, a2, MEMORY[0x24BEE4AF8], a3);
}

uint64_t one-time initialization function for characterSetLookup()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::String v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t result;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_92_1();
  MEMORY[0x24BDAC7A8](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CharacterSet)>);
  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CharacterSet))
                 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_248C91360;
  v6 = (_QWORD *)(v5 + v4);
  *v6 = 0x48435F4C4147454CLL;
  v6[1] = 0xEF52455443415241;
  static CharacterSet.illegalCharacters.getter();
  CharacterSet.inverted.getter();
  OUTLINED_FUNCTION_113_1(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  OUTLINED_FUNCTION_126_1((_QWORD *)((char *)v6 + v3));
  CharacterSet.init(charactersIn:)();
  v7._countAndFlagsBits = 23586;
  v7._object = (void *)0xE200000000000000;
  CharacterSet.remove(charactersIn:)(v7);
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_98_1();
  static CharacterSet.swiftIdentifierHead.getter();
  OUTLINED_FUNCTION_126_1((_QWORD *)((char *)v6 + 3 * v3));
  static CharacterSet.swiftIdentifierHead.getter();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  CharacterSet.insert(charactersIn:)();
  OUTLINED_FUNCTION_13_2();
  *v8 = 0xD000000000000012;
  v8[1] = 0x8000000248C98C10;
  static CharacterSet.controlCharacters.getter();
  OUTLINED_FUNCTION_13_2();
  *v9 = 0x4150534554494857;
  v9[1] = 0xEB00000000534543;
  static CharacterSet.whitespaces.getter();
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_98_1();
  static CharacterSet.whitespacesAndNewlines.getter();
  v10 = (char *)v6 + 7 * v3;
  strcpy(v10, "DECIMAL_DIGITS");
  v10[15] = -18;
  static CharacterSet.decimalDigits.getter();
  OUTLINED_FUNCTION_13_2();
  *v11 = 0x5352455454454CLL;
  v11[1] = 0xE700000000000000;
  static CharacterSet.letters.getter();
  OUTLINED_FUNCTION_13_2();
  *v12 = 0xD000000000000011;
  v12[1] = 0x8000000248C98C50;
  static CharacterSet.lowercaseLetters.getter();
  OUTLINED_FUNCTION_13_2();
  *v13 = 0xD000000000000011;
  v13[1] = 0x8000000248C98C70;
  static CharacterSet.uppercaseLetters.getter();
  OUTLINED_FUNCTION_13_2();
  *v14 = 0xD000000000000013;
  v14[1] = 0x8000000248C98C90;
  static CharacterSet.nonBaseCharacters.getter();
  OUTLINED_FUNCTION_13_2();
  strcpy(v15, "ALPHANUMERICS");
  *((_WORD *)v15 + 7) = -4864;
  static CharacterSet.alphanumerics.getter();
  v16 = (char *)v6 + 13 * v3;
  strcpy(v16, "DECOMPOSABLES");
  *((_WORD *)v16 + 7) = -4864;
  static CharacterSet.decomposables.getter();
  OUTLINED_FUNCTION_13_2();
  *v17 = 0xD000000000000012;
  v17[1] = 0x8000000248C98CB0;
  static CharacterSet.illegalCharacters.getter();
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_98_1();
  static CharacterSet.punctuationCharacters.getter();
  OUTLINED_FUNCTION_13_2();
  *v18 = 0xD000000000000013;
  v18[1] = 0x8000000248C98CF0;
  static CharacterSet.capitalizedLetters.getter();
  OUTLINED_FUNCTION_13_2();
  *v19 = 0x534C4F424D5953;
  v19[1] = 0xE700000000000000;
  static CharacterSet.symbols.getter();
  OUTLINED_FUNCTION_13_2();
  *v20 = 0x53454E494C57454ELL;
  v20[1] = 0xE800000000000000;
  static CharacterSet.newlines.getter();
  result = Dictionary.init(dictionaryLiteral:)();
  static Grammar.characterSetLookup = result;
  return result;
}

uint64_t Grammar.root.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[2];
  v3 = v1[3];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_71_1();
}

uint64_t Grammar.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Grammar.vocabulary.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_79_0();
  v0 = OUTLINED_FUNCTION_27();
  return v1(v0);
}

void Grammar.init(backusNaurForm:prependSpaceToRootRule:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v10;
  _QWORD *v11;

  type metadata accessor for Grammar(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_59();
  v11 = (_QWORD *)static BackusNaurParser.parsedRules(_:)(a1, a2);
  OUTLINED_FUNCTION_82();
  if (!v4)
  {
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v11, a3 & 1, MEMORY[0x24BEE4AF8], v5);
    outlined init with take of Grammar((uint64_t)v5, a4, type metadata accessor for Grammar);
  }
  OUTLINED_FUNCTION_107_1();
}

void Grammar.init(backusNaurForm:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;

  v9 = (_QWORD *)static BackusNaurParser.parsedRules(_:)(a1, a2);
  OUTLINED_FUNCTION_82();
  if (v5)
    OUTLINED_FUNCTION_123();
  else
    Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v9, a3 & 1, a4, a5);
  OUTLINED_FUNCTION_107_1();
}

void static Grammar.validateNoRightRecursiveRules(rules:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v3 = v1;
  v35 = OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_92_1();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_20;
  v31[0] = a1;
  v31[1] = v3;
  v9 = a1 + 32;
  OUTLINED_FUNCTION_165();
  v10 = 0;
  v32 = a1 + 32;
  v33 = v8;
  while (1)
  {
    v11 = (uint64_t *)(v9 + 24 * v10);
    v12 = v11[2];
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
      break;
LABEL_16:
    if (++v10 == v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  v34 = v10;
  v14 = v11[1];
  v36 = *v11;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v15 = 0;
  while (1)
  {
    v16 = *(_QWORD *)(v12 + 8 * v15 + 32);
    v17 = *(_QWORD *)(v16 + 16);
    if (!v17)
      goto LABEL_14;
    _s19TokenGenerationCore7GrammarVWOcTm_0(v16+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * (v17 - 1), (uint64_t)v7, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined destroy of Grammar((uint64_t)v7, type metadata accessor for Symbol);
      goto LABEL_14;
    }
    if (v36 == *v7 && v14 == v7[1])
      break;
    v19 = OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_120_0();
    OUTLINED_FUNCTION_15_1();
    if ((v19 & 1) != 0)
      goto LABEL_19;
    OUTLINED_FUNCTION_118();
LABEL_14:
    if (v13 == ++v15)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v9 = v32;
      v8 = v33;
      v10 = v34;
      goto LABEL_16;
    }
  }
  OUTLINED_FUNCTION_120_0();
  OUTLINED_FUNCTION_82();
LABEL_19:
  OUTLINED_FUNCTION_82();
  v37 = v36;
  v38 = v14;
  v39 = v12;
  Rule.description.getter();
  v21 = v20;
  v23 = v22;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_82();
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore6SymbolOG_SSs5NeverOTg504_s19de73Core7GrammarV29validateNoRightRecursiveRules5rulesySayAA4RuleVG_tKFZSSAA6G53Ocfu_32f5710a733efaae9cdfe884b2973571ecAJSSTf3nnnpk_nTf1cn_n(v16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_118();
  v37 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_15_1();
  v37 = 0;
  v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v37 = 0x203A656C7552;
  v38 = 0xE600000000000000;
  v25._countAndFlagsBits = v21;
  v25._object = v23;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0x8000000248C98BB0;
  v26._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v26);
  v27._countAndFlagsBits = OUTLINED_FUNCTION_117_0();
  String.append(_:)(v27);
  OUTLINED_FUNCTION_13();
  v28 = v37;
  v29 = v38;
  lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar();
  OUTLINED_FUNCTION_82_1();
  *(_QWORD *)v30 = v28;
  *(_QWORD *)(v30 + 8) = v29;
  *(_BYTE *)(v30 + 16) = 1;
  swift_willThrow();
LABEL_20:
  OUTLINED_FUNCTION_0_0();
}

uint64_t static NonTerminalSymbol.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void Rule.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Swift::String v53;
  _QWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;

  OUTLINED_FUNCTION_6_1();
  v1 = OUTLINED_FUNCTION_79_0();
  v63 = *(_QWORD *)(v1 - 8);
  v64 = v1;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v62 = v3;
  v66 = OUTLINED_FUNCTION_54_0();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_23_1();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v68 = (uint64_t)v54 - v9;
  v67 = OUTLINED_FUNCTION_25_1();
  v57 = *(_QWORD *)(v67 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_23_1();
  v13 = v11 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v54 - v15;
  v18 = *v0;
  v17 = v0[1];
  v19 = v0[2];
  v20 = *(_QWORD *)(v19 + 16);
  v21 = MEMORY[0x24BEE4AF8];
  if (!v20)
  {
    v48 = MEMORY[0x24BEE4AF8];
    goto LABEL_28;
  }
  v55 = *v0;
  v56 = v17;
  v65 = (uint64_t *)v7;
  v79 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_75();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  v22 = 0;
  v54[1] = v19;
  v58 = v19 + 32;
  v59 = v20;
  do
  {
    v61 = v22;
    v23 = *(_QWORD *)(v58 + 8 * v22);
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      v78 = v21;
      OUTLINED_FUNCTION_88_0();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
      OUTLINED_FUNCTION_65_0();
      v60 = v23;
      v26 = v23 + v25;
      v69 = *(_QWORD *)(v27 + 72);
      while (1)
      {
        OUTLINED_FUNCTION_88_1(v26, (uint64_t)v16);
        OUTLINED_FUNCTION_88_1((uint64_t)v16, v13);
        if (swift_getEnumCaseMultiPayload() != 1)
          break;
        v76 = 60;
        v77 = 0xE100000000000000;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_109_1();
        OUTLINED_FUNCTION_88();
        OUTLINED_FUNCTION_124_0(62);
        OUTLINED_FUNCTION_88();
        v17 = v76;
        v28 = v77;
LABEL_14:
        outlined destroy of Grammar((uint64_t)v16, type metadata accessor for Symbol);
        v21 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_102_1(0, *(_QWORD *)(v21 + 16) + 1);
          v21 = v78;
        }
        v45 = *(_QWORD *)(v21 + 16);
        v44 = *(_QWORD *)(v21 + 24);
        if (v45 >= v44 >> 1)
        {
          v47 = OUTLINED_FUNCTION_80_1(v44);
          OUTLINED_FUNCTION_102_1(v47, v45 + 1);
          v21 = v78;
        }
        *(_QWORD *)(v21 + 16) = v45 + 1;
        v46 = v21 + 16 * v45;
        *(_QWORD *)(v46 + 32) = v17;
        *(_QWORD *)(v46 + 40) = v28;
        v26 += v69;
        if (!--v24)
        {
          OUTLINED_FUNCTION_13();
          goto LABEL_21;
        }
      }
      v29 = v68;
      outlined init with take of Grammar(v13, v68, type metadata accessor for TerminalSymbol);
      v30 = v65;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v29, (uint64_t)v65, type metadata accessor for TerminalSymbol);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 1)
        {
          v38 = v62;
          v39 = v63;
          v40 = OUTLINED_FUNCTION_114_1();
          v41 = v64;
          v42(v40);
          v17 = CharacterSet.description.getter();
          v28 = v43;
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v41);
          goto LABEL_13;
        }
        v32 = *v30;
        v76 = 34;
        v77 = 0xE100000000000000;
        OUTLINED_FUNCTION_50_0(v32);
      }
      else
      {
        v33 = *v30;
        v34 = v30[1];
        v76 = 34;
        v77 = 0xE100000000000000;
        v74 = v33;
        v75 = v34;
        v72 = 92;
        v73 = 0xE100000000000000;
        v70 = 23644;
        v71 = 0xE200000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v35 = OUTLINED_FUNCTION_43_1();
        v37 = v36;
        OUTLINED_FUNCTION_25_0();
        v74 = v35;
        v75 = v37;
        v72 = 34;
        v73 = 0xE100000000000000;
        v70 = 8796;
        v71 = 0xE200000000000000;
        OUTLINED_FUNCTION_43_1();
        OUTLINED_FUNCTION_7();
        OUTLINED_FUNCTION_109_1();
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_124_0(34);
      v17 = v76;
      v28 = v77;
LABEL_13:
      outlined destroy of Grammar(v68, type metadata accessor for TerminalSymbol);
      goto LABEL_14;
    }
    OUTLINED_FUNCTION_165();
LABEL_21:
    v76 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    BidirectionalCollection<>.joined(separator:)();
    OUTLINED_FUNCTION_130_1();
    OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_7();
    v48 = v79;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_102_1(0, *(_QWORD *)(v48 + 16) + 1);
      v48 = v79;
    }
    v49 = v61;
    v51 = *(_QWORD *)(v48 + 16);
    v50 = *(_QWORD *)(v48 + 24);
    if (v51 >= v50 >> 1)
    {
      OUTLINED_FUNCTION_102_1(v50 > 1, v51 + 1);
      v49 = v61;
      v48 = v79;
    }
    v22 = v49 + 1;
    *(_QWORD *)(v48 + 16) = v51 + 1;
    v52 = v48 + 16 * v51;
    *(_QWORD *)(v52 + 32) = v17;
    *(_QWORD *)(v52 + 40) = 0;
    v21 = MEMORY[0x24BEE4AF8];
  }
  while (v22 != v59);
  swift_bridgeObjectRelease();
  v18 = v55;
LABEL_28:
  v76 = 60;
  v77 = 0xE100000000000000;
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_50_0(v18);
  OUTLINED_FUNCTION_25_0();
  v53._countAndFlagsBits = 0x203D3A3A203ELL;
  v53._object = (void *)0xE600000000000000;
  String.append(_:)(v53);
  v74 = v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_130_1();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_132_0();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_8_1();
}

void Symbol.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_79_0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TerminalSymbol(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_23_1();
  v9 = (uint64_t *)(v7 - v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - v11;
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s19TokenGenerationCore7GrammarVWOcTm_0(v1, (uint64_t)v15, v16);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with take of Grammar((uint64_t)v15, (uint64_t)v12, type metadata accessor for TerminalSymbol);
    v17 = OUTLINED_FUNCTION_110_1();
    _s19TokenGenerationCore7GrammarVWOcTm_0(v17, v18, type metadata accessor for TerminalSymbol);
    OUTLINED_FUNCTION_117_0();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v9, v2);
        CharacterSet.description.getter();
        v27 = OUTLINED_FUNCTION_114_1();
        v26 = v28(v27);
        goto LABEL_9;
      }
      v20 = *v9;
      v35 = 34;
      v36 = 0xE100000000000000;
      OUTLINED_FUNCTION_50_0(v20);
    }
    else
    {
      v21 = *v9;
      v22 = v9[1];
      v35 = 34;
      v36 = 0xE100000000000000;
      v33 = v21;
      v34 = v22;
      v31 = 92;
      v32 = 0xE100000000000000;
      v29 = 23644;
      v30 = 0xE200000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      v23 = OUTLINED_FUNCTION_70_0();
      v25 = v24;
      OUTLINED_FUNCTION_25_0();
      v33 = v23;
      v34 = v25;
      v31 = 34;
      v32 = 0xE100000000000000;
      v29 = 8796;
      v30 = 0xE200000000000000;
      OUTLINED_FUNCTION_70_0();
      OUTLINED_FUNCTION_130_1();
      OUTLINED_FUNCTION_88();
      OUTLINED_FUNCTION_132_0();
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_124_0(34);
LABEL_9:
    OUTLINED_FUNCTION_37_1(v26, type metadata accessor for TerminalSymbol);
    goto LABEL_10;
  }
  v35 = 60;
  v36 = 0xE100000000000000;
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_124_0(62);
  OUTLINED_FUNCTION_25_0();
LABEL_10:
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_8_1();
}

uint64_t Array<A>.nonTerminals()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;

  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_AF10ExpressionVs5NeverOTg506_sSa19def3AA4g52VRszlE12nonTerminalsSayAA17NonTerminalSymbolVGyFAA10H55VACcfu_33_26c799ed354f6f1d9d11a9e5c2957f23AcITf3nnnpk_nTf1cn_nTm(a1);
  v30 = *(_QWORD *)(v1 + 16);
  if (v30)
  {
    v29 = v1 + 32;
    swift_bridgeObjectRetain();
    v2 = 0;
    v3 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v4 = *(_QWORD *)(v29 + 8 * v2);
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
        break;
      v7 = MEMORY[0x24BEE4AF8];
LABEL_23:
      v18 = *(_QWORD *)(v7 + 16);
      v19 = *(_QWORD *)(v3 + 16);
      if (__OFADD__(v19, v18))
        goto LABEL_46;
      if (!swift_isUniquelyReferenced_nonNull_native() || v19 + v18 > *(_QWORD *)(v3 + 24) >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v7 + 16))
      {
        v20 = (*(_QWORD *)(v3 + 24) >> 1) - *(_QWORD *)(v3 + 16);
        OUTLINED_FUNCTION_25_1();
        if (v20 < v18)
          goto LABEL_48;
        OUTLINED_FUNCTION_16_2();
        OUTLINED_FUNCTION_68_1();
        if (!v14 && v21 < v22)
          goto LABEL_50;
        swift_arrayInitWithCopy();
        if (v18)
        {
          v24 = *(_QWORD *)(v3 + 16);
          v16 = __OFADD__(v24, v18);
          v25 = v24 + v18;
          if (v16)
            goto LABEL_49;
          *(_QWORD *)(v3 + 16) = v25;
        }
      }
      else if (v18)
      {
        goto LABEL_47;
      }
      ++v2;
      OUTLINED_FUNCTION_25_0();
      if (v2 == v30)
      {
        OUTLINED_FUNCTION_40_0();
        goto LABEL_41;
      }
    }
    swift_bridgeObjectRetain_n();
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v7 + 16);
      if (__OFADD__(v10, v9))
        break;
      OUTLINED_FUNCTION_75();
      if (!swift_isUniquelyReferenced_nonNull_native() || v10 + v9 > *(_QWORD *)(v7 + 24) >> 1)
        v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      if (*(_QWORD *)(v8 + 16))
      {
        v11 = (*(_QWORD *)(v7 + 24) >> 1) - *(_QWORD *)(v7 + 16);
        OUTLINED_FUNCTION_25_1();
        if (v11 < v9)
          goto LABEL_44;
        OUTLINED_FUNCTION_16_2();
        OUTLINED_FUNCTION_68_1();
        v14 = v14 || v12 >= v13;
        if (!v14)
          goto LABEL_50;
        swift_arrayInitWithCopy();
        if (v9)
        {
          v15 = *(_QWORD *)(v7 + 16);
          v16 = __OFADD__(v15, v9);
          v17 = v15 + v9;
          if (v16)
            goto LABEL_45;
          *(_QWORD *)(v7 + 16) = v17;
        }
      }
      else if (v9)
      {
        goto LABEL_43;
      }
      ++v6;
      OUTLINED_FUNCTION_13();
      if (v5 == v6)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    OUTLINED_FUNCTION_0_3();
    result = OUTLINED_FUNCTION_11_1();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_41:
    Array<A>.nonTerminals()();
    v27 = v26;
    OUTLINED_FUNCTION_123();
    return v27;
  }
  return result;
}

TokenGenerationCore::Rule __swiftcall Rule.init(nonterminal:_:)(TokenGenerationCore::NonTerminalSymbol nonterminal, Swift::OpaquePointer _)
{
  _QWORD *v2;
  uint64_t v3;
  TokenGenerationCore::Rule result;

  v3 = *(_QWORD *)(nonterminal.identifier._countAndFlagsBits + 8);
  *v2 = *(_QWORD *)nonterminal.identifier._countAndFlagsBits;
  v2[1] = v3;
  v2[2] = nonterminal.identifier._object;
  result.symbol = nonterminal;
  result.expression.choices = _;
  return result;
}

void Array<A>.nonTerminals()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_25_1();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v23 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  if (v8)
  {
    OUTLINED_FUNCTION_65_0();
    v10 = v1 + v9;
    v12 = *(_QWORD *)(v11 + 72);
    v23[1] = v1;
    OUTLINED_FUNCTION_165();
    v13 = MEMORY[0x24BEE4AF8];
    v24 = v12;
    v25 = v2;
    do
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0(v10, (uint64_t)v7, type metadata accessor for Symbol);
      v14 = OUTLINED_FUNCTION_78_0();
      _s19TokenGenerationCore7GrammarVWOcTm_0(v14, v15, type metadata accessor for Symbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v16 = *v5;
        v17 = v5[1];
        OUTLINED_FUNCTION_115_1((uint64_t)v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_60_1();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v13 = v21;
        }
        v19 = *(_QWORD *)(v13 + 16);
        v18 = *(_QWORD *)(v13 + 24);
        if (v19 >= v18 >> 1)
        {
          OUTLINED_FUNCTION_80_1(v18);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v13 = v22;
        }
        *(_QWORD *)(v13 + 16) = v19 + 1;
        v20 = v13 + 16 * v19;
        *(_QWORD *)(v20 + 32) = v16;
        *(_QWORD *)(v20 + 40) = v17;
        v12 = v24;
      }
      else
      {
        OUTLINED_FUNCTION_115_1((uint64_t)v5);
        OUTLINED_FUNCTION_115_1((uint64_t)v7);
      }
      v10 += v12;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_1();
}

void Array<A>.terminals()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalSymbol?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = OUTLINED_FUNCTION_54_0();
  v34 = *(_QWORD *)(v36 - 8);
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_84_1();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v33 = (uint64_t)&v30 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v32 = (uint64_t)&v30 - v10;
  v37 = OUTLINED_FUNCTION_25_1();
  v11 = MEMORY[0x24BDAC7A8](v37);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(v2 + 16);
  if (v16)
  {
    OUTLINED_FUNCTION_65_0();
    v18 = v2 + v17;
    v35 = *(_QWORD *)(v19 + 72);
    v30 = v2;
    OUTLINED_FUNCTION_38_0();
    v20 = MEMORY[0x24BEE4AF8];
    v31 = v0;
    do
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0(v18, (uint64_t)v15, type metadata accessor for Symbol);
      _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v15, (uint64_t)v13, type metadata accessor for Symbol);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined destroy of Grammar((uint64_t)v13, type metadata accessor for Symbol);
        v21 = 1;
      }
      else
      {
        v22 = v33;
        OUTLINED_FUNCTION_99_1((uint64_t)v13, v33);
        OUTLINED_FUNCTION_99_1(v22, (uint64_t)v5);
        v21 = 0;
      }
      v23 = v36;
      __swift_storeEnumTagSinglePayload((uint64_t)v5, v21, 1, v36);
      outlined destroy of Grammar((uint64_t)v15, type metadata accessor for Symbol);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v23) == 1)
      {
        outlined destroy of (Locale?, Locale?)((uint64_t)v5, &demangling cache variable for type metadata for TerminalSymbol?);
      }
      else
      {
        v24 = v32;
        OUTLINED_FUNCTION_99_1((uint64_t)v5, v32);
        OUTLINED_FUNCTION_99_1(v24, v0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_60_1();
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        v26 = *(_QWORD *)(v20 + 16);
        v25 = *(_QWORD *)(v20 + 24);
        if (v26 >= v25 >> 1)
        {
          OUTLINED_FUNCTION_80_1(v25);
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        *(_QWORD *)(v20 + 16) = v26 + 1;
        OUTLINED_FUNCTION_65_0();
        v29 = v20 + v27 + *(_QWORD *)(v28 + 72) * v26;
        v0 = v31;
        outlined init with take of Grammar(v31, v29, type metadata accessor for TerminalSymbol);
      }
      v18 += v35;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_8_1();
}

void Grammar.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  OUTLINED_FUNCTION_6_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63_0();
  v3 = *(_QWORD *)(v1 + 32);
  v4 = MEMORY[0x24BEE4AF8];
  v33 = MEMORY[0x24BEE4AF8];
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v30 = v0;
    v6 = (_OWORD *)(swift_bridgeObjectRetain() + 40);
    v7 = 0x2577D1000uLL;
    v8 = &demangling cache variable for type metadata for CharacterSet?;
    v9 = &unk_2577DA000;
    while (1)
    {
      v10 = *((_QWORD *)v6 - 1);
      v32 = *v6;
      v11 = *(_QWORD *)(v7 + 936);
      OUTLINED_FUNCTION_107_0();
      swift_bridgeObjectRetain();
      if (v11 != -1)
        swift_once();
      v12 = v9[22];
      if (!*(_QWORD *)(v12 + 16))
        break;
      OUTLINED_FUNCTION_107_0();
      v31 = v10;
      v13 = specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v14 & 1) != 0)
      {
        v15 = v13;
        v16 = v9;
        v17 = v8;
        v18 = v7;
        v19 = *(_QWORD *)(v12 + 56);
        v20 = OUTLINED_FUNCTION_79_0();
        v21 = *(_QWORD *)(v20 - 8);
        v22 = v19 + *(_QWORD *)(v21 + 72) * v15;
        v7 = v18;
        v8 = v17;
        v9 = v16;
        v0 = v30;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v30, v22, v20);
        v23 = v30;
        v24 = 0;
      }
      else
      {
        v20 = OUTLINED_FUNCTION_79_0();
        v23 = v0;
        v24 = 1;
      }
      __swift_storeEnumTagSinglePayload(v23, v24, 1, v20);
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_79_0();
      v10 = v31;
      if (__swift_getEnumTagSinglePayload(v0, 1, v20) == 1)
        goto LABEL_11;
      OUTLINED_FUNCTION_111_1();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7();
LABEL_17:
      v6 = (_OWORD *)((char *)v6 + 24);
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        v4 = v33;
        goto LABEL_19;
      }
    }
    v25 = OUTLINED_FUNCTION_79_0();
    __swift_storeEnumTagSinglePayload(v0, 1, 1, v25);
LABEL_11:
    OUTLINED_FUNCTION_111_1();
    v26 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v26 = v33;
    }
    v28 = *(_QWORD *)(v26 + 16);
    v27 = *(_QWORD *)(v26 + 24);
    if (v28 >= v27 >> 1)
    {
      OUTLINED_FUNCTION_80_1(v27);
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v26 = v33;
    }
    *(_QWORD *)(v26 + 16) = v28 + 1;
    v29 = v26 + 24 * v28;
    *(_QWORD *)(v29 + 32) = v10;
    *(_OWORD *)(v29 + 40) = v32;
    goto LABEL_17;
  }
LABEL_19:
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19TokenGenerationCore4RuleVG_SSs5NeverOTg504_s19de35Core7GrammarV11descriptionSSvgSSAA4G53Vcfu_32dd3a78f75bedf894b6433eb10654a64fAFSSTf3nnnpk_nTf1cn_n(v4);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_114_1();
  OUTLINED_FUNCTION_8_1();
}

uint64_t Grammar.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_4();
  v0 = OUTLINED_FUNCTION_27();
  specialized Array<A>.hash(into:)(v0, v1);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_27();
  String.hash(into:)();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_75();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_79_0();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
  dispatch thunk of Hashable.hash(into:)();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  specialized Array<A>.hash(into:)();
  return swift_bridgeObjectRelease();
}

void static Grammar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;

  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)a1, *(_QWORD **)a2) & 1) == 0)
    goto LABEL_11;
  v4 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (!v4 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
    goto LABEL_11;
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_88_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_78_0();
  specialized static Array<A>.== infix(_:_:)();
  v6 = v5;
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_40_0();
  if ((v6 & 1) == 0)
    goto LABEL_11;
  if ((specialized static Array<A>.== infix(_:_:)() & 1) != 0
    && (OUTLINED_FUNCTION_10_1(), (static CharacterSet.== infix(_:_:)() & 1) != 0))
  {
    specialized static Array<A>.== infix(_:_:)();
  }
  else
  {
LABEL_11:
    OUTLINED_FUNCTION_23_0();
  }
}

void static Rule.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_165();
    specialized static Array<A>.== infix(_:_:)();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_15_1();
  }
  OUTLINED_FUNCTION_99();
}

void Grammar.hashValue.getter()
{
  Grammar.hashValue.getter((void (*)(_BYTE *))Grammar.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(a1, a2, a3, (void (*)(_BYTE *))Grammar.hash(into:));
}

uint64_t Rule.symbol.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Rule.expression.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t Rule.hash(into:)()
{
  OUTLINED_FUNCTION_38_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  specialized Array<A>.hash(into:)();
  return OUTLINED_FUNCTION_19_2();
}

void static Expression.== infix(_:_:)()
{
  specialized static Array<A>.== infix(_:_:)();
}

void Rule.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_123_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Rule()
{
  OUTLINED_FUNCTION_31_1();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_123_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

void Symbol.isTerminal.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_5();
  _s19TokenGenerationCore7GrammarVWOcTm_0(v0, v1, type metadata accessor for Symbol);
  swift_getEnumCaseMultiPayload();
  v3 = OUTLINED_FUNCTION_78_0();
  outlined destroy of Grammar(v3, v4);
  OUTLINED_FUNCTION_99();
}

void Symbol.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;

  type metadata accessor for TerminalSymbol(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_33_1(v4, v5, v8);
  if (OUTLINED_FUNCTION_131_1() == 1)
  {
    Hasher._combine(_:)(1uLL);
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_27_1();
    OUTLINED_FUNCTION_40_0();
  }
  else
  {
    outlined init with take of Grammar(v1, v0, type metadata accessor for TerminalSymbol);
    OUTLINED_FUNCTION_119_1();
    TerminalSymbol.hash(into:)();
    v6 = OUTLINED_FUNCTION_110_1();
    outlined destroy of Grammar(v6, v7);
  }
}

void static Symbol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  uint64_t v48;

  OUTLINED_FUNCTION_6_1();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  type metadata accessor for TerminalSymbol(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_25_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_23_1();
  v34 = (uint64_t *)(v32 - v33);
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&a9 - v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Symbol, Symbol));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_62_1();
  _s19TokenGenerationCore7GrammarVWOcTm_0(v27, v20, type metadata accessor for Symbol);
  _s19TokenGenerationCore7GrammarVWOcTm_0(v25, (uint64_t)v21, type metadata accessor for Symbol);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v43 = OUTLINED_FUNCTION_110_1();
    _s19TokenGenerationCore7GrammarVWOcTm_0(v43, v44, v45);
    if (OUTLINED_FUNCTION_117_1() != 1)
    {
      outlined init with take of Grammar((uint64_t)v21, (uint64_t)v30, type metadata accessor for TerminalSymbol);
      static TerminalSymbol.== infix(_:_:)();
      outlined destroy of Grammar((uint64_t)v30, type metadata accessor for TerminalSymbol);
      v46 = OUTLINED_FUNCTION_117_0();
      outlined destroy of Grammar(v46, v47);
      OUTLINED_FUNCTION_37_1(v48, type metadata accessor for Symbol);
      goto LABEL_15;
    }
    outlined destroy of Grammar((uint64_t)v37, type metadata accessor for TerminalSymbol);
    goto LABEL_11;
  }
  _s19TokenGenerationCore7GrammarVWOcTm_0(v20, (uint64_t)v34, type metadata accessor for Symbol);
  v40 = *v34;
  v39 = v34[1];
  if (OUTLINED_FUNCTION_117_1() != 1)
  {
    OUTLINED_FUNCTION_123();
LABEL_11:
    outlined destroy of (Locale?, Locale?)(v20, &demangling cache variable for type metadata for (Symbol, Symbol));
    goto LABEL_15;
  }
  if (v40 == *v21 && v39 == v21[1])
  {
    v42 = OUTLINED_FUNCTION_40_0();
  }
  else
  {
    OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_123();
    v42 = OUTLINED_FUNCTION_25_0();
  }
  OUTLINED_FUNCTION_37_1(v42, type metadata accessor for Symbol);
LABEL_15:
  OUTLINED_FUNCTION_8_1();
}

void static TerminalSymbol.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_6_1();
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_79_0();
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  OUTLINED_FUNCTION_50();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_84_1();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v28 - v13);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (uint64_t *)((char *)&v28 - v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_88_1(v7, v0);
  OUTLINED_FUNCTION_88_1(v5, (uint64_t)v3);
  OUTLINED_FUNCTION_110_1();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(v0, (uint64_t)v16, type metadata accessor for TerminalSymbol);
    v20 = *v16;
    v19 = v16[1];
    if (!OUTLINED_FUNCTION_73_1())
      goto LABEL_4;
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(v0, v2, type metadata accessor for TerminalSymbol);
    if (OUTLINED_FUNCTION_73_1() == 2)
    {
      v23 = v28;
      v24 = v3;
      v25 = v29;
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 32))(v1, v24, v29);
      static CharacterSet.== infix(_:_:)();
      v26 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v26(v1, v25);
      v27 = ((uint64_t (*)(uint64_t, uint64_t))v26)(v2, v25);
      OUTLINED_FUNCTION_37_1(v27, type metadata accessor for TerminalSymbol);
      goto LABEL_17;
    }
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v2, v29);
LABEL_14:
    outlined destroy of (Locale?, Locale?)(v0, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
    goto LABEL_17;
  }
  _s19TokenGenerationCore7GrammarVWOcTm_0(v0, (uint64_t)v14, type metadata accessor for TerminalSymbol);
  v20 = *v14;
  v19 = v14[1];
  if (OUTLINED_FUNCTION_73_1() != 1)
  {
LABEL_10:
    OUTLINED_FUNCTION_123();
    goto LABEL_14;
  }
LABEL_4:
  if (v20 == *v3 && v19 == v3[1])
  {
    v22 = OUTLINED_FUNCTION_40_0();
  }
  else
  {
    OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_37_0();
    v22 = OUTLINED_FUNCTION_123();
  }
  OUTLINED_FUNCTION_37_1(v22, type metadata accessor for TerminalSymbol);
LABEL_17:
  OUTLINED_FUNCTION_8_1();
}

void Symbol.hashValue.getter()
{
  Grammar.hashValue.getter((void (*)(_BYTE *))Symbol.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Symbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(a1, a2, a3, (void (*)(_BYTE *))Symbol.hash(into:));
}

uint64_t closure #1 in TerminalSymbol.contains(_:)()
{
  return CharacterSet.contains(_:)() & 1;
}

uint64_t _s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0()
{
  return CharacterSet.contains(_:)() & 1;
}

uint64_t TerminalSymbol.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  int EnumCaseMultiPayload;

  v3 = OUTLINED_FUNCTION_79_0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5();
  _s19TokenGenerationCore7GrammarVWOcTm_0(v0, v2, v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_27_1();
    return OUTLINED_FUNCTION_25_0();
  }
  if (EnumCaseMultiPayload == 1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
    return OUTLINED_FUNCTION_25_0();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v2, v3);
  Hasher._combine(_:)(2uLL);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
}

void TerminalSymbol.hashValue.getter()
{
  Grammar.hashValue.getter((void (*)(_BYTE *))TerminalSymbol.hash(into:));
}

void Grammar.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v2[72];

  OUTLINED_FUNCTION_97();
  a1(v2);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TerminalSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(a1, a2, a3, (void (*)(_BYTE *))TerminalSymbol.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Grammar(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v5[72];

  OUTLINED_FUNCTION_31_1();
  a4(v5);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t NonTerminalSymbol.identifier.getter()
{
  OUTLINED_FUNCTION_4();
  return OUTLINED_FUNCTION_27();
}

uint64_t NonTerminalSymbol.hash(into:)()
{
  OUTLINED_FUNCTION_4();
  String.hash(into:)();
  return OUTLINED_FUNCTION_19_2();
}

void NonTerminalSymbol.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_95_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NonTerminalSymbol()
{
  OUTLINED_FUNCTION_31_1();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_95_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, unint64_t a2)
{
  return specialized Sequence.forEach(_:)(a1, a2);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = result & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v4 = result;
    swift_bridgeObjectRetain();
    v5 = 0;
    do
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        OUTLINED_FUNCTION_128_1();
      }
      else
      {
        if ((a2 & 0x2000000000000000) == 0 && (v4 & 0x1000000000000000) == 0)
          OUTLINED_FUNCTION_134_1();
        _decodeScalar(_:startingAt:)();
      }
      v5 += v6;
      CharacterSet.insert(_:)();
    }
    while (v5 < v2);
    return OUTLINED_FUNCTION_37_0();
  }
  return result;
}

uint64_t Expression.hash(into:)(uint64_t a1)
{
  return Expression.hash(into:)(a1, (void (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

void Expression.hashValue.getter()
{
  Expression.hashValue.getter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_97();
  v0 = OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_122_1(v0);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Expression()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Expression();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_31_1();
  v0 = OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_122_1(v0);
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t Choice.sequence.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*Choice.sequence.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Choice.hash(into:)(uint64_t a1)
{
  return Expression.hash(into:)(a1, (void (*)(uint64_t, uint64_t))specialized Array<A>.hash(into:));
}

uint64_t Expression.hash(into:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  OUTLINED_FUNCTION_4();
  a2(a1, v5);
  return OUTLINED_FUNCTION_19_2();
}

void static Choice.== infix(_:_:)()
{
  specialized static Array<A>.== infix(_:_:)();
}

void Choice.hashValue.getter()
{
  Expression.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Choice()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Expression();
}

void InvalidGrammar.description.getter()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
LABEL_5:
    OUTLINED_FUNCTION_36_0();
  }
  OUTLINED_FUNCTION_73();
}

void InvalidGrammar.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;

  if (!*(_BYTE *)(v0 + 16))
  {
    v1 = 1;
    goto LABEL_5;
  }
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v1 = 2;
LABEL_5:
    Hasher._combine(_:)(v1);
    String.hash(into:)();
    return;
  }
  Hasher._combine(_:)(0);
  OUTLINED_FUNCTION_99();
}

uint64_t static InvalidGrammar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    if (v4 == 1)
    {
      if (v7 == 1)
      {
        if (v3 == v6 && v2 == v5)
          v9 = 1;
        else
          v9 = OUTLINED_FUNCTION_28_1();
        outlined copy of InvalidGrammar(v6, v5, 1u);
        outlined copy of InvalidGrammar(v3, v2, 1u);
        outlined consume of InvalidGrammar(v3, v2, 1u);
        v14 = v6;
        v15 = v5;
        v16 = 1;
LABEL_25:
        outlined consume of InvalidGrammar(v14, v15, v16);
        return v9 & 1;
      }
    }
    else if (v7 == 2 && (v5 | v6) == 0)
    {
      v12 = OUTLINED_FUNCTION_78_0();
      outlined consume of InvalidGrammar(v12, v13, 2u);
      outlined consume of InvalidGrammar(0, 0, 2u);
      v9 = 1;
      return v9 & 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 16))
  {
    if (v3 == v6 && v2 == v5)
      v9 = 1;
    else
      v9 = OUTLINED_FUNCTION_28_1();
    outlined copy of InvalidGrammar(v6, v5, 0);
    outlined copy of InvalidGrammar(v3, v2, 0);
    outlined consume of InvalidGrammar(v3, v2, 0);
    v14 = v6;
    v15 = v5;
    v16 = 0;
    goto LABEL_25;
  }
  outlined copy of InvalidGrammar(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v7);
  outlined copy of InvalidGrammar(v3, v2, v4);
  outlined consume of InvalidGrammar(v3, v2, v4);
  outlined consume of InvalidGrammar(v6, v5, v7);
  v9 = 0;
  return v9 & 1;
}

void InvalidGrammar.hashValue.getter()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  OUTLINED_FUNCTION_97();
  if (v1)
  {
    if (v1 != 1)
    {
      OUTLINED_FUNCTION_119_1();
      goto LABEL_7;
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  OUTLINED_FUNCTION_27_1();
LABEL_7:
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvalidGrammar()
{
  uint64_t v0;
  int v1;
  Swift::UInt v2;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_74_1();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (v2 + 24 * v1 <= v0 || v0 + 24 * v1 <= v2)
      return OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  OUTLINED_FUNCTION_74_1();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_116_1();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_74_1();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (v2 + 8 * v1 <= v0 || v0 + 8 * v1 <= v2)
      return OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_74_1();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (v2 + 40 * v1 <= v0 || v0 + 40 * v1 <= v2)
      return OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  OUTLINED_FUNCTION_74_1();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_116_1();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return OUTLINED_FUNCTION_7_3();
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_66_1();
    if (v4 + 40 * v3 <= v2 || v2 + 40 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (number: Int, line: Substring));
      OUTLINED_FUNCTION_10_2();
      return OUTLINED_FUNCTION_2_2();
    }
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_67_1();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NonTerminalSymbol, Int));
      OUTLINED_FUNCTION_10_2();
      return OUTLINED_FUNCTION_2_2();
    }
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_66_1();
    if (v4 + 32 * v3 <= v2 || v2 + 32 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
      OUTLINED_FUNCTION_10_2();
      return OUTLINED_FUNCTION_2_2();
    }
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_66_1();
    v6 = *(_QWORD *)(*(_QWORD *)(v5(0) - 8) + 72) * v2;
    v7 = v3 + v6;
    v8 = v4 + v6;
    if (v7 <= v4 || v8 <= v3)
    {
      OUTLINED_FUNCTION_10_2();
      return OUTLINED_FUNCTION_2_2();
    }
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    OUTLINED_FUNCTION_67_1();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenID: Int, tokenText: String));
      OUTLINED_FUNCTION_10_2();
      return OUTLINED_FUNCTION_2_2();
    }
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, uint64_t a2, char *a3)
{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (&a3[8 * a2] <= a1 || &a1[8 * a2] <= a3)
      return OUTLINED_FUNCTION_30_0(a3, a1, 8 * a2);
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = (void *)OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (&a3[24 * a2] <= a1 || &a1[24 * a2] <= a3)
      return OUTLINED_FUNCTION_30_0(a3, a1, 24 * a2);
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = (void *)OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)()
{
  char *v0;
  size_t v1;
  char *v2;
  uint64_t v3;
  void *result;

  OUTLINED_FUNCTION_74_1();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_68_0();
  }
  else
  {
    if (&v2[v1] <= v0 || &v0[v1] <= v2)
      return OUTLINED_FUNCTION_30_0(v2, v0, v1);
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_67_0();
  }
  result = (void *)OUTLINED_FUNCTION_11_1();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_96_1();
  OUTLINED_FUNCTION_86();
  v0 = OUTLINED_FUNCTION_78_0();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1, v2);
}

uint64_t type metadata accessor for Grammar(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Grammar);
}

uint64_t type metadata accessor for Symbol(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type InvalidGrammar and conformance InvalidGrammar()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar;
  if (!lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for InvalidGrammar, &type metadata for InvalidGrammar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar;
  if (!lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for InvalidGrammar, &type metadata for InvalidGrammar);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvalidGrammar and conformance InvalidGrammar);
  }
  return result;
}

uint64_t sub_248C139F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in Overridable<A>.init(key:)()
{
  closure #1 in Overridable<A>.init(key:)();
}

{
  closure #1 in Overridable<A>.init(key:)();
}

uint64_t outlined release of GuidedGenerationOverrides(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v6;

  v6 = *(void **)a1;
  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 96);
  v4 = *(void **)(a1 + 144);
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t outlined retain of GuidedGenerationOverrides(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = *(void **)(a1 + 48);
  v3 = *(void **)(a1 + 96);
  v4 = *(void **)(a1 + 144);
  v5 = *(id *)a1;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  v8 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
  Swift::Int v0;

  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_96_1();
  OUTLINED_FUNCTION_25_0();
  v0 = OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_77_1(v0);
  OUTLINED_FUNCTION_137_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_61_1();
  type metadata accessor for GenerationSchema.Field();
  OUTLINED_FUNCTION_129_1(&lazy protocol witness table cache variable for type GenerationSchema.Field and conformance GenerationSchema.Field, v0, MEMORY[0x24BE3B5E8]);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_17_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_61_1();
  type metadata accessor for GenerationSchema();
  OUTLINED_FUNCTION_129_1((unint64_t *)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, v0, MEMORY[0x24BE3B660]);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_17_0();
}

{
  Swift::Int v0;

  OUTLINED_FUNCTION_20_0();
  String.hash(into:)();
  v0 = OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_77_1(v0);
  OUTLINED_FUNCTION_137_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_129_1(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, v0, MEMORY[0x24BDCB760]);
  OUTLINED_FUNCTION_40_1();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_17_0();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))TerminalSymbol.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(_BYTE *))Prompt.SpecialToken.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(_BYTE *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;
  _BYTE v8[72];

  OUTLINED_FUNCTION_31_1();
  a2(v8);
  v5 = OUTLINED_FUNCTION_86();
  return a3(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int EnumCaseMultiPayload;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  v53 = a1;
  v5 = type metadata accessor for CharacterSet();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TerminalSymbol(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v48 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v45 = (uint64_t *)((char *)&v42 - v14);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v44 = (uint64_t *)((char *)&v42 - v16);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v42 - v18;
  v51 = v3 + 64;
  v52 = v3;
  v20 = -1 << *(_BYTE *)(v3 + 32);
  v21 = a2 & ~v20;
  if (((*(_QWORD *)(v3 + 64 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
    return v21;
  v49 = ~v20;
  v50 = *(_QWORD *)(v17 + 72);
  v22 = (uint64_t)v48;
  while (1)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(*(_QWORD *)(v52 + 48) + v50 * v21, (uint64_t)v19, type metadata accessor for TerminalSymbol);
    v23 = &v9[*(int *)(v7 + 48)];
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v19, (uint64_t)v9, type metadata accessor for TerminalSymbol);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v53, (uint64_t)v23, type metadata accessor for TerminalSymbol);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
    {
      v32 = v44;
      _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, (uint64_t)v44, type metadata accessor for TerminalSymbol);
      v26 = *v32;
      v27 = v32[1];
      if (!swift_getEnumCaseMultiPayload())
        goto LABEL_6;
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_18:
      outlined destroy of (Locale?, Locale?)((uint64_t)v9, &demangling cache variable for type metadata for (TerminalSymbol, TerminalSymbol));
      goto LABEL_19;
    }
    if (EnumCaseMultiPayload != 1)
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, v22, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v33 = v46;
        v34 = v7;
        v35 = v43;
        v36 = v23;
        v37 = v47;
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v43, v36, v47);
        v38 = static CharacterSet.== infix(_:_:)();
        v39 = *(void (**)(char *, uint64_t))(v33 + 8);
        v40 = v35;
        v7 = v34;
        v22 = (uint64_t)v48;
        v39(v40, v37);
        v39((char *)v22, v37);
        if ((v38 & 1) != 0)
          goto LABEL_22;
        goto LABEL_16;
      }
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v22, v47);
      goto LABEL_18;
    }
    v25 = v45;
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, (uint64_t)v45, type metadata accessor for TerminalSymbol);
    v26 = *v25;
    v27 = v25[1];
    if (swift_getEnumCaseMultiPayload() != 1)
      goto LABEL_13;
LABEL_6:
    v28 = *(_QWORD *)v23;
    v29 = *((_QWORD *)v23 + 1);
    if (v26 == v28 && v27 == v29)
      break;
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      goto LABEL_22;
LABEL_16:
    outlined destroy of Grammar((uint64_t)v9, type metadata accessor for TerminalSymbol);
LABEL_19:
    outlined destroy of Grammar((uint64_t)v19, type metadata accessor for TerminalSymbol);
    v21 = (v21 + 1) & v49;
    if (((*(_QWORD *)(v51 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      return v21;
  }
  swift_bridgeObjectRelease_n();
LABEL_22:
  outlined destroy of Grammar((uint64_t)v9, type metadata accessor for TerminalSymbol);
  outlined destroy of Grammar((uint64_t)v19, type metadata accessor for TerminalSymbol);
  return v21;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

void specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  BOOL v17;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  OUTLINED_FUNCTION_127_1();
  if ((v8 & 1) != 0)
  {
    v9 = v7;
    v10 = v6;
    v11 = *(_QWORD *)(v3 + 48);
    v12 = (_QWORD *)(v11 + 16 * v5);
    v13 = *v12 == v6 && v12[1] == v7;
    if (!v13 && (OUTLINED_FUNCTION_41_0() & 1) == 0)
    {
      v14 = ~v4;
      do
      {
        v5 = (v5 + 1) & v14;
        OUTLINED_FUNCTION_127_1();
        if ((v15 & 1) == 0)
          break;
        v16 = (_QWORD *)(v11 + 16 * v5);
        v17 = *v16 == v10 && v16[1] == v9;
      }
      while (!v17 && (OUTLINED_FUNCTION_41_0() & 1) == 0);
    }
  }
  OUTLINED_FUNCTION_17_0();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_6_1();
  v25 = v1;
  v26 = v2;
  v23 = v3;
  v24 = v4;
  v5 = v0;
  v7 = v6;
  v21 = v8;
  v22 = v9;
  v10 = v9(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - v12;
  v14 = -1 << *(_BYTE *)(v5 + 32);
  v15 = v7 & ~v14;
  if (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v16 = ~v14;
    v17 = *(_QWORD *)(v11 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    do
    {
      v18(v13, *(_QWORD *)(v5 + 48) + v17 * v15, v10);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v19 & 1) != 0)
        break;
      v15 = (v15 + 1) & v16;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  return v15;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = v2;
  v6 = type metadata accessor for Locale();
  v38 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x24BDAC7A8](v40);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - v13;
  v45 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x24BDAC7A8](v45);
  v17 = (_QWORD **)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = v3 + 64;
  v44 = v3;
  v18 = -1 << *(_BYTE *)(v3 + 32);
  v19 = a2 & ~v18;
  if (((*(_QWORD *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v41 = ~v18;
    v42 = *(_QWORD *)(v15 + 72);
    v36 = a1;
    do
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0(*(_QWORD *)(v44 + 48) + v42 * v19, (uint64_t)v17, type metadata accessor for Prompt.SpecialToken);
      v20 = *v17 == *a1 && v17[1] == a1[1];
      if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        goto LABEL_24;
      v21 = *(int *)(v45 + 20);
      v22 = (uint64_t)v17 + v21;
      outlined init with copy of Locale?((uint64_t)a1 + v21, (uint64_t)v14);
      v23 = (uint64_t)&v9[*(int *)(v40 + 48)];
      outlined init with copy of Locale?(v22, (uint64_t)v9);
      outlined init with copy of Locale?((uint64_t)v14, v23);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v6) == 1)
      {
        outlined destroy of (Locale?, Locale?)((uint64_t)v14, &demangling cache variable for type metadata for Locale?);
        if (__swift_getEnumTagSinglePayload(v23, 1, v6) != 1)
          goto LABEL_13;
        outlined destroy of (Locale?, Locale?)((uint64_t)v9, &demangling cache variable for type metadata for Locale?);
      }
      else
      {
        v24 = (uint64_t)v39;
        outlined init with copy of Locale?((uint64_t)v9, (uint64_t)v39);
        if (__swift_getEnumTagSinglePayload(v23, 1, v6) == 1)
        {
          outlined destroy of (Locale?, Locale?)((uint64_t)v14, &demangling cache variable for type metadata for Locale?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v24, v6);
LABEL_13:
          outlined destroy of (Locale?, Locale?)((uint64_t)v9, &demangling cache variable for type metadata for (Locale?, Locale?));
          goto LABEL_24;
        }
        v26 = v37;
        v25 = v38;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v37, v23, v6);
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
        a1 = v36;
        v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        v28 = *(void (**)(char *, uint64_t))(v25 + 8);
        v28(v26, v6);
        outlined destroy of (Locale?, Locale?)((uint64_t)v14, &demangling cache variable for type metadata for Locale?);
        v28(v39, v6);
        outlined destroy of (Locale?, Locale?)((uint64_t)v9, &demangling cache variable for type metadata for Locale?);
        if ((v27 & 1) == 0)
          goto LABEL_24;
      }
      v29 = *(int *)(v45 + 24);
      v30 = (_QWORD *)((char *)v17 + v29);
      v31 = *(_QWORD *)((char *)v17 + v29 + 8);
      v32 = (_QWORD *)((char *)a1 + v29);
      v33 = v32[1];
      if (v31)
      {
        if (v33)
        {
          v34 = *v30 == *v32 && v31 == v33;
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_26:
            outlined destroy of Grammar((uint64_t)v17, type metadata accessor for Prompt.SpecialToken);
            return v19;
          }
        }
      }
      else if (!v33)
      {
        goto LABEL_26;
      }
LABEL_24:
      outlined destroy of Grammar((uint64_t)v17, type metadata accessor for Prompt.SpecialToken);
      v19 = (v19 + 1) & v41;
    }
    while (((*(_QWORD *)(v43 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0);
  }
  return v19;
}

void lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x2495A8E14](a3, v5), a1);
  }
  OUTLINED_FUNCTION_23();
}

uint64_t outlined copy of InvalidGrammar(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of InvalidGrammar(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 1u)
    return swift_bridgeObjectRelease();
  return result;
}

void base witness table accessor for Equatable in Grammar()
{
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Grammar and conformance Grammar, type metadata accessor for Grammar, (uint64_t)&protocol conformance descriptor for Grammar);
}

unint64_t lazy protocol witness table accessor for type Rule and conformance Rule()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rule and conformance Rule;
  if (!lazy protocol witness table cache variable for type Rule and conformance Rule)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Rule, &type metadata for Rule);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rule and conformance Rule);
  }
  return result;
}

void base witness table accessor for Equatable in Symbol()
{
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Symbol and conformance Symbol, type metadata accessor for Symbol, (uint64_t)&protocol conformance descriptor for Symbol);
}

void instantiation function for generic protocol witness table for TerminalSymbol(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, type metadata accessor for TerminalSymbol, (uint64_t)&protocol conformance descriptor for TerminalSymbol);
  *(_QWORD *)(a1 + 8) = v2;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, type metadata accessor for TerminalSymbol, (uint64_t)&protocol conformance descriptor for TerminalSymbol);
  *(_QWORD *)(a1 + 16) = v3;
}

void base witness table accessor for Equatable in TerminalSymbol()
{
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type TerminalSymbol and conformance TerminalSymbol, type metadata accessor for TerminalSymbol, (uint64_t)&protocol conformance descriptor for TerminalSymbol);
}

unint64_t instantiation function for generic protocol witness table for NonTerminalSymbol(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  result = lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for NonTerminalSymbol, &type metadata for NonTerminalSymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for NonTerminalSymbol, &type metadata for NonTerminalSymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol;
  if (!lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for NonTerminalSymbol, &type metadata for NonTerminalSymbol);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NonTerminalSymbol and conformance NonTerminalSymbol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Expression and conformance Expression()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Expression and conformance Expression;
  if (!lazy protocol witness table cache variable for type Expression and conformance Expression)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Expression, &type metadata for Expression);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Expression and conformance Expression);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Choice and conformance Choice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Choice and conformance Choice;
  if (!lazy protocol witness table cache variable for type Choice and conformance Choice)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Choice, &type metadata for Choice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Choice and conformance Choice);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Grammar(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  char *v15;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    v10 = *(int *)(a3 + 28);
    v15 = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for CharacterSet();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v15, v11, v12);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Grammar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v8;
  v9 = (char *)a2 + v8;
  v10 = type metadata accessor for CharacterSet();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v13, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Grammar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Grammar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *assignWithTake for Grammar(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Grammar()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248C150D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_99();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_79_0();
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for Grammar()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248C15148(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_99();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_79_0();
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 28), a2, a2, v7);
  }
}

uint64_t type metadata completion function for Grammar()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Rule()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for Rule(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_23();
}

_QWORD *assignWithCopy for Rule(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Rule(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Rule(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Rule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Rule()
{
  OUTLINED_FUNCTION_18();
}

uint64_t *initializeBufferWithCopyOfBuffer for Symbol(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v9 = type metadata accessor for CharacterSet();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      }
      else
      {
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Symbol(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_bridgeObjectRelease();
  type metadata accessor for TerminalSymbol(0);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result != 2)
  {
    if (result > 1)
      return result;
    return swift_bridgeObjectRelease();
  }
  v3 = type metadata accessor for CharacterSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for Symbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for TerminalSymbol(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for CharacterSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Symbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v4 = type metadata accessor for CharacterSet();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Symbol(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for TerminalSymbol(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v7 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Symbol(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for Symbol);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for TerminalSymbol(0);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        v7 = type metadata accessor for CharacterSet();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Symbol()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TerminalSymbol(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TerminalSymbol(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v8 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    else
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TerminalSymbol(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for CharacterSet();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  else if (result <= 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for TerminalSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v5 = type metadata accessor for CharacterSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  }
  else
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TerminalSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v4 = type metadata accessor for CharacterSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TerminalSymbol(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TerminalSymbol);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for TerminalSymbol()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void type metadata accessor for NonTerminalSymbol()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Expression()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Choice()
{
  OUTLINED_FUNCTION_18();
}

uint64_t destroy for InvalidGrammar(uint64_t a1)
{
  return outlined consume of InvalidGrammar(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for InvalidGrammar(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  v6 = OUTLINED_FUNCTION_114_1();
  outlined copy of InvalidGrammar(v6, v7, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InvalidGrammar(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of InvalidGrammar(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of InvalidGrammar(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for InvalidGrammar(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of InvalidGrammar(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidGrammar(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidGrammar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for InvalidGrammar(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for InvalidGrammar(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

void type metadata accessor for InvalidGrammar()
{
  OUTLINED_FUNCTION_18();
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_10_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return type metadata accessor for Symbol(0);
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void *OUTLINED_FUNCTION_30_0(void *__dst, const void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_33_1(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  _s19TokenGenerationCore7GrammarVWOcTm_0(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

void OUTLINED_FUNCTION_36_0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_37_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Grammar(v2, a2);
}

unint64_t OUTLINED_FUNCTION_38_1()
{
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)();
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

id OUTLINED_FUNCTION_42_0()
{
  uint64_t v0;
  uint64_t v1;

  return @nonobjc NSUserDefaults.init(suiteName:)(v0 + 5, v1 | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return type metadata accessor for TerminalSymbol(0);
}

void OUTLINED_FUNCTION_50_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_60_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_71_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_77_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v1, a1);
}

uint64_t OUTLINED_FUNCTION_78_0()
{
  uint64_t v0;

  return v0;
}

BOOL OUTLINED_FUNCTION_80_1@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_88_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s19TokenGenerationCore7GrammarVWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_94_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 336))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_96_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_98_1()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = v1;
  v0[1] = (v2 - 32) | 0x8000000000000000;
}

void OUTLINED_FUNCTION_99_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of Grammar(a1, a2, v2);
}

void OUTLINED_FUNCTION_101_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_102_1(uint64_t a1, int64_t a2)
{
  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1);
}

void OUTLINED_FUNCTION_109_1()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_110_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_111_1()
{
  uint64_t v0;
  uint64_t *v1;

  outlined destroy of (Locale?, Locale?)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_113_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_114_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_115_1(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(a1, v1);
}

uint64_t OUTLINED_FUNCTION_117_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_119_1()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_120_1()
{
  uint64_t v0;

  return outlined release of GuidedGenerationOverrides(v0 - 296);
}

uint64_t OUTLINED_FUNCTION_121_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_122_1(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return v1(va, v2);
}

void OUTLINED_FUNCTION_123_1()
{
  specialized Array<A>.hash(into:)();
}

void OUTLINED_FUNCTION_126_1(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_128_1()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

void OUTLINED_FUNCTION_129_1(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t);

  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_131_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_132_0()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_134_1()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t OUTLINED_FUNCTION_135_1()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t dispatch thunk of CharacterGrammarParser.partialMatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CharacterGrammarParser.fullMatch.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CharacterGrammarParser.lastConsumedCharacter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CharacterGrammarParser.characterSetsUsedInGrammar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CharacterGrammarParser.childParser(consumingCharacter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CharacterGrammarParser.nextValidTerminals()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of CharacterGrammarParser.nextValidTerminalsWithCacheKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of CharacterGrammarParser.optimizeState()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of CharacterGrammarParser.copy()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.childParser(consumingTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_2_3();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_3_3(v1, (uint64_t)dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:));
  return OUTLINED_FUNCTION_1_4(v2, v3, v4, v5);
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:)(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_0_6();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenIDs:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_2_3();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_3_3(v1, (uint64_t)dispatch thunk of TokenizerAwareGrammarParser.accepts(tokenID:));
  return OUTLINED_FUNCTION_1_4(v2, v3, v4, v5);
}

Swift::Bool __swiftcall TokenizerAwareGrammarParser.accepts(tokenID:)(Swift::Int tokenID)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)(v1 - 8);
  v6 = MEMORY[0x24BDAC7A8](tokenID);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v9 + 24))(v6);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v3 & 1;
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenID:) in conformance TokenGrammarParser<A>(Swift::Int a1)
{
  uint64_t v1;
  _BOOL8 v2;

  v2 = TokenizerAwareGrammarParser.accepts(tokenID:)(a1);
  return protocol witness for TokenizerAwareGrammarParser.accepts(tokenID:) in conformance TokenGrammarParser<A>(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenID:) in conformance TokenGrammarParser<A>(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_3_3@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = a2;
  return v3;
}

uint64_t GuidedGenerationConstraints.init(grammarString:tokenizerPath:stopTokenIDs:numParallelTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  *(_BYTE *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  type metadata accessor for Grammar(0);
  *(_QWORD *)(v8 + 72) = OUTLINED_FUNCTION_0_7();
  *(_QWORD *)(v8 + 80) = OUTLINED_FUNCTION_0_7();
  *(_QWORD *)(v8 + 88) = OUTLINED_FUNCTION_0_7();
  return swift_task_switch();
}

uint64_t GuidedGenerationConstraints.init(grammarString:tokenizerPath:stopTokenIDs:numParallelTasks:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v1 = (_QWORD *)static BackusNaurParser.parsedRules(_:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v2 = *(_QWORD **)(v0 + 80);
  swift_bridgeObjectRelease();
  Grammar.init(rules:prependSpaceToRootRule:cacheableResursiveNonTerminals:)(v1, 1, MEMORY[0x24BEE4AF8], v2);
  outlined init with take of Grammar(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  type metadata accessor for TokenizerRunner();
  swift_allocObject();
  TokenizerRunner.init(tokenizerPath:)();
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 16);
  outlined init with copy of Grammar(v4, *(_QWORD *)(v0 + 72));
  GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)();
  outlined destroy of Grammar(v4);
  *(_QWORD *)v5 = v6;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v8;
  *(_BYTE *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 40) = v10;
  *(_BYTE *)(v5 + 48) = v11;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined init with take of Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Grammar(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_7()
{
  return swift_task_alloc();
}

void specialized Dictionary.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Grammar?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Grammar(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_59();
  if (__swift_getEnumTagSinglePayload(a1, 1, v7) == 1)
  {
    outlined destroy of (Locale?, Locale?)(a1, &demangling cache variable for type metadata for Grammar?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v5);
    v8 = type metadata accessor for GenerationSchema();
    OUTLINED_FUNCTION_92_0(v8);
    outlined destroy of (Locale?, Locale?)((uint64_t)v5, &demangling cache variable for type metadata for Grammar?);
  }
  else
  {
    outlined init with take of Grammar(a1, v1);
    specialized Dictionary._Variant.setValue(_:forKey:)();
    v9 = type metadata accessor for GenerationSchema();
    OUTLINED_FUNCTION_92_0(v9);
  }
}

void specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__swift_getEnumTagSinglePayload(a1, 1, v9) == 1)
  {
    outlined destroy of (Locale?, Locale?)(a1, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v22 = *v2;
      v17 = v22;
      *v2 = 0x8000000000000000;
      v18 = *(_QWORD *)(v17 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, (mask: IndexSet, isPotentiallyDeterministic: Bool)>);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
      v19 = v22;
      outlined init with take of (mask: IndexSet, isPotentiallyDeterministic: Bool)(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8);
      _NativeDictionary._delete(at:)();
      *v3 = v19;
      swift_bridgeObjectRelease();
      v20 = 0;
    }
    else
    {
      v20 = 1;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v8, v20, 1, v9);
    outlined destroy of (Locale?, Locale?)((uint64_t)v8, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
  }
  else
  {
    outlined init with take of (mask: IndexSet, isPotentiallyDeterministic: Bool)(a1, (uint64_t)v12);
    specialized Dictionary._Variant.setValue(_:forKey:)();
  }
}

uint64_t Lock.__deallocating_deinit()
{
  uint64_t v0;

  pthread_mutex_destroy(*(pthread_mutex_t **)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self();
}

uint64_t MaskCache.getMask(forHashKey:)(uint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(*(_QWORD *)(v1 + 24) + 16);
  pthread_mutex_lock(v3);
  swift_beginAccess();
  specialized Dictionary.subscript.getter(a1, *(_QWORD *)(v1 + 16));
  swift_endAccess();
  return pthread_mutex_unlock(v3);
}

void MaskCache.setMask(forHashKey:result:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  pthread_mutex_t *v15;
  uint64_t v16;
  uint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_59();
  v13 = type metadata accessor for IndexSet();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v4, a2, v13);
  *(_BYTE *)(v4 + *(int *)(v11 + 48)) = a3;
  v15 = *(pthread_mutex_t **)(*(_QWORD *)(v3 + 24) + 16);
  pthread_mutex_lock(v15);
  v16 = *(int *)(v11 + 48);
  v14((uint64_t)v10, v4, v13);
  v10[v16] = a3;
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, a1);
  swift_endAccess();
  pthread_mutex_unlock(v15);
  outlined destroy of (Locale?, Locale?)(v4, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
}

uint64_t MaskCache.__deallocating_deinit()
{
  MaskCache.deinit((void (*)(_QWORD))MEMORY[0x24BEE4BC0], (void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MaskCache()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for ParserGuidedGenerationConstraints.TokenParserManager()
{
  return swift_initClassMetadata2();
}

void MaskCache.init()()
{
  uint64_t v0;
  uint64_t v1;
  pthread_mutex_t *v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  *(_QWORD *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for Lock();
  v1 = swift_allocObject();
  v2 = (pthread_mutex_t *)swift_slowAlloc();
  *(_QWORD *)(v1 + 16) = v2;
  pthread_mutex_init(v2, 0);
  *(_QWORD *)(v0 + 24) = v1;
  OUTLINED_FUNCTION_23();
}

void MaskCache.deinit(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  OUTLINED_FUNCTION_23();
}

uint64_t ParserGuidedGenerationConstraints.TokenParserManager.__deallocating_deinit()
{
  MaskCache.deinit((void (*)(_QWORD))MEMORY[0x24BEE4EF8], (void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints.TokenParserManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParserGuidedGenerationConstraints.TokenParserManager);
}

uint64_t type metadata instantiation function for SpaceLookaheadMaskGenerator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for SpaceLookaheadMaskGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SpaceLookaheadMaskGenerator);
}

uint64_t type metadata instantiation function for ConstraintsProvider()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ConstraintsProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConstraintsProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for ConstraintsProvider(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t assignWithCopy for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t initializeWithTake for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t assignWithTake for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConstraintsProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_18;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if ((_DWORD)v6)
        return __swift_getEnumTagSinglePayload(a1, v6, v4);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return (v6 + v12 + 1);
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_248C172DC + 4 * byte_248C91980[(v8 - 1)]))();
}

void storeEnumTagSinglePayload for ConstraintsProvider(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = 8 * v8;
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v8 <= 3)
    {
      v14 = ((v11 + ~(-1 << v9)) >> v9) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v15 = v13 & ~(-1 << v9);
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for ConstraintsProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConstraintsProvider);
}

uint64_t type metadata instantiation function for ParserGuidedGenerationConstraints()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ParserGuidedGenerationConstraints()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ParserGuidedGenerationConstraints(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((((v6 + 24) & ~v6) + v7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = (_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v18(v16, v17, v4);
    *(_BYTE *)(v16 + v7) = *(_BYTE *)(v17 + v7);
    v19 = (v16 + v7) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v17 + v7) & 0xFFFFFFFFFFFFFFF8;
    v21 = *(_QWORD *)(v20 + 8);
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
    *(_QWORD *)(v19 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for ParserGuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((((v3 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

_QWORD *initializeWithCopy for ParserGuidedGenerationConstraints(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 24);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  v14(v12, v13, v9);
  v15 = *(_QWORD *)(v10 + 64);
  v16 = v12 + v15;
  v17 = v13 + v15;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v16 &= 0xFFFFFFFFFFFFFFF8;
  v17 &= 0xFFFFFFFFFFFFFFF8;
  v18 = *(_BYTE *)(v17 + 16);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  *(_BYTE *)(v16 + 16) = v18;
  return a1;
}

_QWORD *assignWithCopy for ParserGuidedGenerationConstraints(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  v7 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((v5 & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_retain();
  swift_release();
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = v16;
  return a1;
}

_QWORD *initializeWithTake for ParserGuidedGenerationConstraints(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = (_QWORD *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v7 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = v10 + v12;
  v14 = v11 + v12;
  *(_BYTE *)v13 = *(_BYTE *)v14;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 = *(_BYTE *)(v14 + 16);
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  *(_BYTE *)(v13 + 16) = v15;
  return a1;
}

_QWORD *assignWithTake for ParserGuidedGenerationConstraints(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 &= 0xFFFFFFFFFFFFF8uLL;
  *v6 = *(_QWORD *)v5;
  swift_release();
  v7 = (_QWORD *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v8 + v10 + 8) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  *(_BYTE *)v14 = *(_BYTE *)v15;
  v14 &= 0xFFFFFFFFFFFFFFF8;
  v15 &= 0xFFFFFFFFFFFFFFF8;
  v16 = *(_BYTE *)(v15 + 16);
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_BYTE *)(v14 + 16) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for ParserGuidedGenerationConstraints(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v7 >= a2)
  {
    if ((v6 & 0x80000000) != 0)
    {
      return __swift_getEnumTagSinglePayload(((((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, v6, v4);
    }
    else
    {
      v15 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  else
  {
    v9 = ((((v8 + 24) & ~v8) + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8) + 17;
    v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4)
      v11 = v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_248C17AE4 + 4 * byte_248C9198E[v13]))();
  }
}

void storeEnumTagSinglePayload for ParserGuidedGenerationConstraints(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + *(_QWORD *)(v5 + 64)) & 0xFFFFFFFFFFFFFFF8)
     + 17;
  if (v6 >= a3)
  {
    v10 = 0;
  }
  else
  {
    if (v7 <= 3)
      v8 = ((a3 - v6 + 255) >> (8 * v7)) + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
  }
  if (v6 < a2)
  {
    v11 = ~v6 + a2;
    v12 = (~(_BYTE)v6 + a2);
    if (v7 >= 4)
      v13 = v11;
    else
      v13 = v12;
    bzero(a1, v7);
    if ((_DWORD)v7 == 1)
      *a1 = v13;
    else
      *(_DWORD *)a1 = v13;
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

void sub_248C17CA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x248C17D1CLL);
}

void sub_248C17CB0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x248C17CB8);
  JUMPOUT(0x248C17D1CLL);
}

void sub_248C17CC8()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x248C17D1CLL);
}

void sub_248C17CD0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x248C17D1CLL);
}

void sub_248C17CD8(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x248C17D18);
      JUMPOUT(0x248C17D14);
    }
    JUMPOUT(0x248C17CE4);
  }
  JUMPOUT(0x248C17D1CLL);
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParserGuidedGenerationConstraints);
}

uint64_t type metadata instantiation function for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_23();
}

_QWORD *assignWithCopy for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParserGuidedGenerationConstraints.TokenParserManager.TokenParserCache);
}

uint64_t associated type witness table accessor for LogitMaskGenerating.CharacterParser : CharacterGrammarParser in SpaceLookaheadMaskGenerator<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)();
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v2;
    v9 = *v2;
    *v2 = 0x8000000000000000;
    v10 = *(_QWORD *)(v9 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GenerationSchema, Grammar>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    v11 = *(_QWORD *)(v17 + 48);
    v12 = type metadata accessor for GenerationSchema();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v5, v12);
    v13 = *(_QWORD *)(v17 + 56);
    v14 = type metadata accessor for Grammar(0);
    outlined init with take of Grammar(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v5, a1);
    lazy protocol witness table accessor for type GenerationSchema and conformance GenerationSchema();
    _NativeDictionary._delete(at:)();
    *v2 = v17;
    swift_bridgeObjectRelease();
    return __swift_storeEnumTagSinglePayload(a1, 0, 1, v14);
  }
  else
  {
    v16 = type metadata accessor for Grammar(0);
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v16);
  }
}

uint64_t outlined init with take of (mask: IndexSet, isPotentiallyDeterministic: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2495A8DC0](a1, v6, a5);
}

ValueMetadata *type metadata accessor for SentencePieceVocabularyTextConverter()
{
  return &type metadata for SentencePieceVocabularyTextConverter;
}

uint64_t type metadata accessor for ExhaustiveLogitMaskGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExhaustiveLogitMaskGenerator);
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  swift_beginAccess();
  v7 = 0;
  v15 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v6 == v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (v7 >= *(_QWORD *)(a1 + 16))
      break;
    v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_16;
    if (v8 >= *(_QWORD *)(a3 + 16))
      goto LABEL_17;
    swift_bridgeObjectRetain();
    v9 = specialized TokenGrammarParser.createCharacterParser(consuming:)();
    swift_bridgeObjectRelease();
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_18;
    v10 = *(_QWORD *)(a2 + 56);
    if (v9 >= *(_QWORD *)(v10 + 16))
      goto LABEL_19;
    v11 = *(_QWORD *)(v10 + 16 * v9 + 32);
    swift_beginAccess();
    ++v7;
    if (*(_BYTE *)(v11 + 24) == 1)
    {
      v12 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v12 = v15;
      }
      v13 = *(_QWORD *)(v12 + 16);
      v14 = v13 + 1;
      if (v13 >= *(_QWORD *)(v12 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v14 = v13 + 1;
        v12 = v15;
      }
      *(_QWORD *)(v12 + 16) = v14;
      v15 = v12;
      *(_QWORD *)(v12 + 8 * v13 + 32) = v8;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v5 = 0;
  v6 = MEMORY[0x24BEE4AF8];
  while (v5 < *(_QWORD *)(a1 + 16))
  {
    v7 = *(_QWORD *)(a1 + 32 + 8 * v5++);
    v8 = *(_QWORD *)(a2 + 16);
    if (!v8)
      goto LABEL_13;
    if (*(_QWORD *)(a2 + 32) == v7)
    {
LABEL_6:
      if (v5 == v4)
        goto LABEL_18;
    }
    else
    {
      if (v8 != 1)
      {
        v9 = 5;
        while (1)
        {
          v10 = v9 - 3;
          if (__OFADD__(v9 - 4, 1))
            break;
          if (*(_QWORD *)(a2 + 8 * v9) == v7)
            goto LABEL_6;
          ++v9;
          if (v10 == v8)
            goto LABEL_13;
        }
        __break(1u);
        break;
      }
LABEL_13:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v11 = *(_QWORD *)(v6 + 16);
      if (v11 >= *(_QWORD *)(v6 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v6 + 16) = v11 + 1;
      *(_QWORD *)(v6 + 8 * v11 + 32) = v7;
      if (v5 == v4)
        goto LABEL_18;
    }
  }
  __break(1u);
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  Swift::String v7;
  BOOL v8;
  char v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v14 = MEMORY[0x24BEE4AF8];
    do
    {
      v5 = v3;
      while (1)
      {
        if (v5 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v6 = *(_QWORD *)(v4 + 8 * v5);
        v7 = VocabularyManager.convertedText(forTokenID:)(v6);
        if (v7._countAndFlagsBits)
          v8 = 0;
        else
          v8 = v7._object == (void *)0xE000000000000000;
        if (v8)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) == 0)
          break;
LABEL_12:
        if (v2 == ++v5)
          goto LABEL_19;
      }
      v10 = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v12 = *(_QWORD *)(v14 + 16);
      v13 = v12 + 1;
      if (v12 >= *(_QWORD *)(v14 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v13 = v12 + 1;
        v10 = v14;
      }
      v3 = v5 + 1;
      *(_QWORD *)(v10 + 16) = v13;
      v14 = v10;
      *(_QWORD *)(v10 + 8 * v12 + 32) = v6;
    }
    while (v2 - 1 != v5);
  }
LABEL_19:
  swift_release();
  swift_bridgeObjectRelease();
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5268_s19TokenGenerationCore27SpaceLookaheadMaskGeneratorV09nextLogitF04from4with04stopA3IDs19leftContextCacheKey04maskP016numParallelTasks10Foundation8IndexSetV0R0_Sb26isPotentiallyDeterministictAA0A13GrammarParserCyxG_AA17VocabularyManagerCSaySiGSiSgAA0fP0CSgAVtFS2iXEfU_AFTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v10 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = (unint64_t *)(a1 + 32);
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & 0x8000000000000000) != 0)
        break;
      if (v6 >= *(_QWORD *)(a2 + 16))
        goto LABEL_11;
      v8 = *(_QWORD *)(a2 + 32 + 8 * v6);
      v9 = *(_QWORD *)(v10 + 16);
      if (v9 >= *(_QWORD *)(v10 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      *(_QWORD *)(v10 + 16) = v9 + 1;
      *(_QWORD *)(v10 + 8 * v9 + 32) = v8;
      if (!--v3)
        goto LABEL_8;
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Si7tokenID_SS0G4Textts5NeverOTg50118_s19TokenGenerationCore012ParserGuidedB11ConstraintsV013selectLongestA6Prefix07allowedA3IDs12vocabManager10Foundation8ef32VAI_AA010VocabularyM0CtFSi7tokenH18_SS0R4TexttSiXEfU_0lM4Core17VocabularyManagerCTf1cn_n(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(char *, _QWORD);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31[32];
  uint64_t v32;

  v3 = type metadata accessor for IndexSet.Index();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF460]);
  v8 = v7;
  v9 = dispatch thunk of Collection.count.getter();
  if (v9)
  {
    v10 = v9;
    v26 = v4;
    v27 = v3;
    v32 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v11 = v32;
    result = dispatch thunk of Collection.startIndex.getter();
    if (v10 < 0)
    {
      __break(1u);
    }
    else
    {
      v29 = a2 + 8;
      v30 = a2;
      v28 = v8;
      do
      {
        v13 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        v15 = *v14;
        v13(v31, 0);
        v16 = a2[11];
        v17 = a2[12];
        __swift_project_boxed_opaque_existential_1(v29, v16);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v16, v17);
        v32 = v11;
        v20 = v6;
        v21 = *(_QWORD *)(v11 + 16);
        if (v21 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          v25 = v18;
          v23 = v19;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v19 = v23;
          v18 = v25;
          v11 = v32;
        }
        *(_QWORD *)(v11 + 16) = v21 + 1;
        v22 = (_QWORD *)(v11 + 24 * v21);
        v22[4] = v15;
        v22[5] = v18;
        v22[6] = v19;
        dispatch thunk of Collection.formIndex(after:)();
        --v10;
        a2 = v30;
        v6 = v20;
      }
      while (v10);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v20, v27);
      swift_release();
      return v32;
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  char internalBuild;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  id v33;
  int v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE v40[40];
  _QWORD v41[5];
  char v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  void (*v46)();
  uint64_t v47;
  char v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)();
  uint64_t v53;
  char v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)();
  uint64_t v59;
  char v60;
  _OWORD v61[4];

  OUTLINED_FUNCTION_6_1();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  OUTLINED_FUNCTION_62_2();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_13_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_122_2();
  v38 = v11;
  v12 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v12 + 16) = v0 | 8;
  *(_QWORD *)(v12 + 24) = 0x8000000248C98A90;
  v37 = v12;
  v13 = OUTLINED_FUNCTION_20_1();
  v36 = @nonobjc NSUserDefaults.init(suiteName:)(v0 + 5, 0x8000000248C98AB0);
  if (!v36)
  {
    __break(1u);
    goto LABEL_15;
  }
  v35 = v2;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v34 = OUTLINED_FUNCTION_38_2();

  v14 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v14 + 16) = v0;
  *(_QWORD *)(v14 + 24) = 0x8000000248C98AD0;
  OUTLINED_FUNCTION_20_1();
  v33 = OUTLINED_FUNCTION_27_2();
  if (!v33)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v32 = v4;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v30 = OUTLINED_FUNCTION_38_2();

  v15 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v15 + 16) = v0 - 4;
  *(_QWORD *)(v15 + 24) = 0x8000000248C98AF0;
  OUTLINED_FUNCTION_20_1();
  v31 = OUTLINED_FUNCTION_27_2();
  if (!v31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v29 = v1;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v39 = OUTLINED_FUNCTION_38_2();

  v16 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v16 + 16) = v0;
  *(_QWORD *)(v16 + 24) = 0x8000000248C98B10;
  OUTLINED_FUNCTION_20_1();
  v17 = OUTLINED_FUNCTION_27_2();
  if (!v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v18 = v17;
  v19 = (id)MobileGestalt_get_current_device();
  if (!v19)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v20 = v19;
  internalBuild = MobileGestalt_get_internalBuild();

  v41[0] = v36;
  v41[1] = v0 + 8;
  v41[2] = 0x8000000248C98A90;
  v41[3] = partial apply for closure #1 in Overridable<A>.init(key:);
  v41[4] = v37;
  v42 = v34;
  v43 = v33;
  v44 = v0;
  v45 = 0x8000000248C98AD0;
  v46 = closure #1 in Overridable<A>.init(key:)partial apply;
  v47 = v14;
  v48 = v30;
  v49 = v31;
  v50 = v0 - 4;
  v51 = 0x8000000248C98AF0;
  v52 = partial apply for closure #1 in Overridable<A>.init(key:);
  v53 = v15;
  v54 = v39;
  v55 = v18;
  v56 = v0;
  v57 = 0x8000000248C98B10;
  v58 = closure #1 in Overridable<A>.init(key:)partial apply;
  v59 = v16;
  v60 = internalBuild;
  if (v34)
  {
    outlined retain of GuidedGenerationOverrides((uint64_t)v41);
    v22 = v36;
    OUTLINED_FUNCTION_120_0();
    OUTLINED_FUNCTION_43_0();
    partial apply for closure #1 in Overridable<A>.init(key:)();
  }
  if (v39)
  {
    outlined retain of GuidedGenerationOverrides((uint64_t)v41);
    v23 = v31;
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_127_2();
    partial apply for closure #1 in Overridable<A>.init(key:)();
  }
  _s19TokenGenerationCore7GrammarVWOcTm_1(v8, v38, type metadata accessor for Grammar);
  outlined init with copy of GuidedGenerationTokenizer(v6, (uint64_t)v40);
  _s19TokenGenerationCore7GrammarVWOcTm_1(v38, v35, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_129_2();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_115_2();
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)v40, (uint64_t)v61);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGrammarParser<EarleyParser>);
  OUTLINED_FUNCTION_18_0();
  v24 = OUTLINED_FUNCTION_116_2();
  OUTLINED_FUNCTION_8_4(v24, (uint64_t)v61, v32);
  v25 = OUTLINED_FUNCTION_114_2();
  OUTLINED_FUNCTION_65_1(v25, v26, v27, v28, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager);
  OUTLINED_FUNCTION_37_2();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  outlined destroy of Grammar(v38, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_145_0();
  __swift_destroy_boxed_opaque_existential_1(v6);
  outlined destroy of Grammar(v8, type metadata accessor for Grammar);
  *(_QWORD *)v29 = type metadata accessor for Grammar;
  *(_OWORD *)(v29 + 8) = v61[0];
  *(_QWORD *)(v29 + 24) = 0;
  *(_BYTE *)(v29 + 32) = 4;
  *(_QWORD *)(v29 + 40) = v15;
  *(_BYTE *)(v29 + 48) = (_BYTE)v31;
  OUTLINED_FUNCTION_8_1();
}

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:numParallelTasks:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  char internalBuild;
  id v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BYTE v47[40];
  _QWORD v48[5];
  char v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)();
  uint64_t v54;
  char v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)();
  uint64_t v60;
  char v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)();
  uint64_t v66;
  char v67;
  _OWORD v68[4];

  OUTLINED_FUNCTION_6_1();
  v41 = v3;
  v42 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  OUTLINED_FUNCTION_62_2();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_13_3();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_122_2();
  v45 = v13;
  v14 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v14 + 16) = v0 | 8;
  *(_QWORD *)(v14 + 24) = 0x8000000248C98A90;
  v44 = v14;
  v15 = OUTLINED_FUNCTION_20_1();
  v43 = @nonobjc NSUserDefaults.init(suiteName:)(v0 + 5, 0x8000000248C98AB0);
  if (!v43)
  {
    __break(1u);
    goto LABEL_17;
  }
  v40 = v2;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v39 = OUTLINED_FUNCTION_38_2();

  v16 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v16 + 16) = v0;
  *(_QWORD *)(v16 + 24) = 0x8000000248C98AD0;
  OUTLINED_FUNCTION_20_1();
  v38 = OUTLINED_FUNCTION_26_1();
  if (!v38)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v35 = v6;
  v36 = v8;
  v37 = v10;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = OUTLINED_FUNCTION_38_2();

  v18 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v18 + 16) = v0 - 4;
  *(_QWORD *)(v18 + 24) = 0x8000000248C98AF0;
  OUTLINED_FUNCTION_20_1();
  v34 = OUTLINED_FUNCTION_26_1();
  if (!v34)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v33 = v1;
  if (!(id)MobileGestalt_get_current_device())
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v46 = OUTLINED_FUNCTION_38_2();

  v19 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v19 + 16) = v0;
  *(_QWORD *)(v19 + 24) = 0x8000000248C98B10;
  OUTLINED_FUNCTION_20_1();
  v20 = OUTLINED_FUNCTION_26_1();
  if (!v20)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v21 = v20;
  v22 = (id)MobileGestalt_get_current_device();
  if (!v22)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v23 = v22;
  internalBuild = MobileGestalt_get_internalBuild();

  v48[0] = v43;
  v48[1] = v0 + 8;
  v48[2] = 0x8000000248C98A90;
  v48[3] = closure #1 in Overridable<A>.init(key:)partial apply;
  v48[4] = v44;
  v49 = v39;
  v50 = v38;
  v51 = v0;
  v52 = 0x8000000248C98AD0;
  v53 = closure #1 in Overridable<A>.init(key:)partial apply;
  v54 = v16;
  v55 = v17;
  v56 = v34;
  v57 = v0 - 4;
  v58 = 0x8000000248C98AF0;
  v59 = closure #1 in Overridable<A>.init(key:)partial apply;
  v60 = v18;
  v61 = v46;
  v62 = v21;
  v63 = v0;
  v64 = 0x8000000248C98B10;
  v65 = closure #1 in Overridable<A>.init(key:)partial apply;
  v66 = v19;
  v67 = internalBuild;
  if (v39)
  {
    outlined retain of GuidedGenerationOverrides((uint64_t)v48);
    v25 = v43;
    OUTLINED_FUNCTION_60_2();
    OUTLINED_FUNCTION_43_0();
    partial apply for closure #1 in Overridable<A>.init(key:)();
  }
  if (v46)
  {
    outlined retain of GuidedGenerationOverrides((uint64_t)v48);
    v26 = v34;
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_90_0();
    partial apply for closure #1 in Overridable<A>.init(key:)();
  }
  v27 = v42;
  OUTLINED_FUNCTION_123_2(v37, v45);
  outlined init with copy of GuidedGenerationTokenizer(v36, (uint64_t)v47);
  if ((v41 & 1) != 0)
    v27 = 4;
  OUTLINED_FUNCTION_123_2(v45, v40);
  OUTLINED_FUNCTION_129_2();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_115_2();
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)v47, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGrammarParser<EarleyParser>);
  OUTLINED_FUNCTION_18_0();
  v28 = OUTLINED_FUNCTION_116_2();
  OUTLINED_FUNCTION_8_4(v28, (uint64_t)v68, v35);
  v29 = OUTLINED_FUNCTION_114_2();
  OUTLINED_FUNCTION_65_1(v29, v30, v31, v32, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager);
  OUTLINED_FUNCTION_37_2();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  OUTLINED_FUNCTION_56_0(v45);
  OUTLINED_FUNCTION_134_2();
  __swift_destroy_boxed_opaque_existential_1(v36);
  OUTLINED_FUNCTION_56_0(v37);
  *(_QWORD *)v33 = 4;
  *(_OWORD *)(v33 + 8) = v68[0];
  *(_QWORD *)(v33 + 24) = 0;
  *(_BYTE *)(v33 + 32) = v27;
  *(_QWORD *)(v33 + 40) = v41;
  *(_BYTE *)(v33 + 48) = type metadata accessor for Grammar;
  OUTLINED_FUNCTION_8_1();
}

uint64_t specialized ParserGuidedGenerationConstraints.TokenParserManager.init(cacheItems:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  pthread_mutex_t *v4;

  type metadata accessor for Lock();
  v3 = OUTLINED_FUNCTION_18_0();
  v4 = (pthread_mutex_t *)swift_slowAlloc();
  *(_QWORD *)(v3 + 16) = v4;
  pthread_mutex_init(v4, 0);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  pthread_mutex_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);

  v11 = *(_QWORD *)(v5 + 16);
  v12 = *(pthread_mutex_t **)(v11 + 16);
  pthread_mutex_lock(v12);
  v13 = (uint64_t *)(v5 + 24);
  OUTLINED_FUNCTION_9_1();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(v5 + 24);
  if (*(_QWORD *)(v14 + 16) <= a1)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    v5 = a3(v5);
    *v13 = v5;
    goto LABEL_8;
  }
  v25 = a5;
  v15 = v14 + 32;
  specialized Dictionary.subscript.getter(a2, *(_QWORD *)(v14 + 32 + 16 * a1 + 8));
  v17 = v16;
  OUTLINED_FUNCTION_51_1();
  if ((v17 & 1) == 0)
  {
LABEL_10:
    pthread_mutex_unlock(v12);
    OUTLINED_FUNCTION_32_1();
    return;
  }
  v5 = *(_QWORD *)(v15 + 16 * a1);
  OUTLINED_FUNCTION_43_0();
  v12 = (pthread_mutex_t *)specialized TokenGrammarParser.childParser(consumingTokenID:)(a2);
  OUTLINED_FUNCTION_16_3();
  OUTLINED_FUNCTION_9_1();
  if (*(_QWORD *)(*v13 + 16) <= a1)
    goto LABEL_13;
  specialized Dictionary.subscript.getter(a2, *(_QWORD *)(*v13 + 16 * a1 + 40));
  if ((v18 & 1) == 0)
  {
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_144();
    v12 = *(pthread_mutex_t **)(v11 + 16);
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_51_1();
  OUTLINED_FUNCTION_9_1();
  v5 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v13 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_14;
LABEL_8:
  if (*(_QWORD *)(v5 + 16) > a1)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)();
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_30_1();
    v20 = Dictionary.init(dictionaryLiteral:)();
    v21 = OUTLINED_FUNCTION_9_1();
    a4(v21);
    v22 = *(_QWORD *)(*v13 + 16);
    v25(v22);
    v23 = *v13;
    *(_QWORD *)(v23 + 16) = v22 + 1;
    v24 = v23 + 16 * v22;
    *(_QWORD *)(v24 + 32) = v12;
    *(_QWORD *)(v24 + 40) = v20;
    OUTLINED_FUNCTION_51_1();
    OUTLINED_FUNCTION_144();
    v12 = *(pthread_mutex_t **)(v11 + 16);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t specialized TokenGrammarParser.childParser(consumingTokenID:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 64);
  pthread_mutex_lock(*(pthread_mutex_t **)(v4 + 16));
  v5 = *(_QWORD *)(v1 + 24);
  swift_retain();
  VocabularyManager.convertedText(forTokenID:)(a1);
  swift_release();
  v6 = specialized TokenGrammarParser.createCharacterParser(consuming:)();
  swift_bridgeObjectRelease();
  result = swift_beginAccess();
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 56);
    if (v6 < *(_QWORD *)(v8 + 16))
    {
      v9 = *(_QWORD *)(v8 + 16 * v6 + 32);
      swift_allocObject();
      swift_retain();
      swift_retain();
      v10 = specialized TokenGrammarParser.init(characterParser:tokenizer:lastConsumedTokenID:)(v9, v5, a1, 0);
      pthread_mutex_unlock(*(pthread_mutex_t **)(v4 + 16));
      return v10;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  NSObject *v35;
  os_log_type_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BYTE *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t (*v56)(uint64_t);
  void (*v58)(uint64_t);
  void (*v60)(uint64_t);
  uint64_t v61;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((v8 & 0x8000000000000000) == 0 && v8 < a2)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_121_2(0, v8, v10, v11, v12, v13, v14, v15, v47, v49, v51, a1, a3, a4, a5);
      v6 = v16;
      specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v16);
      if ((OUTLINED_FUNCTION_117_2() & 1) == 0)
      {
LABEL_19:
        OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_37_0();
        if (one-time initialization token for guided != -1)
          swift_once();
        v31 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v31, (uint64_t)static Log.guided);
        v32 = OUTLINED_FUNCTION_113_2();
        v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)OUTLINED_FUNCTION_19_3();
          *(_WORD *)v34 = 0;
          OUTLINED_FUNCTION_98_2(&dword_248BE5000, v32, v33, "contextTokenIDs fail to match grammar", v34);
          OUTLINED_FUNCTION_7_4();
        }

        swift_bridgeObjectRetain_n();
        v35 = Logger.logObject.getter();
        v36 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (_DWORD *)OUTLINED_FUNCTION_19_3();
          v61 = OUTLINED_FUNCTION_19_3();
          *v37 = 136315138;
          v38 = OUTLINED_FUNCTION_60_2();
          MEMORY[0x2495A7E30](v38, MEMORY[0x24BEE1768]);
          v39 = OUTLINED_FUNCTION_26();
          OUTLINED_FUNCTION_92_2(v39, v40, &v61);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_31_2();
          OUTLINED_FUNCTION_118();
          OUTLINED_FUNCTION_142_1(&dword_248BE5000, v35, v36, "contextTokenIDs fail to match grammar with contextTokenIDs %s");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_4();
        }

        OUTLINED_FUNCTION_31_2();
        lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError();
        OUTLINED_FUNCTION_82_1();
        *v41 = 0;
        swift_willThrow();
        OUTLINED_FUNCTION_45_0();
        return v6;
      }
      v50 = v5;
      v17 = 0;
      v18 = 0;
      v52 = v7 - 1;
      v19 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        if ((v18 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_103_1();
            v19 = v29;
          }
          v20 = *(_QWORD *)(v19 + 16);
          if (v20 >= *(_QWORD *)(v19 + 24) >> 1)
          {
            OUTLINED_FUNCTION_103_1();
            v19 = v30;
          }
          *(_QWORD *)(v19 + 16) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 32) = v8;
        }
        v18 = specialized TokenGrammarParser.getCachedMaskResult()();
        OUTLINED_FUNCTION_45_0();
        if (v52 == v17)
        {
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        v27 = v54 + 8 * v17;
        v8 = *(_QWORD *)(v27 + 40);
        if (v8 < 0 || v8 >= a2)
          break;
        OUTLINED_FUNCTION_121_2(v6, *(_QWORD *)(v27 + 40), v21, v22, v23, v24, v25, v26, v48, v50, v52, v54, v56, v58, v60);
        v6 = v28;
        specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v28);
        ++v17;
        if ((OUTLINED_FUNCTION_117_2() & 1) == 0)
          goto LABEL_19;
      }
      OUTLINED_FUNCTION_37_0();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for guided != -1)
      swift_once();
    v42 = OUTLINED_FUNCTION_23_2();
    __swift_project_value_buffer(v42, (uint64_t)static Log.guided);
    v43 = OUTLINED_FUNCTION_113_2();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      *(_DWORD *)OUTLINED_FUNCTION_19_3() = 134217984;
      v61 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_142_1(&dword_248BE5000, v43, v44, "Out-of-vocabulary token ID (%ld) passed to generateNextLogitMask");
      OUTLINED_FUNCTION_7_4();
    }

    lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError();
    OUTLINED_FUNCTION_82_1();
    *v45 = 1;
    swift_willThrow();
  }
  else
  {
    v6 = 0;
LABEL_18:
    Array<A>.hashValue.getter();
    OUTLINED_FUNCTION_37_0();
  }
  return v6;
}

void specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(unint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v3;

  v3 = *(pthread_mutex_t **)(*(_QWORD *)(v1 + 16) + 16);
  pthread_mutex_lock(v3);
  OUTLINED_FUNCTION_9_1();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) > a1)
  {
    OUTLINED_FUNCTION_43_0();
    pthread_mutex_unlock(v3);
    OUTLINED_FUNCTION_110_0();
    return;
  }
  __break(1u);
}

uint64_t specialized TokenGrammarParser.partialMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 24);
}

uint64_t specialized TokenGrammarParser.getCachedMaskResult()()
{
  uint64_t v0;
  pthread_mutex_t *v1;
  uint64_t v2;

  v1 = *(pthread_mutex_t **)(*(_QWORD *)(v0 + 64) + 16);
  pthread_mutex_lock(v1);
  v2 = *(unsigned __int8 *)(v0 + 16);
  pthread_mutex_unlock(v1);
  return v2;
}

void specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = OUTLINED_FUNCTION_18_0();
  *(_OWORD *)(v13 + 16) = xmmword_248C911B0;
  swift_retain_n();
  v14 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = v14;
  __swift_instantiateConcreteTypeFromMangledName(a6);
  OUTLINED_FUNCTION_18_0();
  v15 = specialized ParserGuidedGenerationConstraints.TokenParserManager.init(cacheItems:)(v13);
  swift_release();
  type metadata accessor for MaskCache();
  OUTLINED_FUNCTION_18_0();
  MaskCache.init()();
  *(_QWORD *)a7 = v15;
  *(_QWORD *)(a7 + 8) = v16;
  *(_QWORD *)(a7 + 16) = a1;
  *(_BYTE *)(a7 + 24) = a2;
  *(_QWORD *)(a7 + 32) = a3;
  *(_BYTE *)(a7 + 40) = a4 & 1;
}

uint64_t specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  uint64_t v39;
  char v41;
  BOOL v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;

  v59 = (uint64_t *)a1;
  v2 = type metadata accessor for CharacterSet();
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v54 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalSymbol?);
  MEMORY[0x24BDAC7A8](v4);
  v57 = (uint64_t)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for TerminalSymbol(0);
  v6 = *(_QWORD *)(v58 - 8);
  v7 = MEMORY[0x24BDAC7A8](v58);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v52 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v52 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v52 - v16;
  v18 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 24) + 56);
  v19 = v18[11];
  v20 = v18[12];
  __swift_project_boxed_opaque_existential_1(v18 + 8, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
  v22 = v60;
  v23 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)((uint64_t)v59, v21, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:));
  if (v22)
    return v6 & 1;
  v60 = 0;
  v24 = (uint64_t)v17;
  v59 = (uint64_t *)v12;
  v25 = v6;
  v53 = v9;
  v26 = v58;
  v27 = (uint64_t)v15;
  specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v23);
  v28 = specialized TokenGrammarParser.nextValidTerminals(afterSpace:)(0);
  v29 = v28;
  v30 = *(_QWORD *)(v28 + 16);
  if (v30 > 1
    || (v31 = v26, v32 = v25, v30)
    && (_s19TokenGenerationCore7GrammarVWOcTm_1(v28 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v24, type metadata accessor for TerminalSymbol), EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(), outlined destroy of Grammar(v24, type metadata accessor for TerminalSymbol), EnumCaseMultiPayload == 2))
  {
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  v34 = v57;
  specialized BidirectionalCollection.last.getter(v29, v57);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v34, 1, v31) == 1)
  {
    swift_release();
    outlined destroy of (Locale?, Locale?)(v34, &demangling cache variable for type metadata for TerminalSymbol?);
    LOBYTE(v6) = 1;
    return v6 & 1;
  }
  v36 = v27;
  outlined init with take of TerminalSymbol(v34, v27, type metadata accessor for TerminalSymbol);
  v37 = v59;
  _s19TokenGenerationCore7GrammarVWOcTm_1(v27, (uint64_t)v59, type metadata accessor for TerminalSymbol);
  v38 = swift_getEnumCaseMultiPayload();
  if (v38)
  {
    v39 = (uint64_t)v53;
    if (v38 != 1)
    {
      v44 = v54;
      v43 = v55;
      v45 = v37;
      v46 = v56;
      v47 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v55 + 32))(v54, v45, v56);
      v59 = &v52;
      MEMORY[0x24BDAC7A8](v47);
      *(&v52 - 2) = (uint64_t)v44;
      v48 = specialized Sequence.contains(where:)((uint64_t (*)(_QWORD *))partial apply for closure #1 in TerminalSymbol.contains(_:), (uint64_t)(&v52 - 4), 32, 0xE100000000000000);
      v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v39 = (uint64_t)v53;
      v49(v44, v46);
      if ((v48 & 1) == 0)
      {
LABEL_26:
        outlined destroy of Grammar(v36, type metadata accessor for TerminalSymbol);
        swift_release();
        LOBYTE(v6) = 1;
        return v6 & 1;
      }
      goto LABEL_24;
    }
    if (*v37 != 32 || v37[1] != 0xE100000000000000)
      goto LABEL_15;
  }
  else
  {
    v42 = *v37 == 32 && v37[1] == 0xE100000000000000;
    v39 = (uint64_t)v53;
    if (!v42)
    {
LABEL_15:
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
        goto LABEL_26;
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
LABEL_24:
  v50 = specialized TokenGrammarParser.nextValidTerminals(afterSpace:)(1);
  v51 = *(_QWORD *)(v50 + 16);
  if (v51 <= 1)
  {
    if (v51)
    {
      _s19TokenGenerationCore7GrammarVWOcTm_1(v50 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), v39, type metadata accessor for TerminalSymbol);
      LOBYTE(v6) = swift_getEnumCaseMultiPayload() != 2;
      outlined destroy of Grammar(v39, type metadata accessor for TerminalSymbol);
    }
    else
    {
      LOBYTE(v6) = 1;
    }
    swift_release();
    outlined destroy of Grammar(v36, type metadata accessor for TerminalSymbol);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Grammar(v36, type metadata accessor for TerminalSymbol);
    swift_bridgeObjectRelease();
    swift_release();
    LOBYTE(v6) = 0;
  }
  return v6 & 1;
}

uint64_t specialized TokenGrammarParser.nextValidTerminals(afterSpace:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  Swift::String_optional v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(pthread_mutex_t **)(v3 + 16);
  pthread_mutex_lock(v4);
  if ((a1 & 1) != 0)
  {
    type metadata accessor for EarleyParser();
    swift_initStackObject();
    v5 = swift_retain();
    EarleyParser.init(copying:)(v5);
    v6.value._countAndFlagsBits = 32;
    v6.value._object = (void *)0xE100000000000000;
    EarleyParser.parse(character:)(v6);
    EarleyParser.nextValidTerminals()();
    v8 = v7;
    swift_release();
    pthread_mutex_unlock(*(pthread_mutex_t **)(v3 + 16));
    return v8;
  }
  else
  {
    EarleyParser.nextValidTerminals()();
    v11 = v10;
    pthread_mutex_unlock(v4);
    return v11;
  }
}

void specialized ParserGuidedGenerationConstraints.nextMask(follow:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for LogitMaskResponse(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(a1);
  if (!v3)
  {
    if ((v9 & 1) != 0)
    {
      specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:), v8);
      outlined init with take of TerminalSymbol((uint64_t)v8, (uint64_t)a2, type metadata accessor for LogitMaskResponse);
      type metadata accessor for LogitMaskComputation(0);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v10 = swift_allocObject();
      v11 = v2[1];
      *(_OWORD *)(v10 + 16) = *v2;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 41) = *(_OWORD *)((char *)v2 + 25);
      *(_QWORD *)(v10 + 64) = a1;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:);
      *(_QWORD *)(v12 + 24) = v10;
      *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error);
      a2[1] = v12;
      type metadata accessor for LogitMaskComputation(0);
      swift_storeEnumTagMultiPayload();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
  }
}

void specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int)@<X4>, _QWORD *a6@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  void (*v69)(uint64_t);

  v59 = a5;
  v60 = a1;
  v69 = a4;
  v62 = a3;
  v56 = a6;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_13_3();
  MEMORY[0x24BDAC7A8](v10);
  v54 = (char *)&v46 - v11;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_122_2();
  v53 = v13;
  v14 = *v6;
  v57 = v6[1];
  v15 = v6[2];
  v52 = *((unsigned __int8 *)v6 + 24);
  v51 = v6[4];
  v58 = *((unsigned __int8 *)v6 + 40);
  v16 = *(_QWORD *)(v15 + 24);
  v17 = *(_QWORD **)(v16 + 56);
  v19 = v17[11];
  v18 = v17[12];
  __swift_project_boxed_opaque_existential_1(v17 + 8, v19);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 56);
  v21 = v19;
  v22 = a2;
  v23 = v18;
  v24 = v62;
  v25 = v69;
  v26 = v20(v21, v23);
  v27 = v61;
  v28 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(v60, v26, v22, v24, v25);
  if (!v27)
  {
    v30 = v29;
    v47 = v15;
    v60 = 0;
    v61 = v7;
    v49 = v22;
    v46 = v28;
    v48 = v14;
    specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v28);
    v32 = v31;
    v33 = v55;
    v34 = *(int *)(v55 + 48);
    v35 = *(_QWORD *)(v16 + 64);
    OUTLINED_FUNCTION_61_2();
    swift_bridgeObjectRetain();
    v36 = v53;
    v50 = v32;
    v37 = v51;
    LOBYTE(v30) = v59(v53, v32, (uint64_t)v17, v35, v30, 0, v57, v51, v58);
    OUTLINED_FUNCTION_132_1();
    OUTLINED_FUNCTION_123();
    v38 = v30 & 1;
    *(_BYTE *)(v36 + v34) = v38;
    v39 = *(int *)(v33 + 48);
    v40 = type metadata accessor for IndexSet();
    v41 = *(_QWORD *)(v40 - 8);
    v42 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v54, v36, v40);
    *(_BYTE *)(v42 + v39) = v38;
    if ((v52 & 1) == 0)
    {
      outlined destroy of (Locale?, Locale?)(v42, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
      OUTLINED_FUNCTION_118_1();
      v43 = v56;
      v44 = v61;
LABEL_7:
      OUTLINED_FUNCTION_120_2(v44, v36);
      OUTLINED_FUNCTION_120_2((uint64_t)v43, v44);
      type metadata accessor for LogitMaskResponse(0);
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    }
    v45 = *(int *)(v33 + 48);
    v44 = v61;
    OUTLINED_FUNCTION_120_2(v61, v42);
    *(_BYTE *)(v44 + v45) = v38;
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v44, v40);
    if ((v38 & 1) == 0)
    {
      OUTLINED_FUNCTION_118_1();
      v43 = v56;
      goto LABEL_7;
    }
    v63 = v48;
    v64 = v57;
    v65 = v47;
    v66 = 1;
    v67 = v37;
    v68 = v58;
    specialized ParserGuidedGenerationConstraints.performDeterministicRunLookahead(nextMask:parserIndex:)(v36, v46, v49, v62, v69, v59, v56);
    outlined destroy of (Locale?, Locale?)(v36, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
    OUTLINED_FUNCTION_118_1();
  }
LABEL_8:
  OUTLINED_FUNCTION_0_0();
}

void specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:)(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(a1, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:), a2);
}

{
  specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:)(a1, a2);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;

  a2();
  return thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(*(uint64_t (**)(void))(v2 + 8));
}

void specialized ParserGuidedGenerationConstraints.performDeterministicRunLookahead(nextMask:parserIndex:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void (*a4)(uint64_t)@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, int)@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  void (*v76)(uint64_t);
  void (*v77)(uint64_t);
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, int);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;

  v77 = a5;
  v78 = a6;
  v75 = a3;
  v76 = a4;
  v69 = a7;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_35_0();
  v74 = v11;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v12);
  v84 = (char *)&v67 - v13;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_122_2();
  v79 = v15;
  v16 = type metadata accessor for IndexSet();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_35_0();
  v73 = v18;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v67 - v20;
  v81 = *v7;
  specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(a2);
  v23 = v22;
  OUTLINED_FUNCTION_30_1();
  v80 = v7;
  specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)();
  OUTLINED_FUNCTION_144();
  if (IndexSet.count.getter() != 1)
  {
    swift_release();
    OUTLINED_FUNCTION_85_1((uint64_t)v69, (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
    type metadata accessor for LogitMaskResponse(0);
    OUTLINED_FUNCTION_47_1();
    swift_storeEnumTagMultiPayload();
    goto LABEL_23;
  }
  v67 = a1;
  v68 = v23;
  v24 = IndexSet.first.getter();
  if ((v25 & 1) == 0)
  {
    v26 = v24;
    v72 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v27 = OUTLINED_FUNCTION_94_2();
    *(_OWORD *)(v27 + 16) = xmmword_248C911B0;
    v83 = (_QWORD *)v27;
    *(_QWORD *)(v27 + 32) = v26;
    specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(a2);
    v29 = v28;
    v30 = specialized TokenGrammarParser.fullMatch.getter();
    v31 = v17;
    v32 = v85;
    v33 = v84;
    if ((v30 & 1) == 0)
    {
      v34 = v79;
      v71 = v31;
      while (1)
      {
        specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(a2, v26, v75, v76, v77);
        v82 = v35;
        specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v35);
        v37 = v36;
        OUTLINED_FUNCTION_144();
        v38 = *(int *)(v32 + 48);
        v39 = *(_QWORD *)(v37 + 24);
        v40 = *(_QWORD *)(v39 + 56);
        v41 = *(_QWORD *)(v39 + 64);
        OUTLINED_FUNCTION_61_2();
        OUTLINED_FUNCTION_43_0();
        OUTLINED_FUNCTION_75();
        LOBYTE(v66) = 1;
        v85 = v37;
        LOBYTE(v37) = v78(v34, v37, v40, v41, 0, 1, 0, 0, v66);
        swift_release();
        swift_bridgeObjectRelease();
        v42 = v37 & 1;
        *(_BYTE *)(v34 + v38) = v37 & 1;
        v43 = *(int *)(v32 + 48);
        OUTLINED_FUNCTION_88_2();
        v33[v43] = v37 & 1;
        v44 = IndexSet.count.getter();
        v84 = *(char **)(v31 + 8);
        ((void (*)(char *, uint64_t))v84)(v33, v16);
        v45 = *(int *)(v32 + 48);
        v46 = (uint64_t)v33;
        v47 = v74;
        OUTLINED_FUNCTION_88_2();
        *(_BYTE *)(v47 + v45) = v42;
        if (v44 == 1)
        {
          outlined destroy of (Locale?, Locale?)(v47, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
          v31 = v71;
          v33 = (char *)v46;
        }
        else
        {
          v48 = *(int *)(v32 + 48);
          v49 = v71;
          OUTLINED_FUNCTION_85_1(v46, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 32));
          *(_BYTE *)(v46 + v48) = v42;
          OUTLINED_FUNCTION_119_2(v46);
          v31 = v49;
          v33 = (char *)v46;
          if (!v42)
          {
            outlined destroy of (Locale?, Locale?)(v79, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
            v29 = v85;
            OUTLINED_FUNCTION_144();
            goto LABEL_17;
          }
        }
        OUTLINED_FUNCTION_43_0();
        swift_release();
        OUTLINED_FUNCTION_30_1();
        swift_release();
        v50 = v73;
        v34 = v79;
        specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)();
        OUTLINED_FUNCTION_144();
        v51 = (uint64_t)v72;
        OUTLINED_FUNCTION_119_2((uint64_t)v72);
        OUTLINED_FUNCTION_85_1(v51, v50, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32));
        if (IndexSet.count.getter() != 1)
        {
          outlined destroy of (Locale?, Locale?)(v34, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
          v29 = v85;
          goto LABEL_17;
        }
        v52 = IndexSet.first.getter();
        if ((v53 & 1) != 0)
          break;
        v26 = v52;
        a2 = v82;
        v54 = v83;
        v55 = v83[2];
        if (v55 >= v83[3] >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v54 = v56;
        }
        v54[2] = v55 + 1;
        v83 = v54;
        v54[v55 + 4] = v26;
        outlined destroy of (Locale?, Locale?)(v34, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
        v29 = v85;
        if ((specialized TokenGrammarParser.fullMatch.getter() & 1) != 0)
          goto LABEL_17;
      }
      __break(1u);
      goto LABEL_25;
    }
LABEL_17:
    v57 = *(_QWORD **)(*(_QWORD *)(v29 + 24) + 56);
    v58 = *(_QWORD *)(v68 + 40);
    v59 = *(_BYTE *)(v68 + 48);
    OUTLINED_FUNCTION_76_0();
    v60 = v58;
    v61 = v70;
    v62 = specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)(v83, v57, v60, v59);
    if (v61)
    {
      OUTLINED_FUNCTION_132_1();
      OUTLINED_FUNCTION_144();
      OUTLINED_FUNCTION_82();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_84_2();
    }
    else
    {
      v64 = v62;
      v65 = v63;
      OUTLINED_FUNCTION_132_1();
      OUTLINED_FUNCTION_144();
      OUTLINED_FUNCTION_82();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_84_2();
      if ((v64 & 1) != 0)
      {
        *v69 = v65;
        type metadata accessor for LogitMaskResponse(0);
      }
      else
      {
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_85_1((uint64_t)v69, v67, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 16));
        type metadata accessor for LogitMaskResponse(0);
        OUTLINED_FUNCTION_47_1();
      }
      swift_storeEnumTagMultiPayload();
    }
LABEL_23:
    OUTLINED_FUNCTION_0_0();
    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t specialized ParserGuidedGenerationConstraints.selectLongestTokenPrefix(allowedTokenIDs:vocabManager:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35[13];
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_68_2();
  v36 = v0;
  v37 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  if (IndexSet.count.getter() == 1)
  {
    v8 = OUTLINED_FUNCTION_11_2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, v5, v8);
  }
  swift_retain();
  v35[0] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF10Foundation8IndexSetV_Si7tokenID_SS0G4Textts5NeverOTg50118_s19TokenGenerationCore012ParserGuidedB11ConstraintsV013selectLongestA6Prefix07allowedA3IDs12vocabManager10Foundation8ef32VAI_AA010VocabularyM0CtFSi7tokenH18_SS0R4TexttSiXEfU_0lM4Core17VocabularyManagerCTf1cn_n(v5, v3);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(v35, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_43_0();
  specialized MutableCollection<>.sort(by:)(v35, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  OUTLINED_FUNCTION_16_3();
  v10 = v35[0];
  specialized BidirectionalCollection.last.getter(v35[0]);
  if (v11)
  {
    v12 = IndexSet.count.getter();
    v13 = v12 - 2;
    if (!__OFSUB__(v12, 2))
    {
      if (v13 < 0)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      specialized MutableCollection.subscript.getter(0, v13, v10);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      OUTLINED_FUNCTION_24_1();
      if (v17 == v19 >> 1)
      {
LABEL_12:
        swift_unknownObjectRelease();
        if (one-time initialization token for guided == -1)
        {
LABEL_13:
          v25 = OUTLINED_FUNCTION_23_2();
          __swift_project_value_buffer(v25, (uint64_t)static Log.guided);
          v26 = Logger.logObject.getter();
          v27 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v26, v27))
          {
            v28 = (uint8_t *)OUTLINED_FUNCTION_101_2();
            *(_WORD *)v28 = 0;
            _os_log_impl(&dword_248BE5000, v26, v27, "All allowedTokens are prefixes of the longest token. Picking the longest token.", v28, 2u);
            OUTLINED_FUNCTION_7_4();
          }
          OUTLINED_FUNCTION_13();

          OUTLINED_FUNCTION_11_2();
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
          dispatch thunk of SetAlgebra.init()();
          return dispatch thunk of SetAlgebra.insert(_:)();
        }
LABEL_26:
        swift_once();
        goto LABEL_13;
      }
      v20 = v19 >> 1;
      swift_unknownObjectRetain();
      v21 = (void **)(v15 + 24 * v17 + 16);
      while (v17 < v20)
      {
        v23 = (uint64_t)*(v21 - 1);
        v22 = *v21;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = v23;
        v24._object = v22;
        LOBYTE(v23) = String.hasPrefix(_:)(v24);
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
          OUTLINED_FUNCTION_13();
          swift_unknownObjectRelease_n();
          goto LABEL_22;
        }
        ++v17;
        v21 += 3;
        if (v20 == v17)
        {
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
  OUTLINED_FUNCTION_24_1();
  if (one-time initialization token for guided != -1)
    swift_once();
  v29 = OUTLINED_FUNCTION_23_2();
  __swift_project_value_buffer(v29, (uint64_t)static Log.guided);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)OUTLINED_FUNCTION_101_2();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_248BE5000, v30, v31, "allowedTokenIDs is empty. Something is likely wrong with the tokenizer", v32, 2u);
    OUTLINED_FUNCTION_7_4();
  }

LABEL_22:
  OUTLINED_FUNCTION_11_2();
  v33 = OUTLINED_FUNCTION_99_2();
  return v34(v33, v5);
}

uint64_t specialized TokenGrammarParser.fullMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 25);
}

uint64_t specialized ParserGuidedGenerationConstraints.enforceTokenizationStability(tokenIDs:vocabManager:lastConsumedTokenID:)(_QWORD *a1, _QWORD *a2, uint64_t a3, os_log_type_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  os_log_type_t type;
  char v57;
  _QWORD *v58;
  uint64_t v59[3];
  _QWORD *v60;

  if ((a4 & 1) != 0)
  {
    OUTLINED_FUNCTION_75();
    v10 = (uint64_t)a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v9 = OUTLINED_FUNCTION_94_2();
    *(_OWORD *)(v9 + 16) = xmmword_248C911B0;
    *(_QWORD *)(v9 + 32) = a3;
    v59[0] = v9;
    OUTLINED_FUNCTION_75();
    specialized Array.append<A>(contentsOf:)();
    v10 = v59[0];
  }
  v11 = a2[11];
  v12 = a2[12];
  __swift_project_boxed_opaque_existential_1(a2 + 8, v11);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v10, v11, v12);
  if (v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = a1;
    v15 = a2 + 8;
    v16 = a2[11];
    v17 = a2[12];
    v18 = v14;
    v19 = v13;
    __swift_project_boxed_opaque_existential_1(a2 + 8, v16);
    v20 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v17 + 24))(v19, v18, v16, v17);
    v22 = (_QWORD *)v20;
    v60 = (_QWORD *)v20;
    if ((a4 & 1) == 0)
    {
      v23 = specialized Collection.dropFirst(_:)(1, v20);
      v22 = (_QWORD *)specialized Array.init<A>(_:)(v23, v24, v25, v26);
      v60 = v22;
    }
    LOBYTE(v11) = specialized static Array<A>.== infix(_:_:)(v22, v58);
    if ((v11 & 1) != 0)
    {
      OUTLINED_FUNCTION_118();
      OUTLINED_FUNCTION_26();
    }
    else
    {
      if (one-time initialization token for guided != -1)
        swift_once();
      v27 = OUTLINED_FUNCTION_23_2();
      __swift_project_value_buffer(v27, (uint64_t)static Log.guided);
      v28 = OUTLINED_FUNCTION_113_2();
      v29 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_86_2(v29))
      {
        v30 = (uint8_t *)OUTLINED_FUNCTION_19_3();
        *(_WORD *)v30 = 0;
        OUTLINED_FUNCTION_98_2(&dword_248BE5000, v28, a4, "Deterministic run lookahead found unstable tokenization. Emitting retokenized tokenIDs", v30);
        OUTLINED_FUNCTION_7_4();
      }

      OUTLINED_FUNCTION_120_0();
      OUTLINED_FUNCTION_60_2();
      v31 = Logger.logObject.getter();
      v32 = static os_log_type_t.debug.getter();
      v57 = v11;
      if (os_log_type_enabled(v31, v32))
      {
        type = v32;
        v33 = OUTLINED_FUNCTION_19_3();
        v59[0] = OUTLINED_FUNCTION_19_3();
        *(_DWORD *)v33 = 136315650;
        OUTLINED_FUNCTION_120_0();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v33 + 12) = 2080;
        OUTLINED_FUNCTION_3_1();
        v34 = swift_bridgeObjectRetain();
        v35 = MEMORY[0x2495A7E30](v34, MEMORY[0x24BEE1768]);
        v37 = v36;
        OUTLINED_FUNCTION_82();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v59);
        OUTLINED_FUNCTION_91_0();
        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 22) = 2080;
        v38 = OUTLINED_FUNCTION_60_2();
        MEMORY[0x2495A7E30](v38, MEMORY[0x24BEE1768]);
        v39 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_92_2(v39, v40, v59);
        OUTLINED_FUNCTION_91_0();
        OUTLINED_FUNCTION_31_2();
        OUTLINED_FUNCTION_118();
        _os_log_impl(&dword_248BE5000, v31, type, "detokenizedText: %s failed stability check %s did not match greedy prefix search: %s", (uint8_t *)v33, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_7_4();
      }

      OUTLINED_FUNCTION_31_2();
      swift_bridgeObjectRelease_n();
      v41 = a2[11];
      v42 = a2[12];
      __swift_project_boxed_opaque_existential_1(v15, v41);
      OUTLINED_FUNCTION_3_1();
      v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
      v44 = OUTLINED_FUNCTION_60_2();
      v45 = v43(v44, v41, v42);
      v47 = v46;
      OUTLINED_FUNCTION_26();
      v48 = a2[11];
      v49 = a2[12];
      __swift_project_boxed_opaque_existential_1(v15, v48);
      if (v45 == (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v49 + 32))(v58, v48, v49) && v47 == v50)
      {
        swift_bridgeObjectRelease_n();
        LOBYTE(v11) = v57;
      }
      else
      {
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_123();
        LOBYTE(v11) = v57;
        if ((v52 & 1) == 0)
        {
          v53 = Logger.logObject.getter();
          v54 = static os_log_type_t.error.getter();
          if (OUTLINED_FUNCTION_86_2(v54))
          {
            v55 = (uint8_t *)OUTLINED_FUNCTION_19_3();
            *(_WORD *)v55 = 0;
            OUTLINED_FUNCTION_98_2(&dword_248BE5000, v53, v52, "Token stability changed expect characters.", v55);
            OUTLINED_FUNCTION_7_4();
          }

        }
      }
    }
  }
  return v11 & 1;
}

unint64_t specialized MutableCollection.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2 + 1;
  if (__OFADD__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a3 + 16);
  if (v4 < result || (uint64_t)v4 < v3)
    goto LABEL_11;
  if ((v3 & 0x8000000000000000) == 0)
    return swift_bridgeObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized ExhaustiveLogitMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v8 = type metadata accessor for IndexSet();
  v39 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v38[0] = (char *)v38 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v38 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v38 - v17;
  v40 = a1;
  IndexSet.init()();
  specialized TokenGrammarParser.optimizeState()();
  v19 = a3[11];
  v20 = a3[12];
  __swift_project_boxed_opaque_existential_1(a3 + 8, v19);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(0, result);
    v23 = v22;
    swift_bridgeObjectRetain();
    v41 = a4;
    specialized _ArrayProtocol.filter(_:)(v23, a4);
    v38[1] = a2;
    v24 = specialized TokenGrammarParser.accepts(tokenIDs:)();
    swift_bridgeObjectRelease();
    swift_retain();
    specialized _ArrayProtocol.filter(_:)(v24);
    v26 = v25;
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
    dispatch thunk of SetAlgebra.init()();
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = (uint64_t *)(v26 + 32);
      do
      {
        v29 = *v28++;
        v42 = v29;
        dispatch thunk of SetAlgebra.insert(_:)();
        --v27;
      }
      while (v27);
    }
    swift_bridgeObjectRelease();
    v30 = v39;
    v31 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v31(v18, v16, v8);
    IndexSet.formUnion(_:)();
    v32 = *(void (**)(char *, uint64_t))(v30 + 8);
    v32(v18, v8);
    if ((specialized TokenGrammarParser.fullMatch.getter() & 1) != 0)
    {
      v33 = v41;
      swift_bridgeObjectRetain();
      dispatch thunk of SetAlgebra.init()();
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
      {
        v35 = (uint64_t *)(v41 + 32);
        do
        {
          v36 = *v35++;
          v42 = v36;
          dispatch thunk of SetAlgebra.insert(_:)();
          --v34;
        }
        while (v34);
      }
      swift_bridgeObjectRelease();
      v37 = (char *)v38[0];
      v31((char *)v38[0], v11, v8);
      IndexSet.formUnion(_:)();
      v32(v37, v8);
    }
    return 0;
  }
  return result;
}

uint64_t specialized TokenGrammarParser.optimizeState()()
{
  uint64_t v0;
  pthread_mutex_t *v1;

  v1 = *(pthread_mutex_t **)(*(_QWORD *)(v0 + 64) + 16);
  pthread_mutex_lock(v1);
  EarleyParser.optimizeState()();
  return pthread_mutex_unlock(v1);
}

uint64_t specialized TokenGrammarParser.accepts(tokenIDs:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v0 + 64);
  pthread_mutex_lock(*(pthread_mutex_t **)(v5 + 16));
  swift_retain();
  VocabularyManager.prefixLookUp.getter(v4);
  swift_release();
  v6 = v4[6];
  swift_bridgeObjectRetain();
  outlined destroy of Grammar((uint64_t)v4, type metadata accessor for VocabularyManager.PrefixLookup);
  swift_retain();
  v7 = swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)(v7, v1, v6);
  v9 = v8;
  pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 16));
  return v9;
}

id specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::UInt a5, int a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id result;
  void *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  void *v59;
  int v60;
  id v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  char *v66;
  Swift::Int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  Swift::OpaquePointer v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int EnumCaseMultiPayload;
  void (*v106)(uint64_t, uint64_t);
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  Swift::UInt valid;
  Swift::UInt v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  char *v153;
  id v154;
  unint64_t v155;
  uint64_t v156;
  int internalBuild;
  uint64_t v158;
  int v159;
  int v160;
  Swift::Int v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177[10];
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[5];
  char v181;
  id v182;
  unint64_t v183;
  unint64_t v184;
  void (*v185)();
  uint64_t v186;
  char v187;
  id v188;
  unint64_t v189;
  unint64_t v190;
  void (*v191)();
  uint64_t v192;
  char v193;
  void *v194;
  unint64_t v195;
  unint64_t v196;
  void (*v197)();
  uint64_t v198;
  char v199;
  _BYTE __dst[72];

  v165 = a7;
  v160 = a6;
  v140 = a5;
  v148 = a4;
  v168 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
  MEMORY[0x24BDAC7A8](v9);
  v138 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  v11 = MEMORY[0x24BDAC7A8](v141);
  v133 = (char *)&v130 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v134 = (char *)&v130 - v13;
  v146 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x24BDAC7A8](v146);
  v145 = (uint64_t *)((char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v175 = type metadata accessor for TerminalSymbol(0);
  v142 = *(_QWORD *)(v175 - 8);
  v15 = MEMORY[0x24BDAC7A8](v175);
  v17 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v132 = (uint64_t)&v130 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v130 - v20;
  v22 = type metadata accessor for CharacterSet();
  v172 = *(_QWORD *)(v22 - 8);
  v173 = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v171 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v176 = (char *)&v130 - v25;
  v166 = type metadata accessor for IndexSet();
  v158 = *(_QWORD *)(v166 - 8);
  v26 = MEMORY[0x24BDAC7A8](v166);
  v137 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v130 - v29;
  v31 = MEMORY[0x24BDAC7A8](v28);
  v167 = (char *)&v130 - v32;
  v33 = MEMORY[0x24BDAC7A8](v31);
  v147 = (char *)&v130 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v143 = (uint64_t)&v130 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v144 = (char *)&v130 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v136 = (char *)&v130 - v40;
  MEMORY[0x24BDAC7A8](v39);
  v170 = (uint64_t)&v130 - v41;
  specialized TokenGrammarParser.optimizeState()();
  v164 = a2;
  valid = specialized TokenGrammarParser.nextValidTerminalsWithCacheKey()();
  v159 = v42;
  v169 = v43;
  v44 = swift_allocObject();
  v162 = (unint64_t)"XCEPT_QUOTE_AND_BACKSLASH";
  v163 = v44;
  *(_QWORD *)(v44 + 16) = 0xD00000000000001CLL;
  *(_QWORD *)(v44 + 24) = 0x8000000248C98A90;
  v45 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  v161 = (Swift::Int)result;
  if (!result)
  {
    __break(1u);
    goto LABEL_55;
  }
  v174 = v21;
  result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v47 = result;
  internalBuild = MobileGestalt_get_internalBuild();

  v48 = swift_allocObject();
  v155 = (unint64_t)"com.apple.tokengeneration";
  v156 = v48;
  *(_QWORD *)(v48 + 16) = 0xD000000000000014;
  *(_QWORD *)(v48 + 24) = 0x8000000248C98AD0;
  v49 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  v154 = result;
  if (!result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v153 = a1;
  result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  v50 = result;
  v152 = MobileGestalt_get_internalBuild();

  v51 = swift_allocObject();
  v150 = 0xD000000000000010;
  v151 = (unint64_t)"enableRightRecursion";
  *(_QWORD *)(v51 + 16) = 0xD000000000000010;
  *(_QWORD *)(v51 + 24) = 0x8000000248C98AF0;
  v52 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  if (!result)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v53 = result;
  v135 = v30;
  v131 = v17;
  result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v54 = result;
  v149 = MobileGestalt_get_internalBuild();

  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = 0xD000000000000014;
  *(_QWORD *)(v55 + 24) = 0x8000000248C98B10;
  v56 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  if (!result)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v57 = result;
  result = (id)MobileGestalt_get_current_device();
  v58 = (uint64_t)v174;
  if (result)
  {
    v59 = result;
    v60 = MobileGestalt_get_internalBuild();

    v180[0] = v161;
    v180[1] = 0xD00000000000001CLL;
    v180[2] = v162 | 0x8000000000000000;
    v180[3] = closure #1 in Overridable<A>.init(key:)partial apply;
    v180[4] = v163;
    v181 = internalBuild;
    v182 = v154;
    v183 = 0xD000000000000014;
    v184 = v155 | 0x8000000000000000;
    v185 = closure #1 in Overridable<A>.init(key:)partial apply;
    v186 = v156;
    v187 = v152;
    v188 = v53;
    v189 = v150;
    v190 = v151 | 0x8000000000000000;
    v191 = closure #1 in Overridable<A>.init(key:)partial apply;
    v192 = v51;
    v193 = v149;
    v194 = v57;
    v195 = 0xD000000000000014;
    v196 = 0x8000000248C98B10;
    v197 = closure #1 in Overridable<A>.init(key:)partial apply;
    v198 = v55;
    v199 = v60;
    if (v60)
    {
      v61 = v57;
      swift_bridgeObjectRetain();
      swift_retain();
      closure #1 in Overridable<A>.init(key:)();
    }
    outlined release of GuidedGenerationOverrides((uint64_t)v180);
    v62 = v166;
    v63 = v167;
    v64 = v159 | 2 | (v165 == 0) | v160;
    if (v159 & 1 | (v165 == 0) | v160 & 1)
    {
      LODWORD(v162) = v159 | 2 | (v165 == 0) | v160;
      v161 = 0;
      v65 = v169;
    }
    else
    {
      v66 = v167;
      Hasher.init()();
      Hasher._combine(_:)(valid);
      Hasher._combine(_:)(v140);
      memcpy(__dst, v177, sizeof(__dst));
      v67 = Hasher.finalize()();
      swift_retain();
      specialized TokenGrammarParser.markResultAsCached()();
      v68 = (uint64_t)v138;
      MaskCache.getMask(forHashKey:)(v67);
      swift_release();
      v69 = v141;
      if (__swift_getEnumTagSinglePayload(v68, 1, v141) != 1)
      {
        swift_bridgeObjectRelease();
        v94 = *(int *)(v69 + 48);
        v95 = *(void (**)(char *, uint64_t, uint64_t))(v158 + 32);
        v96 = v134;
        v95(v134, v68, v62);
        v97 = *(unsigned __int8 *)(v68 + v94);
        v98 = v133;
        v95(v133, (uint64_t)v96, v62);
        v99 = v153;
        v100 = (uint64_t)v98;
        v101 = v62;
LABEL_50:
        v95(v99, v100, v101);
        return (id)v97;
      }
      v161 = v67;
      LODWORD(v162) = v64;
      outlined destroy of (Locale?, Locale?)(v68, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool)?);
      v65 = v169;
      v63 = v66;
    }
    VocabularyManager.extractCandidates(nextValidTerminals:afterStartWord:)(v170, v65, 0);
    v163 = v70;
    v179 = v71;
    CharacterSet.init()();
    v72 = *(_QWORD *)(v65 + 16);
    if (v72)
    {
      v73 = v65 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
      v74 = *(_QWORD *)(v142 + 72);
      swift_bridgeObjectRetain();
      v75 = v171;
      v76 = v172;
      do
      {
        _s19TokenGenerationCore7GrammarVWOcTm_1(v73, v58, type metadata accessor for TerminalSymbol);
        if (swift_getEnumCaseMultiPayload() > 1)
        {
          v77 = v58;
          v78 = v173;
          (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v75, v77, v173);
          CharacterSet.formUnion(_:)();
          v79 = v78;
          v58 = (uint64_t)v174;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v79);
        }
        else
        {
          specialized Sequence.forEach(_:)(*(_QWORD *)v58, *(_QWORD *)(v58 + 8));
          swift_bridgeObjectRelease();
        }
        v73 += v74;
        --v72;
      }
      while (v72);
      swift_bridgeObjectRelease();
      v63 = v167;
    }
    v80 = v176;
    v81 = CharacterSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v80, v173);
    v82 = v164;
    v83 = v166;
    v84 = v170;
    if ((v81 & 1) != 0)
    {
      v85 = v168;
      v86 = *(_QWORD *)(v168 + 104);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
      dispatch thunk of SetAlgebra.init()();
      v178 = v86;
      dispatch thunk of SetAlgebra.insert(_:)();
      v87._rawValue = (void *)specialized TokenGrammarParser.nextValidTerminals(afterSpace:)(1);
      VocabularyManager.extractCandidates(nextValidTerminals:afterStartWord:)(v143, (uint64_t)v87._rawValue, 1);
      v89 = v88;
      v177[0] = v90;
      IndexSet.formUnion(_:)();
      type metadata accessor for VocabularyManager(0);
      v91 = specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(v89, v85, 1);
      swift_bridgeObjectRelease();
      static VocabularyManager.mergeSortedRanks(_:_:)(v177, v91);
      swift_bridgeObjectRelease();
      static VocabularyManager.mergeSortedRanks(_:_:)(&v179, v177[0]);
      swift_bridgeObjectRelease();
      VocabularyManager.allPrefixesHaveStartOfWordTokenPair(terminals:)(v87);
      v92 = *((_QWORD *)v87._rawValue + 2);
      if (v92 <= 1)
      {
        v93 = v158;
        v63 = v167;
        if (v92)
        {
          v102 = (char *)v87._rawValue
               + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
          swift_bridgeObjectRetain();
          v103 = (uint64_t)v102;
          v104 = v132;
          _s19TokenGenerationCore7GrammarVWOcTm_1(v103, v132, type metadata accessor for TerminalSymbol);
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          v84 = v170;
          if (EnumCaseMultiPayload == 2)
          {
            swift_bridgeObjectRelease();
            outlined destroy of Grammar(v104, type metadata accessor for TerminalSymbol);
            LODWORD(v176) = 0;
          }
          else
          {
            outlined destroy of Grammar(v104, type metadata accessor for TerminalSymbol);
            swift_bridgeObjectRelease();
            LODWORD(v176) = 1;
          }
        }
        else
        {
          LODWORD(v176) = 1;
          v84 = v170;
        }
      }
      else
      {
        LODWORD(v176) = 0;
        v93 = v158;
        v84 = v170;
        v63 = v167;
      }
      v106 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v106(v143, v83);
      swift_bridgeObjectRelease();
      v107 = v136;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v136, v144, v83);
      IndexSet.formUnion(_:)();
      v106((uint64_t)v107, v83);
    }
    else
    {
      LODWORD(v176) = 1;
      v93 = v158;
    }
    type metadata accessor for VocabularyManager(0);
    v108 = specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(v163, v168, 0);
    swift_bridgeObjectRelease();
    static VocabularyManager.mergeSortedRanks(_:_:)(&v179, v108);
    swift_bridgeObjectRelease();
    specialized MutableCollection<>.sort(by:)(&v179, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_retain();
    v109 = v145;
    VocabularyManager.prefixLookUp.getter(v145);
    swift_release();
    v110 = *(uint64_t *)((char *)v109 + *(int *)(v146 + 36));
    swift_bridgeObjectRetain();
    outlined destroy of Grammar((uint64_t)v109, type metadata accessor for VocabularyManager.PrefixLookup);
    swift_bridgeObjectRetain();
    v111 = swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_Sis5NeverOTg5268_s19TokenGenerationCore27SpaceLookaheadMaskGeneratorV09nextLogitF04from4with04stopA3IDs19leftContextCacheKey04maskP016numParallelTasks10Foundation8IndexSetV0R0_Sb26isPotentiallyDeterministictAA0A13GrammarParserCyxG_AA17VocabularyManagerCSaySiGSiSgAA0fP0CSgAVtFS2iXEfU_AFTf1cn_n(v111, v110);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v112 = specialized TokenGrammarParser.accepts(tokenIDs:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
    dispatch thunk of SetAlgebra.init()();
    v113 = *(_QWORD *)(v112 + 16);
    v114 = v63;
    if (v113)
    {
      v115 = (uint64_t *)(v112 + 32);
      do
      {
        v116 = *v115++;
        v178 = v116;
        dispatch thunk of SetAlgebra.insert(_:)();
        --v113;
      }
      while (v113);
    }
    swift_bridgeObjectRelease();
    v95 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 32);
    v117 = v147;
    v95(v147, (uint64_t)v114, v83);
    IndexSet.formUnion(_:)();
    v118 = *(void (**)(char *, uint64_t))(v93 + 8);
    v118(v117, v83);
    v119 = *(_QWORD *)(v82 + 32);
    swift_beginAccess();
    if (*(_BYTE *)(v119 + 25) == 1)
    {
      v120 = v148;
      swift_bridgeObjectRetain();
      v121 = v137;
      dispatch thunk of SetAlgebra.init()();
      v122 = *(_QWORD *)(v120 + 16);
      if (v122)
      {
        v123 = (uint64_t *)(v148 + 32);
        do
        {
          v124 = *v123++;
          v177[9] = v124;
          dispatch thunk of SetAlgebra.insert(_:)();
          --v122;
        }
        while (v122);
      }
      swift_bridgeObjectRelease();
      v125 = v135;
      v95(v135, (uint64_t)v121, v83);
      v84 = v170;
      IndexSet.formUnion(_:)();
      v118(v125, v83);
    }
    if (!(_DWORD)v176)
      goto LABEL_46;
    v126 = *(_QWORD *)(v169 + 16);
    if (v126 > 1)
      goto LABEL_46;
    if (v126)
    {
      v127 = v169 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
      swift_bridgeObjectRetain();
      v128 = v127;
      v129 = (uint64_t)v131;
      _s19TokenGenerationCore7GrammarVWOcTm_1(v128, (uint64_t)v131, type metadata accessor for TerminalSymbol);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        swift_bridgeObjectRelease();
        outlined destroy of Grammar(v129, type metadata accessor for TerminalSymbol);
LABEL_46:
        swift_bridgeObjectRelease();
        v97 = 0;
LABEL_47:
        if ((v162 & 1) == 0)
        {
          swift_retain();
          specialized TokenGrammarParser.markResultAsCached()();
          MaskCache.setMask(forHashKey:result:)(v161, v84, v97);
          swift_release();
        }
        v99 = v153;
        v100 = v84;
        v101 = v83;
        goto LABEL_50;
      }
      outlined destroy of Grammar(v129, type metadata accessor for TerminalSymbol);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v97 = 1;
    goto LABEL_47;
  }
LABEL_61:
  __break(1u);
  return result;
}

unint64_t specialized TokenGrammarParser.nextValidTerminalsWithCacheKey()()
{
  uint64_t v0;
  pthread_mutex_t *v1;
  unint64_t v2;

  v1 = *(pthread_mutex_t **)(*(_QWORD *)(v0 + 64) + 16);
  pthread_mutex_lock(v1);
  v2 = (unint64_t)EarleyParser.nextValidTerminalsWithCacheKey()();
  pthread_mutex_unlock(v1);
  return v2;
}

uint64_t specialized TokenGrammarParser.markResultAsCached()()
{
  uint64_t v0;
  pthread_mutex_t *v1;

  v1 = *(pthread_mutex_t **)(*(_QWORD *)(v0 + 64) + 16);
  pthread_mutex_lock(v1);
  *(_BYTE *)(v0 + 16) = 1;
  return pthread_mutex_unlock(v1);
}

uint64_t specialized SpaceLookaheadMaskGenerator.generateValidSearchCandidates(prefixes:vocabManager:allowSpacePrefix:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t result;
  uint64_t v41;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (!v3)
  {
LABEL_17:
    specialized Set.init<A>(_:)(v4);
    specialized _copyCollectionToContiguousArray<A>(_:)();
    v22 = v21;
    swift_bridgeObjectRelease();
    v41 = v22;
    swift_retain();
    specialized MutableCollection<>.sort(by:)(&v41, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(_QWORD *))specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_release();
    v23 = *(_QWORD *)(v41 + 16);
    if (v23)
    {
      v24 = (uint64_t *)(v41 + 40);
      v25 = MEMORY[0x24BEE4AF8];
      while (1)
      {
        v26 = *(v24 - 1);
        v27 = *v24;
        if ((a3 & 1) != 0
          || (v26 == 32 ? (v38 = v27 == 0xE100000000000000) : (v38 = 0),
              !v38 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
        {
          swift_bridgeObjectRetain();
          v28 = VocabularyManager.tokenRanks(withPrefix:startOfWord:)(v26, v27, a3 & 1);
          swift_bridgeObjectRelease();
          v29 = *(_QWORD *)(v28 + 16);
          v30 = *(_QWORD *)(v25 + 16);
          if (__OFADD__(v30, v29))
            goto LABEL_49;
          if (!swift_isUniquelyReferenced_nonNull_native() || v30 + v29 > *(_QWORD *)(v25 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v25 = v31;
          }
          if (*(_QWORD *)(v28 + 16))
          {
            v32 = *(_QWORD *)(v25 + 16);
            if ((*(_QWORD *)(v25 + 24) >> 1) - v32 < v29)
              goto LABEL_53;
            v33 = (void *)(v25 + 8 * v32 + 32);
            if (v28 + 32 < (unint64_t)v33 + 8 * v29 && (unint64_t)v33 < v28 + 32 + 8 * v29)
              goto LABEL_55;
            memcpy(v33, (const void *)(v28 + 32), 8 * v29);
            if (v29)
            {
              v35 = *(_QWORD *)(v25 + 16);
              v36 = __OFADD__(v35, v29);
              v37 = v35 + v29;
              if (v36)
                goto LABEL_54;
              *(_QWORD *)(v25 + 16) = v37;
            }
          }
          else if (v29)
          {
            goto LABEL_50;
          }
          swift_bridgeObjectRelease();
        }
        v24 += 2;
        if (!--v23)
          goto LABEL_45;
      }
    }
    v25 = MEMORY[0x24BEE4AF8];
LABEL_45:
    swift_release();
    return v25;
  }
  v41 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  v4 = v41;
  v6 = specialized _NativeSet.startIndex.getter(a1);
  v8 = v7;
  v10 = v9 & 1;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      goto LABEL_47;
    if (*(_DWORD *)(a1 + 36) != v8)
      goto LABEL_48;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v12 = *v11;
    v13 = v11[1];
    if ((v13 & 0x2000000000000000) != 0)
    {
      if ((v13 & 0xF00000000000000) == 0)
        goto LABEL_52;
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_13;
    }
    if ((v12 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_51;
    if ((v12 & 0x1000000000000000) != 0)
      goto LABEL_12;
    swift_bridgeObjectRetain();
    v12 = static String._copying(_:)();
    v15 = v14;
    swift_bridgeObjectRelease();
    v13 = v15;
LABEL_13:
    v41 = v4;
    v16 = *(_QWORD *)(v4 + 16);
    if (v16 >= *(_QWORD *)(v4 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 = v41;
    }
    *(_QWORD *)(v4 + 16) = v16 + 1;
    v17 = v4 + 16 * v16;
    *(_QWORD *)(v17 + 32) = v12;
    *(_QWORD *)(v17 + 40) = v13;
    v18 = specialized _NativeSet.index(after:)(v6, v8, v10 & 1, a1);
    v6 = v18;
    v8 = v19;
    v10 = v20 & 1;
    if (!--v3)
    {
      outlined consume of Set<String>.Index._Variant(v18, v19, v20 & 1);
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

BOOL static GuidedGenerationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void GuidedGenerationError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int GuidedGenerationError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GuidedGenerationError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static LogitMaskResponse.== infix(_:_:)()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_6_1();
  v2 = OUTLINED_FUNCTION_11_2();
  v20 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_62_0();
  v5 = v4 - v3;
  OUTLINED_FUNCTION_131_2();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_57_1();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (_QWORD **)((char *)&v19 - v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LogitMaskResponse, LogitMaskResponse));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_10_3(v11, v19);
  OUTLINED_FUNCTION_78_1();
  v12 = OUTLINED_FUNCTION_108_1();
  if ((_DWORD)v12 == 1)
  {
    OUTLINED_FUNCTION_106_1(v12, v13, type metadata accessor for LogitMaskResponse);
    if (OUTLINED_FUNCTION_28_2() == 1)
    {
      v14 = v20;
      (*(void (**)(uint64_t, _QWORD **, uint64_t))(v20 + 32))(v5, v1, v2);
      MEMORY[0x2495A780C](v0, v5);
      v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v15(v5, v2);
      v16 = ((uint64_t (*)(uint64_t, uint64_t))v15)(v0, v2);
LABEL_9:
      OUTLINED_FUNCTION_37_1(v16, type metadata accessor for LogitMaskResponse);
      goto LABEL_10;
    }
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v0, v2);
  }
  else
  {
    OUTLINED_FUNCTION_105_0(v12, v13, type metadata accessor for LogitMaskResponse);
    v17 = *v9;
    if (OUTLINED_FUNCTION_28_2() != 1)
    {
      specialized static Array<A>.== infix(_:_:)(v17, *v1);
      swift_bridgeObjectRelease();
      v16 = OUTLINED_FUNCTION_123();
      goto LABEL_9;
    }
    v18 = OUTLINED_FUNCTION_123();
  }
  OUTLINED_FUNCTION_109_2(v18, &demangling cache variable for type metadata for (LogitMaskResponse, LogitMaskResponse));
LABEL_10:
  OUTLINED_FUNCTION_8_1();
}

void TokenIDMask.init(vocabularySize:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v3 = v2;
  v4 = OUTLINED_FUNCTION_11_2();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  v8 = v7 - v6;
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(0, v1);
    v10 = v9;
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
    dispatch thunk of SetAlgebra.init()();
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = v10 + 32;
      do
      {
        v12 += 8;
        dispatch thunk of SetAlgebra.insert(_:)();
        --v11;
      }
      while (v11);
    }
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v8, v4);
    *(_QWORD *)(v3 + *(int *)(type metadata accessor for TokenIDMask(0) + 20)) = v1;
    OUTLINED_FUNCTION_8_1();
  }
}

void TokenIDMask.BOOLeanMask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, _QWORD);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_6_1();
  v29 = v1;
  v30 = v2;
  v3 = type metadata accessor for TokenIDMask(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for IndexSet.RangeView();
  v26 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_62_0();
  v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<IndexSet.RangeView>);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_62_0();
  v15 = v14 - v13;
  v25 = v3;
  v27 = v0;
  v16 = specialized ContiguousArray.init(repeating:count:)(0, *(_QWORD *)(v0 + *(int *)(v3 + 20)));
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
  {
    v23 = v16;
  }
  else
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v23 = v17;
  }
  IndexSet.rangeView.getter();
  IndexSet.RangeView.makeIterator()();
  v24 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v24(v11, v8);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet.RangeView and conformance IndexSet.RangeView, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF3E8], MEMORY[0x24BDCF400]);
  OUTLINED_FUNCTION_49_2();
  if (v16 == v28)
  {
LABEL_8:
    outlined destroy of (Locale?, Locale?)(v15, &demangling cache variable for type metadata for IndexingIterator<IndexSet.RangeView>);
  }
  else
  {
    while (1)
    {
      v18 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v21 = *v19;
      v20 = v19[1];
      v18(&v28, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v11, v15, v8);
      dispatch thunk of Collection.formIndex(after:)();
      v24(v11, v8);
      OUTLINED_FUNCTION_123_2(v27, v7);
      v22 = *(_QWORD *)(v7 + *(int *)(v25 + 20));
      outlined destroy of Grammar(v7, type metadata accessor for TokenIDMask);
      if (v22 < v20)
        break;
      if (__OFSUB__(v20, v21))
        goto LABEL_10;
      memset((void *)(v23 + 32 + v21), 1, v20 - v21);
      OUTLINED_FUNCTION_49_2();
      if (v20 == v28)
        goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

uint64_t specialized ContiguousArray.init(repeating:count:)(uint64_t result, size_t a2)
{
  char v3;
  uint64_t v4;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v3 = result;
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), v3 & 1, a2);
    return v4;
  }
  return result;
}

BOOL static TokenIDMask.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((MEMORY[0x2495A780C]() & 1) == 0)
    return 0;
  v4 = type metadata accessor for TokenIDMask(0);
  return *(_QWORD *)(a1 + *(int *)(v4 + 20)) == *(_QWORD *)(a2 + *(int *)(v4 + 20));
}

#error "248C1D148: call analysis failed (funcsize=104)"

void GuidedGenerationConstraints.init(grammar:tokenizer:stopTokenIDs:enableDeterministicTokenRuns:numParallelTasks:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  type metadata accessor for Grammar(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_79_1();
  _s19TokenGenerationCore7GrammarVWOcTm_1(v10, v0, type metadata accessor for Grammar);
  OUTLINED_FUNCTION_129_2();
  OUTLINED_FUNCTION_18_0();
  EarleyParser.init(grammar:)();
  outlined init with copy of GuidedGenerationTokenizer(v8, (uint64_t)&v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGrammarParser<EarleyParser>);
  v16 = OUTLINED_FUNCTION_18_0();
  v17 = OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_8_4(v17, (uint64_t)&v22, v6);
  v18 = OUTLINED_FUNCTION_114_2();
  specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(v18, v4, v2, v14, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, SpaceLookaheadMaskGenerator<EarleyParser>>.TokenParserManager, (uint64_t)&v22);
  v19 = v23;
  v20 = v24;
  v21 = v25;
  LOBYTE(v6) = v26;
  OUTLINED_FUNCTION_89_1();
  __swift_destroy_boxed_opaque_existential_1(v8);
  outlined destroy of Grammar(v10, type metadata accessor for Grammar);
  *(_QWORD *)v12 = v16;
  *(_OWORD *)(v12 + 8) = v22;
  *(_QWORD *)(v12 + 24) = v19;
  *(_BYTE *)(v12 + 32) = v20;
  *(_QWORD *)(v12 + 40) = v21;
  *(_BYTE *)(v12 + 48) = v6;
  OUTLINED_FUNCTION_8_1();
}

Swift::Void __swiftcall GuidedGenerationConstraints.initVocabManager()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*v0)
  {
    OUTLINED_FUNCTION_43_0();
    VocabularyManager.prefixLookUp.getter(v3);
    OUTLINED_FUNCTION_16_3();
    v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
    v5 = 0;
  }
  else
  {
    v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
    v5 = 1;
  }
  v6 = __swift_storeEnumTagSinglePayload((uint64_t)v3, v5, 1, v4);
  OUTLINED_FUNCTION_109_2(v6, &demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
}

uint64_t GuidedGenerationConstraints.generateNextLogitMask(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = a2;
  v3 = OUTLINED_FUNCTION_23_2();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  v2[13] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

uint64_t GuidedGenerationConstraints.generateNextLogitMask(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_70_1();
  if (one-time initialization token for guided != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD **)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v7 = __swift_project_value_buffer(v3, (uint64_t)static Log.guided);
  OUTLINED_FUNCTION_53_0(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  OUTLINED_FUNCTION_33_2(v1, "GuidedGenerationConstraints.generateNextLogitMask", 49, v2);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_61_2();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_95_1(v5, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:), v6);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_132_1();
  OUTLINED_FUNCTION_89_1();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_43_2(v8, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_15_3();
  return OUTLINED_FUNCTION_4_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[8] = a1;
  v2 = OUTLINED_FUNCTION_23_2();
  v1[9] = v2;
  v1[10] = *(_QWORD *)(v2 - 8);
  v1[11] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  v1[12] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

void GuidedGenerationConstraints.possiblyDeterministicTokens(follow:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for guided != -1)
    swift_once();
  v1 = v0[11];
  v2 = v0[12];
  v3 = v0[10];
  v4 = v0[8];
  v5 = __swift_project_value_buffer(v0[9], (uint64_t)static Log.guided);
  OUTLINED_FUNCTION_53_0(v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_33_2(v1, "GuidedGenerationConstraints.nextMaskPossiblyDeterministic", 57, v2);
  OUTLINED_FUNCTION_127_2();
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_61_2();
  specialized ParserGuidedGenerationConstraints.possiblyDeterministicTokens(follow:)(v4);
  swift_release();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_132_1();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_43_2(v6, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_67_2();
  __asm { BR              X1 }
}

uint64_t GuidedGenerationConstraints.nextMask(following:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = a2;
  v3 = OUTLINED_FUNCTION_23_2();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  v2[13] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

uint64_t GuidedGenerationConstraints.nextMask(following:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_70_1();
  if (one-time initialization token for guided != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD **)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v6 = __swift_project_value_buffer(*(_QWORD *)(v0 + 80), (uint64_t)static Log.guided);
  OUTLINED_FUNCTION_53_0(v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  OUTLINED_FUNCTION_33_2(v1, "GuidedGenerationConstraints.nextMask", 36, v2);
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_61_2();
  OUTLINED_FUNCTION_90_0();
  specialized ParserGuidedGenerationConstraints.nextMask(follow:)(v4, v5);
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_132_1();
  OUTLINED_FUNCTION_89_1();
  OUTLINED_FUNCTION_72_1();
  OUTLINED_FUNCTION_43_2(v7, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_15_3();
  return OUTLINED_FUNCTION_4_3(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMask(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = a2;
  v3 = OUTLINED_FUNCTION_11_2();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = OUTLINED_FUNCTION_5_4();
  v2[13] = OUTLINED_FUNCTION_12_0();
  v2[14] = OUTLINED_FUNCTION_131_2();
  v2[15] = OUTLINED_FUNCTION_5_4();
  v2[16] = OUTLINED_FUNCTION_12_0();
  v4 = OUTLINED_FUNCTION_23_2();
  v2[17] = v4;
  v2[18] = *(_QWORD *)(v4 - 8);
  v2[19] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  v2[20] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_9_4();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_42_1();
}

uint64_t GuidedGenerationConstraints.generateNextTokenIDMask(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  if (one-time initialization token for guided != -1)
    a1 = swift_once();
  v3 = v1[19];
  v2 = v1[20];
  v4 = (_QWORD *)v1[16];
  v5 = v1[9];
  OUTLINED_FUNCTION_59_1(a1, (uint64_t)static Log.guided);
  OUTLINED_FUNCTION_33_2(v3, "GuidedGenerationConstraints.generateNextTokenIDMask", 51, v2);
  v6 = v1[4];
  OUTLINED_FUNCTION_30_1();
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_95_1(v5, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))specialized SpaceLookaheadMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:), v4);
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_45_0();
  if (v3)
  {
    Signpost.end()();
    OUTLINED_FUNCTION_87_1(v8, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_80_2();
    OUTLINED_FUNCTION_93_1();
    v9 = (uint64_t (*)(void))v1[1];
  }
  else
  {
    OUTLINED_FUNCTION_102_2(v1[16], v7, type metadata accessor for LogitMaskResponse);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      v12 = v1[12];
      v11 = v1[13];
      v25 = v12;
      v13 = v1[10];
      v14 = v1[11];
      v15 = v1[8];
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
      v16(v11, v1[15], v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
      v17 = (_QWORD *)OUTLINED_FUNCTION_110_2(*(_QWORD *)(v6 + 24));
      v19 = *(_QWORD *)(v18 + 88);
      v20 = *(_QWORD *)(v18 + 96);
      __swift_project_boxed_opaque_existential_1(v17, v19);
      v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 56))(v19, v20);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
      OUTLINED_FUNCTION_43_2(v22, type metadata accessor for LogitMaskResponse);
      v16(v15, v25, v13);
      *(_QWORD *)(v15 + *(int *)(type metadata accessor for TokenIDMask(0) + 20)) = v21;
      type metadata accessor for TokenIDMaskResponse(0);
    }
    else
    {
      OUTLINED_FUNCTION_43_2(EnumCaseMultiPayload, type metadata accessor for LogitMaskResponse);
      OUTLINED_FUNCTION_73_2();
    }
    swift_storeEnumTagMultiPayload();
    Signpost.end()();
    OUTLINED_FUNCTION_87_1(v23, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_80_2();
    v9 = (uint64_t (*)(void))v1[1];
  }
  return v9();
}

uint64_t GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = a2;
  v4 = OUTLINED_FUNCTION_11_2();
  *(_QWORD *)(v3 + 136) = v4;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 152) = OUTLINED_FUNCTION_5_4();
  *(_QWORD *)(v3 + 160) = OUTLINED_FUNCTION_12_0();
  *(_QWORD *)(v3 + 168) = OUTLINED_FUNCTION_131_2();
  *(_QWORD *)(v3 + 176) = OUTLINED_FUNCTION_5_4();
  *(_QWORD *)(v3 + 184) = OUTLINED_FUNCTION_12_0();
  *(_QWORD *)(v3 + 192) = type metadata accessor for LogitMaskComputation(0);
  *(_QWORD *)(v3 + 200) = OUTLINED_FUNCTION_5_4();
  *(_QWORD *)(v3 + 208) = OUTLINED_FUNCTION_12_0();
  v5 = OUTLINED_FUNCTION_23_2();
  *(_QWORD *)(v3 + 216) = v5;
  *(_QWORD *)(v3 + 224) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 232) = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  *(_QWORD *)(v3 + 240) = OUTLINED_FUNCTION_14_2();
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v3 + 32) = v6;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(v3 + 64) = *(_BYTE *)(v2 + 48);
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_42_1();
}

uint64_t GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD *, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;

  if (one-time initialization token for guided != -1)
    a1 = swift_once();
  v3 = *(_QWORD *)(v1 + 232);
  v2 = *(_QWORD *)(v1 + 240);
  v4 = *(_QWORD **)(v1 + 208);
  v5 = *(_QWORD *)(v1 + 128);
  OUTLINED_FUNCTION_59_1(a1, (uint64_t)static Log.guided);
  OUTLINED_FUNCTION_33_2(v3, "GuidedGenerationConstraints.nextTokenIDMaskComputation", 54, v2);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(_QWORD *)(v1 + 40);
  *(_OWORD *)(v1 + 96) = *(_OWORD *)(v1 + 48);
  *(_BYTE *)(v1 + 112) = *(_BYTE *)(v1 + 64);
  *(_QWORD *)(v1 + 72) = v6;
  *(_QWORD *)(v1 + 80) = v7;
  *(_QWORD *)(v1 + 88) = v8;
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_50_1();
  OUTLINED_FUNCTION_30_1();
  specialized ParserGuidedGenerationConstraints.nextMask(follow:)(v5, v4);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_144();
  OUTLINED_FUNCTION_102_2(*(_QWORD *)(v1 + 208), v9, type metadata accessor for LogitMaskComputation);
  if (OUTLINED_FUNCTION_140_1() == 1)
  {
    v10 = *(__int128 **)(v1 + 200);
    v11 = *(_QWORD **)(v1 + 120);
    outlined destroy of Grammar(*(_QWORD *)(v1 + 208), type metadata accessor for LogitMaskComputation);
    v12 = OUTLINED_FUNCTION_18_0();
    v13 = *v10;
    *(_BYTE *)(v12 + 80) = *(_BYTE *)(v1 + 64);
    v14 = *(_OWORD *)(v1 + 48);
    v15 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v12 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v12 + 64) = v14;
    *(_OWORD *)(v12 + 16) = v13;
    *(_OWORD *)(v12 + 32) = v15;
    *v11 = &async function pointer to partial apply for closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:);
    v11[1] = v12;
    type metadata accessor for TokenIDMaskComputation(0);
    OUTLINED_FUNCTION_47_1();
    swift_storeEnumTagMultiPayload();
    outlined retain of GuidedGenerationConstraints(v1 + 16);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 176);
    v17 = *(_QWORD *)(v1 + 184);
    outlined init with take of TerminalSymbol(*(_QWORD *)(v1 + 200), v17, type metadata accessor for LogitMaskResponse);
    _s19TokenGenerationCore7GrammarVWOcTm_1(v17, v16, type metadata accessor for LogitMaskResponse);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v19 = *(_QWORD *)(v1 + 208);
    v20 = *(_QWORD **)(v1 + 176);
    v21 = *(_QWORD *)(v1 + 184);
    if (EnumCaseMultiPayload == 1)
    {
      v36 = *(_QWORD *)(v1 + 208);
      v22 = *(_QWORD **)(v1 + 152);
      v23 = *(_QWORD *)(v1 + 160);
      v25 = *(_QWORD *)(v1 + 136);
      v24 = *(_QWORD *)(v1 + 144);
      v26 = *(_QWORD *)(v1 + 120);
      v27 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v24 + 32);
      v27(v23, v20, v25);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v24 + 16))(v22, v23, v25);
      v28 = (_QWORD *)OUTLINED_FUNCTION_110_2(*(_QWORD *)(v8 + 24));
      v31 = *(_QWORD *)(v29 + 88);
      v30 = *(_QWORD *)(v29 + 96);
      __swift_project_boxed_opaque_existential_1(v28, v31);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(v31, v30);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      outlined destroy of Grammar(v21, type metadata accessor for LogitMaskResponse);
      outlined destroy of Grammar(v36, type metadata accessor for LogitMaskComputation);
      v27(v26, v22, v25);
      *(_QWORD *)(v26 + *(int *)(type metadata accessor for TokenIDMask(0) + 20)) = v32;
    }
    else
    {
      v33 = *(_QWORD **)(v1 + 120);
      outlined destroy of Grammar(*(_QWORD *)(v1 + 184), type metadata accessor for LogitMaskResponse);
      outlined destroy of Grammar(v19, type metadata accessor for LogitMaskComputation);
      *v33 = *v20;
    }
    type metadata accessor for TokenIDMaskResponse(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for TokenIDMaskComputation(0);
    swift_storeEnumTagMultiPayload();
  }
  Signpost.end()();
  OUTLINED_FUNCTION_87_1(v34, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_93_1();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v6 = type metadata accessor for IndexSet();
  v4[4] = v6;
  v4[5] = *(_QWORD *)(v6 - 8);
  v4[6] = swift_task_alloc();
  v4[7] = swift_task_alloc();
  v4[8] = type metadata accessor for LogitMaskResponse(0);
  v4[9] = swift_task_alloc();
  v7 = swift_task_alloc();
  v4[10] = v7;
  v10 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v8 = (_QWORD *)swift_task_alloc();
  v4[11] = v8;
  *v8 = v4;
  v8[1] = closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:);
  return v10(v7);
}

uint64_t closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  OUTLINED_FUNCTION_70_1();
  OUTLINED_FUNCTION_102_2(*(_QWORD *)(v0 + 80), v1, type metadata accessor for LogitMaskResponse);
  v2 = OUTLINED_FUNCTION_140_1();
  if ((_DWORD)v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v17 = v4;
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
    v9(v3, *(_QWORD *)(v0 + 72), v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
    v10 = (_QWORD *)OUTLINED_FUNCTION_110_2(*(_QWORD *)(*(_QWORD *)(v8 + 24) + 24));
    v12 = *(_QWORD *)(v11 + 88);
    v13 = *(_QWORD *)(v11 + 96);
    __swift_project_boxed_opaque_existential_1(v10, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v3, v5);
    OUTLINED_FUNCTION_126_2(v15, type metadata accessor for LogitMaskResponse);
    v9(v7, v17, v5);
    *(_QWORD *)(v7 + *(int *)(type metadata accessor for TokenIDMask(0) + 20)) = v14;
    type metadata accessor for TokenIDMaskResponse(0);
    OUTLINED_FUNCTION_47_1();
  }
  else
  {
    OUTLINED_FUNCTION_126_2(v2, type metadata accessor for LogitMaskResponse);
    OUTLINED_FUNCTION_73_2();
  }
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_112_1();
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_58_1();
  return OUTLINED_FUNCTION_4_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_112_1();
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_58_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = OUTLINED_FUNCTION_23_2();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 48) = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_45_1();
  *(_QWORD *)(v3 + 56) = OUTLINED_FUNCTION_14_2();
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v2 + 8);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v2 + 24);
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

void GuidedGenerationConstraints.validateTokens(from:candidateTokenIDs:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int *v17;
  Swift::Int v18;
  char v19;
  uint64_t v20;

  if (one-time initialization token for guided != -1)
    swift_once();
  v1 = v0[10];
  v2 = v0[7];
  v4 = v0[5];
  v3 = v0[6];
  v5 = v0[4];
  v6 = v0[2];
  v7 = __swift_project_value_buffer(v5, (uint64_t)static Log.guided);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  OUTLINED_FUNCTION_33_2(v3, "GuidedGenerationConstraints.validateTokens", 42, v2);
  v8 = (_QWORD *)OUTLINED_FUNCTION_110_2(*(_QWORD *)(v1 + 24));
  v10 = *(_QWORD *)(v9 + 88);
  v11 = *(_QWORD *)(v9 + 96);
  __swift_project_boxed_opaque_existential_1(v8, v10);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 56);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_30_1();
  OUTLINED_FUNCTION_43_0();
  v13 = v12(v10, v11);
  v14 = specialized ParserGuidedGenerationConstraints.TokenParserManager.tokenParserIndex(following:vocabularySize:)(v6, v13, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:));
  v15 = v0[3];
  specialized ParserGuidedGenerationConstraints.TokenParserManager.parser(at:)(v14);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = (Swift::Int *)(v0[3] + 32);
    swift_bridgeObjectRetain();
    do
    {
      v18 = *v17++;
      specialized TokenGrammarParser.childParser(consumingTokenID:)(v18);
      v19 = specialized TokenGrammarParser.partialMatch.getter();
      OUTLINED_FUNCTION_16_3();
      if ((v19 & 1) != 0)
        break;
      --v16;
    }
    while (v16);
    OUTLINED_FUNCTION_100_1();
  }
  swift_release();
  OUTLINED_FUNCTION_16_3();
  swift_release();
  OUTLINED_FUNCTION_16_3();
  Signpost.end()();
  OUTLINED_FUNCTION_126_2(v20, (uint64_t (*)(_QWORD))type metadata accessor for Signpost);
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_67_2();
  __asm { BR              X2 }
}

uint64_t GuidedGenerationConstraints.generateNextLogitMaskExhaustively(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[8] = a1;
  v3[9] = a2;
  v3[10] = *v2;
  OUTLINED_FUNCTION_54_1();
  return swift_task_switch();
}

uint64_t GuidedGenerationConstraints.generateNextLogitMaskExhaustively(from:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  result = *(_QWORD *)(v0 + 80);
  if (result)
  {
    v3 = *(_QWORD **)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 72);
    v4 = swift_retain();
    specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(v4, 0, 0, 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager.TokenParserCache>, &demangling cache variable for type metadata for ParserGuidedGenerationConstraints<EarleyParser, ExhaustiveLogitMaskGenerator<EarleyParser>>.TokenParserManager, v0 + 16);
    OUTLINED_FUNCTION_30_1();
    swift_retain();
    OUTLINED_FUNCTION_127_2();
    OUTLINED_FUNCTION_95_1(v2, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (void (*)(uint64_t))specialized Array._makeUniqueAndReserveCapacityIfNotUnique(), (void (*)(uint64_t))specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))specialized ExhaustiveLogitMaskGenerator.nextLogitMask(from:with:stopTokenIDs:leftContextCacheKey:maskCache:numParallelTasks:), v3);
    OUTLINED_FUNCTION_96_2();
    OUTLINED_FUNCTION_96_2();
    OUTLINED_FUNCTION_96_2();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_248C1E5F4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void specialized TokenGrammarParser.CharacterParserManager.childParserIndex(for:character:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  Swift::String_optional v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = v4;
  v7 = a1;
  v10 = *v4;
  if (*(_QWORD *)(*v4 + 16) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = (void *)a3;
  v6 = a2;
  specialized Dictionary.subscript.getter(a2, a3, *(_QWORD *)(v10 + 16 * a1 + 40));
  if ((v11 & 1) == 0)
    return;
  if (*(_QWORD *)(v10 + 16) > v7)
  {
    type metadata accessor for EarleyParser();
    swift_allocObject();
    v12 = swift_retain_n();
    v9 = EarleyParser.init(copying:)(v12);
    v13.value._countAndFlagsBits = v6;
    v13.value._object = v5;
    EarleyParser.parse(character:)(v13);
    swift_release();
    v8 = *(_QWORD *)(v10 + 16);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  v10 = v18;
LABEL_6:
  if (*(_QWORD *)(v10 + 16) <= v7)
  {
    __break(1u);
  }
  else
  {
    specialized Dictionary._Variant.setValue(_:forKey:)(v8, v6, (uint64_t)v5);
    swift_bridgeObjectRelease();
    *v3 = v10;
    swift_retain();
    v14 = Dictionary.init(dictionaryLiteral:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v15 = *(_QWORD *)(*v3 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
    v16 = *v3;
    *(_QWORD *)(v16 + 16) = v15 + 1;
    v17 = v16 + 16 * v15;
    *(_QWORD *)(v17 + 32) = v9;
    *(_QWORD *)(v17 + 40) = v14;
    swift_release();
    *v3 = v16;
  }
}

uint64_t specialized TokenGrammarParser.init(characterParser:tokenizer:lastConsumedTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v4 + 16) = 0;
  type metadata accessor for Lock();
  v9 = swift_allocObject();
  v10 = (pthread_mutex_t *)swift_slowAlloc();
  *(_QWORD *)(v9 + 16) = v10;
  pthread_mutex_init(v10, 0);
  *(_QWORD *)(v4 + 64) = v9;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a3;
  *(_BYTE *)(v4 + 48) = a4 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TokenGrammarParser<EarleyParser>.CharacterParserCache>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_248C911B0;
  swift_retain_n();
  v12 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = v12;
  swift_release();
  *(_QWORD *)(v4 + 56) = v11;
  return v4;
}

uint64_t specialized TokenGrammarParser.init(characterParser:tokenizer:stopTokenIDs:startOfWordToken:vocabManager:lastConsumedTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v16;
  pthread_mutex_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[5];
  _BYTE v26[40];
  __int128 v27[2];

  *(_BYTE *)(v8 + 16) = 0;
  type metadata accessor for Lock();
  v16 = swift_allocObject();
  v17 = (pthread_mutex_t *)swift_slowAlloc();
  *(_QWORD *)(v16 + 16) = v17;
  pthread_mutex_init(v17, 0);
  *(_QWORD *)(v8 + 64) = v16;
  outlined init with copy of GuidedGenerationTokenizer(a2, (uint64_t)v27);
  outlined init with copy of GuidedGenerationTokenizer(a2, (uint64_t)v26);
  if (a6)
  {
    swift_retain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    v18 = a6;
  }
  else
  {
    outlined init with copy of GuidedGenerationTokenizer((uint64_t)v26, (uint64_t)v25);
    v19 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = specialized VocabularyManager.__allocating_init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(v25, v19, 8492770, 0xA300000000000000, 8492770, 0xA300000000000000, a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGrammarParser<EarleyParser>.Tokenizer);
  v20 = (_QWORD *)swift_allocObject();
  outlined init with take of UnkeyedDecodingContainer(v27, (uint64_t)(v20 + 2));
  v20[7] = v18;
  v20[8] = a3;
  v20[9] = a4;
  v20[10] = a5;
  *(_QWORD *)(v8 + 24) = v20;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 40) = a7;
  *(_BYTE *)(v8 + 48) = a8 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TokenGrammarParser<EarleyParser>.CharacterParserCache>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_248C911B0;
  swift_retain_n();
  v22 = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v21 + 32) = a1;
  *(_QWORD *)(v21 + 40) = v22;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  swift_release();
  *(_QWORD *)(v8 + 56) = v21;
  return v8;
}

uint64_t specialized TokenGrammarParser.createCharacterParser(consuming:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  Swift::String_optional v3;
  uint64_t countAndFlagsBits;
  void *object;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String_optional v9;

  v1 = v0 + 56;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v3 = String.Iterator.next()();
  result = v3.value._countAndFlagsBits;
  if (v3.value._object)
  {
    countAndFlagsBits = v3.value._countAndFlagsBits;
    object = v3.value._object;
    v6 = 0;
    while ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 >= *(_QWORD *)(*(_QWORD *)v1 + 16))
        goto LABEL_12;
      v7 = *(_QWORD *)(*(_QWORD *)v1 + 16 * v6 + 32);
      swift_beginAccess();
      if ((*(_BYTE *)(v7 + 24) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      swift_beginAccess();
      specialized TokenGrammarParser.CharacterParserManager.childParserIndex(for:character:)(v6, countAndFlagsBits, (uint64_t)object);
      v6 = v8;
      swift_endAccess();
      swift_bridgeObjectRelease();
      v9 = String.Iterator.next()();
      result = v9.value._countAndFlagsBits;
      countAndFlagsBits = v9.value._countAndFlagsBits;
      object = v9.value._object;
      if (!v9.value._object)
        goto LABEL_10;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t type metadata accessor for LogitMaskResponse(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for LogitMaskResponse);
}

void _s19TokenGenerationCore7GrammarVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_112_0(a1, a2, a3);
  v4 = OUTLINED_FUNCTION_99_2();
  v5(v4, v3);
  OUTLINED_FUNCTION_23();
}

void specialized _copyCollectionToContiguousArray<A>(_:)()
{
  specialized _copyCollectionToContiguousArray<A>(_:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  const void *v2;
  size_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  OUTLINED_FUNCTION_68_2();
  if (*(_QWORD *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(v0);
    v2 = (const void *)OUTLINED_FUNCTION_18_0();
    v3 = _swift_stdlib_malloc_size(v2);
    OUTLINED_FUNCTION_18_3(v3);
    specialized Sequence._copySequenceContents(initializing:)(v4, v5, v6, v7);
    OUTLINED_FUNCTION_36_1();
    OUTLINED_FUNCTION_82_2();
    if (!v8)
      __break(1u);
  }
  OUTLINED_FUNCTION_25_2();
}

{
  uint64_t v0;
  const void *v1;
  size_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  OUTLINED_FUNCTION_68_2();
  if (*(_QWORD *)(v0 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v1 = (const void *)OUTLINED_FUNCTION_18_0();
    v2 = _swift_stdlib_malloc_size(v1);
    OUTLINED_FUNCTION_18_3(v2);
    specialized Sequence._copySequenceContents(initializing:)(v3, v4, v5, v6);
    OUTLINED_FUNCTION_36_1();
    OUTLINED_FUNCTION_82_2();
    if (!v7)
      __break(1u);
  }
  OUTLINED_FUNCTION_25_2();
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0)
      goto LABEL_11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GenerationSchema.Field>);
    v8 = *(_QWORD *)(type metadata accessor for GenerationSchema.Field() - 8);
    v9 = *(_QWORD *)(v8 + 72);
    v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v11 = (_QWORD *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    if (v9)
    {
      if (v12 - v10 != 0x8000000000000000 || v9 != -1)
      {
        v11[2] = v5;
        v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
LABEL_11:
        if (v4 != a3)
        {
          v14 = type metadata accessor for GenerationSchema.Field();
          specialized UnsafeMutablePointer.initialize(from:count:)(a2 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a3, v5);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v9;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v6)
  {
    if (v6 <= 0)
    {
      v4 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v9 = (_QWORD *)OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_69_1(v9);
    }
    if (v5 != a3)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a2 + 8 * a3), v6, (char *)(v4 + 32));
      return;
    }
    goto LABEL_10;
  }
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD v7[3];

  v3 = (_QWORD *)(a2 - a1);
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    if ((uint64_t)v3 <= 0)
    {
      v2 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v6 = (_QWORD *)OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_69_1(v6);
    }
    if (specialized Sequence._copySequenceContents(initializing:)(v7, (_QWORD *)(v2 + 32), (uint64_t)v3, a1, a2) == v3)
    {
LABEL_8:
      OUTLINED_FUNCTION_110_0();
      return;
    }
  }
  __break(1u);
}

uint64_t type metadata accessor for TokenIDMask(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for TokenIDMask);
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v87 = a1;
  v88 = v6;
  v92 = v7;
  v90 = v3;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v27 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v27 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v90 >= -1)
      {
        *(_QWORD *)(v88 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v79 = *v87;
    while (1)
    {
      v80 = v27 - 2;
      if (v27 < 2)
        break;
      if (!v79)
        goto LABEL_133;
      v81 = *(_QWORD *)(v10 + 32 + 16 * v80);
      v82 = *(_QWORD *)(v10 + 32 + 16 * (v27 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v79 + 8 * v81), (char *)(v79 + 8 * *(_QWORD *)(v10 + 32 + 16 * (v27 - 1))), v79 + 8 * v82, v92);
      if (v1)
        goto LABEL_86;
      if (v82 < v81)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = v85;
      }
      if (v80 >= *(_QWORD *)(v10 + 16))
        goto LABEL_120;
      v83 = (_QWORD *)(v10 + 32 + 16 * v80);
      *v83 = v81;
      v83[1] = v82;
      v84 = *(_QWORD *)(v10 + 16);
      if (v27 > v84)
        goto LABEL_121;
      memmove((void *)(v10 + 32 + 16 * (v27 - 1)), (const void *)(v10 + 32 + 16 * v27), 16 * (v84 - v27));
      *(_QWORD *)(v10 + 16) = v84 - 1;
      v27 = v84 - 1;
      if (v84 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v86 = *a1 - 8;
  v10 = MEMORY[0x24BEE4AF8];
  v89 = v5;
  v91 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(_QWORD *)(v9 + 8 * v8);
      v13 = *(_QWORD *)(v9 + 8 * v11);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v14 = v12;
        while (1)
        {
          v15 = *(_QWORD *)(v9 + 8 * v8);
          if (v12 < v13 == v15 >= v14)
            break;
          ++v8;
          v14 = v15;
          if (v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v12 < v13)
      {
        if (v8 < v11)
          goto LABEL_126;
        if (v11 < v8)
        {
          v16 = v8 - 1;
          v17 = v11;
          do
          {
            if (v17 != v16)
            {
              if (!v9)
                goto LABEL_132;
              v18 = *(_QWORD *)(v9 + 8 * v17);
              *(_QWORD *)(v9 + 8 * v17) = *(_QWORD *)(v9 + 8 * v16);
              *(_QWORD *)(v9 + 8 * v16) = v18;
            }
            v58 = ++v17 < v16--;
          }
          while (v58);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_123;
      if (v8 - v11 < v5)
      {
        v19 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_127;
        if (v19 >= v3)
          v19 = v3;
        if (v19 < v11)
          goto LABEL_128;
        if (v8 != v19)
        {
          v20 = (uint64_t *)(v86 + 8 * v8);
          do
          {
            v21 = *(_QWORD *)(v9 + 8 * v8);
            v22 = v11;
            v23 = v20;
            do
            {
              v24 = *v23;
              if (v21 >= *v23)
                break;
              if (!v9)
                goto LABEL_130;
              *v23 = v21;
              v23[1] = v24;
              --v23;
              ++v22;
            }
            while (v8 != v22);
            ++v8;
            ++v20;
          }
          while (v8 != v19);
          v8 = v19;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v77;
    }
    v26 = *(_QWORD *)(v10 + 16);
    v25 = *(_QWORD *)(v10 + 24);
    v27 = v26 + 1;
    v9 = v91;
    if (v26 >= v25 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, (char *)v10);
      v9 = v91;
      v10 = v78;
    }
    *(_QWORD *)(v10 + 16) = v27;
    v28 = v10 + 32;
    v29 = (Swift::Int *)(v10 + 32 + 16 * v26);
    *v29 = v11;
    v29[1] = v8;
    if (v26)
      break;
    v27 = 1;
LABEL_81:
    v5 = v89;
    v3 = v90;
    if (v8 >= v90)
      goto LABEL_90;
  }
  while (1)
  {
    v30 = v27 - 1;
    if (v27 >= 4)
    {
      v35 = v28 + 16 * v27;
      v36 = *(_QWORD *)(v35 - 64);
      v37 = *(_QWORD *)(v35 - 56);
      v41 = __OFSUB__(v37, v36);
      v38 = v37 - v36;
      if (v41)
        goto LABEL_107;
      v40 = *(_QWORD *)(v35 - 48);
      v39 = *(_QWORD *)(v35 - 40);
      v41 = __OFSUB__(v39, v40);
      v33 = v39 - v40;
      v34 = v41;
      if (v41)
        goto LABEL_108;
      v42 = v27 - 2;
      v43 = (uint64_t *)(v28 + 16 * (v27 - 2));
      v45 = *v43;
      v44 = v43[1];
      v41 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      if (v41)
        goto LABEL_109;
      v41 = __OFADD__(v33, v46);
      v47 = v33 + v46;
      if (v41)
        goto LABEL_111;
      if (v47 >= v38)
      {
        v65 = (uint64_t *)(v28 + 16 * v30);
        v67 = *v65;
        v66 = v65[1];
        v41 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v41)
          goto LABEL_117;
        v58 = v33 < v68;
        goto LABEL_70;
      }
    }
    else
    {
      if (v27 != 3)
      {
        v59 = *(_QWORD *)(v10 + 32);
        v60 = *(_QWORD *)(v10 + 40);
        v41 = __OFSUB__(v60, v59);
        v52 = v60 - v59;
        v53 = v41;
        goto LABEL_64;
      }
      v32 = *(_QWORD *)(v10 + 32);
      v31 = *(_QWORD *)(v10 + 40);
      v41 = __OFSUB__(v31, v32);
      v33 = v31 - v32;
      v34 = v41;
    }
    if ((v34 & 1) != 0)
      goto LABEL_110;
    v42 = v27 - 2;
    v48 = (uint64_t *)(v28 + 16 * (v27 - 2));
    v50 = *v48;
    v49 = v48[1];
    v51 = __OFSUB__(v49, v50);
    v52 = v49 - v50;
    v53 = v51;
    if (v51)
      goto LABEL_112;
    v54 = (uint64_t *)(v28 + 16 * v30);
    v56 = *v54;
    v55 = v54[1];
    v41 = __OFSUB__(v55, v56);
    v57 = v55 - v56;
    if (v41)
      goto LABEL_114;
    if (__OFADD__(v52, v57))
      goto LABEL_116;
    if (v52 + v57 >= v33)
    {
      v58 = v33 < v57;
LABEL_70:
      if (v58)
        v30 = v42;
      goto LABEL_72;
    }
LABEL_64:
    if ((v53 & 1) != 0)
      goto LABEL_113;
    v61 = (uint64_t *)(v28 + 16 * v30);
    v63 = *v61;
    v62 = v61[1];
    v41 = __OFSUB__(v62, v63);
    v64 = v62 - v63;
    if (v41)
      goto LABEL_115;
    if (v64 < v52)
      goto LABEL_81;
LABEL_72:
    v69 = v10;
    v70 = v30 - 1;
    if (v30 - 1 >= v27)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v9)
      goto LABEL_131;
    v71 = (uint64_t *)(v28 + 16 * v70);
    v72 = *v71;
    v73 = v28;
    v74 = (_QWORD *)(v28 + 16 * v30);
    v75 = v74[1];
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v9 + 8 * *v71), (char *)(v9 + 8 * *v74), v9 + 8 * v75, v92);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_104;
    if (v30 > *(_QWORD *)(v69 + 16))
      goto LABEL_105;
    *v71 = v72;
    *(_QWORD *)(v73 + 16 * v70 + 8) = v75;
    v76 = *(_QWORD *)(v69 + 16);
    if (v30 >= v76)
      goto LABEL_106;
    v10 = v69;
    v27 = v76 - 1;
    memmove(v74, v74 + 2, 16 * (v76 - 1 - v30));
    v28 = v73;
    *(_QWORD *)(v69 + 16) = v76 - 1;
    v9 = v91;
    if (v76 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v90 < -1)
    goto LABEL_125;
  *(_QWORD *)(v88 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v16;
  Swift::Int v17;
  _QWORD *v18;
  _QWORD *v19;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  Swift::Int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  Swift::Int v85;
  _QWORD *v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v101 = v6;
  v102 = v3;
  v103 = v7;
  v99 = a1;
  if (v3 <= 0)
  {
    v104 = MEMORY[0x24BEE4AF8];
    v33 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_110:
    if (v33 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(_QWORD *)(v101 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v90 = *v99;
    while (1)
    {
      v91 = v33 - 2;
      if (v33 < 2)
        break;
      if (!v90)
        goto LABEL_153;
      v92 = v104;
      v93 = *(_QWORD *)(v104 + 32 + 16 * v91);
      v94 = *(_QWORD *)(v104 + 32 + 16 * (v33 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v90 + 16 * v93), (char *)(v90 + 16 * *(_QWORD *)(v104 + 32 + 16 * (v33 - 1))), v90 + 16 * v94, v103);
      if (v1)
        goto LABEL_106;
      if (v94 < v93)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v104);
        v92 = v97;
      }
      if (v91 >= *(_QWORD *)(v92 + 16))
        goto LABEL_140;
      v95 = (_QWORD *)(v92 + 32 + 16 * v91);
      *v95 = v93;
      v95[1] = v94;
      v96 = *(_QWORD *)(v92 + 16);
      if (v33 > v96)
        goto LABEL_141;
      memmove((void *)(v92 + 32 + 16 * (v33 - 1)), (const void *)(v92 + 32 + 16 * v33), 16 * (v96 - v33));
      v104 = v92;
      *(_QWORD *)(v92 + 16) = v96 - 1;
      v33 = v96 - 1;
      v3 = v102;
      if (v96 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v100 = v5;
  v8 = 0;
  v9 = *a1;
  v98 = *a1 + 8;
  v104 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    v10 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v11 = (uint64_t *)(v9 + 16 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = (_QWORD *)(v9 + 16 * v10);
    if (v12 == *v14 && v13 == v14[1])
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v3)
        goto LABEL_31;
      v16 = 0;
LABEL_13:
      v18 = (_QWORD *)(v98 + 16 * v17);
      do
      {
        v19 = (_QWORD *)(v9 + 16 * v8);
        if (*(v18 - 1) == *v19 && *v18 == v19[1])
        {
          if ((v16 & 1) != 0)
            goto LABEL_24;
        }
        else if (((v16 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
        {
          goto LABEL_23;
        }
        v18 += 2;
        v21 = v17 + 1;
        v8 = v17;
        v17 = v21;
      }
      while (v21 < v3);
      v17 = v21;
      goto LABEL_23;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v17 = v10 + 2;
    if (v10 + 2 < v3)
      goto LABEL_13;
LABEL_23:
    v8 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_32;
LABEL_24:
    if (v17 < v10)
      goto LABEL_148;
    if (v10 < v17)
    {
      v22 = 16 * v17;
      v23 = 16 * v10;
      v24 = v17;
      v25 = v10;
      do
      {
        if (v25 != --v24)
        {
          if (!v9)
            goto LABEL_152;
          v26 = v9 + v22;
          v27 = *(_QWORD *)(v9 + v23);
          v28 = *(_QWORD *)(v9 + v23 + 8);
          *(_OWORD *)(v9 + v23) = *(_OWORD *)(v9 + v22 - 16);
          *(_QWORD *)(v26 - 16) = v27;
          *(_QWORD *)(v26 - 8) = v28;
        }
        ++v25;
        v22 -= 16;
        v23 += 16;
      }
      while (v25 < v24);
    }
LABEL_31:
    v8 = v17;
LABEL_32:
    if (v8 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v8, v10))
      goto LABEL_143;
    if (v8 - v10 >= v100)
      goto LABEL_41;
    if (__OFADD__(v10, v100))
      goto LABEL_146;
    if (v10 + v100 >= v3)
      v29 = v3;
    else
      v29 = v10 + v100;
    if (v29 < v10)
      goto LABEL_147;
    if (v8 == v29)
    {
LABEL_41:
      v30 = v104;
    }
    else
    {
      v81 = (_QWORD *)(v9 + 16 * v8);
      v30 = v104;
      do
      {
        v82 = (uint64_t *)(v9 + 16 * v8);
        v83 = *v82;
        v84 = v82[1];
        v85 = v10;
        v86 = v81;
        do
        {
          v87 = v83 == *(v86 - 2) && v84 == *(v86 - 1);
          if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v9)
            goto LABEL_150;
          v83 = *v86;
          v84 = v86[1];
          *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
          *(v86 - 1) = v84;
          *(v86 - 2) = v83;
          v86 -= 2;
          ++v85;
        }
        while (v8 != v85);
        ++v8;
        v81 += 2;
      }
      while (v8 != v29);
      v8 = v29;
    }
    if (v8 < v10)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, (char *)v30);
      v30 = v88;
    }
    v32 = *(_QWORD *)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    v33 = v32 + 1;
    if (v32 >= v31 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, (char *)v30);
      v30 = v89;
    }
    *(_QWORD *)(v30 + 16) = v33;
    v34 = v30 + 32;
    v35 = (Swift::Int *)(v30 + 32 + 16 * v32);
    *v35 = v10;
    v35[1] = v8;
    v104 = v30;
    if (v32)
      break;
    v33 = 1;
LABEL_90:
    v3 = v102;
    if (v8 >= v102)
      goto LABEL_110;
  }
  while (1)
  {
    v36 = v33 - 1;
    if (v33 >= 4)
    {
      v41 = v34 + 16 * v33;
      v42 = *(_QWORD *)(v41 - 64);
      v43 = *(_QWORD *)(v41 - 56);
      v47 = __OFSUB__(v43, v42);
      v44 = v43 - v42;
      if (v47)
        goto LABEL_127;
      v46 = *(_QWORD *)(v41 - 48);
      v45 = *(_QWORD *)(v41 - 40);
      v47 = __OFSUB__(v45, v46);
      v39 = v45 - v46;
      v40 = v47;
      if (v47)
        goto LABEL_128;
      v48 = v33 - 2;
      v49 = (uint64_t *)(v34 + 16 * (v33 - 2));
      v51 = *v49;
      v50 = v49[1];
      v47 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      if (v47)
        goto LABEL_129;
      v47 = __OFADD__(v39, v52);
      v53 = v39 + v52;
      if (v47)
        goto LABEL_131;
      if (v53 >= v44)
      {
        v71 = (uint64_t *)(v34 + 16 * v36);
        v73 = *v71;
        v72 = v71[1];
        v47 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v47)
          goto LABEL_137;
        v64 = v39 < v74;
        goto LABEL_79;
      }
    }
    else
    {
      if (v33 != 3)
      {
        v65 = *(_QWORD *)(v30 + 32);
        v66 = *(_QWORD *)(v30 + 40);
        v47 = __OFSUB__(v66, v65);
        v58 = v66 - v65;
        v59 = v47;
        goto LABEL_73;
      }
      v38 = *(_QWORD *)(v30 + 32);
      v37 = *(_QWORD *)(v30 + 40);
      v47 = __OFSUB__(v37, v38);
      v39 = v37 - v38;
      v40 = v47;
    }
    if ((v40 & 1) != 0)
      goto LABEL_130;
    v48 = v33 - 2;
    v54 = (uint64_t *)(v34 + 16 * (v33 - 2));
    v56 = *v54;
    v55 = v54[1];
    v57 = __OFSUB__(v55, v56);
    v58 = v55 - v56;
    v59 = v57;
    if (v57)
      goto LABEL_132;
    v60 = (uint64_t *)(v34 + 16 * v36);
    v62 = *v60;
    v61 = v60[1];
    v47 = __OFSUB__(v61, v62);
    v63 = v61 - v62;
    if (v47)
      goto LABEL_134;
    if (__OFADD__(v58, v63))
      goto LABEL_136;
    if (v58 + v63 >= v39)
    {
      v64 = v39 < v63;
LABEL_79:
      if (v64)
        v36 = v48;
      goto LABEL_81;
    }
LABEL_73:
    if ((v59 & 1) != 0)
      goto LABEL_133;
    v67 = (uint64_t *)(v34 + 16 * v36);
    v69 = *v67;
    v68 = v67[1];
    v47 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v47)
      goto LABEL_135;
    if (v70 < v58)
      goto LABEL_90;
LABEL_81:
    v75 = v36 - 1;
    if (v36 - 1 >= v33)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v76 = (uint64_t *)(v34 + 16 * v75);
    v77 = *v76;
    v78 = (_QWORD *)(v34 + 16 * v36);
    v79 = v78[1];
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v9 + 16 * *v76), (char *)(v9 + 16 * *v78), v9 + 16 * v79, v103);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_124;
    if (v36 > *(_QWORD *)(v104 + 16))
      goto LABEL_125;
    *v76 = v77;
    *(_QWORD *)(v34 + 16 * v75 + 8) = v79;
    v80 = *(_QWORD *)(v104 + 16);
    if (v36 >= v80)
      goto LABEL_126;
    v30 = v104;
    v33 = v80 - 1;
    memmove((void *)(v34 + 16 * v36), v78 + 2, 16 * (v80 - 1 - v36));
    *(_QWORD *)(v104 + 16) = v80 - 1;
    if (v80 <= 2)
      goto LABEL_90;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v102 < -1)
    goto LABEL_145;
  *(_QWORD *)(v101 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  uint64_t v112;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_128;
  }
  v5 = v4;
  v112 = v1;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v105 = v6;
  v111 = v7;
  v108 = v3;
  v102 = a1;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v39 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_94:
    if (v39 < 2)
    {
LABEL_105:
      swift_bridgeObjectRelease();
      if (v108 >= -1)
      {
        *(_QWORD *)(v105 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_133;
    }
    v93 = *v102;
    while (1)
    {
      v94 = v39 - 2;
      if (v39 < 2)
        break;
      if (!v93)
        goto LABEL_137;
      v95 = *(_QWORD *)(v10 + 32 + 16 * v94);
      v96 = *(_QWORD *)(v10 + 32 + 16 * (v39 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)(v93 + 24 * v95, (__int128 *)(v93 + 24 * *(_QWORD *)(v10 + 32 + 16 * (v39 - 1))), v93 + 24 * v96, v111);
      if (v112)
        goto LABEL_90;
      if (v96 < v95)
        goto LABEL_123;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = v99;
      }
      if (v94 >= *(_QWORD *)(v10 + 16))
        goto LABEL_124;
      v97 = (_QWORD *)(v10 + 32 + 16 * v94);
      *v97 = v95;
      v97[1] = v96;
      v98 = *(_QWORD *)(v10 + 16);
      if (v39 > v98)
        goto LABEL_125;
      memmove((void *)(v10 + 32 + 16 * (v39 - 1)), (const void *)(v10 + 32 + 16 * v39), 16 * (v98 - v39));
      *(_QWORD *)(v10 + 16) = v98 - 1;
      v39 = v98 - 1;
      if (v98 <= 2)
        goto LABEL_105;
    }
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
    return;
  }
  v104 = v5;
  v8 = 0;
  v9 = *a1;
  v100 = *a1 + 16;
  v101 = *a1 + 64;
  v10 = MEMORY[0x24BEE4AF8];
  v11 = v108;
  while (1)
  {
    v12 = v8++;
    v109 = v12;
    if (v8 < v11)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v106 = String.count.getter();
      v13 = String.count.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = v12 + 2;
      if (v12 + 2 < v11)
      {
        v14 = v101 + 24 * v12;
        while (1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v15 = String.count.getter();
          v16 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v106 < v13 == v15 >= v16)
            break;
          ++v8;
          v14 += 24;
          v11 = v108;
          if (v8 >= v108)
          {
            v8 = v108;
            goto LABEL_11;
          }
        }
        v11 = v108;
LABEL_11:
        v12 = v109;
      }
      if (v106 < v13)
      {
        if (v8 < v12)
          goto LABEL_130;
        if (v12 < v8)
        {
          v17 = 24 * v8;
          v18 = 24 * v12;
          v19 = v8;
          v20 = v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v9)
                goto LABEL_136;
              v21 = v9 + v18;
              v22 = v9 + v17;
              v23 = *(_QWORD *)(v9 + v18 + 16);
              v24 = *(_OWORD *)(v9 + v18);
              v25 = *(_QWORD *)(v9 + v17 - 8);
              *(_OWORD *)v21 = *(_OWORD *)(v9 + v17 - 24);
              *(_QWORD *)(v21 + 16) = v25;
              *(_OWORD *)(v22 - 24) = v24;
              *(_QWORD *)(v22 - 8) = v23;
            }
            ++v20;
            v17 -= 24;
            v18 += 24;
          }
          while (v20 < v19);
        }
      }
    }
    if (v8 < v11)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_127;
      if (v8 - v12 < v104)
      {
        if (__OFADD__(v12, v104))
          goto LABEL_131;
        if (v12 + v104 >= v11)
          v26 = v11;
        else
          v26 = v12 + v104;
        if (v26 < v12)
          goto LABEL_132;
        if (v8 != v26)
        {
          v103 = v10;
          v27 = (_QWORD *)(v100 + 24 * v8);
          v107 = v26;
          do
          {
            v28 = v12;
            v29 = v27;
            do
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v30 = String.count.getter();
              v31 = String.count.getter();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v30 >= v31)
                break;
              if (!v9)
                goto LABEL_134;
              v32 = v29 - 2;
              v33 = v29 - 5;
              v34 = *(v29 - 3);
              *(v29 - 3) = *v29;
              v29 -= 3;
              v35 = v29[1];
              v36 = v29[2];
              *(_OWORD *)v32 = *v33;
              v32[2] = v34;
              *(v29 - 2) = v35;
              *(v29 - 1) = v36;
              ++v28;
            }
            while (v8 != v28);
            ++v8;
            v27 += 3;
            v12 = v109;
          }
          while (v8 != v107);
          v8 = v107;
          v10 = v103;
        }
      }
    }
    if (v8 < v12)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v91;
    }
    v38 = *(_QWORD *)(v10 + 16);
    v37 = *(_QWORD *)(v10 + 24);
    v39 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, (char *)v10);
      v10 = v92;
    }
    *(_QWORD *)(v10 + 16) = v39;
    v110 = v10 + 32;
    v40 = (uint64_t *)(v10 + 32 + 16 * v38);
    *v40 = v12;
    v40[1] = v8;
    if (v38)
      break;
    v39 = 1;
LABEL_85:
    v11 = v108;
    if (v8 >= v108)
      goto LABEL_94;
  }
  v41 = v10 + 32;
  while (1)
  {
    v42 = v39 - 1;
    if (v39 >= 4)
    {
      v47 = v41 + 16 * v39;
      v48 = *(_QWORD *)(v47 - 64);
      v49 = *(_QWORD *)(v47 - 56);
      v53 = __OFSUB__(v49, v48);
      v50 = v49 - v48;
      if (v53)
        goto LABEL_111;
      v52 = *(_QWORD *)(v47 - 48);
      v51 = *(_QWORD *)(v47 - 40);
      v53 = __OFSUB__(v51, v52);
      v45 = v51 - v52;
      v46 = v53;
      if (v53)
        goto LABEL_112;
      v54 = v39 - 2;
      v55 = (uint64_t *)(v41 + 16 * (v39 - 2));
      v57 = *v55;
      v56 = v55[1];
      v53 = __OFSUB__(v56, v57);
      v58 = v56 - v57;
      if (v53)
        goto LABEL_113;
      v53 = __OFADD__(v45, v58);
      v59 = v45 + v58;
      if (v53)
        goto LABEL_115;
      if (v59 >= v50)
      {
        v77 = (uint64_t *)(v41 + 16 * v42);
        v79 = *v77;
        v78 = v77[1];
        v53 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v53)
          goto LABEL_121;
        v70 = v45 < v80;
        goto LABEL_74;
      }
    }
    else
    {
      if (v39 != 3)
      {
        v71 = *(_QWORD *)(v10 + 32);
        v72 = *(_QWORD *)(v10 + 40);
        v53 = __OFSUB__(v72, v71);
        v64 = v72 - v71;
        v65 = v53;
        goto LABEL_68;
      }
      v44 = *(_QWORD *)(v10 + 32);
      v43 = *(_QWORD *)(v10 + 40);
      v53 = __OFSUB__(v43, v44);
      v45 = v43 - v44;
      v46 = v53;
    }
    if ((v46 & 1) != 0)
      goto LABEL_114;
    v54 = v39 - 2;
    v60 = (uint64_t *)(v41 + 16 * (v39 - 2));
    v62 = *v60;
    v61 = v60[1];
    v63 = __OFSUB__(v61, v62);
    v64 = v61 - v62;
    v65 = v63;
    if (v63)
      goto LABEL_116;
    v66 = (uint64_t *)(v41 + 16 * v42);
    v68 = *v66;
    v67 = v66[1];
    v53 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v53)
      goto LABEL_118;
    if (__OFADD__(v64, v69))
      goto LABEL_120;
    if (v64 + v69 >= v45)
    {
      v70 = v45 < v69;
LABEL_74:
      if (v70)
        v42 = v54;
      goto LABEL_76;
    }
LABEL_68:
    if ((v65 & 1) != 0)
      goto LABEL_117;
    v73 = (uint64_t *)(v41 + 16 * v42);
    v75 = *v73;
    v74 = v73[1];
    v53 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v53)
      goto LABEL_119;
    if (v76 < v64)
      goto LABEL_85;
LABEL_76:
    v81 = v42 - 1;
    if (v42 - 1 >= v39)
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }
    v82 = v9;
    if (!v9)
      goto LABEL_135;
    v83 = v10;
    v84 = v41;
    v85 = (uint64_t *)(v41 + 16 * v81);
    v86 = *v85;
    v87 = (_QWORD *)(v84 + 16 * v42);
    v88 = v87[1];
    v89 = v82;
    specialized _merge<A>(low:mid:high:buffer:by:)(v82 + 24 * *v85, (__int128 *)(v82 + 24 * *v87), v82 + 24 * v88, v111);
    if (v112)
      break;
    if (v88 < v86)
      goto LABEL_108;
    if (v42 > *(_QWORD *)(v83 + 16))
      goto LABEL_109;
    *v85 = v86;
    v41 = v110;
    *(_QWORD *)(v110 + 16 * v81 + 8) = v88;
    v90 = *(_QWORD *)(v83 + 16);
    if (v42 >= v90)
      goto LABEL_110;
    v10 = v83;
    v39 = v90 - 1;
    memmove(v87, v87 + 2, 16 * (v90 - 1 - v42));
    *(_QWORD *)(v83 + 16) = v90 - 1;
    v9 = v89;
    if (v90 <= 2)
      goto LABEL_85;
  }
LABEL_90:
  swift_bridgeObjectRelease();
  if (v108 < -1)
    goto LABEL_129;
  *(_QWORD *)(v105 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  __int128 *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  Swift::Int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  Swift::Int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_144;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v109 = v6;
  v110 = v3;
  v112 = v7;
  v106 = a1;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v46 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_110:
    v97 = v10;
    if (v46 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v110 >= -1)
      {
        *(_QWORD *)(v109 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    v98 = *v106;
    while (1)
    {
      v99 = v46 - 2;
      if (v46 < 2)
        break;
      if (!v98)
        goto LABEL_153;
      v100 = v97;
      v101 = *(_QWORD *)(v97 + 32 + 16 * v99);
      v102 = *(_QWORD *)(v97 + 32 + 16 * (v46 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)(v98 + 24 * v101, (__int128 *)(v98 + 24 * *(_QWORD *)(v97 + 32 + 16 * (v46 - 1))), v98 + 24 * v102, v112);
      if (v1)
        goto LABEL_106;
      if (v102 < v101)
        goto LABEL_139;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v100);
        v100 = v105;
      }
      if (v99 >= *(_QWORD *)(v100 + 16))
        goto LABEL_140;
      v103 = (_QWORD *)(v100 + 32 + 16 * v99);
      *v103 = v101;
      v103[1] = v102;
      v104 = *(_QWORD *)(v100 + 16);
      if (v46 > v104)
        goto LABEL_141;
      memmove((void *)(v100 + 32 + 16 * (v46 - 1)), (const void *)(v100 + 32 + 16 * v46), 16 * (v104 - v46));
      v97 = v100;
      *(_QWORD *)(v100 + 16) = v104 - 1;
      v46 = v104 - 1;
      if (v104 <= 2)
        goto LABEL_121;
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v107 = *a1 + 16;
  v108 = v5;
  v10 = MEMORY[0x24BEE4AF8];
  v111 = v9;
  while (1)
  {
    v11 = v8++;
    if (v8 >= v3)
      goto LABEL_32;
    v12 = v9 + 24 * v8;
    v13 = *(_QWORD *)(v12 + 8);
    v14 = *(_QWORD *)(v12 + 16);
    v15 = v9 + 24 * v11;
    if (v13 == *(_QWORD *)(v15 + 8) && v14 == *(_QWORD *)(v15 + 16))
    {
      v18 = v11 + 2;
      if (v11 + 2 >= v110)
        goto LABEL_31;
      v17 = 0;
    }
    else
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v18 = v11 + 2;
      if (v11 + 2 >= v110)
        goto LABEL_23;
    }
    v19 = (_QWORD *)(v107 + 24 * v18);
    do
    {
      v20 = v9 + 24 * v8;
      if (*(v19 - 1) == *(_QWORD *)(v20 + 8) && *v19 == *(_QWORD *)(v20 + 16))
      {
        if ((v17 & 1) != 0)
          goto LABEL_24;
      }
      else if (((v17 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_23;
      }
      v22 = v18 + 1;
      v19 += 3;
      v8 = v18;
      v18 = v22;
    }
    while (v22 < v110);
    v18 = v22;
LABEL_23:
    v8 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_24:
      if (v18 < v11)
        goto LABEL_148;
      if (v11 < v18)
      {
        v23 = 24 * v18;
        v24 = 24 * v11;
        v25 = v18;
        v26 = v11;
        do
        {
          if (v26 != --v25)
          {
            if (!v9)
              goto LABEL_152;
            v27 = v9 + v24;
            v28 = v9 + v23;
            v29 = *(_QWORD *)(v9 + v24 + 16);
            v30 = *(_OWORD *)(v9 + v24);
            v31 = *(_QWORD *)(v9 + v23 - 8);
            *(_OWORD *)v27 = *(_OWORD *)(v9 + v23 - 24);
            *(_QWORD *)(v27 + 16) = v31;
            *(_OWORD *)(v28 - 24) = v30;
            *(_QWORD *)(v28 - 8) = v29;
          }
          ++v26;
          v23 -= 24;
          v24 += 24;
        }
        while (v26 < v25);
      }
LABEL_31:
      v8 = v18;
    }
LABEL_32:
    if (v8 < v110)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_143;
      if (v8 - v11 < v108)
      {
        if (__OFADD__(v11, v108))
          goto LABEL_146;
        if (v11 + v108 >= v110)
          v32 = v110;
        else
          v32 = v11 + v108;
        if (v32 < v11)
          goto LABEL_147;
        if (v8 != v32)
        {
          v33 = (uint64_t *)(v107 + 24 * v8);
          do
          {
            v34 = v9 + 24 * v8;
            v35 = *(_QWORD *)(v34 + 8);
            v36 = *(_QWORD *)(v34 + 16);
            v37 = v11;
            v38 = v33;
            do
            {
              v39 = v35 == *(v38 - 4) && v36 == *(v38 - 3);
              if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                break;
              if (!v9)
                goto LABEL_150;
              v40 = v38 - 2;
              v41 = v38 - 5;
              v36 = *v38;
              v42 = *(v38 - 3);
              *(v38 - 3) = *v38;
              v38 -= 3;
              v43 = v38[1];
              v35 = v38[2];
              *(_OWORD *)v40 = *(_OWORD *)v41;
              v40[2] = v42;
              *(v38 - 2) = v43;
              *(v38 - 1) = v35;
              ++v37;
            }
            while (v8 != v37);
            ++v8;
            v33 += 3;
          }
          while (v8 != v32);
          v8 = v32;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_142;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v95;
    }
    v45 = *(_QWORD *)(v10 + 16);
    v44 = *(_QWORD *)(v10 + 24);
    v46 = v45 + 1;
    if (v45 >= v44 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, (char *)v10);
      v10 = v96;
    }
    *(_QWORD *)(v10 + 16) = v46;
    v47 = v10 + 32;
    v48 = (uint64_t *)(v10 + 32 + 16 * v45);
    *v48 = v11;
    v48[1] = v8;
    if (v45)
      break;
    v46 = 1;
    v9 = v111;
LABEL_101:
    v3 = v110;
    if (v8 >= v110)
      goto LABEL_110;
  }
  v9 = v111;
  while (1)
  {
    v49 = v46 - 1;
    if (v46 >= 4)
    {
      v54 = v47 + 16 * v46;
      v55 = *(_QWORD *)(v54 - 64);
      v56 = *(_QWORD *)(v54 - 56);
      v60 = __OFSUB__(v56, v55);
      v57 = v56 - v55;
      if (v60)
        goto LABEL_127;
      v59 = *(_QWORD *)(v54 - 48);
      v58 = *(_QWORD *)(v54 - 40);
      v60 = __OFSUB__(v58, v59);
      v52 = v58 - v59;
      v53 = v60;
      if (v60)
        goto LABEL_128;
      v61 = v46 - 2;
      v62 = (uint64_t *)(v47 + 16 * (v46 - 2));
      v64 = *v62;
      v63 = v62[1];
      v60 = __OFSUB__(v63, v64);
      v65 = v63 - v64;
      if (v60)
        goto LABEL_129;
      v60 = __OFADD__(v52, v65);
      v66 = v52 + v65;
      if (v60)
        goto LABEL_131;
      if (v66 >= v57)
      {
        v84 = (uint64_t *)(v47 + 16 * v49);
        v86 = *v84;
        v85 = v84[1];
        v60 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v60)
          goto LABEL_137;
        v77 = v52 < v87;
        goto LABEL_90;
      }
    }
    else
    {
      if (v46 != 3)
      {
        v78 = *(_QWORD *)(v10 + 32);
        v79 = *(_QWORD *)(v10 + 40);
        v60 = __OFSUB__(v79, v78);
        v71 = v79 - v78;
        v72 = v60;
        goto LABEL_84;
      }
      v51 = *(_QWORD *)(v10 + 32);
      v50 = *(_QWORD *)(v10 + 40);
      v60 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      v53 = v60;
    }
    if ((v53 & 1) != 0)
      goto LABEL_130;
    v61 = v46 - 2;
    v67 = (uint64_t *)(v47 + 16 * (v46 - 2));
    v69 = *v67;
    v68 = v67[1];
    v70 = __OFSUB__(v68, v69);
    v71 = v68 - v69;
    v72 = v70;
    if (v70)
      goto LABEL_132;
    v73 = (uint64_t *)(v47 + 16 * v49);
    v75 = *v73;
    v74 = v73[1];
    v60 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v60)
      goto LABEL_134;
    if (__OFADD__(v71, v76))
      goto LABEL_136;
    if (v71 + v76 >= v52)
    {
      v77 = v52 < v76;
LABEL_90:
      if (v77)
        v49 = v61;
      goto LABEL_92;
    }
LABEL_84:
    if ((v72 & 1) != 0)
      goto LABEL_133;
    v80 = (uint64_t *)(v47 + 16 * v49);
    v82 = *v80;
    v81 = v80[1];
    v60 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if (v60)
      goto LABEL_135;
    if (v83 < v71)
      goto LABEL_101;
LABEL_92:
    v88 = v49 - 1;
    if (v49 - 1 >= v46)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v9)
      goto LABEL_151;
    v89 = v9;
    v90 = (uint64_t *)(v47 + 16 * v88);
    v91 = *v90;
    v92 = (_QWORD *)(v47 + 16 * v49);
    v93 = v92[1];
    specialized _merge<A>(low:mid:high:buffer:by:)(v89 + 24 * *v90, (__int128 *)(v89 + 24 * *v92), v89 + 24 * v93, v112);
    if (v1)
      break;
    if (v93 < v91)
      goto LABEL_124;
    if (v49 > *(_QWORD *)(v10 + 16))
      goto LABEL_125;
    *v90 = v91;
    *(_QWORD *)(v47 + 16 * v88 + 8) = v93;
    v94 = *(_QWORD *)(v10 + 16);
    if (v49 >= v94)
      goto LABEL_126;
    v46 = v94 - 1;
    memmove((void *)(v47 + 16 * v49), v92 + 2, 16 * (v94 - 1 - v49));
    *(_QWORD *)(v10 + 16) = v94 - 1;
    v77 = v94 > 2;
    v9 = v111;
    if (!v77)
      goto LABEL_101;
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v110 < -1)
    goto LABEL_145;
  *(_QWORD *)(v109 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  char *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  Swift::Int v28;
  _QWORD *v29;
  uint64_t v30;
  Swift::Int v31;
  _QWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  Swift::Int *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  Swift::Int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2, &demangling cache variable for type metadata for (symbol: String, position: Int, priority: Int));
  v100 = a1;
  v101 = v6;
  v105 = v7;
  v103 = v3;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v40 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v40 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v103 >= -1)
      {
        *(_QWORD *)(v101 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v91 = *v100;
    while (1)
    {
      v92 = v40 - 2;
      if (v40 < 2)
        break;
      if (!v91)
        goto LABEL_133;
      v93 = *(_QWORD *)(v10 + 32 + 16 * v92);
      v94 = *(_QWORD *)(v10 + 32 + 16 * (v40 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v91 + 32 * v93), (char *)(v91 + 32 * *(_QWORD *)(v10 + 32 + 16 * (v40 - 1))), v91 + 32 * v94, v105);
      if (v1)
        goto LABEL_86;
      if (v94 < v93)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = v97;
      }
      if (v92 >= *(_QWORD *)(v10 + 16))
        goto LABEL_120;
      v95 = (_QWORD *)(v10 + 32 + 16 * v92);
      *v95 = v93;
      v95[1] = v94;
      v96 = *(_QWORD *)(v10 + 16);
      if (v40 > v96)
        goto LABEL_121;
      memmove((void *)(v10 + 32 + 16 * (v40 - 1)), (const void *)(v10 + 32 + 16 * v40), 16 * (v96 - v40));
      *(_QWORD *)(v10 + 16) = v96 - 1;
      v40 = v96 - 1;
      if (v96 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v98 = *a1 + 16;
  v99 = *a1 + 88;
  v10 = MEMORY[0x24BEE4AF8];
  v102 = v5;
  v104 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(_QWORD *)(v9 + 32 * v8 + 24);
      v13 = *(_QWORD *)(v9 + 32 * v11 + 24);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v14 = (uint64_t *)(v99 + 32 * v11);
        v15 = v12;
        while (1)
        {
          v17 = *v14;
          v14 += 4;
          v16 = v17;
          if (v12 < v13 == v17 >= v15)
            break;
          ++v8;
          v15 = v16;
          if (v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v12 < v13)
      {
        if (v8 < v11)
          goto LABEL_126;
        if (v11 < v8)
        {
          v18 = 32 * v8;
          v19 = 32 * v11;
          v20 = v8;
          v21 = v11;
          do
          {
            if (v21 != --v20)
            {
              if (!v9)
                goto LABEL_132;
              v22 = (_OWORD *)(v9 + v19);
              v23 = v9 + v18;
              v24 = *(_QWORD *)(v9 + v19);
              v25 = *(_QWORD *)(v9 + v19 + 8);
              v26 = *(_OWORD *)(v9 + v19 + 16);
              v27 = *(_OWORD *)(v9 + v18 - 16);
              *v22 = *(_OWORD *)(v9 + v18 - 32);
              v22[1] = v27;
              *(_QWORD *)(v23 - 32) = v24;
              *(_QWORD *)(v23 - 24) = v25;
              *(_OWORD *)(v23 - 16) = v26;
            }
            ++v21;
            v18 -= 32;
            v19 += 32;
          }
          while (v21 < v20);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_123;
      if (v8 - v11 < v5)
      {
        v28 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_127;
        if (v28 >= v3)
          v28 = v3;
        if (v28 < v11)
          goto LABEL_128;
        if (v8 != v28)
        {
          v29 = (_QWORD *)(v98 + 32 * v8);
          do
          {
            v30 = *(_QWORD *)(v9 + 32 * v8 + 24);
            v31 = v11;
            v32 = v29;
            do
            {
              if (v30 >= *(v32 - 3))
                break;
              if (!v9)
                goto LABEL_130;
              v33 = v32 - 2;
              v35 = *((_OWORD *)v32 - 3);
              v34 = *((_OWORD *)v32 - 2);
              *(v32 - 4) = *v32;
              v32 -= 4;
              v36 = v32[2];
              v37 = v32[3];
              *v33 = v35;
              v33[1] = v34;
              *(v32 - 2) = v36;
              *(v32 - 1) = v37;
              v32[1] = v30;
              ++v31;
            }
            while (v8 != v31);
            ++v8;
            v29 += 4;
          }
          while (v8 != v28);
          v8 = v28;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v89;
    }
    v39 = *(_QWORD *)(v10 + 16);
    v38 = *(_QWORD *)(v10 + 24);
    v40 = v39 + 1;
    v9 = v104;
    if (v39 >= v38 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, (char *)v10);
      v9 = v104;
      v10 = v90;
    }
    *(_QWORD *)(v10 + 16) = v40;
    v41 = v10 + 32;
    v42 = (Swift::Int *)(v10 + 32 + 16 * v39);
    *v42 = v11;
    v42[1] = v8;
    if (v39)
      break;
    v40 = 1;
LABEL_81:
    v5 = v102;
    v3 = v103;
    if (v8 >= v103)
      goto LABEL_90;
  }
  while (1)
  {
    v43 = v40 - 1;
    if (v40 >= 4)
    {
      v48 = v41 + 16 * v40;
      v49 = *(_QWORD *)(v48 - 64);
      v50 = *(_QWORD *)(v48 - 56);
      v54 = __OFSUB__(v50, v49);
      v51 = v50 - v49;
      if (v54)
        goto LABEL_107;
      v53 = *(_QWORD *)(v48 - 48);
      v52 = *(_QWORD *)(v48 - 40);
      v54 = __OFSUB__(v52, v53);
      v46 = v52 - v53;
      v47 = v54;
      if (v54)
        goto LABEL_108;
      v55 = v40 - 2;
      v56 = (uint64_t *)(v41 + 16 * (v40 - 2));
      v58 = *v56;
      v57 = v56[1];
      v54 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      if (v54)
        goto LABEL_109;
      v54 = __OFADD__(v46, v59);
      v60 = v46 + v59;
      if (v54)
        goto LABEL_111;
      if (v60 >= v51)
      {
        v78 = (uint64_t *)(v41 + 16 * v43);
        v80 = *v78;
        v79 = v78[1];
        v54 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v54)
          goto LABEL_117;
        v71 = v46 < v81;
        goto LABEL_70;
      }
    }
    else
    {
      if (v40 != 3)
      {
        v72 = *(_QWORD *)(v10 + 32);
        v73 = *(_QWORD *)(v10 + 40);
        v54 = __OFSUB__(v73, v72);
        v65 = v73 - v72;
        v66 = v54;
        goto LABEL_64;
      }
      v45 = *(_QWORD *)(v10 + 32);
      v44 = *(_QWORD *)(v10 + 40);
      v54 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      v47 = v54;
    }
    if ((v47 & 1) != 0)
      goto LABEL_110;
    v55 = v40 - 2;
    v61 = (uint64_t *)(v41 + 16 * (v40 - 2));
    v63 = *v61;
    v62 = v61[1];
    v64 = __OFSUB__(v62, v63);
    v65 = v62 - v63;
    v66 = v64;
    if (v64)
      goto LABEL_112;
    v67 = (uint64_t *)(v41 + 16 * v43);
    v69 = *v67;
    v68 = v67[1];
    v54 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v54)
      goto LABEL_114;
    if (__OFADD__(v65, v70))
      goto LABEL_116;
    if (v65 + v70 >= v46)
    {
      v71 = v46 < v70;
LABEL_70:
      if (v71)
        v43 = v55;
      goto LABEL_72;
    }
LABEL_64:
    if ((v66 & 1) != 0)
      goto LABEL_113;
    v74 = (uint64_t *)(v41 + 16 * v43);
    v76 = *v74;
    v75 = v74[1];
    v54 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v54)
      goto LABEL_115;
    if (v77 < v65)
      goto LABEL_81;
LABEL_72:
    v82 = v10;
    v83 = v43 - 1;
    if (v43 - 1 >= v40)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v9)
      goto LABEL_131;
    v84 = (uint64_t *)(v41 + 16 * v83);
    v85 = *v84;
    v86 = (_QWORD *)(v41 + 16 * v43);
    v87 = v86[1];
    specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v9 + 32 * *v84), (char *)(v9 + 32 * *v86), v9 + 32 * v87, v105);
    if (v1)
      break;
    if (v87 < v85)
      goto LABEL_104;
    if (v43 > *(_QWORD *)(v82 + 16))
      goto LABEL_105;
    *v84 = v85;
    *(_QWORD *)(v41 + 16 * v83 + 8) = v87;
    v88 = *(_QWORD *)(v82 + 16);
    if (v43 >= v88)
      goto LABEL_106;
    v10 = v82;
    v40 = v88 - 1;
    memmove((void *)(v41 + 16 * v43), v86 + 2, 16 * (v88 - 1 - v43));
    *(_QWORD *)(v82 + 16) = v88 - 1;
    v9 = v104;
    if (v88 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v103 < -1)
    goto LABEL_125;
  *(_QWORD *)(v101 + 16) = 0;
  swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t *v19;
  uint64_t v20;
  Swift::Int v21;
  _QWORD *v22;
  uint64_t v23;
  Swift::Int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  Swift::Int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      return;
    }
    goto LABEL_124;
  }
  v5 = v4;
  specialized static Array._allocateUninitialized(_:)(v3 / 2);
  v88 = a1;
  v89 = v6;
  v93 = v7;
  v91 = v3;
  if (v3 <= 0)
  {
    v10 = MEMORY[0x24BEE4AF8];
    v29 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_90:
    if (v29 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v91 >= -1)
      {
        *(_QWORD *)(v89 + 16) = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    v80 = *v88;
    while (1)
    {
      v81 = v29 - 2;
      if (v29 < 2)
        break;
      if (!v80)
        goto LABEL_133;
      v82 = *(_QWORD *)(v10 + 32 + 16 * v81);
      v83 = *(_QWORD *)(v10 + 32 + 16 * (v29 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((_QWORD *)(v80 + 8 * v82), (_QWORD *)(v80 + 8 * *(_QWORD *)(v10 + 32 + 16 * (v29 - 1))), v80 + 8 * v83, v93);
      if (v1)
        goto LABEL_86;
      if (v83 < v82)
        goto LABEL_119;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v10);
        v10 = v86;
      }
      if (v81 >= *(_QWORD *)(v10 + 16))
        goto LABEL_120;
      v84 = (_QWORD *)(v10 + 32 + 16 * v81);
      *v84 = v82;
      v84[1] = v83;
      v85 = *(_QWORD *)(v10 + 16);
      if (v29 > v85)
        goto LABEL_121;
      memmove((void *)(v10 + 32 + 16 * (v29 - 1)), (const void *)(v10 + 32 + 16 * v29), 16 * (v85 - v29));
      *(_QWORD *)(v10 + 16) = v85 - 1;
      v29 = v85 - 1;
      if (v85 <= 2)
        goto LABEL_101;
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  v8 = 0;
  v9 = *a1;
  v87 = *a1 - 8;
  v10 = MEMORY[0x24BEE4AF8];
  v90 = v5;
  v92 = *a1;
  while (1)
  {
    v11 = v8++;
    if (v8 < v3)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 16);
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v11) + 16);
      v8 = v11 + 2;
      if (v11 + 2 < v3)
      {
        v14 = v12;
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * v8) + 16);
          if (v12 < v13 == v15 >= v14)
            break;
          ++v8;
          v14 = v15;
          if (v8 >= v3)
          {
            v8 = v3;
            break;
          }
        }
      }
      if (v12 < v13)
      {
        if (v8 < v11)
          goto LABEL_126;
        if (v11 < v8)
        {
          v16 = (uint64_t *)(v87 + 8 * v8);
          v17 = v8;
          v18 = v11;
          v19 = (uint64_t *)(v9 + 8 * v11);
          do
          {
            if (v18 != --v17)
            {
              if (!v9)
                goto LABEL_132;
              v20 = *v19;
              *v19 = *v16;
              *v16 = v20;
            }
            ++v18;
            --v16;
            ++v19;
          }
          while (v18 < v17);
        }
      }
    }
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v11))
        goto LABEL_123;
      if (v8 - v11 < v5)
      {
        v21 = v11 + v5;
        if (__OFADD__(v11, v5))
          goto LABEL_127;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v11)
          goto LABEL_128;
        if (v8 != v21)
        {
          v22 = (_QWORD *)(v87 + 8 * v8);
          do
          {
            v23 = *(_QWORD *)(v9 + 8 * v8);
            v24 = v11;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (*(_QWORD *)(v23 + 16) >= *(_QWORD *)(*v25 + 16))
                break;
              if (!v9)
                goto LABEL_130;
              *v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }
            while (v8 != v24);
            ++v8;
            ++v22;
          }
          while (v8 != v21);
          v8 = v21;
        }
      }
    }
    if (v8 < v11)
      goto LABEL_122;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = v78;
    }
    v28 = *(_QWORD *)(v10 + 16);
    v27 = *(_QWORD *)(v10 + 24);
    v29 = v28 + 1;
    v9 = v92;
    if (v28 >= v27 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, (char *)v10);
      v9 = v92;
      v10 = v79;
    }
    *(_QWORD *)(v10 + 16) = v29;
    v30 = v10 + 32;
    v31 = (Swift::Int *)(v10 + 32 + 16 * v28);
    *v31 = v11;
    v31[1] = v8;
    if (v28)
      break;
    v29 = 1;
LABEL_81:
    v5 = v90;
    v3 = v91;
    if (v8 >= v91)
      goto LABEL_90;
  }
  while (1)
  {
    v32 = v29 - 1;
    if (v29 >= 4)
    {
      v37 = v30 + 16 * v29;
      v38 = *(_QWORD *)(v37 - 64);
      v39 = *(_QWORD *)(v37 - 56);
      v43 = __OFSUB__(v39, v38);
      v40 = v39 - v38;
      if (v43)
        goto LABEL_107;
      v42 = *(_QWORD *)(v37 - 48);
      v41 = *(_QWORD *)(v37 - 40);
      v43 = __OFSUB__(v41, v42);
      v35 = v41 - v42;
      v36 = v43;
      if (v43)
        goto LABEL_108;
      v44 = v29 - 2;
      v45 = (uint64_t *)(v30 + 16 * (v29 - 2));
      v47 = *v45;
      v46 = v45[1];
      v43 = __OFSUB__(v46, v47);
      v48 = v46 - v47;
      if (v43)
        goto LABEL_109;
      v43 = __OFADD__(v35, v48);
      v49 = v35 + v48;
      if (v43)
        goto LABEL_111;
      if (v49 >= v40)
      {
        v67 = (uint64_t *)(v30 + 16 * v32);
        v69 = *v67;
        v68 = v67[1];
        v43 = __OFSUB__(v68, v69);
        v70 = v68 - v69;
        if (v43)
          goto LABEL_117;
        v60 = v35 < v70;
        goto LABEL_70;
      }
    }
    else
    {
      if (v29 != 3)
      {
        v61 = *(_QWORD *)(v10 + 32);
        v62 = *(_QWORD *)(v10 + 40);
        v43 = __OFSUB__(v62, v61);
        v54 = v62 - v61;
        v55 = v43;
        goto LABEL_64;
      }
      v34 = *(_QWORD *)(v10 + 32);
      v33 = *(_QWORD *)(v10 + 40);
      v43 = __OFSUB__(v33, v34);
      v35 = v33 - v34;
      v36 = v43;
    }
    if ((v36 & 1) != 0)
      goto LABEL_110;
    v44 = v29 - 2;
    v50 = (uint64_t *)(v30 + 16 * (v29 - 2));
    v52 = *v50;
    v51 = v50[1];
    v53 = __OFSUB__(v51, v52);
    v54 = v51 - v52;
    v55 = v53;
    if (v53)
      goto LABEL_112;
    v56 = (uint64_t *)(v30 + 16 * v32);
    v58 = *v56;
    v57 = v56[1];
    v43 = __OFSUB__(v57, v58);
    v59 = v57 - v58;
    if (v43)
      goto LABEL_114;
    if (__OFADD__(v54, v59))
      goto LABEL_116;
    if (v54 + v59 >= v35)
    {
      v60 = v35 < v59;
LABEL_70:
      if (v60)
        v32 = v44;
      goto LABEL_72;
    }
LABEL_64:
    if ((v55 & 1) != 0)
      goto LABEL_113;
    v63 = (uint64_t *)(v30 + 16 * v32);
    v65 = *v63;
    v64 = v63[1];
    v43 = __OFSUB__(v64, v65);
    v66 = v64 - v65;
    if (v43)
      goto LABEL_115;
    if (v66 < v54)
      goto LABEL_81;
LABEL_72:
    v71 = v10;
    v72 = v32 - 1;
    if (v32 - 1 >= v29)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v9)
      goto LABEL_131;
    v73 = (uint64_t *)(v30 + 16 * v72);
    v74 = *v73;
    v75 = (_QWORD *)(v30 + 16 * v32);
    v76 = v75[1];
    specialized _merge<A>(low:mid:high:buffer:by:)((_QWORD *)(v9 + 8 * *v73), (_QWORD *)(v9 + 8 * *v75), v9 + 8 * v76, v93);
    if (v1)
      break;
    if (v76 < v74)
      goto LABEL_104;
    if (v32 > *(_QWORD *)(v71 + 16))
      goto LABEL_105;
    *v73 = v74;
    *(_QWORD *)(v30 + 16 * v72 + 8) = v76;
    v77 = *(_QWORD *)(v71 + 16);
    if (v32 >= v77)
      goto LABEL_106;
    v10 = v71;
    v29 = v77 - 1;
    memmove((void *)(v30 + 16 * v32), v75 + 2, 16 * (v77 - 1 - v32));
    *(_QWORD *)(v71 + 16) = v77 - 1;
    v9 = v92;
    if (v77 <= 2)
      goto LABEL_81;
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v91 < -1)
    goto LABEL_125;
  *(_QWORD *)(v89 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (uint64_t *)v5;
      do
      {
        v9 = *v8;
        if (v6 >= *v8)
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
    while (2)
    {
      v9 = (uint64_t *)(v7 + 16 * v4);
      result = *v9;
      v10 = v9[1];
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1))
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        result = *v12;
        v10 = v12[1];
        *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 24 * a3 + 16;
    while (2)
    {
      v7 = v17;
      v8 = (_QWORD *)v6;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = String.count.getter();
        v10 = String.count.getter();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if (v9 >= v10)
          break;
        if (!v5)
        {
          __break(1u);
          return result;
        }
        v11 = v8 - 2;
        v12 = v8 - 5;
        v13 = *(v8 - 3);
        *(v8 - 3) = *v8;
        v8 -= 3;
        v14 = v8[1];
        v15 = v8[2];
        *(_OWORD *)v11 = *v12;
        v11[2] = v13;
        *(v8 - 2) = v14;
        *(v8 - 1) = v15;
        ++v7;
      }
      while (v4 != v7);
      ++v4;
      v6 += 24;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 + 16;
    while (2)
    {
      v9 = v7 + 24 * v4;
      result = *(_QWORD *)(v9 + 8);
      v10 = *(_QWORD *)(v9 + 16);
      v11 = v6;
      v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 4) && v10 == *(v12 - 3))
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
        if (!v7)
        {
          __break(1u);
          return result;
        }
        v14 = v12 - 2;
        v15 = v12 - 5;
        v10 = *v12;
        v16 = *(v12 - 3);
        *(v12 - 3) = *v12;
        v12 -= 3;
        v17 = v12[1];
        result = v12[2];
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[2] = v16;
        *(v12 - 2) = v17;
        *(v12 - 1) = result;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 24;
      if (v4 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 32 * a3 + 16;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 32 * a3 + 24);
      v7 = result;
      v8 = (_QWORD *)v5;
      do
      {
        if (v6 >= *(v8 - 3))
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        v9 = v8 - 2;
        v11 = *((_OWORD *)v8 - 3);
        v10 = *((_OWORD *)v8 - 2);
        *(v8 - 4) = *v8;
        v8 -= 4;
        v12 = v8[2];
        v13 = v8[3];
        *v9 = v11;
        v9[1] = v10;
        *(v8 - 2) = v12;
        *(v8 - 1) = v13;
        v8[1] = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 32;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v6 = *(_QWORD *)(v4 + 8 * a3);
      v7 = result;
      v8 = (_QWORD *)v5;
      do
      {
        v9 = *v8;
        if (*(_QWORD *)(v6 + 16) >= *(_QWORD *)(*v8 + 16))
          break;
        if (!v4)
        {
          __break(1u);
          return result;
        }
        *v8 = v6;
        v8[1] = v9;
        --v8;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 8;
      if (a3 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  BOOL v15;
  char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 8;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = &v4[8 * v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (char *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 8;
      v20 = *((_QWORD *)v6 - 1);
      if (*((_QWORD *)v12 - 1) >= v20)
      {
        v22 = v19 != v12 || v18 >= v12;
        v20 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        v6 -= 8;
        if (!v21)
          goto LABEL_35;
      }
      *(_QWORD *)v18 = v20;
LABEL_35:
      v18 -= 8;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
  v12 = &v4[8 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6;
      if (*(_QWORD *)v6 < *(_QWORD *)v4)
        break;
      v14 = *(_QWORD *)v4;
      v15 = v7 == v4;
      v4 += 8;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      v7 += 8;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6;
    v6 += 8;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *(_QWORD *)v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 8, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v14;
  char *v15;
  char *v18;
  char *v19;
  char *v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 16;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 16, a4);
    v12 = &v4[16 * v11];
    if (v7 >= v6 || v10 < 16)
      goto LABEL_47;
    v18 = (char *)(a3 - 16);
    while (1)
    {
      v19 = v18 + 16;
      v20 = v12 - 16;
      v21 = *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v12 - 1) == *((_QWORD *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v23 = v19 != v12 || v18 >= v12;
        v12 -= 16;
        if (!v23)
          goto LABEL_43;
      }
      else
      {
        v22 = v19 != v6 || v18 >= v6;
        v20 = v6 - 16;
        v6 -= 16;
        if (!v22)
          goto LABEL_43;
      }
      *(_OWORD *)v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= v4)
        goto LABEL_47;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  v12 = &v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      v14 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v15 = v4;
      v14 = v7 == v4;
      v4 += 16;
      if (!v14)
        goto LABEL_15;
LABEL_16:
      v7 += 16;
      if (v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_21;
    }
    v15 = v6;
    v14 = v7 == v6;
    v6 += 16;
    if (v14)
      goto LABEL_16;
LABEL_15:
    *(_OWORD *)v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (v12 - v4) / 16, v6);
  return 1;
}

{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  __int128 v17;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  __int128 v24;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = a2 - a1;
  v9 = (a2 - a1) / 32;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 32;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 32, a4);
    v12 = (unint64_t)&v4[32 * v11];
    if (v7 >= v6 || v10 < 32)
      goto LABEL_41;
    v19 = (char *)(a3 - 32);
    while (1)
    {
      v20 = v19 + 32;
      if (*(_QWORD *)(v12 - 8) >= *((_QWORD *)v6 - 1))
      {
        v21 = (char *)(v12 - 32);
        v23 = v20 != (char *)v12 || (unint64_t)v19 >= v12;
        v12 -= 32;
        if (!v23)
          goto LABEL_37;
      }
      else
      {
        v21 = v6 - 32;
        v22 = v20 != v6 || v19 >= v6;
        v6 -= 32;
        if (!v22)
          goto LABEL_37;
      }
      v24 = *((_OWORD *)v21 + 1);
      *(_OWORD *)v19 = *(_OWORD *)v21;
      *((_OWORD *)v19 + 1) = v24;
LABEL_37:
      v19 -= 32;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_41;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 32, a4);
  v12 = (unint64_t)&v4[32 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    do
    {
      if (*((_QWORD *)v6 + 3) >= *((_QWORD *)v4 + 3))
      {
        v13 = v7 == v4;
        v14 = v4;
        v4 += 32;
        if (v13 && v7 < v4)
          goto LABEL_16;
      }
      else
      {
        v13 = v7 == v6;
        v14 = v6;
        v6 += 32;
        if (v13 && v7 < v6)
          goto LABEL_16;
      }
      v17 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v14;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 32;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = v7;
LABEL_41:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 32, v6);
  return 1;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, __int128 *a2, unint64_t a3, __int128 *a4)
{
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  __int128 *v19;
  __int128 v22;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  BOOL v29;
  __int128 v30;

  v6 = a2;
  v7 = a1;
  v8 = (uint64_t)a2 - a1;
  v9 = (uint64_t)((uint64_t)a2 - a1) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 24, a4);
    v12 = (unint64_t)a4 + 24 * v11;
    if (v7 >= (unint64_t)v6 || v10 < 24)
    {
      v15 = a4;
    }
    else
    {
      v24 = a3 - 24;
      do
      {
        v25 = (__int128 *)(v24 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v26 = String.count.getter();
        v27 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26 >= v27)
        {
          v28 = (__int128 *)(v12 - 24);
          v29 = v25 != (__int128 *)v12 || v24 >= v12;
          v12 -= 24;
        }
        else
        {
          v28 = (__int128 *)((char *)v6 - 24);
          v29 = v25 != v6 || v24 >= (unint64_t)v6;
          v6 = (__int128 *)((char *)v6 - 24);
        }
        v15 = a4;
        if (v29)
        {
          v30 = *v28;
          *(_QWORD *)(v24 + 16) = *((_QWORD *)v28 + 2);
          *(_OWORD *)v24 = v30;
        }
        v24 -= 24;
      }
      while ((unint64_t)v6 > v7 && v12 > (unint64_t)a4);
    }
  }
  else
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (uint64_t)((uint64_t)a2 - a1) / 24, a4);
    v12 = (unint64_t)a4 + 24 * v9;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v15 = a4;
      while (1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v16 = String.count.getter();
        v17 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v16 >= v17)
        {
          v18 = v7 == (_QWORD)v15;
          v19 = v15;
          v15 = (__int128 *)((char *)v15 + 24);
          if (v18 && v7 < (unint64_t)v15)
            goto LABEL_26;
        }
        else
        {
          v18 = v7 == (_QWORD)v6;
          v19 = v6;
          v6 = (__int128 *)((char *)v6 + 24);
          if (v18 && v7 < (unint64_t)v6)
            goto LABEL_26;
        }
        v22 = *v19;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)v19 + 2);
        *(_OWORD *)v7 = v22;
LABEL_26:
        v7 += 24;
        if ((unint64_t)v15 >= v12 || (unint64_t)v6 >= a3)
        {
          v6 = (__int128 *)v7;
          goto LABEL_48;
        }
      }
    }
    v6 = (__int128 *)v7;
    v15 = a4;
  }
LABEL_48:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, (uint64_t)(v12 - (_QWORD)v15) / 24, v6);
  return 1;
}

{
  __int128 *v4;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  __int128 *v15;
  __int128 v18;
  unint64_t v21;
  __int128 *v22;
  BOOL v23;
  __int128 *v24;
  BOOL v25;
  BOOL v26;
  __int128 v27;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = (uint64_t)a2 - a1;
  v9 = (uint64_t)((uint64_t)a2 - a1) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 24, a4);
    v12 = (unint64_t)v4 + 24 * v11;
    if (v7 >= (unint64_t)v6 || v10 < 24)
      goto LABEL_53;
    v21 = a3 - 24;
    while (1)
    {
      v22 = (__int128 *)(v21 + 24);
      v23 = *(_QWORD *)(v12 - 16) == *((_QWORD *)v6 - 2) && *(_QWORD *)(v12 - 8) == *((_QWORD *)v6 - 1);
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v24 = (__int128 *)(v12 - 24);
        v26 = v22 != (__int128 *)v12 || v21 >= v12;
        v12 -= 24;
        if (!v26)
          goto LABEL_49;
      }
      else
      {
        v24 = (__int128 *)((char *)v6 - 24);
        v25 = v22 != v6 || v21 >= (unint64_t)v6;
        v6 = (__int128 *)((char *)v6 - 24);
        if (!v25)
          goto LABEL_49;
      }
      v27 = *v24;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v21 = v27;
LABEL_49:
      v21 -= 24;
      if ((unint64_t)v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_53;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (uint64_t)((uint64_t)a2 - a1) / 24, a4);
  v12 = (unint64_t)v4 + 24 * v9;
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    do
    {
      v14 = *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1) && *((_QWORD *)v6 + 2) == *((_QWORD *)v4 + 2);
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v14 = v7 == (_QWORD)v4;
        v15 = v4;
        v4 = (__int128 *)((char *)v4 + 24);
        if (v14 && v7 < (unint64_t)v4)
          goto LABEL_22;
      }
      else
      {
        v14 = v7 == (_QWORD)v6;
        v15 = v6;
        v6 = (__int128 *)((char *)v6 + 24);
        if (v14 && v7 < (unint64_t)v6)
          goto LABEL_22;
      }
      v18 = *v15;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v15 + 2);
      *(_OWORD *)v7 = v18;
LABEL_22:
      v7 += 24;
    }
    while ((unint64_t)v4 < v12 && (unint64_t)v6 < a3);
  }
  v6 = (__int128 *)v7;
LABEL_53:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 24, v6);
  return 1;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = specialized Collection.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = v11;
      v13 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v15, v11 + 32, v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v13 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x24BEE4AF8];
    }
    v14 = MEMORY[0x2495A7D10](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v14;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2495A7D10);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2495A7D10]((char *)v15 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t specialized Collection.count.getter(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)();
  }
  __break(1u);
  return result;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
    goto LABEL_38;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_35:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    result = v12;
    if ((v12 & 0xC) == v15)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter();
        v19 = *(_BYTE *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16)
      goto LABEL_37;
    v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_35;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t type metadata accessor for TokenIDMaskResponse(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for TokenIDMaskResponse);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t type metadata accessor for LogitMaskComputation(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for LogitMaskComputation);
}

uint64_t sub_248C21968()
{
  OUTLINED_FUNCTION_139_0();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(int **)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:);
  return closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)(a1, v4, v5, v1 + 32);
}

uint64_t partial apply for closure #1 in GuidedGenerationConstraints.nextTokenIDMaskComputation(following:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t type metadata accessor for TokenIDMaskComputation(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for TokenIDMaskComputation);
}

uint64_t outlined retain of GuidedGenerationConstraints(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type GuidedGenerationError and conformance GuidedGenerationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError;
  if (!lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for GuidedGenerationError, &type metadata for GuidedGenerationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError;
  if (!lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for GuidedGenerationError, &type metadata for GuidedGenerationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GuidedGenerationError and conformance GuidedGenerationError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GuidedGenerationError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GuidedGenerationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248C21BD4 + 4 * byte_248C91C15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248C21C08 + 4 * byte_248C91C10[v4]))();
}

uint64_t sub_248C21C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248C21C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248C21C18);
  return result;
}

uint64_t sub_248C21C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248C21C2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248C21C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248C21C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GuidedGenerationError()
{
  return &type metadata for GuidedGenerationError;
}

uint64_t *initializeBufferWithCopyOfBuffer for LogitMaskComputation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v8 = type metadata accessor for IndexSet();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LogitMaskComputation(uint64_t a1, uint64_t a2)
{
  return destroy for LogitMaskComputation(a1, a2, (void (*)(_QWORD))type metadata accessor for LogitMaskResponse);
}

_QWORD *initializeWithCopy for LogitMaskComputation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    type metadata accessor for LogitMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for IndexSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for LogitMaskComputation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for LogitMaskComputation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_retain();
    }
    else
    {
      type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v5 = type metadata accessor for IndexSet();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LogitMaskComputation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for LogitMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for IndexSet();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for LogitMaskComputation(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for LogitMaskComputation);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for LogitMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v7 = type metadata accessor for IndexSet();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for LogitMaskComputation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for LogitMaskComputation(a1, a2, a3, (void (*)(uint64_t))type metadata accessor for LogitMaskResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for LogitMaskResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for IndexSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *initializeWithCopy for LogitMaskResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for IndexSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for LogitMaskResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for LogitMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for IndexSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for LogitMaskResponse(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for IndexSet();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for LogitMaskResponse(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for LogitMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for IndexSet();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for LogitMaskResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for LogitMaskResponse(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BDCF428]);
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenIDMask(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for IndexSet();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for TokenIDMask(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IndexSet();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for TokenIDMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for TokenIDMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for TokenIDMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TokenIDMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenIDMask()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C22668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_11_2();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TokenIDMask()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C226A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_11_2();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TokenIDMask()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenIDMaskComputation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_retain();
    }
    else
    {
      type metadata accessor for TokenIDMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v8 = type metadata accessor for IndexSet();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = type metadata accessor for TokenIDMask(0);
        *(uint64_t *)((char *)a1 + *(int *)(v9 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 20));
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TokenIDMaskComputation(uint64_t a1, uint64_t a2)
{
  return destroy for LogitMaskComputation(a1, a2, (void (*)(_QWORD))type metadata accessor for TokenIDMaskResponse);
}

uint64_t destroy for LogitMaskComputation(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_release();
  a3(0);
  if (swift_getEnumCaseMultiPayload() != 1)
    return OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_11_2();
  v5 = OUTLINED_FUNCTION_137_1();
  return OUTLINED_FUNCTION_56_1(v5, v6, v7);
}

_QWORD *initializeWithCopy for TokenIDMaskComputation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    type metadata accessor for TokenIDMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for IndexSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
      v6 = type metadata accessor for TokenIDMask(0);
      *(_QWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 20));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TokenIDMaskComputation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TokenIDMaskComputation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      swift_retain();
    }
    else
    {
      type metadata accessor for TokenIDMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v5 = type metadata accessor for IndexSet();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
        v6 = type metadata accessor for TokenIDMask(0);
        *(_QWORD *)((char *)a1 + *(int *)(v6 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v6 + 20));
      }
      else
      {
        *a1 = *a2;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for TokenIDMaskComputation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for TokenIDMaskResponse(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = type metadata accessor for TokenIDMask(0);
      *(_QWORD *)&a1[*(int *)(v8 + 20)] = *(_QWORD *)&a2[*(int *)(v8 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for TokenIDMaskComputation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TokenIDMaskComputation);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for TokenIDMaskResponse(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v7 = type metadata accessor for IndexSet();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = type metadata accessor for TokenIDMask(0);
        *(_QWORD *)&a1[*(int *)(v8 + 20)] = *(_QWORD *)&a2[*(int *)(v8 + 20)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void type metadata completion function for TokenIDMaskComputation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for LogitMaskComputation(a1, a2, a3, (void (*)(uint64_t))type metadata accessor for TokenIDMaskResponse);
}

void type metadata completion function for LogitMaskComputation(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unint64_t v4;

  a4(319);
  if (v4 <= 0x3F)
    OUTLINED_FUNCTION_63_1();
  OUTLINED_FUNCTION_104_1();
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenIDMaskResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for IndexSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = type metadata accessor for TokenIDMask(0);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LogitMaskResponse()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  if (swift_getEnumCaseMultiPayload() != 1)
    return OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_11_2();
  v0 = OUTLINED_FUNCTION_137_1();
  return OUTLINED_FUNCTION_56_1(v0, v1, v2);
}

_QWORD *initializeWithCopy for TokenIDMaskResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for IndexSet();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    v5 = type metadata accessor for TokenIDMask(0);
    *(_QWORD *)((char *)a1 + *(int *)(v5 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 20));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TokenIDMaskResponse(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TokenIDMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for IndexSet();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
      v5 = type metadata accessor for TokenIDMask(0);
      *(_QWORD *)((char *)a1 + *(int *)(v5 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v5 + 20));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for TokenIDMaskResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = type metadata accessor for TokenIDMask(0);
    *(_QWORD *)&a1[*(int *)(v7 + 20)] = *(_QWORD *)&a2[*(int *)(v7 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for TokenIDMaskResponse(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for TokenIDMaskResponse);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for IndexSet();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = type metadata accessor for TokenIDMask(0);
      *(_QWORD *)&a1[*(int *)(v7 + 20)] = *(_QWORD *)&a2[*(int *)(v7 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void type metadata completion function for TokenIDMaskResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for LogitMaskResponse(a1, a2, a3, (void (*)(uint64_t))type metadata accessor for TokenIDMask);
}

void type metadata completion function for LogitMaskResponse(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unint64_t v4;

  a4(319);
  if (v4 <= 0x3F)
    OUTLINED_FUNCTION_63_1();
  OUTLINED_FUNCTION_104_1();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.tokenID(forText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.text(forTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.tokenize(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.detokenize(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.vocabulary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.longestTokenLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of GuidedGenerationTokenizer.vocabularyCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t destroy for GuidedGenerationConstraints()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  return a1;
}

uint64_t assignWithTake for GuidedGenerationConstraints(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for GuidedGenerationConstraints(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuidedGenerationConstraints(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GuidedGenerationConstraints()
{
  return &type metadata for GuidedGenerationConstraints;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
LABEL_38:
    *a1 = a4;
    a1[1] = v5;
    a1[2] = ~v6;
    a1[3] = v11;
    a1[4] = v8;
    OUTLINED_FUNCTION_32_1();
    return;
  }
  if (!a3)
  {
    v11 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
    goto LABEL_40;
  v10 = a2;
  v22 = -1 << *(_BYTE *)(a4 + 32);
  v23 = a1;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 24 * v15);
    v20 = v19[1];
    v21 = v19[2];
    *v10 = *v19;
    v10[1] = v20;
    v10[2] = v21;
    if (v12 == a3)
    {
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_75();
LABEL_37:
      v6 = v22;
      a1 = v23;
      goto LABEL_38;
    }
    v10 += 3;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_75();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
        goto LABEL_37;
      }
      v17 = *(_QWORD *)(v5 + 8 * v11);
      if (v17)
        goto LABEL_14;
      v18 = v16 + 2;
      if (v16 + 2 >= v13)
        goto LABEL_33;
      v17 = *(_QWORD *)(v5 + 8 * v18);
      if (!v17)
      {
        v11 = v16 + 3;
        if (v16 + 3 >= v13)
        {
          v8 = 0;
          v11 = v16 + 2;
          goto LABEL_37;
        }
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
        {
LABEL_14:
          v16 = v11;
          goto LABEL_18;
        }
        v18 = v16 + 4;
        if (v16 + 4 >= v13)
        {
LABEL_33:
          v8 = 0;
          goto LABEL_37;
        }
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (!v17)
        {
          while (1)
          {
            v16 = v18 + 1;
            if (__OFADD__(v18, 1))
              goto LABEL_41;
            if (v16 >= v13)
            {
              v8 = 0;
              v11 = v13 - 1;
              goto LABEL_37;
            }
            v17 = *(_QWORD *)(v5 + 8 * v16);
            ++v18;
            if (v17)
              goto LABEL_18;
          }
        }
      }
      v16 = v18;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (_QWORD *)a3;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a5 == a4)
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    if (a5 >= a4)
    {
      if (a5 <= a4)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        v5 = a5;
        a3 = a5 - a4;
      }
      else
      {
        v6 = a3 - 1;
        v5 = a4 + 1;
        while (1)
        {
          *a2 = v5 - 1;
          if (!v6)
            break;
          if (a5 == v5)
            goto LABEL_18;
          ++a2;
          --v6;
          v7 = v5 >= a4 && v5 < a5;
          ++v5;
          if (!v7)
            goto LABEL_17;
        }
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  _QWORD v27[3];
  ValueMetadata *v28;
  _UNKNOWN **v29;

  v28 = &type metadata for SentencePieceVocabularyTextConverter;
  v29 = &protocol witness table for SentencePieceVocabularyTextConverter;
  v16 = (_QWORD *)swift_allocObject();
  v27[0] = v16;
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v17 = (uint64_t)a8 + OBJC_IVAR____TtC19TokenGenerationCore17VocabularyManager____lazy_storage___prefixLookUp;
  v18 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  __swift_storeEnumTagSinglePayload(v17, 1, 1, v18);
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)a1, (uint64_t)(a8 + 8));
  outlined init with copy of GuidedGenerationTokenizer((uint64_t)v27, (uint64_t)(a8 + 2));
  v19 = a1[3];
  v20 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  v21 = __swift_project_boxed_opaque_existential_1(v27, (uint64_t)v28);
  v22 = *v21;
  v23 = v21[1];
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8);
  swift_bridgeObjectRetain();
  v25 = v24(v22, v23, v19, v20);
  swift_bridgeObjectRelease();
  a8[7] = a2;
  a8[13] = v25;
  a8[14] = a7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return a8;
}

_QWORD *specialized VocabularyManager.__allocating_init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v23[5];

  v23[3] = &type metadata for SentencePieceVocabularyTextConverter;
  v23[4] = &protocol witness table for SentencePieceVocabularyTextConverter;
  v14 = (_QWORD *)swift_allocObject();
  v23[0] = v14;
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  type metadata accessor for VocabularyManager(0);
  v15 = (_QWORD *)swift_allocObject();
  v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v23, (uint64_t)&type metadata for SentencePieceVocabularyTextConverter);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (_QWORD *)((char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = specialized VocabularyManager.init(tokenizer:characterSetsUsedInGrammar:vocabConverter:stopTokenIDs:)(a1, a2, *v18, v18[1], v18[2], v18[3], a7, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v20;
}

uint64_t sub_248C23C80()
{
  swift_release();
  OUTLINED_FUNCTION_139_0();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  specialized closure #1 in ParserGuidedGenerationConstraints.nextMask(follow:)(*(_QWORD *)(v1 + 64), a1);
}

uint64_t sub_248C23CD4()
{
  OUTLINED_FUNCTION_139_0();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(void);
  _QWORD *v5;

  v4 = *(void (**)(void))(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error);
  return ((uint64_t (*)(uint64_t, void (*)(void)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)
                                                          + async function pointer to thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)))(a1, v4);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> (@out LogitMaskResponse, @error @owned Error)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_248C23D7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void outlined init with copy of GuidedGenerationTokenizer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_23();
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_4_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_7_4()
{
  JUMPOUT(0x2495A8ED4);
}

uint64_t OUTLINED_FUNCTION_8_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized TokenGrammarParser.init(characterParser:tokenizer:stopTokenIDs:startOfWordToken:vocabManager:lastConsumedTokenID:)(a1, a2, a3, 8492770, 0xA300000000000000, 0, 0, 1);
}

__n128 OUTLINED_FUNCTION_9_4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 8);
  *(_OWORD *)(v1 + 32) = v2;
  result = *(__n128 *)(v0 + 33);
  *(__n128 *)(v1 + 41) = result;
  return result;
}

void OUTLINED_FUNCTION_10_3(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  _s19TokenGenerationCore7GrammarVWOcTm_1(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return type metadata accessor for IndexSet();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_15_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_3()
{
  return swift_release();
}

void OUTLINED_FUNCTION_18_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * ((a1 - 32) / 16);
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  return swift_slowAlloc();
}

id OUTLINED_FUNCTION_20_1()
{
  uint64_t v0;

  return objc_allocWithZone(*(Class *)(v0 + 3920));
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_release();
}

id OUTLINED_FUNCTION_26_1()
{
  uint64_t v0;
  uint64_t v1;

  return @nonobjc NSUserDefaults.init(suiteName:)(v0 + 5, v1 | 0x8000000000000000);
}

id OUTLINED_FUNCTION_27_2()
{
  uint64_t v0;
  uint64_t v1;

  return @nonobjc NSUserDefaults.init(suiteName:)(v0 + 5, v1 | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_33_2(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Signpost.init(_:_:)(a1, a2, a3, 2, a4);
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return MobileGestalt_get_internalBuild();
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_42_1()
{
  return swift_task_switch();
}

void OUTLINED_FUNCTION_43_2(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Grammar(v2, a2);
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return type metadata accessor for Signpost();
}

uint64_t OUTLINED_FUNCTION_47_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_50_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_53_0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_56_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_58_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_59_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = __swift_project_value_buffer(v3, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_61_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_62_2()
{
  return type metadata accessor for Grammar(0);
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return swift_initEnumMetadataMultiPayload();
}

void OUTLINED_FUNCTION_65_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v6;
  uint64_t v7;
  uint64_t v8;

  specialized ParserGuidedGenerationConstraints.init(tokenParser:maskGenerator:enableDeterministicTokenRuns:numParallelTasks:)(a1, v6, v7, 0, a5, a6, v8 - 144);
}

size_t OUTLINED_FUNCTION_69_1(_QWORD *a1)
{
  uint64_t v1;
  size_t result;

  result = _swift_stdlib_malloc_size(a1);
  a1[2] = v1;
  a1[3] = 2 * ((uint64_t)(result - 32) / 8);
  return result;
}

void OUTLINED_FUNCTION_72_1()
{
  Signpost.end()();
}

_QWORD *OUTLINED_FUNCTION_73_2()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  type metadata accessor for TokenIDMaskResponse(0);
  return v0;
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_78_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  _s19TokenGenerationCore7GrammarVWOcTm_1(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_80_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return outlined consume of Set<Rule>.Iterator._Variant();
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 8))(*(_QWORD *)(v2 - 184), v0);
}

uint64_t OUTLINED_FUNCTION_85_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

BOOL OUTLINED_FUNCTION_86_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_87_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Grammar(v2, a2);
}

uint64_t OUTLINED_FUNCTION_88_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(v3, v0, v1);
}

uint64_t OUTLINED_FUNCTION_89_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_92_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_95_1(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int)@<X4>, _QWORD *a6@<X8>)
{
  specialized ParserGuidedGenerationConstraints.generateNextLogitMask(from:)(a1, a2, a3, a4, a5, a6);
}

uint64_t OUTLINED_FUNCTION_96_2()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_98_2(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_99_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_100_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_101_2()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_102_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  _s19TokenGenerationCore7GrammarVWOcTm_1(a1, v3, a3);
}

void OUTLINED_FUNCTION_103_1()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_105_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  _s19TokenGenerationCore7GrammarVWOcTm_1(v3, v4, a3);
}

void OUTLINED_FUNCTION_106_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  _s19TokenGenerationCore7GrammarVWOcTm_1(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_108_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_109_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of (Locale?, Locale?)(v2, a2);
}

uint64_t OUTLINED_FUNCTION_110_2@<X0>(uint64_t a1@<X8>)
{
  return *(_QWORD *)(a1 + 56) + 64;
}

uint64_t OUTLINED_FUNCTION_112_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_114_2()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_115_2()
{
  EarleyParser.init(grammar:)();
}

uint64_t OUTLINED_FUNCTION_116_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  return specialized TokenGrammarParser.partialMatch.getter();
}

uint64_t OUTLINED_FUNCTION_118_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_119_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 88))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_120_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_121_2(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t (*a13)(uint64_t), void (*a14)(uint64_t), void (*a15)(uint64_t))
{
  specialized ParserGuidedGenerationConstraints.TokenParserManager.childParserIndex(for:tokenID:)(a1, a2, a13, a14, a15);
}

void OUTLINED_FUNCTION_123_2(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s19TokenGenerationCore7GrammarVWOcTm_1(a1, a2, v2);
}

void OUTLINED_FUNCTION_126_2(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Grammar(v2, a2);
}

uint64_t OUTLINED_FUNCTION_127_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_129_2()
{
  return type metadata accessor for EarleyParser();
}

uint64_t OUTLINED_FUNCTION_131_2()
{
  return type metadata accessor for LogitMaskResponse(0);
}

uint64_t OUTLINED_FUNCTION_132_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_134_2()
{
  uint64_t v0;

  return outlined release of GuidedGenerationOverrides(v0 + 192);
}

uint64_t OUTLINED_FUNCTION_137_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_140_1()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_142_1(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  uint64_t v0;

  return outlined release of GuidedGenerationOverrides(v0 + 176);
}

uint64_t destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_release();
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignposter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C24634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = OUTLINED_FUNCTION_3_5();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = a3[5];
    return __swift_getEnumTagSinglePayload(v4 + v8, v3, v7);
  }
  v9 = OUTLINED_FUNCTION_2_4();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v9;
    v8 = a3[6];
    return __swift_getEnumTagSinglePayload(v4 + v8, v3, v7);
  }
  v11 = *(_QWORD *)(v4 + a3[7]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for Signpost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248C246D0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = OUTLINED_FUNCTION_3_5();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a4[5];
LABEL_5:
    __swift_storeEnumTagSinglePayload(v5 + v10, v4, v4, v9);
    return;
  }
  v11 = OUTLINED_FUNCTION_2_4();
  if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
  {
    v9 = v11;
    v10 = a4[6];
    goto LABEL_5;
  }
  *(_QWORD *)(v5 + a4[7]) = (v4 - 1);
  OUTLINED_FUNCTION_99();
}

uint64_t type metadata accessor for Signpost()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Signpost;
  if (!type metadata singleton initialization cache for Signpost)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for Signpost()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for OSSignpostID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void Signpost.init(_:_:)(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  os_signpost_id_t v30;
  uint64_t v31;
  _QWORD v32[4];
  int v33;
  const char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v37 = a3;
  v10 = OUTLINED_FUNCTION_2_4();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v32 - v15;
  v17 = type metadata accessor for Logger();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_4_4();
  v34 = a2;
  v19 = v37;
  *(_QWORD *)a5 = a2;
  *(_QWORD *)(a5 + 8) = v19;
  v35 = a4;
  *(_BYTE *)(a5 + 16) = a4;
  v21 = v20;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v37 = a1;
  v22(v5, a1, v20);
  v23 = type metadata accessor for Signpost();
  OSSignposter.init(logger:)();
  v24 = *(int *)(v23 + 24);
  v36 = a5;
  v25 = a5 + v24;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v16, v25, v10);
  v27 = OSSignposter.logHandle.getter();
  v33 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    v26(v14, (uint64_t)v16, v10);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v31 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v37, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    *(_QWORD *)(v36 + *(int *)(v23 + 28)) = v31;
    OUTLINED_FUNCTION_8_1();
    return;
  }
  v32[0] = v26;
  v32[1] = v10;
  v32[2] = v23;
  v32[3] = v11;
  if ((v35 & 1) == 0)
  {
    v28 = v34;
    if (v34)
      goto LABEL_9;
    __break(1u);
  }
  if ((unint64_t)v34 >> 32)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v34 >> 11 != 27)
  {
    if (v34 >> 16 <= 0x10)
    {
      v28 = &v38;
LABEL_9:
      v29 = (uint8_t *)OUTLINED_FUNCTION_101_2();
      *(_WORD *)v29 = 0;
      v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_248BE5000, v27, (os_signpost_type_t)v33, v30, v28, "", v29, 2u);
      OUTLINED_FUNCTION_7_4();
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

void one-time initialization function for tokenization(uint64_t a1)
{
  one-time initialization function for tokenization(a1, static Log.tokenization);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void one-time initialization function for stopSequenceMonitor(uint64_t a1)
{
  one-time initialization function for tokenization(a1, static Log.stopSequenceMonitor);
}

void one-time initialization function for guided(uint64_t a1)
{
  OUTLINED_FUNCTION_1_5(a1, static Log.guided);
}

void one-time initialization function for prompt(uint64_t a1)
{
  OUTLINED_FUNCTION_1_5(a1, static Log.prompt);
}

void one-time initialization function for configuration(uint64_t a1)
{
  one-time initialization function for tokenization(a1, static Log.configuration);
}

void one-time initialization function for tokenization(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  Logger.init(subsystem:category:)();
  OUTLINED_FUNCTION_99();
}

Swift::Void __swiftcall Signpost.end()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  os_signpost_type_t v17;
  uint8_t *v18;
  os_signpost_id_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  char v26;

  v2 = type metadata accessor for OSSignpostError();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = OUTLINED_FUNCTION_2_4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_4_4();
  v6 = type metadata accessor for OSSignposter();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Signpost();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v0 + *(int *)(v10 + 20), v6);
  v25 = *(const char **)v0;
  v11 = *(_BYTE *)(v0 + 16);
  v12 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v21 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    OUTLINED_FUNCTION_8_1();
    return;
  }
  v20[0] = v7;
  v20[1] = v5;
  if ((v11 & 1) == 0)
  {
    if (v25)
    {
      v13 = v24;
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((unint64_t)v25 >> 32)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v25 >> 11 != 27)
  {
    v13 = v24;
    if (v25 >> 16 <= 0x10)
    {
      v25 = &v26;
LABEL_9:
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v15 = v22;
      v14 = v23;
      if ((*(unsigned int (**)(char *, uint64_t))(v22 + 88))(v13, v23) == *MEMORY[0x24BEE7810])
      {
        v16 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
        v16 = "";
      }
      v17 = v21;
      v18 = (uint8_t *)OUTLINED_FUNCTION_101_2();
      *(_WORD *)v18 = 0;
      v19 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_248BE5000, v12, v17, v19, v25, v16, v18, 2u);
      OUTLINED_FUNCTION_7_4();
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
}

void OUTLINED_FUNCTION_1_5(uint64_t a1, uint64_t *a2)
{
  one-time initialization function for tokenization(a1, a2);
}

uint64_t OUTLINED_FUNCTION_2_4()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return type metadata accessor for OSSignposter();
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x6D6574737973;
  if (a1)
  {
    OUTLINED_FUNCTION_42_2();
    if (v3)
      v5 = 1919251317;
    else
      v5 = 0x6E61747369737361;
    if (v3)
      v6 = v4;
    else
      v6 = 0xE900000000000074;
  }
  else
  {
    v6 = 0xE600000000000000;
    v5 = 0x6D6574737973;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_42_2();
    if (v7)
      v2 = 1919251317;
    else
      v2 = 0x6E61747369737361;
    if (v7)
      v9 = v8;
    else
      v9 = 0xE900000000000074;
  }
  else
  {
    v9 = 0xE600000000000000;
  }
  if (v5 != v2 || v6 != v9)
    OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_99();
}

{
  uint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  v2 = 0x74706D6F7270;
  if (a1)
  {
    OUTLINED_FUNCTION_43_3();
    if (v3)
      v5 = 0x444974706D6F7270;
    else
      v5 = 0x655474706D6F7270;
    if (v3)
      v6 = v4;
    else
      v6 = 0xEE006574616C706DLL;
  }
  else
  {
    v6 = 0xE600000000000000;
    v5 = 0x74706D6F7270;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_43_3();
    if (v7)
      v2 = 0x444974706D6F7270;
    else
      v2 = 0x655474706D6F7270;
    if (v7)
      v9 = v8;
    else
      v9 = 0xEE006574616C706DLL;
  }
  else
  {
    v9 = 0xE600000000000000;
  }
  if (v5 != v2 || v6 != v9)
    OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_99();
}

void specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0x6574656C706D6F63;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xD000000000000016;
    else
      v4 = 0x657A696E656B6F74;
    if (v3 == 1)
      v5 = 0x8000000248C97F10;
    else
      v5 = 0xE800000000000000;
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x6574656C706D6F63;
  }
  if (a2)
  {
    if (a2 == 1)
      v2 = 0xD000000000000016;
    else
      v2 = 0x657A696E656B6F74;
    if (a2 == 1)
      v6 = 0x8000000248C97F10;
    else
      v6 = 0xE800000000000000;
  }
  else
  {
    v6 = 0xE800000000000000;
  }
  if (v4 != v2 || v5 != v6)
    OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_99();
}

void specialized RawRepresentable<>.hashValue.getter()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (a2)
    OUTLINED_FUNCTION_1_6();
  else
    OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_5_5();
  return OUTLINED_FUNCTION_55_1();
}

{
  if (a2)
    OUTLINED_FUNCTION_42_2();
  else
    OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_5_5();
  return OUTLINED_FUNCTION_55_1();
}

{
  if (a2)
    OUTLINED_FUNCTION_43_3();
  else
    OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_5_5();
  return OUTLINED_FUNCTION_55_1();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  return String.hash(into:)();
}

{
  return String.hash(into:)();
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
  char v0;

  OUTLINED_FUNCTION_14_3();
  if (v0)
    OUTLINED_FUNCTION_43_3();
  else
    OUTLINED_FUNCTION_39_1();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

{
  char v0;

  OUTLINED_FUNCTION_14_3();
  if (v0)
    OUTLINED_FUNCTION_42_2();
  else
    OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

{
  char v0;

  OUTLINED_FUNCTION_14_3();
  if (v0)
    OUTLINED_FUNCTION_1_6();
  else
    OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t ModelConfiguration.init(modelConfigurationData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for _LoadedModelConfiguration();
  v7 = static _LoadedModelConfiguration.create(modelConfigurationData:)();
  result = outlined consume of Data._Representation(a1, a2);
  if (!v3)
    *a3 = v7;
  return result;
}

uint64_t type metadata accessor for _LoadedModelConfiguration()
{
  return objc_opt_self();
}

uint64_t static _LoadedModelConfiguration.create(modelConfigurationData:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  type metadata accessor for JSONDecoder();
  OUTLINED_FUNCTION_133();
  JSONDecoder.init()();
  lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type _LoadedModelConfiguration and conformance _LoadedModelConfiguration, v1, (uint64_t (*)(uint64_t))type metadata accessor for _LoadedModelConfiguration, (uint64_t)&protocol conformance descriptor for _LoadedModelConfiguration);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  result = swift_release();
  if (!v0)
    return v3;
  return result;
}

uint64_t ModelConfiguration.init(modelbundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ModelConfiguration.init(modelbundleIdentifier:)(a1, (uint64_t (*)(uint64_t))static _LoadedModelConfiguration.create(modelBundleIdentifier:), &demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>, a2);
}

{
  return ModelConfiguration.init(modelbundleIdentifier:)(a1, static _LoadedModelConfiguration.create(modelBundleIdentifier:), &demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>, a2);
}

void static _LoadedModelConfiguration.create(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_62_0();
  v7 = v6 - v5;
  ResourceBundleIdentifier<>.serverConfiguration()();
  if (v26)
  {
    OUTLINED_FUNCTION_36_2();
    type metadata accessor for CatalogClient();
    OUTLINED_FUNCTION_133();
    CatalogClient.init()();
    v8 = v29;
    v9 = v30;
    v10 = __swift_project_boxed_opaque_existential_1(v28, v29);
    v26 = v8;
    v27 = *(_QWORD *)(v9 + 8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(boxed_opaque_existential_1, v10, v8);
    CatalogClient.metadataWithAssetInformation(from:)(v25);
    if (v1)
    {
      OUTLINED_FUNCTION_18_1();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      OUTLINED_FUNCTION_8_0();
    }
    else
    {
      v22 = v12;
      v23 = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      if (v23)
      {
        v31 = v22;
        static _LoadedModelConfiguration.create(modelConfigurationData:)();
        v25[0] = MEMORY[0x2495A78FC](v3);
        v25[1] = v24;
        v25[2] = v31;
        v26 = v23;
        _LoadedModelConfiguration.assetInformation.setter(v25);
        OUTLINED_FUNCTION_30_2();
      }
      OUTLINED_FUNCTION_18_1();
      OUTLINED_FUNCTION_8_0();
    }
  }
  else
  {
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v25, &demangling cache variable for type metadata for AssetBackedServerConfiguration?);
    if (one-time initialization token for configuration != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Log.configuration);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      OUTLINED_FUNCTION_26_2();
      v31 = OUTLINED_FUNCTION_25_3();
      v28[0] = v31;
      v17 = OUTLINED_FUNCTION_24_2(4.8751e-34);
      v18 = MEMORY[0x2495A78FC](v17);
      v20 = OUTLINED_FUNCTION_41_1(v18, v19);
      OUTLINED_FUNCTION_7_5(v20);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      OUTLINED_FUNCTION_19_4(&dword_248BE5000, v15, v21, "Could not find a corresponding server configuration for LLM bundle ID: %{public}s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }
    OUTLINED_FUNCTION_10_4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  }
  OUTLINED_FUNCTION_0_0();
}

uint64_t ModelConfiguration.init(modelbundleIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for _LoadedModelConfiguration();
  v9 = a2(a1);
  v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  if (!v4)
    *a4 = v9;
  return result;
}

uint64_t static _LoadedModelConfiguration.create(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[40];

  v3 = v1;
  static _LoadedModelConfiguration.assetBackedResource(for:)(a1, (uint64_t)v45);
  if (!v2)
  {
    outlined init with copy of AssetBackedResource?((uint64_t)v45, (uint64_t)&v38, &demangling cache variable for type metadata for AssetBackedResource?);
    if (v41)
    {
      OUTLINED_FUNCTION_33_3(v4);
      type metadata accessor for CatalogClient();
      OUTLINED_FUNCTION_133();
      CatalogClient.init()();
      v5 = CatalogClient.metadataWithAssetInformation(from:)(v42);
      v13 = v7;
      if (v7)
      {
        v14 = v6;
        v3 = static _LoadedModelConfiguration.create(modelConfigurationData:)();
        v22 = v43;
        v21 = v44;
        __swift_project_boxed_opaque_existential_1(v42, v43);
        v38 = MEMORY[0x2495A78B4](v22, *(_QWORD *)(v21 + 8));
        v39 = v23;
        v40 = v14;
        v41 = v13;
        _LoadedModelConfiguration.assetInformation.setter(&v38);
        OUTLINED_FUNCTION_68();
        v24 = OUTLINED_FUNCTION_29_1();
        OUTLINED_FUNCTION_21_1(v24, &demangling cache variable for type metadata for AssetBackedResource?, v25, v26, v27, v28, v29, v30, v37, v38, v39, v40, v41);
        OUTLINED_FUNCTION_34_1(v31, v32, v33, v34, v35, v36);
        return v3;
      }
      OUTLINED_FUNCTION_21_1(v5, &demangling cache variable for type metadata for AssetBackedResource?, v6, 0, v8, v9, v10, v11, v37, v38, v39, v40, v41);
      v15 = OUTLINED_FUNCTION_29_1();
      OUTLINED_FUNCTION_34_1(v15, v16, v17, v18, v19, v20);
    }
    else
    {
      OUTLINED_FUNCTION_18_4((uint64_t)v45);
      OUTLINED_FUNCTION_18_4((uint64_t)&v38);
    }
    return 0;
  }
  return v3;
}

TokenGenerationCore::ModelConfigurationPromptTemplate_optional __swiftcall ModelConfiguration.promptTemplate(for:)(TokenGenerationCore::ModelConfigurationPromptTemplate_optional result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = v1;
  if (*(_QWORD *)v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 16))
      {
        swift_bridgeObjectRetain();
        v5 = specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v6 & 1) != 0)
        {
          v7 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
          v8 = v7[1];
          *v3 = *v7;
          v3[1] = v8;
          swift_bridgeObjectRetain();
          result.value.rawTemplateString._countAndFlagsBits = swift_bridgeObjectRelease();
          return result;
        }
        result.value.rawTemplateString._countAndFlagsBits = swift_bridgeObjectRelease();
      }
    }
  }
  *v3 = 0;
  v3[1] = 0;
  return result;
}

void ModelConfigurationPromptTemplate.rawTemplateString.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void _LoadedModelConfiguration.AssetInformation.identifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void _LoadedModelConfiguration.AssetInformation.version.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t _LoadedModelConfiguration.promptTemplates.getter()
{
  return swift_bridgeObjectRetain();
}

double key path getter for _LoadedModelConfiguration.assetInformation : _LoadedModelConfiguration@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];

  _LoadedModelConfiguration.assetInformation.getter((uint64_t *)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for _LoadedModelConfiguration.assetInformation : _LoadedModelConfiguration(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[4];

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  outlined copy of _LoadedModelConfiguration.AssetInformation?(v5[0], v1);
  return _LoadedModelConfiguration.assetInformation.setter(v5);
}

uint64_t _LoadedModelConfiguration.assetInformation.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_9_1();
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return outlined copy of _LoadedModelConfiguration.AssetInformation?(v3, v4);
}

uint64_t _LoadedModelConfiguration.assetInformation.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v2 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v3 = a1[3];
  OUTLINED_FUNCTION_9_1();
  v4 = v1[3];
  v5 = v1[4];
  v1[3] = v2;
  *((_OWORD *)v1 + 2) = v7;
  v1[6] = v3;
  return outlined consume of _LoadedModelConfiguration.AssetInformation?(v4, v5);
}

void _LoadedModelConfiguration.assetInformation.modify()
{
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_23();
}

BOOL _LoadedModelConfiguration.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of _LoadedModelConfiguration.CodingKeys.init(rawValue:), v2);
  OUTLINED_FUNCTION_15_1();
  return v3 != 0;
}

void protocol witness for Hashable.hashValue.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance _LoadedModelConfiguration.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance _LoadedModelConfiguration.CodingKeys@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = _LoadedModelConfiguration.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance _LoadedModelConfiguration.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x655474706D6F7270;
  a1[1] = 0xEF736574616C706DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  return 0x655474706D6F7270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _LoadedModelConfiguration.CodingKeys@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = _LoadedModelConfiguration.CodingKeys.init(stringValue:)();
  *a1 = result != 0;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance _LoadedModelConfiguration.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LoadedModelConfiguration.CodingKeys()
{
  lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t _LoadedModelConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  _LoadedModelConfiguration.init(from:)(a1);
  return v2;
}

void _LoadedModelConfiguration.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<_LoadedModelConfiguration.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_62_0();
  v9 = v8 - v7;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  v15 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    outlined consume of _LoadedModelConfiguration.AssetInformation?(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
    type metadata accessor for _LoadedModelConfiguration();
    swift_deallocPartialClassInstance();
    v10 = (uint64_t)a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (v14)
    {
      v11 = specialized _NativeDictionary.mapValues<A>(_:)(v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = 0;
    }
    OUTLINED_FUNCTION_10_4(v9, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    *(_QWORD *)(v3 + 16) = v11;
    swift_beginAccess();
    v12 = *(_QWORD *)(v3 + 24);
    v13 = *(_QWORD *)(v3 + 32);
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    outlined consume of _LoadedModelConfiguration.AssetInformation?(v12, v13);
    v10 = (uint64_t)v15;
  }
  __swift_destroy_boxed_opaque_existential_1(v10);
  OUTLINED_FUNCTION_0_0();
}

uint64_t CatalogClient.metadataWithAssetInformation(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a1;
  v1 = type metadata accessor for CatalogErrors.AssetErrors();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for AssetCacheConfiguration();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModelCache();
  static ModelCache.shared.getter();
  type metadata accessor for AssetCache();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BE3C5E0];
  AssetCacheConfiguration.init()();
  lazy protocol witness table accessor for type EarleyParser and conformance EarleyParser(&lazy protocol witness table cache variable for type AssetCache and conformance AssetCache, 255, v6, MEMORY[0x24BE3C5D8]);
  v7 = v11;
  ModelCache.getModel<A>(modelType:modelConfiguration:prewarm:keepAlive:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
    return swift_release();
  swift_release();
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (metadata: Data, version: String)?);
  AssetCache.withAsset<A, B>(_:assetLockGenerator:_:)();
  swift_release();
  return v12;
}

double static _LoadedModelConfiguration.assetBackedResource(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  int EnumTagSinglePayload;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint8_t *v60;
  _QWORD v61[5];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65[3];
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[48];
  uint64_t v69;

  v58 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>);
  v60 = *(uint8_t **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v57 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedLLMBundle?);
  MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AssetBackedLLMBundle();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v52 - v12;
  type metadata accessor for CatalogClient();
  swift_allocObject();
  v14 = CatalogClient.init()();
  MEMORY[0x2495A78FC](v3);
  v15 = v69;
  dispatch thunk of CatalogClient.resourceBundle(for:)();
  v69 = v15;
  if (v15)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return result;
  }
  v17 = (uint64_t)v59;
  v54 = a1;
  v53 = v11;
  v18 = v60;
  v56 = v7;
  v55 = v14;
  swift_bridgeObjectRelease();
  outlined init with copy of AssetBackedResource?((uint64_t)v68, (uint64_t)v65, &demangling cache variable for type metadata for ResourceBundle?);
  if (!v66)
  {
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v65, &demangling cache variable for type metadata for ResourceBundle?);
    __swift_storeEnumTagSinglePayload(v17, 1, 1, v56);
    v22 = v18;
    v23 = v3;
    v24 = v54;
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundle);
  v19 = v56;
  v20 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v17, v20 ^ 1u, 1, v19);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v17, 1, v19);
  v22 = v18;
  v23 = v3;
  v24 = v54;
  if (EnumTagSinglePayload == 1)
  {
LABEL_8:
    outlined destroy of AssetBackedServerConfiguration?(v17, &demangling cache variable for type metadata for AssetBackedLLMBundle?);
    if (one-time initialization token for configuration != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.configuration);
    v31 = v57;
    (*((void (**)(char *, uint64_t, uint64_t))v22 + 2))(v57, v24, v23);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v65[0] = v35;
      *(_DWORD *)v34 = 136446210;
      v60 = v34 + 4;
      v36 = MEMORY[0x2495A78FC](v23);
      *(_QWORD *)&v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*((void (**)(char *, uint64_t))v22 + 1))(v31, v23);
      _os_log_impl(&dword_248BE5000, v32, v33, "Could not find a corresponding model bundle LLM bundle ID: %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2495A8ED4](v35, -1, -1);
      MEMORY[0x2495A8ED4](v34, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      (*((void (**)(char *, uint64_t))v22 + 1))(v31, v23);
    }
    goto LABEL_31;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v13, v17, v19);
  AssetBackedLLMBundle.adapter.getter();
  v25 = v66;
  if (v66)
  {
    v26 = v67;
    __swift_project_boxed_opaque_existential_1(v65, v66);
    v27 = MEMORY[0x2495A78B4](v25, *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8));
    v29 = v28;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  }
  else
  {
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v65, &demangling cache variable for type metadata for AssetBackedLLMAdapter?);
    v27 = 0;
    v29 = 0;
  }
  v38 = v53;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v53, v13, v19);
  if (v29)
  {
    v39 = *(void (**)(char *, uint64_t))(v8 + 8);
    v39(v38, v19);
  }
  else
  {
    AssetBackedLLMBundle.baseModel.getter();
    v40 = v66;
    v41 = v67;
    __swift_project_boxed_opaque_existential_1(v65, v66);
    v27 = MEMORY[0x2495A78B4](v40, *(_QWORD *)(*(_QWORD *)(v41 + 8) + 8));
    v29 = v42;
    v39 = *(void (**)(char *, uint64_t))(v8 + 8);
    v39(v38, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  }
  v43 = v69;
  dispatch thunk of CatalogClient.resource(for:)();
  v69 = v43;
  if (v43)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v39(v13, v19);
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v68, &demangling cache variable for type metadata for ResourceBundle?);
    return result;
  }
  outlined init with copy of AssetBackedResource?((uint64_t)v65, (uint64_t)v61, &demangling cache variable for type metadata for CatalogResource?);
  if (v61[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CatalogResource);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetBackedResource);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (*((_QWORD *)&v63 + 1))
      {
        swift_release();
        swift_bridgeObjectRelease();
        outlined destroy of AssetBackedServerConfiguration?((uint64_t)v65, &demangling cache variable for type metadata for CatalogResource?);
        v39(v13, v19);
        outlined destroy of AssetBackedServerConfiguration?((uint64_t)v68, &demangling cache variable for type metadata for ResourceBundle?);
        outlined init with take of UnkeyedDecodingContainer(&v62, v58);
        return result;
      }
    }
    else
    {
      v64 = 0;
      v62 = 0u;
      v63 = 0u;
    }
  }
  else
  {
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v61, &demangling cache variable for type metadata for CatalogResource?);
    v62 = 0u;
    v63 = 0u;
    v64 = 0;
  }
  outlined destroy of AssetBackedServerConfiguration?((uint64_t)&v62, &demangling cache variable for type metadata for AssetBackedResource?);
  if (one-time initialization token for configuration != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Log.configuration);
  swift_bridgeObjectRetain();
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc();
    v48 = swift_slowAlloc();
    v60 = (uint8_t *)v13;
    v49 = v48;
    *(_QWORD *)&v62 = v48;
    *(_DWORD *)v47 = 136446210;
    v59 = (char *)(v47 + 4);
    swift_bridgeObjectRetain();
    v61[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_248BE5000, v45, v46, "Model catalog asset: %{public}s is not an asset backed resource", v47, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2495A8ED4](v49, -1, -1);
    MEMORY[0x2495A8ED4](v47, -1, -1);

    swift_release();
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v65, &demangling cache variable for type metadata for CatalogResource?);
    v50 = (char *)v60;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    swift_release();
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v65, &demangling cache variable for type metadata for CatalogResource?);
    v50 = v13;
  }
  v39(v50, v56);
LABEL_31:
  outlined destroy of AssetBackedServerConfiguration?((uint64_t)v68, &demangling cache variable for type metadata for ResourceBundle?);
  v51 = (_OWORD *)v58;
  *(_QWORD *)(v58 + 32) = 0;
  result = 0.0;
  *v51 = 0u;
  v51[1] = 0u;
  return result;
}

void static _LoadedModelConfiguration.expectedRequestedAsset(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_62_0();
  v7 = v6 - v5;
  ResourceBundleIdentifier<>.serverConfiguration()();
  if (v22)
  {
    OUTLINED_FUNCTION_36_2();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssetBackedResource>);
    v8 = OUTLINED_FUNCTION_31_3();
    *(_OWORD *)(v8 + 16) = xmmword_248C911B0;
    v10 = v24;
    v9 = v25;
    v11 = __swift_project_boxed_opaque_existential_1(v23, v24);
    *(_QWORD *)(v8 + 56) = v10;
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 32));
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
    OUTLINED_FUNCTION_8_0();
  }
  else
  {
    outlined destroy of AssetBackedServerConfiguration?((uint64_t)v21, &demangling cache variable for type metadata for AssetBackedServerConfiguration?);
    if (one-time initialization token for configuration != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Log.configuration);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      OUTLINED_FUNCTION_26_2();
      v26 = v1;
      v23[0] = OUTLINED_FUNCTION_25_3();
      v16 = OUTLINED_FUNCTION_24_2(4.8751e-34);
      v17 = MEMORY[0x2495A78FC](v16);
      v19 = OUTLINED_FUNCTION_41_1(v17, v18);
      OUTLINED_FUNCTION_7_5(v19);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      OUTLINED_FUNCTION_19_4(&dword_248BE5000, v14, v20, "Could not find a corresponding server configuration for LLM bundle ID: %{public}s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }
    OUTLINED_FUNCTION_10_4(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  }
  OUTLINED_FUNCTION_0_0();
}

uint64_t static _LoadedModelConfiguration.expectedRequestedAsset(modelBundleIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];
  uint64_t v6;
  __int128 v7;
  _BYTE v8[40];

  static _LoadedModelConfiguration.assetBackedResource(for:)(a1, (uint64_t)v8);
  if (!v2)
  {
    outlined init with copy of AssetBackedResource?((uint64_t)v8, (uint64_t)v5, &demangling cache variable for type metadata for AssetBackedResource?);
    if (v6)
    {
      OUTLINED_FUNCTION_33_3(v3);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssetBackedResource>);
      v1 = OUTLINED_FUNCTION_31_3();
      *(_OWORD *)(v1 + 16) = xmmword_248C911B0;
      outlined init with take of UnkeyedDecodingContainer(&v7, v1 + 32);
      outlined destroy of AssetBackedServerConfiguration?((uint64_t)v8, &demangling cache variable for type metadata for AssetBackedResource?);
    }
    else
    {
      OUTLINED_FUNCTION_18_4((uint64_t)v5);
      OUTLINED_FUNCTION_18_4((uint64_t)v8);
      return MEMORY[0x24BEE4AF8];
    }
  }
  return v1;
}

uint64_t _LoadedModelConfiguration.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined consume of _LoadedModelConfiguration.AssetInformation?(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t _LoadedModelConfiguration.__deallocating_deinit()
{
  _LoadedModelConfiguration.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Decodable.init(from:) in conformance _LoadedModelConfiguration@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 120))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t closure #1 in CatalogClient.metadataWithAssetInformation(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a1;
  v1 = type metadata accessor for AssetVersion();
  v24 = *(_QWORD *)(v1 - 8);
  v25 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CachedAsset.Contents();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  CachedAsset.contents.getter();
  CachedAsset.Contents.metadataURL.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CachedAsset.version.getter();
  v12 = AssetVersion.number.getter();
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v3, v25);
  v15 = v26;
  v16 = Data.init(contentsOf:options:)();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v16;
    v20 = v17;
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v21 = v23;
    *v23 = v19;
    v21[1] = v20;
    v21[2] = v12;
    v21[3] = v14;
  }
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  OUTLINED_FUNCTION_23();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined copy of _LoadedModelConfiguration.AssetInformation?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of _LoadedModelConfiguration.AssetInformation?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for _LoadedModelConfiguration.CodingKeys, &type metadata for _LoadedModelConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for _LoadedModelConfiguration.CodingKeys, &type metadata for _LoadedModelConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for _LoadedModelConfiguration.CodingKeys, &type metadata for _LoadedModelConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys;
  if (!lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for _LoadedModelConfiguration.CodingKeys, &type metadata for _LoadedModelConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LoadedModelConfiguration.CodingKeys and conformance _LoadedModelConfiguration.CodingKeys);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ModelConfigurationPromptTemplate>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = result + 64;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v17 = *v16;
    result = v16[1];
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    *(_QWORD *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v21 = (_QWORD *)(v3[6] + 16 * i);
    *v21 = v17;
    v21[1] = result;
    v22 = (_QWORD *)(v3[7] + 16 * i);
    *v22 = v19;
    v22[1] = v20;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v13 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v9)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v8 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v9)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ModelConfiguration()
{
  return swift_release();
}

_QWORD *assignWithCopy for ModelConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for ModelConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelConfiguration(uint64_t *a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for ModelConfiguration()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for ModelConfigurationPromptTemplate()
{
  OUTLINED_FUNCTION_18();
}

uint64_t method lookup function for _LoadedModelConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.assetInformation.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of _LoadedModelConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void type metadata accessor for _LoadedModelConfiguration.AssetInformation()
{
  OUTLINED_FUNCTION_18();
}

uint64_t dispatch thunk of ModelConfigurationProtocol.promptTemplate(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t getEnumTagSinglePayload for _LoadedModelConfiguration.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for _LoadedModelConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248C27E88 + 4 * byte_248C91ED0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248C27EA8 + 4 * byte_248C91ED5[v4]))();
}

_BYTE *sub_248C27E88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248C27EA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248C27EB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248C27EB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248C27EC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248C27EC8(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for _LoadedModelConfiguration.CodingKeys()
{
  OUTLINED_FUNCTION_18();
}

void outlined init with copy of AssetBackedResource?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a3);
  v3 = OUTLINED_FUNCTION_27();
  v4(v3);
  OUTLINED_FUNCTION_23();
}

void outlined destroy of AssetBackedServerConfiguration?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_23();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_10_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_18_4(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of AssetBackedServerConfiguration?(a1, v1);
}

void OUTLINED_FUNCTION_19_4(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

void OUTLINED_FUNCTION_21_1(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  outlined destroy of AssetBackedServerConfiguration?((uint64_t)va, a2);
}

uint64_t OUTLINED_FUNCTION_24_2(float a1)
{
  uint64_t v1;
  float *v2;
  uint64_t v3;

  *v2 = a1;
  *(_QWORD *)(v3 - 168) = v2 + 1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_33_3(uint64_t a1, ...)
{
  __int128 v2;
  va_list va;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a1);
  va_start(va, a1);
  v2 = va_arg(va1, __int128);
  v4 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  return outlined init with take of UnkeyedDecodingContainer((__int128 *)va, (uint64_t)va1);
}

uint64_t OUTLINED_FUNCTION_34_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  uint64_t v0;

  return outlined init with take of UnkeyedDecodingContainer((__int128 *)(v0 - 160), v0 - 120);
}

uint64_t OUTLINED_FUNCTION_41_1(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t Overridable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 40) == 1)
    return (*(uint64_t (**)(_QWORD))(v2 + 24))(*(_QWORD *)v2);
  else
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, *(_QWORD *)(a1 + 16));
}

void Overridable<A>.init(key:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_5_6();
  v3 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_11_3(v3);
  v4 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  OUTLINED_FUNCTION_2_5();
  if (OUTLINED_FUNCTION_1_7((uint64_t)"com.apple.tokengeneration"))
  {
    if ((id)OUTLINED_FUNCTION_6_4())
    {
      OUTLINED_FUNCTION_9_5();
      OUTLINED_FUNCTION_8_6();
      *v0 = v1;
      v0[1] = v2;
      OUTLINED_FUNCTION_4_5((uint64_t)partial apply for closure #1 in Overridable<A>.init(key:));
      OUTLINED_FUNCTION_23_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_5_6();
  v3 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_11_3(v3);
  v4 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  OUTLINED_FUNCTION_2_5();
  if (OUTLINED_FUNCTION_1_7((uint64_t)"com.apple.tokengeneration"))
  {
    if ((id)OUTLINED_FUNCTION_6_4())
    {
      OUTLINED_FUNCTION_9_5();
      OUTLINED_FUNCTION_8_6();
      *v0 = v1;
      v0[1] = v2;
      OUTLINED_FUNCTION_4_5((uint64_t)partial apply for closure #1 in Overridable<A>.init(key:));
      OUTLINED_FUNCTION_23_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_5_6();
  v3 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_11_3(v3);
  v4 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  OUTLINED_FUNCTION_2_5();
  if (OUTLINED_FUNCTION_1_7((uint64_t)"com.apple.tokengeneration"))
  {
    if ((id)OUTLINED_FUNCTION_6_4())
    {
      OUTLINED_FUNCTION_9_5();
      OUTLINED_FUNCTION_8_6();
      *v0 = v1;
      v0[1] = v2;
      OUTLINED_FUNCTION_4_5((uint64_t)partial apply for closure #1 in Overridable<A>.init(key:));
      OUTLINED_FUNCTION_23_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_5_6();
  v3 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_11_3(v3);
  v4 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  OUTLINED_FUNCTION_2_5();
  if (OUTLINED_FUNCTION_1_7((uint64_t)"com.apple.tokengeneration"))
  {
    if ((id)OUTLINED_FUNCTION_6_4())
    {
      OUTLINED_FUNCTION_9_5();
      OUTLINED_FUNCTION_8_6();
      *v0 = v1;
      v0[1] = v2;
      OUTLINED_FUNCTION_4_5((uint64_t)partial apply for closure #1 in Overridable<A>.init(key:));
      OUTLINED_FUNCTION_23_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  OUTLINED_FUNCTION_5_6();
  v3 = OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_11_3(v3);
  v4 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  OUTLINED_FUNCTION_2_5();
  if (OUTLINED_FUNCTION_1_7((uint64_t)"com.apple.tokengeneration"))
  {
    if ((id)OUTLINED_FUNCTION_6_4())
    {
      OUTLINED_FUNCTION_9_5();
      OUTLINED_FUNCTION_8_6();
      *v0 = v1;
      v0[1] = v2;
      OUTLINED_FUNCTION_4_5((uint64_t)partial apply for closure #1 in Overridable<A>.init(key:));
      OUTLINED_FUNCTION_23_0();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #1 in Overridable<A>.init(key:)()
{
  OUTLINED_FUNCTION_7_6();
}

{
  OUTLINED_FUNCTION_7_6();
}

#error "248C28374: call analysis failed (funcsize=31)"

uint64_t closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)MEMORY[0x2495A7C8C](a2, a3);
  v7 = objc_msgSend(a1, sel_URLForKey_, v6);

  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  v9 = type metadata accessor for URL();
  return __swift_storeEnumTagSinglePayload(a4, v8, 1, v9);
}

{
  void *v6;
  id v7;
  uint64_t result;
  char v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v6 = (void *)MEMORY[0x2495A7C8C](a2, a3);
  v7 = objc_msgSend(a1, sel_valueForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  outlined init with take of Any?((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    result = swift_dynamicCast();
    if ((result & 1) == 0)
      *(_DWORD *)a4 = 0;
    v9 = result ^ 1;
  }
  else
  {
    result = outlined destroy of Any?((uint64_t)v11);
    *(_DWORD *)a4 = 0;
    v9 = 1;
  }
  *(_BYTE *)(a4 + 4) = v9;
  return result;
}

void closure #1 in Overridable<A>.init(key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (void *)MEMORY[0x2495A7C8C](a2, a3);
  v7 = objc_msgSend(a1, sel_stringForKey_, v6);

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  *a4 = v8;
  a4[1] = v10;
}

#error "248C28628: call analysis failed (funcsize=34)"

uint64_t sub_248C28674()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;

  if (a2)
  {
    v3 = (void *)MEMORY[0x2495A7C8C]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  return v4;
}

uint64_t partial apply for closure #1 in Overridable<A>.init(key:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Overridable<A>.init(key:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

{
  uint64_t v2;

  return closure #1 in Overridable<A>.init(key:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void partial apply for closure #1 in Overridable<A>.init(key:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in Overridable<A>.init(key:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for Overridable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Overridable);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id OUTLINED_FUNCTION_1_7@<X0>(uint64_t a1@<X8>)
{
  return @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_4_5(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 40) = v4;
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return MobileGestalt_get_current_device();
}

void OUTLINED_FUNCTION_7_6()
{
  JUMPOUT(0x2495A7C8CLL);
}

void OUTLINED_FUNCTION_8_6()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return MobileGestalt_get_internalBuild();
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_11_3(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(result + 16) = v2;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_13_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return outlined init with take of Any?((uint64_t)&a9, (uint64_t)&a13);
}

uint64_t OUTLINED_FUNCTION_14_4()
{
  return _bridgeAnyObjectToAny(_:)();
}

id OUTLINED_FUNCTION_15_4(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary.subscript.getter(a1, a2, a3, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.subscript.getter(a1, a2, a3, (uint64_t (*)(void))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    v3 = type metadata accessor for Symbol(0);
    v4 = OUTLINED_FUNCTION_11_4(v3);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v4, v5, v6);
    v7 = OUTLINED_FUNCTION_10_6();
  }
  else
  {
    type metadata accessor for Symbol(0);
    v7 = OUTLINED_FUNCTION_3_7();
  }
  return OUTLINED_FUNCTION_2_6(v7, v8, v9, v10);
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v2 & 1) != 0))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
    v4 = OUTLINED_FUNCTION_11_4(v3);
    outlined init with copy of (mask: IndexSet, isPotentiallyDeterministic: Bool)(v4, v5);
    v6 = OUTLINED_FUNCTION_10_6();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
    v6 = OUTLINED_FUNCTION_3_7();
  }
  return OUTLINED_FUNCTION_2_6(v6, v7, v8, v9);
}

{
  unint64_t v3;
  char v4;

  if (*(_QWORD *)(a2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v3);
  else
    return 0;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5;
  char v6;

  if (*(_QWORD *)(a3 + 16) && (v5 = a4(), (v6 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v5);
  else
    return 0;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_23();
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t static PromptModule.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Array<A>.== infix(_:_:)();
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t Prompt.renderPromptModules(tokenTable:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;

  v97 = a1;
  v99 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  v101 = *(_QWORD *)(v99 - 8);
  v3 = MEMORY[0x24BDAC7A8](v99);
  v104 = (uint64_t *)((char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v92 - v5;
  v114 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x24BDAC7A8](v114);
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for Prompt.PromptFragment(0);
  v9 = *(_QWORD *)(v105 - 8);
  MEMORY[0x24BDAC7A8](v105);
  v100 = (uint64_t *)((char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for Prompt.Delimiter(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v106 = (uint64_t *)((char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v16 = (uint64_t *)((char *)&v92 - v15);
  v17 = *(_OWORD *)(v1 + 16);
  v103 = *(_QWORD *)(v1 + 16);
  v18 = *(_QWORD *)(v103 + 16);
  if (!v18)
    return MEMORY[0x24BEE4AF8];
  v102 = v17;
  v92 = v9;
  v93 = (uint64_t *)v6;
  v96 = v8;
  v98 = v2;
  v95 = *(_QWORD *)v1;
  v94 = *(_QWORD *)(v1 + 8);
  v19 = v103 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v20 = *(_QWORD *)(v14 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(v19, (uint64_t)v16, type metadata accessor for Prompt.Delimiter);
    v22 = *v16;
    v21 = v16[1];
    if (one-time initialization token for promptModule != -1)
      swift_once();
    v23 = (_QWORD *)__swift_project_value_buffer(v114, (uint64_t)static Prompt.SpecialToken.promptModule);
    if (v22 == *v23 && v21 == v23[1])
      break;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined destroy of Prompt.Delimiter((uint64_t)v16, type metadata accessor for Prompt.Delimiter);
    if ((v25 & 1) != 0)
      goto LABEL_14;
    v19 += v20;
    if (!--v18)
    {
      OUTLINED_FUNCTION_13_5();
      return MEMORY[0x24BEE4AF8];
    }
  }
  outlined destroy of Prompt.Delimiter((uint64_t)v16, type metadata accessor for Prompt.Delimiter);
LABEL_14:
  v26 = OUTLINED_FUNCTION_13_5();
  v111 = v95;
  v112 = v94;
  v113 = v102;
  v27 = v98;
  Prompt.promptFragments()(v26, v28, v29, v30, v31, v32, v33, v34, v92, (uint64_t)v93, v94, v95, (uint64_t)v96, v97, v98, v99, (uint64_t)v100, v101, v102,
    *((uint64_t *)&v102 + 1));
  v36 = v99;
  if (v27)
    return v37;
  v98 = 0;
  v38 = *(_QWORD *)(v35 + 16);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v41 = MEMORY[0x24BEE4AF8];
    v82 = MEMORY[0x24BEE4AF8];
LABEL_50:
    v83 = v82;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v84 = v83;
    }
    else
    {
      OUTLINED_FUNCTION_6_5();
      v84 = v90;
    }
    v85 = *(_QWORD *)(v84 + 16);
    OUTLINED_FUNCTION_12_2();
    if (v50)
    {
      OUTLINED_FUNCTION_4_6();
      v37 = v91;
    }
    *(_QWORD *)(v37 + 16) = v83;
    v86 = v37 + 16 * v85;
    *(_QWORD *)(v86 + 32) = v41;
    *(_BYTE *)(v86 + 40) = 1;
    return v37;
  }
  v39 = (*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  v94 = v35;
  v40 = v35 + v39;
  *(_QWORD *)&v102 = *(_QWORD *)(v92 + 72);
  v95 = MEMORY[0x24BEE4AD8] + 8;
  v41 = MEMORY[0x24BEE4AF8];
  v103 = MEMORY[0x24BEE4AF8];
  v42 = v100;
  while (1)
  {
    _s19TokenGenerationCore7GrammarVWOcTm_0(v40, (uint64_t)v42, type metadata accessor for Prompt.PromptFragment);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v52 = *v42;
      v53 = v42[1];
      v54 = v104;
      OUTLINED_FUNCTION_8_7((uint64_t)v104 + *(int *)(v36 + 20), 1);
      *v54 = v52;
      v54[1] = v53;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v41 = OUTLINED_FUNCTION_1_8();
      OUTLINED_FUNCTION_12_2();
      if (v50)
        v41 = OUTLINED_FUNCTION_1_8();
      OUTLINED_FUNCTION_0_8();
      outlined init with take of Grammar((uint64_t)v104, v55, type metadata accessor for Prompt.RenderedPromptFragment);
      goto LABEL_33;
    }
    v43 = v106;
    outlined init with take of Grammar((uint64_t)v42, (uint64_t)v106, type metadata accessor for Prompt.Delimiter);
    v45 = *v43;
    v44 = v43[1];
    v46 = *v43 == *v23 && v44 == v23[1];
    if (!v46 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v42 = v100;
      v47 = v103;
    }
    else
    {
      OUTLINED_FUNCTION_6_5();
      v47 = v80;
      v42 = v100;
    }
    v48 = *(_QWORD *)(v47 + 16);
    OUTLINED_FUNCTION_12_2();
    if (v50)
    {
      OUTLINED_FUNCTION_4_6();
      v49 = v81;
    }
    *(_QWORD *)(v49 + 16) = v43;
    v103 = v49;
    v51 = v49 + 16 * v48;
    *(_QWORD *)(v51 + 32) = v41;
    *(_BYTE *)(v51 + 40) = 0;
    outlined destroy of Prompt.Delimiter((uint64_t)v106, type metadata accessor for Prompt.Delimiter);
    v41 = MEMORY[0x24BEE4AF8];
LABEL_33:
    v40 += v102;
    if (!--v38)
    {
      OUTLINED_FUNCTION_14_5();
      v82 = v103;
      goto LABEL_50;
    }
  }
  v56 = v114;
  v57 = v96;
  type metadata accessor for Locale();
  v58 = OUTLINED_FUNCTION_3_7();
  __swift_storeEnumTagSinglePayload(v58, v59, v60, v61);
  *v57 = v45;
  v57[1] = v44;
  v62 = (_QWORD *)((char *)v57 + *(int *)(v56 + 24));
  *v62 = 0;
  v62[1] = 0;
  v63 = v97;
  v64 = *(_QWORD *)(v97 + 16);
  swift_bridgeObjectRetain();
  if (!v64)
    goto LABEL_57;
  v65 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v57);
  if ((v66 & 1) == 0)
    goto LABEL_57;
  outlined init with copy of Any(*(_QWORD *)(v63 + 56) + 32 * v65, (uint64_t)&v111);
  if (swift_dynamicCast())
  {
    v111 = v109;
    v112 = v110;
    v109 = 0x7D7D64697B7BLL;
    v110 = 0xE600000000000000;
    v67 = (uint64_t *)((char *)v106 + *(int *)(v114 + 24));
    v68 = v67[1];
    if (v68)
    {
      v69 = *v67;
      v70 = v68;
    }
    else
    {
      v69 = 0;
      v70 = 0xE000000000000000;
    }
    v36 = v99;
    v107 = v69;
    v108 = v70;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v71 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v73 = v72;
    swift_bridgeObjectRelease();
    outlined destroy of Prompt.Delimiter((uint64_t)v96, type metadata accessor for Prompt.SpecialToken);
    swift_bridgeObjectRelease();
    if (String.count.getter() <= 0)
    {
      outlined destroy of Prompt.Delimiter((uint64_t)v106, type metadata accessor for Prompt.Delimiter);
      swift_bridgeObjectRelease();
      v42 = v100;
    }
    else
    {
      v74 = *(int *)(v36 + 20);
      v75 = v93;
      v76 = v71;
      v77 = (uint64_t)v93 + v74;
      _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v106, (uint64_t)v93 + v74, type metadata accessor for Prompt.SpecialToken);
      OUTLINED_FUNCTION_8_7(v77, 0);
      *v75 = v76;
      v75[1] = v73;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v42 = v100;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v41 = OUTLINED_FUNCTION_1_8();
      OUTLINED_FUNCTION_12_2();
      v36 = v99;
      if (v50)
        v41 = OUTLINED_FUNCTION_1_8();
      OUTLINED_FUNCTION_0_8();
      outlined init with take of Grammar((uint64_t)v93, v79, type metadata accessor for Prompt.RenderedPromptFragment);
      outlined destroy of Prompt.Delimiter((uint64_t)v106, type metadata accessor for Prompt.Delimiter);
    }
    goto LABEL_33;
  }
  v57 = v96;
LABEL_57:
  type metadata accessor for GenerationError();
  lazy protocol witness table accessor for type GenerationError and conformance GenerationError();
  swift_allocError();
  v88 = (uint64_t)v106;
  _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v106, v89, type metadata accessor for Prompt.SpecialToken);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  outlined destroy of Prompt.Delimiter((uint64_t)v57, type metadata accessor for Prompt.SpecialToken);
  outlined destroy of Prompt.Delimiter(v88, type metadata accessor for Prompt.Delimiter);
  OUTLINED_FUNCTION_13_5();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_5();
  return v37;
}

void outlined destroy of Prompt.Delimiter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_23();
}

uint64_t initializeBufferWithCopyOfBuffer for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptModule(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptModule(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptModule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PromptModule(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for PromptModule(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for PromptModule()
{
  return &type metadata for PromptModule;
}

uint64_t outlined init with copy of (mask: IndexSet, isPotentiallyDeterministic: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_2_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_4_6()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_6_5()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 72));
}

uint64_t OUTLINED_FUNCTION_10_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_11_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return v2 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v1;
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return swift_bridgeObjectRelease();
}

void specialized Array.reserveCapacity(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  if (!swift_isUniquelyReferenced_nonNull_native() || a1 > *(_QWORD *)(v5 + 24) >> 1)
    v5 = a2();
  *v2 = v5;
  OUTLINED_FUNCTION_99();
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = v3 - 1;
    v6 = type metadata accessor for TerminalSymbol(0);
    _s19TokenGenerationCore7GrammarVWOcTm_0(a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v5, a2, type metadata accessor for TerminalSymbol);
    return OUTLINED_FUNCTION_2_6(a2, 0, 1, v6);
  }
  else
  {
    v8 = type metadata accessor for TerminalSymbol(0);
    return OUTLINED_FUNCTION_2_6(a2, 1, 1, v8);
  }
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 24 * v1 + 8);
  OUTLINED_FUNCTION_58_0();
  return v2;
}

{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 16 * v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

void specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  lazy protocol witness table accessor for type NonTerminalSymbol and conformance NonTerminalSymbol();
  Set.init(minimumCapacity:)();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 40;
    do
    {
      v4 = OUTLINED_FUNCTION_38_0();
      v12 = (uint64_t *)OUTLINED_FUNCTION_185(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
      specialized Set._Variant.insert(_:)(v12, v13, v14);
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_93_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  Set.init(minimumCapacity:)();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = a1 + 40;
    do
    {
      v4 = OUTLINED_FUNCTION_38_0();
      v12 = (uint64_t *)OUTLINED_FUNCTION_185(v4, v5, v6, v7, v8, v9, v10, v11, v15, v16);
      specialized Set._Variant.insert(_:)(v12, v13, v14);
      swift_bridgeObjectRelease();
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_93_0();
}

uint64_t specialized Set.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v20;

  OUTLINED_FUNCTION_6_1();
  v3 = v2;
  v4 = type metadata accessor for CharacterSet();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_57_1();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_84_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_62_0();
  v11 = v10 - v9;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, v5, MEMORY[0x24BDCB760]);
  v20 = Set.init(minimumCapacity:)();
  v12 = *(_QWORD *)(v3 + 16);
  if (v12)
  {
    OUTLINED_FUNCTION_65_0();
    v14 = v3 + v13;
    v15 = *(_QWORD *)(v6 + 72);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v16(v11, v14, v4);
      OUTLINED_FUNCTION_196(v11, 0);
      if (__swift_getEnumTagSinglePayload(v11, 1, v4) == 1)
        break;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v0, v11, v4);
      v17 = OUTLINED_FUNCTION_173_0();
      specialized Set._Variant.insert(_:)(v17, v18);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
      v14 += v15;
      if (!--v12)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    OUTLINED_FUNCTION_196(v11, 1);
  }
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  unint64_t v20;

  v18 = Set.init(minimumCapacity:)();
  result = specialized _NativeDictionary.makeIterator()(a1, v19);
  v3 = v19[0];
  v4 = v19[1];
  v5 = v19[3];
  v6 = v20;
  v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20)
    goto LABEL_3;
LABEL_2:
  v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v9 = v8 | (v5 << 6);
  while (1)
  {
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    result = swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_2;
LABEL_3:
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    if (v10 >= v7)
      goto LABEL_21;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    v12 = v5 + 1;
    if (!v11)
    {
      v12 = v5 + 2;
      if (v5 + 2 >= v7)
        goto LABEL_21;
      v11 = *(_QWORD *)(v4 + 8 * v12);
      if (!v11)
      {
        v12 = v5 + 3;
        if (v5 + 3 >= v7)
          goto LABEL_21;
        v11 = *(_QWORD *)(v4 + 8 * v12);
        if (!v11)
        {
          v12 = v5 + 4;
          if (v5 + 4 >= v7)
            goto LABEL_21;
          v11 = *(_QWORD *)(v4 + 8 * v12);
          if (!v11)
          {
            v12 = v5 + 5;
            if (v5 + 5 >= v7)
              goto LABEL_21;
            v11 = *(_QWORD *)(v4 + 8 * v12);
            if (!v11)
            {
              v13 = v5 + 6;
              while (v13 < v7)
              {
                v11 = *(_QWORD *)(v4 + 8 * v13++);
                if (v11)
                {
                  v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v18;
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    v5 = v12;
  }
  __break(1u);
  return result;
}

void Prompt.promptFragments()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  os_log_type_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(_QWORD);
  uint64_t v89;
  uint64_t (*v90)(_QWORD);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(_QWORD);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;

  OUTLINED_FUNCTION_2();
  a19 = v24;
  a20 = v25;
  v118 = v21;
  v26 = type metadata accessor for Prompt.PromptFragment(0);
  v27 = *(_QWORD *)(v26 - 8);
  v128 = v26;
  v129 = v27;
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_35_0();
  v119 = v28;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_84_0();
  v117 = v30;
  OUTLINED_FUNCTION_27_0();
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v116 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v122 = (uint64_t *)((char *)&v116 - v35);
  v126 = OUTLINED_FUNCTION_164();
  OUTLINED_FUNCTION_79_2();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_35_0();
  v121 = v37;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v38);
  v120 = (uint64_t *)((char *)&v116 - v39);
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v116 - v41;
  v43 = type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_59();
  v45 = v20[1];
  v127 = *v20;
  v46 = v20[2];
  v47 = *(_QWORD *)(v46 + 16);
  v125 = v23;
  if (v47)
  {
    OUTLINED_FUNCTION_60_2();
    OUTLINED_FUNCTION_58_0();
    v48 = v127;
    v49 = v46;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>);
    v50 = OUTLINED_FUNCTION_64_0();
    *(_OWORD *)(v50 + 16) = xmmword_248C911B0;
    v51 = v50;
    v52 = (char *)v20 + v50;
    v53 = one-time initialization token for endPrompt;
    OUTLINED_FUNCTION_60_2();
    if (v53 != -1)
      swift_once();
    v54 = __swift_project_value_buffer(v43, (uint64_t)static Prompt.SpecialToken.endPrompt);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v54, v22, type metadata accessor for Prompt.SpecialToken);
    v48 = v127;
    v55 = String.count.getter();
    v56 = OUTLINED_FUNCTION_170_0();
    outlined init with take of Grammar(v56, v57, type metadata accessor for Prompt.SpecialToken);
    v58 = v126;
    *(_QWORD *)&v52[*(int *)(v126 + 20)] = v55;
    *(_QWORD *)&v52[*(int *)(v58 + 24)] = 0;
    v49 = v51;
  }
  v59 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_82();
  v60 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v60 = v48;
  v130 = v45;
  v61 = 7;
  if (((v45 >> 60) & ((v48 & 0x800000000000000) == 0)) != 0)
    v61 = 11;
  v62 = v61 | (v60 << 16);
  v63 = *(_QWORD *)(v49 + 16);
  if (!v63)
  {
LABEL_33:
    OUTLINED_FUNCTION_88();
    if (v62 >= 0x4000)
      goto LABEL_36;
    swift_bridgeObjectRelease();
LABEL_40:
    v107 = *(_QWORD *)(v59 + 16);
    if (!v107)
      goto LABEL_32;
    v108 = v107 - 1;
    if (v107 == 1)
      goto LABEL_32;
    if ((OUTLINED_FUNCTION_136_1() & 1) == 0)
      v59 = specialized _ArrayBuffer._consumeAndCreateNew()();
    v109 = 1;
    while (1)
    {
      v110 = v109 - 1;
      if (v109 - 1 != v108)
      {
        v104 = *(_QWORD *)(v59 + 16);
        if (v110 >= v104)
        {
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          v59 = OUTLINED_FUNCTION_35_1();
LABEL_37:
          v106 = *(_QWORD *)(v59 + 16);
          v105 = *(_QWORD *)(v59 + 24);
          if (v106 >= v105 >> 1)
          {
            OUTLINED_FUNCTION_80_1(v105);
            v59 = OUTLINED_FUNCTION_36_3();
          }
          *(_QWORD *)(v59 + 16) = v106 + 1;
          outlined init with take of Grammar(v104, v59+ ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80))+ *(_QWORD *)(v129 + 72) * v106, type metadata accessor for Prompt.PromptFragment);
          goto LABEL_40;
        }
        v111 = v59 + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
        v112 = *(_QWORD *)(v129 + 72);
        OUTLINED_FUNCTION_145_1(v111 + v112 * v110, v119);
        if (v108 >= v104)
          goto LABEL_53;
        v104 = v111 + v112 * v108;
        v113 = OUTLINED_FUNCTION_187();
        outlined assign with copy of Prompt.PromptFragment(v113, v114);
        if (v108 >= *(_QWORD *)(v59 + 16))
          goto LABEL_54;
        outlined assign with take of Symbol(v119, v111 + v112 * v108, type metadata accessor for Prompt.PromptFragment);
      }
      if (v109++ >= (uint64_t)--v108)
        goto LABEL_32;
    }
  }
  v64 = v125;
  v123 = v49 + ((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80));
  v124 = v61 | (v60 << 16);
  v65 = v124;
  while (1)
  {
    if (v63 > *(_QWORD *)(v49 + 16))
    {
      __break(1u);
LABEL_36:
      String.subscript.getter();
      OUTLINED_FUNCTION_88();
      v100 = OUTLINED_FUNCTION_27();
      v101 = MEMORY[0x2495A7CE0](v100);
      v103 = v102;
      swift_bridgeObjectRelease();
      v104 = (unint64_t)v117;
      *v117 = v101;
      *(_QWORD *)(v104 + 8) = v103;
      OUTLINED_FUNCTION_135_1();
      if ((OUTLINED_FUNCTION_136_1() & 1) == 0)
        goto LABEL_55;
      goto LABEL_37;
    }
    --v63;
    _s19TokenGenerationCore7GrammarVWOcTm_0(v123 + *(_QWORD *)(v64 + 72) * v63, (uint64_t)v42, type metadata accessor for Prompt.Delimiter);
    v66 = *(int *)(v126 + 20);
    v67 = String.index(_:offsetBy:limitedBy:)();
    if ((v68 & 1) != 0)
      break;
    v62 = v67;
    if (v67 >> 14 >= v65 >> 14)
    {
      v64 = v125;
    }
    else
    {
      v69 = String.subscript.getter();
      v70 = MEMORY[0x2495A7CE0](v69);
      v72 = v71;
      OUTLINED_FUNCTION_7();
      v73 = v122;
      *v122 = v70;
      v73[1] = v72;
      OUTLINED_FUNCTION_135_1();
      if ((OUTLINED_FUNCTION_136_1() & 1) == 0)
        v59 = OUTLINED_FUNCTION_35_1();
      v64 = v125;
      if (*(_QWORD *)(v59 + 16) >= *(_QWORD *)(v59 + 24) >> 1)
        v59 = OUTLINED_FUNCTION_36_3();
      OUTLINED_FUNCTION_72_2();
      outlined init with take of Grammar((uint64_t)v122, v74, type metadata accessor for Prompt.PromptFragment);
    }
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v42, (uint64_t)v34, type metadata accessor for Prompt.Delimiter);
    swift_storeEnumTagMultiPayload();
    if ((OUTLINED_FUNCTION_136_1() & 1) == 0)
      v59 = OUTLINED_FUNCTION_35_1();
    if (*(_QWORD *)(v59 + 16) >= *(_QWORD *)(v59 + 24) >> 1)
      v59 = OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_72_2();
    outlined init with take of Grammar((uint64_t)v34, v75, type metadata accessor for Prompt.PromptFragment);
    outlined destroy of Grammar((uint64_t)v42, type metadata accessor for Prompt.Delimiter);
    v65 = v62;
    if (!v63)
      goto LABEL_33;
  }
  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_88();
  if (one-time initialization token for prompt != -1)
    swift_once();
  v76 = OUTLINED_FUNCTION_23_2();
  __swift_project_value_buffer(v76, (uint64_t)static Log.prompt);
  v77 = v120;
  OUTLINED_FUNCTION_145_1((uint64_t)v42, (uint64_t)v120);
  v78 = v121;
  OUTLINED_FUNCTION_145_1((uint64_t)v42, v121);
  OUTLINED_FUNCTION_60_2();
  Logger.logObject.getter();
  v79 = OUTLINED_FUNCTION_152_1();
  v80 = v79;
  if (os_log_type_enabled((os_log_t)type metadata accessor for Prompt.Delimiter, v79))
  {
    v81 = OUTLINED_FUNCTION_19_3();
    LODWORD(v128) = v80;
    v82 = v81;
    v129 = OUTLINED_FUNCTION_19_3();
    a10 = v129;
    *(_DWORD *)v82 = 136446722;
    v83 = *v77;
    OUTLINED_FUNCTION_107_0();
    v131 = OUTLINED_FUNCTION_203(v83, v84, &a10);
    OUTLINED_FUNCTION_182();
    OUTLINED_FUNCTION_7();
    OUTLINED_FUNCTION_172_0();
    *(_WORD *)(v82 + 12) = 2050;
    v85 = v78;
    v86 = *(_QWORD *)(v78 + *(int *)(v126 + 20));
    outlined destroy of Grammar(v85, type metadata accessor for Prompt.Delimiter);
    v131 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v82 + 22) = 2050;
    v131 = String.count.getter();
    OUTLINED_FUNCTION_182();
    OUTLINED_FUNCTION_26();
    _os_log_impl(&dword_248BE5000, (os_log_t)type metadata accessor for Prompt.Delimiter, (os_log_type_t)v128, "Failed to create prompt fragments since token %{public}s position %{public}ld for prompt with string length %{public}ld is invalid", (uint8_t *)v82, 0x20u);
    OUTLINED_FUNCTION_137_2();
    OUTLINED_FUNCTION_7_4();
  }
  v87 = OUTLINED_FUNCTION_133_1();
  outlined destroy of Grammar(v87, v88);
  v89 = OUTLINED_FUNCTION_170_0();
  outlined destroy of Grammar(v89, v90);

  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_149_1();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
  OUTLINED_FUNCTION_50_2();
  v92 = v91;
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, tokenPosition: Int, promptStringSize: Int));
  v94 = *(int *)(v93 + 48);
  v95 = *(int *)(v93 + 64);
  v96 = OUTLINED_FUNCTION_187();
  _s19TokenGenerationCore7GrammarVWOcTm_0(v96, v97, v98);
  *(_QWORD *)(v92 + v94) = *(_QWORD *)&v42[v66];
  v99 = String.count.getter();
  OUTLINED_FUNCTION_26();
  *(_QWORD *)(v92 + v95) = v99;
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_176_0();
  outlined destroy of Grammar((uint64_t)v42, type metadata accessor for Prompt.Delimiter);
LABEL_32:
  OUTLINED_FUNCTION_0_0();
}

void Prompt.SpecialToken.identifier.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.SpecialToken.locale.getter(uint64_t a1@<X8>)
{
  Prompt.SpecialToken.locale.getter(type metadata accessor for Prompt.SpecialToken, &demangling cache variable for type metadata for Locale?, a1);
}

uint64_t type metadata accessor for Prompt.SpecialToken(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.SpecialToken);
}

void Prompt.SpecialToken.locale.setter(uint64_t a1)
{
  Prompt.SpecialToken.locale.setter(a1, type metadata accessor for Prompt.SpecialToken, &demangling cache variable for type metadata for Locale?);
}

uint64_t (*Prompt.SpecialToken.locale.modify())(void)
{
  OUTLINED_FUNCTION_180();
  return AutomationJSON.responses.modify;
}

void Prompt.SpecialToken.instance.getter()
{
  type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.SpecialToken.init(identifier:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = type metadata accessor for Prompt.SpecialToken(0);
  v7 = (uint64_t)a3 + *(int *)(v6 + 20);
  v8 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v7, v9, v10, v8);
  *a3 = a1;
  a3[1] = a2;
  v11 = (_QWORD *)((char *)a3 + *(int *)(v6 + 24));
  *v11 = 0;
  v11[1] = 0;
  OUTLINED_FUNCTION_17_0();
}

void Prompt.SpecialToken.init(identifier:locale:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = OUTLINED_FUNCTION_180();
  v7 = (uint64_t)a3 + *(int *)(v6 + 20);
  v8 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v7, v9, v10, v8);
  *a3 = a1;
  a3[1] = a2;
  v11 = (_QWORD *)((char *)a3 + *(int *)(v6 + 24));
  *v11 = 0;
  v11[1] = 0;
  v12 = OUTLINED_FUNCTION_207();
  outlined assign with take of Locale?(v12, v13, v14);
  OUTLINED_FUNCTION_17_0();
}

void Prompt.SpecialToken.init(identifier:instance:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  OUTLINED_FUNCTION_113_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = type metadata accessor for Prompt.SpecialToken(0);
  v11 = (uint64_t)v9 + *(int *)(v10 + 20);
  v12 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v11, v13, v14, v12);
  *v9 = v7;
  v9[1] = v5;
  v15 = (_QWORD *)((char *)v9 + *(int *)(v10 + 24));
  *v15 = v3;
  v15[1] = v1;
  OUTLINED_FUNCTION_23_0();
}

void Prompt.SpecialToken.init(identifier:instance:locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  OUTLINED_FUNCTION_113_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = OUTLINED_FUNCTION_180();
  v11 = (uint64_t)v9 + *(int *)(v10 + 20);
  v12 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v11, v13, v14, v12);
  *v9 = v7;
  v9[1] = v5;
  v15 = (_QWORD *)((char *)v9 + *(int *)(v10 + 24));
  *v15 = v3;
  v15[1] = v1;
  v16 = OUTLINED_FUNCTION_208();
  outlined assign with take of Locale?(v16, v17, v18);
  OUTLINED_FUNCTION_23_0();
}

uint64_t Prompt.SpecialToken.description.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 24));
  v2 = v1[1];
  if (v2)
  {
    v3 = *v1;
    String.append(_:)(*(Swift::String *)(&v2 - 1));
    v5 = 45;
    v4 = (void *)0xE100000000000000;
  }
  else
  {
    v5 = 0;
    v4 = (void *)0xE000000000000000;
  }
  OUTLINED_FUNCTION_206();
  v10 = v6;
  OUTLINED_FUNCTION_165();
  v7._countAndFlagsBits = OUTLINED_FUNCTION_132_2();
  String.append(_:)(v7);
  OUTLINED_FUNCTION_15_1();
  v8._countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_202();
  return v10;
}

uint64_t one-time initialization function for endPrompt()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.endPrompt);
  v1 = (_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.endPrompt);
  v2 = (uint64_t)v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *v1 = 0xD000000000000010;
  v1[1] = 0x8000000248C992F0;
  v5 = (_QWORD *)((char *)v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.endPrompt.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for endPrompt, (uint64_t)static Prompt.SpecialToken.endPrompt, a1);
}

void one-time initialization function for startPrompt()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.startPrompt);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.startPrompt) + *(int *)(v0 + 20);
  v2 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v1, v3, v4, v2);
  OUTLINED_FUNCTION_198(0xD000000000000012);
  OUTLINED_FUNCTION_99();
}

void static Prompt.SpecialToken.startPrompt.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for startPrompt, (uint64_t)static Prompt.SpecialToken.startPrompt, a1);
}

uint64_t one-time initialization function for localeInstruction()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.localeInstruction);
  v1 = (_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.localeInstruction);
  v2 = (uint64_t)v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x8000000248C992B0;
  v5 = (_QWORD *)((char *)v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.localeInstruction.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for localeInstruction, (uint64_t)static Prompt.SpecialToken.localeInstruction, a1);
}

uint64_t one-time initialization function for localeInstructionInjectionLocation()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.localeInstructionInjectionLocation);
  v1 = (_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation);
  v2 = (uint64_t)v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *v1 = 0xD000000000000025;
  v1[1] = 0x8000000248C99280;
  v5 = (_QWORD *)((char *)v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.localeInstructionInjectionLocation.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for localeInstructionInjectionLocation, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation, a1);
}

uint64_t Prompt.SpecialToken.LocaleInstructionPosition.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  unsigned int v4;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Prompt.SpecialToken.LocaleInstructionPosition.init(rawValue:), v2);
  OUTLINED_FUNCTION_15_1();
  if (v3 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (v3)
    return v4;
  else
    return 0;
}

void one-time initialization function for promptModule()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.promptModule);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.promptModule) + *(int *)(v0 + 20);
  v2 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v1, v3, v4, v2);
  OUTLINED_FUNCTION_198(0x6D5F74706D6F7270);
  OUTLINED_FUNCTION_99();
}

void static Prompt.SpecialToken.promptModule.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for promptModule, (uint64_t)static Prompt.SpecialToken.promptModule, a1);
}

void one-time initialization function for instructions()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (uint64_t *)((char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.instructions);
  v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.instructions);
  v10 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v10);
  _s10Foundation6LocaleVSgWOcTm_0((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  v11 = (uint64_t)v2 + *(int *)(v0 + 20);
  __swift_storeEnumTagSinglePayload(v11, 1, 1, v10);
  *v2 = 0xD000000000000010;
  v2[1] = 0x8000000248C991C0;
  v12 = (_QWORD *)((char *)v2 + *(int *)(v0 + 24));
  *v12 = 0;
  v12[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v11, &demangling cache variable for type metadata for Locale?);
  outlined init with take of Grammar((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  outlined destroy of (Locale?, Locale?)((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

void static Prompt.SpecialToken.Chat.instructions(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_1_9(v2, v6);
  v3 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_9_6(v0, v4, v5, v3);
  OUTLINED_FUNCTION_2_7(0xD000000000000010);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.instructions.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for instructions, (uint64_t)static Prompt.SpecialToken.Chat.instructions, a1);
}

void one-time initialization function for response()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (uint64_t *)((char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.response);
  v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.response);
  v10 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v10);
  _s10Foundation6LocaleVSgWOcTm_0((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  v11 = (uint64_t)v2 + *(int *)(v0 + 20);
  __swift_storeEnumTagSinglePayload(v11, 1, 1, v10);
  *v2 = 0xD000000000000013;
  v2[1] = 0x8000000248C991E0;
  v12 = (_QWORD *)((char *)v2 + *(int *)(v0 + 24));
  *v12 = 0;
  v12[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v11, &demangling cache variable for type metadata for Locale?);
  outlined init with take of Grammar((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  outlined destroy of (Locale?, Locale?)((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

void static Prompt.SpecialToken.Chat.response(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_1_9(v2, v6);
  v3 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_9_6(v0, v4, v5, v3);
  OUTLINED_FUNCTION_2_7(0xD000000000000013);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.response.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for response, (uint64_t)static Prompt.SpecialToken.Chat.response, a1);
}

void one-time initialization function for user()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v11 - v4;
  v6 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v6, static Prompt.SpecialToken.Chat.user);
  v7 = (char *)__swift_project_value_buffer(v6, (uint64_t)static Prompt.SpecialToken.Chat.user);
  v8 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v8);
  _s10Foundation6LocaleVSgWOcTm_0((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for Locale?);
  v9 = (uint64_t)&v7[*(int *)(v6 + 20)];
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v8);
  strcpy(v7, "chat.role.user");
  v7[15] = -18;
  v10 = &v7[*(int *)(v6 + 24)];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  outlined assign with take of Locale?((uint64_t)v3, v9, &demangling cache variable for type metadata for Locale?);
  outlined destroy of (Locale?, Locale?)((uint64_t)v5, &demangling cache variable for type metadata for Locale?);
}

void static Prompt.SpecialToken.Chat.user(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_9(v1, v4);
  v2 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_70_2(v2);
  OUTLINED_FUNCTION_2_7(v3);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.user.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for user, (uint64_t)static Prompt.SpecialToken.Chat.user, a1);
}

void one-time initialization function for tool()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v11 - v4;
  v6 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v6, static Prompt.SpecialToken.Chat.tool);
  v7 = (char *)__swift_project_value_buffer(v6, (uint64_t)static Prompt.SpecialToken.Chat.tool);
  v8 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v8);
  _s10Foundation6LocaleVSgWOcTm_0((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for Locale?);
  v9 = (uint64_t)&v7[*(int *)(v6 + 20)];
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v8);
  strcpy(v7, "chat.role.tool");
  v7[15] = -18;
  v10 = &v7[*(int *)(v6 + 24)];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  outlined assign with take of Locale?((uint64_t)v3, v9, &demangling cache variable for type metadata for Locale?);
  outlined destroy of (Locale?, Locale?)((uint64_t)v5, &demangling cache variable for type metadata for Locale?);
}

void static Prompt.SpecialToken.Chat.tool(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_9(v1, v4);
  v2 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_70_2(v2);
  OUTLINED_FUNCTION_2_7(v3);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.tool.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for tool, (uint64_t)static Prompt.SpecialToken.Chat.tool, a1);
}

void one-time initialization function for turnEnd()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  OUTLINED_FUNCTION_6_1();
  v3 = type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_4_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_106_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_84_3();
  __swift_allocate_value_buffer(v3, static Prompt.SpecialToken.Chat.turnEnd);
  v7 = __swift_project_value_buffer(v3, (uint64_t)static Prompt.SpecialToken.Chat.turnEnd);
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_147_0(v1);
  v8 = OUTLINED_FUNCTION_169_0();
  _s10Foundation6LocaleVSgWOcTm_0(v8, v9, &demangling cache variable for type metadata for Locale?);
  v10 = (uint64_t)v0 + *(int *)(v3 + 20);
  OUTLINED_FUNCTION_147_0(v10);
  *v0 = 0xD000000000000016;
  v0[1] = 0x8000000248C99200;
  v11 = (_QWORD *)((char *)v0 + *(int *)(v3 + 24));
  *v11 = 0;
  v11[1] = 0;
  outlined assign with take of Locale?(v2, v10, &demangling cache variable for type metadata for Locale?);
  outlined init with take of Grammar((uint64_t)v0, v7, type metadata accessor for Prompt.SpecialToken);
  OUTLINED_FUNCTION_171_0();
  OUTLINED_FUNCTION_8_1();
}

void static Prompt.SpecialToken.Chat.turnEnd(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_1_9(v2, v6);
  v3 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_9_6(v0, v4, v5, v3);
  OUTLINED_FUNCTION_2_7(0xD000000000000016);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.turnEnd.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for turnEnd, (uint64_t)static Prompt.SpecialToken.Chat.turnEnd, a1);
}

void one-time initialization function for defaultInstructions()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (uint64_t *)((char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v13 - v7;
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.Chat.defaultInstructions);
  v9 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.Chat.defaultInstructions);
  v10 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v10);
  _s10Foundation6LocaleVSgWOcTm_0((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  v11 = (uint64_t)v2 + *(int *)(v0 + 20);
  __swift_storeEnumTagSinglePayload(v11, 1, 1, v10);
  *v2 = 0xD000000000000018;
  v2[1] = 0x8000000248C99220;
  v12 = (_QWORD *)((char *)v2 + *(int *)(v0 + 24));
  *v12 = 0;
  v12[1] = 0;
  outlined assign with take of Locale?((uint64_t)v6, v11, &demangling cache variable for type metadata for Locale?);
  outlined init with take of Grammar((uint64_t)v2, v9, type metadata accessor for Prompt.SpecialToken);
  outlined destroy of (Locale?, Locale?)((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
}

void static Prompt.SpecialToken.Chat.defaultInstructions(locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_119_3();
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_1_9(v2, v6);
  v3 = OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_9_6(v0, v4, v5, v3);
  OUTLINED_FUNCTION_2_7(0xD000000000000018);
  OUTLINED_FUNCTION_17_0();
}

void static Prompt.SpecialToken.Chat.defaultInstructions.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for defaultInstructions, (uint64_t)static Prompt.SpecialToken.Chat.defaultInstructions, a1);
}

uint64_t one-time initialization function for actionStart()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.actionStart);
  v1 = (_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.actionStart);
  v2 = (uint64_t)v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *v1 = 0xD000000000000014;
  v1[1] = 0x8000000248C99260;
  v5 = (_QWORD *)((char *)v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.ToolUse.actionStart.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for actionStart, (uint64_t)static Prompt.SpecialToken.ToolUse.actionStart, a1);
}

uint64_t one-time initialization function for actionEnd()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.actionEnd);
  v1 = (_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.actionEnd);
  v2 = (uint64_t)v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  *v1 = 0xD000000000000012;
  v1[1] = 0x8000000248C99240;
  v5 = (_QWORD *)((char *)v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.ToolUse.actionEnd.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for actionEnd, (uint64_t)static Prompt.SpecialToken.ToolUse.actionEnd, a1);
}

uint64_t one-time initialization function for tool()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v0 = type metadata accessor for Prompt.SpecialToken(0);
  __swift_allocate_value_buffer(v0, static Prompt.SpecialToken.ToolUse.tool);
  v1 = __swift_project_value_buffer(v0, (uint64_t)static Prompt.SpecialToken.ToolUse.tool);
  v2 = v1 + *(int *)(v0 + 20);
  v3 = type metadata accessor for Locale();
  result = __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
  strcpy((char *)v1, "tooluse.tool");
  *(_BYTE *)(v1 + 13) = 0;
  *(_WORD *)(v1 + 14) = -5120;
  v5 = (_QWORD *)(v1 + *(int *)(v0 + 24));
  *v5 = 0;
  v5[1] = 0;
  return result;
}

void static Prompt.SpecialToken.ToolUse.tool.getter(uint64_t a1@<X8>)
{
  static Prompt.SpecialToken.endPrompt.getter(&one-time initialization token for tool, (uint64_t)static Prompt.SpecialToken.ToolUse.tool, a1);
}

void static Prompt.SpecialToken.endPrompt.getter(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_180();
  v6 = __swift_project_value_buffer(v5, a2);
  _s19TokenGenerationCore7GrammarVWOcTm_0(v6, a3, type metadata accessor for Prompt.SpecialToken);
  OUTLINED_FUNCTION_99();
}

uint64_t static Prompt.SpecialToken.ToolUse.toolCall(id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6 = type metadata accessor for Prompt.SpecialToken(0);
  v7 = a3 + *(int *)(v6 + 20);
  v8 = OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_9_6(v7, v9, v10, v8);
  strcpy((char *)a3, "tooluse.tool");
  *(_BYTE *)(a3 + 13) = 0;
  *(_WORD *)(a3 + 14) = -5120;
  v11 = (_QWORD *)(a3 + *(int *)(v6 + 24));
  *v11 = a1;
  v11[1] = a2;
  return swift_bridgeObjectRetain();
}

void Prompt.SpecialToken.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t);

  OUTLINED_FUNCTION_6_1();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_18_5();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_59();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_62_0();
  v6 = v5 - v4;
  OUTLINED_FUNCTION_107_0();
  OUTLINED_FUNCTION_207();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_7();
  v7 = type metadata accessor for Prompt.SpecialToken(0);
  _s10Foundation6LocaleVSgWOcTm_0(v1 + *(int *)(v7 + 20), v6, &demangling cache variable for type metadata for Locale?);
  if (__swift_getEnumTagSinglePayload(v6, 1, v2) == 1)
  {
    OUTLINED_FUNCTION_114_0(0);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_170_0();
    v9(v8);
    OUTLINED_FUNCTION_114_0(1u);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
    dispatch thunk of Hashable.hash(into:)();
    v10 = OUTLINED_FUNCTION_173_0();
    v11(v10);
  }
  if (*(_QWORD *)(v1 + *(int *)(v7 + 24) + 8))
  {
    OUTLINED_FUNCTION_114_0(1u);
    OUTLINED_FUNCTION_58_0();
    OUTLINED_FUNCTION_113_3();
    OUTLINED_FUNCTION_25_0();
  }
  else
  {
    OUTLINED_FUNCTION_114_0(0);
  }
  OUTLINED_FUNCTION_8_1();
}

void static Prompt.SpecialToken.== infix(_:_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v34[12];
  int v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_126_3();
  v5 = OUTLINED_FUNCTION_18_5();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_138_1();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_106_2();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v34[-v12];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v34[-v14];
  v16 = *v1 == *v0 && v1[1] == v0[1];
  if (!v16)
  {
    OUTLINED_FUNCTION_41_0();
    OUTLINED_FUNCTION_134_3();
    if ((v17 & 1) == 0)
      goto LABEL_23;
  }
  v36 = v4;
  v37 = v6;
  v18 = OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_151_0((uint64_t)v1 + *(int *)(v18 + 20), (uint64_t)v15);
  OUTLINED_FUNCTION_151_0((uint64_t)v0 + *(int *)(v18 + 20), (uint64_t)v13);
  v19 = v2 + *(int *)(v7 + 48);
  OUTLINED_FUNCTION_151_0((uint64_t)v15, v2);
  OUTLINED_FUNCTION_151_0((uint64_t)v13, v19);
  OUTLINED_FUNCTION_27_4(v2);
  if (!v16)
  {
    _s10Foundation6LocaleVSgWOcTm_0(v2, v3, &demangling cache variable for type metadata for Locale?);
    OUTLINED_FUNCTION_27_4(v19);
    if (!v20)
    {
      OUTLINED_FUNCTION_174_0(v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
      OUTLINED_FUNCTION_175_0();
      v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(uint64_t))(v37 + 8);
      v24 = OUTLINED_FUNCTION_170_0();
      v23(v24);
      OUTLINED_FUNCTION_97_1((uint64_t)v13);
      OUTLINED_FUNCTION_97_1((uint64_t)v15);
      v25 = OUTLINED_FUNCTION_133_1();
      v23(v25);
      v26 = OUTLINED_FUNCTION_117_0();
      outlined destroy of (Locale?, Locale?)(v26, v27);
      if ((v35 & 1) == 0)
        goto LABEL_23;
      goto LABEL_16;
    }
    outlined destroy of (Locale?, Locale?)((uint64_t)v13, &demangling cache variable for type metadata for Locale?);
    outlined destroy of (Locale?, Locale?)((uint64_t)v15, &demangling cache variable for type metadata for Locale?);
    v21 = OUTLINED_FUNCTION_133_1();
    v22(v21);
LABEL_14:
    outlined destroy of (Locale?, Locale?)(v2, &demangling cache variable for type metadata for (Locale?, Locale?));
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_97_1((uint64_t)v13);
  OUTLINED_FUNCTION_97_1((uint64_t)v15);
  OUTLINED_FUNCTION_27_4(v19);
  if (!v16)
    goto LABEL_14;
  outlined destroy of (Locale?, Locale?)(v2, &demangling cache variable for type metadata for Locale?);
LABEL_16:
  v28 = *(int *)(v18 + 24);
  v29 = (_QWORD *)((char *)v1 + v28);
  v30 = *(_QWORD *)((char *)v1 + v28 + 8);
  v31 = (_QWORD *)((char *)v0 + v28);
  v32 = v31[1];
  if (v30 && v32 && (*v29 != *v31 || v30 != v32))
    OUTLINED_FUNCTION_41_0();
LABEL_23:
  OUTLINED_FUNCTION_8_1();
}

void Prompt.SpecialToken.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.SpecialToken()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_184();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

void Prompt.Delimiter.token.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  _s19TokenGenerationCore7GrammarVWOcTm_0(v1, a1, type metadata accessor for Prompt.SpecialToken);
}

void Prompt.Delimiter.token.setter(uint64_t a1)
{
  uint64_t v1;

  outlined assign with take of Symbol(a1, v1, type metadata accessor for Prompt.SpecialToken);
}

uint64_t (*Prompt.Delimiter.token.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Delimiter.position.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_150_0();
  return *(_QWORD *)(v0 + v1);
}

uint64_t type metadata accessor for Prompt.Delimiter(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Delimiter);
}

void Prompt.Delimiter.position.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_205() + 20)) = v0;
  OUTLINED_FUNCTION_23();
}

uint64_t (*Prompt.Delimiter.position.modify())(void)
{
  OUTLINED_FUNCTION_150_0();
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Delimiter.priority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for Prompt.Delimiter(0) + 24));
}

void Prompt.Delimiter.priority.setter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_205() + 24)) = v0;
  OUTLINED_FUNCTION_23();
}

uint64_t (*Prompt.Delimiter.priority.modify())(void)
{
  type metadata accessor for Prompt.Delimiter(0);
  return AutomationJSON.responses.modify;
}

void Prompt.Delimiter.init(token:position:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  outlined init with take of Grammar(a1, a3, type metadata accessor for Prompt.SpecialToken);
  v5 = type metadata accessor for Prompt.Delimiter(0);
  *(_QWORD *)(a3 + *(int *)(v5 + 20)) = a2;
  *(_QWORD *)(a3 + *(int *)(v5 + 24)) = -1;
  OUTLINED_FUNCTION_23();
}

void Prompt.Delimiter.init(token:position:priority:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  outlined init with take of Grammar(a1, a4, type metadata accessor for Prompt.SpecialToken);
  v7 = OUTLINED_FUNCTION_150_0();
  *(_QWORD *)(a4 + v8) = a2;
  *(_QWORD *)(a4 + *(int *)(v7 + 24)) = a3;
  OUTLINED_FUNCTION_99();
}

void Prompt.Delimiter.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  Prompt.SpecialToken.hash(into:)();
  v1 = type metadata accessor for Prompt.Delimiter(0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
  OUTLINED_FUNCTION_99();
}

BOOL static Prompt.Delimiter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;

  static Prompt.SpecialToken.== infix(_:_:)();
  if ((v4 & 1) != 0 && (v5 = OUTLINED_FUNCTION_150_0(), *(_QWORD *)(a1 + v6) == *(_QWORD *)(a2 + v6)))
    return *(_QWORD *)(a1 + *(int *)(v5 + 24)) == *(_QWORD *)(a2 + *(int *)(v5 + 24));
  else
    return 0;
}

void Prompt.Delimiter.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_184();
  v1 = type metadata accessor for Prompt.Delimiter(0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Delimiter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Hasher.init(_seed:)();
  Prompt.SpecialToken.hash(into:)();
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 20)));
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

uint64_t Prompt.Attachment.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  return outlined copy of Data._Representation(v2, v3);
}

void Prompt.Attachment.content.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  outlined consume of Data._Representation(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_BYTE *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 16) = v4;
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.Attachment.content.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Attachment.position.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t Prompt.Attachment.position.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*Prompt.Attachment.position.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Attachment.priority.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t Prompt.Attachment.priority.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*Prompt.Attachment.priority.modify())(void)
{
  return AutomationJSON.responses.modify;
}

__n128 Prompt.Attachment.init(content:position:priority:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;

  *(_BYTE *)a4 = *(_BYTE *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  return result;
}

void Prompt.Attachment.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  unint64_t v5;

  OUTLINED_FUNCTION_113_0();
  v1 = *v0;
  v2 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  OUTLINED_FUNCTION_16_0(0);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_154();
  v4 = OUTLINED_FUNCTION_117_0();
  outlined consume of Data._Representation(v4, v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  OUTLINED_FUNCTION_23_0();
}

void static Prompt.Attachment.== infix(_:_:)()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;

  OUTLINED_FUNCTION_6_1();
  if (*v0 == *v1)
  {
    OUTLINED_FUNCTION_88_3(*((_QWORD *)v0 + 1));
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_111_2();
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t static Prompt.AttachmentContent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    OUTLINED_FUNCTION_88_3(*((_QWORD *)a1 + 1));
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_111_2();
  }
  return 0;
}

Swift::Int Prompt.Attachment.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  char v13;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_139(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_114_3();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return OUTLINED_FUNCTION_86();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Attachment()
{
  _QWORD *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;

  v1 = *(unsigned __int8 *)v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Prompt.AttachmentContent.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  OUTLINED_FUNCTION_16_0(0);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_154();
  v2 = OUTLINED_FUNCTION_117_0();
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t static Prompt.ImageAttachment.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    JUMPOUT(0x2495A77ACLL);
  return 0;
}

void Prompt.AttachmentContent.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_139(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_114_3();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.AttachmentContent()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

void Prompt.ImageAttachment.format.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Prompt.ImageAttachment.format.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Prompt.ImageAttachment.format.modify())(void)
{
  return AutomationJSON.responses.modify;
}

void Prompt.ImageAttachment.data.getter()
{
  uint64_t v0;
  unint64_t v1;

  v0 = OUTLINED_FUNCTION_27();
  outlined copy of Data._Representation(v0, v1);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.ImageAttachment.data.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_126_3();
  outlined consume of Data._Representation(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v0;
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.ImageAttachment.data.modify())(void)
{
  return AutomationJSON.responses.modify;
}

_BYTE *Prompt.ImageAttachment.init(format:data:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_BYTE *)a4 = *result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

BOOL static Prompt.ImageAttachment.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Prompt.ImageAttachment.Format.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  OUTLINED_FUNCTION_23();
}

void Prompt.ImageAttachment.Format.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_139(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_34();
}

uint64_t Prompt.ImageAttachment.hash(into:)()
{
  unsigned __int8 *v0;
  uint64_t v1;
  unint64_t v2;

  OUTLINED_FUNCTION_16_0(*v0);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_69_2();
  v1 = OUTLINED_FUNCTION_146_0();
  return outlined consume of Data._Representation(v1, v2);
}

void Prompt.ImageAttachment.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_139(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_52_1();
  OUTLINED_FUNCTION_69_2();
  OUTLINED_FUNCTION_114_3();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ImageAttachment()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t static Prompt.+= infix(_:_:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_126_3();
  MEMORY[0x2495A7CEC](0);
  OUTLINED_FUNCTION_116_3();
  OUTLINED_FUNCTION_115_3();
  Prompt.StringInterpolation.appendInterpolation(token:)(v0);
  static Prompt.+= infix(_:_:)();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_123();
  return OUTLINED_FUNCTION_60_3();
}

{
  MEMORY[0x2495A7CEC](0);
  OUTLINED_FUNCTION_116_3();
  OUTLINED_FUNCTION_115_3();
  Prompt.StringInterpolation.appendInterpolation(image:)();
  static Prompt.+= infix(_:_:)();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_25_0();
  return swift_bridgeObjectRelease();
}

{
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_197();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_60_3();
}

TokenGeneration::Prompt::StringInterpolation __swiftcall Prompt.StringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  TokenGeneration::Prompt::StringInterpolation result;

  *v2 = 0;
  v2[1] = 0xE000000000000000;
  v4 = MEMORY[0x24BEE4AF8];
  v2[2] = MEMORY[0x24BEE4AF8];
  v2[3] = v4;
  MEMORY[0x2495A7CEC](literalCapacity);
  specialized Array.reserveCapacity(_:)(interpolationCount, specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  specialized Array.reserveCapacity(_:)(interpolationCount, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
  OUTLINED_FUNCTION_99();
  result.attachments._rawValue = v8;
  result.delimiters._rawValue = v7;
  result.result._object = v6;
  result.result._countAndFlagsBits = v5;
  return result;
}

void Prompt.StringInterpolation.appendInterpolation(token:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Prompt.Delimiter(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_63_0();
  _s19TokenGenerationCore7GrammarVWOcTm_0(a1, v1, type metadata accessor for Prompt.SpecialToken);
  v6 = String.count.getter();
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v9 = (uint64_t *)(v2 + 16);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = __OFADD__(v10, v11);
  v13 = v10 + v11;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + *(int *)(v4 + 20)) = v6;
    *(_QWORD *)(v1 + *(int *)(v4 + 24)) = v13;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v14 = *(_QWORD *)(*v9 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v15 = *v9;
    *(_QWORD *)(v15 + 16) = v14 + 1;
    _s19TokenGenerationCore7GrammarVWOcTm_0(v1, v15+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, type metadata accessor for Prompt.Delimiter);
    *v9 = v15;
    outlined destroy of Grammar(v1, type metadata accessor for Prompt.Delimiter);
    OUTLINED_FUNCTION_17_0();
  }
}

TokenGeneration::Prompt __swiftcall Prompt.init(stringInterpolation:)(TokenGeneration::Prompt stringInterpolation)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(stringInterpolation.string._countAndFlagsBits + 24);
  *(_QWORD *)v1 = *(_QWORD *)stringInterpolation.string._countAndFlagsBits;
  *(_OWORD *)(v1 + 8) = *(_OWORD *)(stringInterpolation.string._countAndFlagsBits + 8);
  *(_QWORD *)(v1 + 24) = v2;
  return stringInterpolation;
}

void static Prompt.+= infix(_:_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  Swift::String v42;
  _QWORD v43[4];
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v4 = v3;
  v5 = type metadata accessor for Prompt.Delimiter(0);
  OUTLINED_FUNCTION_79_2();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v43 - v10;
  v12 = *v2;
  v13 = (void *)v2[1];
  v14 = v2[2];
  v47 = v2[3];
  v15 = String.count.getter();
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
  v17 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  v49 = v16 + v17;
  v50 = v15;
  if (!__OFADD__(v16, v17))
  {
    v44 = v13;
    v45 = v12;
    v46 = v4;
    v18 = *(_QWORD *)(v14 + 16);
    v43[3] = v4 + 24;
    if (v18)
    {
      v43[2] = v4 + 16;
      v51 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_120_0();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v19 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
      v43[1] = v14;
      v20 = v14 + v19;
      v21 = *(_QWORD *)(v0 + 72);
      v48 = v19;
      while (1)
      {
        _s19TokenGenerationCore7GrammarVWOcTm_0(v20, (uint64_t)v9, type metadata accessor for Prompt.Delimiter);
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, (uint64_t)v11, type metadata accessor for Prompt.SpecialToken);
        v22 = *(int *)(v5 + 20);
        v23 = *(_QWORD *)&v9[v22];
        v24 = __OFADD__(v23, v50);
        v25 = v23 + v50;
        if (v24)
          break;
        v26 = *(_QWORD *)&v9[*(int *)(v5 + 24)];
        v24 = __OFADD__(v26, v49);
        v27 = v26 + v49;
        if (v24)
          goto LABEL_22;
        *(_QWORD *)&v11[v22] = v25;
        *(_QWORD *)&v11[*(int *)(v5 + 24)] = v27;
        outlined destroy of Grammar((uint64_t)v9, type metadata accessor for Prompt.Delimiter);
        v28 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v19 = v48;
          v28 = v51;
        }
        v29 = *(_QWORD *)(v28 + 16);
        if (v29 >= *(_QWORD *)(v28 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v19 = v48;
          v28 = v51;
        }
        *(_QWORD *)(v28 + 16) = v29 + 1;
        outlined init with take of Grammar((uint64_t)v11, v28 + v19 + v29 * v21, type metadata accessor for Prompt.Delimiter);
        v20 += v21;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
    }
    else
    {
LABEL_12:
      specialized Array.append<A>(contentsOf:)();
      v30 = v47;
      v31 = *(_QWORD *)(v47 + 16);
      if (!v31)
      {
LABEL_20:
        specialized Array.append<A>(contentsOf:)();
        v42._object = v44;
        v42._countAndFlagsBits = v45;
        String.append(_:)(v42);
        OUTLINED_FUNCTION_8_1();
        return;
      }
      v51 = MEMORY[0x24BEE4AF8];
      OUTLINED_FUNCTION_58_0();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v32 = v51;
      v33 = (_QWORD *)(v30 + 64);
      while (1)
      {
        v34 = *(v33 - 1);
        v35 = v34 + v50;
        if (__OFADD__(v34, v50))
          break;
        v36 = *v33 + v49;
        if (__OFADD__(*v33, v49))
          goto LABEL_24;
        v37 = *((_BYTE *)v33 - 32);
        v38 = *(v33 - 3);
        v39 = *(v33 - 2);
        OUTLINED_FUNCTION_52_1();
        v51 = v32;
        v40 = *(_QWORD *)(v32 + 16);
        if (v40 >= *(_QWORD *)(v32 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v32 = v51;
        }
        *(_QWORD *)(v32 + 16) = v40 + 1;
        v41 = v32 + 40 * v40;
        *(_BYTE *)(v41 + 32) = v37;
        *(_QWORD *)(v41 + 40) = v38;
        *(_QWORD *)(v41 + 48) = v39;
        *(_QWORD *)(v41 + 56) = v35;
        *(_QWORD *)(v41 + 64) = v36;
        v33 += 5;
        if (!--v31)
        {
          swift_bridgeObjectRelease();
          goto LABEL_20;
        }
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
  }
  __break(1u);
}

void Prompt.StringInterpolation.appendInterpolation(image:)()
{
  uint64_t v0;
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(BOOL);
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_113_0();
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v4 = *((_QWORD *)v1 + 2);
  OUTLINED_FUNCTION_88_3(v3);
  OUTLINED_FUNCTION_117_0();
  v5 = String.count.getter();
  v7 = *(_QWORD *)(v0 + 24);
  v6 = (uint64_t *)(v0 + 24);
  v8 = *(_QWORD *)(*(v6 - 1) + 16);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
  }
  else
  {
    v11 = v5;
    OUTLINED_FUNCTION_88_3(v3);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v12 = *(_QWORD *)(*v6 + 16);
    v13 = OUTLINED_FUNCTION_175_0();
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13, v14);
    v15 = *v6;
    *(_QWORD *)(v15 + 16) = v12 + 1;
    v16 = v15 + 40 * v12;
    *(_BYTE *)(v16 + 32) = v2;
    *(_QWORD *)(v16 + 40) = v3;
    *(_QWORD *)(v16 + 48) = v4;
    *(_QWORD *)(v16 + 56) = v11;
    *(_QWORD *)(v16 + 64) = v10;
    OUTLINED_FUNCTION_183(v3);
    *v6 = v15;
    OUTLINED_FUNCTION_23_0();
  }
}

void static Prompt.+ infix(_:_:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_58_0();
  static Prompt.+= infix(_:_:)();
}

uint64_t static Prompt.+ infix(_:_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_197();
  OUTLINED_FUNCTION_40_0();
  return swift_bridgeObjectRelease();
}

void Prompt.string.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.string.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_127_3();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.string.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.delimiters.getter()
{
  return swift_bridgeObjectRetain();
}

void Prompt.delimiters.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*Prompt.delimiters.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.attachments.getter()
{
  return swift_bridgeObjectRetain();
}

void Prompt.attachments.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  OUTLINED_FUNCTION_23();
}

uint64_t (*Prompt.attachments.modify())(void)
{
  return AutomationJSON.responses.modify;
}

void Prompt.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_6_1();
  v35 = type metadata accessor for Prompt.Delimiter(0);
  v2 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_59();
  v3 = v0[1];
  v4 = v0[2];
  v5 = v0[3];
  v39 = *v0;
  v40 = v3;
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
  {
    v38 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_58_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_65_0();
    v8 = v4 + v7;
    v34 = *(_QWORD *)(v2 + 72);
    do
    {
      _s19TokenGenerationCore7GrammarVWOcTm_0(v8, v1, type metadata accessor for Prompt.Delimiter);
      v9 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 24));
      v10 = v9[1];
      if (v10)
      {
        v11 = *v9;
        String.append(_:)(*(Swift::String *)(&v10 - 1));
        v13 = 45;
        v12 = (void *)0xE100000000000000;
      }
      else
      {
        v13 = 0;
        v12 = (void *)0xE000000000000000;
      }
      OUTLINED_FUNCTION_206();
      v36 = v14;
      v37 = 0xE800000000000000;
      OUTLINED_FUNCTION_152_0();
      v15._countAndFlagsBits = OUTLINED_FUNCTION_207();
      String.append(_:)(v15);
      OUTLINED_FUNCTION_88();
      v16._countAndFlagsBits = v13;
      v16._object = v12;
      String.append(_:)(v16);
      OUTLINED_FUNCTION_25_0();
      OUTLINED_FUNCTION_202();
      v17 = v36;
      v18 = *(_QWORD *)(v1 + *(int *)(v35 + 20));
      v19 = *(_QWORD *)(v1 + *(int *)(v35 + 24));
      outlined destroy of Grammar(v1, type metadata accessor for Prompt.Delimiter);
      v20 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_195();
        v20 = v38;
      }
      v22 = *(_QWORD *)(v20 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      if (v22 >= v21 >> 1)
      {
        OUTLINED_FUNCTION_80_1(v21);
        OUTLINED_FUNCTION_195();
        v20 = v38;
      }
      *(_QWORD *)(v20 + 16) = v22 + 1;
      v23 = (_QWORD *)(v20 + 32 * v22);
      v23[4] = v17;
      v23[5] = 0xE800000000000000;
      v23[6] = v18;
      v23[7] = v19;
      v8 += v34;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v20 = MEMORY[0x24BEE4AF8];
  }
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_152_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v24 = *(_QWORD *)(v5 + 48);
    v25 = OUTLINED_FUNCTION_161_0();
    outlined copy of Data._Representation(v25, v26);
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    v36 = 0x3A6567616D693C3CLL;
    v37 = 0xE800000000000000;
    v27._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v27);
    OUTLINED_FUNCTION_15_1();
    v28._countAndFlagsBits = 58;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    __asm { BR              X9 }
  }
  v36 = v20;
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_165();
  specialized MutableCollection<>.sort(by:)(&v36);
  OUTLINED_FUNCTION_15_1();
  v29 = v36;
  v30 = *(_QWORD *)(v36 + 16);
  if (v30)
  {
    v31 = v36 + 32 * v30 + 16;
    do
    {
      if (v30 > *(_QWORD *)(v29 + 16))
      {
        __break(1u);
        JUMPOUT(0x248C2D4C8);
      }
      --v30;
      v33 = *(_QWORD *)(v31 - 16);
      v32 = *(_QWORD *)(v31 - 8);
      v31 -= 32;
      OUTLINED_FUNCTION_38_0();
      OUTLINED_FUNCTION_152_0();
      String.index(_:offsetBy:)();
      OUTLINED_FUNCTION_88();
      v36 = v33;
      v37 = v32;
      lazy protocol witness table accessor for type String and conformance String();
      String.insert<A>(contentsOf:at:)();
      OUTLINED_FUNCTION_37_0();
    }
    while (v30);
  }
  swift_release();
  OUTLINED_FUNCTION_8_1();
}

TokenGeneration::Prompt __swiftcall Prompt.init(string:delimiters:)(Swift::String string, Swift::OpaquePointer delimiters)
{
  uint64_t v2;
  uint64_t v3;
  TokenGeneration::Prompt result;

  *(Swift::String *)v2 = string;
  v3 = MEMORY[0x24BEE4AF8];
  *(Swift::OpaquePointer *)(v2 + 16) = delimiters;
  *(_QWORD *)(v2 + 24) = v3;
  result.string = string;
  result.delimiters = delimiters;
  return result;
}

TokenGeneration::Prompt __swiftcall Prompt.init(stringLiteral:)(Swift::String stringLiteral)
{
  Swift::String *v1;
  void *v2;
  TokenGeneration::Prompt result;

  *v1 = stringLiteral;
  v2 = (void *)MEMORY[0x24BEE4AF8];
  v1[1]._countAndFlagsBits = MEMORY[0x24BEE4AF8];
  v1[1]._object = v2;
  result.string = stringLiteral;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Prompt.render(tokenTable:)(Swift::OpaquePointer tokenTable)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_2();
  v6 = v5;
  v25 = type metadata accessor for Prompt.Delimiter(0);
  OUTLINED_FUNCTION_79_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5();
  v8 = type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_138_1();
  v10 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v10 + 16))
  {
    OUTLINED_FUNCTION_107_0();
    OUTLINED_FUNCTION_58_0();
    v11 = v10;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>);
    v12 = OUTLINED_FUNCTION_64_0();
    *(_OWORD *)(v12 + 16) = xmmword_248C911B0;
    v26 = v12;
    v13 = v12 + v1;
    v14 = one-time initialization token for endPrompt;
    OUTLINED_FUNCTION_107_0();
    if (v14 != -1)
      swift_once();
    v15 = __swift_project_value_buffer(v8, (uint64_t)static Prompt.SpecialToken.endPrompt);
    _s19TokenGenerationCore7GrammarVWOcTm_0(v15, v4, type metadata accessor for Prompt.SpecialToken);
    OUTLINED_FUNCTION_208();
    v16 = String.count.getter();
    outlined init with take of Grammar(v4, v13, type metadata accessor for Prompt.SpecialToken);
    *(_QWORD *)(v13 + *(int *)(v25 + 20)) = v16;
    *(_QWORD *)(v13 + *(int *)(v25 + 24)) = 0;
    v11 = v26;
  }
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v11 + 16);
  if (v17)
  {
    v24 = v6;
    OUTLINED_FUNCTION_65_0();
    v27 = v11 + v18;
    while (v17 <= *(_QWORD *)(v11 + 16))
    {
      --v17;
      _s19TokenGenerationCore7GrammarVWOcTm_0(v27 + *(_QWORD *)(v3 + 72) * v17, v2, type metadata accessor for Prompt.Delimiter);
      if (!*(_QWORD *)(v6 + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v2), (v19 & 1) == 0))
      {
        OUTLINED_FUNCTION_118();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_149_1();
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
        OUTLINED_FUNCTION_50_2();
        _s19TokenGenerationCore7GrammarVWOcTm_0(v2, v20, type metadata accessor for Prompt.SpecialToken);
        OUTLINED_FUNCTION_135_1();
        swift_willThrow();
        outlined destroy of Grammar(v2, type metadata accessor for Prompt.Delimiter);
        goto LABEL_14;
      }
      OUTLINED_FUNCTION_165();
      OUTLINED_FUNCTION_4();
      String.index(_:offsetBy:)();
      OUTLINED_FUNCTION_123();
      lazy protocol witness table accessor for type String and conformance String();
      v6 = v24;
      String.insert<A>(contentsOf:at:)();
      outlined destroy of Grammar(v2, type metadata accessor for Prompt.Delimiter);
      OUTLINED_FUNCTION_15_1();
      if (!v17)
        goto LABEL_12;
    }
    __break(1u);
  }
LABEL_12:
  OUTLINED_FUNCTION_118();
LABEL_14:
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_0_0();
  result._object = v22;
  result._countAndFlagsBits = v21;
  return result;
}

void Prompt.renderPromptFragments(tokenTable:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_2();
  v2 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_63_0();
  type metadata accessor for Prompt.SpecialToken(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
  v4 = MEMORY[0x24BEE4AF8];
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_169_0();
  Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)();
  v6 = v5;
  OUTLINED_FUNCTION_88();
  if (!v1)
  {
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v19 = v4;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
      OUTLINED_FUNCTION_65_0();
      v9 = v6 + v8;
      v20 = *(_QWORD *)(v3 + 72);
      v10 = v19;
      do
      {
        _s19TokenGenerationCore7GrammarVWOcTm_0(v9, (uint64_t)v0, type metadata accessor for Prompt.RenderedPromptFragment);
        v11 = *v0;
        v12 = v0[1];
        OUTLINED_FUNCTION_60_2();
        v13 = OUTLINED_FUNCTION_208();
        outlined destroy of Grammar(v13, v14);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v19;
        }
        v16 = *(_QWORD *)(v10 + 16);
        v15 = *(_QWORD *)(v10 + 24);
        if (v16 >= v15 >> 1)
        {
          v18 = OUTLINED_FUNCTION_80_1(v15);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18, v16 + 1, 1);
          v10 = v19;
        }
        *(_QWORD *)(v10 + 16) = v16 + 1;
        v17 = v10 + 16 * v16;
        *(_QWORD *)(v17 + 32) = v11;
        *(_QWORD *)(v17 + 40) = v12;
        v9 += v20;
        --v7;
      }
      while (v7);
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_0_0();
}

void Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  OUTLINED_FUNCTION_2();
  v76 = v2;
  v6 = v5;
  v8 = v7;
  v9 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_35_0();
  v90 = v10;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_84_0();
  v89 = v12;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_84_0();
  v80 = v14;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v15);
  v79 = (uint64_t *)((char *)&v73 - v16);
  OUTLINED_FUNCTION_164();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_49();
  v91 = v18;
  v88 = type metadata accessor for Prompt.PromptFragment(0);
  v75 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  OUTLINED_FUNCTION_59();
  v19 = *v1;
  v83 = v1[1];
  v84 = v19;
  v20 = v1[2];
  v81 = v1[3];
  v82 = v20;
  if (one-time initialization token for prompt != -1)
    swift_once();
  v21 = OUTLINED_FUNCTION_23_2();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Log.prompt);
  OUTLINED_FUNCTION_88_0();
  v87 = v22;
  Logger.logObject.getter();
  v23 = OUTLINED_FUNCTION_204();
  v24 = OUTLINED_FUNCTION_130_2(v23);
  v77 = v8;
  if (v24)
  {
    v78 = v6;
    v25 = (uint8_t *)OUTLINED_FUNCTION_19_3();
    v92 = OUTLINED_FUNCTION_19_3();
    *(_DWORD *)v25 = 136315138;
    v74 = v25 + 4;
    type metadata accessor for Prompt.SpecialToken(0);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
    OUTLINED_FUNCTION_38_0();
    v26 = Dictionary.description.getter();
    swift_bridgeObjectRelease();
    v28 = OUTLINED_FUNCTION_203(v26, v27, &v92);
    OUTLINED_FUNCTION_188(v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_40_0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_248BE5000, v0, v4, "Token table: %s", v25, 0xCu);
    OUTLINED_FUNCTION_137_2();
    OUTLINED_FUNCTION_7_4();
  }

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_88_0();
  Logger.logObject.getter();
  v29 = OUTLINED_FUNCTION_204();
  if (OUTLINED_FUNCTION_38_3(v29))
  {
    v30 = (_DWORD *)OUTLINED_FUNCTION_19_3();
    v92 = OUTLINED_FUNCTION_19_3();
    *v30 = 136315138;
    v87 = (uint64_t)(v30 + 1);
    type metadata accessor for Prompt.SpecialToken(0);
    OUTLINED_FUNCTION_80_0();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
    Dictionary.description.getter();
    OUTLINED_FUNCTION_82();
    v31 = OUTLINED_FUNCTION_161_0();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v33);
    OUTLINED_FUNCTION_188(v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_118();
    OUTLINED_FUNCTION_117_3(&dword_248BE5000, v35, v36, "Localization override map: %s");
    OUTLINED_FUNCTION_137_2();
    OUTLINED_FUNCTION_7_4();
  }

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_77_2();
  v37 = v76;
  Prompt.promptFragments()(v38, v39, v40, v41, v42, v43, v44, v45, v73, (uint64_t)v74, v75, v76, v77, v78, (uint64_t)v79, v80, v81, v82, v83,
    v84);
  if (!v37)
  {
    v47 = *(_QWORD *)(v46 + 16);
    if (!v47)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v78 = v6;
    OUTLINED_FUNCTION_65_0();
    v76 = v48;
    v50 = v48 + v49;
    v51 = MEMORY[0x24BEE4AF8];
    v87 = *(_QWORD *)(v52 + 72);
    while (1)
    {
      v53 = OUTLINED_FUNCTION_175_0();
      _s19TokenGenerationCore7GrammarVWOcTm_0(v53, v54, type metadata accessor for Prompt.PromptFragment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of Grammar((uint64_t)v3, v91, type metadata accessor for Prompt.Delimiter);
        OUTLINED_FUNCTION_77_2();
        Prompt.renderDelimiter(delimiter:tokenTable:localizationOverrideMap:)();
        v56 = v55;
        v58 = v57;
        if (String.count.getter() <= 0)
        {
          outlined destroy of Grammar(v91, type metadata accessor for Prompt.Delimiter);
          OUTLINED_FUNCTION_123();
          goto LABEL_24;
        }
        v59 = v79;
        v60 = (uint64_t)v79 + *(int *)(v86 + 20);
        _s19TokenGenerationCore7GrammarVWOcTm_0(v91, v60, type metadata accessor for Prompt.SpecialToken);
        v61 = type metadata accessor for Prompt.SpecialToken(0);
        __swift_storeEnumTagSinglePayload(v60, 0, 1, v61);
        *v59 = v56;
        v59[1] = v58;
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v59, v80, type metadata accessor for Prompt.RenderedPromptFragment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v51 = OUTLINED_FUNCTION_71_2();
        if (*(_QWORD *)(v51 + 16) >= *(_QWORD *)(v51 + 24) >> 1)
          v51 = OUTLINED_FUNCTION_71_2();
        OUTLINED_FUNCTION_76_1();
        outlined init with take of Grammar(v80, v62, type metadata accessor for Prompt.RenderedPromptFragment);
        outlined destroy of Grammar((uint64_t)v79, type metadata accessor for Prompt.RenderedPromptFragment);
        v63 = v91;
        v64 = type metadata accessor for Prompt.Delimiter;
      }
      else
      {
        v65 = *v3;
        v66 = v3[1];
        v67 = v89;
        v68 = (uint64_t)v89 + *(int *)(v86 + 20);
        v69 = type metadata accessor for Prompt.SpecialToken(0);
        OUTLINED_FUNCTION_9_6(v68, v70, v71, v69);
        *v67 = v65;
        v67[1] = v66;
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v67, v90, type metadata accessor for Prompt.RenderedPromptFragment);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v51 = OUTLINED_FUNCTION_71_2();
        if (*(_QWORD *)(v51 + 16) >= *(_QWORD *)(v51 + 24) >> 1)
          v51 = OUTLINED_FUNCTION_71_2();
        OUTLINED_FUNCTION_76_1();
        outlined init with take of Grammar(v90, v72, type metadata accessor for Prompt.RenderedPromptFragment);
        v63 = (uint64_t)v89;
        v64 = type metadata accessor for Prompt.RenderedPromptFragment;
      }
      outlined destroy of Grammar(v63, v64);
LABEL_24:
      v50 += v87;
      if (!--v47)
        goto LABEL_25;
    }
  }
LABEL_8:
  OUTLINED_FUNCTION_0_0();
}

void Prompt.RenderedPromptFragment.text.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_127_3();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.RenderedPromptFragment.text.modify())(void)
{
  return AutomationJSON.responses.modify;
}

void Prompt.RenderedPromptFragment.specialToken.getter(uint64_t a1@<X8>)
{
  Prompt.SpecialToken.locale.getter(type metadata accessor for Prompt.RenderedPromptFragment, &demangling cache variable for type metadata for Prompt.SpecialToken?, a1);
}

void Prompt.SpecialToken.locale.getter(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a1(0);
  _s10Foundation6LocaleVSgWOcTm_0(v3 + *(int *)(v6 + 20), a3, a2);
  OUTLINED_FUNCTION_99();
}

void Prompt.RenderedPromptFragment.specialToken.setter(uint64_t a1)
{
  Prompt.SpecialToken.locale.setter(a1, type metadata accessor for Prompt.RenderedPromptFragment, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

void Prompt.SpecialToken.locale.setter(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;

  v6 = a2(0);
  outlined assign with take of Locale?(a1, v3 + *(int *)(v6 + 20), a3);
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.RenderedPromptFragment.specialToken.modify())(void)
{
  type metadata accessor for Prompt.RenderedPromptFragment(0);
  return AutomationJSON.responses.modify;
}

void static Prompt.RenderedPromptFragment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);

  OUTLINED_FUNCTION_6_1();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  v29 = v28;
  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_4_4();
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_63_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_57_1();
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&a9 - v36;
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_84_3();
  v38 = *v29 == *v27 && v29[1] == v27[1];
  if (v38 || (OUTLINED_FUNCTION_41_0(), OUTLINED_FUNCTION_134_3(), (v39 & 1) != 0))
  {
    v40 = type metadata accessor for Prompt.RenderedPromptFragment(0);
    OUTLINED_FUNCTION_142_2((uint64_t)v29 + *(int *)(v40 + 20), v23);
    OUTLINED_FUNCTION_142_2((uint64_t)v27 + *(int *)(v40 + 20), (uint64_t)v37);
    v41 = v20 + *(int *)(v31 + 48);
    v42 = OUTLINED_FUNCTION_132_2();
    OUTLINED_FUNCTION_142_2(v42, v43);
    OUTLINED_FUNCTION_142_2((uint64_t)v37, v41);
    OUTLINED_FUNCTION_27_4(v20);
    if (!v38)
    {
      _s10Foundation6LocaleVSgWOcTm_0(v20, v22, &demangling cache variable for type metadata for Prompt.SpecialToken?);
      OUTLINED_FUNCTION_27_4(v41);
      if (!v44)
      {
        outlined init with take of Grammar(v41, v21, type metadata accessor for Prompt.SpecialToken);
        static Prompt.SpecialToken.== infix(_:_:)();
        OUTLINED_FUNCTION_192();
        OUTLINED_FUNCTION_110_3((uint64_t)v37);
        OUTLINED_FUNCTION_110_3(v23);
        v47 = OUTLINED_FUNCTION_187();
        outlined destroy of Grammar(v47, v48);
        OUTLINED_FUNCTION_110_3(v20);
        goto LABEL_15;
      }
      v45 = OUTLINED_FUNCTION_133_1();
      outlined destroy of (Locale?, Locale?)(v45, v46);
      OUTLINED_FUNCTION_171_0();
      outlined destroy of Grammar(v22, type metadata accessor for Prompt.SpecialToken);
LABEL_14:
      outlined destroy of (Locale?, Locale?)(v20, &demangling cache variable for type metadata for (Prompt.SpecialToken?, Prompt.SpecialToken?));
      goto LABEL_15;
    }
    OUTLINED_FUNCTION_110_3((uint64_t)v37);
    OUTLINED_FUNCTION_110_3(v23);
    OUTLINED_FUNCTION_27_4(v41);
    if (!v38)
      goto LABEL_14;
    outlined destroy of (Locale?, Locale?)(v20, &demangling cache variable for type metadata for Prompt.SpecialToken?);
  }
LABEL_15:
  OUTLINED_FUNCTION_8_1();
}

void Prompt.renderDelimiter(delimiter:tokenTable:localizationOverrideMap:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  int v35;
  _BOOL4 v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  BOOL v73;
  uint64_t v74;
  void *v75;
  void *v76;
  char v77;
  uint64_t v78;
  os_log_type_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t);
  _QWORD *v87;
  uint64_t v88;
  os_log_type_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _QWORD *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  Swift::String v128;

  OUTLINED_FUNCTION_2();
  v114 = v1;
  v4 = v3;
  v116 = v5;
  v7 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_63_0();
  v9 = type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_35_0();
  v112 = v11;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v12);
  v119 = (char *)&v109 - v13;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_84_0();
  v115 = v15;
  OUTLINED_FUNCTION_27_0();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v109 - v18);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_84_3();
  v21 = *v7;
  v20 = v7[1];
  v23 = (uint64_t)v2 + *(int *)(v22 + 20);
  v118 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload(v23, 1, 1, v118);
  *v2 = v21;
  v2[1] = v20;
  v24 = (_QWORD *)((char *)v2 + *(int *)(v9 + 24));
  *v24 = 0;
  v24[1] = 0;
  v127 = v9;
  v25 = *(int *)(v9 + 20);
  v117 = v7;
  v26 = (uint64_t)v7 + v25;
  v27 = v116;
  _s10Foundation6LocaleVSgWOcTm_0(v26, v0, &demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_107_0();
  OUTLINED_FUNCTION_4();
  v113 = v4;
  OUTLINED_FUNCTION_175_0();
  v120 = v0;
  Prompt.getLocalizationOverrideValue(from:token:locale:)();
  v121 = v2;
  if (v29)
  {
    v30 = v28;
    v31 = v29;
    if (one-time initialization token for prompt != -1)
      swift_once();
    v32 = OUTLINED_FUNCTION_23_2();
    __swift_project_value_buffer(v32, (uint64_t)static Log.prompt);
    _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v2, (uint64_t)v19, type metadata accessor for Prompt.SpecialToken);
    OUTLINED_FUNCTION_88_0();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    v35 = v34;
    v36 = os_log_type_enabled(v33, v34);
    v37 = v119;
    if (v36)
    {
      v38 = OUTLINED_FUNCTION_19_3();
      v111 = OUTLINED_FUNCTION_19_3();
      *(_QWORD *)&v125 = v111;
      *(_DWORD *)v38 = 136315394;
      v109 = v38 + 4;
      v110 = v35;
      v40 = *v19;
      v39 = v19[1];
      OUTLINED_FUNCTION_4();
      *(_QWORD *)&v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v39, (uint64_t *)&v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_123();
      outlined destroy of Grammar((uint64_t)v19, type metadata accessor for Prompt.SpecialToken);
      *(_WORD *)(v38 + 12) = 2080;
      OUTLINED_FUNCTION_38_0();
      *(_QWORD *)&v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_248BE5000, v33, (os_log_type_t)v110, "Updating value of special token: %s to %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }
    outlined destroy of Grammar((uint64_t)v19, type metadata accessor for Prompt.SpecialToken);

    OUTLINED_FUNCTION_40_0();
    v41 = (uint64_t)v2;
    v42 = v115;
    OUTLINED_FUNCTION_145_1(v41, v115);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v125 = v27;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v31, v42, isUniquelyReferenced_nonNull_native);
    v27 = v125;
    swift_bridgeObjectRelease();
    v44 = OUTLINED_FUNCTION_132_2();
    outlined destroy of Grammar(v44, v45);
  }
  else
  {
    v37 = v119;
  }
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v27);
  v47 = v46;
  OUTLINED_FUNCTION_7();
  v48 = (uint64_t)v117;
  v50 = *v117;
  v49 = v117[1];
  OUTLINED_FUNCTION_9_6((uint64_t)v37 + *(int *)(v127 + 20), v51, v52, v118);
  *v37 = v50;
  v37[1] = v49;
  v53 = (_QWORD *)((char *)v37 + *(int *)(v127 + 24));
  *v53 = 0;
  v53[1] = 0;
  OUTLINED_FUNCTION_4();
  specialized Dictionary.subscript.getter((uint64_t)v37, v47, &v125);
  if (v126)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v125 = v124;
      *(_QWORD *)&v124 = 0x7D7D64697B7BLL;
      *((_QWORD *)&v124 + 1) = 0xE600000000000000;
      v54 = (uint64_t *)(v48 + *(int *)(v127 + 24));
      v55 = v54[1];
      if (v55)
      {
        v56 = *v54;
        v57 = v55;
      }
      else
      {
        v56 = 0;
        v57 = 0xE000000000000000;
      }
      v122 = v56;
      v123 = v57;
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_4();
      v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      v63 = v62;
      OUTLINED_FUNCTION_88();
      outlined destroy of Grammar((uint64_t)v37, type metadata accessor for Prompt.SpecialToken);
      OUTLINED_FUNCTION_15_1();
      OUTLINED_FUNCTION_82();
      if (one-time initialization token for localeInstruction != -1)
        swift_once();
      __swift_project_value_buffer(v127, (uint64_t)static Prompt.SpecialToken.localeInstruction);
      Prompt.getLocalizationOverrideValue(from:token:locale:)();
      if (!v65)
      {
        OUTLINED_FUNCTION_123_3(v64, &demangling cache variable for type metadata for Locale?);
        outlined destroy of Grammar((uint64_t)v121, type metadata accessor for Prompt.SpecialToken);
        goto LABEL_15;
      }
      v66 = v64;
      v67 = v65;
      if (one-time initialization token for localeInstructionInjectionLocation != -1)
        swift_once();
      __swift_project_value_buffer(v127, (uint64_t)static Prompt.SpecialToken.localeInstructionInjectionLocation);
      Prompt.getLocalizationOverrideValue(from:token:locale:)();
      if (!v69)
      {
        v85 = OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_123_3(v85, &demangling cache variable for type metadata for Locale?);
        v86 = type metadata accessor for Prompt.SpecialToken;
        v87 = v121;
        goto LABEL_56;
      }
      *(_QWORD *)&v125 = v68;
      *((_QWORD *)&v125 + 1) = v69;
      *(_QWORD *)&v124 = 58;
      *((_QWORD *)&v124 + 1) = 0xE100000000000000;
      v70 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
      v71 = (uint64_t)v70;
      if (v70[2])
      {
        v72 = v121;
        v73 = v70[4] == *v121 && v70[5] == v121[1];
        if (!v73 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_82();
          v96 = OUTLINED_FUNCTION_15_1();
          OUTLINED_FUNCTION_123_3(v96, &demangling cache variable for type metadata for Locale?);
          v86 = type metadata accessor for Prompt.SpecialToken;
          v87 = v72;
          goto LABEL_56;
        }
        v74 = specialized BidirectionalCollection.last.getter(v71);
        v76 = v75;
        OUTLINED_FUNCTION_123();
        if (v76)
        {
          v128._countAndFlagsBits = v74;
          v128._object = v76;
          v77 = Prompt.SpecialToken.LocaleInstructionPosition.init(rawValue:)(v128);
          if (v77 == 2)
          {
            OUTLINED_FUNCTION_15_1();
            OUTLINED_FUNCTION_7();
            if (one-time initialization token for prompt != -1)
              swift_once();
            v78 = OUTLINED_FUNCTION_23_2();
            __swift_project_value_buffer(v78, (uint64_t)static Log.prompt);
            OUTLINED_FUNCTION_80_0();
            Logger.logObject.getter();
            v79 = OUTLINED_FUNCTION_152_1();
            if (OUTLINED_FUNCTION_38_3(v79))
            {
              v80 = (_DWORD *)OUTLINED_FUNCTION_19_3();
              *(_QWORD *)&v125 = OUTLINED_FUNCTION_19_3();
              *v80 = 136446210;
              OUTLINED_FUNCTION_80_0();
              v81 = OUTLINED_FUNCTION_65_2();
              OUTLINED_FUNCTION_26_3(v81);
              OUTLINED_FUNCTION_103_2();
              v84 = "Invalid locale instruction injection location as position is not valid: %{public}s";
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          v97 = v77;
          OUTLINED_FUNCTION_82();
          v98 = v121;
          if (v97)
          {
            *(_QWORD *)&v125 = v61;
            *((_QWORD *)&v125 + 1) = v63;
            OUTLINED_FUNCTION_107_0();
            v99 = v66;
            v100 = v67;
          }
          else
          {
            *(_QWORD *)&v125 = v66;
            *((_QWORD *)&v125 + 1) = v67;
            OUTLINED_FUNCTION_165();
            v99 = v61;
            v100 = v63;
          }
          String.append(_:)(*(Swift::String *)&v99);
          OUTLINED_FUNCTION_15_1();
          OUTLINED_FUNCTION_7();
          v101 = v125;
          v102 = v112;
          if (one-time initialization token for prompt != -1)
            swift_once();
          v103 = OUTLINED_FUNCTION_23_2();
          __swift_project_value_buffer(v103, (uint64_t)static Log.prompt);
          _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v98, (uint64_t)v102, type metadata accessor for Prompt.SpecialToken);
          OUTLINED_FUNCTION_88_0();
          Logger.logObject.getter();
          v104 = OUTLINED_FUNCTION_204();
          if (OUTLINED_FUNCTION_130_2(v104))
          {
            v105 = OUTLINED_FUNCTION_19_3();
            *(_QWORD *)&v125 = OUTLINED_FUNCTION_19_3();
            *(_DWORD *)v105 = 136315394;
            v106 = *v102;
            v107 = v102[1];
            OUTLINED_FUNCTION_60_2();
            *(_QWORD *)&v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v125);
            OUTLINED_FUNCTION_182();
            OUTLINED_FUNCTION_26();
            OUTLINED_FUNCTION_172_0();
            *(_WORD *)(v105 + 12) = 2080;
            OUTLINED_FUNCTION_107_0();
            *(_QWORD *)&v124 = OUTLINED_FUNCTION_203(v101, v108, (uint64_t *)&v125);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_248BE5000, v67, (os_log_type_t)v66, "Value of special token: %s after adding locale instruction: %s", (uint8_t *)v105, 0x16u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_7_4();
          }
          OUTLINED_FUNCTION_40_0();

          outlined destroy of Grammar((uint64_t)v102, type metadata accessor for Prompt.SpecialToken);
          outlined destroy of (Locale?, Locale?)(v120, &demangling cache variable for type metadata for Locale?);
          v87 = (_QWORD *)OUTLINED_FUNCTION_132_2();
LABEL_56:
          outlined destroy of Grammar((uint64_t)v87, v86);
          goto LABEL_15;
        }
        OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_7();
        if (one-time initialization token for prompt != -1)
          swift_once();
        v92 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v92, (uint64_t)static Log.prompt);
        OUTLINED_FUNCTION_80_0();
        Logger.logObject.getter();
        v93 = OUTLINED_FUNCTION_152_1();
        if (OUTLINED_FUNCTION_38_3(v93))
        {
          v94 = (_DWORD *)OUTLINED_FUNCTION_19_3();
          *(_QWORD *)&v125 = OUTLINED_FUNCTION_19_3();
          *v94 = 136446210;
          OUTLINED_FUNCTION_80_0();
          v95 = OUTLINED_FUNCTION_65_2();
          OUTLINED_FUNCTION_26_3(v95);
          OUTLINED_FUNCTION_103_2();
          v84 = "Invalid locale instruction injection location as position is not provided: %{public}s";
LABEL_45:
          OUTLINED_FUNCTION_117_3(&dword_248BE5000, v82, v83, v84);
          OUTLINED_FUNCTION_137_2();
          OUTLINED_FUNCTION_7_4();
        }
      }
      else
      {
        OUTLINED_FUNCTION_123();
        OUTLINED_FUNCTION_15_1();
        OUTLINED_FUNCTION_7();
        if (one-time initialization token for prompt != -1)
          swift_once();
        v88 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v88, (uint64_t)static Log.prompt);
        OUTLINED_FUNCTION_80_0();
        Logger.logObject.getter();
        v89 = OUTLINED_FUNCTION_152_1();
        if (OUTLINED_FUNCTION_38_3(v89))
        {
          v90 = (_DWORD *)OUTLINED_FUNCTION_19_3();
          *(_QWORD *)&v125 = OUTLINED_FUNCTION_19_3();
          *v90 = 136446210;
          OUTLINED_FUNCTION_80_0();
          v91 = OUTLINED_FUNCTION_65_2();
          OUTLINED_FUNCTION_26_3(v91);
          OUTLINED_FUNCTION_103_2();
          v84 = "Invalid locale instruction injection location as token identifier not provided: %{public}s";
          goto LABEL_45;
        }
      }
LABEL_46:

      OUTLINED_FUNCTION_40_0();
      v60 = v121;
      OUTLINED_FUNCTION_149_1();
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
      OUTLINED_FUNCTION_50_2();
      swift_storeEnumTagMultiPayload();
      v59 = OUTLINED_FUNCTION_176_0();
      goto LABEL_14;
    }
  }
  else
  {
    outlined destroy of (Locale?, Locale?)((uint64_t)&v125, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_149_1();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
  swift_allocError();
  _s19TokenGenerationCore7GrammarVWOcTm_0(v48, v58, type metadata accessor for Prompt.SpecialToken);
  OUTLINED_FUNCTION_187();
  OUTLINED_FUNCTION_135_1();
  OUTLINED_FUNCTION_176_0();
  outlined destroy of Grammar((uint64_t)v37, type metadata accessor for Prompt.SpecialToken);
  v59 = OUTLINED_FUNCTION_15_1();
  v60 = v121;
LABEL_14:
  OUTLINED_FUNCTION_123_3(v59, &demangling cache variable for type metadata for Locale?);
  outlined destroy of Grammar((uint64_t)v60, type metadata accessor for Prompt.SpecialToken);
LABEL_15:
  OUTLINED_FUNCTION_0_0();
}

void Prompt.getLocalizationOverrideValue(from:token:locale:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  uint64_t v43;

  OUTLINED_FUNCTION_6_1();
  v2 = v1;
  v4 = v3;
  OUTLINED_FUNCTION_180();
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_59();
  v41 = type metadata accessor for Locale.Language();
  v6 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_62_0();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_62_0();
  v13 = v12 - v11;
  v14 = OUTLINED_FUNCTION_18_5();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_49();
  v17 = v16;
  if (*(_QWORD *)(v4 + 16))
  {
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v2);
    if ((v19 & 1) != 0)
    {
      v40 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v18);
      v20 = OUTLINED_FUNCTION_161_0();
      _s10Foundation6LocaleVSgWOcTm_0(v20, v21, v22);
      if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
      {
        outlined destroy of (Locale?, Locale?)(v13, &demangling cache variable for type metadata for Locale?);
        if (one-time initialization token for prompt != -1)
          swift_once();
        v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Log.prompt);
        _s19TokenGenerationCore7GrammarVWOcTm_0(v2, (uint64_t)v0, type metadata accessor for Prompt.SpecialToken);
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)OUTLINED_FUNCTION_19_3();
          v42[0] = OUTLINED_FUNCTION_19_3();
          *(_DWORD *)v26 = 136315138;
          v27 = *v0;
          v28 = v0[1];
          OUTLINED_FUNCTION_60_2();
          v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of Grammar((uint64_t)v0, type metadata accessor for Prompt.SpecialToken);
          _os_log_impl(&dword_248BE5000, v24, v25, "Locale is not provided hence could not find localization override for special token: %s", v26, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_7_4();
        }
        outlined destroy of Grammar((uint64_t)v0, type metadata accessor for Prompt.SpecialToken);

      }
      else
      {
        OUTLINED_FUNCTION_174_0(v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
        swift_bridgeObjectRetain_n();
        v43 = specialized Set.init<A>(_:)(v40);
        specialized Set._Variant.insert(_:)(v42, 28261, 0xE200000000000000);
        swift_bridgeObjectRelease();
        v29 = (void *)objc_opt_self();
        specialized _copyCollectionToContiguousArray<A>(_:)();
        OUTLINED_FUNCTION_123();
        isa = OUTLINED_FUNCTION_157_0().super.isa;
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_248C911B0;
        Locale.language.getter();
        v32 = Locale.Language.minimalIdentifier.getter();
        v34 = v33;
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v41);
        *(_QWORD *)(v31 + 32) = v32;
        *(_QWORD *)(v31 + 40) = v34;
        v35 = OUTLINED_FUNCTION_157_0().super.isa;
        OUTLINED_FUNCTION_118();
        v36 = objc_msgSend(v29, sel_preferredLocalizationsFromArray_forPreferences_, isa, v35, v14);

        OUTLINED_FUNCTION_132_2();
        v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(_QWORD *)(v37 + 16))
        {
          OUTLINED_FUNCTION_152_0();
          OUTLINED_FUNCTION_123();
          v38 = OUTLINED_FUNCTION_169_0();
          specialized Dictionary.subscript.getter(v38, v39, v40);
          OUTLINED_FUNCTION_88();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_193(*(uint64_t (**)(uint64_t, _QWORD))(v15 + 8));
        }
        else
        {
          OUTLINED_FUNCTION_123();
          OUTLINED_FUNCTION_193(*(uint64_t (**)(uint64_t, _QWORD))(v15 + 8));
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  OUTLINED_FUNCTION_8_1();
}

uint64_t static Prompt.averageCharactersPerToken.getter()
{
  return 3;
}

Swift::Int __swiftcall Prompt.overestimatedTokenCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  Swift::Int result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = String.count.getter();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = __OFADD__(v2 / 3, v3);
  result = v2 / 3 + v3;
  if (v4)
    __break(1u);
  else
    OUTLINED_FUNCTION_23();
  return result;
}

void Prompt.StringInterpolation.appendInterpolation(if:token:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(BOOL);
  uint64_t v18;

  OUTLINED_FUNCTION_113_0();
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for Prompt.Delimiter(0);
  OUTLINED_FUNCTION_79_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_4_4();
  if ((v6() & 1) == 0)
    goto LABEL_4;
  _s19TokenGenerationCore7GrammarVWOcTm_0(v4, v1, type metadata accessor for Prompt.SpecialToken);
  v9 = String.count.getter();
  v10 = (uint64_t *)(v0 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (!v13)
  {
    *(_QWORD *)(v1 + *(int *)(v7 + 20)) = v9;
    *(_QWORD *)(v1 + *(int *)(v7 + 24)) = v14;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v15 = *(_QWORD *)(*v10 + 16);
    v16 = OUTLINED_FUNCTION_173_0();
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16, v17);
    v18 = *v10;
    *(_QWORD *)(v18 + 16) = v15 + 1;
    _s19TokenGenerationCore7GrammarVWOcTm_0(v1, v18+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v15, type metadata accessor for Prompt.Delimiter);
    *v10 = v18;
    OUTLINED_FUNCTION_192();
LABEL_4:
    OUTLINED_FUNCTION_23_0();
    return;
  }
  __break(1u);
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance Prompt.StringInterpolation(Swift::String *a1)
{
  Prompt.StringInterpolation.appendInterpolation(_:)(*a1);
}

void Prompt.Rendering.originalPrompt.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.Rendering.renderedString.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

uint64_t Prompt.Rendering.segments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.tokenIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prompt.Rendering.source.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall Prompt.Rendering.init(segments:renderedString:originalPrompt:tokenIDs:)(TokenGeneration::Prompt::Rendering *__return_ptr retstr, Swift::OpaquePointer segments, Swift::String renderedString, Swift::String originalPrompt, Swift::OpaquePointer tokenIDs)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;

  OUTLINED_FUNCTION_6_1();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  if (one-time initialization token for prompt != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Log.prompt);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)OUTLINED_FUNCTION_19_3();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_248BE5000, v20, v21, "Using deprecated initialize: Prompt source will be bogus!", v22, 2u);
    OUTLINED_FUNCTION_7_4();
  }

  v23 = Dictionary.init(dictionaryLiteral:)();
  *v18 = v10;
  v18[1] = v8;
  v18[2] = v14;
  v18[3] = v12;
  v18[4] = v16;
  v18[5] = v6;
  v18[6] = v23;
  v18[7] = 0;
  v18[8] = 0xE000000000000000;
  v18[9] = 0;
  v18[10] = 0xE000000000000000;
  OUTLINED_FUNCTION_8_1();
}

void __swiftcall Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:)(TokenGeneration::Prompt::Rendering *__return_ptr retstr, TokenGeneration::Prompt::Rendering::Source source, Swift::OpaquePointer segments, Swift::String renderedString, Swift::String originalPrompt, Swift::OpaquePointer tokenIDs, Swift::OpaquePointer userInfo)
{
  Swift::String v7;
  uint64_t v8;
  void *v9;

  v7 = *(Swift::String *)source.identifier._countAndFlagsBits;
  v8 = *(_QWORD *)(source.identifier._countAndFlagsBits + 16);
  v9 = *(void **)(source.identifier._countAndFlagsBits + 24);
  retstr->originalPrompt._countAndFlagsBits = (uint64_t)segments._rawValue;
  retstr->originalPrompt._object = (void *)renderedString._countAndFlagsBits;
  retstr->renderedString._countAndFlagsBits = source.version._countAndFlagsBits;
  retstr->renderedString._object = source.version._object;
  retstr->segments._rawValue = source.identifier._object;
  retstr->tokenIDs._rawValue = renderedString._object;
  retstr->userInfo._rawValue = (void *)originalPrompt._countAndFlagsBits;
  retstr->source.identifier = v7;
  retstr->source.version._countAndFlagsBits = v8;
  retstr->source.version._object = v9;
}

uint64_t (*Prompt.Rendering.Source.identifier.modify())(void)
{
  return AutomationJSON.responses.modify;
}

void Prompt.Rendering.Source.version.getter()
{
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_23();
}

void Prompt.Rendering.Source.version.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_126_3();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_99();
}

uint64_t (*Prompt.Rendering.Source.version.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Prompt.Rendering.Source.hash(into:)()
{
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_209();
  OUTLINED_FUNCTION_144_0();
  return OUTLINED_FUNCTION_63_2();
}

void static Prompt.Rendering.Source.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  BOOL v10;

  v1 = OUTLINED_FUNCTION_143_1(a1);
  v4 = v3[2];
  v5 = v3[3];
  v6 = v2[2];
  v7 = v2[3];
  v8 = v1 == *v2 && v3[1] == v2[1];
  if ((v8 || (OUTLINED_FUNCTION_41_0(), OUTLINED_FUNCTION_134_3(), (v9 & 1) != 0))
    && (v4 == v6 ? (v10 = v5 == v7) : (v10 = 0), !v10))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    OUTLINED_FUNCTION_99();
  }
}

void Prompt.Rendering.Source.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_113_3();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_144_0();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Rendering.Source()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Prompt.Rendering.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 32);
  OUTLINED_FUNCTION_107_0();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_120_0();
  OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_58_0();
  specialized Array<A>.hash(into:)(a1, v3);
  OUTLINED_FUNCTION_25_0();
  v4 = OUTLINED_FUNCTION_209();
  specialized Array<A>.hash(into:)(v4, v5);
  OUTLINED_FUNCTION_152_0();
  v6 = OUTLINED_FUNCTION_207();
  specialized Dictionary<>.hash(into:)(v6, v7);
  OUTLINED_FUNCTION_88();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_144_0();
  return swift_bridgeObjectRelease();
}

uint64_t static Prompt.Rendering.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = OUTLINED_FUNCTION_143_1(a1);
  v4 = v3[2];
  v6 = v3[3];
  v5 = (_QWORD *)v3[4];
  v8 = (_QWORD *)v3[5];
  v7 = v3[6];
  v27 = v3[8];
  v28 = v3[7];
  v23 = v3[10];
  v24 = v3[9];
  v9 = v2[2];
  v10 = v2[3];
  v12 = (_QWORD *)v2[4];
  v11 = (_QWORD *)v2[5];
  v13 = v2[6];
  v25 = v2[8];
  v26 = v2[7];
  v21 = v2[10];
  v22 = v2[9];
  v14 = v1 == *v2 && v3[1] == v2[1];
  if (v14 || (OUTLINED_FUNCTION_41_0(), result = OUTLINED_FUNCTION_134_3(), (v16 & 1) != 0))
  {
    v17 = v4 == v9 && v6 == v10;
    if (v17
      || (OUTLINED_FUNCTION_169_0(), OUTLINED_FUNCTION_41_0(), result = OUTLINED_FUNCTION_134_3(), (v18 & 1) != 0))
    {
      result = 0;
      if ((specialized static Array<A>.== infix(_:_:)(v5, v12) & 1) != 0
        && (specialized static Array<A>.== infix(_:_:)(v8, v11) & 1) != 0
        && (specialized static Dictionary<>.== infix(_:_:)(v7, v13) & 1) != 0)
      {
        v19 = v28 == v26 && v27 == v25;
        if (v19 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
        {
          v20 = v24 == v22 && v23 == v21;
          if (v20 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
            return 1;
        }
      }
    }
  }
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v27;
  int64_t v28;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v27 = a1 + 64;
    OUTLINED_FUNCTION_168_0();
    v28 = (unint64_t)(v5 + 63) >> 6;
    if ((v6 & v4) != 0)
    {
      v7 = __clz(__rbit64(v6 & v4));
LABEL_24:
      v19 = *(_QWORD *)(a1 + 56) + 24 * v7;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_BYTE *)(v19 + 16);
      OUTLINED_FUNCTION_80_0();
      outlined copy of JSON(v20, v21, v22);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)();
      v25 = v24;
      OUTLINED_FUNCTION_82();
      if ((v25 & 1) != 0)
        __asm { BR              X8 }
      outlined consume of JSON(v20, v21, v22);
      return 0;
    }
    if ((unint64_t)(v5 + 63) >> 6 > 1)
    {
      v8 = *(_QWORD *)(v27 + 8);
      v9 = 1;
      if (v8)
        goto LABEL_23;
      OUTLINED_FUNCTION_163_0();
      if (v11 == v12)
        return 1;
      v8 = *(_QWORD *)(v10 + 8 * v9);
      if (v8)
        goto LABEL_23;
      OUTLINED_FUNCTION_163_0();
      if (v11 == v12)
        return 1;
      v8 = *(_QWORD *)(v13 + 8 * v9);
      if (v8)
        goto LABEL_23;
      OUTLINED_FUNCTION_163_0();
      if (v11 == v12)
        return 1;
      v8 = *(_QWORD *)(v15 + 8 * v9);
      if (v8)
      {
LABEL_23:
        v7 = __clz(__rbit64(v8)) + (v9 << 6);
        goto LABEL_24;
      }
      v16 = v14 + 4;
      if (v16 < v28)
      {
        v8 = *(_QWORD *)(v15 + 8 * v16);
        if (!v8)
        {
          while (1)
          {
            if (__OFADD__(v16, 1))
            {
              __break(1u);
              JUMPOUT(0x248C30334);
            }
            OUTLINED_FUNCTION_163_0();
            if (v11 == v12)
              return 1;
            v8 = *(_QWORD *)(v18 + 8 * v9);
            v16 = v17 + 1;
            if (v8)
              goto LABEL_23;
          }
        }
        v9 = v16;
        goto LABEL_23;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  char v22;
  int64_t v23;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v23 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_24;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v23)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v23)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v23)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v23)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_24:
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)();
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v20 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v17);
    if (*v20 == v16 && v20[1] == v15)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v23)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v23)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_36:
  __break(1u);
  return result;
}

Swift::Int Prompt.Rendering.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[6];
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_107_0();
  OUTLINED_FUNCTION_141_1();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_120_0();
  OUTLINED_FUNCTION_62_3();
  OUTLINED_FUNCTION_118();
  OUTLINED_FUNCTION_152_0();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  OUTLINED_FUNCTION_88();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  OUTLINED_FUNCTION_75();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v3);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_113_3();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_165();
  String.hash(into:)();
  OUTLINED_FUNCTION_15_1();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Rendering()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v2 = v0[4];
  v1 = v0[5];
  v3 = v0[6];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v2);
  swift_bridgeObjectRelease();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Prompt.hash(into:)()
{
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_209();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_27();
  specialized Array<A>.hash(into:)();
  return OUTLINED_FUNCTION_63_2();
}

void static Prompt.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OUTLINED_FUNCTION_143_1(a1);
  v4 = v1 == *v2 && *(_QWORD *)(v3 + 8) == v2[1];
  if ((v4 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
    && (OUTLINED_FUNCTION_146_0(), specialized static Array<A>.== infix(_:_:)(), (v5 & 1) != 0))
  {
    v6 = OUTLINED_FUNCTION_27();
    specialized static Array<A>.== infix(_:_:)(v6, v7);
  }
  else
  {
    OUTLINED_FUNCTION_99();
  }
}

void Prompt.hashValue.getter()
{
  OUTLINED_FUNCTION_97();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_113_3();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_38_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_4();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_86();
  OUTLINED_FUNCTION_137_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance Prompt(Swift::String *a1)
{
  return (unint64_t)Prompt.init(stringLiteral:)(*a1);
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v2 = v3;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()();
    v2 = v4;
  }
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for [Int]);
}

{
  specialized static Array._allocateUninitialized(_:)(a1);
}

{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_131_3();
    OUTLINED_FUNCTION_81_1();
    __break(1u);
  }
  else
  {
    if (a1)
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    OUTLINED_FUNCTION_153_0();
  }
}

{
  specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (tokenID: Int, tokenText: String));
}

void specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_131_3();
    OUTLINED_FUNCTION_81_1();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(a2);
      *(_QWORD *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    OUTLINED_FUNCTION_153_0();
  }
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

void specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    *v1 = a1(isUniquelyReferenced_nonNull_native, *(_QWORD *)(v3 + 16) + 1, 1, v3);
  OUTLINED_FUNCTION_99();
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

uint64_t type metadata accessor for Prompt.RenderedPromptFragment(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.RenderedPromptFragment);
}

uint64_t type metadata accessor for Prompt.PromptFragment(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.PromptFragment);
}

void _s10Foundation6LocaleVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_125_1(a1, a2, a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_23();
}

void outlined assign with take of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_125_1(a1, a2, a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40));
  OUTLINED_FUNCTION_23();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;

  v4 = v3;
  v8 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  v12 = v8 + 56;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v13 = *(_QWORD *)(v8 + 48);
    v14 = (_QWORD *)(v13 + 16 * v11);
    v15 = *v14 == a2 && v14[1] == a3;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      v16 = (uint64_t *)(*(_QWORD *)(*v4 + 48) + 16 * v11);
      v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain();
      return 0;
    }
    v19 = ~v10;
    while (1)
    {
      v11 = (v11 + 1) & v19;
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      v20 = (_QWORD *)(v13 + 16 * v11);
      v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = *v4;
  *v4 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v11, isUniquelyReferenced_nonNull_native);
  *v4 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  uint64_t *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  char v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  Swift::Int *v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v24;

  v8 = *v4;
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_75();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_13();
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    while (1)
    {
      v13 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 24 * v11);
      v14 = *v13 == a2 && v13[1] == a3;
      if (v14 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
      {
        OUTLINED_FUNCTION_75();
        OUTLINED_FUNCTION_60_2();
        swift_bridgeObjectRetain_n();
        specialized static Array<A>.== infix(_:_:)();
        v16 = v15;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_13();
        if ((v16 & 1) != 0)
          break;
      }
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_10;
    }
    OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_82();
    v19 = (Swift::Int *)(*(_QWORD *)(*v22 + 48) + 24 * v11);
    v20 = v19[1];
    v21 = v19[2];
    *a1 = *v19;
    a1[1] = v20;
    a1[2] = v21;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_4();
    return 0;
  }
  else
  {
LABEL_10:
    OUTLINED_FUNCTION_82();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = *v22;
    *v22 = 0x8000000000000000;
    OUTLINED_FUNCTION_38_0();
    OUTLINED_FUNCTION_75();
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, a4, v11, isUniquelyReferenced_nonNull_native);
    *v22 = v24;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    result = 1;
    a1[2] = a4;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  OUTLINED_FUNCTION_126_3();
  v4 = *v1;
  v5 = static Hasher._hash(seed:_:)();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    v11 = OUTLINED_FUNCTION_209();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v11, v12, v13);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != v0)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != v0);
  }
  result = 0;
LABEL_8:
  *v2 = v0;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, v11, MEMORY[0x24BDCB760]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB768]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;

  v7 = *v3;
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_109_3();
  v8 = OUTLINED_FUNCTION_86();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  OUTLINED_FUNCTION_199();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
    {
LABEL_7:
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_82();
      v15 = (_QWORD *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      OUTLINED_FUNCTION_199();
      if ((v19 & 1) == 0)
        break;
      v20 = (_QWORD *)(v12 + 16 * v10);
      v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (OUTLINED_FUNCTION_41_0() & 1) != 0)
        goto LABEL_7;
    }
  }
  OUTLINED_FUNCTION_82();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v25 = *v3;
  *v3 = 0x8000000000000000;
  OUTLINED_FUNCTION_38_0();
  v23 = OUTLINED_FUNCTION_173_0();
  specialized _NativeSet.insertNew(_:at:isUnique:)(v23, v24, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v25;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NonTerminalSymbol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;

  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v73 = *(_QWORD *)(v2 - 8);
  v74 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v72 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TerminalSymbol(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v56 - v8;
  v10 = type metadata accessor for Symbol(0);
  v67 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v76 = (char *)&v56 - v14;
  v15 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  v16 = static _SetStorage.resize(original:capacity:move:)();
  v61 = v15;
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_54:
    result = swift_release();
    *v1 = v16;
    return result;
  }
  v56 = v0;
  v17 = 1 << *(_BYTE *)(v61 + 32);
  v18 = *(_QWORD *)(v61 + 56);
  v60 = (_QWORD *)(v61 + 56);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v59 = (unint64_t)(v17 + 63) >> 6;
  v21 = v16 + 56;
  result = swift_retain();
  v23 = 0;
  v24 = (uint64_t)v76;
  v58 = v16;
  v75 = v13;
  v57 = v16 + 56;
  if (!v20)
    goto LABEL_7;
  do
  {
    v64 = (v20 - 1) & v20;
    v65 = v23;
    v25 = __clz(__rbit64(v20)) | (v23 << 6);
LABEL_21:
    v30 = *(_QWORD *)(v61 + 48) + 24 * v25;
    v31 = *(_QWORD *)v30;
    v66 = *(_OWORD *)(v30 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    v63 = v31;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v32 = *((_QWORD *)&v66 + 1);
    Hasher._combine(_:)(*(_QWORD *)(*((_QWORD *)&v66 + 1) + 16));
    v69 = *(_QWORD *)(v32 + 16);
    if (!v69)
      goto LABEL_38;
    v68 = v32 + 32;
    v62 = v32;
    swift_bridgeObjectRetain();
    v33 = 0;
    do
    {
      v34 = *(_QWORD *)(v68 + 8 * v33);
      Hasher._combine(_:)(*(_QWORD *)(v34 + 16));
      v35 = v34;
      v36 = *(_QWORD *)(v34 + 16);
      if (!v36)
        goto LABEL_36;
      v70 = v35;
      v71 = v33;
      v37 = v67;
      v38 = v35 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
      swift_bridgeObjectRetain_n();
      v77 = *(_QWORD *)(v37 + 72);
      v39 = (uint64_t)v75;
      do
      {
        _s19TokenGenerationCore7GrammarVWOcTm_0(v38, v24, type metadata accessor for Symbol);
        _s19TokenGenerationCore7GrammarVWOcTm_0(v24, v39, type metadata accessor for Symbol);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          Hasher._combine(_:)(1uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v24 = (uint64_t)v76;
          swift_bridgeObjectRelease_n();
          goto LABEL_34;
        }
        outlined init with take of Grammar(v39, (uint64_t)v9, type metadata accessor for TerminalSymbol);
        Hasher._combine(_:)(0);
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, (uint64_t)v7, type metadata accessor for TerminalSymbol);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload != 1)
          {
            v42 = v73;
            v41 = v74;
            v43 = v4;
            v44 = v72;
            (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v7, v74);
            Hasher._combine(_:)(2uLL);
            lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
            dispatch thunk of Hashable.hash(into:)();
            v45 = v44;
            v4 = v43;
            v39 = (uint64_t)v75;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
            goto LABEL_33;
          }
          Hasher._combine(_:)(1uLL);
          String.hash(into:)();
        }
        else
        {
          Hasher._combine(_:)(0);
          String.hash(into:)();
        }
        swift_bridgeObjectRelease();
LABEL_33:
        outlined destroy of Grammar((uint64_t)v9, type metadata accessor for TerminalSymbol);
        v24 = (uint64_t)v76;
LABEL_34:
        outlined destroy of Grammar(v24, type metadata accessor for Symbol);
        v38 += v77;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease_n();
      v33 = v71;
LABEL_36:
      ++v33;
    }
    while (v33 != v69);
    swift_bridgeObjectRelease();
    v16 = v58;
    v21 = v57;
LABEL_38:
    result = Hasher._finalize()();
    v46 = -1 << *(_BYTE *)(v16 + 32);
    v47 = result & ~v46;
    v48 = v47 >> 6;
    if (((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6))) == 0)
    {
      v50 = 0;
      v51 = (unint64_t)(63 - v46) >> 6;
      v23 = v65;
      v20 = v64;
      while (++v48 != v51 || (v50 & 1) == 0)
      {
        v52 = v48 == v51;
        if (v48 == v51)
          v48 = 0;
        v50 |= v52;
        v53 = *(_QWORD *)(v21 + 8 * v48);
        if (v53 != -1)
        {
          v49 = __clz(__rbit64(~v53)) + (v48 << 6);
          goto LABEL_47;
        }
      }
      __break(1u);
      goto LABEL_56;
    }
    v49 = __clz(__rbit64((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6)))) | v47 & 0x7FFFFFFFFFFFFFC0;
    v23 = v65;
    v20 = v64;
LABEL_47:
    *(_QWORD *)(v21 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    v54 = *(_QWORD *)(v16 + 48) + 24 * v49;
    *(_QWORD *)v54 = v63;
    *(_OWORD *)(v54 + 8) = v66;
    ++*(_QWORD *)(v16 + 16);
  }
  while (v20);
LABEL_7:
  v26 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v26 >= v59)
    goto LABEL_49;
  v27 = v60[v26];
  v28 = v23 + 1;
  if (v27)
    goto LABEL_20;
  v28 = v26 + 1;
  if (v26 + 1 >= v59)
    goto LABEL_49;
  v27 = v60[v28];
  if (v27)
    goto LABEL_20;
  v28 = v26 + 2;
  if (v26 + 2 >= v59)
    goto LABEL_49;
  v27 = v60[v28];
  if (v27)
    goto LABEL_20;
  v29 = v26 + 3;
  if (v29 >= v59)
  {
LABEL_49:
    swift_release();
    v1 = v56;
    v55 = 1 << *(_BYTE *)(v61 + 32);
    if (v55 > 63)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v55 + 63) >> 6, v60);
    else
      *v60 = -1 << v55;
    *(_QWORD *)(v61 + 16) = 0;
    goto LABEL_54;
  }
  v27 = v60[v29];
  if (v27)
  {
    v28 = v29;
LABEL_20:
    v64 = (v27 - 1) & v27;
    v65 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v59)
      goto LABEL_49;
    v27 = v60[v28];
    ++v29;
    if (v27)
      goto LABEL_20;
  }
LABEL_57:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v7 = (uint64_t *)(v2 + 56);
    v6 = *(_QWORD *)(v2 + 56);
    v8 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v8;
    v28 = v1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & v6;
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = result + 56;
    if ((v9 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (i = v13 | (v5 << 6); ; i = __clz(__rbit64(v16)) + (v5 << 6))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v22) = v18;
      ++*(_QWORD *)(v4 + 16);
      if (v10)
        goto LABEL_6;
LABEL_7:
      v15 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v15 >= v11)
        goto LABEL_32;
      v16 = v7[v15];
      ++v5;
      if (!v16)
      {
        v5 = v15 + 1;
        if (v15 + 1 >= v11)
          goto LABEL_32;
        v16 = v7[v5];
        if (!v16)
        {
          v5 = v15 + 2;
          if (v15 + 2 >= v11)
            goto LABEL_32;
          v16 = v7[v5];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v11)
            {
LABEL_32:
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, (_QWORD *)(v2 + 56));
              else
                *v7 = v27;
              v1 = v28;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v7[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_39;
                if (v5 >= v11)
                  goto LABEL_32;
                v16 = v7[v5];
                ++v17;
                if (v16)
                  goto LABEL_20;
              }
            }
            v5 = v17;
          }
        }
      }
LABEL_20:
      v10 = (v16 - 1) & v16;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    if (!v11)
      goto LABEL_7;
LABEL_6:
    v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    for (i = v15 | (v14 << 6); ; i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      v20 = v5;
      v21 = *(_QWORD *)(v5 + 48);
      v22 = *(_QWORD *)(v36 + 72);
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v23(v4, v21 + v22 * i, v2);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) == 0)
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          v30 = v26 == v29;
          if (v26 == v29)
            v26 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v26);
          if (v31 != -1)
          {
            v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v12 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v23)(*(_QWORD *)(v7 + 48) + v27 * v22, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v20;
      if (v11)
        goto LABEL_6;
LABEL_7:
      v17 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_38;
      if (v17 >= v34)
        goto LABEL_32;
      v18 = v35[v17];
      ++v14;
      if (!v18)
      {
        v14 = v17 + 1;
        if (v17 + 1 >= v34)
          goto LABEL_32;
        v18 = v35[v14];
        if (!v18)
        {
          v14 = v17 + 2;
          if (v17 + 2 >= v34)
            goto LABEL_32;
          v18 = v35[v14];
          if (!v18)
          {
            v19 = v17 + 3;
            if (v19 >= v34)
            {
LABEL_32:
              swift_release();
              v1 = v33;
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v32 + 63) >> 6, v35);
              else
                *v35 = -1 << v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                v14 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_39;
                if (v14 >= v34)
                  goto LABEL_32;
                v18 = v35[v14];
                ++v19;
                if (v18)
                  goto LABEL_20;
              }
            }
            v14 = v19;
          }
        }
      }
LABEL_20:
      v11 = (v18 - 1) & v18;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = *(_QWORD *)(v2 + 56);
    v30 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & v6;
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    if ((v8 & v6) == 0)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v9)
        goto LABEL_6;
LABEL_7:
      v14 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_38;
      if (v14 >= v10)
        goto LABEL_32;
      v15 = v30[v14];
      ++v5;
      if (!v15)
      {
        v5 = v14 + 1;
        if (v14 + 1 >= v10)
          goto LABEL_32;
        v15 = v30[v5];
        if (!v15)
        {
          v5 = v14 + 2;
          if (v14 + 2 >= v10)
            goto LABEL_32;
          v15 = v30[v5];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v10)
            {
LABEL_32:
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              v1 = v0;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v5 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v5 >= v10)
                  goto LABEL_32;
                v15 = v30[v5];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v5 = v16;
          }
        }
      }
LABEL_20:
      v9 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = a1;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
}

{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  a3 = v12 & ~v13;
  v14 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v11 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = *v16 == a1 && v16[1] == a2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v18 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v18;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v19 = (_QWORD *)(v15 + 16 * a3);
        v20 = *v19 == a1 && v19[1] == a2;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v21 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v22 = (_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * a3);
  *v22 = a1;
  v22[1] = a2;
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, Swift::Int a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  Swift::Int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  char v17;
  char v18;
  uint64_t v19;
  Swift::Int *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;

  v9 = result;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0)
    goto LABEL_17;
  if ((a5 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_17;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a4 = result & ~v13;
  if (((*(_QWORD *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v14 = ~v13;
    do
    {
      v15 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 24 * a4);
      v16 = *v15 == v9 && v15[1] == a2;
      if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        specialized static Array<A>.== infix(_:_:)();
        v18 = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_20;
      }
      a4 = (a4 + 1) & v14;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_17:
  v19 = *v24;
  *(_QWORD *)(*v24 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v20 = (Swift::Int *)(*(_QWORD *)(v19 + 48) + 24 * a4);
  *v20 = v9;
  v20[1] = a2;
  v20[2] = a3;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    *(_QWORD *)(v19 + 16) = v23;
    return result;
  }
  __break(1u);
LABEL_20:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB768]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = 3 * i;
    v21 = *(_QWORD *)(v2 + 48) + 8 * v20;
    v22 = *(_OWORD *)(v21 + 8);
    v23 = *(_QWORD *)(v4 + 48) + 8 * v20;
    *(_QWORD *)v23 = *(_QWORD *)v21;
    *(_OWORD *)(v23 + 8) = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (!v12)
    goto LABEL_12;
LABEL_11:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v9 << 6); ; i = __clz(__rbit64(v17)) + (v9 << 6))
  {
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * i) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    if (v12)
      goto LABEL_11;
LABEL_12:
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_25:
    v12 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = *(_QWORD *)(v6 + 56);
  v16 = -1;
  if (v14 < 64)
    v16 = ~(-1 << v14);
  v17 = v16 & v15;
  v18 = (unint64_t)(v14 + 63) >> 6;
  if ((v16 & v15) == 0)
    goto LABEL_12;
LABEL_11:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v13 << 6); ; i = __clz(__rbit64(v22)) + (v13 << 6))
  {
    v24 = *(_QWORD *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v24, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v24, v5, v2);
    if (v17)
      goto LABEL_11;
LABEL_12:
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v18)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  OUTLINED_FUNCTION_113_0();
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(v2);
  v3 = *v0;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v5;
    OUTLINED_FUNCTION_23_0();
    return;
  }
  v6 = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 56 + 8 * v8)
    memmove(v6, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = *(_QWORD *)(v3 + 56);
  v13 = -1;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  if ((v13 & v12) == 0)
    goto LABEL_12;
LABEL_11:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v16 | (v10 << 6); ; i = __clz(__rbit64(v19)) + (v10 << 6))
  {
    v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v22 = v21[1];
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * i);
    *v23 = *v21;
    v23[1] = v22;
    swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_11;
LABEL_12:
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v15)
        goto LABEL_28;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v15)
          goto LABEL_28;
        v19 = *(_QWORD *)(v7 + 8 * v10);
        if (!v19)
          break;
      }
    }
LABEL_25:
    v14 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v15)
    goto LABEL_28;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v15)
      goto LABEL_28;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NonTerminalSymbol>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;

  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v71 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TerminalSymbol(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v55 - v8;
  v10 = type metadata accessor for Symbol(0);
  v66 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v74 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)&v55 - v13;
  v14 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Rule>);
  v15 = static _SetStorage.resize(original:capacity:move:)();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
  {
    result = swift_release();
    goto LABEL_51;
  }
  v55 = v0;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 56);
  v58 = v14 + 56;
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v59 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 56;
  result = swift_retain();
  v23 = 0;
  v24 = (uint64_t)v75;
  v57 = v16;
  v61 = v14;
  v56 = v21;
  if (!v20)
    goto LABEL_7;
  do
  {
    v64 = (v20 - 1) & v20;
    v63 = v23;
    v25 = __clz(__rbit64(v20)) | (v23 << 6);
LABEL_21:
    v30 = *(_QWORD *)(v14 + 48) + 24 * v25;
    v31 = *(_QWORD *)v30;
    v65 = *(_OWORD *)(v30 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    v32 = *((_QWORD *)&v65 + 1);
    swift_bridgeObjectRetain();
    v62 = v31;
    v14 = v61;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*(_QWORD *)(v32 + 16));
    v68 = *(_QWORD *)(v32 + 16);
    if (!v68)
      goto LABEL_38;
    v67 = v32 + 32;
    v60 = v32;
    swift_bridgeObjectRetain();
    v33 = 0;
    do
    {
      v34 = *(_QWORD *)(v67 + 8 * v33);
      Hasher._combine(_:)(*(_QWORD *)(v34 + 16));
      v35 = *(_QWORD *)(v34 + 16);
      if (!v35)
        goto LABEL_36;
      v70 = v33;
      v36 = v66;
      v37 = v34;
      v38 = v34 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      v69 = v37;
      swift_bridgeObjectRetain_n();
      v76 = *(_QWORD *)(v36 + 72);
      v39 = (uint64_t)v74;
      do
      {
        _s19TokenGenerationCore7GrammarVWOcTm_0(v38, v24, type metadata accessor for Symbol);
        _s19TokenGenerationCore7GrammarVWOcTm_0(v24, v39, type metadata accessor for Symbol);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          Hasher._combine(_:)(1uLL);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v24 = (uint64_t)v75;
          swift_bridgeObjectRelease_n();
          goto LABEL_34;
        }
        outlined init with take of Grammar(v39, (uint64_t)v9, type metadata accessor for TerminalSymbol);
        Hasher._combine(_:)(0);
        _s19TokenGenerationCore7GrammarVWOcTm_0((uint64_t)v9, (uint64_t)v7, type metadata accessor for TerminalSymbol);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload != 1)
          {
            v42 = v72;
            v41 = v73;
            v43 = v4;
            v44 = v71;
            (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v7, v73);
            Hasher._combine(_:)(2uLL);
            lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
            dispatch thunk of Hashable.hash(into:)();
            v45 = v44;
            v4 = v43;
            v39 = (uint64_t)v74;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
            goto LABEL_33;
          }
          Hasher._combine(_:)(1uLL);
          String.hash(into:)();
        }
        else
        {
          Hasher._combine(_:)(0);
          String.hash(into:)();
        }
        swift_bridgeObjectRelease();
LABEL_33:
        outlined destroy of Grammar((uint64_t)v9, type metadata accessor for TerminalSymbol);
        v24 = (uint64_t)v75;
LABEL_34:
        outlined destroy of Grammar(v24, type metadata accessor for Symbol);
        v38 += v76;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease_n();
      v33 = v70;
LABEL_36:
      ++v33;
    }
    while (v33 != v68);
    swift_bridgeObjectRelease();
    v16 = v57;
    v14 = v61;
    v21 = v56;
LABEL_38:
    result = Hasher._finalize()();
    v46 = -1 << *(_BYTE *)(v16 + 32);
    v47 = result & ~v46;
    v48 = v47 >> 6;
    if (((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6))) == 0)
    {
      v50 = 0;
      v51 = (unint64_t)(63 - v46) >> 6;
      v20 = v64;
      while (++v48 != v51 || (v50 & 1) == 0)
      {
        v52 = v48 == v51;
        if (v48 == v51)
          v48 = 0;
        v50 |= v52;
        v53 = *(_QWORD *)(v21 + 8 * v48);
        if (v53 != -1)
        {
          v49 = __clz(__rbit64(~v53)) + (v48 << 6);
          goto LABEL_47;
        }
      }
      __break(1u);
      goto LABEL_53;
    }
    v49 = __clz(__rbit64((-1 << v47) & ~*(_QWORD *)(v21 + 8 * (v47 >> 6)))) | v47 & 0x7FFFFFFFFFFFFFC0;
    v20 = v64;
LABEL_47:
    *(_QWORD *)(v21 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v49;
    v54 = *(_QWORD *)(v16 + 48) + 24 * v49;
    *(_QWORD *)v54 = v62;
    *(_OWORD *)(v54 + 8) = v65;
    ++*(_QWORD *)(v16 + 16);
    v23 = v63;
  }
  while (v20);
LABEL_7:
  v26 = v23 + 1;
  if (__OFADD__(v23, 1))
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v26 >= v59)
    goto LABEL_49;
  v27 = *(_QWORD *)(v58 + 8 * v26);
  v28 = v23 + 1;
  if (v27)
    goto LABEL_20;
  v28 = v23 + 2;
  if (v23 + 2 >= v59)
    goto LABEL_49;
  v27 = *(_QWORD *)(v58 + 8 * v28);
  if (v27)
    goto LABEL_20;
  v28 = v23 + 3;
  if (v23 + 3 >= v59)
    goto LABEL_49;
  v27 = *(_QWORD *)(v58 + 8 * v28);
  if (v27)
    goto LABEL_20;
  v29 = v23 + 4;
  if (v23 + 4 >= v59)
  {
LABEL_49:
    result = swift_release_n();
    v1 = v55;
LABEL_51:
    *v1 = v16;
    return result;
  }
  v27 = *(_QWORD *)(v58 + 8 * v29);
  if (v27)
  {
    v28 = v23 + 4;
LABEL_20:
    v64 = (v27 - 1) & v27;
    v63 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v59)
      goto LABEL_49;
    v27 = *(_QWORD *)(v58 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_20;
  }
LABEL_54:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  if (!v9)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v5 << 6); ; i = __clz(__rbit64(v15)) + (v5 << 6))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * i);
    result = static Hasher._hash(seed:_:)();
    v18 = -1 << *(_BYTE *)(v4 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v21) = v17;
    ++*(_QWORD *)(v4 + 16);
    if (v9)
      goto LABEL_6;
LABEL_7:
    v14 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_36;
    if (v14 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v14 + 1;
      if (v14 + 1 >= v10)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v5);
      if (!v15)
      {
        v5 = v14 + 2;
        if (v14 + 2 >= v10)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v5);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v9 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_32:
    result = swift_release();
    v1 = v26;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v5 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v5 >= v10)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v5);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CharacterSet>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  if (!v12)
    goto LABEL_7;
LABEL_6:
  v16 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    v21 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v21 * i, v2);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB760]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v22 = -1 << *(_BYTE *)(v8 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) == 0)
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v24);
        if (v29 != -1)
        {
          v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v13 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v25 * v21, v5, v2);
    ++*(_QWORD *)(v8 + 16);
    if (v12)
      goto LABEL_6;
LABEL_7:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_36;
    if (v18 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v18);
    ++v15;
    if (!v19)
    {
      v15 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_32;
      v19 = *(_QWORD *)(v32 + 8 * v15);
      if (!v19)
      {
        v15 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_32;
        v19 = *(_QWORD *)(v32 + 8 * v15);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)(v32 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v33)
      goto LABEL_32;
    v19 = *(_QWORD *)(v32 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Character>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = v2 + 56;
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = (unint64_t)(v7 + 63) >> 6;
    v10 = result + 56;
    if (!v9)
      goto LABEL_7;
LABEL_6:
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
    {
      v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6))) == 0)
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v19) >> 6;
        while (++v21 != v24 || (v23 & 1) == 0)
        {
          v25 = v21 == v24;
          if (v21 == v24)
            v21 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v21);
          if (v26 != -1)
          {
            v22 = __clz(__rbit64(~v26)) + (v21 << 6);
            goto LABEL_29;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
LABEL_29:
      *(_QWORD *)(v10 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v22);
      *v27 = v18;
      v27[1] = v17;
      ++*(_QWORD *)(v4 + 16);
      result = swift_bridgeObjectRetain();
      if (v9)
        goto LABEL_6;
LABEL_7:
      v13 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_35;
      if (v13 >= v28)
        goto LABEL_31;
      v14 = *(_QWORD *)(v6 + 8 * v13);
      ++v5;
      if (!v14)
      {
        v5 = v13 + 1;
        if (v13 + 1 >= v28)
          goto LABEL_31;
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 2;
          if (v13 + 2 >= v28)
            goto LABEL_31;
          v14 = *(_QWORD *)(v6 + 8 * v5);
          if (!v14)
          {
            v15 = v13 + 3;
            if (v15 >= v28)
            {
LABEL_31:
              result = swift_release();
              v1 = v0;
              goto LABEL_33;
            }
            v14 = *(_QWORD *)(v6 + 8 * v15);
            v5 = v15;
            if (!v14)
              break;
          }
        }
      }
LABEL_19:
      v9 = (v14 - 1) & v14;
    }
    while (1)
    {
      v5 = v15 + 1;
      if (__OFADD__(v15, 1))
        break;
      if (v5 >= v28)
        goto LABEL_31;
      v14 = *(_QWORD *)(v6 + 8 * v5);
      ++v15;
      if (v14)
        goto LABEL_19;
    }
LABEL_36:
    __break(1u);
  }
  else
  {
    result = swift_release();
LABEL_33:
    *v1 = v4;
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12)
      memmove(v12, v13, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_99();
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized Dictionary<>.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_6_1();
  v15 = v0;
  v13 = (_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_168_0();
  v3 = v2 & v1;
  v14 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v3)
  {
    v5 = __clz(__rbit64(v3));
    goto LABEL_14;
  }
  if (v14 > 1)
  {
    v6 = v13[1];
    v7 = 1;
    if (v6)
      goto LABEL_13;
    v7 = 2;
    if (v14 <= 2)
      goto LABEL_15;
    v6 = v13[2];
    if (v6)
    {
LABEL_13:
      v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_14:
      v9 = *(_QWORD *)(v15 + 56) + 24 * v5;
      v10 = *(_QWORD *)v9;
      v11 = *(_QWORD *)(v9 + 8);
      v12 = *(unsigned __int8 *)(v9 + 16);
      OUTLINED_FUNCTION_58_0();
      outlined copy of JSON(v10, v11, v12);
      OUTLINED_FUNCTION_113_3();
      OUTLINED_FUNCTION_25_0();
      __asm { BR              X8 }
    }
    v8 = 3;
    if (v14 > 3)
    {
      v6 = v13[3];
      if (v6)
      {
        v7 = 3;
        goto LABEL_13;
      }
      while (1)
      {
        v7 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          JUMPOUT(0x248C36794);
        }
        if (v7 >= v14)
          break;
        v6 = v13[v7];
        ++v8;
        if (v6)
          goto LABEL_13;
      }
    }
  }
LABEL_15:
  swift_release();
  Hasher._combine(_:)(0);
  OUTLINED_FUNCTION_8_1();
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  v11 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  for (v4 &= v4 - 1; ; v4 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v5)
        goto LABEL_19;
      v9 = *(_QWORD *)(v11 + 8 * v7);
      if (!v9)
        break;
    }
LABEL_16:
    ;
  }
  v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  v9 = *(_QWORD *)(v11 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

void base witness table accessor for Equatable in Prompt.SpecialToken()
{
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
}

void base witness table accessor for Equatable in Prompt.Delimiter()
{
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.Delimiter and conformance Prompt.Delimiter, type metadata accessor for Prompt.Delimiter, (uint64_t)&protocol conformance descriptor for Prompt.Delimiter);
}

unint64_t lazy protocol witness table accessor for type Prompt.Attachment and conformance Prompt.Attachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment;
  if (!lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.Attachment, &type metadata for Prompt.Attachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Attachment and conformance Prompt.Attachment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent;
  if (!lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.AttachmentContent, &type metadata for Prompt.AttachmentContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.AttachmentContent and conformance Prompt.AttachmentContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format;
  if (!lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.ImageAttachment.Format, &type metadata for Prompt.ImageAttachment.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ImageAttachment.Format and conformance Prompt.ImageAttachment.Format);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment;
  if (!lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.ImageAttachment, &type metadata for Prompt.ImageAttachment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment);
  }
  return result;
}

uint64_t associated type witness table accessor for StringInterpolationProtocol.StringLiteralType : _ExpressibleByBuiltinStringLiteral in Prompt.StringInterpolation()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t lazy protocol witness table accessor for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source;
  if (!lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.Rendering.Source, &type metadata for Prompt.Rendering.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Rendering.Source and conformance Prompt.Rendering.Source);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.Rendering and conformance Prompt.Rendering()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering;
  if (!lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.Rendering, &type metadata for Prompt.Rendering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt and conformance Prompt()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt, &type metadata for Prompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt, &type metadata for Prompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt, &type metadata for Prompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt and conformance Prompt;
  if (!lazy protocol witness table cache variable for type Prompt and conformance Prompt)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt, &type metadata for Prompt);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt and conformance Prompt);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation;
  if (!lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Prompt.StringInterpolation, &type metadata for Prompt.StringInterpolation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.StringInterpolation and conformance Prompt.StringInterpolation);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in Prompt()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in Prompt()
{
  return MEMORY[0x24BEE0D88];
}

void type metadata accessor for Prompt()
{
  OUTLINED_FUNCTION_18();
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.SpecialToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Prompt.SpecialToken(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Prompt.SpecialToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Prompt.SpecialToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
LABEL_7:
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for Prompt.SpecialToken(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for Prompt.SpecialToken(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.SpecialToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248C37368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for Locale?);
}

uint64_t storeEnumTagSinglePayload for Prompt.SpecialToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248C37380(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for Locale?);
}

void type metadata completion function for Prompt.SpecialToken()
{
  unint64_t v0;

  type metadata accessor for Locale?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Prompt.SpecialToken.Chat()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Prompt.SpecialToken.ToolUse()
{
  OUTLINED_FUNCTION_18();
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.Delimiter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = type metadata accessor for Prompt.SpecialToken(0);
    v9 = *(int *)(v8 + 20);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    v15 = *(int *)(v8 + 24);
    v16 = (uint64_t *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Prompt.Delimiter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v2 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
  v3 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Prompt.Delimiter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for Prompt.SpecialToken(0);
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  }
  v13 = *(int *)(v7 + 24);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Prompt.Delimiter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for Prompt.SpecialToken(0);
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  v15 = *(int *)(v6 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for Prompt.Delimiter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = type metadata accessor for Prompt.SpecialToken(0);
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for Prompt.Delimiter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for Prompt.SpecialToken(0);
  v8 = *(int *)(v7 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (!EnumTagSinglePayload)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
LABEL_7:
  v16 = *(int *)(v7 + 24);
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Delimiter()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C37AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_180();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Prompt.Delimiter()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C37AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_180();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Prompt.Delimiter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Prompt.SpecialToken(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for Prompt.Attachment(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Prompt.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Attachment(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[40])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = v3 - 2;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.Attachment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for Prompt.Attachment()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Prompt.AttachmentContent()
{
  OUTLINED_FUNCTION_18();
}

void initializeBufferWithCopyOfBuffer for Prompt.AttachmentContent(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_75_0(a1, a2);
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  OUTLINED_FUNCTION_99();
}

void assignWithCopy for Prompt.AttachmentContent(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_75_0(a1, a2);
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  OUTLINED_FUNCTION_99();
}

void assignWithTake for Prompt.AttachmentContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  OUTLINED_FUNCTION_23();
}

uint64_t getEnumTagSinglePayload for Prompt.AttachmentContent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[24])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = v3 - 2;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.AttachmentContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for Prompt.ImageAttachment()
{
  OUTLINED_FUNCTION_18();
}

uint64_t storeEnumTagSinglePayload for Prompt.ImageAttachment.Format(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248C37EBC + 4 * byte_248C921F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248C37EF0 + 4 * byte_248C921F0[v4]))();
}

uint64_t sub_248C37EF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248C37EF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248C37F00);
  return result;
}

uint64_t sub_248C37F0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248C37F14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248C37F18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248C37F20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for Prompt.ImageAttachment.Format()
{
  OUTLINED_FUNCTION_18();
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.RenderedPromptFragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (uint64_t *)((char *)a2 + v6);
    v9 = type metadata accessor for Prompt.SpecialToken(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = v8[1];
      *v7 = *v8;
      v7[1] = v12;
      v13 = *(int *)(v9 + 20);
      v14 = (char *)v7 + v13;
      v15 = (char *)v8 + v13;
      v16 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      v18 = *(int *)(v9 + 24);
      v19 = (_QWORD *)((char *)v7 + v18);
      v20 = (_QWORD *)((char *)v8 + v18);
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for Prompt.RenderedPromptFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Prompt.SpecialToken(0);
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v7 = v4 + *(int *)(v5 + 20);
    v8 = type metadata accessor for Locale();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Prompt.RenderedPromptFragment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (_QWORD *)((char *)a1 + v5);
  v7 = (_QWORD *)((char *)a2 + v5);
  v8 = type metadata accessor for Prompt.SpecialToken(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = v7[1];
    *v6 = *v7;
    v6[1] = v10;
    v11 = *(int *)(v8 + 20);
    v12 = (char *)v6 + v11;
    v13 = (char *)v7 + v11;
    v14 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
    v16 = *(int *)(v8 + 24);
    v17 = (_QWORD *)((char *)v6 + v16);
    v18 = (_QWORD *)((char *)v7 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for Prompt.RenderedPromptFragment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  v9 = type metadata accessor for Prompt.SpecialToken(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    if (v11)
    {
      outlined destroy of Grammar((uint64_t)v7, type metadata accessor for Prompt.SpecialToken);
      goto LABEL_7;
    }
    *v7 = *v8;
    v7[1] = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = *(int *)(v9 + 20);
    v19 = (char *)v7 + v18;
    v20 = (char *)v8 + v18;
    v21 = type metadata accessor for Locale();
    v22 = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v21);
    v23 = __swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21);
    if (v22)
    {
      if (!v23)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
LABEL_16:
        v29 = *(int *)(v9 + 24);
        v30 = (_QWORD *)((char *)v7 + v29);
        v31 = (_QWORD *)((char *)v8 + v29);
        *v30 = *v31;
        v30[1] = v31[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      v27 = *(_QWORD *)(v21 - 8);
      if (!v23)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v19, v20, v21);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v21);
    }
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_16;
  }
  if (v11)
  {
LABEL_7:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  *v7 = *v8;
  v7[1] = v8[1];
  v12 = *(int *)(v9 + 20);
  v13 = (char *)v7 + v12;
  v14 = (char *)v8 + v12;
  v15 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  v24 = *(int *)(v9 + 24);
  v25 = (_QWORD *)((char *)v7 + v24);
  v26 = (_QWORD *)((char *)v8 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for Prompt.RenderedPromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (_OWORD *)((char *)a1 + v4);
  v6 = (_OWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for Prompt.SpecialToken(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v9 = *(int *)(v7 + 20);
    v10 = (char *)v5 + v9;
    v11 = (char *)v6 + v9;
    v12 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    *(_OWORD *)((char *)v5 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)v6 + *(int *)(v7 + 24));
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for Prompt.RenderedPromptFragment(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)((char *)a1 + v7);
  v9 = (_QWORD *)((char *)a2 + v7);
  v10 = type metadata accessor for Prompt.SpecialToken(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    if (v12)
    {
      outlined destroy of Grammar((uint64_t)v8, type metadata accessor for Prompt.SpecialToken);
      goto LABEL_7;
    }
    v19 = v9[1];
    *v8 = *v9;
    v8[1] = v19;
    swift_bridgeObjectRelease();
    v20 = *(int *)(v10 + 20);
    v21 = (char *)v8 + v20;
    v22 = (char *)v9 + v20;
    v23 = type metadata accessor for Locale();
    v24 = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v23);
    v25 = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23);
    if (v24)
    {
      if (!v25)
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
        __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
LABEL_16:
        v28 = *(int *)(v10 + 24);
        v29 = (_QWORD *)((char *)v8 + v28);
        v30 = (_QWORD *)((char *)v9 + v28);
        v32 = *v30;
        v31 = v30[1];
        *v29 = v32;
        v29[1] = v31;
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      v26 = *(_QWORD *)(v23 - 8);
      if (!v25)
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v21, v22, v23);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v23);
    }
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_16;
  }
  if (v12)
  {
LABEL_7:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v13 = *(int *)(v10 + 20);
  v14 = (char *)v8 + v13;
  v15 = (char *)v9 + v13;
  v16 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  *(_OWORD *)((char *)v8 + *(int *)(v10 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v10 + 24));
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.RenderedPromptFragment()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248C38918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

void __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_99();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v7);
  }
}

uint64_t storeEnumTagSinglePayload for Prompt.RenderedPromptFragment()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248C3899C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &demangling cache variable for type metadata for Prompt.SpecialToken?);
}

void __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_99();
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
    OUTLINED_FUNCTION_2_6(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }
}

void type metadata completion function for Prompt.RenderedPromptFragment()
{
  unint64_t v0;

  type metadata accessor for Locale?(319, &lazy cache variable for type metadata for Prompt.SpecialToken?, (void (*)(uint64_t))type metadata accessor for Prompt.SpecialToken);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Locale?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
  OUTLINED_FUNCTION_23();
}

uint64_t destroy for Prompt()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for Prompt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_58_0();
  OUTLINED_FUNCTION_99();
}

void assignWithCopy for Prompt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_160_0(a1, a2);
  v3[1] = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_25_0();
  v3[2] = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_25_0();
  v3[3] = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_99();
}

void assignWithTake for Prompt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_160_0(a1, a2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_23();
}

void type metadata accessor for Prompt.StringInterpolation()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Prompt.Rendering()
{
  OUTLINED_FUNCTION_18();
}

void type metadata accessor for Prompt.Rendering.Source()
{
  OUTLINED_FUNCTION_18();
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.PromptFragment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for Prompt.SpecialToken(0);
      v9 = *(int *)(v8 + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
      v15 = *(int *)(v8 + 24);
      v16 = (uint64_t *)((char *)a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = v17[1];
      *v16 = *v17;
      v16[1] = v18;
      v19 = type metadata accessor for Prompt.Delimiter(0);
      *(uint64_t *)((char *)a1 + *(int *)(v19 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v19 + 20));
      *(uint64_t *)((char *)a1 + *(int *)(v19 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v19 + 24));
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Prompt.PromptFragment(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    v4 = a1 + *(int *)(type metadata accessor for Prompt.SpecialToken(0) + 20);
    v5 = type metadata accessor for Locale();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for Prompt.PromptFragment(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for Prompt.SpecialToken(0);
    v7 = *(int *)(v6 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
    v12 = *(int *)(v6 + 24);
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = type metadata accessor for Prompt.Delimiter(0);
    *(_QWORD *)((char *)a1 + *(int *)(v16 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 20));
    *(_QWORD *)((char *)a1 + *(int *)(v16 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v16 + 24));
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Prompt.PromptFragment(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for Prompt.PromptFragment);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for Prompt.SpecialToken(0);
      v6 = *(int *)(v5 + 20);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
        __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      }
      v11 = *(int *)(v5 + 24);
      v12 = (_QWORD *)((char *)a1 + v11);
      v13 = (_QWORD *)((char *)a2 + v11);
      *v12 = *v13;
      v12[1] = v13[1];
      v14 = type metadata accessor for Prompt.Delimiter(0);
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 20));
      *(_QWORD *)((char *)a1 + *(int *)(v14 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v14 + 24));
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for Prompt.PromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = type metadata accessor for Prompt.SpecialToken(0);
    v7 = *(int *)(v6 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
    v12 = type metadata accessor for Prompt.Delimiter(0);
    *(_QWORD *)((char *)a1 + *(int *)(v12 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 20));
    *(_QWORD *)((char *)a1 + *(int *)(v12 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 24));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for Prompt.PromptFragment(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of Grammar((uint64_t)a1, type metadata accessor for Prompt.PromptFragment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = type metadata accessor for Prompt.SpecialToken(0);
      v7 = *(int *)(v6 + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Locale();
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
      v12 = type metadata accessor for Prompt.Delimiter(0);
      *(_QWORD *)((char *)a1 + *(int *)(v12 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 20));
      *(_QWORD *)((char *)a1 + *(int *)(v12 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v12 + 24));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for Prompt.PromptFragment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Prompt.Delimiter(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t outlined assign with copy of Prompt.PromptFragment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Prompt.PromptFragment(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_1_9(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  _s10Foundation6LocaleVSgWOcTm_0(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

void OUTLINED_FUNCTION_2_7(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *v3 = a1;
  v3[1] = v1;
  v7 = (_QWORD *)((char *)v3 + *(int *)(v2 + 24));
  *v7 = 0;
  v7[1] = 0;
  outlined assign with take of Locale?(v5, v6, v4);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  type metadata accessor for Prompt.SpecialToken(0);
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_9_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

void OUTLINED_FUNCTION_10_7()
{
  Hasher._combine(_:)(1uLL);
}

void OUTLINED_FUNCTION_11_5()
{
  Hasher._combine(_:)(5uLL);
}

void OUTLINED_FUNCTION_12_3()
{
  Hasher._combine(_:)(3uLL);
}

void OUTLINED_FUNCTION_13_6()
{
  Hasher._combine(_:)(2uLL);
}

void OUTLINED_FUNCTION_14_6()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_26_3(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_27_4(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_35_1()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_36_3()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

BOOL OUTLINED_FUNCTION_38_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_41_2()
{
  Hasher._combine(_:)(4uLL);
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_45_2(uint64_t a1, uint64_t a2)
{
  return outlined consume of JSON(a1, a2, 3);
}

void OUTLINED_FUNCTION_47_2()
{
  Swift::UInt64 v0;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    Hasher._combine(_:)(v0);
  else
    Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary<>.hash(into:)(v1 - 160, v0);
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_61_3(uint64_t a1, uint64_t a2)
{
  return outlined consume of JSON(a1, a2, 4);
}

uint64_t OUTLINED_FUNCTION_62_3()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_65_2()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 120));
}

uint64_t OUTLINED_FUNCTION_69_2()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_70_2(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_71_2()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_72_2()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = v1;
}

uint64_t OUTLINED_FUNCTION_75_0(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  return outlined copy of Data._Representation(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

void OUTLINED_FUNCTION_76_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

void OUTLINED_FUNCTION_77_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 - 192);
  *(_QWORD *)(v0 - 120) = *(_QWORD *)(v0 - 184);
  *(_QWORD *)(v0 - 112) = v1;
  v2 = *(_QWORD *)(v0 - 208);
  *(_QWORD *)(v0 - 104) = *(_QWORD *)(v0 - 200);
  *(_QWORD *)(v0 - 96) = v2;
}

void OUTLINED_FUNCTION_78_2(uint64_t a1@<X8>)
{
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
}

uint64_t OUTLINED_FUNCTION_81_1()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_88_3(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_90_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_91_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_97_1(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of (Locale?, Locale?)(a1, v1);
}

void OUTLINED_FUNCTION_98_3()
{
  char v0;

  Hasher._combine(_:)(v0 & 1);
}

uint64_t OUTLINED_FUNCTION_103_2()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_109_3()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_110_3(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of (Locale?, Locale?)(a1, v1);
}

void OUTLINED_FUNCTION_111_2()
{
  JUMPOUT(0x2495A77ACLL);
}

uint64_t OUTLINED_FUNCTION_113_3()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_114_3()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

void OUTLINED_FUNCTION_115_3()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_116_3()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_117_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_121_3()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_123_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of (Locale?, Locale?)(v2, a2);
}

uint64_t OUTLINED_FUNCTION_125_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_127_3()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_130_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_132_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_133_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_134_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_136_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_137_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_142_2(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s10Foundation6LocaleVSgWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_143_1(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_145_1(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s19TokenGenerationCore7GrammarVWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_147_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_148_1(uint64_t a1, uint64_t a2)
{
  return outlined copy of JSON(a1, a2, 3);
}

uint64_t OUTLINED_FUNCTION_149_1()
{
  return type metadata accessor for GenerationError();
}

uint64_t OUTLINED_FUNCTION_150_0()
{
  return type metadata accessor for Prompt.Delimiter(0);
}

void OUTLINED_FUNCTION_151_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _s10Foundation6LocaleVSgWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_152_1()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_154()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_155_0(uint64_t a1, uint64_t a2)
{
  return outlined copy of JSON(a1, a2, 4);
}

NSArray OUTLINED_FUNCTION_157_0()
{
  return Array._bridgeToObjectiveC()();
}

_QWORD *OUTLINED_FUNCTION_160_0(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_161_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_164()
{
  return type metadata accessor for Prompt.Delimiter(0);
}

uint64_t OUTLINED_FUNCTION_165_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary<>.hash(into:)(v1 - 160, v0);
}

uint64_t OUTLINED_FUNCTION_166_0()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Dictionary<>.hash(into:)(v1 - 160, v0);
}

uint64_t OUTLINED_FUNCTION_169_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_170_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_171_0()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of (Locale?, Locale?)(v1, v0);
}

void OUTLINED_FUNCTION_172_0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(v0, v1);
}

uint64_t OUTLINED_FUNCTION_173_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_174_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_175_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_176_0()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_177_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_181@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t OUTLINED_FUNCTION_182()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_183(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

void OUTLINED_FUNCTION_184()
{
  Prompt.SpecialToken.hash(into:)();
}

char *OUTLINED_FUNCTION_185(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_186()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_187()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_188(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_189()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_192()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of Grammar(v1, v0);
}

uint64_t OUTLINED_FUNCTION_193@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 128));
}

void OUTLINED_FUNCTION_195()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_196(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_197()
{
  static Prompt.+= infix(_:_:)();
}

void OUTLINED_FUNCTION_198(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *v3 = a1;
  v3[1] = v1;
  v4 = (_QWORD *)((char *)v3 + *(int *)(v2 + 24));
  *v4 = 0;
  v4[1] = 0;
}

void OUTLINED_FUNCTION_201()
{
  Swift::UInt64 v0;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    Hasher._combine(_:)(v0);
  else
    Hasher._combine(_:)(0);
}

void OUTLINED_FUNCTION_202()
{
  Swift::String v0;

  v0._countAndFlagsBits = 15934;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_203(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_204()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_205()
{
  return type metadata accessor for Prompt.Delimiter(0);
}

uint64_t OUTLINED_FUNCTION_207()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_208()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_209()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_210()
{
  Swift::UInt64 v0;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    Hasher._combine(_:)(v0);
  else
    Hasher._combine(_:)(0);
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  _OWORD *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;

  v84 = OUTLINED_FUNCTION_18_5();
  v74 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  OUTLINED_FUNCTION_62_0();
  v73 = v3 - v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_62_0();
  v7 = v6 - v5;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_62_0();
  v11 = v10 - v9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, Any));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_62_0();
  v16 = v15 - v14;
  v17 = type metadata accessor for Prompt.SpecialToken(0);
  v83 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_35_0();
  v90 = v18;
  MEMORY[0x24BDAC7A8](v19);
  v82 = (uint64_t)&v71 - v20;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: String));
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_35_0();
  v79 = v22;
  MEMORY[0x24BDAC7A8](v23);
  v78 = (uint64_t)&v71 - v24;
  v85 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Prompt.SpecialToken, Any>);
    v25 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v25 = MEMORY[0x24BEE4B00];
  }
  v26 = *(_QWORD *)(v85 + 64);
  v76 = v85 + 64;
  v27 = -1 << *(_BYTE *)(v85 + 32);
  if (-v27 < 64)
    v28 = ~(-1 << -(char)v27);
  else
    v28 = -1;
  v29 = v28 & v26;
  v71 = -1 << *(_BYTE *)(v85 + 32);
  v75 = (unint64_t)(63 - v27) >> 6;
  v30 = v25 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  v86 = 0;
  v77 = MEMORY[0x24BEE4AD8] + 8;
  v87 = v25;
  v72 = v17;
  if (!v29)
    goto LABEL_9;
LABEL_8:
  v89 = (v29 - 1) & v29;
  v31 = __clz(__rbit64(v29)) | (v86 << 6);
  while (1)
  {
    v40 = v85;
    v41 = *(_QWORD *)(v85 + 48);
    v88 = *(_QWORD *)(v83 + 72);
    v42 = v78;
    outlined init with copy of Prompt.SpecialToken(v41 + v88 * v31, v78, type metadata accessor for Prompt.SpecialToken);
    v43 = (uint64_t *)(*(_QWORD *)(v40 + 56) + 16 * v31);
    v44 = *v43;
    v45 = v43[1];
    v46 = v81;
    v47 = (_QWORD *)(v42 + *(int *)(v81 + 48));
    *v47 = v44;
    v47[1] = v45;
    v48 = v79;
    outlined init with take of Locale?(v42, v79, &demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: String));
    v49 = (uint64_t *)(v48 + *(int *)(v46 + 48));
    v50 = (_OWORD *)(v11 + *(int *)(v80 + 48));
    outlined init with take of Prompt.SpecialToken(v48, v11);
    v51 = v49[1];
    v91 = *v49;
    v92 = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v52 = (_OWORD *)(v16 + *(int *)(v12 + 48));
    outlined init with take of Prompt.SpecialToken(v11, v16);
    outlined init with take of Any(v50, v52);
    v53 = v82;
    outlined init with take of Prompt.SpecialToken(v16, v82);
    outlined init with take of Any(v52, &v94);
    v54 = v53;
    v55 = v90;
    outlined init with take of Prompt.SpecialToken(v54, v90);
    outlined init with take of Any(&v94, &v93);
    v56 = v87;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined init with copy of Locale?(v55 + *(int *)(v17 + 20), v7);
    v57 = v84;
    if (__swift_getEnumTagSinglePayload(v7, 1, v84) == 1)
    {
      OUTLINED_FUNCTION_82_3();
    }
    else
    {
      v58 = v74;
      v59 = v7;
      v60 = v73;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v73, v59, v57);
      OUTLINED_FUNCTION_81_2();
      lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
      dispatch thunk of Hashable.hash(into:)();
      v61 = v60;
      v7 = v59;
      v56 = v87;
      v17 = v72;
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v61, v57);
    }
    if (*(_QWORD *)(v90 + *(int *)(v17 + 24) + 8))
    {
      OUTLINED_FUNCTION_81_2();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_82_3();
    }
    v62 = Hasher._finalize()();
    v63 = -1 << *(_BYTE *)(v56 + 32);
    v64 = v62 & ~v63;
    v65 = v64 >> 6;
    if (((-1 << v64) & ~*(_QWORD *)(v30 + 8 * (v64 >> 6))) == 0)
    {
      v67 = 0;
      v68 = (unint64_t)(63 - v63) >> 6;
      while (++v65 != v68 || (v67 & 1) == 0)
      {
        v69 = v65 == v68;
        if (v65 == v68)
          v65 = 0;
        v67 |= v69;
        v70 = *(_QWORD *)(v30 + 8 * v65);
        if (v70 != -1)
        {
          v66 = __clz(__rbit64(~v70)) + (v65 << 6);
          goto LABEL_44;
        }
      }
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    v66 = __clz(__rbit64((-1 << v64) & ~*(_QWORD *)(v30 + 8 * (v64 >> 6)))) | v64 & 0x7FFFFFFFFFFFFFC0;
LABEL_44:
    *(_QWORD *)(v30 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
    outlined init with take of Prompt.SpecialToken(v90, *(_QWORD *)(v56 + 48) + v66 * v88);
    outlined init with take of Any(&v93, (_OWORD *)(*(_QWORD *)(v56 + 56) + 32 * v66));
    ++*(_QWORD *)(v56 + 16);
    v29 = v89;
    if (v89)
      goto LABEL_8;
LABEL_9:
    v32 = v86 + 1;
    if (__OFADD__(v86, 1))
      goto LABEL_48;
    if (v32 >= v75)
      goto LABEL_46;
    v33 = *(_QWORD *)(v76 + 8 * v32);
    v34 = v86 + 1;
    if (!v33)
    {
      OUTLINED_FUNCTION_49_3();
      if (v35 == v36)
        goto LABEL_46;
      OUTLINED_FUNCTION_35_2();
      if (!v33)
      {
        OUTLINED_FUNCTION_49_3();
        if (v35 == v36)
          goto LABEL_46;
        OUTLINED_FUNCTION_35_2();
        if (!v33)
        {
          OUTLINED_FUNCTION_49_3();
          if (v35 == v36)
            goto LABEL_46;
          OUTLINED_FUNCTION_35_2();
          if (!v33)
            break;
        }
      }
    }
LABEL_28:
    v89 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v34 << 6);
    v86 = v34;
  }
  v38 = v37 + 4;
  if (v38 >= v75)
  {
LABEL_46:
    swift_release();
    outlined consume of Set<Rule>.Iterator._Variant();
    return;
  }
  v33 = *(_QWORD *)(v76 + 8 * v38);
  if (v33)
  {
    v34 = v38;
    goto LABEL_28;
  }
  while (!__OFADD__(v38, 1))
  {
    OUTLINED_FUNCTION_49_3();
    if (v35 == v36)
      goto LABEL_46;
    OUTLINED_FUNCTION_35_2();
    v38 = v39 + 1;
    if (v33)
      goto LABEL_28;
  }
LABEL_49:
  __break(1u);
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  __int128 v40;
  uint64_t v41;
  __int128 v42[3];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PromptComponentValueConvertible>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v36 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v35 = (unint64_t)(63 - v3) >> 6;
  v6 = (__int128 *)v39;
  v7 = (__int128 *)&v41;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v9 = MEMORY[0x24BEE0D00];
  v10 = MEMORY[0x24BE7AD80];
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        v38 = (v5 - 1) & v5;
        v11 = __clz(__rbit64(v5)) | (v37 << 6);
      }
      else
      {
        v12 = v37 + 1;
        if (__OFADD__(v37, 1))
          goto LABEL_34;
        if (v12 >= v35)
        {
LABEL_31:
          outlined consume of Set<Rule>.Iterator._Variant();
          return (unint64_t)v2;
        }
        v13 = *(_QWORD *)(v36 + 8 * v12);
        v14 = v37 + 1;
        if (!v13)
        {
          v14 = v37 + 2;
          if (v37 + 2 >= v35)
            goto LABEL_31;
          v13 = *(_QWORD *)(v36 + 8 * v14);
          if (!v13)
          {
            v14 = v37 + 3;
            if (v37 + 3 >= v35)
              goto LABEL_31;
            v13 = *(_QWORD *)(v36 + 8 * v14);
            if (!v13)
            {
              v14 = v37 + 4;
              if (v37 + 4 >= v35)
                goto LABEL_31;
              v13 = *(_QWORD *)(v36 + 8 * v14);
              if (!v13)
              {
                v15 = v37 + 5;
                if (v37 + 5 >= v35)
                  goto LABEL_31;
                v13 = *(_QWORD *)(v36 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      goto LABEL_35;
                    if (v14 >= v35)
                      goto LABEL_31;
                    v13 = *(_QWORD *)(v36 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_25;
                  }
                }
                v14 = v37 + 5;
              }
            }
          }
        }
LABEL_25:
        v37 = v14;
        v38 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
      }
      v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      v19 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v11);
      v20 = *v19;
      v21 = v19[1];
      v39[3] = v9;
      v39[4] = v10;
      v39[0] = v20;
      v39[1] = v21;
      outlined init with take of UnkeyedDecodingContainer(v6, (uint64_t)v7);
      outlined init with take of UnkeyedDecodingContainer(v7, (uint64_t)v42);
      outlined init with take of UnkeyedDecodingContainer(v42, (uint64_t)&v40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      result = specialized __RawDictionaryStorage.find<A>(_:)();
      v22 = result;
      if ((v23 & 1) == 0)
        break;
      v24 = v7;
      v25 = v1;
      v26 = v10;
      v27 = v9;
      v28 = v6;
      v29 = (_QWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v29 = v18;
      v29[1] = v17;
      v6 = v28;
      v9 = v27;
      v10 = v26;
      v1 = v25;
      v7 = v24;
      v30 = v2[7] + 40 * v22;
      __swift_destroy_boxed_opaque_existential_1(v30);
      result = outlined init with take of UnkeyedDecodingContainer(&v40, v30);
      v5 = v38;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v31 = (_QWORD *)(v2[6] + 16 * result);
    *v31 = v18;
    v31[1] = v17;
    result = outlined init with take of UnkeyedDecodingContainer(&v40, v2[7] + 40 * result);
    v32 = v2[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_33;
    v2[2] = v34;
    v5 = v38;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t PromptTemplateInfo.templateID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PromptTemplateInfo.variableBindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PromptTemplateInfo.locale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PromptTemplateInfo() + 24);
  return outlined init with copy of Locale?(v3, a1);
}

uint64_t type metadata accessor for PromptTemplateInfo()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PromptTemplateInfo;
  if (!type metadata singleton initialization cache for PromptTemplateInfo)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PromptTemplateInfo.init(templateID:variableBindings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)a4 + *(int *)(OUTLINED_FUNCTION_59_2(a1, a2, a3, a4) + 24);
  v5 = OUTLINED_FUNCTION_18_5();
  return __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
}

void PromptTemplateInfo.init(templateID:variableBindings:locale:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;

  v7 = OUTLINED_FUNCTION_59_2(a1, a2, a3, a5);
  outlined init with take of Locale?(a4, (uint64_t)a5 + *(int *)(v7 + 24), &demangling cache variable for type metadata for Locale?);
}

uint64_t static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<LLMBundle>);
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

{
  _QWORD *v3;
  uint64_t v4;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResourceBundleIdentifier<AssetBackedLLMBundle>);
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

uint64_t static PromptTemplateHelper.fill(modelbundleIdentifier:promptTemplate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_32_2();
  type metadata accessor for _LoadedModelConfiguration();
  v2 = OUTLINED_FUNCTION_91_2();
  static _LoadedModelConfiguration.create(modelBundleIdentifier:)(v2);
  *(_QWORD *)(v1 + 72) = v3;
  if (v0)
  {
    OUTLINED_FUNCTION_8_8();
    OUTLINED_FUNCTION_76_2();
    return OUTLINED_FUNCTION_21_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v5 = v3;
    OUTLINED_FUNCTION_8_8();
    *(_QWORD *)(v1 + 16) = v5;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 80) = v6;
    v7 = OUTLINED_FUNCTION_102_3(v6);
    return OUTLINED_FUNCTION_20_2(v7, v8);
  }
}

{
  OUTLINED_FUNCTION_18_6();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_32_2();
  type metadata accessor for _LoadedModelConfiguration();
  v2 = OUTLINED_FUNCTION_91_2();
  v3 = static _LoadedModelConfiguration.create(modelBundleIdentifier:)(v2);
  *(_QWORD *)(v1 + 72) = v3;
  if (v0)
  {
    OUTLINED_FUNCTION_8_8();
    OUTLINED_FUNCTION_76_2();
    return OUTLINED_FUNCTION_21_2(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    v5 = v3;
    OUTLINED_FUNCTION_8_8();
    *(_QWORD *)(v1 + 16) = v5;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 80) = v6;
    v7 = OUTLINED_FUNCTION_102_3(v6);
    return OUTLINED_FUNCTION_20_2(v7, v8);
  }
}

{
  OUTLINED_FUNCTION_18_6();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

{
  uint64_t (*v0)(void);

  swift_release();
  OUTLINED_FUNCTION_48_1();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_75_1();
  return OUTLINED_FUNCTION_4_8(v0);
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_76_2();
  return OUTLINED_FUNCTION_4_8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ModelConfiguration.render(promptTemplate:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[2] = a1;
  v3[3] = a2;
  v4 = type metadata accessor for Prompt();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v5 = OUTLINED_FUNCTION_14_2();
  v6 = *v2;
  v3[6] = v5;
  v3[7] = v6;
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

uint64_t ModelConfiguration.render(promptTemplate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 16))
      {
        swift_bridgeObjectRetain();
        v3 = OUTLINED_FUNCTION_89_2();
        if ((v4 & 1) != 0)
        {
          v5 = *(_QWORD *)(v0 + 24);
          *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3 + 8);
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_15_1();
          v6 = *(_QWORD *)(v5 + 16);
          v7 = *(int *)(type metadata accessor for PromptTemplateInfo() + 24);
          swift_bridgeObjectRetain();
          Prompt.init(template:)();
          v8 = *(_QWORD *)(v0 + 24) + v7;
          v9 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v6);
          *(_QWORD *)(v0 + 72) = v9;
          v10 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 80) = v10;
          *v10 = v0;
          v10[1] = ModelConfiguration.render(promptTemplate:);
          return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(*(_QWORD *)(v0 + 16), v9, MEMORY[0x24BEE4AF8], v8);
        }
        OUTLINED_FUNCTION_15_1();
      }
    }
  }
  lazy protocol witness table accessor for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError();
  swift_allocError();
  swift_willThrow();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_71_3();
  *v2 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_54_1();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_3(*(_QWORD *)(v0 + 40));
  OUTLINED_FUNCTION_123();
  OUTLINED_FUNCTION_15_3();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_75_1();
  return v1();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_4_8(*(uint64_t (**)(void))(v0 + 8));
}

void ModelConfiguration.PrompteTemplateError.init(rawValue:)(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ModelConfiguration.PrompteTemplateError.init(rawValue:), v3);
  OUTLINED_FUNCTION_15_1();
  *a2 = v5 != 0;
  OUTLINED_FUNCTION_99();
}

unint64_t ModelConfiguration.PrompteTemplateError.rawValue.getter()
{
  return 0xD000000000000016;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ModelConfiguration.PrompteTemplateError(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  ModelConfiguration.PrompteTemplateError.init(rawValue:)(*a1, a2);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ModelConfiguration.PrompteTemplateError@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = ModelConfiguration.PrompteTemplateError.rawValue.getter();
  *a1 = 0xD000000000000016;
  a1[1] = v3;
  return result;
}

uint64_t Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[45] = a2;
  v4[46] = a4;
  v4[44] = a1;
  v5 = type metadata accessor for Prompt.ImageFormat();
  v4[47] = v5;
  v4[48] = *(_QWORD *)(v5 - 8);
  v4[49] = OUTLINED_FUNCTION_14_2();
  v6 = type metadata accessor for Prompt.ImageData();
  v4[50] = v6;
  v4[51] = *(_QWORD *)(v6 - 8);
  v4[52] = OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Component.Privacy?);
  v4[53] = OUTLINED_FUNCTION_14_2();
  v7 = type metadata accessor for BindableVariable();
  v4[54] = v7;
  v4[55] = *(_QWORD *)(v7 - 8);
  v4[56] = OUTLINED_FUNCTION_14_2();
  v8 = type metadata accessor for Prompt.Delimiter(0);
  v4[57] = v8;
  v4[58] = *(_QWORD *)(v8 - 8);
  v4[59] = OUTLINED_FUNCTION_14_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v4[60] = OUTLINED_FUNCTION_14_2();
  v4[61] = type metadata accessor for Prompt.SpecialToken(0);
  v4[62] = OUTLINED_FUNCTION_16_4();
  v4[63] = OUTLINED_FUNCTION_26_4();
  v9 = type metadata accessor for SpecialToken();
  v4[64] = v9;
  v4[65] = *(_QWORD *)(v9 - 8);
  v4[66] = OUTLINED_FUNCTION_14_2();
  v10 = type metadata accessor for Prompt.Component.Value();
  v4[67] = v10;
  v4[68] = *(_QWORD *)(v10 - 8);
  v4[69] = OUTLINED_FUNCTION_16_4();
  v4[70] = OUTLINED_FUNCTION_26_4();
  v11 = type metadata accessor for Prompt.Component();
  v4[71] = v11;
  v4[72] = *(_QWORD *)(v11 - 8);
  v4[73] = OUTLINED_FUNCTION_14_2();
  v12 = type metadata accessor for Prompt();
  v4[74] = v12;
  v4[75] = *(_QWORD *)(v12 - 8);
  v4[76] = OUTLINED_FUNCTION_16_4();
  v4[77] = OUTLINED_FUNCTION_26_4();
  v4[78] = OUTLINED_FUNCTION_26_4();
  v13 = (_QWORD *)swift_task_alloc();
  v4[79] = v13;
  *v13 = v4;
  v13[1] = Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:);
  return Prompt.transform(includeAttachments:customDataTransformers:)();
}

uint64_t Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_71_3();
  *v2 = *v1;
  *(_QWORD *)(v3 + 640) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_54_1();
  return OUTLINED_FUNCTION_3_4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v5 = *(_QWORD *)(v2 + 624);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v2 + 600) + 32))(v5, *(_QWORD *)(v2 + 616), *(_QWORD *)(v2 + 592));
  *(_QWORD *)(v2 + 160) = 0;
  v6 = v2 + 160;
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 168) = 0xE000000000000000;
  *(_QWORD *)(v2 + 176) = v7;
  *(_QWORD *)(v2 + 184) = v7;
  v8 = Prompt.components.getter();
  *(_QWORD *)(v2 + 648) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v2 + 656) = v9;
  if (!v9)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_4();
    OUTLINED_FUNCTION_65_3(v38);
    OUTLINED_FUNCTION_17_2();
    OUTLINED_FUNCTION_93_1();
    OUTLINED_FUNCTION_40_3();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_22_1();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_94_3();
    OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_70_3();
    OUTLINED_FUNCTION_63_3();
    OUTLINED_FUNCTION_61_4();
    OUTLINED_FUNCTION_75_1();
    goto LABEL_21;
  }
  v10 = 0;
  v68 = v2 + 56;
  v70 = v2 + 16;
  v11 = *(_QWORD *)(v2 + 576);
  *(_DWORD *)(v2 + 704) = *(_DWORD *)(v11 + 80);
  v12 = (_DWORD *)MEMORY[0x24BE7AAE8];
  *(_QWORD *)(v2 + 664) = *(_QWORD *)(v11 + 72);
  *(_DWORD *)(v2 + 708) = *v12;
  *(_DWORD *)(v2 + 712) = *MEMORY[0x24BE7AAB8];
  v13 = (_DWORD *)MEMORY[0x24BE7AAF8];
  *(_DWORD *)(v2 + 716) = *MEMORY[0x24BE7AAB0];
  *(_DWORD *)(v2 + 720) = *v13;
  *(_DWORD *)(v2 + 724) = *MEMORY[0x24BE7A9A0];
  *(_DWORD *)(v2 + 728) = *MEMORY[0x24BE7A998];
  *(_QWORD *)(v2 + 672) = *(_QWORD *)(v11 + 16);
  while (1)
  {
    OUTLINED_FUNCTION_2_8(v10);
    Prompt.Component.value.getter();
    v14 = OUTLINED_FUNCTION_56_2();
    if (v14 != (_DWORD)v3)
      break;
    OUTLINED_FUNCTION_13_7();
    v15 = *v1;
    v1 = (uint64_t *)v1[1];
    *(_QWORD *)(v2 + 320) = v15;
    *(_QWORD *)(v2 + 328) = v1;
    v4 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_77_3();
    static Prompt.+= infix(_:_:)();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_40_0();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v0);
LABEL_18:
    OUTLINED_FUNCTION_101_3();
    if (v22)
      goto LABEL_20;
  }
  if (v14 == *(_DWORD *)(v2 + 712))
  {
    v40 = *(_QWORD *)(v2 + 440);
    v41 = *(_QWORD *)(v2 + 360);
    OUTLINED_FUNCTION_7_7(*(_QWORD *)(v2 + 544));
    OUTLINED_FUNCTION_9_7(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32));
    v42 = BindableVariable.name.getter();
    v50 = v43;
    if (*(_QWORD *)(v41 + 16) && (v42 = OUTLINED_FUNCTION_89_2(), (v43 & 1) != 0))
      OUTLINED_FUNCTION_36_4(v42, v43, v44, v45, v46, v47, v48, v49, v68, v70);
    else
      OUTLINED_FUNCTION_90_2(v42, v43, v44, v45, v46, v47, v48, v49, v68, v70);
    OUTLINED_FUNCTION_15_1();
    if (*(_QWORD *)(v2 + 40))
    {
      v51 = *(_QWORD *)(v2 + 424);
      outlined init with take of UnkeyedDecodingContainer(v71, (uint64_t)v69);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_248C911B0;
      v52 = *(_QWORD *)(v2 + 80);
      v53 = *(_QWORD *)(v2 + 88);
      __swift_project_boxed_opaque_existential_1(v69, v52);
      MEMORY[0x2495A7B90](v52, v53);
      v54 = type metadata accessor for Prompt.Component.Privacy();
      OUTLINED_FUNCTION_9_6(v51, v55, v56, v54);
      Prompt.Component.init(value:priority:privacy:)();
      Prompt.init(components:)();
      v57 = (_QWORD *)swift_task_alloc();
      OUTLINED_FUNCTION_78_3(v57);
      OUTLINED_FUNCTION_60_4();
      return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)();
    }
    v84 = *(_QWORD *)(v2 + 624);
    v81 = *(_QWORD *)(v2 + 600);
    v83 = *(_QWORD *)(v2 + 592);
    OUTLINED_FUNCTION_45_3();
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_123();
    outlined destroy of PromptComponentValueConvertible?((uint64_t)v71);
    OUTLINED_FUNCTION_68_3();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A9C8], MEMORY[0x24BE7A9D0]);
    v65 = OUTLINED_FUNCTION_5_7();
    v67 = OUTLINED_FUNCTION_28_3(v65, v66);
    OUTLINED_FUNCTION_6_6(v67, *MEMORY[0x24BE7A9C0]);
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_27_5(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
    OUTLINED_FUNCTION_19_5();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v84, v83);
LABEL_30:
    OUTLINED_FUNCTION_15_5();
    swift_task_dealloc();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_80_2();
    OUTLINED_FUNCTION_93_1();
    OUTLINED_FUNCTION_40_3();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_94_3();
    OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_70_3();
    OUTLINED_FUNCTION_63_3();
    OUTLINED_FUNCTION_61_4();
LABEL_21:
    OUTLINED_FUNCTION_60_4();
    __asm { BR              X0 }
  }
  if (v14 == *(_DWORD *)(v2 + 716))
  {
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_7_7(v16);
    OUTLINED_FUNCTION_53_1();
    SpecialToken.identifier.getter();
    OUTLINED_FUNCTION_52_2();
    v17 = OUTLINED_FUNCTION_18_5();
    OUTLINED_FUNCTION_10_8(v17);
    OUTLINED_FUNCTION_92_3();
    *(_QWORD *)(v2 + 256) = 0;
    *(_QWORD *)(v2 + 264) = 0xE000000000000000;
    OUTLINED_FUNCTION_99_3();
  }
  if (v14 != *(_DWORD *)(v2 + 720))
  {
    OUTLINED_FUNCTION_55_2();
    OUTLINED_FUNCTION_73_3();
    v80 = v59;
    v82 = v58;
    v60 = *(_QWORD *)(v2 + 544);
    v77 = *(_QWORD *)(v2 + 536);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_68_3();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A9C8], MEMORY[0x24BE7A9D0]);
    v61 = OUTLINED_FUNCTION_5_7();
    v63 = OUTLINED_FUNCTION_48_3(v61, v62);
    OUTLINED_FUNCTION_6_6(v63, *MEMORY[0x24BE7A9B0]);
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_27_5(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2 + 320, v80);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v82, v77);
    goto LABEL_30;
  }
  v18 = *(_DWORD *)(v2 + 728);
  OUTLINED_FUNCTION_85_2();
  v19 = *(_QWORD *)(v2 + 408);
  OUTLINED_FUNCTION_7_7(v20);
  OUTLINED_FUNCTION_9_7(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32));
  OUTLINED_FUNCTION_80_3();
  v21 = OUTLINED_FUNCTION_58_2();
  v22 = v21 == v6 || v21 == v18;
  if (!v22)
  {
    OUTLINED_FUNCTION_60_4();
    return _diagnoseUnexpectedEnumCase<A>(type:)();
  }
  v23 = v21;
  v78 = v6;
  v24 = Prompt.ImageData.data.getter();
  v0 = v25;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0xE000000000000000;
  MEMORY[0x2495A7CEC](0);
  OUTLINED_FUNCTION_34_2();
  v26 = OUTLINED_FUNCTION_57_2();
  OUTLINED_FUNCTION_115_3();
  v28 = v27;
  v29 = *(_QWORD *)(v2 + 128);
  v30 = *(_QWORD *)(v2 + 136);
  OUTLINED_FUNCTION_98_4();
  result = String.count.getter();
  v76 = (uint64_t *)v26;
  v31 = *(_QWORD *)(v26 + 16);
  v32 = *(_QWORD *)(v28 + 16);
  v3 = v31 + v32;
  if (!__OFADD__(v31, v32))
  {
    v4 = result;
    OUTLINED_FUNCTION_98_4();
    v33 = *(_QWORD *)(v28 + 24);
    if (*(_QWORD *)(v28 + 16) >= v33 >> 1)
    {
      OUTLINED_FUNCTION_80_1(v33);
      OUTLINED_FUNCTION_66_2();
      v28 = v37;
    }
    v34 = v23 != v78;
    v79 = *(_QWORD *)(v2 + 584);
    v74 = *(_QWORD *)(v2 + 576);
    v75 = *(_QWORD *)(v2 + 568);
    v35 = *(_QWORD *)(v2 + 408);
    v72 = *(_QWORD *)(v2 + 400);
    v73 = *(_QWORD *)(v2 + 416);
    OUTLINED_FUNCTION_74_2(v34);
    v36[5] = v24;
    v36[6] = v0;
    v36[7] = v4;
    v36[8] = v3;
    OUTLINED_FUNCTION_97_2();
    *(_QWORD *)(v2 + 96) = v29;
    *(_QWORD *)(v2 + 104) = v30;
    v1 = v76;
    *(_QWORD *)(v2 + 112) = v76;
    *(_QWORD *)(v2 + 120) = v28;
    v5 = v2 + 160;
    static Prompt.+= infix(_:_:)();
    v6 = v2 + 160;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_97_2();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v73, v72);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v79, v75);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_93_1();
  OUTLINED_FUNCTION_40_3();
  OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_48_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_11_6(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_123();
  }
  OUTLINED_FUNCTION_54_1();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 192);
  v1 = v0 + 224;
  v2 = *(_QWORD *)(v0 + 600);
  v66 = *(_QWORD *)(v0 + 608);
  v3 = *(uint64_t **)(v0 + 592);
  v75 = *(_QWORD *)(v0 + 584);
  v67 = *(_QWORD *)(v0 + 576);
  v70 = *(_QWORD *)(v0 + 568);
  v4 = *(uint64_t (**)(uint64_t))(v0 + 440);
  v65 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 240) = v6;
  *(_QWORD *)(v0 + 248) = v7;
  static Prompt.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_26();
  (*(void (**)(uint64_t, uint64_t *))(v2 + 8))(v66, v3);
  (*((void (**)(uint64_t, uint64_t))v4 + 1))(v65, v5);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v75, v70);
  v64 = (_QWORD *)(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v8 = *(_QWORD *)(v0 + 680) + 1;
  if (v8 == *(_QWORD *)(v0 + 656))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_4();
    OUTLINED_FUNCTION_65_3(v9);
    OUTLINED_FUNCTION_17_2();
    OUTLINED_FUNCTION_93_1();
    OUTLINED_FUNCTION_40_3();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_94_3();
    OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_70_3();
    OUTLINED_FUNCTION_63_3();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_61_4();
    OUTLINED_FUNCTION_75_1();
    goto LABEL_3;
  }
  v62 = v0 + 16;
  while (1)
  {
    OUTLINED_FUNCTION_2_8(v8);
    Prompt.Component.value.getter();
    v11 = OUTLINED_FUNCTION_56_2();
    if (v11 != (_DWORD)v7)
      break;
    OUTLINED_FUNCTION_13_7();
    v12 = *v3;
    v3 = (uint64_t *)v3[1];
    *(_QWORD *)(v0 + 320) = v12;
    *(_QWORD *)(v0 + 328) = v3;
    v2 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_77_3();
    static Prompt.+= infix(_:_:)();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_40_0();
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t)))(v7 + 8))(v1, v4);
LABEL_20:
    OUTLINED_FUNCTION_101_3();
    if (v33)
      goto LABEL_2;
  }
  if (v11 == *(_DWORD *)(v0 + 712))
  {
    v34 = *(_QWORD *)(v0 + 440);
    v35 = *(_QWORD *)(v0 + 360);
    OUTLINED_FUNCTION_7_7(*(_QWORD *)(v0 + 544));
    OUTLINED_FUNCTION_9_7(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32));
    v36 = BindableVariable.name.getter();
    v44 = v37;
    if (*(_QWORD *)(v35 + 16) && (v36 = OUTLINED_FUNCTION_89_2(), (v37 & 1) != 0))
      OUTLINED_FUNCTION_36_4(v36, v37, v38, v39, v40, v41, v42, v43, v61, v62);
    else
      OUTLINED_FUNCTION_90_2(v36, v37, v38, v39, v40, v41, v42, v43, v61, v62);
    OUTLINED_FUNCTION_15_1();
    if (*(_QWORD *)(v0 + 40))
    {
      v45 = *(_QWORD *)(v0 + 424);
      outlined init with take of UnkeyedDecodingContainer(v63, (uint64_t)v64);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_248C911B0;
      v46 = *(_QWORD *)(v0 + 80);
      v47 = *(_QWORD *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v64, v46);
      MEMORY[0x2495A7B90](v46, v47);
      v48 = type metadata accessor for Prompt.Component.Privacy();
      OUTLINED_FUNCTION_9_6(v45, v49, v50, v48);
      Prompt.Component.init(value:priority:privacy:)();
      Prompt.init(components:)();
      v51 = (_QWORD *)swift_task_alloc();
      OUTLINED_FUNCTION_78_3(v51);
      OUTLINED_FUNCTION_72_3();
      return Prompt.renderToTokenGenerationPrompt(bindingVariables:customDataTransformers:locale:)();
    }
    v78 = *(_QWORD *)(v0 + 624);
    v74 = *(_QWORD *)(v0 + 600);
    v77 = *(_QWORD *)(v0 + 592);
    OUTLINED_FUNCTION_45_3();
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_123();
    outlined destroy of PromptComponentValueConvertible?((uint64_t)v63);
    OUTLINED_FUNCTION_68_3();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A9C8], MEMORY[0x24BE7A9D0]);
    v58 = OUTLINED_FUNCTION_5_7();
    v60 = OUTLINED_FUNCTION_28_3(v58, v59);
    OUTLINED_FUNCTION_6_6(v60, *MEMORY[0x24BE7A9C0]);
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_27_5(*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
    OUTLINED_FUNCTION_19_5();
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v78, v77);
    goto LABEL_31;
  }
  if (v11 == *(_DWORD *)(v0 + 716))
  {
    OUTLINED_FUNCTION_31_4();
    v71 = v13;
    OUTLINED_FUNCTION_7_7(v14);
    OUTLINED_FUNCTION_53_1();
    SpecialToken.identifier.getter();
    OUTLINED_FUNCTION_52_2();
    v15 = OUTLINED_FUNCTION_18_5();
    OUTLINED_FUNCTION_10_8(v15);
    OUTLINED_FUNCTION_92_3();
    *(_QWORD *)(v0 + 256) = 0;
    *(_QWORD *)(v0 + 264) = 0xE000000000000000;
    v1 = v0 + 256;
    MEMORY[0x2495A7CEC](0);
    OUTLINED_FUNCTION_34_2();
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_29_2(v16);
    v18 = v17;
    *(_QWORD *)(v0 + 280) = v17;
    outlined init with copy of Prompt.SpecialToken((uint64_t)v4, v71, type metadata accessor for Prompt.SpecialToken);
    v19 = String.count.getter();
    v20 = *(_QWORD *)(v0 + 272);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = __OFADD__(v20, v21);
    v23 = v20 + v21;
    if (v22)
    {
      __break(1u);
      JUMPOUT(0x248C3BF94);
    }
    OUTLINED_FUNCTION_42_4(v19, v23);
    if ((unint64_t)v4 >= v24 >> 1)
    {
      OUTLINED_FUNCTION_80_1(v24);
      v1 = OUTLINED_FUNCTION_57_2();
    }
    v6 = *(_QWORD *)(v0 + 576);
    v68 = *(_QWORD *)(v0 + 568);
    v72 = *(_QWORD *)(v0 + 584);
    v2 = *(_QWORD *)(v0 + 528);
    v7 = *(_QWORD *)(v0 + 520);
    v25 = *(_QWORD *)(v0 + 504);
    *(_QWORD *)(v1 + 16) = (char *)v4 + 1;
    v26 = OUTLINED_FUNCTION_39_2();
    v4 = type metadata accessor for Prompt.Delimiter;
    outlined init with copy of Prompt.SpecialToken(v26, v27, type metadata accessor for Prompt.Delimiter);
    OUTLINED_FUNCTION_95_2();
    v3 = *(uint64_t **)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 280);
    *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 256);
    *(_QWORD *)(v0 + 296) = v3;
    *(_QWORD *)(v0 + 304) = v1;
    *(_QWORD *)(v0 + 312) = v28;
    static Prompt.+= infix(_:_:)();
    OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_25_0();
    _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v25, type metadata accessor for Prompt.SpecialToken);
    OUTLINED_FUNCTION_19_5();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v72, v68);
    goto LABEL_20;
  }
  if (v11 != *(_DWORD *)(v0 + 720))
  {
    OUTLINED_FUNCTION_55_2();
    v73 = *(_QWORD *)(v0 + 592);
    OUTLINED_FUNCTION_73_3();
    v76 = v52;
    v53 = *(_QWORD *)(v0 + 544);
    v69 = *(_QWORD *)(v0 + 536);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_123();
    OUTLINED_FUNCTION_68_3();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.RenderError and conformance Prompt.RenderError, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A9C8], MEMORY[0x24BE7A9D0]);
    v54 = OUTLINED_FUNCTION_5_7();
    v56 = OUTLINED_FUNCTION_48_3(v54, v55);
    OUTLINED_FUNCTION_6_6(v56, *MEMORY[0x24BE7A9B0]);
    OUTLINED_FUNCTION_69_3();
    OUTLINED_FUNCTION_27_5(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    (*((void (**)(uint64_t, uint64_t))v4 + 1))(v0 + 160, v73);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v76, v69);
LABEL_31:
    OUTLINED_FUNCTION_15_5();
    swift_task_dealloc();
    OUTLINED_FUNCTION_15_3();
    OUTLINED_FUNCTION_58_1();
    OUTLINED_FUNCTION_22_1();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_80_2();
    OUTLINED_FUNCTION_93_1();
    OUTLINED_FUNCTION_40_3();
    OUTLINED_FUNCTION_33_4();
    OUTLINED_FUNCTION_48_1();
    OUTLINED_FUNCTION_70_3();
    OUTLINED_FUNCTION_63_3();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_61_4();
LABEL_3:
    OUTLINED_FUNCTION_72_3();
    __asm { BR              X0 }
  }
  v29 = *(_DWORD *)(v0 + 728);
  OUTLINED_FUNCTION_85_2();
  v30 = *(_QWORD *)(v0 + 408);
  OUTLINED_FUNCTION_7_7(v31);
  OUTLINED_FUNCTION_9_7(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32));
  OUTLINED_FUNCTION_80_3();
  v32 = OUTLINED_FUNCTION_58_2();
  v33 = v32 == (_DWORD)v6 || v32 == v29;
  if (v33)
  {
    Prompt.ImageData.data.getter();
    *(_QWORD *)(v0 + 128) = 0;
    *(_QWORD *)(v0 + 136) = 0xE000000000000000;
    OUTLINED_FUNCTION_99_3();
  }
  OUTLINED_FUNCTION_72_3();
  return _diagnoseUnexpectedEnumCase<A>(type:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 592);
  v3 = *(_QWORD *)(v0 + 584);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 568);
  v7 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 432);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 600) + 8);
  v9(*(_QWORD *)(v0 + 608), v2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v9(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_80_2();
  OUTLINED_FUNCTION_93_1();
  OUTLINED_FUNCTION_40_3();
  OUTLINED_FUNCTION_33_4();
  OUTLINED_FUNCTION_48_1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_11_6(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t Prompt.transformToPrepareForTokenGenerationPrompt(customDataTransformers:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = Prompt.transformToPrepareForTokenGenerationPrompt(customDataTransformers:);
  return Prompt.transform(includeAttachments:customDataTransformers:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  OUTLINED_FUNCTION_71_3();
  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_4_8(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t outlined destroy of PromptComponentValueConvertible?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptComponentValueConvertible?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined init with copy of Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_23();
}

void _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_79_3(*(_QWORD *)(v2 - 8));
  OUTLINED_FUNCTION_23();
}

unint64_t lazy protocol witness table accessor for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError;
  if (!lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for ModelConfiguration.PrompteTemplateError, &type metadata for ModelConfiguration.PrompteTemplateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError;
  if (!lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for ModelConfiguration.PrompteTemplateError, &type metadata for ModelConfiguration.PrompteTemplateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelConfiguration.PrompteTemplateError and conformance ModelConfiguration.PrompteTemplateError);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptTemplateInfo(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for PromptTemplateInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Locale();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for PromptTemplateInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for PromptTemplateInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for PromptTemplateInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for PromptTemplateInfo(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptTemplateInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C3C7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    return __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PromptTemplateInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248C3C828(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    OUTLINED_FUNCTION_99();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

void type metadata completion function for PromptTemplateInfo()
{
  unint64_t v0;

  type metadata accessor for Locale?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Locale?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Locale?)
  {
    type metadata accessor for Locale();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale?);
  }
}

ValueMetadata *type metadata accessor for PromptTemplateHelper()
{
  return &type metadata for PromptTemplateHelper;
}

uint64_t storeEnumTagSinglePayload for ModelConfiguration.PrompteTemplateError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248C3C9B4 + 4 * asc_248C928F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248C3C9D4 + 4 * byte_248C928F5[v4]))();
}

_BYTE *sub_248C3C9B4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248C3C9D4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248C3C9DC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248C3C9E4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248C3C9EC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248C3C9F4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ModelConfiguration.PrompteTemplateError()
{
  return &type metadata for ModelConfiguration.PrompteTemplateError;
}

void outlined init with take of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_6_3(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_23();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 680) = a1;
  return (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v1 + 672))(*(_QWORD *)(v1 + 584), *(_QWORD *)(v1 + 648)+ ((*(unsigned __int8 *)(v1 + 704) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 704))+ *(_QWORD *)(v1 + 664) * a1, *(_QWORD *)(v1 + 568));
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_4_8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_6_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[7] + 8))(v0[8], v0[6]);
}

uint64_t OUTLINED_FUNCTION_9_7@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_10_8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  __swift_storeEnumTagSinglePayload(v3, 1, 1, a1);
  *v4 = v1;
  v4[1] = v2;
  v7 = (_QWORD *)((char *)v4 + *(int *)(v5 + 24));
  *v7 = 0;
  v7[1] = 0;
  return outlined assign with take of Locale?(v6, v3);
}

uint64_t OUTLINED_FUNCTION_11_6(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[68] + 96))(v0[70], v0[67]);
}

uint64_t OUTLINED_FUNCTION_15_5()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 624);
}

uint64_t OUTLINED_FUNCTION_16_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_OWORD *)(v0 + 168);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 160);
  *(_OWORD *)(v1 + 8) = v3;
  *(_QWORD *)(v1 + 24) = v2;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_6()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_20_2(uint64_t a1, uint64_t a2)
{
  return ModelConfiguration.render(promptTemplate:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_21_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_27_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_28_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(a2, v3, v4);
}

void OUTLINED_FUNCTION_29_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 272) = a1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_30_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[7] + 16))(v0[8], v0[4], v0[6]);
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_36_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  return outlined init with copy of GuidedGenerationTokenizer(*(_QWORD *)(*(_QWORD *)(v10 + 360) + 56) + 40 * a1, a10);
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_40_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_42_4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 472);
  v4 = *(_QWORD *)(v2 + 456);
  *(_QWORD *)(v3 + *(int *)(v4 + 20)) = result;
  *(_QWORD *)(v3 + *(int *)(v4 + 24)) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_45_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_48_3(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;

  return v2(a2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_52_2()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of Locale?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v0, v2);
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 648);
  *(_QWORD *)(v1 - 88) = *(_QWORD *)(v0 + 624);
  return result;
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_58_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_59_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  return type metadata accessor for PromptTemplateInfo();
}

uint64_t OUTLINED_FUNCTION_61_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_63_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_65_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void OUTLINED_FUNCTION_66_2()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_68_3()
{
  return type metadata accessor for Prompt.RenderError();
}

uint64_t OUTLINED_FUNCTION_69_3()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_70_3()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_71_3()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_74_2(char a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v1;
  *(_BYTE *)(v3 + 40 * v2 + 32) = a1;
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_76_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_77_3()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 336) = v1;
  *(_QWORD *)(v0 + 344) = v1;
  return swift_bridgeObjectRetain();
}

_QWORD *OUTLINED_FUNCTION_78_3(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 688) = result;
  *result = v2;
  result[1] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_79_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_80_3()
{
  return Prompt.ImageData.format.getter();
}

void OUTLINED_FUNCTION_81_2()
{
  Hasher._combine(_:)(1u);
}

void OUTLINED_FUNCTION_82_3()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_87_2()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

unint64_t OUTLINED_FUNCTION_89_2()
{
  return specialized __RawDictionaryStorage.find<A>(_:)();
}

double OUTLINED_FUNCTION_90_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  *(_QWORD *)(a10 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a10 = 0u;
  *(_OWORD *)(a10 + 16) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_91_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_92_3()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of Prompt.SpecialToken(v1, v0);
}

uint64_t OUTLINED_FUNCTION_93_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_94_3()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_95_2()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  _s15TokenGeneration6PromptV9DelimiterVWOhTm_0(v1, v0);
}

uint64_t OUTLINED_FUNCTION_97_2()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_98_4()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_99_3()
{
  JUMPOUT(0x2495A7CECLL);
}

uint64_t OUTLINED_FUNCTION_102_3(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 24);
}

uint64_t StopSequenceMonitor.init(stopSequences:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized _NativeSet.filter(_:)(a1);
  v4 = MEMORY[0x24BEE4AF8];
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t StopSequenceMonitor.currentBufferedTokens()()
{
  return swift_bridgeObjectRetain();
}

Swift::tuple_tokens_OpaquePointer_didStopSequenceMatch_Bool __swiftcall StopSequenceMonitor.handleOutputToken(_:)(TokenGeneration::Token a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  void *rawValue;
  void *object;
  Swift::Bool v6;
  void *v7;
  Swift::tuple_tokens_OpaquePointer_didStopSequenceMatch_Bool result;
  Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional v9;

  v2 = *(_QWORD *)a1.text._countAndFlagsBits;
  v1 = *(_QWORD *)(a1.text._countAndFlagsBits + 8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Token>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248C911B0;
  *(_QWORD *)(inited + 32) = v2;
  *(_QWORD *)(inited + 40) = v1;
  swift_bridgeObjectRetain();
  v9 = StopSequenceMonitor.handleOutputTokens(_:)((Swift::OpaquePointer)inited);
  rawValue = v9.tokens._rawValue;
  object = v9.stopSequence.value._object;
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  if (object)
    swift_bridgeObjectRelease();
  v6 = object != 0;
  v7 = rawValue;
  result.tokens._rawValue = v7;
  result.didStopSequenceMatch = v6;
  return result;
}

Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional __swiftcall StopSequenceMonitor.handleOutputTokens(_:)(Swift::OpaquePointer a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56[2];
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  Swift::tuple_tokens_OpaquePointer_stopSequence_String_optional result;

  v2 = v1 + 1;
  v3 = v1[1];
  v59 = v3;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_60_2();
  specialized Array.append<A>(contentsOf:)();
  v4 = 0xE000000000000000;
  v57 = 0;
  v58 = 0xE000000000000000;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = (void **)(swift_bridgeObjectRetain() + 40);
    do
    {
      v7 = (uint64_t)*(v6 - 1);
      v8 = *v6;
      swift_bridgeObjectRetain();
      v9._countAndFlagsBits = v7;
      v9._object = v8;
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v6 += 2;
      --v5;
    }
    while (v5);
    OUTLINED_FUNCTION_7_8();
    v10 = v57;
    v4 = v58;
  }
  else
  {
    v10 = 0;
  }
  v56[0] = *v1;
  v56[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = StopSequenceMonitor.checkStopSequences(currentResponse:)(v10, v4);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_82();
  if (!v17)
  {
    v19 = one-time initialization token for stopSequenceMonitor;
    OUTLINED_FUNCTION_152_0();
    if (v19 != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Log.stopSequenceMonitor);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    v55 = v11;
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v56[0] = swift_slowAlloc();
      *(_DWORD *)v23 = 136315138;
      OUTLINED_FUNCTION_152_0();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v13, v15, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of StopSequenceMonitor.StopSequenceMatch(v11, (uint64_t)v13, v15, 0);
      OUTLINED_FUNCTION_0_9();
      OUTLINED_FUNCTION_88();
      _os_log_impl(&dword_248BE5000, v21, v22, "Found stop sequence in output:%s", v23, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }
    outlined consume of StopSequenceMonitor.StopSequenceMatch(v11, (uint64_t)v13, v15, 0);
    OUTLINED_FUNCTION_0_9();

    v24 = *(_QWORD *)(v59 + 16);
    if (!v24)
    {
      swift_bridgeObjectRelease();
      v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_30:
      OUTLINED_FUNCTION_82();
      goto LABEL_36;
    }
    v52 = v15;
    v53 = v13;
    v54 = v2;
    v13 = (_QWORD *)(v59 + 40);
    v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v26 = 15;
    v27 = v55;
    while (1)
    {
      v28 = *(v13 - 1);
      v29 = *v13;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_60_2();
      String.count.getter();
      v30 = String.index(_:offsetBy:limitedBy:)();
      v32 = v31;
      OUTLINED_FUNCTION_82();
      v33 = (v32 & 1) != 0 ? v55 : v30;
      if (v33 >> 14 >= v55 >> 14)
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_1_10();
        v25 = v36;
      }
      v34 = v25[2];
      if (v34 >= v25[3] >> 1)
      {
        OUTLINED_FUNCTION_1_10();
        v25 = v37;
      }
      v13 += 2;
      v25[2] = v34 + 1;
      v35 = &v25[2 * v34];
      v35[4] = v28;
      v35[5] = v29;
      v26 = v33;
      if (!--v24)
      {
        OUTLINED_FUNCTION_7_8();
        v13 = v53;
        v2 = v54;
        v15 = v52;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_7_8();
    if (v33 >> 14 < v26 >> 14)
    {
      __break(1u);
    }
    else
    {
      v38 = String.subscript.getter();
      v40 = v39;
      v42 = v41;
      v44 = v43;
      OUTLINED_FUNCTION_82();
      v13 = v53;
      if ((v38 ^ v40) < 0x4000)
      {
        swift_bridgeObjectRelease();
        v2 = v54;
LABEL_35:
        v15 = v52;
LABEL_36:
        OUTLINED_FUNCTION_0_9();
        swift_bridgeObjectRelease();
        *v2 = MEMORY[0x24BEE4AF8];
        v18 = v25;
        goto LABEL_37;
      }
      v26 = MEMORY[0x2495A7CE0](v38, v40, v42, v44);
      v27 = v45;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_32:
        v2 = v54;
        v46 = v25[2];
        if (v46 >= v25[3] >> 1)
        {
          OUTLINED_FUNCTION_1_10();
          v25 = v51;
        }
        v25[2] = v46 + 1;
        v47 = &v25[2 * v46];
        v47[4] = v26;
        v47[5] = v27;
        goto LABEL_35;
      }
    }
    OUTLINED_FUNCTION_1_10();
    v25 = v50;
    goto LABEL_32;
  }
  if (v17 == 1)
  {
    OUTLINED_FUNCTION_7_8();
    OUTLINED_FUNCTION_82();
    OUTLINED_FUNCTION_60_2();
    specialized Array.append<A>(contentsOf:)();
    v13 = 0;
    v15 = 0;
    v18 = (void *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_82();
    v13 = 0;
    v15 = 0;
    *v2 = MEMORY[0x24BEE4AF8];
    v18 = (void *)v3;
  }
LABEL_37:
  v48 = (uint64_t)v13;
  v49 = (void *)v15;
  result.stopSequence.value._object = v49;
  result.stopSequence.value._countAndFlagsBits = v48;
  result.tokens._rawValue = v18;
  return result;
}

uint64_t StopSequenceMonitor.checkStopSequences(currentResponse:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  v9 = *(_QWORD *)(*v2 + 56);
  v32 = *v2 + 56;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v33 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v14 = 0;
  v31 = 2;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_20;
    }
    v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v17 >= v33)
      goto LABEL_24;
    v18 = *(_QWORD *)(v32 + 8 * v17);
    ++v14;
    if (!v18)
    {
      v14 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_24;
      v18 = *(_QWORD *)(v32 + 8 * v14);
      if (!v18)
      {
        v14 = v17 + 2;
        if (v17 + 2 >= v33)
          goto LABEL_24;
        v18 = *(_QWORD *)(v32 + 8 * v14);
        if (!v18)
          break;
      }
    }
LABEL_19:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_20:
    v20 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v16);
    v22 = *v20;
    v21 = v20[1];
    v36 = a1;
    v37 = a2;
    v34 = v22;
    v35 = v21;
    v23 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v23);
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    v24 = StringProtocol.range<A>(of:options:range:locale:)();
    v26 = v25;
    outlined destroy of Locale?((uint64_t)v7);
    if ((v26 & 1) == 0)
    {
      swift_release();
      outlined consume of StopSequenceMonitor.StopSequenceMatch(v30, 0, 0, v31);
      return v24;
    }
    v27 = static StopSequenceMonitor.endsWithPrefix(_:stopSequence:)(a1, a2, v22);
    v29 = v28;
    result = swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
    {
      result = outlined consume of StopSequenceMonitor.StopSequenceMatch(v30, 0, 0, v31);
      v31 = 1;
      v30 = v27;
    }
  }
  v19 = v17 + 3;
  if (v19 >= v33)
  {
LABEL_24:
    swift_release();
    return v30;
  }
  v18 = *(_QWORD *)(v32 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v33)
      goto LABEL_24;
    v18 = *(_QWORD *)(v32 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t static StopSequenceMonitor.endsWithPrefix(_:stopSequence:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  Swift::String_optional v19;
  void *object;
  uint64_t v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  char v42;
  Swift::String_optional v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;

  v6 = String.count.getter();
  v7 = OUTLINED_FUNCTION_5_8();
  swift_bridgeObjectRetain();
  if (v7 >= v6)
  {
    v45 = 0;
    v10 = a1;
    v12 = a2;
  }
  else
  {
    v8 = OUTLINED_FUNCTION_5_8();
    v9 = specialized BidirectionalCollection.suffix(_:)(v8, a1, a2);
    v10 = MEMORY[0x2495A7CE0](v9);
    v12 = v11;
    OUTLINED_FUNCTION_15_1();
    v13 = String.count.getter();
    result = OUTLINED_FUNCTION_5_8();
    if (__OFSUB__(v13, result))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    v45 = v13 - result;
  }
  v15 = String.subscript.getter();
  v17 = v16;
  if ((v12 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v12) & 0xF;
  else
    v18 = v10 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_152_0();
  v19 = String.Iterator.next()();
  result = v19.value._countAndFlagsBits;
  if (!v19.value._object)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_88();
    v44 = 0;
    goto LABEL_36;
  }
  object = v19.value._object;
  v21 = 0;
  v48 = 4 * v18;
  v47 = v17;
  v46 = v15;
  while (1)
  {
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (result == v15 && object == v17)
    {
      OUTLINED_FUNCTION_15_1();
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_15_1();
      if ((v23 & 1) == 0)
        goto LABEL_30;
    }
    result = String.index(_:offsetBy:)();
    if (v48 < result >> 14)
      goto LABEL_38;
    v49 = v21;
    OUTLINED_FUNCTION_152_0();
    v24 = String.subscript.getter();
    v26 = v25;
    v28 = v27;
    v30 = v29;
    OUTLINED_FUNCTION_88();
    OUTLINED_FUNCTION_152_0();
    swift_bridgeObjectRetain();
    Substring.distance(from:to:)();
    OUTLINED_FUNCTION_123();
    String.index(_:offsetBy:)();
    v31 = a3;
    v32 = String.subscript.getter();
    v34 = v33;
    v36 = v35;
    v38 = v37;
    OUTLINED_FUNCTION_88();
    v39 = v28 == v36 && v30 == v38;
    v40 = v39 && v24 >> 16 == v32 >> 16;
    if (v40 && v26 >> 16 == v34 >> 16)
      break;
    v42 = _stringCompareInternal(_:_:_:_:expecting:)();
    OUTLINED_FUNCTION_123();
    swift_bridgeObjectRelease();
    a3 = v31;
    v17 = v47;
    v15 = v46;
    v21 = v49;
    if ((v42 & 1) != 0)
      goto LABEL_34;
LABEL_30:
    v43 = String.Iterator.next()();
    result = v43.value._countAndFlagsBits;
    object = v43.value._object;
    ++v21;
    if (!v43.value._object)
      goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v49;
LABEL_34:
  OUTLINED_FUNCTION_123();
  result = OUTLINED_FUNCTION_88();
  if (__OFADD__(v21, v45))
    goto LABEL_40;
  v44 = String.index(_:offsetBy:)();
LABEL_36:
  OUTLINED_FUNCTION_15_1();
  return v44;
}

unint64_t specialized BidirectionalCollection.suffix(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
    {
      v5 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[2];

  v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v5 = (_QWORD *)((char *)v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v5, v4, v2);
    swift_release();
    if (v1)
      swift_willThrow();
  }
  else
  {
    v7 = (_QWORD *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    v6 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x2495A8ED4](v7, -1, -1);
  }
  return v6;
}

uint64_t outlined consume of StopSequenceMonitor.StopSequenceMatch(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (!a4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t destroy for StopSequenceMonitor()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for StopSequenceMonitor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for StopSequenceMonitor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for StopSequenceMonitor(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StopSequenceMonitor()
{
  return &type metadata for StopSequenceMonitor;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v14 = v13 | (v7 << 6);
LABEL_20:
    v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = v20 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v19) & 0xF;
    else
      v22 = v21;
    if (v22)
    {
      *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_27:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v5, a2, v6, a3);
      }
    }
  }
  v15 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v15 >= v12)
    goto LABEL_27;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  ++v7;
  if (v16)
    goto LABEL_19;
  v7 = v15 + 1;
  if (v15 + 1 >= v12)
    goto LABEL_27;
  v16 = *(_QWORD *)(v8 + 8 * v7);
  if (v16)
    goto LABEL_19;
  v7 = v15 + 2;
  if (v15 + 2 >= v12)
    goto LABEL_27;
  v16 = *(_QWORD *)(v8 + 8 * v7);
  if (v16)
  {
LABEL_19:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
    goto LABEL_20;
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_27;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_27;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return outlined consume of StopSequenceMonitor.StopSequenceMatch(v0, v1, v2, 0);
}

void OUTLINED_FUNCTION_1_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return String.count.getter();
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return swift_bridgeObjectRelease();
}

TokenGeneration::Token __swiftcall Token.init(text:)(TokenGeneration::Token text)
{
  TokenGeneration::Token *v1;

  *v1 = text;
  return text;
}

uint64_t Token.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_4();
  return v1;
}

uint64_t Token.text.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Token.text.modify())(void)
{
  return AutomationJSON.responses.modify;
}

uint64_t Token.hash(into:)()
{
  OUTLINED_FUNCTION_4();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static Token.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int Token.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_4();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Token()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Token and conformance Token()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Token and conformance Token;
  if (!lazy protocol witness table cache variable for type Token and conformance Token)
  {
    result = MEMORY[0x2495A8E14](&protocol conformance descriptor for Token, &type metadata for Token);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Token and conformance Token);
  }
  return result;
}

ValueMetadata *type metadata accessor for Token()
{
  return &type metadata for Token;
}

uint64_t type metadata completion function for TokenGrammarParser()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    v6 = a1;
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
    while (v7 < *(_QWORD *)(a3 + 16))
    {
      v9 = *(_QWORD *)(a3 + 8 * v7 + 32);
      v14 = v9;
      v10 = v6(&v14);
      if (v3)
      {
        swift_release();
        goto LABEL_15;
      }
      if ((v10 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v8 = v15;
        }
        v12 = *(_QWORD *)(v8 + 16);
        if (v12 >= *(_QWORD *)(v8 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v8 = v15;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v9;
        v6 = a1;
      }
      if (v5 == ++v7)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
  }
}

void TokenGrammarParser.childParser(consumingTokenID:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_6_7(*(_QWORD *)(v3 + 136));
  v7 = v1[3];
  swift_retain();
  countAndFlagsBits = VocabularyManager.convertedText(forTokenID:)(a1)._countAndFlagsBits;
  swift_release();
  TokenGrammarParser.createCharacterParser(consuming:)(countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v9 = *(_QWORD *)(v3 + 88);
  swift_bridgeObjectRetain();
  TokenGrammarParser.CharacterParserManager.parser(at:)(v4, v9, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_retain();
  TokenGrammarParser.__allocating_init(characterParser:tokenizer:lastConsumedTokenID:)((uint64_t)v6, v7, a1, 0);
  $defer #1 <A>() in TokenGrammarParser.childParser(consumingTokenID:)((uint64_t)v1);
  OUTLINED_FUNCTION_8_1();
}

uint64_t TokenGrammarParser.partialMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_7_9();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v0) & 1;
}

uint64_t TokenGrammarParser.fullMatch.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_7_9();
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v0) & 1;
}

uint64_t TokenGrammarParser.accepts(tokenIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10[16];
  uint64_t v11;
  uint64_t v12;

  v3 = v1;
  v5 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_6_7(*(_QWORD *)(*(_QWORD *)v1 + 136));
  swift_retain();
  VocabularyManager.prefixLookUp.getter(v2);
  swift_release();
  v6 = v2[6];
  swift_bridgeObjectRetain();
  outlined destroy of VocabularyManager.PrefixLookup((uint64_t)v2);
  v11 = v3;
  v12 = v6;
  swift_bridgeObjectRetain();
  specialized _ArrayProtocol.filter(_:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in TokenGrammarParser.accepts(tokenIDs:), (uint64_t)v10, a1);
  v8 = v7;
  swift_bridgeObjectRelease();
  $defer #1 <A>() in TokenGrammarParser.childParser(consumingTokenID:)(v3);
  return v8;
}

uint64_t TokenGrammarParser.CharacterParserCache.init(parser:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t result;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for TokenGrammarParser.CharacterParserCache(0, a3, a4, v9);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = a2;
  return result;
}

Swift::Int __swiftcall TokenGrammarParser.CharacterParserManager.childParserIndex(for:character:)(Swift::Int a1, Swift::String character)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  Swift::Int v19;
  uint64_t v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, void *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  Swift::Int result;
  _QWORD v31[2];
  uint64_t v32;
  Swift::Int v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  object = character._object;
  countAndFlagsBits = character._countAndFlagsBits;
  v7 = *(_QWORD *)(v2 + 16);
  v35 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v36 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v38 = *(_QWORD *)(v10 + 24);
  v39 = (char *)v31 - v11;
  v12 = type metadata accessor for TokenGrammarParser.CharacterParserCache(0, v7, v38, v10);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v31 - v17;
  v37 = v3;
  swift_bridgeObjectRetain();
  v19 = a1;
  Array.subscript.getter();
  v20 = countAndFlagsBits;
  specialized Dictionary.subscript.getter(countAndFlagsBits, (uint64_t)object, *(_QWORD *)&v18[*(int *)(v12 + 36)]);
  LOBYTE(countAndFlagsBits) = v21;
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits & 1) != 0)
  {
    v22 = *(void (**)(char *, uint64_t))(v13 + 8);
    v22(v18, v12);
    v33 = v19;
    Array.subscript.getter();
    v24 = v35;
    v23 = (uint64_t)v36;
    v34 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    v34(v36, v16, v7);
    v22(v16, v12);
    v25 = *(void (**)(uint64_t, void *, uint64_t))(v38 + 40);
    v32 = v20;
    v25(v20, object, v7);
    v35 = *(_QWORD *)(v24 + 8);
    ((void (*)(uint64_t, uint64_t))v35)(v23, v7);
    v26 = swift_bridgeObjectRetain();
    v27 = MEMORY[0x2495A7E84](v26, v12);
    swift_bridgeObjectRelease();
    v31[1] = type metadata accessor for Array();
    swift_bridgeObjectRetain();
    Array._makeMutableAndUnique()();
    Array._checkSubscript_mutating(_:)(v33);
    specialized Dictionary._Variant.setValue(_:forKey:)(v27, v32, (uint64_t)object);
    swift_bridgeObjectRelease();
    v28 = v39;
    v34((char *)v23, v39, v7);
    v29 = Dictionary.init(dictionaryLiteral:)();
    TokenGrammarParser.CharacterParserCache.init(parser:cache:)(v23, v29, v7, v38, (uint64_t)v16);
    Array.append(_:)();
    ((void (*)(char *, uint64_t))v35)(v28, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  OUTLINED_FUNCTION_8_1();
  return result;
}

uint64_t TokenGrammarParser.CharacterParserManager.parser(at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = type metadata accessor for TokenGrammarParser.CharacterParserCache(0, a1, a2, a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - v7;
  Array.subscript.getter();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v8, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TokenGrammarParser.CharacterParserManager.init(parser:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  OUTLINED_FUNCTION_5();
  type metadata accessor for TokenGrammarParser.CharacterParserCache(255, v8, v9, v10);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  v11 = static Array._adoptStorage(_:count:)();
  v13 = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v3, a1, a2);
  v14 = Dictionary.init(dictionaryLiteral:)();
  TokenGrammarParser.CharacterParserCache.init(parser:cache:)(v3, v14, a2, a3, v13);
  type metadata accessor for Array();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  return v11;
}

uint64_t TokenGrammarParser.Tokenizer.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TokenGrammarParser.Tokenizer.__deallocating_deinit()
{
  TokenGrammarParser.Tokenizer.deinit();
  return swift_deallocClassInstance();
}

uint64_t *TokenGrammarParser.__allocating_init(characterParser:tokenizer:lastConsumedTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7;

  v7 = a4 & 1;
  swift_allocObject();
  return TokenGrammarParser.init(characterParser:tokenizer:lastConsumedTokenID:)(a1, a2, a3, v7);
}

uint64_t *TokenGrammarParser.init(characterParser:tokenizer:lastConsumedTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  pthread_mutex_t *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;

  v21 = a4;
  v8 = *v4;
  v9 = *(_QWORD *)(*v4 + 80);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v4 + 16) = 0;
  v13 = *(_QWORD *)(v8 + 136);
  type metadata accessor for Lock();
  v14 = swift_allocObject();
  v15 = (pthread_mutex_t *)swift_slowAlloc();
  *(_QWORD *)(v14 + 16) = v15;
  pthread_mutex_init(v15, 0);
  *(uint64_t *)((char *)v4 + v13) = v14;
  v4[3] = a2;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16((char *)v4 + *(_QWORD *)(*v4 + 112), a1, v9);
  v17 = (uint64_t)v4 + *(_QWORD *)(*v4 + 120);
  *(_QWORD *)v17 = a3;
  *(_BYTE *)(v17 + 8) = v21 & 1;
  v16(v12, a1, v9);
  v18 = TokenGrammarParser.CharacterParserManager.init(parser:)((uint64_t)v12, v9, *(_QWORD *)(v8 + 88));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 + 128)) = v18;
  return v4;
}

Swift::Int TokenGrammarParser.createCharacterParser(consuming:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  Swift::String_optional v10;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::Int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String_optional v18;
  _BYTE v20[24];
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v9 = v5 & 0xFFFFFFFFFFFFLL;
  v21 = v5;
  v22 = v6;
  v23 = 0;
  v24 = v9;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v10 = String.Iterator.next()();
  if (v10.value._object)
  {
    countAndFlagsBits = v10.value._countAndFlagsBits;
    object = v10.value._object;
    v13 = 0;
    while (1)
    {
      swift_bridgeObjectRetain();
      v14 = *(_QWORD *)(v2 + 88);
      TokenGrammarParser.CharacterParserManager.parser(at:)(v3, v14, (uint64_t)v8);
      swift_bridgeObjectRelease();
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v3, v14);
      (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v8, v3);
      if ((v15 & 1) == 0)
        break;
      swift_beginAccess();
      type metadata accessor for TokenGrammarParser.CharacterParserManager(0, v3, v14, v16);
      v17._countAndFlagsBits = countAndFlagsBits;
      v17._object = object;
      v13 = TokenGrammarParser.CharacterParserManager.childParserIndex(for:character:)(v13, v17);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v18 = String.Iterator.next()();
      countAndFlagsBits = v18.value._countAndFlagsBits;
      object = v18.value._object;
      if (!v18.value._object)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t $defer #1 <A>() in TokenGrammarParser.childParser(consumingTokenID:)(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 136)) + 16));
}

unint64_t *closure #1 in TokenGrammarParser.accepts(tokenIDs:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  result = (unint64_t *)MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(_QWORD *)(v6 + 16))
  {
    v10 = *(_QWORD *)(v6 + 16 * v9 + 32);
    swift_bridgeObjectRetain();
    TokenGrammarParser.createCharacterParser(consuming:)(v10);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v11 = *(_QWORD *)(v2 + 88);
    swift_bridgeObjectRetain();
    TokenGrammarParser.CharacterParserManager.parser(at:)(v3, v11, (uint64_t)v8);
    swift_bridgeObjectRelease();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v3, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    return (unint64_t *)(v12 & 1);
  }
  __break(1u);
  return result;
}

uint64_t *TokenGrammarParser.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 112));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t TokenGrammarParser.__deallocating_deinit()
{
  TokenGrammarParser.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TokenGrammarParser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TokenGrammarParser);
}

uint64_t type metadata completion function for TokenGrammarParser.Tokenizer()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TokenGrammarParser.Tokenizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TokenGrammarParser.Tokenizer);
}

uint64_t type metadata accessor for TokenGrammarParser.CharacterParserManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TokenGrammarParser.CharacterParserManager);
}

uint64_t protocol witness for TokenizerAwareGrammarParser.partialMatch.getter in conformance TokenGrammarParser<A>()
{
  return TokenGrammarParser.partialMatch.getter() & 1;
}

uint64_t protocol witness for TokenizerAwareGrammarParser.fullMatch.getter in conformance TokenGrammarParser<A>()
{
  return TokenGrammarParser.fullMatch.getter() & 1;
}

void protocol witness for TokenizerAwareGrammarParser.childParser(consumingTokenID:) in conformance TokenGrammarParser<A>(Swift::Int a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  TokenGrammarParser.childParser(consumingTokenID:)(a1);
  *a2 = v3;
}

uint64_t protocol witness for TokenizerAwareGrammarParser.accepts(tokenIDs:) in conformance TokenGrammarParser<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = TokenGrammarParser.accepts(tokenIDs:)(a1);
  return protocol witness for TokenizerAwareGrammarParser.accepts(tokenID:) in conformance TokenGrammarParser<A>(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t outlined destroy of VocabularyManager.PrefixLookup(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t partial apply for closure #1 in TokenGrammarParser.accepts(tokenIDs:)(uint64_t a1)
{
  uint64_t v1;

  return (unint64_t)closure #1 in TokenGrammarParser.accepts(tokenIDs:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t type metadata accessor for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TokenGrammarParser.CharacterParserCache);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_2_9();
  v0 = OUTLINED_FUNCTION_0_10();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1, v2);
  OUTLINED_FUNCTION_3_9(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);
  return OUTLINED_FUNCTION_1_11();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_2_9();
  v0 = OUTLINED_FUNCTION_0_10();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1);
  OUTLINED_FUNCTION_3_9(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return OUTLINED_FUNCTION_1_11();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_2_9();
  v0 = OUTLINED_FUNCTION_0_10();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v0, v1);
  OUTLINED_FUNCTION_3_9(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  return OUTLINED_FUNCTION_1_11();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  OUTLINED_FUNCTION_3_9(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  char isClassOrObjCExistentialType;
  uint64_t v5;

  v2 = v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  v5 = v2 & 0xFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0)
    v5 = v2;
  if (*(_QWORD *)(v5 + 16) <= (unint64_t)a1)
    goto LABEL_7;
}

uint64_t type metadata completion function for TokenGrammarParser.CharacterParserCache()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenGrammarParser.CharacterParserCache(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TokenGrammarParser.CharacterParserCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGrammarParser.CharacterParserCache(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = *(_DWORD *)(v5 + 84);
  if (!a2)
    return 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (v7 >= a2)
  {
    if (v6 < 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)((a1 + v8 + 7) & 0xFFFFFFFFFFFFF8);
      if (v13 >= 0xFFFFFFFF)
        LODWORD(v13) = -1;
      return (v13 + 1);
    }
    else
    {
      return __swift_getEnumTagSinglePayload(a1, v6, v4);
    }
  }
  else
  {
    if (((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v7 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_248C3FB94 + 4 * byte_248C92AF0[v11]))();
  }
}

void storeEnumTagSinglePayload for TokenGrammarParser.CharacterParserCache(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
  }
  if (a2 > v6)
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v10 = ~v6 + a2;
      bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_248C3FD00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  *(_BYTE *)(v5 + v6) = 0;
  if ((_DWORD)a2)
  {
    if (a3 < 0x7FFFFFFF)
    {
      v8 = (_QWORD *)((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
        v9 = a2 ^ 0x80000000;
      else
        v9 = (a2 - 1);
      *v8 = v9;
    }
    else
    {
      return __swift_storeEnumTagSinglePayload(v5, a2, a3, a4);
    }
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = 0x8000000000000000;
  return v1;
}

uint64_t OUTLINED_FUNCTION_1_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_3_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;
  uint64_t result;

  result = *v10;
  *v10 = a10;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return pthread_mutex_lock(*(pthread_mutex_t **)(*(_QWORD *)(v1 + a1) + 16));
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 80);
}

unint64_t specialized Collection.first.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    _StringGuts.validateScalarIndex(_:)(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter();
      v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;

  if ((a2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(a2) & 0xF;
  else
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v4 = a1;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v4 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0)
        v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v4 = *v5;
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | ((v3 == 0) << 8);
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(a2 + 16);
  result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, v3);
  if ((v4 & 1) != 0)
    v5 = v3;
  else
    v5 = result;
  if (v3 < v5)
    goto LABEL_9;
  if ((v5 & 0x8000000000000000) == 0)
    return a2;
LABEL_10:
  __break(1u);
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenIDToTextConverterProtocol.textForTokenIDs(_:stopTokenID:)(Swift::OpaquePointer _, Swift::Int stopTokenID)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  uint64_t v15;

  v6 = v3;
  v7 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248C911B0;
  *(_QWORD *)(inited + 32) = stopTokenID;
  v11 = TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)((uint64_t)_._rawValue, (_QWORD *)inited, v7, v6);
  swift_setDeallocating();
  if (!v5)
  {
    v15 = v11;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v4 = &v15;
    OUTLINED_FUNCTION_7_10();
    OUTLINED_FUNCTION_4_9();
  }
  v12 = (uint64_t)v4;
  v13 = (void *)v7;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t TokenIDToTextConverterProtocol.textsForTokenIDs(_:stopTokenIDs:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;

  v5 = v4;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
    return MEMORY[0x24BEE4AF8];
  v6 = a4;
  v8 = a2[2];
  v35 = *(uint64_t (**)(void))(a4 + 24);
  v36 = a1 + 32;
  swift_bridgeObjectRetain();
  v9 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  v33 = v8;
  while (1)
  {
    v11 = *(_QWORD *)(v36 + 8 * v9);
    if (!v8)
    {
      v13 = 0;
      goto LABEL_18;
    }
    v12 = a2[4];
    v13 = v12 == v11;
    if (v12 != v11 && v8 != 1)
    {
      v15 = a2[5];
      v13 = v15 == v11;
      if (v15 != v11 && v8 != 2)
        break;
    }
LABEL_18:
    v20 = v35();
    if (v5)
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_8();
      return v10;
    }
    v21 = v20;
    v22 = v6;
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v10 + 16);
    if (__OFADD__(v24, v23))
      goto LABEL_42;
    if (!swift_isUniquelyReferenced_nonNull_native() || v24 + v23 > *(_QWORD *)(v10 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v10 = v25;
    }
    if (*(_QWORD *)(v21 + 16))
    {
      v26 = *(_QWORD *)(v10 + 16);
      if ((*(_QWORD *)(v10 + 24) >> 1) - v26 < v23)
        goto LABEL_44;
      v27 = v10 + 16 * v26 + 32;
      if (v21 + 32 < v27 + 16 * v23 && v27 < v21 + 32 + 16 * v23)
        goto LABEL_46;
      swift_arrayInitWithCopy();
      if (v23)
      {
        v29 = *(_QWORD *)(v10 + 16);
        v30 = __OFADD__(v29, v23);
        v31 = v29 + v23;
        if (v30)
          goto LABEL_45;
        *(_QWORD *)(v10 + 16) = v31;
      }
    }
    else if (v23)
    {
      goto LABEL_43;
    }
    swift_bridgeObjectRelease();
    if (!v13)
    {
      ++v9;
      v5 = 0;
      v6 = v22;
      v8 = v33;
      if (v9 != v34)
        continue;
    }
    OUTLINED_FUNCTION_9_8();
    return v10;
  }
  v17 = 6;
  while (1)
  {
    v18 = v17 - 3;
    if (__OFADD__(v17 - 4, 1))
      break;
    v19 = a2[v17];
    v13 = v19 == v11;
    if (v19 != v11)
    {
      ++v17;
      if (v18 != v8)
        continue;
    }
    goto LABEL_18;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TokenIDToTextConverter.text.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_1();
  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TokenIDToTextConverter.text.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TokenIDToTextConverter.text.modify())()
{
  OUTLINED_FUNCTION_9_1();
  return EarleyParser.partialMatch.modify;
}

void TokenIDToTextConverter.__allocating_init(tokenizer:replacementTextByTokenText:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = (_QWORD *)OUTLINED_FUNCTION_3_10();
  v5 = OUTLINED_FUNCTION_1_12(v4, MEMORY[0x24BEE4AF8]);
  v5[2] = v6;
  v5[3] = a1;
  v5[6] = a2;
  v5[7] = 0;
  *((_BYTE *)v5 + 80) = 0;
  OUTLINED_FUNCTION_99();
}

void TokenIDToTextConverter.__allocating_init(tokenizer:replacementTextByTokenText:isOneShot:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = (_QWORD *)OUTLINED_FUNCTION_3_10();
  v7 = OUTLINED_FUNCTION_1_12(v6, MEMORY[0x24BEE4AF8]);
  v7[2] = v8;
  v7[3] = a1;
  v7[6] = a2;
  v7[7] = 0;
  *((_BYTE *)v7 + 80) = a3;
  OUTLINED_FUNCTION_99();
}

uint64_t TokenIDToTextConverter.init(tokenizer:replacementTextByTokenText:isOneShot:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 32) = 8492770;
  *(_QWORD *)(v3 + 40) = 0xA300000000000000;
  *(_QWORD *)(v3 + 64) = 0xE000000000000000;
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 80) = a3;
  return v3;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenIDToTextConverter.textForTokenID(_:isStopTokenID:)(Swift::Int _, Swift::Bool isStopTokenID)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String result;
  uint64_t v9;

  v5 = TokenIDToTextConverter.textsForTokenID(_:isStopTokenID:)(_, isStopTokenID);
  if (!v3)
  {
    v9 = v5;
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v2 = &v9;
    OUTLINED_FUNCTION_7_10();
    OUTLINED_FUNCTION_4_9();
  }
  v6 = (uint64_t)v2;
  v7 = (void *)v4;
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

uint64_t TokenIDToTextConverter.textsForTokenID(_:isStopTokenID:)(Swift::Int a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t type;
  NSObject *log;
  uint64_t v42;
  uint64_t v43;

  v7 = TokenIDToTextConverter.shouldBufferTokenID(tokenID:isStopTokenID:)(a1, a2);
  if (v3)
    return v4;
  v8 = (uint64_t *)(v2 + 72);
  if (v7)
  {
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v9 = *(_QWORD *)(*v8 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
    v10 = *v8;
    *(_QWORD *)(v10 + 16) = v9 + 1;
    *(_QWORD *)(v10 + 8 * v9 + 32) = a1;
    swift_endAccess();
    return MEMORY[0x24BEE4AF8];
  }
  swift_beginAccess();
  if (!*(_QWORD *)(*v8 + 16))
  {
    v4 = MEMORY[0x24BEE4AF8];
    if ((a2 & 1) != 0)
      return v4;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  v11 = OUTLINED_FUNCTION_8_9();
  v13 = v12;
  swift_bridgeObjectRelease();
  v42 = v11;
  if (one-time initialization token for tokenization != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Log.tokenization);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  log = v15;
  if (os_log_type_enabled(v15, v16))
  {
    type = v16;
    v17 = OUTLINED_FUNCTION_19_3();
    v43 = OUTLINED_FUNCTION_19_3();
    *(_DWORD *)v17 = 136315394;
    v18 = swift_bridgeObjectRetain();
    v19 = MEMORY[0x2495A7E30](v18, MEMORY[0x24BEE1768]);
    v21 = v20;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_10_9();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v13, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_248BE5000, log, type, "Detokenized buffered token ids %s to %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_7_4();
  }

  swift_bridgeObjectRelease_n();
  OUTLINED_FUNCTION_10_9();
  v22 = MEMORY[0x24BEE4AF8];
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v4 = v23;
  v24 = *(_QWORD *)(v23 + 16);
  if (v24 >= *(_QWORD *)(v23 + 24) >> 1)
  {
    OUTLINED_FUNCTION_2_10();
    v4 = v37;
  }
  *(_QWORD *)(v4 + 16) = v24 + 1;
  v25 = v4 + 16 * v24;
  *(_QWORD *)(v25 + 32) = v42;
  *(_QWORD *)(v25 + 40) = v13;
  *v8 = v22;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
  {
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_248C911B0;
    *(_QWORD *)(inited + 32) = a1;
    v27 = OUTLINED_FUNCTION_8_9();
    v29 = v28;
    swift_setDeallocating();
    if (one-time initialization token for tokenization != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Log.tokenization);
    swift_bridgeObjectRetain_n();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = OUTLINED_FUNCTION_19_3();
      v43 = OUTLINED_FUNCTION_19_3();
      *(_DWORD *)v33 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_248BE5000, v31, v32, "Detokenized %ld to %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }

    swift_bridgeObjectRelease_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_2_10();
      v4 = v38;
    }
    v34 = *(_QWORD *)(v4 + 16);
    if (v34 >= *(_QWORD *)(v4 + 24) >> 1)
    {
      OUTLINED_FUNCTION_2_10();
      v4 = v39;
    }
    *(_QWORD *)(v4 + 16) = v34 + 1;
    v35 = v4 + 16 * v34;
    *(_QWORD *)(v35 + 32) = v27;
    *(_QWORD *)(v35 + 40) = v29;
  }
  return v4;
}

BOOL TokenIDToTextConverter.shouldBufferTokenID(tokenID:isStopTokenID:)(Swift::Int a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t inited;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  unint64_t v18;
  Swift::String_optional v19;
  unint64_t object;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  Swift::String_optional v33;
  __int16 v34;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t countAndFlagsBits;

  v7 = type metadata accessor for Unicode.Scalar.Properties();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v36 - v12;
  if ((a2 & 1) != 0)
  {
    return 0;
  }
  else if ((*(_BYTE *)(v3 + 80) & 1) != 0)
  {
    return 1;
  }
  else if (objc_msgSend(*(id *)(*(_QWORD *)(v3 + 24) + 16), sel_isByte_, a1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_248C911B0;
    *(_QWORD *)(inited + 32) = a1;
    v15 = TokenizerRunner.detokenize(_:)((Swift::OpaquePointer)inited);
    if (v16)
    {
      swift_setDeallocating();
    }
    else
    {
      swift_setDeallocating();
      v34 = specialized Collection.first.getter(v15._countAndFlagsBits, (unint64_t)v15._object);
      swift_bridgeObjectRelease();
      return (v34 & 0x100) != 0 || (v34 & 0x80) != 0;
    }
  }
  else
  {
    v17 = TokenizerRunner.text(forTokenID:)(a1);
    v18 = ((unint64_t)v17._object >> 56) & 0xF;
    v42 = v17;
    if (((uint64_t)v17._object & 0x2000000000000000) == 0)
      v18 = v17._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    v43 = 0;
    v44 = v18;
    swift_bridgeObjectRetain();
    v19 = String.Iterator.next()();
    countAndFlagsBits = v19.value._countAndFlagsBits;
    if (v19.value._object)
    {
      object = (unint64_t)v19.value._object;
      v36[1] = v17._object;
      v36[2] = v4;
      while (1)
      {
        v21 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000) == 0)
          v21 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        v39 = v21;
        if (v21)
          break;
LABEL_34:
        swift_bridgeObjectRelease();
        v33 = String.Iterator.next()();
        countAndFlagsBits = v33.value._countAndFlagsBits;
        object = (unint64_t)v33.value._object;
        v2 = 0;
        if (!v33.value._object)
          goto LABEL_41;
      }
      v37 = (object & 0xFFFFFFFFFFFFFFFLL) + 32;
      v38 = object & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n();
      v22 = 0;
      v40 = object;
      while (1)
      {
        if ((object & 0x1000000000000000) != 0)
        {
          _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          v25 = v24;
        }
        else
        {
          if ((object & 0x2000000000000000) != 0)
          {
            v41[0] = countAndFlagsBits;
            v41[1] = v38;
            if (*((char *)v41 + v22) < 0)
              __asm { BR              X9 }
          }
          else
          {
            v23 = v37;
            if ((countAndFlagsBits & 0x1000000000000000) == 0)
              v23 = _StringObject.sharedUTF8.getter();
            if (*(char *)(v23 + v22) < 0)
              __asm { BR              X9 }
          }
          v25 = 1;
        }
        Unicode.Scalar.properties.getter();
        v26 = Unicode.Scalar.Properties.isEmoji.getter();
        v27 = *(void (**)(char *, uint64_t))(v8 + 8);
        v27(v13, v7);
        if ((v26 & 1) != 0)
          break;
        Unicode.Scalar.properties.getter();
        v28 = Unicode.Scalar.Properties.isEmojiModifier.getter();
        v27(v11, v7);
        if ((v28 & 1) != 0)
          break;
        Unicode.Scalar.properties.getter();
        v29 = Unicode.Scalar.Properties.isEmojiPresentation.getter();
        v27(v11, v7);
        if ((v29 & 1) != 0)
          break;
        Unicode.Scalar.properties.getter();
        v30 = Unicode.Scalar.Properties.isEmojiModifierBase.getter();
        v27(v11, v7);
        if ((v30 & 1) != 0)
          break;
        Unicode.Scalar.properties.getter();
        v31 = Unicode.Scalar.Properties.isJoinControl.getter();
        v27(v11, v7);
        if ((v31 & 1) != 0)
          break;
        Unicode.Scalar.properties.getter();
        v32 = Unicode.Scalar.Properties.isVariationSelector.getter();
        v27(v11, v7);
        if ((v32 & 1) != 0)
          break;
        v22 += v25;
        object = v40;
        if (v22 >= v39)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_34;
        }
      }
      swift_bridgeObjectRelease_n();
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t TokenIDToTextConverter.textForTokenIDs(_:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  int64_t v3;
  int64_t v4;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  int64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  Swift::OpaquePointer v24;
  int64_t v25;

  v1 = v0;
  v24._rawValue = *(void **)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  v2 = TokenizerRunner.detokenize(_:)(v24);
  v4 = v3;
  if (v3)
  {
    swift_bridgeObjectRelease();
    return v1;
  }
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  *(Swift::OpaquePointer *)(v1 + 16) = v24;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v7 + 64);
  v23 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v25 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v11)
    goto LABEL_7;
LABEL_6:
  for (v11 &= v11 - 1; ; v11 = (v14 - 1) & v14)
  {
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v17 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    object = v17;
    if (v11)
      goto LABEL_6;
LABEL_7:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v25)
      goto LABEL_23;
    v14 = *(_QWORD *)(v23 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v25)
        goto LABEL_23;
      v14 = *(_QWORD *)(v23 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v25)
          goto LABEL_23;
        v14 = *(_QWORD *)(v23 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_20:
    ;
  }
  v15 = v13 + 3;
  if (v15 >= v25)
  {
LABEL_23:
    swift_release();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v18 = String.count.getter();
    swift_bridgeObjectRelease();
    v19 = specialized Collection.dropFirst(_:)(v18, countAndFlagsBits, (unint64_t)object);
    v1 = MEMORY[0x2495A7CE0](v19);
    v21 = v20;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v22._countAndFlagsBits = v1;
    v22._object = v21;
    String.append(_:)(v22);
    swift_endAccess();
    return v1;
  }
  v14 = *(_QWORD *)(v23 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v25)
      goto LABEL_23;
    v14 = *(_QWORD *)(v23 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t TokenIDToTextConverter.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TokenIDToTextConverter.__deallocating_deinit()
{
  TokenIDToTextConverter.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TokenIDToTextConverterProtocol.text.getter in conformance TokenIDToTextConverter()
{
  return TokenIDToTextConverter.text.getter();
}

uint64_t protocol witness for TokenIDToTextConverterProtocol.textForTokenID(_:isStopTokenID:) in conformance TokenIDToTextConverter(Swift::Int a1, Swift::Bool a2)
{
  return TokenIDToTextConverter.textForTokenID(_:isStopTokenID:)(a1, a2)._countAndFlagsBits;
}

uint64_t protocol witness for TokenIDToTextConverterProtocol.textsForTokenID(_:isStopTokenID:) in conformance TokenIDToTextConverter(Swift::Int a1, char a2)
{
  return TokenIDToTextConverter.textsForTokenID(_:isStopTokenID:)(a1, a2);
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_6_8(v6);
    return v7 | 4;
  }
  else
  {
    v3 = MEMORY[0x2495A7D88](15, a1 >> 16);
    OUTLINED_FUNCTION_6_8(v3);
    return v4 | 8;
  }
}

uint64_t dispatch thunk of TokenIDToTextConverterProtocol.text.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TokenIDToTextConverterProtocol.textForTokenID(_:isStopTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of TokenIDToTextConverterProtocol.textsForTokenID(_:isStopTokenID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t type metadata accessor for TokenIDToTextConverter()
{
  return objc_opt_self();
}

uint64_t method lookup function for TokenIDToTextConverter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenIDToTextConverter.__allocating_init(tokenizer:replacementTextByTokenText:isOneShot:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v5;

  v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2)
      return 0;
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  v5 = __OFADD__(result, a2);
  result += a2;
  if (v5)
    goto LABEL_14;
  return result;
}

_QWORD *OUTLINED_FUNCTION_1_12@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  result[4] = 8492770;
  result[5] = 0xA300000000000000;
  result[8] = 0xE000000000000000;
  result[9] = a2;
  return result;
}

void OUTLINED_FUNCTION_2_10()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3_10()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_6_8(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_7_10()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return TokenIDToTextConverter.textForTokenIDs(_:)();
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return swift_release_n();
}

uint64_t TokenizerRunner.__allocating_init(tokenizerPath:)()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_18_0();
  TokenizerRunner.init(tokenizerPath:)();
  return v0;
}

void protocol witness for GuidedGenerationTokenizer.tokenID(forText:) in conformance TokenizerRunner(uint64_t a1, uint64_t a2)
{
  TokenizerRunner.tokenID(forText:)(*(Swift::String *)&a1);
  OUTLINED_FUNCTION_23();
}

uint64_t protocol witness for GuidedGenerationTokenizer.text(forTokenID:) in conformance TokenizerRunner(Swift::Int a1)
{
  return TokenizerRunner.text(forTokenID:)(a1)._countAndFlagsBits;
}

_QWORD *protocol witness for GuidedGenerationTokenizer.tokenize(_:) in conformance TokenizerRunner(uint64_t a1, unint64_t a2)
{
  return TokenizerRunner.tokenize(_:)(a1, a2);
}

uint64_t protocol witness for GuidedGenerationTokenizer.detokenize(_:) in conformance TokenizerRunner(Swift::OpaquePointer a1)
{
  return TokenizerRunner.detokenize(_:)(a1)._countAndFlagsBits;
}

void protocol witness for GuidedGenerationTokenizer.vocabulary() in conformance TokenizerRunner()
{
  TokenizerRunner.vocabulary()();
  OUTLINED_FUNCTION_23();
}

void protocol witness for GuidedGenerationTokenizer.longestTokenLength.getter in conformance TokenizerRunner()
{
  TokenizerRunner.longestTokenLength.getter();
  OUTLINED_FUNCTION_23();
}

void protocol witness for GuidedGenerationTokenizer.vocabularyCount.getter in conformance TokenizerRunner()
{
  TokenizerRunner.vocabularyCount.getter();
  OUTLINED_FUNCTION_23();
}

void TokenizerRunner.__allocating_init()()
{
  OUTLINED_FUNCTION_18_0();
  TokenizerRunner.init()();
  OUTLINED_FUNCTION_23();
}

id TokenizerRunner.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id result;
  id v5;
  void *v6;
  char internalBuild;

  v1 = v0;
  *(_QWORD *)(v0 + 80) = 1;
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)TokenizerRunnerObjC), sel_init);
  v2 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v2 + 16) = 0xD000000000000014;
  *(_QWORD *)(v2 + 24) = 0x8000000248C99490;
  v3 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000019, 0x8000000248C98AB0);
  if (result)
  {
    v5 = result;
    result = (id)MobileGestalt_get_current_device();
    if (result)
    {
      v6 = result;
      internalBuild = MobileGestalt_get_internalBuild();

      *(_QWORD *)(v1 + 24) = v5;
      *(_QWORD *)(v1 + 32) = 0xD000000000000014;
      *(_QWORD *)(v1 + 40) = 0x8000000248C99490;
      *(_QWORD *)(v1 + 48) = partial apply for closure #1 in Overridable<A>.init(key:);
      *(_QWORD *)(v1 + 56) = v2;
      *(_BYTE *)(v1 + 64) = internalBuild;
      *(_QWORD *)(v1 + 72) = Dictionary.init(dictionaryLiteral:)();
      return (id)v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id TokenizerRunner.init(tokenizerPath:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id result;
  id v8;
  void *v9;
  char internalBuild;

  v2 = v0;
  *(_QWORD *)(v0 + 80) = 1;
  v3 = objc_allocWithZone((Class)TokenizerRunnerObjC);
  v4 = OUTLINED_FUNCTION_28_4();
  if (v1)
  {
    type metadata accessor for TokenizerRunner();
    OUTLINED_FUNCTION_19_6();
    return (id)v2;
  }
  *(_QWORD *)(v0 + 16) = v4;
  v5 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v5 + 16) = 0xD000000000000014;
  *(_QWORD *)(v5 + 24) = 0x8000000248C99490;
  v6 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  result = OUTLINED_FUNCTION_54_2(0xD000000000000019, (uint64_t)"com.apple.tokengeneration");
  if (result)
  {
    v8 = result;
    result = (id)MobileGestalt_get_current_device();
    if (result)
    {
      v9 = result;
      internalBuild = MobileGestalt_get_internalBuild();

      *(_QWORD *)(v2 + 24) = v8;
      *(_QWORD *)(v2 + 32) = 0xD000000000000014;
      *(_QWORD *)(v2 + 40) = 0x8000000248C99490;
      *(_QWORD *)(v2 + 48) = closure #1 in Overridable<A>.init(key:)partial apply;
      *(_QWORD *)(v2 + 56) = v5;
      *(_BYTE *)(v2 + 64) = internalBuild;
      *(_QWORD *)(v2 + 72) = Dictionary.init(dictionaryLiteral:)();
      return (id)v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_248C4191C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t TokenizerRunner.__allocating_init(tokenizerPath:substitutionTextForInputTokenText:)()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_18_0();
  TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)();
  return v0;
}

void TokenizerRunner.init(tokenizerPath:substitutionTextForInputTokenText:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  char internalBuild;

  OUTLINED_FUNCTION_2();
  v2 = v0;
  v4 = v3;
  *(_QWORD *)(v0 + 80) = 1;
  v5 = objc_allocWithZone((Class)TokenizerRunnerObjC);
  v6 = OUTLINED_FUNCTION_28_4();
  if (v1)
  {
    OUTLINED_FUNCTION_13();
    type metadata accessor for TokenizerRunner();
    OUTLINED_FUNCTION_19_6();
LABEL_6:
    OUTLINED_FUNCTION_0_0();
    return;
  }
  *(_QWORD *)(v0 + 16) = v6;
  v7 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v7 + 16) = 0xD000000000000014;
  *(_QWORD *)(v7 + 24) = 0x8000000248C99490;
  objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v8 = OUTLINED_FUNCTION_54_2(0xD000000000000019, (uint64_t)"com.apple.tokengeneration");
  if (v8)
  {
    v9 = v8;
    v10 = (id)MobileGestalt_get_current_device();
    if (v10)
    {
      v11 = v10;
      internalBuild = MobileGestalt_get_internalBuild();

      *(_QWORD *)(v2 + 24) = v9;
      *(_QWORD *)(v2 + 32) = 0xD000000000000014;
      *(_QWORD *)(v2 + 40) = 0x8000000248C99490;
      *(_QWORD *)(v2 + 48) = closure #1 in Overridable<A>.init(key:)partial apply;
      *(_QWORD *)(v2 + 56) = v7;
      *(_BYTE *)(v2 + 64) = internalBuild;
      *(_QWORD *)(v2 + 72) = v4;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void TokenizerRunner.tokenizePromptModules(promptModules:tokenTable:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  Swift::Int v38;
  char v39;
  Swift::Bool v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;

  OUTLINED_FUNCTION_2();
  v94 = v1;
  v92 = v0;
  v3 = v2;
  v88 = v4;
  v5 = OUTLINED_FUNCTION_180();
  *(_QWORD *)&v95 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_35_0();
  v89 = v6;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v81 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
  OUTLINED_FUNCTION_7_1();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v81 - v14;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
  v81 = v5;
  v90 = Dictionary.init(dictionaryLiteral:)();
  v91 = v3 + 64;
  OUTLINED_FUNCTION_21_3();
  v18 = v17 & v16;
  v93 = (unint64_t)(v19 + 63) >> 6;
  v82 = v93 - 1;
  swift_bridgeObjectRetain();
  v20 = 0;
  v100 = v3;
  v83 = v3 + 104;
  v96 = MEMORY[0x24BEE4AD8] + 8;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v20 << 6);
LABEL_4:
      OUTLINED_FUNCTION_65_4(*(_QWORD *)(v100 + 48) + *(_QWORD *)(v95 + 72) * v22, (uint64_t)v13);
      v23 = *(_QWORD *)(v100 + 56) + 32 * v22;
      v24 = OUTLINED_FUNCTION_89();
      outlined init with copy of Any(v23, (uint64_t)&v13[*(int *)(v24 + 48)]);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v24);
      goto LABEL_11;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    if (v25 >= v93)
    {
      v27 = v20;
    }
    else
    {
      v26 = *(_QWORD *)(v91 + 8 * v25);
      if (v26)
        goto LABEL_8;
      v27 = v20 + 1;
      if (v20 + 2 < v93)
      {
        v26 = *(_QWORD *)(v91 + 8 * (v20 + 2));
        if (v26)
        {
          v25 = v20 + 2;
LABEL_8:
          v18 = (v26 - 1) & v26;
          v22 = __clz(__rbit64(v26)) + (v25 << 6);
          v20 = v25;
          goto LABEL_4;
        }
        v27 = v20 + 2;
        if (v20 + 3 < v93)
        {
          v26 = *(_QWORD *)(v91 + 8 * (v20 + 3));
          if (v26)
          {
            v25 = v20 + 3;
            goto LABEL_8;
          }
          v25 = v20 + 4;
          v27 = v20 + 3;
          if (v20 + 4 < v93)
          {
            v26 = *(_QWORD *)(v91 + 8 * v25);
            if (v26)
              goto LABEL_8;
            while (v20 + 5 < v93)
            {
              v26 = *(_QWORD *)(v83 + 8 * v20++);
              if (v26)
              {
                v25 = v20 + 4;
                goto LABEL_8;
              }
            }
            v27 = v82;
          }
        }
      }
    }
    v28 = OUTLINED_FUNCTION_89();
    OUTLINED_FUNCTION_9_6((uint64_t)v13, v29, v30, v28);
    v18 = 0;
    v20 = v27;
LABEL_11:
    outlined init with take of (key: Prompt.SpecialToken, value: Any)?((uint64_t)v13, (uint64_t)v15, &demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
    v31 = OUTLINED_FUNCTION_89();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v31) == 1)
      break;
    v32 = &v15[*(int *)(v31 + 48)];
    outlined init with take of Prompt.SpecialToken((uint64_t)v15, (uint64_t)v9, type metadata accessor for Prompt.SpecialToken);
    outlined init with take of Any(v32, &v99);
    if (OUTLINED_FUNCTION_57_3())
    {
      v86 = v97;
      v87 = v98;
      v33 = v89;
      OUTLINED_FUNCTION_65_4((uint64_t)v9, v89);
      v34 = v90;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v99 = v34;
      v85 = specialized __RawDictionaryStorage.find<A>(_:)(v33);
      v36 = *(_QWORD *)(v34 + 16);
      v37 = (v35 & 1) == 0;
      v38 = v36 + v37;
      if (__OFADD__(v36, v37))
        goto LABEL_62;
      v39 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, String>);
      v40 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38);
      v41 = v39;
      v42 = v85;
      if (v40)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v89);
        OUTLINED_FUNCTION_29_3();
        if (!v44)
          goto LABEL_64;
        v42 = v43;
      }
      v45 = v99;
      v90 = v99;
      if ((v41 & 1) != 0)
      {
        v46 = (_QWORD *)(*(_QWORD *)(v99 + 56) + 16 * v42);
        swift_bridgeObjectRelease();
        v47 = v87;
        *v46 = v86;
        v46[1] = v47;
      }
      else
      {
        OUTLINED_FUNCTION_43_4(v99 + 8 * (v42 >> 6));
        OUTLINED_FUNCTION_65_4(v89, v48 + *(_QWORD *)(v95 + 72) * v42);
        v49 = (_QWORD *)(*(_QWORD *)(v45 + 56) + 16 * v42);
        v50 = v87;
        *v49 = v86;
        v49[1] = v50;
        v51 = *(_QWORD *)(v45 + 16);
        v52 = __OFADD__(v51, 1);
        v53 = v51 + 1;
        if (v52)
          goto LABEL_63;
        *(_QWORD *)(v45 + 16) = v53;
      }
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_115_1(v89);
      OUTLINED_FUNCTION_115_1((uint64_t)v9);
    }
    else
    {
      OUTLINED_FUNCTION_115_1((uint64_t)v9);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  v54 = *(_QWORD *)(v88 + 16);
  if (v54)
  {
    v55 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
    v56 = 1;
    v57 = 1 - v54;
    v58 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)&v59 = 136315394;
    v95 = v59;
    v91 = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      v60 = *((_QWORD *)v55 - 1);
      v61 = *v55;
      OUTLINED_FUNCTION_88_0();
      v62 = v94;
      TokenizerRunner.tokenize(renderedPromptFragments:tokenTable:shouldAppendBeginPromptToken:)(v60, v100, v56 & 1, v63, v64, v65, v66, v67, v81, v82);
      v69 = v68;
      v94 = v62;
      if ((v61 & 1) != 0)
      {
        if (v62)
          goto LABEL_57;
        if (one-time initialization token for tokenization != -1)
          swift_once();
        v70 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v70, (uint64_t)static Log.tokenization);
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_60_2();
        v71 = (void *)Logger.logObject.getter();
        v72 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_34_3(v72))
        {
          OUTLINED_FUNCTION_19_3();
          v73 = OUTLINED_FUNCTION_19_3();
          OUTLINED_FUNCTION_17_3(v73);
          OUTLINED_FUNCTION_60_2();
          OUTLINED_FUNCTION_56_3();
        }
      }
      else
      {
        if (v62)
        {
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_40_0();
          goto LABEL_59;
        }
        if (one-time initialization token for tokenization != -1)
          swift_once();
        v74 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v74, (uint64_t)static Log.tokenization);
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_60_2();
        v71 = (void *)Logger.logObject.getter();
        v75 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_34_3(v75))
        {
          OUTLINED_FUNCTION_19_3();
          v76 = OUTLINED_FUNCTION_19_3();
          OUTLINED_FUNCTION_17_3(v76);
          OUTLINED_FUNCTION_60_2();
          OUTLINED_FUNCTION_56_3();
        }
      }

      OUTLINED_FUNCTION_40_0();
      OUTLINED_FUNCTION_40_0();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_62_4();
        v58 = v79;
      }
      v78 = *(_QWORD *)(v58 + 16);
      v77 = *(_QWORD *)(v58 + 24);
      if (v78 >= v77 >> 1)
      {
        OUTLINED_FUNCTION_80_1(v77);
        OUTLINED_FUNCTION_62_4();
        v58 = v80;
      }
      *(_QWORD *)(v58 + 16) = v78 + 1;
      *(_QWORD *)(v58 + 8 * v78 + 32) = v69;
      OUTLINED_FUNCTION_26();
      if (!v57)
        break;
      v56 = 0;
      v55 += 16;
      if (++v57 == 1)
        goto LABEL_61;
    }
    swift_bridgeObjectRelease();
  }
LABEL_59:
  OUTLINED_FUNCTION_0_0();
}

uint64_t TokenizerRunner.tokenize(prompt:tokenTable:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_180();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
  Dictionary.init(dictionaryLiteral:)();
  TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)();
  v1 = v0;
  OUTLINED_FUNCTION_13();
  return v1;
}

void TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL8 v43;
  Swift::Int v44;
  Swift::Bool v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;

  OUTLINED_FUNCTION_2();
  v81 = v1;
  v73 = v0;
  v80 = v2;
  v4 = v3;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_180();
  v88 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_35_0();
  v84 = v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v70 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
  OUTLINED_FUNCTION_7_1();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v70 - v16;
  v79 = *(_QWORD *)v6;
  v78 = *(_OWORD *)(v6 + 8);
  v77 = *(_QWORD *)(v6 + 24);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, type metadata accessor for Prompt.SpecialToken, (uint64_t)&protocol conformance descriptor for Prompt.SpecialToken);
  v70 = v7;
  v85 = Dictionary.init(dictionaryLiteral:)();
  v86 = v4 + 64;
  OUTLINED_FUNCTION_21_3();
  v20 = v19 & v18;
  v87 = (unint64_t)(v21 + 63) >> 6;
  v71 = v87 - 1;
  OUTLINED_FUNCTION_38_0();
  v22 = 0;
  v23 = &demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any);
  v72 = v4 + 104;
  if (!v20)
    goto LABEL_4;
LABEL_2:
  v24 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  v25 = v24 | (v22 << 6);
LABEL_3:
  OUTLINED_FUNCTION_35_3(*(_QWORD *)(v4 + 48) + *(_QWORD *)(v88 + 72) * v25, (uint64_t)v15);
  v26 = *(_QWORD *)(v4 + 56) + 32 * v25;
  v27 = v23;
  v28 = OUTLINED_FUNCTION_58_3();
  outlined init with copy of Any(v26, (uint64_t)&v15[*(int *)(v28 + 48)]);
  v29 = v28;
  v23 = v27;
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v29);
  while (1)
  {
    outlined init with take of (key: Prompt.SpecialToken, value: Any)?((uint64_t)v15, (uint64_t)v17, &demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any)?);
    v36 = OUTLINED_FUNCTION_58_3();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v36) == 1)
    {
      swift_release();
      v91 = v79;
      v92 = v78;
      v93 = v77;
      v58 = v81;
      Prompt.renderPromptFragments(tokenTable:localizationOverrideMap:)();
      if (v58)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        OUTLINED_FUNCTION_0_0();
        return;
      }
      v60 = v59;
      swift_bridgeObjectRelease();
      TokenizerRunner.tokenize(renderedPromptFragments:tokenTable:shouldAppendBeginPromptToken:)(v60, v4, 1, v61, v62, v63, v64, v65, v70, v71);
      if (one-time initialization token for tokenization == -1)
      {
LABEL_39:
        v66 = OUTLINED_FUNCTION_23_2();
        __swift_project_value_buffer(v66, (uint64_t)static Log.tokenization);
        OUTLINED_FUNCTION_88_0();
        swift_bridgeObjectRetain();
        v67 = Logger.logObject.getter();
        v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (_DWORD *)OUTLINED_FUNCTION_19_3();
          v91 = OUTLINED_FUNCTION_19_3();
          *v69 = 136315394;
          type metadata accessor for Prompt.RenderedPromptFragment(0);
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_56_3();
        }

        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_40_0();
        goto LABEL_37;
      }
LABEL_45:
      swift_once();
      goto LABEL_39;
    }
    v37 = &v17[*(int *)(v36 + 48)];
    outlined init with take of Prompt.SpecialToken((uint64_t)v17, (uint64_t)v11, type metadata accessor for Prompt.SpecialToken);
    outlined init with take of Any(v37, &v91);
    if (OUTLINED_FUNCTION_57_3())
      break;
LABEL_12:
    OUTLINED_FUNCTION_55_3((uint64_t)v11);
    if (v20)
      goto LABEL_2;
LABEL_4:
    v30 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v30 >= v87)
    {
      v32 = v22;
    }
    else
    {
      v31 = *(_QWORD *)(v86 + 8 * v30);
      if (v31)
        goto LABEL_7;
      v32 = v22 + 1;
      if (v22 + 2 < v87)
      {
        v31 = *(_QWORD *)(v86 + 8 * (v22 + 2));
        if (v31)
        {
          v30 = v22 + 2;
LABEL_7:
          v20 = (v31 - 1) & v31;
          v25 = __clz(__rbit64(v31)) + (v30 << 6);
          v22 = v30;
          goto LABEL_3;
        }
        v32 = v22 + 2;
        if (v22 + 3 < v87)
        {
          v31 = *(_QWORD *)(v86 + 8 * (v22 + 3));
          if (v31)
          {
            v30 = v22 + 3;
            goto LABEL_7;
          }
          v30 = v22 + 4;
          v32 = v22 + 3;
          if (v22 + 4 < v87)
          {
            v31 = *(_QWORD *)(v86 + 8 * v30);
            if (v31)
              goto LABEL_7;
            while (v22 + 5 < v87)
            {
              v31 = *(_QWORD *)(v72 + 8 * v22++);
              if (v31)
              {
                v30 = v22 + 4;
                goto LABEL_7;
              }
            }
            v32 = v71;
          }
        }
      }
    }
    v33 = OUTLINED_FUNCTION_58_3();
    OUTLINED_FUNCTION_9_6((uint64_t)v15, v34, v35, v33);
    v20 = 0;
    v22 = v32;
  }
  v75 = v89;
  v76 = v90;
  v38 = v84;
  OUTLINED_FUNCTION_35_3((uint64_t)v11, v84);
  v39 = v85;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v91 = v39;
  v40 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
  v41 = *(_QWORD *)(v39 + 16);
  v82 = v42;
  v43 = (v42 & 1) == 0;
  v44 = v41 + v43;
  if (__OFADD__(v41, v43))
    goto LABEL_43;
  v83 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, String>);
  v45 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v44);
  v23 = &demangling cache variable for type metadata for (key: Prompt.SpecialToken, value: Any);
  if (!v45 || (v83 = specialized __RawDictionaryStorage.find<A>(_:)(v84), (v82 & 1) == (v46 & 1)))
  {
    v47 = v91;
    v85 = v91;
    if ((v82 & 1) != 0)
    {
      v48 = (_QWORD *)(*(_QWORD *)(v91 + 56) + 16 * v83);
      swift_bridgeObjectRelease();
      v49 = v76;
      *v48 = v75;
      v48[1] = v49;
    }
    else
    {
      OUTLINED_FUNCTION_43_4(v91 + 8 * (v83 >> 6));
      OUTLINED_FUNCTION_35_3(v52, v50 + *(_QWORD *)(v88 + 72) * v51);
      v53 = (_QWORD *)(*(_QWORD *)(v47 + 56) + 16 * v83);
      v54 = v76;
      *v53 = v75;
      v53[1] = v54;
      v55 = *(_QWORD *)(v47 + 16);
      v56 = __OFADD__(v55, 1);
      v57 = v55 + 1;
      if (v56)
        goto LABEL_44;
      *(_QWORD *)(v47 + 16) = v57;
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_55_3(v84);
    goto LABEL_12;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t TokenizerRunner.shouldPreferSingleTokenId(fragment:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_5();
  v4 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  outlined init with copy of Prompt.SpecialToken?(a1 + *(int *)(v4 + 20), (uint64_t)v1);
  v5 = type metadata accessor for Prompt.SpecialToken(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v1, 1, v5) == 1)
  {
    outlined destroy of (Locale?, Locale?)((uint64_t)v1, &demangling cache variable for type metadata for Prompt.SpecialToken?);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = *v1;
    v7 = v1[1];
    OUTLINED_FUNCTION_165();
    outlined destroy of Grammar((uint64_t)v1, type metadata accessor for Prompt.SpecialToken);
  }
  if (one-time initialization token for turnEnd != -1)
    swift_once();
  v8 = (_QWORD *)__swift_project_value_buffer(v5, (uint64_t)static Prompt.SpecialToken.Chat.turnEnd);
  if (v7)
  {
    if (v6 == *v8 && v7 == v8[1])
      v10 = 1;
    else
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_15_1();
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

void TokenizerRunner.tokenize(renderedPromptFragments:tokenTable:shouldAppendBeginPromptToken:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(__int128 *__return_ptr, id);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;

  OUTLINED_FUNCTION_2();
  v13 = v11;
  v15 = v14;
  v17 = v16;
  v40 = v18;
  v19 = type metadata accessor for Prompt.RenderedPromptFragment(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_5();
  if ((*(_BYTE *)(v10 + 64) & 1) == 0)
    goto LABEL_3;
  v21 = *(void (**)(__int128 *__return_ptr, id))(v10 + 48);
  v22 = *(id *)(v10 + 24);
  OUTLINED_FUNCTION_60_2();
  swift_retain();
  v21(&v42, v22);
  swift_release();
  OUTLINED_FUNCTION_26();

  if (BYTE8(v42) != 1)
  {
    a10 = v42;
  }
  else
  {
LABEL_3:
    if (one-time initialization token for startPrompt != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_180();
    v24 = __swift_project_value_buffer(v23, (uint64_t)static Prompt.SpecialToken.startPrompt);
    specialized Dictionary.subscript.getter(v24, v17, &v42);
    if (v43)
    {
      if ((OUTLINED_FUNCTION_57_3() & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      outlined destroy of (Locale?, Locale?)((uint64_t)&v42, &demangling cache variable for type metadata for Any?);
    }
    a10 = 1;
  }
LABEL_11:
  v26 = MEMORY[0x24BEE4AF8];
  if ((a10 & 0x8000000000000000) == 0 && (v15 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v26 = OUTLINED_FUNCTION_18_0();
    *(_OWORD *)(v26 + 16) = xmmword_248C911B0;
    *(_QWORD *)(v26 + 32) = a10;
  }
  *(_QWORD *)&v42 = v26;
  v27 = *(_QWORD *)(v40 + 16);
  if (v27)
  {
    v28 = v40 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v41 = *(_QWORD *)(v20 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      OUTLINED_FUNCTION_35_3(v28, (uint64_t)v12);
      v29 = TokenizerRunner.shouldPreferSingleTokenId(fragment:)((uint64_t)v12);
      v30 = *v12;
      v31 = v12[1];
      OUTLINED_FUNCTION_60_2();
      v32 = v30;
      v33 = v31;
      if ((v29 & 1) != 0)
      {
        v34 = TokenizerRunner.tokenID(forText:)(*(Swift::String *)&v32);
        OUTLINED_FUNCTION_26();
        if (!v34)
        {
          OUTLINED_FUNCTION_68_4();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_149_1();
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
          OUTLINED_FUNCTION_18_7();
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          outlined destroy of Grammar((uint64_t)v12, type metadata accessor for Prompt.RenderedPromptFragment);
          break;
        }
        v35 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_61_5();
          v35 = v38;
        }
        v37 = *(_QWORD *)(v35 + 16);
        v36 = *(_QWORD *)(v35 + 24);
        if (v37 >= v36 >> 1)
        {
          OUTLINED_FUNCTION_80_1(v36);
          OUTLINED_FUNCTION_61_5();
          v35 = v39;
        }
        *(_QWORD *)(v35 + 16) = v37 + 1;
        *(_QWORD *)(v35 + 8 * v37 + 32) = v34;
        *(_QWORD *)&v42 = v35;
      }
      else
      {
        TokenizerRunner.tokenize(_:)(v30, v31);
        OUTLINED_FUNCTION_26();
        if (v13)
        {
          outlined destroy of Grammar((uint64_t)v12, type metadata accessor for Prompt.RenderedPromptFragment);
          OUTLINED_FUNCTION_68_4();
          swift_bridgeObjectRelease();
          break;
        }
        specialized Array.append<A>(contentsOf:)();
      }
      OUTLINED_FUNCTION_55_3((uint64_t)v12);
      v28 += v41;
      if (!--v27)
      {
        OUTLINED_FUNCTION_68_4();
        break;
      }
    }
  }
  OUTLINED_FUNCTION_0_0();
}

_QWORD *TokenizerRunner.tokenize(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  void *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  id v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[8];

  v58[6] = *MEMORY[0x24BDAC8D0];
  v56 = a1;
  v57 = a2;
  v3 = *(_QWORD *)(v2 + 72);
  v52 = v3 + 64;
  v4 = 1 << *(_BYTE *)(v3 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v53 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v54 = v7;
      v9 = v8 | (v7 << 6);
      goto LABEL_20;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v10 >= v53)
      goto LABEL_25;
    v11 = *(_QWORD *)(v52 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v53)
        goto LABEL_25;
      v11 = *(_QWORD *)(v52 + 8 * v12);
      if (!v11)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v53)
          goto LABEL_25;
        v11 = *(_QWORD *)(v52 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_19:
    v6 = (v11 - 1) & v11;
    v54 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_20:
    v14 = *(_QWORD *)(v3 + 48) + 16 * v9;
    v16 = *(void **)v14;
    v15 = *(void **)(v14 + 8);
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v9);
    v18 = *v17;
    v4 = v17[1];
    v58[0] = v56;
    v58[1] = v57;
    v55[0] = v16;
    v55[1] = v15;
    v19 = lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_107_0();
    OUTLINED_FUNCTION_165();
    v49 = v19;
    v50 = v19;
    v48 = v19;
    v47 = MEMORY[0x24BEE0D00];
    v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v57 = v20;
    swift_bridgeObjectRelease();
    if (one-time initialization token for tokenization != -1)
      swift_once();
    v21 = OUTLINED_FUNCTION_23_2();
    __swift_project_value_buffer(v21, (uint64_t)static Log.tokenization);
    OUTLINED_FUNCTION_107_0();
    OUTLINED_FUNCTION_165();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = OUTLINED_FUNCTION_19_3();
      v58[0] = OUTLINED_FUNCTION_19_3();
      *(_DWORD *)v24 = 136315650;
      OUTLINED_FUNCTION_107_0();
      *(_QWORD *)(v24 + 4) = OUTLINED_FUNCTION_203((uint64_t)v16, v25, v58);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      OUTLINED_FUNCTION_165();
      *(_QWORD *)(v24 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v4, v58);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 22) = 2080;
      OUTLINED_FUNCTION_165();
      *(_QWORD *)(v24 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v58);
      OUTLINED_FUNCTION_15_1();
      _os_log_impl(&dword_248BE5000, v22, v23, "Text after substituting %s with %s: %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_7_4();
    }

    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_40_0();
    v7 = v54;
  }
  v13 = v7 + 4;
  if (v7 + 4 < v53)
  {
    v11 = *(_QWORD *)(v52 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        v12 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        if (v12 >= v53)
          goto LABEL_25;
        v11 = *(_QWORD *)(v52 + 8 * v12);
        ++v13;
        if (v11)
          goto LABEL_19;
      }
LABEL_42:
      __break(1u);
LABEL_43:
      OUTLINED_FUNCTION_165();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_15_1();
      if (!v31)
        goto LABEL_44;
LABEL_28:
      v55[0] = (id)MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      if ((v31 & 0x8000000000000000) == 0)
      {
        v32 = 0;
        v33 = v55[0];
        do
        {
          if ((v4 & 0xC000000000000001) != 0)
            v34 = (id)MEMORY[0x2495A8070](v32, v4);
          else
            v34 = *(id *)(v4 + 8 * v32 + 32);
          v35 = v34;
          v36 = objc_msgSend(v34, sel_integerValue, v47, v48, v49, v50);

          v55[0] = v33;
          v38 = v33[2];
          v37 = v33[3];
          if (v38 >= v37 >> 1)
          {
            OUTLINED_FUNCTION_80_1(v37);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v33 = v55[0];
          }
          ++v32;
          v33[2] = v38 + 1;
          v33[v38 + 4] = v36;
        }
        while (v31 != v32);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_15_1();
        return v33;
      }
      __break(1u);
      goto LABEL_47;
    }
    v12 = v7 + 4;
    goto LABEL_19;
  }
LABEL_25:
  swift_release();
  v26 = *(void **)(v51 + 16);
  swift_beginAccess();
  OUTLINED_FUNCTION_38_0();
  v27 = (void *)MEMORY[0x2495A7C8C](v56, v57);
  OUTLINED_FUNCTION_37_0();
  v55[0] = 0;
  v28 = objc_msgSend(v26, sel_tokenize_error_, v27, v55);

  v29 = v55[0];
  if (v28)
  {
    type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    if ((unint64_t)v4 >> 62)
      goto LABEL_43;
    v31 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v31)
    {
LABEL_44:
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_15_1();
      return (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    goto LABEL_28;
  }
  v39 = v55[0];
  v40 = _convertNSErrorToError(_:)();

  swift_willThrow();
  MEMORY[0x2495A8D84](v40);
  if (one-time initialization token for tokenization == -1)
    goto LABEL_38;
LABEL_47:
  swift_once();
LABEL_38:
  v41 = OUTLINED_FUNCTION_23_2();
  v33 = (_QWORD *)__swift_project_value_buffer(v41, (uint64_t)static Log.tokenization);
  v42 = (void *)Logger.logObject.getter();
  v43 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_37_3(v43))
  {
    *(_WORD *)OUTLINED_FUNCTION_19_3() = 0;
    OUTLINED_FUNCTION_24_3(&dword_248BE5000, v44, v45, "Failed to tokenize text");
    OUTLINED_FUNCTION_7_4();
  }

  OUTLINED_FUNCTION_149_1();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  return v33;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TokenizerRunner.detokenize(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  Class isa;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String result;
  id v24[3];

  v24[2] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = *(void **)(v1 + 16);
  v3 = *((_QWORD *)a1._rawValue + 2);
  if (v3)
  {
    v24[0] = (id)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v5 = (uint64_t *)((char *)a1._rawValue + 32);
    do
    {
      v6 = *v5++;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithInteger_, v6);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v3;
    }
    while (v3);
  }
  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSNumber);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = 0;
  v8 = objc_msgSend(v2, sel_detokenize_error_, isa, v24);

  v9 = v24[0];
  if (v8)
  {
    v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;
    v13 = v9;

    v24[0] = v10;
    v24[1] = v12;
    v14 = String.init<A>(_:)();
  }
  else
  {
    v16 = v24[0];
    v17 = _convertNSErrorToError(_:)();

    swift_willThrow();
    MEMORY[0x2495A8D84](v17);
    if (one-time initialization token for tokenization != -1)
      swift_once();
    v18 = OUTLINED_FUNCTION_23_2();
    __swift_project_value_buffer(v18, (uint64_t)static Log.tokenization);
    v19 = (void *)Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_37_3(v20))
    {
      *(_WORD *)OUTLINED_FUNCTION_19_3() = 0;
      OUTLINED_FUNCTION_24_3(&dword_248BE5000, v21, v22, "Failed to detokenize the tokenIDs associated with prompt");
      OUTLINED_FUNCTION_7_4();
    }

    OUTLINED_FUNCTION_149_1();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet((unint64_t *)&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, (uint64_t (*)(uint64_t))type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
    OUTLINED_FUNCTION_18_7();
    swift_storeEnumTagMultiPayload();
    v14 = swift_willThrow();
  }
  result._object = v15;
  result._countAndFlagsBits = v14;
  return result;
}

Swift::String __swiftcall TokenizerRunner.text(forTokenID:)(Swift::Int forTokenID)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  v2 = objc_msgSend(*(id *)(v1 + 16), sel_textForTokenID_, forTokenID);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = String.init<A>(_:)();
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

Swift::Int __swiftcall TokenizerRunner.tokenID(forText:)(Swift::String forText)
{
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::Int result;

  v2 = *(void **)(v1 + 16);
  v3 = (void *)MEMORY[0x2495A7C8C](forText._countAndFlagsBits, forText._object);
  objc_msgSend(v2, sel_tokenIDForText_, v3);

  OUTLINED_FUNCTION_23();
  return result;
}

Swift::Bool __swiftcall TokenizerRunner.isByte(tokenID:)(Swift::Int tokenID)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + 16), sel_isByte_, tokenID);
}

uint64_t TokenizerRunner.vocabulary()()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_vocabulary);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = v14;
    v5 = v2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v6 = String.init<A>(_:)();
      v8 = v7;
      v10 = *(_QWORD *)(v14 + 16);
      v9 = *(_QWORD *)(v14 + 24);
      if (v10 >= v9 >> 1)
      {
        v12 = OUTLINED_FUNCTION_80_1(v9);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12, v10 + 1, 1);
      }
      v5 += 16;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = v14 + 16 * v10;
      *(_QWORD *)(v11 + 32) = v6;
      *(_QWORD *)(v11 + 40) = v8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_15_1();
    return MEMORY[0x24BEE4AF8];
  }
  return v4;
}

uint64_t static TokenizerRunner.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  __int128 v17;
  uint64_t v18;
  char v19;

  type metadata accessor for NSNumber(0, &lazy cache variable for type metadata for NSObject);
  if ((static NSObject.== infix(_:_:)() & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = *(_BYTE *)(a1 + 64);
    v16[0] = *(_QWORD *)(a1 + 24);
    v16[1] = v4;
    v17 = *(_OWORD *)(a1 + 40);
    v18 = v5;
    v19 = v6;
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *(_BYTE *)(a2 + 64);
    v12[0] = *(_QWORD *)(a2 + 24);
    v12[1] = v7;
    v13 = *(_OWORD *)(a2 + 40);
    v14 = v8;
    v15 = v9;
    v10 = static GenerationOverrides.== infix(_:_:)((uint64_t)v16, (uint64_t)v12);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

id TokenizerRunner.longestTokenLength.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_longestTokenLength);
}

id TokenizerRunner.vocabularyCount.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_vocabularyCount);
}

uint64_t TokenizerRunner.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[6];

  v5 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v5 + 16) = MEMORY[0x24BEE4AF8];
  v6 = *(void **)(v2 + 16);
  v7 = (void *)MEMORY[0x2495A7C8C](a1, a2);
  v11[4] = partial apply for closure #1 in TokenizerRunner.prefixTokenIDs(forPrefix:);
  v11[5] = v5;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ();
  v11[3] = &block_descriptor;
  v8 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_enumeratePrefixTokenIDsForPrefix_block_, v7, v8);
  _Block_release(v8);

  OUTLINED_FUNCTION_9_1();
  v9 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v9;
}

uint64_t closure #1 in TokenizerRunner.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  v9 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v9 + 16) = v8 + 1;
  v10 = (_QWORD *)(v9 + 24 * v8);
  v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed String) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  swift_retain();
  v3(a2, v4, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TokenizerRunner.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2)
{
  return TokenizerRunner.tokenIDs(forDecodedPrefix:)(a1, a2, (uint64_t)partial apply for closure #1 in TokenizerRunner.tokenIDs(forRawPrefix:), (uint64_t)&block_descriptor_17, (SEL *)&selRef_enumerateTokenIDsForRawPrefix_block_);
}

uint64_t TokenizerRunner.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[6];

  v11 = OUTLINED_FUNCTION_18_0();
  *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4AF8];
  v12 = *(void **)(v5 + 16);
  v13 = (void *)MEMORY[0x2495A7C8C](a1, a2);
  v17[4] = a3;
  v17[5] = v11;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = thunk for @escaping @callee_guaranteed (@unowned Int) -> ();
  v17[3] = a4;
  v14 = _Block_copy(v17);
  swift_retain();
  swift_release();
  objc_msgSend(v12, *a5, v13, v14);
  _Block_release(v14);

  OUTLINED_FUNCTION_9_1();
  v15 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v15;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t TokenizerRunner.tokenIDs(forDecodedPrefix:)(uint64_t a1, uint64_t a2)
{
  return TokenizerRunner.tokenIDs(forDecodedPrefix:)(a1, a2, (uint64_t)partial apply for closure #1 in TokenizerRunner.tokenIDs(forRawPrefix:), (uint64_t)&block_descriptor_21, (SEL *)&selRef_enumerateTokenIDsForDecodedPrefix_block_);
}

uint64_t closure #1 in TokenizerRunner.tokenIDs(forRawPrefix:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_9_1();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 16) = v4 + 1;
  *(_QWORD *)(v5 + 8 * v4 + 32) = a1;
  return swift_endAccess();
}

uint64_t TokenizerRunner.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  swift_release();
  OUTLINED_FUNCTION_15_1();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TokenizerRunner.__deallocating_deinit()
{
  TokenizerRunner.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TokenizerRunner(uint64_t *a1, uint64_t *a2)
{
  return static TokenizerRunner.== infix(_:_:)(*a1, *a2) & 1;
}

id @nonobjc TokenizerRunnerObjC.init(tokenizerPath:)()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = (void *)MEMORY[0x2495A7C8C]();
  swift_bridgeObjectRelease();
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithTokenizerPath_error_, v1, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t type metadata accessor for TokenizerRunner()
{
  return objc_opt_self();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for GenerationSchema();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_26_5();
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_10();
  if (v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v10;
  v14 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<GenerationSchema, Grammar>);
  if (!OUTLINED_FUNCTION_22_2(a3 & 1))
    goto LABEL_5;
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v13 = v15;
LABEL_5:
  v17 = *v3;
  if ((v14 & 1) != 0)
  {
    v18 = *(_QWORD *)(v17 + 56);
    v19 = v18 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for Grammar(0) - 8) + 72) * v13;
    outlined assign with take of Grammar(a1, v19);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v4, a2, v8);
    specialized _NativeDictionary._insert(at:key:value:)(v13, v4, a1, v17);
    OUTLINED_FUNCTION_8_1();
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD **v4;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;

  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_4_10();
  if (v11)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Character, Int>);
  if (OUTLINED_FUNCTION_22_2(a4 & 1))
  {
    specialized __RawDictionaryStorage.find<A>(_:)();
    OUTLINED_FUNCTION_29_3();
    if (!v15)
      goto LABEL_10;
    v12 = v14;
  }
  v16 = *v4;
  if ((v13 & 1) != 0)
  {
    *(_QWORD *)(v16[7] + 8 * v12) = a1;
    OUTLINED_FUNCTION_23_0();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v16);
    swift_bridgeObjectRetain();
  }
}

{
  _QWORD **v4;
  uint64_t v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t *v19;

  type metadata accessor for Prompt.SpecialToken(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_26_5();
  specialized __RawDictionaryStorage.find<A>(_:)(a3);
  OUTLINED_FUNCTION_4_10();
  if (v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  v14 = v11;
  v15 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Prompt.SpecialToken, String>);
  if (OUTLINED_FUNCTION_22_2(a4 & 1))
  {
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v15 & 1) == (v17 & 1))
    {
      v14 = v16;
      goto LABEL_5;
    }
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
LABEL_5:
  v18 = *v4;
  if ((v15 & 1) != 0)
  {
    v19 = (uint64_t *)(v18[7] + 16 * v14);
    swift_bridgeObjectRelease();
    *v19 = a1;
    v19[1] = a2;
  }
  else
  {
    _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(a3, v5, type metadata accessor for Prompt.SpecialToken);
    specialized _NativeDictionary._insert(at:key:value:)(v14, v5, a1, a2, v18);
  }
  OUTLINED_FUNCTION_8_1();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_8_10(a1, a2);
  OUTLINED_FUNCTION_4_10();
  if (v7)
  {
    __break(1u);
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v8 = v5;
  v9 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, (mask: IndexSet, isPotentiallyDeterministic: Bool)>);
  if (OUTLINED_FUNCTION_23_3())
  {
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_29_3();
    if (!v11)
      goto LABEL_10;
    v8 = v10;
  }
  v12 = *v4;
  if ((v9 & 1) != 0)
  {
    v13 = v12[7];
    v14 = v13
        + *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool))
                                - 8)
                    + 72)
        * v8;
    outlined assign with take of (mask: IndexSet, isPotentiallyDeterministic: Bool)(v2, v14);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v8, v3, v2, v12);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;

  OUTLINED_FUNCTION_8_10(a1, a2);
  OUTLINED_FUNCTION_4_10();
  if (v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = v5;
  v9 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Int, Int>);
  if (!OUTLINED_FUNCTION_23_3())
    goto LABEL_5;
  v10 = OUTLINED_FUNCTION_53_2();
  if ((v9 & 1) != (v11 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v8 = v10;
LABEL_5:
  v12 = *v4;
  if ((v9 & 1) != 0)
  {
    *(_QWORD *)(v12[7] + 8 * v8) = v2;
    OUTLINED_FUNCTION_23_0();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v8, v3, v2, v12);
  }
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  OUTLINED_FUNCTION_3_11(a1, a2, a3, a4);
  v7 = type metadata accessor for GenerationSchema();
  OUTLINED_FUNCTION_7_11(v7);
  v8 = *(_QWORD *)(v4 + 56);
  v9 = type metadata accessor for Grammar(0);
  outlined init with take of Prompt.SpecialToken(v5, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v6, type metadata accessor for Grammar);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 16) = v12;
    OUTLINED_FUNCTION_17_0();
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  OUTLINED_FUNCTION_3_11(a1, a2, a3, a4);
  v7 = type metadata accessor for CharacterSet();
  OUTLINED_FUNCTION_7_11(v7);
  *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6) = v5;
  v8 = *(_QWORD *)(v4 + 16);
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v4 + 16) = v10;
    OUTLINED_FUNCTION_17_0();
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  outlined init with take of (key: Prompt.SpecialToken, value: Any)?(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, &demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  v9 = a4[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a4[2] = v11;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

void specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for Prompt.SpecialToken(0);
  outlined init with take of Prompt.SpecialToken(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for Prompt.SpecialToken);
  v12 = (_QWORD *)(a5[7] + 16 * a1);
  *v12 = a3;
  v12[1] = a4;
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
}

uint64_t type metadata accessor for NSNumber(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_248C4485C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TokenizerRunner.prefixTokenIDs(forPrefix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in TokenizerRunner.prefixTokenIDs(forPrefix:)(a1, a2, a3, v3);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in TokenizerRunner.tokenIDs(forRawPrefix:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TokenizerRunner.tokenIDs(forRawPrefix:)(a1, v1);
}

uint64_t method lookup function for TokenizerRunner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TokenizerRunner.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TokenizerRunner.__allocating_init(tokenizerPath:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of TokenizerRunner.__allocating_init(tokenizerPath:substitutionTextForInputTokenText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenizePromptModules(promptModules:tokenTable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(prompt:tokenTable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(prompt:tokenTable:localizationOverrideMap:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenize(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of TokenizerRunner.detokenize(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TokenizerRunner.text(forTokenID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenID(forText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of TokenizerRunner.isByte(tokenID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TokenizerRunner.vocabulary()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TokenizerRunner.longestTokenLength.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of TokenizerRunner.vocabularyCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of TokenizerRunner.prefixTokenIDs(forPrefix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenIDs(forRawPrefix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of TokenizerRunner.tokenIDs(forDecodedPrefix:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t outlined init with copy of Prompt.SpecialToken?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.SpecialToken?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v3, v4, v5);
  OUTLINED_FUNCTION_23();
}

uint64_t outlined assign with take of (mask: IndexSet, isPotentiallyDeterministic: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (mask: IndexSet, isPotentiallyDeterministic: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined init with take of (key: Prompt.SpecialToken, value: Any)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_10_10(v3);
  OUTLINED_FUNCTION_23();
}

uint64_t outlined assign with take of Grammar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Grammar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined init with take of Prompt.SpecialToken(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_112_0(a1, a2, a3);
  OUTLINED_FUNCTION_10_10(v3);
  OUTLINED_FUNCTION_23();
}

uint64_t OUTLINED_FUNCTION_3_11(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 8 * (a1 >> 6) + 64) |= 1 << a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_7_11(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3 + *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72) * v2, v1, a1);
}

unint64_t OUTLINED_FUNCTION_8_10(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2);
}

uint64_t OUTLINED_FUNCTION_10_10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_17_3(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 176) = a1;
  *(_QWORD *)(v2 - 120) = a1;
  *v1 = *(_OWORD *)(v2 - 160);
  return type metadata accessor for Prompt.RenderedPromptFragment(0);
}

uint64_t OUTLINED_FUNCTION_18_7()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return swift_deallocPartialClassInstance();
}

BOOL OUTLINED_FUNCTION_22_2(Swift::Bool a1)
{
  Swift::Int v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

BOOL OUTLINED_FUNCTION_23_3()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

void OUTLINED_FUNCTION_24_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

id OUTLINED_FUNCTION_28_4()
{
  return @nonobjc TokenizerRunnerObjC.init(tokenizerPath:)();
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return swift_bridgeObjectRetain();
}

BOOL OUTLINED_FUNCTION_34_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_35_3(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(a1, a2, v2);
}

BOOL OUTLINED_FUNCTION_37_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_42_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_43_4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) |= v1;
}

void OUTLINED_FUNCTION_47_3(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_51_2()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_53_2()
{
  uint64_t v0;

  return specialized __RawDictionaryStorage.find<A>(_:)(v0);
}

id OUTLINED_FUNCTION_54_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return @nonobjc NSUserDefaults.init(suiteName:)(a1, (a2 - 32) | 0x8000000000000000);
}

void OUTLINED_FUNCTION_55_3(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Grammar(a1, v1);
}

void OUTLINED_FUNCTION_56_3()
{
  JUMPOUT(0x2495A7E30);
}

uint64_t OUTLINED_FUNCTION_57_3()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_61_5()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_62_4()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_65_4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  _s15TokenGeneration6PromptV07SpecialA0VWOcTm_0(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_68_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  _QWORD v17[4];

  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a4) & 0xF;
  else
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (v5)
  {
    v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        v10 = _decodeScalar(_:startingAt:)();
      }
      v12 = v11;
      LODWORD(v17[0]) = v10;
      v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0)
        break;
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    v14 = 0;
  }
  else
  {
LABEL_17:
    v14 = 1;
  }
  return v14 & 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(unint64_t *), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(unint64_t *);

  v30 = a1;
  v27 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
  {
LABEL_40:
    v23 = 1;
    return v23 & 1;
  }
  v24 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v25 = a6 & 0xFFFFFFFFFFFFFFLL;
  v11 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = 4 << v11;
  if ((a6 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a6) & 0xF;
  else
    v13 = a5 & 0xFFFFFFFFFFFFLL;
  v26 = v13;
  swift_bridgeObjectRetain();
  v14 = a3;
  while (1)
  {
    _StringGuts.validateScalarIndex(_:in:)(v14, a3, a4, a5, a6);
    if ((a6 & 0x1000000000000000) != 0)
    {
      result = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a6 & 0x2000000000000000) != 0)
      {
        v28 = a5;
        v29 = v25;
      }
      else if ((a5 & 0x1000000000000000) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }
      result = _decodeScalar(_:startingAt:)();
    }
    v16 = result;
    if ((v14 & 0xC) != v12 && (v14 & 1) != 0)
      break;
    if ((v14 & 0xC) == v12)
    {
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a5, a6);
      v14 = result;
    }
    if (v26 <= v14 >> 16)
      goto LABEL_42;
    if ((v14 & 1) != 0)
      goto LABEL_23;
    v14 = v14 & 0xC | _StringGuts.scalarAlignSlow(_:)(v14, a5, a6) & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a6 & 0x1000000000000000) != 0)
    {
LABEL_33:
      v14 = String.UnicodeScalarView._foreignIndex(after:)();
      goto LABEL_34;
    }
LABEL_24:
    v17 = v14 >> 16;
    if ((a6 & 0x2000000000000000) != 0)
    {
      v28 = a5;
      v29 = v25;
      v19 = *((unsigned __int8 *)&v28 + v17);
    }
    else
    {
      v18 = v24;
      if ((a5 & 0x1000000000000000) == 0)
        v18 = _StringObject.sharedUTF8.getter();
      v19 = *(unsigned __int8 *)(v18 + v17);
    }
    v20 = (char)v19;
    v21 = __clz(v19 ^ 0xFF) - 24;
    if (v20 >= 0)
      LOBYTE(v21) = 1;
    v14 = ((v17 + v21) << 16) | 5;
LABEL_34:
    LODWORD(v28) = v16;
    v22 = v30(&v28);
    if (v6)
    {
      swift_bridgeObjectRelease();
      return v23 & 1;
    }
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v23 = 0;
      return v23 & 1;
    }
    if (v27 == v14 >> 14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  if (v26 > v14 >> 16)
  {
LABEL_23:
    if ((a6 & 0x1000000000000000) != 0)
      goto LABEL_33;
    goto LABEL_24;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.init<A>(_:)(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;

  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF428], MEMORY[0x24BDCF468]);
  result = dispatch thunk of SetAlgebra.init()();
  v3 = 0;
  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7)
    goto LABEL_5;
LABEL_4:
  for (v7 &= v7 - 1; ; v7 = (v10 - 1) & v10)
  {
    result = dispatch thunk of SetAlgebra.insert(_:)();
    if (v7)
      goto LABEL_4;
LABEL_5:
    v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v9 >= v8)
      return swift_release();
    v10 = *(_QWORD *)(v4 + 8 * v9);
    ++v3;
    if (!v10)
    {
      v3 = v9 + 1;
      if (v9 + 1 >= v8)
        return swift_release();
      v10 = *(_QWORD *)(v4 + 8 * v3);
      if (!v10)
      {
        v3 = v9 + 2;
        if (v9 + 2 >= v8)
          return swift_release();
        v10 = *(_QWORD *)(v4 + 8 * v3);
        if (!v10)
        {
          v3 = v9 + 3;
          if (v9 + 3 >= v8)
            return swift_release();
          v10 = *(_QWORD *)(v4 + 8 * v3);
          if (!v10)
            break;
        }
      }
    }
LABEL_20:
    ;
  }
  v11 = v9 + 4;
  if (v11 >= v8)
    return swift_release();
  v10 = *(_QWORD *)(v4 + 8 * v11);
  if (v10)
  {
    v3 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    v3 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v3 >= v8)
      return swift_release();
    v10 = *(_QWORD *)(v4 + 8 * v3);
    ++v11;
    if (v10)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::String __swiftcall VocabularyManager.convertedText(forTokenID:)(Swift::Int forTokenID)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::Int v9;
  uint64_t v10;
  void *v11;
  Swift::String result;

  type metadata accessor for VocabularyManager.PrefixLookup(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_62_0();
  v5 = v4 - v3;
  VocabularyManager.prefixLookUp.getter((uint64_t *)(v4 - v3));
  v6 = *(_QWORD *)(v5 + 48);
  OUTLINED_FUNCTION_4();
  v7 = outlined destroy of VocabularyManager.PrefixLookup(v5);
  if (forTokenID < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(v6 + 16) <= (unint64_t)forTokenID)
  {
LABEL_5:
    __break(1u);
    goto LABEL_6;
  }
  v9 = v6 + 16 * forTokenID;
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(void **)(v9 + 40);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_123();
  v7 = v10;
  v8 = v11;
LABEL_6:
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

void VocabularyManager.extractCandidates(nextValidTerminals:afterStartWord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t (*v41)(uint64_t);
  void (*v42)(int64_t, uint64_t *, uint64_t);
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t i;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[4];
  uint64_t v109;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_35_0();
  v91 = v7;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v89 - v9;
  type metadata accessor for VocabularyManager.PrefixLookup(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_35_0();
  v98 = v12;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_84_0();
  v97 = v14;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_84_0();
  v96 = v16;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_122_2();
  v95 = v18;
  v102 = type metadata accessor for IndexSet();
  v106 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_35_0();
  v94 = v19;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_122_2();
  v99 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_49();
  v104 = v23;
  v24 = OUTLINED_FUNCTION_79_0();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_35_0();
  v107 = v26;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_84_0();
  v105 = (uint64_t *)v28;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_122_2();
  v101 = v30;
  v100 = type metadata accessor for TerminalSymbol(0);
  v31 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  OUTLINED_FUNCTION_62_0();
  v34 = (uint64_t *)(v33 - v32);
  v103 = a1;
  v35 = (uint64_t)v10;
  IndexSet.init()();
  v36 = MEMORY[0x24BEE4AF8];
  v109 = MEMORY[0x24BEE4AF8];
  v108[3] = MEMORY[0x24BEE4B08];
  v37 = *(_QWORD *)(a2 + 16);
  v90 = a3;
  v93 = v35;
  if (v37)
  {
    v38 = a2 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
    v39 = *(_QWORD *)(v31 + 72);
    v89 = a2;
    swift_bridgeObjectRetain();
    v40 = type metadata accessor for TerminalSymbol;
    v92 = v39;
    do
    {
      outlined init with copy of TerminalSymbol(v38, (uint64_t)v34, v40);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        v41 = v40;
        v42 = *(void (**)(int64_t, uint64_t *, uint64_t))(v25 + 32);
        v42(v101, v34, v24);
        OUTLINED_FUNCTION_23_4((uint64_t)v105, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = OUTLINED_FUNCTION_20_3();
        v43 = *(_QWORD *)(v36 + 16);
        if (v43 >= *(_QWORD *)(v36 + 24) >> 1)
          v36 = OUTLINED_FUNCTION_20_3();
        *(_QWORD *)(v36 + 16) = v43 + 1;
        v42(v36+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v43, v105, v24);
        (*(void (**)(int64_t, uint64_t))(v25 + 8))(v101, v24);
        v40 = v41;
        v39 = v92;
      }
      else
      {
        specialized Set._Variant.insert(_:)(v108, *v34, v34[1]);
        swift_bridgeObjectRelease();
      }
      v38 += v39;
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    a3 = v90;
  }
  v44 = v91;
  v45 = v99;
  v46 = v104;
  v47 = v107;
  swift_bridgeObjectRetain();
  v92 = v36;
  v48 = specialized Set.init<A>(_:)();
  v49 = 0;
  v100 = v48 + 56;
  v105 = (uint64_t *)v48;
  OUTLINED_FUNCTION_21_3();
  v52 = v51 & v50;
  v101 = (unint64_t)(v53 + 63) >> 6;
  if ((v51 & v50) == 0)
    goto LABEL_14;
LABEL_13:
  v54 = __clz(__rbit64(v52));
  v52 &= v52 - 1;
  for (i = v54 | (v49 << 6); ; i = __clz(__rbit64(v57)) + (v49 << 6))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16))(v46, v105[6] + *(_QWORD *)(v25 + 72) * i, v24);
    OUTLINED_FUNCTION_15_0(v46, 0);
    if (__swift_getEnumTagSinglePayload(v46, 1, v24) == 1)
    {
      swift_release();
      goto LABEL_63;
    }
    OUTLINED_FUNCTION_23_4(v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
    v59 = a3;
    if ((a3 & 1) == 0)
    {
      v68 = v97;
      OUTLINED_FUNCTION_4_11();
      v69 = *(_QWORD *)(v68 + 16);
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_18_8();
      if (*(_QWORD *)(v69 + 16) && (OUTLINED_FUNCTION_11_7(), (v70 & 1) != 0))
      {
        OUTLINED_FUNCTION_17_4();
        v71 = v102;
        OUTLINED_FUNCTION_10_11(v44, v72, v73);
        v74 = 0;
      }
      else
      {
        v74 = 1;
        v71 = v102;
      }
      __swift_storeEnumTagSinglePayload(v44, v74, 1, v71);
      OUTLINED_FUNCTION_123();
      if (__swift_getEnumTagSinglePayload(v44, 1, v71) == 1)
      {
        IndexSet.init()();
        outlined destroy of AssetBackedServerConfiguration?(v44, &demangling cache variable for type metadata for IndexSet?);
      }
      else
      {
        OUTLINED_FUNCTION_10_11(v94, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32));
      }
      OUTLINED_FUNCTION_24_4();
      OUTLINED_FUNCTION_12_5();
      v79 = v98;
      OUTLINED_FUNCTION_4_11();
      v76 = *(_QWORD *)(v79 + 24);
      OUTLINED_FUNCTION_4();
      OUTLINED_FUNCTION_18_8();
      v47 = v107;
      if (*(_QWORD *)(v76 + 16))
      {
        OUTLINED_FUNCTION_11_7();
        if ((v80 & 1) != 0)
        {
          OUTLINED_FUNCTION_16_5();
          OUTLINED_FUNCTION_123();
          if ((OUTLINED_FUNCTION_22_3() & 1) == 0)
          {
            OUTLINED_FUNCTION_7_12();
            v76 = v83;
          }
          v45 = v99;
          goto LABEL_54;
        }
      }
      OUTLINED_FUNCTION_123();
      v45 = v99;
LABEL_58:
      v46 = v104;
      a3 = v59;
      goto LABEL_59;
    }
    v60 = v95;
    OUTLINED_FUNCTION_4_11();
    v61 = *(_QWORD *)(v60 + 32);
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_18_8();
    if (*(_QWORD *)(v61 + 16) && (OUTLINED_FUNCTION_11_7(), (v62 & 1) != 0))
    {
      OUTLINED_FUNCTION_17_4();
      v63 = v93;
      v64 = v102;
      OUTLINED_FUNCTION_10_11(v93, v65, v66);
      v67 = 0;
    }
    else
    {
      v67 = 1;
      v64 = v102;
      v63 = v93;
    }
    __swift_storeEnumTagSinglePayload(v63, v67, 1, v64);
    OUTLINED_FUNCTION_123();
    if (__swift_getEnumTagSinglePayload(v63, 1, v64) == 1)
    {
      IndexSet.init()();
      outlined destroy of AssetBackedServerConfiguration?(v63, &demangling cache variable for type metadata for IndexSet?);
    }
    else
    {
      OUTLINED_FUNCTION_10_11(v45, v63, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32));
    }
    OUTLINED_FUNCTION_24_4();
    OUTLINED_FUNCTION_12_5();
    v75 = v96;
    OUTLINED_FUNCTION_4_11();
    v76 = *(_QWORD *)(v75 + 40);
    OUTLINED_FUNCTION_4();
    OUTLINED_FUNCTION_18_8();
    v47 = v107;
    if (!*(_QWORD *)(v76 + 16) || (OUTLINED_FUNCTION_11_7(), (v77 & 1) == 0))
    {
      OUTLINED_FUNCTION_123();
      goto LABEL_58;
    }
    OUTLINED_FUNCTION_16_5();
    OUTLINED_FUNCTION_123();
    if ((OUTLINED_FUNCTION_22_3() & 1) == 0)
    {
      OUTLINED_FUNCTION_7_12();
      v76 = v78;
    }
LABEL_54:
    v81 = *(_QWORD *)(v76 + 16);
    if (v81 >= *(_QWORD *)(v76 + 24) >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      v76 = v82;
    }
    *(_QWORD *)(v76 + 16) = v81 + 1;
    *(_QWORD *)(v76 + 8 * v81 + 32) = v44;
    v109 = v76;
    a3 = v90;
    v44 = v91;
    v46 = v104;
    v47 = v107;
LABEL_59:
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v47, v24);
    if (v52)
      goto LABEL_13;
LABEL_14:
    v56 = v49 + 1;
    if (__OFADD__(v49, 1))
    {
      __break(1u);
LABEL_69:
      __break(1u);
      return;
    }
    if (v56 >= v101)
      goto LABEL_62;
    v57 = *(_QWORD *)(v100 + 8 * v56);
    ++v49;
    if (!v57)
    {
      v49 = v56 + 1;
      if (v56 + 1 >= v101)
        goto LABEL_62;
      v57 = *(_QWORD *)(v100 + 8 * v49);
      if (!v57)
      {
        v49 = v56 + 2;
        if (v56 + 2 >= v101)
          goto LABEL_62;
        v57 = *(_QWORD *)(v100 + 8 * v49);
        if (!v57)
          break;
      }
    }
LABEL_27:
    v52 = (v57 - 1) & v57;
  }
  v58 = v56 + 3;
  if (v58 < v101)
  {
    v57 = *(_QWORD *)(v100 + 8 * v58);
    if (!v57)
    {
      while (1)
      {
        v49 = v58 + 1;
        if (__OFADD__(v58, 1))
          goto LABEL_69;
        if (v49 >= v101)
          goto LABEL_62;
        v57 = *(_QWORD *)(v100 + 8 * v49);
        ++v58;
        if (v57)
          goto LABEL_27;
      }
    }
    v49 = v58;
    goto LABEL_27;
  }
LABEL_62:
  OUTLINED_FUNCTION_15_0(v46, 1);
  swift_release();
LABEL_63:
  v84 = MEMORY[0x24BEE4AF8];
  specialized MutableCollection<>.sort(by:)(&v109);
  v85 = v109;
  v108[0] = v84;
  v86 = *(_QWORD *)(v109 + 16);
  if (v86)
  {
    swift_bridgeObjectRetain();
    v87 = 0;
    do
    {
      v88 = *(_QWORD *)(v85 + 8 * v87++ + 32);
      OUTLINED_FUNCTION_4();
      static VocabularyManager.mergeSortedRanks(_:_:)(v108, v88);
      OUTLINED_FUNCTION_123();
    }
    while (v86 != v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void static VocabularyManager.mergeSortedRanks(_:_:)(_QWORD *a1, uint64_t a2)
{
  int64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a2 + 16);
  if (__OFADD__(*(_QWORD *)(*a1 + 16), v2))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v4 = a1;
  v23 = *a1;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v6 = v23;
  v7 = 0;
  v24 = v5;
  v8 = *(_QWORD *)(v23 + 16);
  if (v8)
  {
    v9 = 0;
    if (!v2)
      goto LABEL_26;
    v10 = v5;
    v22 = v4;
    v9 = 0;
    v7 = 0;
    v11 = a2 + 32;
    do
    {
      if (v7 >= *(_QWORD *)(v6 + 16))
      {
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v9 >= (unint64_t)v2)
        goto LABEL_29;
      v12 = *(_QWORD *)(v23 + 32 + 8 * v7);
      v13 = *(_QWORD *)(v11 + 8 * v9);
      if (v12 >= v13)
      {
        v15 = *(_QWORD *)(v10 + 16);
        v16 = *(_QWORD *)(v10 + 24) >> 1;
        v17 = v15 + 1;
        if (v12 == v13)
        {
          if (v16 <= v15)
          {
            OUTLINED_FUNCTION_8_11();
            v10 = v20;
            v6 = v23;
          }
          *(_QWORD *)(v10 + 16) = v17;
          *(_QWORD *)(v10 + 8 * v15 + 32) = v12;
          ++v7;
        }
        else
        {
          if (v16 <= v15)
          {
            OUTLINED_FUNCTION_8_11();
            v10 = v21;
            v6 = v23;
          }
          *(_QWORD *)(v10 + 16) = v17;
          *(_QWORD *)(v10 + 8 * v15 + 32) = v13;
        }
        ++v9;
      }
      else
      {
        v14 = *(_QWORD *)(v10 + 16);
        if (v14 >= *(_QWORD *)(v10 + 24) >> 1)
        {
          OUTLINED_FUNCTION_8_11();
          v10 = v19;
          v6 = v23;
        }
        *(_QWORD *)(v10 + 16) = v14 + 1;
        *(_QWORD *)(v10 + 8 * v14 + 32) = v12;
        ++v7;
      }
    }
    while ((uint64_t)v7 < v8 && v9 < v2);
    v24 = v10;
    v4 = v22;
    if (*(_QWORD *)(v6 + 16) >= v7)
      goto LABEL_26;
    __break(1u);
  }
  v9 = v7;
LABEL_26:
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (v2 >= v9)
  {
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    *v4 = v24;
    return;
  }
LABEL_31:
  __break(1u);
}

uint64_t VocabularyManager.prefixLookUp.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_23_1();
  v6 = v4 - v5;
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v13[-v8];
  v10 = v1 + OBJC_IVAR____TtC19TokenGenerationCore17VocabularyManager____lazy_storage___prefixLookUp;
  swift_beginAccess();
  outlined init with copy of VocabularyManager.PrefixLookup?(v10, (uint64_t)v9);
  v11 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11) != 1)
    return outlined init with take of VocabularyManager.PrefixLookup((uint64_t)v9, (uint64_t)a1);
  outlined destroy of AssetBackedServerConfiguration?((uint64_t)v9, &demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  VocabularyManager.processTokenizerVocab()(a1);
  outlined init with copy of TerminalSymbol((uint64_t)a1, v6, type metadata accessor for VocabularyManager.PrefixLookup);
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v11);
  swift_beginAccess();
  outlined assign with take of VocabularyManager.PrefixLookup?(v6, v10);
  return swift_endAccess();
}

uint64_t VocabularyManager.tokenRanks(withPrefix:startOfWord:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  type metadata accessor for VocabularyManager.PrefixLookup(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_23_1();
  v9 = (uint64_t *)(v7 - v8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v17 - v11);
  if ((a3 & 1) != 0)
  {
    VocabularyManager.prefixLookUp.getter((uint64_t *)((char *)&v17 - v11));
    v9 = v12 + 1;
  }
  else
  {
    VocabularyManager.prefixLookUp.getter(v9);
    v12 = v9;
  }
  v13 = *v9;
  OUTLINED_FUNCTION_4();
  outlined destroy of VocabularyManager.PrefixLookup((uint64_t)v12);
  specialized Dictionary.subscript.getter(a1, a2, v13);
  v15 = v14;
  OUTLINED_FUNCTION_123();
  if (v15)
    return v15;
  else
    return MEMORY[0x24BEE4AF8];
}

Swift::Bool __swiftcall VocabularyManager.allPrefixesHaveStartOfWordTokenPair(terminals:)(Swift::OpaquePointer terminals)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *rawValue;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = type metadata accessor for TerminalSymbol(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_62_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  OUTLINED_FUNCTION_7_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_49();
  v47 = v10;
  v11 = OUTLINED_FUNCTION_79_0();
  v12 = *(_QWORD *)(v11 - 8);
  v49 = v11;
  v50 = v12;
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_23_1();
  v15 = v13 - v14;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v42 - v18;
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_84_0();
  v48 = v20;
  OUTLINED_FUNCTION_27_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_122_2();
  v52 = v22;
  CharacterSet.init()();
  v23 = *((_QWORD *)terminals._rawValue + 2);
  if (v23)
  {
    v42 = v8;
    v43 = v15;
    v44 = v19;
    rawValue = terminals._rawValue;
    v46 = v1;
    v24 = (char *)terminals._rawValue
        + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v25 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain();
    v26 = 0;
    v27 = type metadata accessor for TerminalSymbol;
    v28 = v48;
    do
    {
      outlined init with copy of TerminalSymbol((uint64_t)v24, v7, v27);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        v51 = v26;
        v29 = v25;
        v30 = v27;
        v31 = v50;
        v32 = v3;
        v33 = v49;
        OUTLINED_FUNCTION_10_11(v28, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32));
        CharacterSet.formUnion(_:)();
        v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
        v27 = v30;
        v25 = v29;
        v26 = v51;
        v35 = v33;
        v3 = v32;
        v34(v28, v35);
      }
      else
      {
        specialized Sequence.forEach(_:)(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
        OUTLINED_FUNCTION_123();
      }
      v24 += v25;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease();
    v15 = v43;
    v19 = v44;
    v8 = v42;
  }
  v36 = v47;
  VocabularyManager.prefixLookUp.getter(v47);
  v37 = v49;
  v38 = *(void (**)(uint64_t, char *, uint64_t))(v50 + 16);
  v39 = v48;
  v38(v48, (char *)v36 + *(int *)(v8 + 32), v49);
  outlined destroy of VocabularyManager.PrefixLookup((uint64_t)v36);
  v40 = v52;
  v38(v15, (char *)v52, v37);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750], MEMORY[0x24BDCB778]);
  dispatch thunk of SetAlgebra.intersection(_:)();
  LOBYTE(v38) = dispatch thunk of SetAlgebra.isEmpty.getter();
  OUTLINED_FUNCTION_27_6((uint64_t)v19);
  OUTLINED_FUNCTION_27_6(v39);
  OUTLINED_FUNCTION_27_6(v40);
  return v38 & 1;
}

uint64_t VocabularyManager.processTokenizerVocab()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)();
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)();
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)();
  uint64_t v54;
  _QWORD *v55;
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t (*v65)();
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)();
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _BOOL8 v87;
  Swift::Int v88;
  uint64_t v89;
  char v90;
  Swift::Bool v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  _BOOL8 v102;
  Swift::Int v103;
  uint64_t v104;
  char v105;
  Swift::Bool v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  void (*v117)(char *, uint64_t);
  unint64_t v118;
  uint64_t (*v119)();
  uint64_t (*v120)();
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  unint64_t v125;
  uint64_t v126;
  Swift::Bool v127;
  unint64_t v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t (*v138)();
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  void *v142;
  Swift::String v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t (*v148)();
  uint64_t v149;
  uint64_t v150;
  _BOOL4 v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  _BOOL8 v158;
  unint64_t v159;
  char v160;
  Swift::Bool v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BOOL8 v175;
  unint64_t v176;
  Swift::Bool v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  Swift::String v191;
  uint64_t v192;
  void *v193;
  void *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _BOOL8 v198;
  unint64_t v199;
  Swift::Bool v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  Swift::String v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t (*v216)();
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  void (*v224)(char *, uint64_t);
  char *v225;
  uint64_t v226;
  int *v227;
  uint64_t v229;
  _QWORD v230[2];
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void (*v243)(_QWORD *@<X8>);
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t (*v247)();
  _BOOL4 v248;
  uint64_t v249;
  void (*v250)(_QWORD *@<X8>);
  uint64_t (*v251)();
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t (*v255)();
  uint64_t (*v256)();
  uint64_t (*v257)();
  uint64_t (*v258)();
  void (*v259)(_QWORD *@<X8>);
  uint64_t v260;
  void (*v261)(_QWORD *@<X8>);
  _QWORD *v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  char *v267;
  uint64_t v268;
  void (*v269)(_QWORD *@<X8>);
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  char *v273;
  unint64_t v274;
  uint64_t (*v275)();
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t (*v285)();
  void (*v286)(uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t (*v292)();
  uint64_t v293;
  uint64_t v294;

  v235 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v247 = (uint64_t (*)())((char *)&v233 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t)&v233 - v5;
  v7 = type metadata accessor for CharacterSet();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB750];
  v280 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v251 = (uint64_t (*)())((char *)&v233 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v257 = (uint64_t (*)())((char *)&v233 - v12);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v273 = (char *)&v233 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v275 = (uint64_t (*)())((char *)&v233 - v16);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v267 = (char *)&v233 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v285 = (uint64_t (*)())((char *)&v233 - v20);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v284 = (char *)&v233 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v233 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v233 - v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v252 = Dictionary.init(dictionaryLiteral:)();
  v249 = Dictionary.init(dictionaryLiteral:)();
  v244 = v27;
  CharacterSet.init()();
  v236 = v25;
  CharacterSet.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Int>);
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, v8, MEMORY[0x24BDCB760]);
  v279 = Dictionary.init(dictionaryLiteral:)();
  v28 = Dictionary.init(dictionaryLiteral:)();
  v271 = Dictionary.init(dictionaryLiteral:)();
  v287 = v7;
  v253 = Dictionary.init(dictionaryLiteral:)();
  v29 = v1[11];
  v30 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v29);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 40))(v29, v30);
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  v32 = (uint64_t (*)())v31;
  v34 = v33;
  v294 = v33;
  v35 = *((_QWORD *)v32 + 2);
  v272 = v1;
  v277 = v6;
  v255 = v32;
  v270 = v28;
  if (v35)
  {
    v36 = v1 + 2;
    v37 = v32;
    swift_bridgeObjectRetain();
    v38 = (uint64_t *)((char *)v37 + 40);
    do
    {
      v39 = *(v38 - 1);
      v40 = *v38;
      v41 = __swift_project_boxed_opaque_existential_1(v36, v272[5]);
      v42 = v39 == 4091452 && v40 == 0xE300000000000000;
      if (v42 || (v43 = *v41, v44 = v41[1], (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        v45 = 0xE100000000000000;
        v46 = 10;
      }
      else
      {
        v292 = (uint64_t (*)())v39;
        v293 = v40;
        v290 = v43;
        v291 = v44;
        v288 = 32;
        v289 = 0xE100000000000000;
        v231 = lazy protocol witness table accessor for type String and conformance String();
        v232 = v231;
        v230[1] = v231;
        v230[0] = MEMORY[0x24BEE0D00];
        v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v45 = v47;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v34 = v51;
      }
      v48 = *(_QWORD *)(v34 + 16);
      if (v48 >= *(_QWORD *)(v34 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        v34 = v52;
      }
      v38 += 2;
      *(_QWORD *)(v34 + 16) = v48 + 1;
      v49 = v34 + 16 * v48;
      *(_QWORD *)(v49 + 32) = v46;
      *(_QWORD *)(v49 + 40) = v45;
      --v35;
      isUniquelyReferenced_nonNull_native = (uint64_t)v284;
    }
    while (v35);
    v53 = v255;
    swift_bridgeObjectRelease();
    v294 = v34;
    v6 = v277;
  }
  else
  {
    v53 = v32;
    isUniquelyReferenced_nonNull_native = (uint64_t)v284;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(v34 + 16));
  v292 = (uint64_t (*)())v54;
  v55 = 0;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v292, (uint64_t)&v294);
  v56 = v292;
  v57 = v280;
  v58 = v294;
  specialized _copyCollectionToContiguousArray<A>(_:)(0, *(_QWORD *)(v294 + 16));
  v60 = v59;
  v61 = *((_QWORD *)v56 + 2);
  if (v61)
  {
    swift_retain();
    v62 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
LABEL_177:
      specialized _ArrayBuffer._consumeAndCreateNew()();
      v62 = v229;
    }
    v63 = 0;
    do
    {
      v64 = *((_QWORD *)v56 + v63 + 4);
      if ((v64 & 0x8000000000000000) != 0)
      {
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
LABEL_166:
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
        goto LABEL_177;
      }
      if (v64 >= *(_QWORD *)(v62 + 16))
        goto LABEL_162;
      *(_QWORD *)(v62 + 32 + 8 * v64) = v63++;
    }
    while (v61 != v63);
    v234 = v62;
    swift_release();
  }
  else
  {
    v234 = v59;
  }
  v266 = v55;
  v65 = v53;
  v264 = *(_QWORD *)(v58 + 16);
  v256 = v56;
  if (v264)
  {
    v258 = 0;
    v269 = 0;
    v259 = 0;
    v261 = 0;
    v250 = 0;
    v243 = 0;
    v66 = 0;
    v55 = v272;
    v245 = v272 + 2;
    v263 = (char *)v56 + 32;
    v262 = (_QWORD *)((char *)v53 + 32);
    while (1)
    {
      if (v66 >= *((_QWORD *)v56 + 2))
        goto LABEL_163;
      v67 = *(_QWORD *)&v263[8 * v66];
      if ((v67 & 0x8000000000000000) != 0)
        goto LABEL_164;
      if (v67 >= *(_QWORD *)(v294 + 16))
        goto LABEL_165;
      if (v67 >= *((_QWORD *)v65 + 2))
        goto LABEL_166;
      v68 = v294 + 16 * v67;
      v61 = *(_QWORD *)(v68 + 32);
      v69 = *(_QWORD *)(v68 + 40);
      v70 = &v262[2 * v67];
      v71 = *v70;
      v53 = (uint64_t (*)())v70[1];
      v72 = v55[14];
      v73 = *(_QWORD *)(v72 + 16);
      if (v73)
      {
        if (*(_QWORD *)(v72 + 32) == v67)
          goto LABEL_154;
        if (v73 != 1)
        {
          v74 = 5;
          while (1)
          {
            v75 = v74 - 3;
            if (__OFADD__(v74 - 4, 1))
              break;
            if (*(_QWORD *)(v72 + 8 * v74) == v67)
              goto LABEL_154;
            ++v74;
            if (v75 == v73)
              goto LABEL_38;
          }
          __break(1u);
LABEL_160:
          __break(1u);
          goto LABEL_161;
        }
      }
LABEL_38:
      v58 = v57;
      v76 = v55;
      v268 = v71;
      v278 = v67;
      v276 = v66;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v77 = specialized Collection.first.getter(v61, v69);
      swift_bridgeObjectRelease();
      v274 = v77;
      if ((v77 & 0x100000000) != 0)
      {
        swift_bridgeObjectRelease();
        v55 = v76;
        v57 = v58;
      }
      else
      {
        v265 = (unint64_t)v53;
        v282 = v61;
        v283 = v69;
        v78 = v76[7];
        v79 = *(_QWORD *)(v78 + 16);
        v260 = v78;
        if (v79)
        {
          v57 = v58;
          v53 = (uint64_t (*)())(v78
                              + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80)));
          swift_bridgeObjectRetain();
          v281 = *(_QWORD *)(v58 + 72);
          v286 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(v58 + 16);
          v80 = v258;
          v56 = _s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0;
          v55 = v266;
          while (1)
          {
            v81 = v287;
            v286(v6, v53, v287);
            __swift_storeEnumTagSinglePayload(v6, 0, 1, v81);
            if (__swift_getEnumTagSinglePayload(v6, 1, v81) == 1)
              break;
            v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(isUniquelyReferenced_nonNull_native, v6, v287);
            MEMORY[0x24BDAC7A8](v82);
            v231 = isUniquelyReferenced_nonNull_native;
            if ((specialized Sequence.allSatisfy(_:)((uint64_t (*)(_QWORD *))_s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0, (uint64_t)v230, v282, v283) & 1) != 0)
            {
              v286((uint64_t)v285, (uint64_t (*)())isUniquelyReferenced_nonNull_native, v287);
              _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v80);
              v83 = v279;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v292 = (uint64_t (*)())v83;
              v61 = v83;
              specialized __RawDictionaryStorage.find<A>(_:)();
              v86 = *(_QWORD *)(v83 + 16);
              v87 = (v85 & 1) == 0;
              v88 = v86 + v87;
              if (__OFADD__(v86, v87))
                goto LABEL_160;
              v89 = v84;
              v90 = v85;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CharacterSet, Set<Int>>);
              v91 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v88);
              v92 = (uint64_t)v292;
              isUniquelyReferenced_nonNull_native = (uint64_t)v284;
              if (v91)
              {
                specialized __RawDictionaryStorage.find<A>(_:)();
                if ((v90 & 1) != (v94 & 1))
                  goto LABEL_178;
                v89 = v93;
              }
              v95 = v92;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v90 & 1) == 0)
              {
                v96 = v267;
                v286((uint64_t)v267, v285, v287);
                specialized _NativeDictionary._insert(at:key:value:)(v89, v96, MEMORY[0x24BEE4B08], v95);
              }
              v279 = v95;
              swift_bridgeObjectRelease();
              specialized Set._Variant.insert(_:)();
              v57 = v280;
              v97 = *(void (**)(char *, uint64_t))(v280 + 8);
              v58 = v287;
              v97((char *)v285, v287);
              v97((char *)isUniquelyReferenced_nonNull_native, v58);
              v80 = (uint64_t (*)())specialized thunk for @callee_guaranteed () -> (@owned Set<Int>);
              v6 = v277;
            }
            else if ((CharacterSet.contains(_:)() & 1) != 0)
            {
              v56 = v80;
              v286((uint64_t)v275, (uint64_t (*)())isUniquelyReferenced_nonNull_native, v287);
              _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v269);
              v98 = v270;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v292 = (uint64_t (*)())v98;
              v61 = v98;
              specialized __RawDictionaryStorage.find<A>(_:)();
              v101 = *(_QWORD *)(v98 + 16);
              v102 = (v100 & 1) == 0;
              v103 = v101 + v102;
              if (__OFADD__(v101, v102))
                goto LABEL_167;
              v104 = v99;
              v105 = v100;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CharacterSet, [Int]>);
              v106 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v103);
              v107 = (uint64_t)v292;
              isUniquelyReferenced_nonNull_native = (uint64_t)v284;
              if (v106)
              {
                specialized __RawDictionaryStorage.find<A>(_:)();
                if ((v105 & 1) != (v109 & 1))
                  goto LABEL_178;
                v104 = v108;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v105 & 1) == 0)
              {
                v110 = v267;
                v286((uint64_t)v267, v275, v287);
                specialized _NativeDictionary._insert(at:key:value:)(v104, v110, MEMORY[0x24BEE4AF8], v107);
              }
              v111 = *(_QWORD *)(v107 + 56);
              swift_bridgeObjectRelease();
              v112 = (uint64_t *)(v111 + 8 * v104);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v113 = *v112;
              v270 = v107;
              v114 = *(_QWORD *)(v113 + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v114);
              v115 = *v112;
              *(_QWORD *)(v115 + 16) = v114 + 1;
              v58 = v287;
              v116 = (char *)v275;
              *(_QWORD *)(v115 + 8 * v114 + 32) = v276;
              v57 = v280;
              v117 = *(void (**)(char *, uint64_t))(v280 + 8);
              v117(v116, v58);
              v117((char *)isUniquelyReferenced_nonNull_native, v58);
              v269 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
              v6 = v277;
              v80 = v56;
              v56 = _s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0;
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t))(v57 + 8))(isUniquelyReferenced_nonNull_native, v287);
            }
            v53 = (uint64_t (*)())((char *)v53 + v281);
            if (!--v79)
              goto LABEL_63;
          }
          v266 = v55;
          v258 = v80;
        }
        else
        {
          swift_bridgeObjectRetain();
          v80 = v258;
          v55 = v266;
          v57 = v58;
LABEL_63:
          v266 = v55;
          v258 = v80;
          __swift_storeEnumTagSinglePayload(v6, 1, 1, v287);
        }
        swift_bridgeObjectRelease();
        v61 = v282;
        v118 = HIBYTE(v283) & 0xF;
        if ((v283 & 0x2000000000000000) == 0)
          v118 = v282 & 0xFFFFFFFFFFFFLL;
        v55 = v272;
        v65 = v255;
        v56 = v256;
        if (v118)
        {
          swift_bridgeObjectRetain();
          v58 = String.subscript.getter();
          v120 = v119;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v259);
          v61 = v252;
          v57 = swift_isUniquelyReferenced_nonNull_native();
          v292 = (uint64_t (*)())v61;
          v53 = v120;
          specialized __RawDictionaryStorage.find<A>(_:)();
          v123 = *(_QWORD *)(v61 + 16);
          v124 = (v122 & 1) == 0;
          isUniquelyReferenced_nonNull_native = v123 + v124;
          if (__OFADD__(v123, v124))
            goto LABEL_170;
          v125 = v121;
          v6 = v122;
          v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<Character, [Int]>);
          v127 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v57, isUniquelyReferenced_nonNull_native);
          v57 = v280;
          if (v127)
          {
            specialized __RawDictionaryStorage.find<A>(_:)();
            if ((v6 & 1) != (v129 & 1))
              goto LABEL_178;
            v125 = v128;
          }
          v246 = v126;
          v56 = v292;
          swift_bridgeObjectRelease();
          if ((v6 & 1) == 0)
          {
            *((_QWORD *)v56 + (v125 >> 6) + 8) |= 1 << v125;
            v130 = (uint64_t *)(*((_QWORD *)v56 + 6) + 16 * v125);
            *v130 = v58;
            v130[1] = (uint64_t)v53;
            isUniquelyReferenced_nonNull_native = (uint64_t)v53;
            *(_QWORD *)(*((_QWORD *)v56 + 7) + 8 * v125) = MEMORY[0x24BEE4AF8];
            v131 = *((_QWORD *)v56 + 2);
            v132 = v131 + 1;
            v61 = __OFADD__(v131, 1);
            swift_bridgeObjectRetain();
            if ((v61 & 1) != 0)
              goto LABEL_174;
            *((_QWORD *)v56 + 2) = v132;
          }
          swift_bridgeObjectRetain();
          v133 = *((_QWORD *)v56 + 7);
          v252 = (uint64_t)v56;
          swift_bridgeObjectRelease();
          v134 = *(_QWORD *)(v133 + 8 * v125);
          v135 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v133 + 8 * v125) = v134;
          if ((v135 & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v134 = v208;
            *(_QWORD *)(v133 + 8 * v125) = v208;
          }
          v136 = *(_QWORD *)(v134 + 16);
          v137 = v276;
          if (v136 >= *(_QWORD *)(v134 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v138 = v53;
            v137 = v276;
            v134 = v209;
            *(_QWORD *)(v133 + 8 * v125) = v209;
          }
          else
          {
            v138 = v53;
          }
          *(_QWORD *)(v134 + 16) = v136 + 1;
          *(_QWORD *)(v134 + 8 * v136 + 32) = v137;
          v53 = v138;
          swift_bridgeObjectRelease();
          v55 = v272;
          v139 = v245;
          v140 = __swift_project_boxed_opaque_existential_1(v245, v272[5]);
          v141 = *v140;
          v142 = (void *)v140[1];
          swift_bridgeObjectRetain();
          v143._countAndFlagsBits = v141;
          v143._object = v142;
          LOBYTE(v141) = String.hasPrefix(_:)(v143);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v141 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            __swift_project_boxed_opaque_existential_1(v139, v55[5]);
            swift_bridgeObjectRetain();
            v61 = String.count.getter();
            swift_bridgeObjectRelease();
            v144 = specialized Collection.dropFirst(_:)(v61, v282, v283);
            v6 = *(_QWORD *)(v260 + 16);
            v56 = v247;
            isUniquelyReferenced_nonNull_native = (uint64_t)v284;
            v282 = v147;
            v55 = v266;
            v281 = v144;
            v265 = v145;
            v274 = v146;
            if (v6)
            {
              v148 = (uint64_t (*)())(v260
                                   + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80)));
              v268 = *(_QWORD *)(v57 + 72);
              v286 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(v57 + 16);
              v254 = v144 >> 14;
              v259 = (void (*)(_QWORD *@<X8>))(v145 >> 14);
              v149 = (v146 >> 59) & 1;
              if ((v147 & 0x1000000000000000) == 0)
                LOBYTE(v149) = 1;
              v150 = 4 << v149;
              v242 = v144 & 0xC;
              v241 = v150;
              v152 = (v144 & 1) == 0 || (v144 & 0xC) == v150;
              v248 = v152;
              v240 = HIBYTE(v147) & 0xF;
              v239 = v147 & 0xFFFFFFFFFFFFFFLL;
              v238 = (v147 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v237 = v146 & 0xFFFFFFFFFFFFLL;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v53 = v257;
              while (1)
              {
                v61 = v287;
                v286((uint64_t)v56, v148, v287);
                __swift_storeEnumTagSinglePayload((uint64_t)v56, 0, 1, v61);
                if (__swift_getEnumTagSinglePayload((uint64_t)v56, 1, v61) == 1)
                  break;
                v153 = v273;
                v154 = (*(uint64_t (**)(char *, uint64_t (*)(), uint64_t))(v57 + 32))(v273, v56, v287);
                v61 = (uint64_t)&v233;
                MEMORY[0x24BDAC7A8](v154);
                v231 = (unint64_t)v153;
                if ((specialized Sequence.allSatisfy(_:)((uint64_t (*)(unint64_t *))partial apply for closure #4 in VocabularyManager.processTokenizerVocab(), (uint64_t)v230, v281, v265, v274, v282) & 1) != 0)
                {
                  v286((uint64_t)v53, (uint64_t (*)())v153, v287);
                  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v261);
                  v61 = v271;
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v292 = (uint64_t (*)())v61;
                  specialized __RawDictionaryStorage.find<A>(_:)();
                  v157 = *(_QWORD *)(v61 + 16);
                  v158 = (v156 & 1) == 0;
                  v53 = (uint64_t (*)())(v157 + v158);
                  if (__OFADD__(v157, v158))
                    goto LABEL_168;
                  v159 = v155;
                  v160 = v156;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CharacterSet, Set<Int>>);
                  v161 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v53);
                  v271 = (uint64_t)v292;
                  v53 = v257;
                  isUniquelyReferenced_nonNull_native = (uint64_t)v284;
                  if (v161)
                  {
                    specialized __RawDictionaryStorage.find<A>(_:)();
                    if ((v160 & 1) != (v163 & 1))
                      goto LABEL_178;
                    v159 = v162;
                  }
                  swift_bridgeObjectRelease();
                  if ((v160 & 1) != 0)
                  {
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    v57 = v271;
                    *(_QWORD *)(v271 + 8 * (v159 >> 6) + 64) |= 1 << v159;
                    v61 = *(_QWORD *)(v57 + 48) + v159 * v268;
                    swift_bridgeObjectRetain();
                    v286(v61, v53, v287);
                    *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v159) = MEMORY[0x24BEE4B08];
                    v169 = *(_QWORD *)(v57 + 16);
                    v170 = __OFADD__(v169, 1);
                    v171 = v169 + 1;
                    if (v170)
                      goto LABEL_169;
                    *(_QWORD *)(v57 + 16) = v171;
                  }
                  swift_bridgeObjectRelease();
                  specialized Set._Variant.insert(_:)();
                  v57 = v280;
                  v61 = *(_QWORD *)(v280 + 8);
                  v58 = v287;
                  ((void (*)(uint64_t (*)(), uint64_t))v61)(v53, v287);
                  ((void (*)(char *, uint64_t))v61)(v273, v58);
                  v261 = specialized thunk for @callee_guaranteed () -> (@owned Set<Int>);
                }
                else
                {
                  v164 = v254;
                  if ((void (*)(_QWORD *@<X8>))v254 == v259)
                  {
                    (*(void (**)(char *, uint64_t))(v57 + 8))(v273, v287);
                  }
                  else
                  {
                    if (v248)
                    {
                      v165 = v254;
                      v166 = v281;
                      v167 = v282;
                      if (v242 == v241)
                      {
                        v166 = _StringGuts._slowEnsureMatchingEncoding(_:)(v281, v274, v282);
                        v164 = v254;
                        v167 = v282;
                        v165 = v166 >> 14;
                      }
                      if (v165 < v164 || v165 >= (unint64_t)v259)
                        goto LABEL_172;
                      if ((v166 & 1) == 0)
                      {
                        _StringGuts.scalarAlignSlow(_:)(v166, v274, v167);
                        v167 = v282;
                      }
                    }
                    else
                    {
                      v167 = v282;
                      if (v254 >= (unint64_t)v259)
                        goto LABEL_171;
                    }
                    if ((v167 & 0x1000000000000000) != 0)
                    {
                      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }
                    else if ((v167 & 0x2000000000000000) != 0)
                    {
                      v292 = (uint64_t (*)())v274;
                      v293 = v239;
                      swift_bridgeObjectRetain();
                      _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      v266 = v55;
                      if ((v274 & 0x1000000000000000) == 0)
                        _StringObject.sharedUTF8.getter();
                      swift_bridgeObjectRetain();
                      _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                      isUniquelyReferenced_nonNull_native = (uint64_t)v284;
                      v55 = v266;
                    }
                    v61 = (uint64_t)v273;
                    if ((CharacterSet.contains(_:)() & 1) != 0)
                    {
                      v286((uint64_t)v251, (uint64_t (*)())v61, v287);
                      _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v250);
                      v61 = v253;
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      v292 = (uint64_t (*)())v61;
                      specialized __RawDictionaryStorage.find<A>(_:)();
                      v174 = *(_QWORD *)(v61 + 16);
                      v175 = (v173 & 1) == 0;
                      v53 = (uint64_t (*)())(v174 + v175);
                      if (__OFADD__(v174, v175))
                        goto LABEL_173;
                      v176 = v172;
                      v57 = v173;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<CharacterSet, [Int]>);
                      v177 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v53);
                      v61 = (uint64_t)v292;
                      v53 = v257;
                      v253 = (uint64_t)v292;
                      if (v177)
                      {
                        specialized __RawDictionaryStorage.find<A>(_:)();
                        if ((v57 & 1) != (v179 & 1))
                          goto LABEL_178;
                        v176 = v178;
                        v61 = v253;
                      }
                      swift_bridgeObjectRelease();
                      if ((v57 & 1) != 0)
                      {
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        *(_QWORD *)(v61 + 8 * (v176 >> 6) + 64) |= 1 << v176;
                        v180 = *(_QWORD *)(v61 + 48) + v176 * v268;
                        swift_bridgeObjectRetain();
                        v181 = v180;
                        v61 = v253;
                        v286(v181, v251, v287);
                        *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v176) = MEMORY[0x24BEE4AF8];
                        v182 = *(_QWORD *)(v61 + 16);
                        v170 = __OFADD__(v182, 1);
                        v183 = v182 + 1;
                        if (v170)
                          goto LABEL_175;
                        *(_QWORD *)(v61 + 16) = v183;
                      }
                      v184 = *(_QWORD *)(v61 + 56);
                      swift_bridgeObjectRelease();
                      v185 = *(_QWORD *)(v184 + 8 * v176);
                      v186 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)(v184 + 8 * v176) = v185;
                      if ((v186 & 1) == 0)
                      {
                        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                        v185 = v189;
                        *(_QWORD *)(v184 + 8 * v176) = v189;
                      }
                      v187 = *(_QWORD *)(v185 + 16);
                      v188 = v276;
                      if (v187 >= *(_QWORD *)(v185 + 24) >> 1)
                      {
                        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                        v188 = v276;
                        v185 = v190;
                        *(_QWORD *)(v184 + 8 * v176) = v190;
                      }
                      v56 = v247;
                      *(_QWORD *)(v185 + 16) = v187 + 1;
                      *(_QWORD *)(v185 + 8 * v187 + 32) = v188;
                      v57 = v280;
                      v61 = *(_QWORD *)(v280 + 8);
                      v58 = v287;
                      ((void (*)(uint64_t (*)(), uint64_t))v61)(v251, v287);
                      ((void (*)(char *, uint64_t))v61)(v273, v58);
                      v250 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
                      isUniquelyReferenced_nonNull_native = (uint64_t)v284;
                    }
                    else
                    {
                      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v61, v287);
                    }
                  }
                }
                v148 = (uint64_t (*)())((char *)v148 + v268);
                if (!--v6)
                  goto LABEL_143;
              }
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
LABEL_143:
              __swift_storeEnumTagSinglePayload((uint64_t)v56, 1, 1, v287);
            }
            swift_bridgeObjectRelease();
            v6 = v277;
            v56 = (uint64_t (*)())v249;
            v266 = v55;
            if ((v281 ^ v265) >> 14)
            {
              v192 = Substring.subscript.getter();
              v194 = v193;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v243);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v292 = v56;
              v61 = (uint64_t)v56;
              specialized __RawDictionaryStorage.find<A>(_:)();
              v57 = v196;
              v197 = *((_QWORD *)v56 + 2);
              v198 = (v196 & 1) == 0;
              if (__OFADD__(v197, v198))
                goto LABEL_176;
              v199 = v195;
              v200 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v197 + v198);
              isUniquelyReferenced_nonNull_native = (uint64_t)v284;
              if (v200)
              {
                specialized __RawDictionaryStorage.find<A>(_:)();
                if ((v57 & 1) != (v202 & 1))
                {
                  while (1)
                  {
LABEL_178:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                    __break(1u);
                  }
                }
                v199 = v201;
              }
              v53 = v292;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              if ((v57 & 1) == 0)
              {
                specialized _NativeDictionary._insert(at:key:value:)(v199, v192, (uint64_t)v194, MEMORY[0x24BEE4AF8], v53);
                swift_bridgeObjectRetain();
              }
              v203 = *((_QWORD *)v53 + 7);
              v249 = (uint64_t)v53;
              swift_bridgeObjectRelease();
              v204 = (uint64_t *)(v203 + 8 * v199);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              v205 = *(_QWORD *)(*v204 + 16);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v205);
              v206 = *v204;
              *(_QWORD *)(v206 + 16) = v205 + 1;
              *(_QWORD *)(v206 + 8 * v205 + 32) = v276;
              swift_bridgeObjectRelease();
              v207._countAndFlagsBits = v192;
              v207._object = v194;
              v61 = (uint64_t)v236;
              CharacterSet.insert(charactersIn:)(v207);
              swift_bridgeObjectRelease();
              v259 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
              v243 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
              v57 = v280;
              v55 = v272;
              v65 = v255;
              v56 = v256;
            }
            else
            {
              swift_bridgeObjectRelease();
              v259 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
              v55 = v272;
              v65 = v255;
              v56 = v256;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            v191._countAndFlagsBits = v58;
            v191._object = v53;
            v61 = (uint64_t)v244;
            CharacterSet.insert(charactersIn:)(v191);
            v259 = specialized thunk for @callee_guaranteed () -> (@owned [Int]);
            v6 = v277;
            isUniquelyReferenced_nonNull_native = (uint64_t)v284;
            v65 = v255;
            v56 = v256;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v66 = v276;
LABEL_154:
      if (++v66 == v264)
        goto LABEL_158;
    }
  }
  v258 = 0;
  v269 = 0;
  v259 = 0;
  v261 = 0;
  v250 = 0;
  v243 = 0;
LABEL_158:
  swift_bridgeObjectRelease();
  v210 = v252;
  swift_bridgeObjectRetain();
  v211 = v249;
  swift_bridgeObjectRetain();
  v212 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v212);
  v286 = v213;
  swift_bridgeObjectRelease();
  v214 = v270;
  swift_bridgeObjectRetain();
  v215 = swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v215);
  v285 = (uint64_t (*)())v216;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v217 = v287;
  v218 = v214;
  v219 = v294;
  swift_bridgeObjectRetain();
  v220 = v267;
  v221 = v236;
  v222 = v211;
  v223 = v244;
  CharacterSet.subtracting(_:)();
  v224 = *(void (**)(char *, uint64_t))(v57 + 8);
  v224(v221, v217);
  v224(v223, v217);
  v225 = (char *)v235;
  *v235 = v210;
  *((_QWORD *)v225 + 1) = v222;
  *((_QWORD *)v225 + 2) = v286;
  *((_QWORD *)v225 + 3) = v218;
  v226 = v253;
  *((_QWORD *)v225 + 4) = v285;
  *((_QWORD *)v225 + 5) = v226;
  *((_QWORD *)v225 + 6) = v219;
  v227 = (int *)type metadata accessor for VocabularyManager.PrefixLookup(0);
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v225[v227[8]], v220, v217);
  *(_QWORD *)&v225[v227[9]] = v256;
  *(_QWORD *)&v225[v227[10]] = v234;
  swift_bridgeObjectRelease();
  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v258);
  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v269);
  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v259);
  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v261);
  _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v250);
  return _sxRi_zRi0_zlySaySiGIsegr_SgWOe((uint64_t)v243);
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<Int>)(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4B08];
}

void specialized thunk for @callee_guaranteed () -> (@owned [Int])(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v4 = v5;
  }
  v6 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
}

uint64_t VocabularyManager.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_bridgeObjectRelease();
  outlined destroy of AssetBackedServerConfiguration?(v0 + OBJC_IVAR____TtC19TokenGenerationCore17VocabularyManager____lazy_storage___prefixLookUp, &demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  return v0;
}

uint64_t VocabularyManager.__deallocating_deinit()
{
  VocabularyManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for VocabularyManager()
{
  return type metadata accessor for VocabularyManager(0);
}

uint64_t type metadata accessor for VocabularyManager(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for VocabularyManager);
}

void type metadata completion function for VocabularyManager()
{
  unint64_t v0;

  type metadata accessor for VocabularyManager.PrefixLookup?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for VocabularyManager.PrefixLookup?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for VocabularyManager.PrefixLookup?)
  {
    type metadata accessor for VocabularyManager.PrefixLookup(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VocabularyManager.PrefixLookup?);
  }
}

uint64_t type metadata accessor for VocabularyManager.PrefixLookup(uint64_t a1)
{
  return type metadata accessor for Symbol(a1, (uint64_t *)&type metadata singleton initialization cache for VocabularyManager.PrefixLookup);
}

uint64_t *initializeBufferWithCopyOfBuffer for VocabularyManager.PrefixLookup(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  char *v17;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[2];
    a1[1] = a2[1];
    a1[2] = v8;
    v9 = a2[4];
    a1[3] = a2[3];
    a1[4] = v9;
    v10 = a2[6];
    v11 = a3[8];
    v16 = (char *)a2 + v11;
    v17 = (char *)a1 + v11;
    a1[5] = a2[5];
    a1[6] = v10;
    v12 = type metadata accessor for CharacterSet();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v17, v16, v12);
    v13 = a3[10];
    *(uint64_t *)((char *)v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for VocabularyManager.PrefixLookup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VocabularyManager.PrefixLookup(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  char *v14;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = a3[8];
  v14 = (char *)a1 + v8;
  v13 = (char *)a2 + v8;
  a1[6] = a2[6];
  v9 = type metadata accessor for CharacterSet();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v14, v13, v9);
  v10 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VocabularyManager.PrefixLookup(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for VocabularyManager.PrefixLookup(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = a3[8];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for CharacterSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

_QWORD *assignWithTake for VocabularyManager.PrefixLookup(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  v6 = a3[8];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VocabularyManager.PrefixLookup()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248C48624(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = OUTLINED_FUNCTION_79_0();
    return __swift_getEnumTagSinglePayload((uint64_t)a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for VocabularyManager.PrefixLookup()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_248C486A0(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    v7 = OUTLINED_FUNCTION_79_0();
    return (_QWORD *)__swift_storeEnumTagSinglePayload((uint64_t)v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for VocabularyManager.PrefixLookup()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CharacterSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v25;
  Swift::Int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  Swift::Int v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  unint64_t *v39;
  unint64_t v40;
  Swift::Int v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  Swift::Int *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  Swift::Int v119;
  uint64_t v120;
  uint64_t v121;
  Swift::Int v122;
  uint64_t v123;
  char *v124;

  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (v5)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
      return;
    }
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
    goto LABEL_165;
  }
  v7 = v6;
  specialized static Array._allocateUninitialized(_:)(v5 / 2);
  v120 = v8;
  v121 = v5;
  v124 = v9;
  v118 = a1;
  if (v5 > 0)
  {
    v119 = v7;
    v10 = 0;
    v11 = *a1;
    v117 = *a1 - 8;
    v12 = MEMORY[0x24BEE4AF8];
    v123 = *a1;
    while (1)
    {
      v13 = v10++;
      if (v10 < v5)
      {
        v14 = *(_QWORD *)(v11 + 8 * v10);
        if ((v14 & 0x8000000000000000) != 0)
          goto LABEL_161;
        v15 = v12;
        v16 = *(_QWORD *)a2;
        v17 = *(_QWORD *)(*(_QWORD *)a2 + 16);
        if (v14 >= v17)
          goto LABEL_162;
        v18 = *(_QWORD *)(v123 + 8 * v13);
        if (v18 >= v17)
          goto LABEL_163;
        v19 = v16 + 32;
        v20 = (uint64_t *)(v16 + 32 + 16 * v14);
        v21 = *v20;
        v22 = v20[1];
        v23 = (_QWORD *)(v16 + 32 + 16 * v18);
        if (v21 == *v23 && v22 == v23[1])
        {
          v26 = v13 + 2;
          if (v13 + 2 < v121)
          {
            v25 = 0;
            goto LABEL_16;
          }
          v10 = v13 + 2;
          v5 = v121;
          v12 = v15;
          v11 = v123;
        }
        else
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v26 = v13 + 2;
          if (v13 + 2 < v121)
          {
            v17 = *(_QWORD *)(v16 + 16);
LABEL_16:
            v12 = v15;
            v11 = v123;
            while (1)
            {
              v27 = *(_QWORD *)(v123 + 8 * v26);
              if (v27 >= v17)
                goto LABEL_142;
              v28 = *(_QWORD *)(v123 + 8 * v10);
              if (v28 >= v17)
                goto LABEL_143;
              v29 = (uint64_t *)(v19 + 16 * v27);
              v30 = *v29;
              v31 = v29[1];
              v32 = (_QWORD *)(v19 + 16 * v28);
              if (v30 == *v32 && v31 == v32[1])
              {
                if ((v25 & 1) != 0)
                {
                  v5 = v121;
                  goto LABEL_33;
                }
              }
              else if (((v25 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
              {
                goto LABEL_29;
              }
              v34 = v26 + 1;
              v10 = v26;
              v26 = v34;
              if (v34 >= v121)
              {
                v26 = v34;
                goto LABEL_29;
              }
            }
          }
          v12 = v15;
          v11 = v123;
LABEL_29:
          v10 = v26;
          v5 = v121;
          if ((v25 & 1) != 0)
          {
LABEL_33:
            if (v26 < v13)
              goto LABEL_168;
            if (v13 < v26)
            {
              v35 = v26 - 1;
              v36 = v13;
              do
              {
                if (v36 != v35)
                {
                  if (!v11)
                    goto LABEL_172;
                  v37 = *(_QWORD *)(v11 + 8 * v36);
                  *(_QWORD *)(v11 + 8 * v36) = *(_QWORD *)(v11 + 8 * v35);
                  *(_QWORD *)(v11 + 8 * v35) = v37;
                }
                v84 = ++v36 < v35--;
              }
              while (v84);
            }
            v10 = v26;
          }
        }
      }
      if (v10 >= v5)
        goto LABEL_64;
      if (__OFSUB__(v10, v13))
        goto LABEL_164;
      if (v10 - v13 >= v119)
        goto LABEL_64;
      if (__OFADD__(v13, v119))
        goto LABEL_166;
      v38 = v13 + v119 >= v5 ? v5 : v13 + v119;
      if (v38 < v13)
        break;
      if (v10 == v38)
        goto LABEL_64;
      v39 = (unint64_t *)(v117 + 8 * v10);
      do
      {
        v40 = *(_QWORD *)(v11 + 8 * v10);
        v41 = v13;
        v42 = v39;
        do
        {
          if ((v40 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            goto LABEL_155;
          }
          v43 = *(_QWORD *)(*(_QWORD *)a2 + 16);
          if (v40 >= v43)
            goto LABEL_136;
          if (*v42 >= v43)
            goto LABEL_137;
          v44 = *(_QWORD *)a2 + 32;
          v45 = (uint64_t *)(v44 + 16 * v40);
          v46 = *v45;
          v47 = v45[1];
          v48 = (_QWORD *)(v44 + 16 * *v42);
          v49 = v46 == *v48 && v47 == v48[1];
          if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v11)
            goto LABEL_170;
          v50 = *v42;
          v40 = v42[1];
          *v42 = v40;
          v42[1] = v50;
          --v42;
          ++v41;
        }
        while (v10 != v41);
        ++v10;
        ++v39;
      }
      while (v10 != v38);
      v10 = v38;
LABEL_64:
      if (v10 < v13)
        goto LABEL_159;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1, (char *)v12);
        v12 = v106;
      }
      v52 = *(_QWORD *)(v12 + 16);
      v51 = *(_QWORD *)(v12 + 24);
      v53 = v52 + 1;
      if (v52 >= v51 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, (char *)v12);
        v12 = v107;
      }
      *(_QWORD *)(v12 + 16) = v53;
      v54 = v12 + 32;
      v55 = (Swift::Int *)(v12 + 32 + 16 * v52);
      *v55 = v13;
      v55[1] = v10;
      if (v52)
      {
        v11 = v123;
        v122 = v10;
        while (1)
        {
          v56 = v53 - 1;
          if (v53 >= 4)
          {
            v61 = v54 + 16 * v53;
            v62 = *(_QWORD *)(v61 - 64);
            v63 = *(_QWORD *)(v61 - 56);
            v67 = __OFSUB__(v63, v62);
            v64 = v63 - v62;
            if (v67)
              goto LABEL_144;
            v66 = *(_QWORD *)(v61 - 48);
            v65 = *(_QWORD *)(v61 - 40);
            v67 = __OFSUB__(v65, v66);
            v59 = v65 - v66;
            v60 = v67;
            if (v67)
              goto LABEL_145;
            v68 = v53 - 2;
            v69 = (uint64_t *)(v54 + 16 * (v53 - 2));
            v71 = *v69;
            v70 = v69[1];
            v67 = __OFSUB__(v70, v71);
            v72 = v70 - v71;
            if (v67)
              goto LABEL_146;
            v67 = __OFADD__(v59, v72);
            v73 = v59 + v72;
            if (v67)
              goto LABEL_148;
            if (v73 >= v64)
            {
              v91 = (uint64_t *)(v54 + 16 * v56);
              v93 = *v91;
              v92 = v91[1];
              v67 = __OFSUB__(v92, v93);
              v94 = v92 - v93;
              if (v67)
                goto LABEL_154;
              v84 = v59 < v94;
              goto LABEL_102;
            }
          }
          else
          {
            if (v53 != 3)
            {
              v85 = *(_QWORD *)(v12 + 32);
              v86 = *(_QWORD *)(v12 + 40);
              v67 = __OFSUB__(v86, v85);
              v78 = v86 - v85;
              v79 = v67;
              goto LABEL_96;
            }
            v58 = *(_QWORD *)(v12 + 32);
            v57 = *(_QWORD *)(v12 + 40);
            v67 = __OFSUB__(v57, v58);
            v59 = v57 - v58;
            v60 = v67;
          }
          if ((v60 & 1) != 0)
            goto LABEL_147;
          v68 = v53 - 2;
          v74 = (uint64_t *)(v54 + 16 * (v53 - 2));
          v76 = *v74;
          v75 = v74[1];
          v77 = __OFSUB__(v75, v76);
          v78 = v75 - v76;
          v79 = v77;
          if (v77)
            goto LABEL_149;
          v80 = (uint64_t *)(v54 + 16 * v56);
          v82 = *v80;
          v81 = v80[1];
          v67 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v67)
            goto LABEL_151;
          if (__OFADD__(v78, v83))
            goto LABEL_153;
          if (v78 + v83 >= v59)
          {
            v84 = v59 < v83;
LABEL_102:
            if (v84)
              v56 = v68;
            goto LABEL_104;
          }
LABEL_96:
          if ((v79 & 1) != 0)
            goto LABEL_150;
          v87 = (uint64_t *)(v54 + 16 * v56);
          v89 = *v87;
          v88 = v87[1];
          v67 = __OFSUB__(v88, v89);
          v90 = v88 - v89;
          if (v67)
            goto LABEL_152;
          if (v90 < v78)
            goto LABEL_113;
LABEL_104:
          v95 = v12;
          v96 = v56 - 1;
          if (v56 - 1 >= v53)
            goto LABEL_138;
          if (!v11)
            goto LABEL_171;
          v97 = a2;
          v98 = v11;
          v99 = (uint64_t *)(v54 + 16 * v96);
          v100 = *v99;
          v101 = v54;
          v102 = v56;
          v103 = (_QWORD *)(v54 + 16 * v56);
          v104 = v103[1];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v98 + 8 * *v99), (char *)(v98 + 8 * *v103), v98 + 8 * v104, v124, v97);
          if (v2)
          {
LABEL_118:
            swift_bridgeObjectRelease();
            if (v121 >= -1)
            {
              *(_QWORD *)(v120 + 16) = 0;
              swift_bridgeObjectRelease();
              return;
            }
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
            goto LABEL_167;
          }
          if (v104 < v100)
            goto LABEL_139;
          if (v102 > *(_QWORD *)(v95 + 16))
            goto LABEL_140;
          *v99 = v100;
          *(_QWORD *)(v101 + 16 * v96 + 8) = v104;
          v105 = *(_QWORD *)(v95 + 16);
          if (v102 >= v105)
            goto LABEL_141;
          v12 = v95;
          v53 = v105 - 1;
          memmove(v103, v103 + 2, 16 * (v105 - 1 - v102));
          v54 = v101;
          *(_QWORD *)(v95 + 16) = v105 - 1;
          v84 = v105 > 2;
          a2 = v97;
          v10 = v122;
          v11 = v123;
          if (!v84)
            goto LABEL_113;
        }
      }
      v53 = 1;
      v11 = v123;
LABEL_113:
      v5 = v121;
      if (v10 >= v121)
        goto LABEL_122;
    }
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
    goto LABEL_169;
  }
  v12 = MEMORY[0x24BEE4AF8];
  v53 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_122:
  v108 = v12;
  if (v53 >= 2)
  {
    v109 = *v118;
    while (1)
    {
      v110 = v53 - 2;
      if (v53 < 2)
        break;
      if (!v109)
        goto LABEL_173;
      v111 = v108;
      v112 = *(_QWORD *)(v108 + 32 + 16 * v110);
      v113 = *(_QWORD *)(v108 + 32 + 16 * (v53 - 1) + 8);
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v109 + 8 * v112), (char *)(v109 + 8 * *(_QWORD *)(v108 + 32 + 16 * (v53 - 1))), v109 + 8 * v113, v124, a2);
      if (v2)
        goto LABEL_118;
      if (v113 < v112)
        goto LABEL_156;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v111);
        v111 = v116;
      }
      if (v110 >= *(_QWORD *)(v111 + 16))
        goto LABEL_157;
      v114 = (_QWORD *)(v111 + 32 + 16 * v110);
      *v114 = v112;
      v114[1] = v113;
      v115 = *(_QWORD *)(v111 + 16);
      if (v53 > v115)
        goto LABEL_158;
      memmove((void *)(v111 + 32 + 16 * (v53 - 1)), (const void *)(v111 + 32 + 16 * v53), 16 * (v115 - v53));
      v108 = v111;
      *(_QWORD *)(v111 + 16) = v115 - 1;
      v53 = v115 - 1;
      if (v115 <= 2)
        goto LABEL_133;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
LABEL_133:
  swift_bridgeObjectRelease();
  if (v121 >= -1)
  {
    *(_QWORD *)(v120 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;

  if (a3 != a2)
  {
    v6 = a3;
    v8 = result;
    v9 = *a4;
    v10 = *a4 + 8 * a3 - 8;
    while (2)
    {
      v11 = *(_QWORD *)(v9 + 8 * v6);
      v12 = v8;
      v13 = (unint64_t *)v10;
      do
      {
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
          return result;
        }
        v14 = *(_QWORD *)(*(_QWORD *)a5 + 16);
        if (v11 >= v14)
          goto LABEL_17;
        if (*v13 >= v14)
          goto LABEL_18;
        v15 = *(_QWORD *)a5 + 32;
        v16 = (uint64_t *)(v15 + 16 * v11);
        result = *v16;
        v17 = v16[1];
        v18 = (_QWORD *)(v15 + 16 * *v13);
        if (result == *v18 && v17 == v18[1])
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
          break;
        if (!v9)
          goto LABEL_19;
        v20 = *v13;
        v11 = v13[1];
        *v13 = v11;
        v13[1] = v20;
        --v13;
        ++v12;
      }
      while (v6 != v12);
      ++v6;
      v10 += 8;
      if (v6 != a2)
        continue;
      break;
    }
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  char *v24;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;

  v6 = a4;
  v8 = a2;
  v9 = a1;
  v10 = a2 - a1;
  v11 = (a2 - a1) / 8;
  v12 = a3 - (_QWORD)a2;
  v13 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v11 < v13)
  {
    result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 8, a4);
    v15 = &v6[8 * v11];
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      while (1)
      {
        v17 = *(_QWORD *)v8;
        if ((*(_QWORD *)v8 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        v18 = *(_QWORD *)(*(_QWORD *)a5 + 16);
        if (v17 >= v18)
          goto LABEL_55;
        if (*(_QWORD *)v6 >= v18)
          goto LABEL_56;
        v19 = *(_QWORD *)a5 + 32;
        v20 = (uint64_t *)(v19 + 16 * v17);
        result = *v20;
        v21 = v20[1];
        v22 = (_QWORD *)(v19 + 16 * *(_QWORD *)v6);
        v23 = result == *v22 && v21 == v22[1];
        if (!v23)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            break;
        }
        v24 = v6;
        v23 = v9 == v6;
        v6 += 8;
        if (!v23)
          goto LABEL_18;
LABEL_19:
        v9 += 8;
        if (v6 >= v15 || (unint64_t)v8 >= a3)
          goto LABEL_24;
      }
      v24 = v8;
      v23 = v9 == v8;
      v8 += 8;
      if (v23)
        goto LABEL_19;
LABEL_18:
      *(_QWORD *)v9 = *(_QWORD *)v24;
      goto LABEL_19;
    }
LABEL_24:
    v8 = v9;
LABEL_53:
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v6, (v15 - v6) / 8, v8);
    return 1;
  }
  result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
  v15 = &v6[8 * v13];
  if (v9 >= v8 || v12 < 8)
    goto LABEL_53;
  v27 = (char *)(a3 - 8);
  while (1)
  {
    v29 = v15 - 8;
    v28 = *((_QWORD *)v15 - 1);
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_57;
    v30 = *(_QWORD *)(*(_QWORD *)a5 + 16);
    if (v28 >= v30)
      break;
    v31 = *((_QWORD *)v8 - 1);
    if (v31 >= v30)
      goto LABEL_59;
    v32 = v27 + 8;
    v33 = *(_QWORD *)a5 + 32;
    v34 = (uint64_t *)(v33 + 16 * v28);
    result = *v34;
    v35 = v34[1];
    v36 = (_QWORD *)(v33 + 16 * v31);
    v37 = result == *v36 && v35 == v36[1];
    if (v37 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
    {
      v39 = v32 != v15 || v27 >= v15;
      v15 -= 8;
      if (!v39)
        goto LABEL_49;
    }
    else
    {
      v38 = v32 != v8 || v27 >= v8;
      v29 = v8 - 8;
      v8 -= 8;
      if (!v38)
        goto LABEL_49;
    }
    *(_QWORD *)v27 = *(_QWORD *)v29;
LABEL_49:
    v27 -= 8;
    if (v8 <= v9 || v15 <= v6)
      goto LABEL_53;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  BOOL v15;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;

  v4 = a4;
  v6 = a2;
  v7 = a1;
  v8 = (char *)a2 - (char *)a1;
  v9 = a2 - a1;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 8;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (_QWORD)a2) / 8, a4);
    v12 = (unint64_t)&v4[v11];
    if (v7 >= v6 || v10 < 8)
      goto LABEL_39;
    v18 = (_QWORD *)(a3 - 8);
    while (1)
    {
      v19 = v18 + 1;
      v20 = *(v6 - 1);
      if (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 16) >= *(_QWORD *)(v20 + 16))
      {
        v22 = v19 != (_QWORD *)v12 || (unint64_t)v18 >= v12;
        v20 = *(_QWORD *)(v12 - 8);
        v12 -= 8;
        if (!v22)
          goto LABEL_35;
      }
      else
      {
        v21 = v19 != v6 || v18 >= v6;
        --v6;
        if (!v21)
          goto LABEL_35;
      }
      *v18 = v20;
LABEL_35:
      --v18;
      if (v6 <= v7 || v12 <= (unint64_t)v4)
        goto LABEL_39;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2 - a1, a4);
  v12 = (unint64_t)&v4[v9];
  if ((unint64_t)v6 < a3 && v8 >= 8)
  {
    while (1)
    {
      v14 = *v6;
      if (*(_QWORD *)(*v6 + 16) < *(_QWORD *)(*v4 + 16))
        break;
      v14 = *v4;
      v15 = v7 == v4++;
      if (!v15)
        goto LABEL_11;
LABEL_12:
      ++v7;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3)
        goto LABEL_17;
    }
    v15 = v7 == v6++;
    if (v15)
      goto LABEL_12;
LABEL_11:
    *v7 = v14;
    goto LABEL_12;
  }
LABEL_17:
  v6 = v7;
LABEL_39:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (_QWORD)v4) / 8, v6);
  return 1;
}

uint64_t outlined init with copy of VocabularyManager.PrefixLookup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void outlined init with copy of TerminalSymbol(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_23();
}

uint64_t outlined assign with take of VocabularyManager.PrefixLookup?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VocabularyManager.PrefixLookup?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of VocabularyManager.PrefixLookup(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for VocabularyManager.PrefixLookup(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for IndexSet();
  v29 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_49();
  v28 = v3;
  v27 = type metadata accessor for CharacterSet();
  v4 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_49();
  v26 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CharacterSet, IndexSet>);
  v6 = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v7 = 0;
  OUTLINED_FUNCTION_21_3();
  v10 = v9 & v8;
  v23 = a1 + 64;
  v24 = (unint64_t)(v11 + 63) >> 6;
  v25 = v12 + 64;
  if ((v9 & v8) == 0)
    goto LABEL_3;
LABEL_2:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v13 | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    v18 = *(_QWORD *)(v4 + 72) * i;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16))(v26, *(_QWORD *)(a1 + 48) + v18, v27);
    v19 = swift_bridgeObjectRetain();
    specialized SetAlgebra.init<A>(_:)(v19);
    *(_QWORD *)(v25 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v6[6] + v18, v26, v27);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))(v6[7] + *(_QWORD *)(v29 + 72) * i, v28, v30);
    v20 = v6[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    v6[2] = v22;
    if (v10)
      goto LABEL_2;
LABEL_3:
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_22;
    if (v15 >= v24)
      return;
    v16 = *(_QWORD *)(v23 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v24)
        return;
      v16 = *(_QWORD *)(v23 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v24)
          return;
        v16 = *(_QWORD *)(v23 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_16:
    v10 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v24)
    return;
  v16 = *(_QWORD *)(v23 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v24)
      return;
    v16 = *(_QWORD *)(v23 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
LABEL_23:
  __break(1u);
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v10 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0)
        v10 = a2 & 0xFFFFFFFFFFFFLL;
      if (v5 != v10)
        return _StringGuts.foreignScalarAlign(_:)();
    }
    else
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v9 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
        }
        else
        {
          v9 = result >> 16;
        }
        v5 = v9;
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v12 = result >> 16;
          v6 = _StringObject.sharedUTF8.getter();
          v5 = v12;
        }
        if (v5 != v7)
        {
          do
            v8 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v8 == 128);
          ++v5;
        }
      }
      return v5 << 16;
    }
  }
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  unint64_t v10;
  unint64_t v11;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = result & 0xC;
  v11 = 4 << v9;
  if ((result & 1) == 0 || v10 == v11)
  {
LABEL_12:
    if (v10 == v11)
      result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a4, a5);
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    {
      __break(1u);
    }
    else if ((result & 1) != 0)
    {
      return result;
    }
    return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a4, a5) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v10 = result >> 14;
  v11 = a3 >> 14;
  if (result >> 14 < a2 >> 14 || v10 >= v11)
  {
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _sxRi_zRi0_zlySaySiGIsegr_SgWOe(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t _StringGuts.validateScalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

uint64_t destroy for VocabularyManager.CharacterSetLookup()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for VocabularyManager.CharacterSetLookup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for VocabularyManager.CharacterSetLookup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for VocabularyManager.CharacterSetLookup(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VocabularyManager.CharacterSetLookup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VocabularyManager.CharacterSetLookup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VocabularyManager.CharacterSetLookup()
{
  return &type metadata for VocabularyManager.CharacterSetLookup;
}

uint64_t partial apply for closure #4 in VocabularyManager.processTokenizerVocab()()
{
  return _s19TokenGenerationCore14TerminalSymbolO8containsySbSJFSbs7UnicodeO6ScalarVXEfU_TA_0() & 1;
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  uint64_t *v0;

  return VocabularyManager.prefixLookUp.getter(v0);
}

void OUTLINED_FUNCTION_7_12()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_8_11()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_10_11@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

void OUTLINED_FUNCTION_11_7()
{
  specialized __RawDictionaryStorage.find<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_16_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  uint64_t v0;

  return outlined destroy of VocabularyManager.PrefixLookup(v0);
}

uint64_t OUTLINED_FUNCTION_20_3()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_23_4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_24_4()
{
  return IndexSet.formUnion(_:)();
}

uint64_t OUTLINED_FUNCTION_27_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

_QWORD *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2519D9E30;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2495A87F0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_2519D91D8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_2519D9E30;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_2519D9E30;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_248C4A3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  sentencepiece::util::Status *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x2495A87F0](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x2495A87F0](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitFromMMappedFile(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  sentencepiece::mmap_util *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _QWORD v24[33];
  uint64_t *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;

  v27 = a2;
  v28 = a3;
  sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      sentencepiece::mmap_util::DecodePrefix<int>(v27, v28, (_DWORD *)(a1 + 92), a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          v26 = 0;
          sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v26, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v6 = v26;
              if (v28 < v26)
                v6 = v28;
              v23 = v27;
              v24[0] = v6;
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>(&v23, (uint64_t *)&v25);
              v7 = v25;
              v25 = 0;
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(a1 + 16), v7);
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](&v25, 0);
              v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)v26, 4uLL);
              sentencepiece::mmap_util::RemovePrefix(&v27, v8, a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                LODWORD(v25) = 0;
                sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v25, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    v9 = (sentencepiece::mmap_util *)v25;
                    if (!(_DWORD)v25)
                    {
                      LODWORD(v23) = 13;
                      v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    if (v28 < v25)
                    {
                      LODWORD(v23) = 13;
                      v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
LABEL_18:
                      sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v23);
                      return;
                    }
                    if ((v25 & 3) != 0)
                    {
                      LODWORD(v23) = 13;
                      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    v13 = v27;
                    v14 = v25 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x2495A87F0](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v9 = (sentencepiece::mmap_util *)v25;
                    }
                    *(_QWORD *)(a1 + 32) = v14;
                    *(_QWORD *)(a1 + 40) = v13;
                    v15 = sentencepiece::mmap_util::RoundUp(v9, 4uLL);
                    sentencepiece::mmap_util::RemovePrefix(&v27, v15, a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      v22 = 0;
                      sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v22, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                        if (!*(_QWORD *)a4)
                        {
                          sentencepiece::util::Status::~Status(a4);
                          if (!v22)
                          {
                            LODWORD(v23) = 13;
                            v17 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if (v28 < v22)
                          {
                            LODWORD(v23) = 13;
                            v16 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if ((v22 & 3) != 0)
                          {
                            LODWORD(v23) = 13;
                            v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          v19 = v27;
                          v20 = v22 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v21 = *(_QWORD *)(a1 + 80);
                          if (v21)
                          {
                            MEMORY[0x2495A87F0](v21, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v20;
                          *(_QWORD *)(a1 + 72) = v19;
                          sentencepiece::util::Status::Status(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_248C4AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x2495A87C0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_248C4AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x2495A87C0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_248C4ADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, *a1, a1[1]);
  *a2 = v4;
  return result;
}

void sub_248C4AE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_248C4AED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *((_QWORD *)this + 1) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 2) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2495A87C0]((char *)this + 120);
}

void **sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 1);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_2519D8FA0))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_248C4B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_2519D91D8;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &off_2519D9E30;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x2495A87F0](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &off_2519D9E30;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x2495A87F0](v3, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, 0);
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    return "<unk>";
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  else
    return "<s>";
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  else
    return "</s>";
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  else
    return "<pad>";
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_248C4B41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sub_248C4B504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *((_DWORD *)this + 22) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v54, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sentencepiece::BuildTrie((_QWORD *)this + 3, &v51, (int *)this + 23, &v54),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
              (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v26 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v26))
        {
          if (!v50
            || (sentencepiece::BuildTrie((_QWORD *)this + 7, &v48, 0, &v54),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
                (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v27 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>((uint64_t)&v46, (uint64_t *)&v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, v28);
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v54, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sentencepiece::util::Status::Status(&v43, 13, v38, v41);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v43);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v54, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sentencepiece::util::Status::Status(&v42, 13, v33, v34);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v48, v49);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v51, v52);
}

void sub_248C4BB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  {
    sentencepiece::PieceToByte(std::string_view)::kMap = sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (_QWORD *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_248C4BD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sentencepiece::BuildTrie(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sentencepiece::util::Status::Status(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sentencepiece::util::Status::Status(a4, 13, "no entry is found in the trie.", 30);
      else
        sentencepiece::util::Status::Status(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sentencepiece::util::Status::Status(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_248C4C214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, a1);
  *a2 = v4;
  return result;
}

void sub_248C4C2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  char *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  v19 = *((_QWORD *)this + 4);
  v18 = (const std::string::value_type *)*((_QWORD *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  v26 = (char *)this + 64;
  v24 = *((_QWORD *)this + 8);
  v25 = (const std::string::value_type *)*((_QWORD *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_248C4C5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_248C999CA[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_248C999CA[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_248C4CA60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_248C4CB50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    absl::StrFormat<unsigned char>("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_248C4CC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::build(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x2495A87F0](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&v19);
  return 0;
}

void sub_248C4CD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((_QWORD *)this + 2);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_248C4CE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_248C4CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  __p = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_248C4D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v8 = 0;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_248C4D184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_248C4D350(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x2495A87C0](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  const std::locale::facet *v2;
  sentencepiece::error *v3;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(_BYTE *)this)
    sentencepiece::error::Abort(v3);
}

void sub_248C4D410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_248C4D4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_248C4D774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned char>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_248C4E00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_248C4E080(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string_view,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2519D9E30;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x2495A87F0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x2495A8814);
}

uint64_t **std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x2495A8814);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x2495A8694](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x2495A86A0](v13);
  return a1;
}

void sub_248C4E408(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x2495A86A0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x248C4E3E8);
}

void sub_248C4E450(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_248C4E584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v3[3];
  _OWORD v4[6];
  _OWORD v5[3];
  uint64_t v6;

  if (a2[3])
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v3);
    Darts::Details::DoubleArrayBuilder::build_from_dawg((Darts::Details::DoubleArrayBuilder *)a1, (const Darts::Details::DawgBuilder *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)&v3[1] + 1);
    Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)v4);
    Darts::Details::BitVector::clear((Darts::Details::BitVector *)((char *)&v4[1] + 8));
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v4[4] + 1);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)v5);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v5[1] + 1);
    v6 = 0;
    Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)v3);
  }
  else
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
  }
}

void sub_248C4F080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::clear(a1);
  if (*a1)
  {
    MEMORY[0x2495A87F0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned char>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x2495A87F0);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2495A8814);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "";
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x2495A87F0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x2495A87F0);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;

  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  v13 = *(int **)this;
  v14 = *(_BYTE *)(*(_QWORD *)this + 8);
  v15 = **(_DWORD **)this;
  if (v14)
    v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((_BYTE **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  return Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *((_QWORD *)a2 + 4);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)((char *)this + 8);
  if (*((_QWORD *)this + 3) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)this + 1, v6);
  v8 = operator new[]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v8;
  if (v9)
    MEMORY[0x2495A87F0](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)a2 + 13);
  if (v10)
    bzero(*((void **)this + 8), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v14)
    MEMORY[0x2495A87F0](v14, 0x1000C80CBA68D63);
  if (!*((_QWORD *)this + 2))
    Darts::Details::DoubleArrayBuilder::expand_units(this);
  v15 = (int *)*((_QWORD *)this + 4);
  v16 = v15[1];
  if (!*((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = v16;
    if (!v16)
      *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**((_DWORD **)a2 + 3) >= 4u)
  {
    Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, 0, 0);
    v15 = (int *)*((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 2) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *((_QWORD *)this + 2) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*((_QWORD *)this + 2) <= v22)
          {
            Darts::Details::DoubleArrayBuilder::expand_units(this);
            v15 = (int *)*((_QWORD *)this + 4);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *((_DWORD *)this + 18))
          {
            *((_DWORD *)this + 18) = v27;
            if (v22 == v27)
              *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x2495A87F0](v15, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x2495A87F0](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x2495A87F0](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)(a1 + 40));
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x2495A87F0);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  if (*a1)
  {
    MEMORY[0x2495A87F0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  uint64_t v2;

  Darts::Details::BitVector::clear(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    MEMORY[0x2495A87F0](v2, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x2495A87F0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x2495A87F0);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(a1);
  if (*a1)
  {
    MEMORY[0x2495A87F0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x2495A87F0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x2495A87F0);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_QWORD *)this + 12 * *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --*((_QWORD *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append((uint64_t *)this);
  }
  Darts::Details::BitVector::append((uint64_t *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)this + 6, v4 + 1);
    v4 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v4 + 1;
  *((_QWORD *)this + 24) = 1;
  *(_BYTE *)(*(_QWORD *)this + 8) = -1;
  v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((uint64_t *)this + 18, &v6);
}

_QWORD *Darts::Details::DawgBuilder::insert(_QWORD *this, const char *a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_2519D9E50;
    exception[1] = v23;
  }
  v5 = a4;
  v7 = this;
  v8 = 0;
  v9 = 0;
  v10 = *this;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return this;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  this = (_QWORD *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = a2[v8];
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *Darts::Details::BitVector::append(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::append(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = this;
  v3 = *(_QWORD *)(this + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(this + 120);
    v5 = (_QWORD *)(this + 24);
    v6 = (_QWORD *)(this + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if ((_DWORD)this)
      {
        v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        Darts::Details::BitVector::append((uint64_t *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          this = Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = (int *)(v27 + 12 * v28);
      v31 = *((unsigned __int8 *)v30 + 8);
      v32 = *v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)this;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)this;
    v19 = (unsigned int *)(*(_QWORD *)this + 12 * a2 + 4);
    v20 = *((_QWORD *)this + 3);
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((_QWORD *)this + 6) + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    result = MEMORY[0x2495A87F0](result, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    v7 = *(unsigned int **)this;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 += ((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F;
      --v4;
    }
    while (v4);
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_2519D9E50;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  Darts::Details::BitVector *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*((_QWORD *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
    {
      v16 = *((_QWORD *)this + 1);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *((_QWORD *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((_QWORD *)this + 8) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
        result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 2);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((uint64_t *)this + 1, (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *((_QWORD *)this + 4);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*((_QWORD *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          v8 = *((_QWORD *)this + 4);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13)
            *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *((_QWORD *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *((_DWORD *)this + 18);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)this + 5, 0);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*((_QWORD *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *((unsigned int *)this + 18);
  v15 = *((_QWORD *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *((_QWORD *)this + 4);
    v16 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v18 = *((_DWORD *)this + 18);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *((_QWORD *)this + 6);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((_QWORD *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((_QWORD *)this + 6))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*((_QWORD *)this + 5) + v24);
      if (*((_QWORD *)this + 2) <= v26)
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      if (*((_DWORD *)this + 18) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *((_QWORD *)this + 4);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == (_DWORD)v26)
        {
          *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          v29 = v26;
        }
      }
      else
      {
        v28 = *((_QWORD *)this + 4);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((_QWORD *)this + 6));
  }
  else
  {
    v28 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::append(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((_QWORD *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);
  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_2519D9E50;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    MEMORY[0x2495A87F0](v3, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    MEMORY[0x2495A87F0](v4, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    MEMORY[0x2495A87F0](v5, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

_QWORD *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_248C51A94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_2519D9090;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 245);
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_248C51B74(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  unsigned int *v12;
  unint64_t v13;

  if (a3)
  {
    v12 = 0;
    v13 = 0;
    v11 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, &v12, &v11, &v10);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
    if (!*(_QWORD *)(a1 + 56))
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_2519D9E30;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v13 || (v13 & 3) != 0)
      {
        sentencepiece::util::Status::Status(&v10, 13, "Trie blob is wrongly formatted.", 31);
        sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 8);
        v7 = v12;
        v8 = v13 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        v9 = v6[3];
        if (v9)
        {
          MEMORY[0x2495A87F0](v9, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *(_OWORD *)(a1 + 16) = v11;
      }
    }
  }
}

void sub_248C51CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)this = &off_2519D9090;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_248C51D78(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *(_QWORD *)a1 = &off_2519D9090;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 56));
  v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v10, a1);
  v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(_BYTE *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_248C51E8C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2519D9090;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_2519D9090;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x2495A8814);
}

_QWORD *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

_QWORD *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  unint64_t *v11;
  sentencepiece::util::Status *v12;
  unint64_t *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string::size_type i;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  size_t v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type size;
  BOOL v54;
  std::string::size_type v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  _QWORD *v72;
  sentencepiece::util::Status *v73;
  sentencepiece::string_util *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p;
  char v80;
  uint64_t v81;
  _QWORD v82[5];
  const std::string::value_type *v83;
  std::string::size_type v84;
  int v85;
  void **v86;
  std::string *v87;

  v6 = a3;
  v86 = (void **)a5;
  v87 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sentencepiece::util::Status::Status(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sentencepiece::util::Status::Status(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)a6)
    return result;
  sentencepiece::util::Status::~Status(a6);
  v85 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32)
        goto LABEL_11;
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_11:
  v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  v83 = "▁";
  v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    v15 = v76;
    v16 = v77;
    if ((v14 & 1) != 0)
    {
      if (!v77)
        goto LABEL_64;
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16)
          goto LABEL_64;
      }
    }
    else if (!v77)
    {
      v14 = 0;
      goto LABEL_64;
    }
    v74 = a2;
    v75 = v6;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (i = 0; i < v84; ++i)
          {
            v21 = v86;
            v22 = v85;
            v23 = (char *)v86[1];
            v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              v26 = (char *)*v86;
              v27 = (v23 - (_BYTE *)*v86) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_114;
              v29 = v24 - v26;
              if (v29 >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                v26 = (char *)*v21;
                v23 = (char *)v21[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[8 * v27];
              *(_QWORD *)v32 = v22;
              v25 = v32 + 8;
              while (v23 != v26)
              {
                v33 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              *v21 = v32;
              v21[1] = v25;
              v21[2] = &v31[8 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v23 = v85;
              v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        v34 = v86;
        v35 = v85;
        v36 = (char *)v86[1];
        v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          v39 = (char *)*v86;
          v40 = (v36 - (_BYTE *)*v86) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
LABEL_114:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v37 - v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            v39 = (char *)*v34;
            v36 = (char *)v34[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v35;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v46 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = v85;
          v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    v14 = v15[v16 - 1] == 32;
    a2 = v74;
    v6 = v75;
LABEL_64:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v47)
      v48 = v84;
    else
      v48 = 1;
    if (v47)
      v49 = v83;
    else
      v49 = " ";
    while (1)
    {
      v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        size = v87->__r_.__value_.__l.__size_;
        if (!v48)
          goto LABEL_79;
      }
      else
      {
        v52 = v87;
        size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48)
          goto LABEL_79;
      }
      v54 = size >= v48;
      v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48))
        break;
LABEL_79:
      if ((v51 & 0x80) != 0)
        v51 = v50->__r_.__value_.__l.__size_;
      if ((_DWORD)v51 - (_DWORD)v48 < 0)
      {
        LODWORD(v76) = 13;
        v67 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_110;
      }
      v85 = *((_QWORD *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v56 = v86;
  v57 = v85;
  v58 = (char *)v86[1];
  v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    v61 = (char *)*v86;
    v62 = (v58 - (_BYTE *)*v86) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v64 = v59 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      v61 = (char *)*v56;
      v58 = (char *)v56[1];
    }
    else
    {
      v66 = 0;
    }
    v68 = &v66[8 * v62];
    v69 = &v66[8 * v65];
    *(_QWORD *)v68 = v57;
    v60 = v68 + 8;
    while (v58 != v61)
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v68 - 1) = v70;
      v68 -= 8;
    }
    *v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = v85;
    v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v71 = v87->__r_.__value_.__l.__size_;
  else
    v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v86[1] - (_BYTE *)*v86) >> 3 == v71 + 1)
  {
    v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  v72 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_110:
  v77 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v77 + *(_QWORD *)(v77 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v78 = MEMORY[0x24BEDB848] + 16;
  if (v80 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x2495A87C0](&v81);
}

void sub_248C52774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27[8];
  _QWORD v28[64];

  v28[63] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = (char *)this;
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    if (v9
      && (v27[0] = 0, result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      v10 = (int)result;
      if (a3 < (int)result)
        v10 = a3;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_24;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD **)(v11 + 16);
      v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        v16 = v7[v12];
        v17 = v15 ^ v16;
        v18 = v14[v17];
        if ((v18 & 0x800000FF) != (_DWORD)v16)
          break;
        v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            v19 = &v27[16 * v13];
            *(_DWORD *)v19 = v14[v15] & 0x7FFFFFFF;
            *((_QWORD *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13)
        goto LABEL_24;
      v20 = 0;
      v21 = 0;
      v22 = v28;
      v23 = v28;
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (!v20 || v24 > v20)
        {
          v21 = *((_DWORD *)v22 - 2);
          v20 = v24;
        }
        v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        v7 = (char *)(*(_QWORD *)(v8 + 16) + v21);
        result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(_QWORD *)v27 = 0;
        v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(_QWORD *)v27 == 3;
        if (v26)
          LODWORD(v20) = *(_DWORD *)v27;
        else
          LODWORD(v20) = 1;
        if (v26)
          result = *(int *)v27;
        else
          result = 3;
        if (!v26)
          v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
      }
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  AutomationJSON.responses.modify(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_248C52CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_248C999CA[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *((unsigned __int8 *)this + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
}

void sub_248C52FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    std::vector<char const*>::reserve(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_2519D9E30;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"normalizer.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_248C53248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_2519D9E30;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x2495A87F0](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_248C533E4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this)
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(_QWORD *)this + 16), 4 * *(_QWORD *)(*(_QWORD *)this + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  sentencepiece::unigram::Model *v11;

  if (*((_QWORD *)this + 10))
    v4 = (_DWORD *)*((_QWORD *)this + 10);
  else
    v4 = &sentencepiece::_TrainerSpec_default_instance_;
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>(this, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      break;
  }
}

void sub_248C53734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::unigram::Model **a2@<X8>)
{
  sentencepiece::unigram::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::unigram::Model *)operator new();
  result = sentencepiece::unigram::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_248C53798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::bpe::Model **a2@<X8>)
{
  sentencepiece::bpe::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::bpe::Model *)operator new();
  result = sentencepiece::bpe::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_248C5380C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::word::Model **a2@<X8>)
{
  sentencepiece::word::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::word::Model *)operator new();
  result = sentencepiece::word::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_248C53880(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::character::Model **a2@<X8>)
{
  sentencepiece::character::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::character::Model *)operator new();
  result = sentencepiece::character::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_248C538F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sentencepiece::logging *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((_DWORD)v6 == 1)
  {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, (uint64_t)v14, &v13);
    goto LABEL_5;
  }
  if (!(_DWORD)v6)
  {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, v14, &v13);
LABEL_5:
    *a4 = v13;
    return;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13) = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v13);
  }
  *a4 = 0;
}

void sub_248C53A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::unigram::Model::Model(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_248C53AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sentencepiece::bpe::Model::Model(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_248C53B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(_QWORD *)this = &off_2519D98D0;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_2519D98D0;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x2495A8814);
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(_QWORD *)this = &off_2519D9930;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_2519D9930;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x2495A8814);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  google::protobuf::MessageLite *v2;

  v2 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  if (v2)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  double result;

  *(_QWORD *)this = &off_2519D95E0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_2519D95E0;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  this[4] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[3];
  this[3] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[2];
  this[2] = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[1];
  this[1] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
}

{
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);
  JUMPOUT(0x2495A8814);
}

uint64_t sentencepiece::IsMMappableFile()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x2495A8640](v2);
  std::istream::~istream();
  MEMORY[0x2495A87C0](v3);
  return 0;
}

void sub_248C53FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x2495A8634](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_248C540D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x2495A87C0](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x2495A8640](a1 + 2);
  std::istream::~istream();
  MEMORY[0x2495A87C0](a1 + 53);
  return a1;
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::ModelProto *result;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  uint64_t v11;
  sentencepiece::ModelProto *v12;
  sentencepiece::ModelProto *v13;

  if (sentencepiece::IsMMappableFile())
    return (sentencepiece::ModelProto *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  absl::make_unique<sentencepiece::ModelProto>(&v13);
  sentencepiece::io::LoadModelProto(a2, a3, v13, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x2495A8814](v10);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x2495A8814](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_248C5426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::ModelProto>@<X0>(sentencepiece::ModelProto **a1@<X8>)
{
  sentencepiece::ModelProto *v2;
  uint64_t result;

  v2 = (sentencepiece::ModelProto *)operator new();
  result = sentencepiece::ModelProto::ModelProto(v2, 0);
  *a1 = v2;
  return result;
}

void sub_248C542DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2495A8814](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewReadableFile(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((google::protobuf::MessageLite::ParseFromArray(a3, v6, v7) & 1) != 0)
      {
        sentencepiece::util::Status::Status(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2495A87C0](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_248C545AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (v10)
  {
    v9 = 1;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_248C54700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *v4;
  uint64_t v5;
  sentencepiece::ModelProto *result;
  uint64_t v7;
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;

  absl::make_unique<sentencepiece::ModelProto>(&v9);
  sentencepiece::ModelProto::CopyFrom(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(sentencepiece::SentencePieceProcessor *, sentencepiece::ModelProto **))(*(_QWORD *)this + 40))(this, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    sentencepiece::ModelProto::~ModelProto(v4);
    MEMORY[0x2495A8814](v5);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x2495A8814](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_248C547E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::LoadFromSerializedProto@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  sentencepiece::ModelProto *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sentencepiece::ModelProto *v15;
  unsigned int v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  sentencepiece::ModelProto *v20;

  absl::make_unique<sentencepiece::ModelProto>(&v20);
  if ((google::protobuf::MessageLite::ParseFromArray(v20, a2, a3) & 1) != 0)
  {
    v8 = v20;
    v20 = 0;
    v15 = v8;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v15);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x2495A8814](v10);
    }
  }
  else
  {
    v16 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v16, a4);
    v17[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v17[1] = MEMORY[0x24BEDB848] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x2495A87C0](&v19);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x2495A8814](v12, 0x10A1C4047CE62CFLL, v13, v14);
  }
  return result;
}

