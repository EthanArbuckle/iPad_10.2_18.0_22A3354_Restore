void WGSL::constantDot4U8Packed(unsigned int **a1@<X1>, _DWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL8 v5;

  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C7218);
  }
  if (v2[6] != 4)
    goto LABEL_8;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C7238);
  }
  if (v2[12] == 4)
  {
    v4 = v2[2];
    a2[2] = v2[8] * v4
          + HIBYTE(v2[8]) * HIBYTE(v4)
          + BYTE1(v2[8]) * BYTE1(v4)
          + BYTE2(v2[8]) * BYTE2(v4);
    a2[6] = 4;
    a2[8] = 0;
  }
  else
  {
LABEL_8:
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantDot4I8Packed(v5);
  }
}

void WGSL::constantDot4I8Packed(unsigned int **a1@<X1>, _DWORD *a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  int v4;
  _BOOL8 v5;

  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C72E0);
  }
  if (v2[6] != 4)
    goto LABEL_8;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C7300);
  }
  if (v2[12] == 4)
  {
    v4 = v2[2];
    a2[2] = ((int)v2[8] >> 24) * (v4 >> 24)
          + ((__int16)v2[8] >> 8) * ((__int16)v4 >> 8)
          + (char)v2[8] * (char)v4
          + ((int)(v2[8] << 8) >> 24) * (v4 << 8 >> 24);
    a2[6] = 3;
    a2[8] = 0;
  }
  else
  {
LABEL_8:
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantExp(v5);
  }
}

__int16 WGSL::constantExp@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C77DCLL);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = exp(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = expf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = expf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C783CLL);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C77BCLL);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C781CLL);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = expf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = exp(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = expf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C779CLL);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantExp2@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C7D18);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = exp2(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = exp2f(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = exp2f(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C7D78);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C7CF8);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C7D58);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = exp2f(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = exp2(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = exp2f(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C7CD8);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

uint64_t WGSL::constantExtractBits@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t (*v8)();
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t result;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v51[2];
  unsigned int v52;
  _DWORD v53[4];
  unsigned int v54;
  char v55;
  unsigned int *v56;
  _DWORD *v57;
  int v58;
  int v59;
  unsigned int v60;
  _QWORD v61[2];
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (v3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C8454);
  }
  if (v2[12] != 4)
    goto LABEL_104;
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C8474);
  }
  if (v2[18] != 4)
  {
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_105;
  }
  v4 = v2[8];
  v5 = v2[14];
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v6 = v2[6];
  if ((_DWORD)v6 == -1)
  {
LABEL_105:
    __break(0xC471u);
    JUMPOUT(0x1825C84D8);
  }
  v7 = v2 + 2;
  v8 = off_1E0FD8010[v6];
  ((void (*)(unsigned int **, _QWORD *, unsigned int *))v8)(&v56, v61, v2 + 2);
  v62 = v6;
  LOBYTE(v56) = 0;
  v58 = -1;
  ((void (*)(_DWORD *, unsigned int **, _QWORD *))v8)(v53, &v56, v61);
  v9 = 0;
  v58 = v6;
  if ((_DWORD)v6 == 8)
  {
    if (v56)
      v9 = *v56;
    else
      v9 = 0;
  }
  ((void (*)(_DWORD *, unsigned int **))off_1E0FD7CC8[v6])(v53, &v56);
  if (!v9)
  {
    v37 = v2[6];
    if ((_DWORD)v37 == 4)
    {
      v40 = *v7;
      if (v4 >= 0x20)
        v46 = 32;
      else
        v46 = v4;
      v47 = 32 - v46;
      if (32 - v46 >= v5)
        v47 = v5;
      v48 = (v40 & (~(-1 << v47) << v46)) >> v46;
      if (v47 != 32)
        v40 = v48;
      if (!v47)
        v40 = 0;
      goto LABEL_93;
    }
    if ((_DWORD)v37 == 3)
    {
      if (v4 >= 0x20)
        v38 = 32;
      else
        v38 = v4;
      if (32 - v38 >= v5)
        v39 = v5;
      else
        v39 = 32 - v38;
      if (v39)
      {
        v40 = *v7;
        if (v39 != 32)
          v40 = ((int)((v40 & (~(-1 << v39) << v38)) >> v38 >> (v39 - 1) << 31) >> 31) & ~((~(-1 << v39) << v38) >> v38) | ((v40 & (~(-1 << v39) << v38)) >> v38);
      }
      else
      {
        v40 = 0;
      }
LABEL_93:
      LODWORD(v56) = v40;
      v58 = v37;
      *(_BYTE *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 24) = -1;
      result = ((uint64_t (*)(_DWORD *, uint64_t, unsigned int **))off_1E0FD7D20[v37])(v53, a2 + 8, &v56);
      *(_DWORD *)(a2 + 24) = v37;
      *(_DWORD *)(a2 + 32) = 0;
      if (v58 != -1)
        result = ((uint64_t (*)(_DWORD *, unsigned int **))off_1E0FD7CC8[v58])(v53, &v56);
      goto LABEL_95;
    }
    goto LABEL_105;
  }
  v10 = v9;
  v11 = 24 * v9;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v9;
  v13 = v12 + 2;
  v14 = 6;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v16 = 0;
  v53[0] = 0;
  v54 = 0;
  if (v4 >= 0x20)
    v17 = 32;
  else
    v17 = v4;
  if (32 - v17 >= v5)
    v18 = v5;
  else
    v18 = 32 - v17;
  v49 = ~(-1 << v18) << v17;
  do
  {
    if (v62 == 8)
    {
      if (v16 >= *(unsigned int *)v61[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C8434);
      }
      v15 = v61[0] + v14 * 4 - 16;
      v19 = *(unsigned int *)(v61[0] + v14 * 4);
      v20 = v54;
      if (v54 == -1)
      {
        if ((_DWORD)v19 == -1)
          goto LABEL_30;
      }
      else if ((_DWORD)v19 == -1)
      {
        goto LABEL_102;
      }
      v56 = v53;
      ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1E0FD80E0[v19])(&v56, v53, v15);
    }
    else
    {
      v20 = v54;
      if (v54 == -1)
      {
        if (v62 == -1)
          goto LABEL_103;
      }
      else if (v62 == -1)
      {
LABEL_102:
        ((void (*)(unsigned int **, _DWORD *, uint64_t))off_1E0FD7CC8[v20])(&v56, v53, v15);
        v54 = -1;
LABEL_103:
        __break(0xC471u);
        JUMPOUT(0x1825C84B4);
      }
      v56 = v53;
      ((void (*)(unsigned int **, _DWORD *, _QWORD *))off_1E0FD80E0[v62])(&v56, v53, v61);
    }
LABEL_30:
    v21 = v54;
    if (v54 == 3)
    {
      v22 = v18;
      if (v18)
      {
        v22 = v53[0];
        if (v18 != 32)
        {
          v23 = (v53[0] & v49) >> v17;
          v24 = ~(v49 >> v17);
          if ((v23 & (1 << (v18 - 1))) == 0)
            v24 = 0;
          v22 = v24 | v23;
        }
      }
    }
    else
    {
      if (v54 != 4)
        goto LABEL_103;
      v22 = v18;
      if (v18)
      {
        v22 = v53[0];
        if (v18 != 32)
          v22 = (v53[0] & v49) >> v17;
      }
    }
    LODWORD(v51[0]) = v22;
    v52 = v54;
    LOBYTE(v57) = 0;
    v59 = -1;
    ((void (*)(char *, _DWORD **, _QWORD *))off_1E0FD7D20[v54])(&v55, &v57, v51);
    v59 = v21;
    v60 = 0;
    if (v52 == -1 || (((void (*)(char *, _QWORD *))off_1E0FD7CC8[v52])(&v55, v51), !v60))
    {
      if (v16 >= *v12)
      {
        __break(0xC471u);
        JUMPOUT(0x1825C8414);
      }
      v29 = v12[v14];
      if ((_DWORD)v29 == -1)
      {
        if (v59 == -1)
          goto LABEL_53;
      }
      else if (v59 == -1)
      {
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v29])(v51, v13);
        v12[v14] = -1;
        goto LABEL_53;
      }
      v51[0] = v13;
      ((void (*)(_QWORD *, unsigned int *, _DWORD **))off_1E0FD8188[v59])(v51, v13, &v57);
LABEL_53:
      v27 = 1;
      v28 = v60;
      if (v60 == -1)
        goto LABEL_55;
LABEL_54:
      ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v28])(v51, &v57);
      goto LABEL_55;
    }
    if (v60 != 1)
      goto LABEL_104;
    v26 = v57;
    if (v57)
      *v57 += 2;
    v27 = 0;
    *(_QWORD *)(a2 + 8) = v26;
    *(_DWORD *)(a2 + 32) = 1;
    v28 = v60;
    if (v60 != -1)
      goto LABEL_54;
LABEL_55:
    if ((v27 & 1) == 0)
      goto LABEL_74;
    ++v16;
    v13 += 6;
    v14 += 6;
  }
  while (v10 != v16);
  v30 = *v12;
  v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
  v32 = v31;
  *v31 = v30;
  if ((_DWORD)v30)
  {
    v33 = v31 + 6;
    v34 = 24 * v30;
    v35 = v12 + 6;
    do
    {
      *((_BYTE *)v33 - 16) = 0;
      v25 = v33 - 4;
      *v33 = -1;
      v36 = *v35;
      if ((_DWORD)v36 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v36])(&v56, v25, v35 - 4);
        *v33 = v36;
      }
      v33 += 6;
      v35 += 6;
      v34 -= 24;
    }
    while (v34);
  }
  *(_QWORD *)(a2 + 8) = v32;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_74:
  if (v54 != -1)
    ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v54])(&v56, v53);
  v41 = *v12;
  if ((_DWORD)v41)
  {
    v42 = 24 * v41;
    v43 = v12 + 6;
    do
    {
      v25 = v43 - 4;
      v44 = *v43;
      if ((_DWORD)v44 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v44])(&v56, v25);
      *v43 = -1;
      v43 += 6;
      v42 -= 24;
    }
    while (v42);
  }
  result = WTF::fastFree((WTF *)v12, v25);
LABEL_95:
  if (v62 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v62])(&v56, v61);
  return result;
}

uint64_t WGSL::constantFaceForward@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int *v47;
  _BYTE v48[16];
  int v49;
  int *v50;
  _QWORD v51[2];
  int v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;
  int v56;
  _BYTE v57[16];
  int v58;
  _QWORD v59[2];
  int v60;
  uint64_t v61;
  _QWORD v62[2];
  unsigned int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C8C30);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C8C50);
  }
  if (v5 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C8C70);
  }
  if (*(_DWORD *)(a1 + 48) != 1)
    goto LABEL_93;
  v7 = *(_QWORD *)a1;
  v57[0] = 0;
  v58 = -1;
  v8 = v4[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E0FD8010[v8])(&v61, v57, v4 + 8);
    v58 = v8;
  }
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v9 = v4[18];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v9])(&v61, v59, v4 + 14);
    v60 = v9;
  }
  v10 = WTF::fastMalloc((WTF *)0x38);
  v11 = (unsigned int *)v10;
  *(_DWORD *)v10 = 2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  v53 = v10;
  if (v58 == -1)
  {
    *(_DWORD *)(v10 + 24) = -1;
    v13 = (unsigned int *)(v10 + 32);
    v14 = v60;
    if (v60 == -1)
    {
      v12 = 0;
LABEL_16:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v12])(&v61, v13);
      v11[12] = -1;
      goto LABEL_19;
    }
  }
  else
  {
    v61 = v10 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v58])(&v61);
    if (*v11 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C8C90);
    }
    v12 = v11[12];
    v13 = v11 + 8;
    v14 = v60;
    if (v12 == -1)
    {
      if (v60 == -1)
        goto LABEL_19;
    }
    else if (v60 == -1)
    {
      goto LABEL_16;
    }
  }
  v61 = (uint64_t)v13;
  ((void (*)(uint64_t *))off_1E0FD80E0[v14])(&v61);
LABEL_19:
  WGSL::constantDot(v7, (uint64_t)&v61);
  v16 = *v11;
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    v18 = v11 + 6;
    do
    {
      v15 = v18 - 4;
      v19 = *v18;
      if ((_DWORD)v19 != -1)
        ((void (*)(_BYTE *, _DWORD *))off_1E0FD7CC8[v19])(v48, v15);
      *v18 = -1;
      v18 += 6;
      v17 -= 24;
    }
    while (v17);
  }
  WTF::fastFree((WTF *)v11, v15);
  if (v60 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v60])(v48, v59);
  v60 = -1;
  if (v58 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v58])(v48, v57);
  if (v64)
  {
    if (v64 == 1)
    {
      v20 = v62[0];
      if (v62[0])
        *(_DWORD *)v62[0] += 2;
      *(_QWORD *)(a3 + 8) = v20;
      v21 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v21])(v57, v62);
    }
LABEL_93:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v48[0] = 0;
  v49 = -1;
  v22 = v63;
  if (v63 == -1)
  {
    v57[0] = 0;
    v58 = -1;
    v23 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v23 == -1)
      goto LABEL_93;
  }
  else
  {
    ((void (*)(_BYTE *, _BYTE *, _QWORD *))off_1E0FD7D20[v63])(v57, v48, v62);
    v49 = v22;
    v57[0] = 0;
    v58 = -1;
    ((void (*)(_QWORD *, _BYTE *, _BYTE *))off_1E0FD8010[v22])(v51, v57, v48);
    v58 = v22;
    v23 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v23 == -1)
      goto LABEL_93;
  }
  v51[0] = &v47;
  ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E0FD8068[v23])(v59, v51, v7);
  v24 = WTF::fastMalloc((WTF *)0x38);
  v25 = (unsigned int *)v24;
  *(_OWORD *)(v24 + 8) = 0u;
  *(_DWORD *)v24 = 2;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  v50 = (int *)v24;
  if (v58 == -1)
  {
    *(_DWORD *)(v24 + 24) = -1;
    v27 = (unsigned int *)(v24 + 32);
    v28 = v60;
    if (v60 == -1)
    {
      v26 = 0;
LABEL_44:
      ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v26])(v51, v27);
      v25[12] = -1;
      goto LABEL_47;
    }
  }
  else
  {
    v51[0] = v24 + 8;
    ((void (*)(_QWORD *))off_1E0FD80E0[v58])(v51);
    if (*v25 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C8CB0);
    }
    v26 = v25[12];
    v27 = v25 + 8;
    v28 = v60;
    if (v26 == -1)
    {
      if (v60 == -1)
        goto LABEL_47;
    }
    else if (v60 == -1)
    {
      goto LABEL_44;
    }
  }
  v51[0] = v27;
  ((void (*)(_QWORD *))off_1E0FD80E0[v28])(v51);
LABEL_47:
  WGSL::constantLt(&v50, (uint64_t)&v53);
  v30 = *v25;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v25 + 6;
    do
    {
      v29 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v33])(v51, v29);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v25, v29);
  if (v60 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v60])(v51, v59);
  v60 = -1;
  if (v58 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v58])(v51, v57);
  if (v56)
  {
    if (v56 != 1)
      goto LABEL_93;
    v34 = v54[0];
    if (v54[0])
      *(_DWORD *)v54[0] += 2;
    *(_QWORD *)(a3 + 8) = v34;
    v35 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_82;
  }
  v57[0] = 0;
  v58 = -1;
  v36 = v55;
  if (v55 == -1)
    goto LABEL_93;
  result = ((uint64_t (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v55])(v51, v57, v54);
  v58 = v36;
  if (v36 != 6)
    goto LABEL_93;
  if (v57[0])
  {
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    v38 = v4[6];
    if ((_DWORD)v38 != -1)
    {
      result = ((uint64_t (*)(_QWORD *))off_1E0FD8010[v38])(v51);
      *(_DWORD *)(a3 + 24) = v38;
    }
    *(_DWORD *)(a3 + 32) = 0;
    goto LABEL_79;
  }
  LOBYTE(v51[0]) = 0;
  v52 = -1;
  v39 = v4[6];
  if ((_DWORD)v39 != -1)
  {
    ((void (*)(int **, _QWORD *, unsigned int *))off_1E0FD8010[v39])(&v50, v51, v4 + 2);
    v52 = v39;
  }
  v40 = WTF::fastMalloc((WTF *)0x20);
  v41 = (WTF *)v40;
  *(_QWORD *)(v40 + 8) = 0;
  *(_DWORD *)v40 = 1;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  v47 = (int *)v40;
  if (v52 == -1)
  {
    *(_DWORD *)(v40 + 24) = -1;
    WGSL::constantMinus(a1, &v47, a3);
    v43 = *(unsigned int *)v41;
    if (!(_DWORD)v43)
      goto LABEL_77;
LABEL_73:
    v44 = 24 * v43;
    v45 = (_DWORD *)((char *)v41 + 24);
    do
    {
      v42 = v45 - 4;
      v46 = *v45;
      if ((_DWORD)v46 != -1)
        ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v46])(&v50, v42);
      *v45 = -1;
      v45 += 6;
      v44 -= 24;
    }
    while (v44);
    goto LABEL_77;
  }
  v50 = (int *)(v40 + 8);
  ((void (*)(int **))off_1E0FD80E0[v52])(&v50);
  WGSL::constantMinus(a1, &v47, a3);
  v43 = *(unsigned int *)v41;
  if ((_DWORD)v43)
    goto LABEL_73;
LABEL_77:
  result = WTF::fastFree(v41, v42);
  if (v52 != -1)
    result = ((uint64_t (*)(int **, _QWORD *))off_1E0FD7CC8[v52])(&v50, v51);
LABEL_79:
  if (v58 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v58])(v51, v57);
  v35 = v56;
  if (v56 != -1)
LABEL_82:
    result = ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v35])(v57, v54);
  if (v49 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v49])(v57, v48);
  v21 = v64;
  if (v64 != -1)
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v21])(v57, v62);
  return result;
}

uint64_t WGSL::constantFirstLeadingBit@<X0>(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  signed int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42[4];
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C9180);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_68;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(unsigned int *, unsigned int **, _QWORD *))v5)(v42, &v45, v50);
  v6 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v6 = *v45;
    else
      v6 = 0;
  }
  result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1E0FD7CC8[v4])(v42, &v45);
  if (!v6)
  {
    v33 = v3[6];
    v34 = v3[2];
    if (v33 == 4)
    {
      v40 = 31 - __clz(v34);
      if (v34)
        v39 = v40;
      else
        v39 = -1;
      goto LABEL_61;
    }
    if (v33 == 3)
    {
      v35 = v34 + 1;
      v36 = __clz(~v34);
      v37 = __clz(v34);
      if (v34 >= 0)
        v38 = v37;
      else
        v38 = v36;
      v39 = 31 - v38;
      if (v35 < 2)
        v39 = -1;
LABEL_61:
      a2[2] = v39;
      a2[6] = v33;
      a2[8] = 0;
      v32 = v51;
      if (v51 != -1)
        return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v32])(&v45, v50);
      return result;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x1825C91E0);
  }
  v41 = a2;
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  v42[0] = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C9160);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_66;
      }
      v45 = v42;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v13])(&v45, v42, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_67;
      }
      else if (v51 == -1)
      {
LABEL_66:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v14])(&v45, v42, v11);
        v43 = -1;
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x1825C91C0);
      }
      v45 = v42;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v51])(&v45, v42, v50);
    }
LABEL_22:
    if (v43 == 3)
    {
      v17 = __clz(~v42[0]);
      v18 = __clz(v42[0]);
      if ((v42[0] & 0x80000000) == 0)
        v19 = v18;
      else
        v19 = v17;
      v16 = 31 - v19;
      if (v42[0] + 1 < 2)
        v16 = -1;
    }
    else
    {
      if (v43 != 4)
        goto LABEL_67;
      v15 = 31 - __clz(v42[0]);
      if (v42[0])
        v16 = v15;
      else
        v16 = -1;
    }
    v46 = v16;
    v48 = v43;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C9140);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v43])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, int *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  v20 = *v9;
  v21 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v20 + 8));
  v23 = v21;
  *v21 = v20;
  if ((_DWORD)v20)
  {
    v24 = v21 + 6;
    v25 = 24 * v20;
    v26 = v9 + 6;
    do
    {
      *((_BYTE *)v24 - 16) = 0;
      v22 = v24 - 4;
      *v24 = -1;
      v27 = *v26;
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v27])(&v45, v22, v26 - 4);
        *v24 = v27;
      }
      v24 += 6;
      v26 += 6;
      v25 -= 24;
    }
    while (v25);
  }
  *((_QWORD *)v41 + 1) = v23;
  v41[6] = 8;
  v41[8] = 0;
  if (v43 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v43])(&v45, v42);
  v28 = *v9;
  if ((_DWORD)v28)
  {
    v29 = 24 * v28;
    v30 = v9 + 6;
    do
    {
      v22 = v30 - 4;
      v31 = *v30;
      if ((_DWORD)v31 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v31])(&v45, v22);
      *v30 = -1;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  result = WTF::fastFree((WTF *)v9, v22);
  v32 = v51;
  if (v51 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v32])(&v45, v50);
  return result;
}

uint64_t WGSL::constantFirstTrailingBit@<X0>(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34[4];
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  _QWORD v42[2];
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C9650);
  }
  LOBYTE(v42[0]) = 0;
  v43 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_54;
  v5 = off_1E0FD8010[v4];
  ((void (*)(unsigned int **, _QWORD *, _DWORD *))v5)(&v37, v42, v3 + 2);
  v43 = v4;
  LOBYTE(v37) = 0;
  v39 = -1;
  ((void (*)(unsigned int *, unsigned int **, _QWORD *))v5)(v34, &v37, v42);
  v6 = 0;
  v39 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v37)
      v6 = *v37;
    else
      v6 = 0;
  }
  result = ((uint64_t (*)(unsigned int *, unsigned int **))off_1E0FD7CC8[v4])(v34, &v37);
  if (!v6)
  {
    v30 = v3[6];
    if ((v30 - 3) < 2)
    {
      v31 = v3[2];
      v32 = __clz(__rbit32(v31));
      if (v31)
        v33 = v32;
      else
        v33 = -1;
      a2[2] = v33;
      a2[6] = v30;
      a2[8] = 0;
      v29 = v43;
      if (v43 != -1)
        return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v29])(&v37, v42);
      return result;
    }
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x1825C9690);
  }
  v8 = 24 * v6;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v6;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  v34[0] = 0;
  v35 = 0;
  do
  {
    if (v43 == 8)
    {
      if (v12 >= *(unsigned int *)v42[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C9630);
      }
      v11 = v42[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v42[0] + v10 * 4);
      v14 = v35;
      if (v35 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_17;
      }
      v37 = v34;
      ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD80E0[v13])(&v37, v34, v11);
    }
    else
    {
      v14 = v35;
      if (v35 == -1)
      {
        if (v43 == -1)
          goto LABEL_22;
      }
      else if (v43 == -1)
      {
LABEL_17:
        ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E0FD7CC8[v14])(&v37, v34, v11);
        v35 = -1;
        goto LABEL_22;
      }
      v37 = v34;
      ((void (*)(unsigned int **, unsigned int *, _QWORD *))off_1E0FD80E0[v43])(&v37, v34, v42);
    }
LABEL_22:
    if (v35 - 3 > 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C9670);
    }
    v15 = __clz(__rbit32(v34[0]));
    if (v34[0])
      v16 = v15;
    else
      v16 = -1;
    v38 = v16;
    v40 = v35;
    v41 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C9610);
    }
    v36 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v35])(&v36);
    if (v41 != -1)
      ((void (*)(uint64_t *, int *))off_1E0FD7DD0[v41])(&v36, &v38);
    ++v12;
    v10 += 6;
  }
  while (v6 != v12);
  v17 = *v9;
  v18 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v17 + 8));
  v20 = v18;
  *v18 = v17;
  if ((_DWORD)v17)
  {
    v21 = v18 + 6;
    v22 = 24 * v17;
    v23 = v9 + 6;
    do
    {
      *((_BYTE *)v21 - 16) = 0;
      v19 = v21 - 4;
      *v21 = -1;
      v24 = *v23;
      if ((_DWORD)v24 != -1)
      {
        ((void (*)(unsigned int **, _DWORD *, unsigned int *))off_1E0FD8010[v24])(&v37, v19, v23 - 4);
        *v21 = v24;
      }
      v21 += 6;
      v23 += 6;
      v22 -= 24;
    }
    while (v22);
  }
  *((_QWORD *)a2 + 1) = v20;
  a2[6] = 8;
  a2[8] = 0;
  if (v35 != -1)
    ((void (*)(unsigned int **, unsigned int *))off_1E0FD7CC8[v35])(&v37, v34);
  v25 = *v9;
  if ((_DWORD)v25)
  {
    v26 = 24 * v25;
    v27 = v9 + 6;
    do
    {
      v19 = v27 - 4;
      v28 = *v27;
      if ((_DWORD)v28 != -1)
        ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v28])(&v37, v19);
      *v27 = -1;
      v27 += 6;
      v26 -= 24;
    }
    while (v26);
  }
  result = WTF::fastFree((WTF *)v9, v19);
  v29 = v43;
  if (v43 != -1)
    return ((uint64_t (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v29])(&v37, v42);
  return result;
}

__int16 WGSL::constantFloor@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825C9B5CLL);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  ((void (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = floor(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = floorf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = floorf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825C9BBCLL);
  }
  v40 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825C9B3CLL);
      }
      v11 = v49[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v49[0] + v10 * 4);
      v14 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v13])(&v44, v41, v11);
    }
    else
    {
      v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v14])(&v44, v41, v11);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825C9B9CLL);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = floorf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = floor(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = floorf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825C9B1CLL);
    }
    v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v22 = *v9;
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  v25 = v23;
  *v23 = v22;
  if ((_DWORD)v22)
  {
    v26 = v23 + 6;
    v27 = 24 * v22;
    v28 = v9 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v24 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v44, v24, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v30 = *v9;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v9 + 6;
    do
    {
      v24 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v33])(&v44, v24);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  v35 = v50;
  if (v50 != -1)
LABEL_44:
    ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
  return LOWORD(_D0);
}

uint64_t WGSL::constantFma@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t result;
  _BOOL8 v36;
  uint64_t v37;
  unsigned int *v38;
  int *v39[2];
  int v40;
  uint64_t v41;
  _BYTE v42[16];
  int v43;
  _BYTE v44[16];
  int v45;
  uint64_t v46;
  _QWORD v47[2];
  unsigned int v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CA114);
  }
  v42[0] = 0;
  v43 = -1;
  v8 = v4[6];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E0FD8010[v8])(&v46, v42, v4 + 2);
    v43 = v8;
    v4 = *a2;
    v5 = **a2;
  }
  if (v5 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CA134);
  }
  v37 = a3;
  v44[0] = 0;
  v45 = -1;
  v9 = v4[12];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E0FD8010[v9])(&v46, v44, v4 + 8);
    v45 = v9;
  }
  v10 = WTF::fastMalloc((WTF *)0x38);
  v11 = (unsigned int *)v10;
  *(_DWORD *)v10 = 2;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  v39[0] = (int *)v10;
  if (v43 == -1)
  {
    *(_DWORD *)(v10 + 24) = -1;
    v13 = (unsigned int *)(v10 + 32);
    v14 = v45;
    if (v45 == -1)
    {
      v12 = 0;
LABEL_14:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v12])(&v46, v13);
      v11[12] = -1;
      goto LABEL_17;
    }
  }
  else
  {
    v46 = v10 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v43])(&v46);
    if (*v11 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CA154);
    }
    v12 = v11[12];
    v13 = v11 + 8;
    v14 = v45;
    if (v12 == -1)
    {
      if (v45 == -1)
        goto LABEL_17;
    }
    else if (v45 == -1)
    {
      goto LABEL_14;
    }
  }
  v46 = (uint64_t)v13;
  ((void (*)(uint64_t *))off_1E0FD80E0[v14])(&v46);
LABEL_17:
  WGSL::constantMultiply(a1, v39, (uint64_t)&v46);
  v16 = *v11;
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    v18 = v11 + 6;
    do
    {
      v15 = v18 - 4;
      v19 = *v18;
      if ((_DWORD)v19 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v19])(&v41, v15);
      *v18 = -1;
      v18 += 6;
      v17 -= 24;
    }
    while (v17);
  }
  WTF::fastFree((WTF *)v11, v15);
  if (v45 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v45])(&v41, v44);
  v45 = -1;
  if (v43 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v43])(&v41, v42);
  if (v49)
  {
    if (v49 != 1)
    {
      v36 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantFract(v36);
    }
    v20 = v47[0];
    if (v47[0])
      *(_DWORD *)v47[0] += 2;
    *(_QWORD *)(v37 + 8) = v20;
    v21 = 1;
    *(_DWORD *)(v37 + 32) = 1;
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v21])(v42, v47);
  }
  LOBYTE(v39[0]) = 0;
  v40 = -1;
  v22 = v48;
  if (v48 != -1)
  {
    ((void (*)(_BYTE *, int **, _QWORD *))off_1E0FD7D20[v48])(v42, v39, v47);
    v40 = v22;
    v42[0] = 0;
    v43 = -1;
    ((void (*)(uint64_t *, _BYTE *, int **))off_1E0FD8010[v22])(&v41, v42, v39);
    v43 = v22;
    v23 = *a2;
    if (**a2 > 2)
      goto LABEL_33;
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1825C9F90);
  }
  v42[0] = 0;
  v43 = -1;
  v23 = *a2;
  if (**a2 <= 2)
    goto LABEL_41;
LABEL_33:
  v44[0] = 0;
  v45 = -1;
  v24 = v23[18];
  if ((_DWORD)v24 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E0FD8010[v24])(&v41, v44, v23 + 14);
    v45 = v24;
  }
  v25 = WTF::fastMalloc((WTF *)0x38);
  v26 = (unsigned int *)v25;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_DWORD *)v25 = 2;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_OWORD *)(v25 + 40) = 0u;
  v38 = (unsigned int *)v25;
  if (v43 == -1)
  {
    *(_DWORD *)(v25 + 24) = -1;
    v28 = (unsigned int *)(v25 + 32);
    v29 = v45;
    if (v45 == -1)
    {
      v27 = 0;
LABEL_44:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v27])(&v41, v28);
      v26[12] = -1;
      goto LABEL_47;
    }
  }
  else
  {
    v41 = v25 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v43])(&v41);
    if (*v26 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CA174);
    }
    v27 = v26[12];
    v28 = v26 + 8;
    v29 = v45;
    if (v27 == -1)
    {
      if (v45 == -1)
        goto LABEL_47;
    }
    else if (v45 == -1)
    {
      goto LABEL_44;
    }
  }
  v41 = (uint64_t)v28;
  ((void (*)(uint64_t *))off_1E0FD80E0[v29])(&v41);
LABEL_47:
  WGSL::constantAdd(a1, &v38, v37);
  v31 = *v26;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v26 + 6;
    do
    {
      v30 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v34])(&v41, v30);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  result = WTF::fastFree((WTF *)v26, v30);
  if (v45 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v45])(&v41, v44);
  v45 = -1;
  if (v43 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v43])(&v41, v42);
  if (v40 != -1)
    result = ((uint64_t (*)(_BYTE *, int **))off_1E0FD7CC8[v40])(v42, v39);
  v21 = v49;
  if (v49 != -1)
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v21])(v42, v47);
  return result;
}

uint64_t WGSL::constantFract@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  int v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t result;
  _BOOL8 v31;
  int *v32;
  _QWORD v33[2];
  int v34;
  uint64_t v35;
  _BYTE v36[16];
  int v37;
  _BYTE v38[16];
  int v39;
  uint64_t v40;
  _QWORD v41[2];
  int v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CA5C4);
  }
  v6 = v4 + 2;
  v36[0] = 0;
  v37 = -1;
  v7 = v4[6];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _DWORD *))off_1E0FD8010[v7])(&v40, v36, v4 + 2);
    v37 = v7;
  }
  v8 = WTF::fastMalloc((WTF *)0x20);
  v9 = (WTF *)v8;
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  v33[0] = v8;
  if (v37 == -1)
  {
    *(_DWORD *)(v8 + 24) = -1;
  }
  else
  {
    v40 = v8 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v37])(&v40);
  }
  v11.n128_u64[0] = WGSL::constantFloor(v33, (uint64_t)&v40);
  v12 = *(unsigned int *)v9;
  if ((_DWORD)v12)
  {
    v13 = 24 * v12;
    v14 = (_DWORD *)((char *)v9 + 24);
    do
    {
      v10 = v14 - 4;
      v15 = *v14;
      if ((_DWORD)v15 != -1)
        ((void (*)(uint64_t *, _DWORD *, __n128))off_1E0FD7CC8[v15])(&v35, v10, v11);
      *v14 = -1;
      v14 += 6;
      v13 -= 24;
    }
    while (v13);
  }
  WTF::fastFree(v9, v10);
  if (v37 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v37])(&v35, v36);
  if (v43)
  {
    if (v43 != 1)
    {
      v31 = std::__throw_bad_variant_access[abi:sn180100]();
      return WGSL::constantFrexp(v31);
    }
    v16 = v41[0];
    if (v41[0])
      *(_DWORD *)v41[0] += 2;
    *(_QWORD *)(a3 + 8) = v16;
    v17 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v17])(v36, v41);
  }
  LOBYTE(v33[0]) = 0;
  v34 = -1;
  v18 = v42;
  if (v42 != -1)
  {
    ((void (*)(_BYTE *, _QWORD *, _QWORD *))off_1E0FD7D20[v42])(v36, v33, v41);
    v34 = v18;
  }
  v36[0] = 0;
  v37 = -1;
  v19 = v4[6];
  if ((_DWORD)v19 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _DWORD *))off_1E0FD8010[v19])(&v35, v36, v6);
    v37 = v19;
    v18 = v34;
  }
  v38[0] = 0;
  v39 = -1;
  if (v18 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _QWORD *))off_1E0FD8010[v18])(&v35, v38, v33);
    v39 = v18;
  }
  v20 = WTF::fastMalloc((WTF *)0x38);
  v21 = (unsigned int *)v20;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_DWORD *)v20 = 2;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  v32 = (int *)v20;
  if (v37 == -1)
  {
    *(_DWORD *)(v20 + 24) = -1;
    v23 = (unsigned int *)(v20 + 32);
    v24 = v39;
    if (v39 == -1)
    {
      v22 = 0;
LABEL_32:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v22])(&v35, v23);
      v21[12] = -1;
      goto LABEL_35;
    }
  }
  else
  {
    v35 = v20 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v37])(&v35);
    if (*v21 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CA5E4);
    }
    v22 = v21[12];
    v23 = v21 + 8;
    v24 = v39;
    if (v22 == -1)
    {
      if (v39 == -1)
        goto LABEL_35;
    }
    else if (v39 == -1)
    {
      goto LABEL_32;
    }
  }
  v35 = (uint64_t)v23;
  ((void (*)(uint64_t *))off_1E0FD80E0[v24])(&v35);
LABEL_35:
  WGSL::constantMinus(a1, &v32, a3);
  v26 = *v21;
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    v28 = v21 + 6;
    do
    {
      v25 = v28 - 4;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v29])(&v35, v25);
      *v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  result = WTF::fastFree((WTF *)v21, v25);
  if (v39 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v39])(&v35, v38);
  v39 = -1;
  if (v37 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v37])(&v35, v36);
  if (v34 != -1)
    result = ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v34])(v36, v33);
  v17 = v43;
  if (v43 != -1)
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v17])(v36, v41);
  return result;
}

uint64_t WGSL::constantFrexp@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  int v15;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  int v42;
  unsigned int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  float __e[4];
  int v55;
  _QWORD v56[2];
  unsigned int v57;
  uint64_t __x[2];
  int v59;
  unsigned int *v60;
  double v61;
  _BYTE v62[8];
  int v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD v66[4];
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CACF4);
  }
  v4 = v3 + 2;
  v5 = v3[6];
  if ((_DWORD)v5 != 8)
  {
    LOBYTE(v61) = 0;
    v63 = -1;
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(float *, double *, _QWORD *))off_1E0FD8010[v5])(__e, &v61, v4);
      v63 = v5;
      switch((_DWORD)v5)
      {
        case 2:
          LODWORD(__x[0]) = 0;
          *(_QWORD *)__e = frexp(v61, (int *)__x);
          v55 = 2;
          v56[0] = SLODWORD(__x[0]);
          v38 = 5;
LABEL_52:
          v57 = v38;
          ((void (*)(uint64_t *, double *))off_1E0FD7CC8[v5])(__x, &v61);
          goto LABEL_53;
        case 1:
          _H0 = LOWORD(v61);
          __asm { FCVT            S0, H0; float }
          _S0 = frexpf(_S0, &v53);
          v27 = v53;
          __asm { FCVT            H0, S0 }
          LOWORD(__e[0]) = LOWORD(_S0);
          v55 = 1;
          goto LABEL_51;
        case 0:
          v26 = frexpf(*(float *)&v61, &v52);
          v27 = v52;
          __e[0] = v26;
          v55 = 0;
LABEL_51:
          LODWORD(v56[0]) = v27;
          v38 = 3;
          goto LABEL_52;
      }
    }
    __break(0xC471u);
LABEL_82:
    JUMPOUT(0x1825CAC94);
  }
  if (!*v4 || (v6 = *(unsigned int *)*v4, !(_DWORD)v6))
  {
    v60 = 0;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__e, 0, &v60);
    goto LABEL_53;
  }
  v49 = a2;
  v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *v7 = v6;
  bzero(v7 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  v8 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *v8 = v6;
  bzero(v8 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  v9 = 0;
  v10 = 0;
  v60 = v8;
  do
  {
    if (v10 >= *(unsigned int *)*v4)
    {
      __break(0xC471u);
      goto LABEL_82;
    }
    v11 = *v4 + v9 * 4;
    LOBYTE(__x[0]) = 0;
    v59 = -1;
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_80;
    ((void (*)(float *, uint64_t *, uint64_t))off_1E0FD8010[v12])(__e, __x, v11 + 8);
    v59 = v12;
    if ((_DWORD)v12 == 2)
    {
      __e[0] = 0.0;
      v61 = frexp(*(long double *)__x, (int *)__e);
      v63 = 2;
      v64 = SLODWORD(__e[0]);
      v15 = 5;
    }
    else
    {
      if ((_DWORD)v12 == 1)
      {
        _H0 = __x[0];
        __asm { FCVT            S0, H0; float }
        _S0 = frexpf(_S0, &v51);
        v14 = v51;
        __asm { FCVT            H0, S0 }
        LOWORD(v61) = LOWORD(_S0);
        v63 = 1;
      }
      else
      {
        if ((_DWORD)v12)
        {
LABEL_80:
          __break(0xC471u);
          JUMPOUT(0x1825CAD14);
        }
        v13 = frexpf(*(float *)__x, &v50);
        v14 = v50;
        *(float *)&v61 = v13;
        v63 = 0;
      }
      LODWORD(v64) = v14;
      v15 = 3;
    }
    v66[0] = v15;
    ((void (*)(float *, uint64_t *))off_1E0FD7CC8[v12])(__e, __x);
    v59 = -1;
    if (v10 >= *v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CACB4);
    }
    v23 = v7[v9 + 6];
    if ((_DWORD)v23 == -1)
    {
      if (v63 == -1)
        goto LABEL_22;
    }
    else if (v63 == -1)
    {
      ((void (*)(float *, unsigned int *))off_1E0FD7CC8[v23])(__e, &v7[v9 + 2]);
      v7[v9 + 6] = -1;
      goto LABEL_22;
    }
    *(_QWORD *)__e = &v7[v9 + 2];
    ((void (*)(float *))off_1E0FD80E0[v63])(__e);
LABEL_22:
    if (v10 >= *v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CACD4);
    }
    v24 = v8[v9 + 6];
    if ((_DWORD)v24 == -1)
    {
      if (v66[0] == -1)
        goto LABEL_30;
LABEL_28:
      *(_QWORD *)__e = &v8[v9 + 2];
      ((void (*)(float *))off_1E0FD80E0[v66[0]])(__e);
      v25 = v66[0];
      if (v66[0] == -1)
        goto LABEL_30;
LABEL_29:
      ((void (*)(float *, uint64_t *))off_1E0FD7CC8[v25])(__e, &v64);
      goto LABEL_30;
    }
    if (v66[0] != -1)
      goto LABEL_28;
    ((void (*)(float *, unsigned int *))off_1E0FD7CC8[v24])(__e, &v8[v9 + 2]);
    v8[v9 + 6] = -1;
    v25 = v66[0];
    if (v66[0] != -1)
      goto LABEL_29;
LABEL_30:
    v66[0] = -1;
    if (v63 != -1)
      ((void (*)(float *, double *))off_1E0FD7CC8[v63])(__e, &v61);
    ++v10;
    v9 += 6;
  }
  while (6 * v6 != v9);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__e, v7, &v60);
  v29 = *v8;
  a2 = v49;
  if ((_DWORD)v29)
  {
    v30 = 24 * v29;
    v31 = v8 + 6;
    do
    {
      v28 = v31 - 4;
      v32 = *v31;
      if ((_DWORD)v32 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v32])(&v61, v28);
      *v31 = -1;
      v31 += 6;
      v30 -= 24;
    }
    while (v30);
  }
  WTF::fastFree((WTF *)v8, v28);
  v34 = *v7;
  if ((_DWORD)v34)
  {
    v35 = 24 * v34;
    v36 = v7 + 6;
    do
    {
      v33 = v36 - 4;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v37])(&v61, v33);
      *v36 = -1;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  WTF::fastFree((WTF *)v7, v33);
LABEL_53:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v62[0] = 0;
  LODWORD(v64) = -1;
  v42 = v55;
  if (v55 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, float *))off_1E0FD8010[v55])(__x, v62, __e);
    LODWORD(v64) = v42;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v65 = __x[0];
  LOBYTE(v66[0]) = 0;
  v67 = -1;
  v43 = v57;
  if (v57 != -1)
  {
    ((void (*)(uint64_t *, _DWORD *, _QWORD *))off_1E0FD8010[v57])(__x, v66, v56);
    v67 = v43;
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(__x, (uint64_t)&v61, 2);
  v44 = __x[0];
  __x[0] = 0;
  *(_QWORD *)(a2 + 8) = v44;
  *(_DWORD *)(a2 + 24) = 10;
  *(_DWORD *)(a2 + 32) = 0;
  if (v67 != -1)
    ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v67])(&v60, v66);
  v67 = -1;
  v45 = (_DWORD *)v65;
  v65 = 0;
  if (!v45)
  {
LABEL_62:
    v46 = v64;
    if ((_DWORD)v64 == -1)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (*v45 != 2)
  {
    *v45 -= 2;
    goto LABEL_62;
  }
  WTF::StringImpl::destroy();
  v46 = v64;
  if ((_DWORD)v64 != -1)
LABEL_63:
    ((void (*)(unsigned int **, _BYTE *))off_1E0FD7CC8[v46])(&v60, v62);
LABEL_64:
  LODWORD(v64) = -1;
  result = *(_QWORD *)&v61;
  v61 = 0.0;
  if (!result)
    goto LABEL_67;
  if (*(_DWORD *)result == 2)
  {
    result = WTF::StringImpl::destroy();
    v48 = v57;
    if (v57 != -1)
      goto LABEL_68;
  }
  else
  {
    *(_DWORD *)result -= 2;
LABEL_67:
    v48 = v57;
    if (v57 != -1)
LABEL_68:
      result = ((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v48])(&v61, v56);
  }
  v57 = -1;
  if (v55 != -1)
    return ((uint64_t (*)(double *, float *))off_1E0FD7CC8[v55])(&v61, __e);
  return result;
}

uint64_t WGSL::constantInsertBits@<X0>(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t (**v18)();
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v49;
  WTF *v50;
  _BYTE v51[16];
  int v52;
  _QWORD v53[2];
  unsigned int v54;
  _DWORD v55[4];
  unsigned int v56;
  _DWORD v57[4];
  unsigned int v58;
  _DWORD v59[4];
  unsigned int v60;
  unsigned int v61[4];
  unsigned int v62;
  unsigned int v63[4];
  unsigned int v64;
  unsigned int v65[4];
  unsigned int v66;
  _QWORD v67[2];
  unsigned int v68;
  char v69;
  _DWORD *v70;
  _DWORD *v71;
  int v72;
  int v73;
  unsigned int v74;
  _QWORD v75[2];
  unsigned int v76;
  _QWORD v77[2];
  unsigned int v78;
  _QWORD v79[2];
  unsigned int v80;
  _QWORD v81[2];
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CBAA0);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CBAC0);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CBAE0);
  }
  if (v3 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CBB00);
  }
  LOBYTE(v75[0]) = 0;
  v76 = -1;
  v4 = v2[6];
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v4])(v53, v75, v2 + 2);
    v76 = v4;
  }
  LOBYTE(v77[0]) = 0;
  v78 = -1;
  v5 = v2[12];
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v5])(v53, v77, v2 + 8);
    v78 = v5;
  }
  LOBYTE(v79[0]) = 0;
  v80 = -1;
  v6 = v2[18];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v6])(v53, v79, v2 + 14);
    v80 = v6;
  }
  LOBYTE(v81[0]) = 0;
  v82 = -1;
  v7 = v2[24];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v7])(v53, v81, v2 + 20);
    v82 = v7;
  }
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v8 = v76;
  v9 = off_1E0FD7CC8;
  if (v76 != -1)
  {
    ((void (*)(_DWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v76])(&v70, v53, v75);
    v54 = v8;
    if ((_DWORD)v8 == 8)
      goto LABEL_24;
    ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v8 = v78;
  if (v78 != -1)
  {
    ((void (*)(_DWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v78])(&v70, v53, v77);
    v54 = v8;
    if ((_DWORD)v8 == 8)
      goto LABEL_24;
    ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v8 = v80;
  if (v80 != -1)
  {
    ((void (*)(_DWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v80])(&v70, v53, v79);
    v54 = v8;
    if ((_DWORD)v8 == 8)
      goto LABEL_24;
    ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v70, v53);
  }
  LOBYTE(v53[0]) = 0;
  v54 = -1;
  v8 = v82;
  if (v82 == -1)
    goto LABEL_116;
  ((void (*)(_DWORD **, _QWORD *, _QWORD *))off_1E0FD8010[v82])(&v70, v53, v81);
  v54 = v8;
  if ((_DWORD)v8 != 8)
    goto LABEL_115;
LABEL_24:
  if (!v53[0])
  {
LABEL_115:
    ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v70, v53);
LABEL_116:
    LOBYTE(v70) = 0;
    v72 = -1;
    v35 = v2[6];
    if ((_DWORD)v35 != -1)
    {
      ((void (*)(_QWORD *, _DWORD **, unsigned int *))off_1E0FD8010[v35])(v53, &v70, v2 + 2);
      v72 = v35;
    }
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v36 = v2[12];
    if ((_DWORD)v36 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, unsigned int *))off_1E0FD8010[v36])(v53, v67, v2 + 8);
      v68 = v36;
    }
    LOBYTE(v65[0]) = 0;
    v66 = -1;
    v37 = v2[18];
    if ((_DWORD)v37 != -1)
    {
      ((void (*)(_QWORD *, unsigned int *, unsigned int *))off_1E0FD8010[v37])(v53, v65, v2 + 14);
      v66 = v37;
    }
    LOBYTE(v63[0]) = 0;
    v64 = -1;
    v38 = v2[24];
    if ((_DWORD)v38 != -1)
    {
      ((void (*)(_QWORD *, unsigned int *, unsigned int *))off_1E0FD8010[v38])(v53, v63, v2 + 20);
      v64 = v38;
      LODWORD(v37) = v66;
    }
    result = WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)v53, &v70, v67, v65[0], v37, v63[0], v38);
    *(_BYTE *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = -1;
    v40 = v54;
    if (v54 == -1)
    {
      *(_DWORD *)(a2 + 32) = 0;
      v54 = -1;
      v42 = v64;
      if (v64 != -1)
LABEL_128:
        result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1E0FD7CC8[v42])(v61, v63);
    }
    else
    {
      result = ((uint64_t (*)(unsigned int *))off_1E0FD7D20[v54])(v61);
      *(_DWORD *)(a2 + 24) = v40;
      v41 = v54;
      *(_DWORD *)(a2 + 32) = 0;
      if ((_DWORD)v41 != -1)
        result = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E0FD7CC8[v41])(v61, v53);
      v54 = -1;
      v42 = v64;
      if (v64 != -1)
        goto LABEL_128;
    }
    v64 = -1;
    if (v66 != -1)
      result = ((uint64_t (*)(unsigned int *, unsigned int *))off_1E0FD7CC8[v66])(v61, v65);
    v66 = -1;
    if (v68 != -1)
      result = ((uint64_t (*)(unsigned int *, _QWORD *))off_1E0FD7CC8[v68])(v61, v67);
    v68 = -1;
    if (v72 != -1)
      result = ((uint64_t (*)(unsigned int *, _DWORD **))off_1E0FD7CC8[v72])(v61, &v70);
    v72 = -1;
    v43 = v82;
    if (v82 != -1)
      goto LABEL_152;
    goto LABEL_153;
  }
  v10 = *(_DWORD *)v53[0];
  ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v8])(&v70, v53);
  if (!v10)
    goto LABEL_116;
  v49 = 24 * v10;
  v50 = (WTF *)WTF::fastMalloc((WTF *)(v49 + 8));
  *(_DWORD *)v50 = v10;
  bzero((char *)v50 + 8, 24 * ((v49 - 24) / 0x18uLL) + 24);
  v11 = 0;
  v12 = 0;
  LODWORD(v53[0]) = 0;
  v54 = 0;
  v55[0] = 0;
  v56 = 0;
  v57[0] = 0;
  v58 = 0;
  v59[0] = 0;
  v60 = 0;
  do
  {
    if (v76 == 8)
    {
      if (v12 >= *(unsigned int *)v75[0])
        goto LABEL_162;
      v13 = *(unsigned int *)(v75[0] + v11 + 24);
      if (v54 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_39;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_34;
      }
      v70 = v53;
      ((void (*)(_DWORD **, _QWORD *, uint64_t))off_1E0FD80E0[v13])(&v70, v53, v75[0] + v11 + 8);
    }
    else
    {
      if (v54 == -1)
      {
        if (v76 == -1)
          goto LABEL_39;
      }
      else if (v76 == -1)
      {
LABEL_34:
        ((void (*)(_DWORD **, _QWORD *))v9[v54])(&v70, v53);
        v54 = -1;
        goto LABEL_39;
      }
      v70 = v53;
      ((void (*)(_DWORD **, _QWORD *, _QWORD *))off_1E0FD80E0[v76])(&v70, v53, v75);
    }
LABEL_39:
    if (v78 == 8)
    {
      if (v12 >= *(unsigned int *)v77[0])
        goto LABEL_162;
      v14 = *(unsigned int *)(v77[0] + v11 + 24);
      if (v56 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_51;
      }
      else if ((_DWORD)v14 == -1)
      {
        goto LABEL_46;
      }
      v70 = v55;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1E0FD80E0[v14])(&v70, v55, v77[0] + v11 + 8);
    }
    else
    {
      if (v56 == -1)
      {
        if (v78 == -1)
          goto LABEL_51;
      }
      else if (v78 == -1)
      {
LABEL_46:
        ((void (*)(_DWORD **, _DWORD *))v9[v56])(&v70, v55);
        v56 = -1;
        goto LABEL_51;
      }
      v70 = v55;
      ((void (*)(_DWORD **, _DWORD *, _QWORD *))off_1E0FD80E0[v78])(&v70, v55, v77);
    }
LABEL_51:
    if (v80 == 8)
    {
      if (v12 >= *(unsigned int *)v79[0])
        goto LABEL_162;
      v15 = *(unsigned int *)(v79[0] + v11 + 24);
      if (v58 == -1)
      {
        if ((_DWORD)v15 == -1)
          goto LABEL_63;
      }
      else if ((_DWORD)v15 == -1)
      {
        goto LABEL_58;
      }
      v70 = v57;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1E0FD80E0[v15])(&v70, v57, v79[0] + v11 + 8);
    }
    else
    {
      if (v58 == -1)
      {
        if (v80 == -1)
          goto LABEL_63;
      }
      else if (v80 == -1)
      {
LABEL_58:
        ((void (*)(_DWORD **, _DWORD *))v9[v58])(&v70, v57);
        v58 = -1;
        goto LABEL_63;
      }
      v70 = v57;
      ((void (*)(_DWORD **, _DWORD *, _QWORD *))off_1E0FD80E0[v80])(&v70, v57, v79);
    }
LABEL_63:
    if (v82 == 8)
    {
      if (v12 >= *(unsigned int *)v81[0])
      {
LABEL_162:
        __break(0xC471u);
        JUMPOUT(0x1825CBA60);
      }
      v16 = *(unsigned int *)(v81[0] + v11 + 24);
      if (v60 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_75;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_70;
      }
      v70 = v59;
      ((void (*)(_DWORD **, _DWORD *, uint64_t))off_1E0FD80E0[v16])(&v70, v59, v81[0] + v11 + 8);
    }
    else
    {
      if (v60 == -1)
      {
        if (v82 == -1)
          goto LABEL_75;
      }
      else if (v82 == -1)
      {
LABEL_70:
        ((void (*)(_DWORD **, _DWORD *))v9[v60])(&v70, v59);
        v60 = -1;
        goto LABEL_75;
      }
      v70 = v59;
      ((void (*)(_DWORD **, _DWORD *, _QWORD *))off_1E0FD80E0[v82])(&v70, v59, v81);
    }
LABEL_75:
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v17 = v54;
    if (v54 != -1)
    {
      ((void (*)(unsigned int *, _QWORD *, _QWORD *))off_1E0FD8010[v54])(v65, v67, v53);
      v68 = v17;
    }
    v18 = v9;
    LOBYTE(v65[0]) = 0;
    v66 = -1;
    v19 = v56;
    if (v56 != -1)
    {
      ((void (*)(unsigned int *, unsigned int *, _DWORD *))off_1E0FD8010[v56])(v63, v65, v55);
      v66 = v19;
    }
    LOBYTE(v63[0]) = 0;
    v64 = -1;
    v20 = v58;
    if (v58 != -1)
    {
      ((void (*)(unsigned int *, unsigned int *, _DWORD *))off_1E0FD8010[v58])(v61, v63, v57);
      v64 = v20;
    }
    LOBYTE(v61[0]) = 0;
    v62 = -1;
    v21 = v60;
    if (v60 != -1)
    {
      ((void (*)(char *, unsigned int *, _DWORD *))off_1E0FD8010[v60])(&v69, v61, v59);
      v62 = v21;
      v20 = v64;
    }
    WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>((uint64_t)v51, v67, v65, v63[0], v20, v61[0], v21);
    v9 = v18;
    if (v62 != -1)
      ((void (*)(char *, unsigned int *))v18[v62])(&v69, v61);
    v62 = -1;
    if (v64 != -1)
      ((void (*)(char *, unsigned int *))v18[v64])(&v69, v63);
    v64 = -1;
    if (v66 != -1)
      ((void (*)(char *, unsigned int *))v18[v66])(&v69, v65);
    v66 = -1;
    if (v68 != -1)
      ((void (*)(char *, _QWORD *))v18[v68])(&v69, v67);
    LOBYTE(v71) = 0;
    v73 = -1;
    v22 = v52;
    if (v52 == -1)
    {
      v74 = 0;
LABEL_100:
      if (v12 >= *(unsigned int *)v50)
      {
        __break(0xC471u);
        JUMPOUT(0x1825CBA80);
      }
      v23 = (_DWORD *)((char *)v50 + v11 + 8);
      v27 = *(unsigned int *)((char *)v50 + v11 + 24);
      if ((_DWORD)v27 == -1)
      {
        if (v73 == -1)
          goto LABEL_106;
      }
      else if (v73 == -1)
      {
        ((void (*)(_QWORD *, _DWORD *))v18[v27])(v67, v23);
        *(_DWORD *)((char *)v50 + v11 + 24) = -1;
        goto LABEL_106;
      }
      v67[0] = (char *)v50 + v11 + 8;
      ((void (*)(_QWORD *))off_1E0FD8188[v73])(v67);
LABEL_106:
      v25 = 1;
      v26 = v74;
      if (v74 == -1)
        goto LABEL_108;
LABEL_107:
      ((void (*)(_QWORD *, _DWORD **))off_1E0FD7DD0[v26])(v67, &v71);
      goto LABEL_108;
    }
    ((void (*)(_QWORD *, _DWORD **, _BYTE *))off_1E0FD7D20[v52])(v67, &v71, v51);
    v73 = v22;
    v74 = 0;
    if (v52 == -1)
      goto LABEL_100;
    ((void (*)(_QWORD *, _BYTE *))v18[v52])(v67, v51);
    if (!v74)
      goto LABEL_100;
    if (v74 != 1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v24 = v71;
    if (v71)
      *v71 += 2;
    v25 = 0;
    *(_QWORD *)(a2 + 8) = v24;
    *(_DWORD *)(a2 + 32) = 1;
    v26 = v74;
    if (v74 != -1)
      goto LABEL_107;
LABEL_108:
    if ((v25 & 1) == 0)
      goto LABEL_138;
    ++v12;
    v11 += 24;
  }
  while (v49 != v11);
  v28 = *(unsigned int *)v50;
  v29 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v28 + 8));
  v30 = v29;
  *v29 = v28;
  if ((_DWORD)v28)
  {
    v31 = v29 + 6;
    v32 = 24 * v28;
    v33 = (unsigned int *)((char *)v50 + 24);
    do
    {
      *((_BYTE *)v31 - 16) = 0;
      v23 = v31 - 4;
      *v31 = -1;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
      {
        ((void (*)(_DWORD **, _DWORD *, unsigned int *))off_1E0FD8010[v34])(&v70, v23, v33 - 4);
        *v31 = v34;
      }
      v31 += 6;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  *(_QWORD *)(a2 + 8) = v30;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  v9 = v18;
LABEL_138:
  if (v60 != -1)
    ((void (*)(_DWORD **, _DWORD *))v9[v60])(&v70, v59);
  v60 = -1;
  if (v58 != -1)
    ((void (*)(_DWORD **, _DWORD *))v9[v58])(&v70, v57);
  v58 = -1;
  if (v56 != -1)
    ((void (*)(_DWORD **, _DWORD *))v9[v56])(&v70, v55);
  v56 = -1;
  if (v54 != -1)
    ((void (*)(_DWORD **, _QWORD *))v9[v54])(&v70, v53);
  v44 = *(unsigned int *)v50;
  if ((_DWORD)v44)
  {
    v45 = 24 * v44;
    v46 = (_DWORD *)((char *)v50 + 24);
    do
    {
      v23 = v46 - 4;
      v47 = *v46;
      if ((_DWORD)v47 != -1)
        ((void (*)(_QWORD *, _DWORD *))v9[v47])(v53, v23);
      *v46 = -1;
      v46 += 6;
      v45 -= 24;
    }
    while (v45);
  }
  result = WTF::fastFree(v50, v23);
  v43 = v82;
  if (v82 != -1)
LABEL_152:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))v9[v43])(v53, v81);
LABEL_153:
  v82 = -1;
  if (v80 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))v9[v80])(v53, v79);
  v80 = -1;
  if (v78 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))v9[v78])(v53, v77);
  v78 = -1;
  if (v76 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))v9[v76])(v53, v75);
  return result;
}

uint64_t WGSL::constantInverseSqrt@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CC00CLL);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        *(double *)(a2 + 8) = 1.0 / sqrt(*v5);
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
        return result;
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        _D0 = 1.0 / sqrtf(_S0);
        __asm { FCVT            H0, D0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
        return result;
      case 0:
        *(float *)(a2 + 8) = 1.0 / sqrtf(*(float *)v5);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v35])(&v44, v49);
        return result;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825CC06CLL);
  }
  v40 = a2;
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v13 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v13 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825CBFECLL);
      }
      v12 = v49[0] + v11 * 4 - 16;
      v14 = *(unsigned int *)(v49[0] + v11 * 4);
      v15 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v14 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v14])(&v44, v41, v12);
    }
    else
    {
      v15 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v15])(&v44, v41, v12);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825CC04CLL);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _D0 = 1.0 / sqrtf(_S0);
        __asm { FCVT            H0, D0 }
        LOWORD(v45) = LOWORD(_D0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = 1.0 / sqrt(v41[0]);
      }
    }
    else
    {
      *(float *)&v45 = 1.0 / sqrtf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CBFCCLL);
    }
    v43 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  v23 = *v10;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v10 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v44, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v40 + 8) = v26;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v31 = *v10;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v10 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v34])(&v44, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  result = WTF::fastFree((WTF *)v10, v25);
  v35 = v50;
  if (v50 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v35])(&v44, v49);
  return result;
}

void WGSL::constantLdexp(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  long double *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float v25;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  long double v47;
  unsigned int *v49;
  int v50;
  uint64_t v54;
  long double __x[2];
  unsigned int v56;
  int __e[2];
  unsigned int v58;
  unsigned int *v59;
  int *v60;
  long double v61[2];
  int v62;
  int v63;
  _QWORD v64[2];
  int v65;
  _QWORD v66[2];
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CCA88);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CCAA8);
  }
  v5 = (long double *)(v3 + 2);
  LOBYTE(v64[0]) = 0;
  v65 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v6])(__x, v64, v3 + 2);
    v65 = v6;
  }
  v7 = (uint64_t *)(v3 + 8);
  LOBYTE(v66[0]) = 0;
  v67 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v8])(__x, v66, v3 + 8);
    v67 = v8;
    LODWORD(v6) = v65;
  }
  LOBYTE(__x[0]) = 0;
  v56 = -1;
  if ((_DWORD)v6 != -1)
  {
    v9 = v6;
    ((void (*)(int **, long double *, _QWORD *))off_1E0FD8010[v6])(&v60, __x, v64);
    v56 = v6;
    if ((_DWORD)v6 == 8)
    {
      if (!*(_QWORD *)&__x[0])
      {
        ((void (*)(int **, long double *))off_1E0FD7CC8[v6])(&v60, __x);
        goto LABEL_17;
      }
      v10 = **(_DWORD **)&__x[0];
      ((void (*)(int **, long double *))off_1E0FD7CC8[v9])(&v60, __x);
      if (!v10)
      {
LABEL_17:
        v11 = v3[6];
        v12 = v3[12];
        if (v11 == 2)
        {
          if (v12 == 5)
          {
            v13 = *v7;
            if (*v7 <= -1023)
            {
              *(_QWORD *)(a2 + 8) = 0;
LABEL_99:
              v50 = 2;
LABEL_117:
              *(_DWORD *)(a2 + 24) = v50;
              goto LABEL_118;
            }
            if (v13 < 1025)
            {
              *(long double *)(a2 + 8) = ldexp(*v5, v13);
              goto LABEL_99;
            }
            WTF::tryFastCompactMalloc((WTF *)0x39);
            v47 = __x[0];
            if (!*(_QWORD *)&__x[0])
            {
              __break(0xC471u);
              JUMPOUT(0x1825CCB00);
            }
            **(_QWORD **)&__x[0] = 0x2500000002;
            qmemcpy((void *)(*(_QWORD *)&v47 + 20), "e2 must be less than or equal to 1024", 37);
            *(_QWORD *)(*(_QWORD *)&v47 + 8) = *(_QWORD *)&v47 + 20;
            *(_DWORD *)(*(_QWORD *)&v47 + 16) = 4;
LABEL_106:
            *(long double *)(a2 + 8) = v47;
            *(_DWORD *)(a2 + 32) = 1;
            goto LABEL_119;
          }
        }
        else if (v12 == 3)
        {
          v46 = *(_DWORD *)v7;
          if (v11 == 1)
          {
            if (v46 > -15)
            {
              if (v46 >= 17)
              {
                WTF::tryFastCompactMalloc((WTF *)0x37);
                v47 = __x[0];
                if (!*(_QWORD *)&__x[0])
                {
LABEL_136:
                  __break(0xC471u);
                  JUMPOUT(0x1825CCA48);
                }
                **(_QWORD **)&__x[0] = 0x2300000002;
                qmemcpy((void *)(*(_QWORD *)&v47 + 20), "e2 must be less than or equal to 16", 35);
                *(_QWORD *)(*(_QWORD *)&v47 + 8) = *(_QWORD *)&v47 + 20;
                *(_DWORD *)(*(_QWORD *)&v47 + 16) = 4;
                goto LABEL_106;
              }
              _H0 = *(_WORD *)v5;
              __asm { FCVT            S0, H0; float }
              _S0 = ldexpf(_S0, v46);
              __asm { FCVT            H0, S0 }
            }
            else
            {
              _H0 = 0;
            }
            *(_WORD *)(a2 + 8) = _H0;
            v50 = 1;
            goto LABEL_117;
          }
          if (v11)
          {
            __break(0xC471u);
            JUMPOUT(0x1825CCAF0);
          }
          if (v46 > -127)
          {
            if (v46 >= 129)
            {
              WTF::tryFastCompactMalloc((WTF *)0x38);
              v47 = __x[0];
              if (!*(_QWORD *)&__x[0])
              {
                __break(0xC471u);
                JUMPOUT(0x1825CCB18);
              }
              **(_QWORD **)&__x[0] = 0x2400000002;
              qmemcpy((void *)(*(_QWORD *)&v47 + 20), "e2 must be less than or equal to 128", 36);
              *(_QWORD *)(*(_QWORD *)&v47 + 8) = *(_QWORD *)&v47 + 20;
              *(_DWORD *)(*(_QWORD *)&v47 + 16) = 4;
              goto LABEL_106;
            }
            *(float *)(a2 + 8) = ldexpf(*(float *)v5, v46);
          }
          else
          {
            *(_DWORD *)(a2 + 8) = 0;
          }
          *(_DWORD *)(a2 + 24) = 0;
LABEL_118:
          *(_DWORD *)(a2 + 32) = 0;
          goto LABEL_119;
        }
LABEL_128:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
        __break(0xC471u);
        JUMPOUT(0x1825CCACCLL);
      }
      goto LABEL_22;
    }
    ((void (*)(int **, long double *))off_1E0FD7CC8[v6])(&v60, __x);
    LODWORD(v8) = v67;
  }
  LOBYTE(__x[0]) = 0;
  v56 = -1;
  if ((_DWORD)v8 == -1)
    goto LABEL_17;
  ((void (*)(int **, long double *, _QWORD *))off_1E0FD8010[v8])(&v60, __x, v66);
  v56 = v8;
  if ((_DWORD)v8 != 8 || !*(_QWORD *)&__x[0])
  {
    ((void (*)(int **, long double *))off_1E0FD7CC8[v8])(&v60, __x);
    goto LABEL_17;
  }
  v10 = **(_DWORD **)&__x[0];
  ((void (*)(int **, long double *))_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_)(&v60, __x);
  if (!v10)
    goto LABEL_17;
LABEL_22:
  v54 = a2;
  v14 = 24 * v10;
  v15 = (unsigned int *)WTF::fastMalloc((WTF *)(v14 + 8));
  *v15 = v10;
  v16 = 24;
  bzero(v15 + 2, 24 * ((v14 - 24) / 0x18uLL) + 24);
  v18 = 0;
  LODWORD(__x[0]) = 0;
  v56 = 0;
  __e[0] = 0;
  v58 = 0;
  while (1)
  {
    if (v65 == 8)
    {
      if (v18 >= *(unsigned int *)v64[0])
        goto LABEL_136;
      v17 = v64[0] + v16 - 16;
      v19 = *(unsigned int *)(v64[0] + v16);
      v20 = v56;
      if (v56 == -1)
      {
        if ((_DWORD)v19 == -1)
          goto LABEL_36;
      }
      else if ((_DWORD)v19 == -1)
      {
        goto LABEL_31;
      }
      v60 = (int *)__x;
      ((void (*)(int **, long double *, uint64_t))off_1E0FD80E0[v19])(&v60, __x, v17);
    }
    else
    {
      v20 = v56;
      if (v56 == -1)
      {
        if (v65 == -1)
          goto LABEL_36;
      }
      else if (v65 == -1)
      {
LABEL_31:
        ((void (*)(int **, long double *, uint64_t))off_1E0FD7CC8[v20])(&v60, __x, v17);
        v56 = -1;
        goto LABEL_36;
      }
      v60 = (int *)__x;
      ((void (*)(int **, long double *, _QWORD *))off_1E0FD80E0[v65])(&v60, __x, v64);
    }
LABEL_36:
    if (v67 == 8)
    {
      if (v18 >= *(unsigned int *)v66[0])
        goto LABEL_136;
      v17 = v66[0] + v16 - 16;
      v21 = *(unsigned int *)(v66[0] + v16);
      v22 = v58;
      if (v58 == -1)
      {
        if ((_DWORD)v21 == -1)
          goto LABEL_48;
      }
      else if ((_DWORD)v21 == -1)
      {
        goto LABEL_43;
      }
      v60 = __e;
      ((void (*)(int **, int *, uint64_t))off_1E0FD80E0[v21])(&v60, __e, v17);
    }
    else
    {
      v22 = v58;
      if (v58 == -1)
      {
        if (v67 == -1)
          goto LABEL_48;
      }
      else if (v67 == -1)
      {
LABEL_43:
        ((void (*)(int **, int *, uint64_t))off_1E0FD7CC8[v22])(&v60, __e, v17);
        v58 = -1;
        goto LABEL_48;
      }
      v60 = __e;
      ((void (*)(int **, int *, _QWORD *))off_1E0FD80E0[v67])(&v60, __e, v66);
    }
LABEL_48:
    if (v56 != 2)
      break;
    if (v58 != 5)
      goto LABEL_128;
    if (*(uint64_t *)__e > -1023)
    {
      if (*(uint64_t *)__e >= 1025)
      {
        WTF::tryFastCompactMalloc((WTF *)0x39);
        v49 = v59;
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x1825CCAF8);
        }
        *(_QWORD *)v59 = 0x2500000002;
        qmemcpy(v49 + 5, "e2 must be less than or equal to 1024", 37);
        *((_QWORD *)v49 + 1) = v49 + 5;
        v49[4] = 4;
        goto LABEL_111;
      }
      v61[0] = ldexp(__x[0], __e[0]);
      v24 = 2;
      goto LABEL_66;
    }
    v61[0] = 0.0;
    v23 = 2;
    v24 = 2;
LABEL_67:
    v62 = v23;
    v63 = 0;
    if (v18 >= *v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CCA68);
    }
    v59 = &v15[(unint64_t)v16 / 4 - 4];
    ((void (*)(unsigned int **))off_1E0FD8188[v24])(&v59);
    if (v63 != -1)
      ((void (*)(unsigned int **, long double *))off_1E0FD7DD0[v63])(&v59, v61);
    ++v18;
    v16 += 24;
    if (v10 == v18)
    {
      v33 = *v15;
      v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
      v36 = v34;
      *v34 = v33;
      if ((_DWORD)v33)
      {
        v37 = v34 + 6;
        v38 = 24 * v33;
        v39 = v15 + 6;
        do
        {
          *((_BYTE *)v37 - 16) = 0;
          v35 = v37 - 4;
          *v37 = -1;
          v40 = *v39;
          if ((_DWORD)v40 != -1)
          {
            ((void (*)(int **, _DWORD *, unsigned int *))off_1E0FD8010[v40])(&v60, v35, v39 - 4);
            *v37 = v40;
          }
          v37 += 6;
          v39 += 6;
          v38 -= 24;
        }
        while (v38);
      }
      *(_QWORD *)(v54 + 8) = v36;
      *(_DWORD *)(v54 + 24) = 8;
      *(_DWORD *)(v54 + 32) = 0;
      v41 = v58;
      if (v58 != -1)
        goto LABEL_76;
      goto LABEL_77;
    }
  }
  if (v58 != 3)
    goto LABEL_128;
  if (v56 != 1)
  {
    if (v56)
      goto LABEL_129;
    if (__e[0] > -127)
    {
      if (__e[0] >= 129)
      {
        WTF::tryFastCompactMalloc((WTF *)0x38);
        v49 = v59;
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x1825CCB08);
        }
        *(_QWORD *)v59 = 0x2400000002;
        qmemcpy(v49 + 5, "e2 must be less than or equal to 128", 36);
        *((_QWORD *)v49 + 1) = v49 + 5;
        v49[4] = 4;
        goto LABEL_111;
      }
      v25 = ldexpf(*(float *)__x, __e[0]);
      v23 = 0;
      v24 = 0;
      *(float *)v61 = v25;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      LODWORD(v61[0]) = 0;
    }
    goto LABEL_67;
  }
  if (__e[0] <= -15)
  {
    LOWORD(v61[0]) = 0;
    goto LABEL_65;
  }
  if (__e[0] < 17)
  {
    _H0 = LOWORD(__x[0]);
    __asm { FCVT            S0, H0; float }
    _S0 = ldexpf(_S0, __e[0]);
    __asm { FCVT            H0, S0 }
    LOWORD(v61[0]) = LOWORD(_S0);
LABEL_65:
    v24 = 1;
LABEL_66:
    v23 = v24;
    goto LABEL_67;
  }
  WTF::tryFastCompactMalloc((WTF *)0x37);
  v49 = v59;
  if (!v59)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CCB10);
  }
  *(_QWORD *)v59 = 0x2300000002;
  qmemcpy(v49 + 5, "e2 must be less than or equal to 16", 35);
  *((_QWORD *)v49 + 1) = v49 + 5;
  v49[4] = 4;
LABEL_111:
  *(_QWORD *)(v54 + 8) = v49;
  *(_DWORD *)(v54 + 32) = 1;
  *v49 = 2;
  v41 = v58;
  if (v58 != -1)
LABEL_76:
    ((void (*)(int **, int *))off_1E0FD7CC8[v41])(&v60, __e);
LABEL_77:
  v58 = -1;
  if (v56 != -1)
    ((void (*)(int **, long double *))off_1E0FD7CC8[v56])(&v60, __x);
  v42 = *v15;
  if ((_DWORD)v42)
  {
    v43 = 24 * v42;
    v44 = v15 + 6;
    do
    {
      v35 = v44 - 4;
      v45 = *v44;
      if ((_DWORD)v45 != -1)
        ((void (*)(long double *, _DWORD *))off_1E0FD7CC8[v45])(__x, v35);
      *v44 = -1;
      v44 += 6;
      v43 -= 24;
    }
    while (v43);
  }
  WTF::fastFree((WTF *)v15, v35);
LABEL_119:
  if (v67 != -1)
    ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v67])(__x, v66);
  v67 = -1;
  if (v65 != -1)
    ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v65])(__x, v64);
}

uint64_t WGSL::constantLength@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF *v41;
  _DWORD *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int *v48;
  int *v49[2];
  unsigned int v50;
  _QWORD v51[2];
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  int v56;
  int v57;
  _QWORD v58[2];
  int v59;
  _BYTE v60[16];
  unsigned int v61;
  uint64_t v62;
  _QWORD v63[2];
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CD364);
  }
  if (v4[6] != 8)
    return WGSL::constantAbs(a2, a3);
  v6 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v6 == -1
    || (v58[0] = &v62,
        ((void (*)(_QWORD *__return_ptr, _QWORD *, uint64_t))off_1E0FD8068[v6])(v51, v58, a1),
        v4[6] != 8))
  {
LABEL_104:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v7 = (unsigned int *)*((_QWORD *)v4 + 1);
  if (v7)
    v8 = v7 + 2;
  else
    v8 = 0;
  if (!v7)
  {
    v9 = 0;
    if (!v8)
      goto LABEL_86;
    while (1)
    {
LABEL_13:
      LOBYTE(v58[0]) = 0;
      v59 = -1;
      v11 = v8[4];
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v11])(&v54, v58, v8);
        v59 = v11;
      }
      v60[0] = 0;
      v61 = -1;
      v12 = v8[4];
      if ((_DWORD)v12 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, unsigned int *))off_1E0FD8010[v12])(&v54, v60, v8);
        v61 = v12;
      }
      v13 = WTF::fastMalloc((WTF *)0x38);
      v14 = (unsigned int *)v13;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_DWORD *)v13 = 2;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      v49[0] = (int *)v13;
      if (v59 == -1)
      {
        *(_DWORD *)(v13 + 24) = -1;
        v16 = (unsigned int *)(v13 + 32);
        v17 = v61;
        if (v61 == -1)
        {
          v15 = 0;
LABEL_25:
          ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v15])(&v54, v16);
          v14[12] = -1;
LABEL_26:
          WGSL::constantMultiply(a1, v49, (uint64_t)&v62);
          v19 = *v14;
          if (!(_DWORD)v19)
            goto LABEL_33;
          goto LABEL_29;
        }
      }
      else
      {
        v54 = v13 + 8;
        ((void (*)(uint64_t *))off_1E0FD80E0[v59])(&v54);
        if (*v14 < 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825CD324);
        }
        v15 = v14[12];
        v16 = v14 + 8;
        v17 = v61;
        if ((_DWORD)v15 == -1)
        {
          if (v61 == 0xFFFFFFFFLL)
            goto LABEL_26;
        }
        else if (v61 == 0xFFFFFFFFLL)
        {
          goto LABEL_25;
        }
      }
      v54 = (uint64_t)v16;
      ((void (*)(uint64_t *))off_1E0FD80E0[v17])(&v54);
      WGSL::constantMultiply(a1, v49, (uint64_t)&v62);
      v19 = *v14;
      if (!(_DWORD)v19)
        goto LABEL_33;
LABEL_29:
      v20 = 24 * v19;
      v21 = v14 + 6;
      do
      {
        v18 = v21 - 4;
        v22 = *v21;
        if ((_DWORD)v22 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v22])(&v54, v18);
        *v21 = -1;
        v21 += 6;
        v20 -= 24;
      }
      while (v20);
LABEL_33:
      WTF::fastFree((WTF *)v14, v18);
      if (v61 != -1)
        ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v61])(&v54, v60);
      v61 = -1;
      if (v59 != -1)
        ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v59])(&v54, v58);
      if (!v65)
      {
        LOBYTE(v49[0]) = 0;
        v50 = -1;
        v26 = v64;
        if (v64 != -1)
        {
          ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v64])(v58, v49, v63);
          v50 = v26;
        }
        LOBYTE(v58[0]) = 0;
        v59 = -1;
        v27 = v52;
        if (v52 != -1)
        {
          ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E0FD8010[v52])(&v53, v58, v51);
          v59 = v27;
          v26 = v50;
        }
        v60[0] = 0;
        v61 = -1;
        if (v26 != 0xFFFFFFFFLL)
        {
          ((void (*)(uint64_t *, _BYTE *, int **))off_1E0FD8010[v26])(&v53, v60, v49);
          v61 = v26;
        }
        v28 = WTF::fastMalloc((WTF *)0x38);
        v29 = (unsigned int *)v28;
        *(_OWORD *)(v28 + 8) = 0u;
        *(_DWORD *)v28 = 2;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_OWORD *)(v28 + 40) = 0u;
        v48 = (unsigned int *)v28;
        if (v59 == -1)
        {
          *(_DWORD *)(v28 + 24) = -1;
          v31 = (unsigned int *)(v28 + 32);
          v32 = v61;
          if (v61 != -1)
            goto LABEL_59;
          v30 = 0;
        }
        else
        {
          v53 = v28 + 8;
          ((void (*)(uint64_t *))off_1E0FD80E0[v59])(&v53);
          if (*v29 < 2)
          {
            __break(0xC471u);
            JUMPOUT(0x1825CD344);
          }
          v30 = v29[12];
          v31 = v29 + 8;
          v32 = v61;
          if ((_DWORD)v30 == -1)
          {
            if (v61 != 0xFFFFFFFFLL)
            {
LABEL_59:
              v53 = (uint64_t)v31;
              ((void (*)(uint64_t *))off_1E0FD80E0[v32])(&v53);
              WGSL::constantAdd(a1, &v48, (uint64_t)&v54);
              v34 = *v29;
              if ((_DWORD)v34)
                goto LABEL_60;
              goto LABEL_64;
            }
LABEL_57:
            WGSL::constantAdd(a1, &v48, (uint64_t)&v54);
            v34 = *v29;
            if ((_DWORD)v34)
            {
LABEL_60:
              v35 = 24 * v34;
              v36 = v29 + 6;
              do
              {
                v33 = v36 - 4;
                v37 = *v36;
                if ((_DWORD)v37 != -1)
                  ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v37])(&v53, v33);
                *v36 = -1;
                v36 += 6;
                v35 -= 24;
              }
              while (v35);
            }
LABEL_64:
            result = WTF::fastFree((WTF *)v29, v33);
            if (v61 != -1)
              result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v61])(&v53, v60);
            v61 = -1;
            if (v59 != -1)
              result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v59])(&v53, v58);
            v24 = v57;
            if (v57)
            {
              if (v57 != 1)
                goto LABEL_104;
              v38 = v55[0];
              if (v55[0])
                *(_DWORD *)v55[0] += 2;
              *(_QWORD *)(a3 + 8) = v38;
              *(_DWORD *)(a3 + 32) = 1;
            }
            else
            {
              if (v52 == -1)
              {
                if (v56 == -1)
                  goto LABEL_78;
              }
              else if (v56 == -1)
              {
                result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v52])(v58, v51);
                v52 = -1;
                goto LABEL_78;
              }
              v58[0] = v51;
              result = ((uint64_t (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD8188[v56])(v58, v51, v55);
            }
LABEL_78:
            if (v57 != -1)
              result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v57])(v58, v55);
            if (v50 != -1)
              result = ((uint64_t (*)(_QWORD *, int **))off_1E0FD7CC8[v50])(v58, v49);
            v25 = v65;
            if (v65 == -1)
              goto LABEL_84;
            goto LABEL_83;
          }
          if (v61 != 0xFFFFFFFFLL)
            goto LABEL_59;
        }
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v30])(&v53, v31);
        v29[12] = -1;
        goto LABEL_57;
      }
      if (v65 != 1)
        goto LABEL_104;
      v23 = v63[0];
      if (v63[0])
        *(_DWORD *)v63[0] += 2;
      *(_QWORD *)(a3 + 8) = v23;
      v24 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      v25 = 1;
LABEL_83:
      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v25])(v58, v63);
LABEL_84:
      if (v24)
        goto LABEL_98;
      v8 += 6;
      if (v8 == (unsigned int *)v9)
        goto LABEL_86;
    }
  }
  v9 = (uint64_t)&v7[6 * *v7 + 2];
  if (v8 != (unsigned int *)v9)
    goto LABEL_13;
LABEL_86:
  LOBYTE(v58[0]) = 0;
  v59 = -1;
  v39 = v52;
  if (v52 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, _QWORD *))off_1E0FD8010[v52])(&v62, v58, v51);
    v59 = v39;
  }
  v40 = WTF::fastMalloc((WTF *)0x20);
  v41 = (WTF *)v40;
  *(_QWORD *)(v40 + 8) = 0;
  *(_DWORD *)v40 = 1;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  v54 = v40;
  if (v59 == -1)
  {
    *(_DWORD *)(v40 + 24) = -1;
    v43.n128_u64[0] = WGSL::constantSqrt(&v54, a3);
    v44 = *(unsigned int *)v41;
    if (!(_DWORD)v44)
      goto LABEL_96;
  }
  else
  {
    v62 = v40 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v59])(&v62);
    v43.n128_u64[0] = WGSL::constantSqrt(&v54, a3);
    v44 = *(unsigned int *)v41;
    if (!(_DWORD)v44)
      goto LABEL_96;
  }
  v45 = 24 * v44;
  v46 = (_DWORD *)((char *)v41 + 24);
  do
  {
    v42 = v46 - 4;
    v47 = *v46;
    if ((_DWORD)v47 != -1)
      ((void (*)(uint64_t *, _DWORD *, __n128))off_1E0FD7CC8[v47])(&v62, v42, v43);
    *v46 = -1;
    v46 += 6;
    v45 -= 24;
  }
  while (v45);
LABEL_96:
  result = WTF::fastFree(v41, v42);
  if (v59 != -1)
    result = ((uint64_t (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v59])(&v62, v58);
LABEL_98:
  if (v52 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v52])(v58, v51);
  return result;
}

__int16 WGSL::constantLog@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CD844);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = log(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = logf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = logf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825CD8A4);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825CD824);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825CD884);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = logf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = log(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = logf(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CD804);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

__int16 WGSL::constantLog2@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  long double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v41;
  long double __x[2];
  unsigned int v43;
  uint64_t v44;
  long double *v45;
  long double v46;
  int v47;
  int v48;
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CDD80);
  }
  LOBYTE(v50[0]) = 0;
  v51 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (long double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(long double **, _QWORD *, _DWORD *))v6)(&v45, v50, v3 + 2);
  v51 = v4;
  LOBYTE(v45) = 0;
  v47 = -1;
  ((void (*)(long double *, long double **, _QWORD *))v6)(__x, &v45, v50);
  v7 = 0;
  v47 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v45)
      v7 = *(_DWORD *)v45;
    else
      v7 = 0;
  }
  ((void (*)(long double *, long double **))off_1E0FD7CC8[v4])(__x, &v45);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        _D0 = log2(*v5);
        *(long double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0; float }
        *(float *)&_D0 = log2f(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = log2f(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v51;
        if (v51 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825CDDE0);
  }
  v41 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(__x[0]) = 0;
  v43 = 0;
  do
  {
    if (v51 == 8)
    {
      if (v12 >= *(unsigned int *)v50[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825CDD60);
      }
      v11 = v50[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v50[0] + v10 * 4);
      v14 = v43;
      if (v43 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v45 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v13])(&v45, __x, v11);
    }
    else
    {
      v14 = v43;
      if (v43 == -1)
      {
        if (v51 == -1)
          goto LABEL_59;
      }
      else if (v51 == -1)
      {
LABEL_58:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v14])(&v45, __x, v11);
        v43 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825CDDC0);
      }
      v45 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v51])(&v45, __x, v50);
    }
LABEL_22:
    v15 = v43;
    if (v43)
    {
      if (v43 == 1)
      {
        _H0 = LOWORD(__x[0]);
        __asm { FCVT            S0, H0; float }
        _S0 = log2f(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v46) = LOWORD(_S0);
      }
      else
      {
        if (v43 != 2)
          goto LABEL_59;
        v46 = log2(__x[0]);
      }
    }
    else
    {
      LODWORD(v46) = log2f(*(float *)__x);
    }
    v48 = v15;
    v49 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825CDD40);
    }
    v44 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v15])(&v44);
    if (v49 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v49])(&v44, &v46);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v23 = *v9;
  v24 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v23 + 8));
  v26 = v24;
  *v24 = v23;
  if ((_DWORD)v23)
  {
    v27 = v24 + 6;
    v28 = 24 * v23;
    v29 = v9 + 6;
    do
    {
      *((_BYTE *)v27 - 16) = 0;
      v25 = v27 - 4;
      *v27 = -1;
      v30 = *v29;
      if ((_DWORD)v30 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v30])(&v45, v25, v29 - 4);
        *v27 = v30;
      }
      v27 += 6;
      v29 += 6;
      v28 -= 24;
    }
    while (v28);
  }
  *(_QWORD *)(v41 + 8) = v26;
  *(_DWORD *)(v41 + 24) = 8;
  *(_DWORD *)(v41 + 32) = 0;
  if (v43 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v43])(&v45, __x);
  v31 = *v9;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v9 + 6;
    do
    {
      v25 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(long double **, _DWORD *))off_1E0FD7CC8[v34])(&v45, v25);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v9, v25);
  v36 = v51;
  if (v51 != -1)
LABEL_44:
    ((void (*)(long double **, _QWORD *))off_1E0FD7CC8[v36])(&v45, v50);
  return LOWORD(_D0);
}

void WGSL::constantMax(int **a1@<X1>, float *a2@<X8>, float _S1@<S1>)
{
  int *v4;
  int v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  double v23;
  int v24;
  int v25;
  double v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float *v55;
  double v56[2];
  unsigned int v57;
  double v58[2];
  unsigned int v59;
  uint64_t v60;
  double *v61;
  double v62[2];
  unsigned int v63;
  int v64;
  _QWORD v65[2];
  int v66;
  _QWORD v67[2];
  unsigned int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = **a1;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CE67CLL);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CE69CLL);
  }
  v6 = (float *)(v4 + 2);
  LOBYTE(v65[0]) = 0;
  v66 = -1;
  v7 = v4[6];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v7])(v56, v65, v4 + 2);
    v66 = v7;
  }
  v8 = (float *)(v4 + 8);
  LOBYTE(v67[0]) = 0;
  v68 = -1;
  v9 = v4[12];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v9])(v56, v67, v4 + 8);
    v68 = v9;
    LODWORD(v7) = v66;
  }
  LOBYTE(v56[0]) = 0;
  v57 = -1;
  if ((_DWORD)v7 == -1)
  {
LABEL_12:
    LOBYTE(v56[0]) = 0;
    v57 = -1;
    if ((_DWORD)v9 == -1)
      goto LABEL_93;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v9])(&v61, v56, v67);
    v57 = v9;
    if ((_DWORD)v9 == 8 && *(_QWORD *)&v56[0])
      v11 = **(_DWORD **)&v56[0];
    else
      v11 = 0;
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v61, v56);
    if (!v11)
      goto LABEL_93;
    goto LABEL_18;
  }
  v10 = v7;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v7])(&v61, v56, v65);
  v57 = v7;
  if ((_DWORD)v7 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v7])(&v61, v56);
    LODWORD(v9) = v68;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v56[0])
    v11 = **(_DWORD **)&v56[0];
  else
    v11 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v10])(&v61, v56);
  if (!v11)
  {
LABEL_93:
    switch(v4[6])
    {
      case 0:
        if (v4[12])
          goto LABEL_128;
        v47 = *v6;
        if (*v8 > *v6)
          v47 = *v8;
        a2[2] = v47;
        a2[6] = 0.0;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 1:
        if (v4[12] != 1)
          goto LABEL_128;
        LOWORD(_S0) = *(_WORD *)v6;
        LOWORD(_S1) = *(_WORD *)v8;
        __asm
        {
          FCVT            S2, H0
          FCVT            S3, H1
        }
        if (_S3 > _S2)
          _S0 = _S1;
        *((_WORD *)a2 + 4) = LOWORD(_S0);
        *((_DWORD *)a2 + 6) = 1;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 2:
        if (v4[12] != 2)
          goto LABEL_128;
        v51 = *(_QWORD *)v6;
        if (*(double *)v8 > *(double *)v6)
          v51 = *(_QWORD *)v8;
        *((_QWORD *)a2 + 1) = v51;
        *((_DWORD *)a2 + 6) = 2;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 3:
        if (v4[12] != 3)
          goto LABEL_128;
        v52 = *v6;
        if (*(_DWORD *)v8 > *(_DWORD *)v6)
          v52 = *v8;
        a2[2] = v52;
        *((_DWORD *)a2 + 6) = 3;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 4:
        if (v4[12] != 4)
          goto LABEL_128;
        v53 = *v6;
        if (*(_DWORD *)v8 > *(_DWORD *)v6)
          v53 = *v8;
        a2[2] = v53;
        *((_DWORD *)a2 + 6) = 4;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 5:
        if (v4[12] != 5)
          goto LABEL_128;
        v54 = *(_QWORD *)v6;
        if (*(_QWORD *)v8 > *(_QWORD *)v6)
          v54 = *(_QWORD *)v8;
        *((_QWORD *)a2 + 1) = v54;
        *((_DWORD *)a2 + 6) = 5;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      default:
        __break(0xC471u);
        JUMPOUT(0x1825CE6E4);
    }
  }
LABEL_18:
  v55 = a2;
  v12 = 24 * v11;
  v13 = (unsigned int *)WTF::fastMalloc((WTF *)(v12 + 8));
  *v13 = v11;
  v14 = 24;
  bzero(v13 + 2, 24 * ((v12 - 24) / 0x18uLL) + 24);
  v17 = 0;
  LODWORD(v56[0]) = 0;
  v57 = 0;
  LODWORD(v58[0]) = 0;
  v59 = 0;
  while (2)
  {
    if (v66 == 8)
    {
      if (v17 >= *(unsigned int *)v65[0])
        goto LABEL_124;
      v15 = v65[0] + v14 - 16;
      v18 = *(unsigned int *)(v65[0] + v14);
      v19 = v57;
      if (v57 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_27;
      }
      v61 = v56;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v18])(&v61, v56, v15);
    }
    else
    {
      v19 = v57;
      if (v57 == -1)
      {
        if (v66 == -1)
          goto LABEL_32;
      }
      else if (v66 == -1)
      {
LABEL_27:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v19])(&v61, v56, v15);
        v57 = -1;
        goto LABEL_32;
      }
      v61 = v56;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v66])(&v61, v56, v65);
    }
LABEL_32:
    if (v68 == 8)
    {
      if (v17 < *(unsigned int *)v67[0])
      {
        v15 = v67[0] + v14 - 16;
        v20 = *(unsigned int *)(v67[0] + v14);
        v21 = v59;
        if (v59 == -1)
        {
          if ((_DWORD)v20 == -1)
            goto LABEL_44;
        }
        else if ((_DWORD)v20 == -1)
        {
          goto LABEL_39;
        }
        v61 = v58;
        ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v20])(&v61, v58, v15);
        goto LABEL_44;
      }
LABEL_124:
      __break(0xC471u);
      JUMPOUT(0x1825CE63CLL);
    }
    v21 = v59;
    if (v59 == -1)
    {
      if (v68 == -1)
        goto LABEL_44;
LABEL_41:
      v61 = v58;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v68])(&v61, v58, v67);
      goto LABEL_44;
    }
    if (v68 != -1)
      goto LABEL_41;
LABEL_39:
    ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v21])(&v61, v58, v15);
    v59 = -1;
LABEL_44:
    switch(v57)
    {
      case 0u:
        if (v59)
          goto LABEL_128;
        v22 = *(float *)v56;
        if (*(float *)v58 > *(float *)v56)
          v22 = *(float *)v58;
        *(float *)v62 = v22;
        goto LABEL_69;
      case 1u:
        if (v59 != 1)
          goto LABEL_128;
        LOWORD(_S0) = LOWORD(v56[0]);
        LOWORD(_S1) = LOWORD(v58[0]);
        __asm
        {
          FCVT            S2, H0
          FCVT            S3, H1
        }
        if (_S3 > _S2)
          _S0 = _S1;
        LOWORD(v62[0]) = _S0;
        goto LABEL_69;
      case 2u:
        if (v59 != 2)
          goto LABEL_128;
        v23 = v56[0];
        if (v58[0] > v56[0])
          v23 = v58[0];
        v62[0] = v23;
        goto LABEL_69;
      case 3u:
        if (v59 != 3)
          goto LABEL_128;
        v24 = LODWORD(v56[0]);
        if (SLODWORD(v58[0]) > SLODWORD(v56[0]))
          v24 = LODWORD(v58[0]);
        LODWORD(v62[0]) = v24;
        goto LABEL_69;
      case 4u:
        if (v59 != 4)
          goto LABEL_128;
        v25 = LODWORD(v56[0]);
        if (LODWORD(v58[0]) > LODWORD(v56[0]))
          v25 = LODWORD(v58[0]);
        LODWORD(v62[0]) = v25;
        goto LABEL_69;
      case 5u:
        if (v59 != 5)
        {
LABEL_128:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
          __break(0xC471u);
          JUMPOUT(0x1825CE6C0);
        }
        v33 = v56[0];
        if (*(uint64_t *)&v58[0] > *(uint64_t *)&v56[0])
          v33 = v58[0];
        v62[0] = v33;
LABEL_69:
        v63 = v57;
        v64 = 0;
        if (v17 >= *v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1825CE65CLL);
        }
        v60 = (uint64_t)&v13[(unint64_t)v14 / 4 - 4];
        ((void (*)(uint64_t *))off_1E0FD8188[v57])(&v60);
        if (v64 != -1)
          ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v64])(&v60, v62);
        ++v17;
        v14 += 24;
        if (v11 != v17)
          continue;
        v34 = *v13;
        v35 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v34 + 8));
        v37 = v35;
        *v35 = v34;
        if ((_DWORD)v34)
        {
          v38 = v35 + 6;
          v39 = 24 * v34;
          v40 = v13 + 6;
          do
          {
            *((_BYTE *)v38 - 16) = 0;
            v36 = v38 - 4;
            *v38 = -1;
            v41 = *v40;
            if ((_DWORD)v41 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v41])(&v61, v36, v40 - 4);
              *v38 = v41;
            }
            v38 += 6;
            v40 += 6;
            v39 -= 24;
          }
          while (v39);
        }
        *((_QWORD *)v55 + 1) = v37;
        *((_DWORD *)v55 + 6) = 8;
        v55[8] = 0.0;
        if (v59 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v59])(&v61, v58);
        v59 = -1;
        if (v57 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v57])(&v61, v56);
        v42 = *v13;
        if ((_DWORD)v42)
        {
          v43 = 24 * v42;
          v44 = v13 + 6;
          do
          {
            v36 = v44 - 4;
            v45 = *v44;
            if ((_DWORD)v45 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v45])(v56, v36);
            *v44 = -1;
            v44 += 6;
            v43 -= 24;
          }
          while (v43);
        }
        WTF::fastFree((WTF *)v13, v36);
        v46 = v68;
        if (v68 != -1)
LABEL_87:
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v46])(v56, v67);
LABEL_88:
        v68 = -1;
        if (v66 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v66])(v56, v65);
        return;
      default:
        goto LABEL_129;
    }
  }
}

void WGSL::constantMin(int **a1@<X1>, float *a2@<X8>, float _S1@<S1>)
{
  int *v4;
  int v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  double v23;
  int v24;
  int v25;
  double v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float *v55;
  double v56[2];
  unsigned int v57;
  double v58[2];
  unsigned int v59;
  uint64_t v60;
  double *v61;
  double v62[2];
  unsigned int v63;
  int v64;
  _QWORD v65[2];
  int v66;
  _QWORD v67[2];
  unsigned int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = **a1;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CEFACLL);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CEFCCLL);
  }
  v6 = (float *)(v4 + 2);
  LOBYTE(v65[0]) = 0;
  v66 = -1;
  v7 = v4[6];
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v7])(v56, v65, v4 + 2);
    v66 = v7;
  }
  v8 = (float *)(v4 + 8);
  LOBYTE(v67[0]) = 0;
  v68 = -1;
  v9 = v4[12];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v9])(v56, v67, v4 + 8);
    v68 = v9;
    LODWORD(v7) = v66;
  }
  LOBYTE(v56[0]) = 0;
  v57 = -1;
  if ((_DWORD)v7 == -1)
  {
LABEL_12:
    LOBYTE(v56[0]) = 0;
    v57 = -1;
    if ((_DWORD)v9 == -1)
      goto LABEL_93;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v9])(&v61, v56, v67);
    v57 = v9;
    if ((_DWORD)v9 == 8 && *(_QWORD *)&v56[0])
      v11 = **(_DWORD **)&v56[0];
    else
      v11 = 0;
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v61, v56);
    if (!v11)
      goto LABEL_93;
    goto LABEL_18;
  }
  v10 = v7;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v7])(&v61, v56, v65);
  v57 = v7;
  if ((_DWORD)v7 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v7])(&v61, v56);
    LODWORD(v9) = v68;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v56[0])
    v11 = **(_DWORD **)&v56[0];
  else
    v11 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v10])(&v61, v56);
  if (!v11)
  {
LABEL_93:
    switch(v4[6])
    {
      case 0:
        if (v4[12])
          goto LABEL_128;
        v47 = *v6;
        if (*v8 < *v6)
          v47 = *v8;
        a2[2] = v47;
        a2[6] = 0.0;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 1:
        if (v4[12] != 1)
          goto LABEL_128;
        LOWORD(_S0) = *(_WORD *)v6;
        LOWORD(_S1) = *(_WORD *)v8;
        __asm
        {
          FCVT            S2, H0
          FCVT            S3, H1
        }
        if (_S3 < _S2)
          _S0 = _S1;
        *((_WORD *)a2 + 4) = LOWORD(_S0);
        *((_DWORD *)a2 + 6) = 1;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 2:
        if (v4[12] != 2)
          goto LABEL_128;
        v51 = *(_QWORD *)v6;
        if (*(double *)v8 < *(double *)v6)
          v51 = *(_QWORD *)v8;
        *((_QWORD *)a2 + 1) = v51;
        *((_DWORD *)a2 + 6) = 2;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 3:
        if (v4[12] != 3)
          goto LABEL_128;
        v52 = *v6;
        if (*(_DWORD *)v8 < *(_DWORD *)v6)
          v52 = *v8;
        a2[2] = v52;
        *((_DWORD *)a2 + 6) = 3;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 4:
        if (v4[12] != 4)
          goto LABEL_128;
        v53 = *v6;
        if (*(_DWORD *)v8 < *(_DWORD *)v6)
          v53 = *v8;
        a2[2] = v53;
        *((_DWORD *)a2 + 6) = 4;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      case 5:
        if (v4[12] != 5)
          goto LABEL_128;
        v54 = *(_QWORD *)v6;
        if (*(_QWORD *)v8 < *(_QWORD *)v6)
          v54 = *(_QWORD *)v8;
        *((_QWORD *)a2 + 1) = v54;
        *((_DWORD *)a2 + 6) = 5;
        a2[8] = 0.0;
        v46 = v68;
        if (v68 == -1)
          goto LABEL_88;
        goto LABEL_87;
      default:
        __break(0xC471u);
        JUMPOUT(0x1825CF014);
    }
  }
LABEL_18:
  v55 = a2;
  v12 = 24 * v11;
  v13 = (unsigned int *)WTF::fastMalloc((WTF *)(v12 + 8));
  *v13 = v11;
  v14 = 24;
  bzero(v13 + 2, 24 * ((v12 - 24) / 0x18uLL) + 24);
  v17 = 0;
  LODWORD(v56[0]) = 0;
  v57 = 0;
  LODWORD(v58[0]) = 0;
  v59 = 0;
  while (2)
  {
    if (v66 == 8)
    {
      if (v17 >= *(unsigned int *)v65[0])
        goto LABEL_124;
      v15 = v65[0] + v14 - 16;
      v18 = *(unsigned int *)(v65[0] + v14);
      v19 = v57;
      if (v57 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_27;
      }
      v61 = v56;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v18])(&v61, v56, v15);
    }
    else
    {
      v19 = v57;
      if (v57 == -1)
      {
        if (v66 == -1)
          goto LABEL_32;
      }
      else if (v66 == -1)
      {
LABEL_27:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v19])(&v61, v56, v15);
        v57 = -1;
        goto LABEL_32;
      }
      v61 = v56;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v66])(&v61, v56, v65);
    }
LABEL_32:
    if (v68 == 8)
    {
      if (v17 < *(unsigned int *)v67[0])
      {
        v15 = v67[0] + v14 - 16;
        v20 = *(unsigned int *)(v67[0] + v14);
        v21 = v59;
        if (v59 == -1)
        {
          if ((_DWORD)v20 == -1)
            goto LABEL_44;
        }
        else if ((_DWORD)v20 == -1)
        {
          goto LABEL_39;
        }
        v61 = v58;
        ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v20])(&v61, v58, v15);
        goto LABEL_44;
      }
LABEL_124:
      __break(0xC471u);
      JUMPOUT(0x1825CEF6CLL);
    }
    v21 = v59;
    if (v59 == -1)
    {
      if (v68 == -1)
        goto LABEL_44;
LABEL_41:
      v61 = v58;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v68])(&v61, v58, v67);
      goto LABEL_44;
    }
    if (v68 != -1)
      goto LABEL_41;
LABEL_39:
    ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v21])(&v61, v58, v15);
    v59 = -1;
LABEL_44:
    switch(v57)
    {
      case 0u:
        if (v59)
          goto LABEL_128;
        v22 = *(float *)v56;
        if (*(float *)v58 < *(float *)v56)
          v22 = *(float *)v58;
        *(float *)v62 = v22;
        goto LABEL_69;
      case 1u:
        if (v59 != 1)
          goto LABEL_128;
        LOWORD(_S0) = LOWORD(v56[0]);
        LOWORD(_S1) = LOWORD(v58[0]);
        __asm
        {
          FCVT            S2, H0
          FCVT            S3, H1
        }
        if (_S3 < _S2)
          _S0 = _S1;
        LOWORD(v62[0]) = _S0;
        goto LABEL_69;
      case 2u:
        if (v59 != 2)
          goto LABEL_128;
        v23 = v56[0];
        if (v58[0] < v56[0])
          v23 = v58[0];
        v62[0] = v23;
        goto LABEL_69;
      case 3u:
        if (v59 != 3)
          goto LABEL_128;
        v24 = LODWORD(v56[0]);
        if (SLODWORD(v58[0]) < SLODWORD(v56[0]))
          v24 = LODWORD(v58[0]);
        LODWORD(v62[0]) = v24;
        goto LABEL_69;
      case 4u:
        if (v59 != 4)
          goto LABEL_128;
        v25 = LODWORD(v56[0]);
        if (LODWORD(v58[0]) < LODWORD(v56[0]))
          v25 = LODWORD(v58[0]);
        LODWORD(v62[0]) = v25;
        goto LABEL_69;
      case 5u:
        if (v59 != 5)
        {
LABEL_128:
          std::__throw_bad_variant_access[abi:sn180100]();
LABEL_129:
          __break(0xC471u);
          JUMPOUT(0x1825CEFF0);
        }
        v33 = v56[0];
        if (*(uint64_t *)&v58[0] < *(uint64_t *)&v56[0])
          v33 = v58[0];
        v62[0] = v33;
LABEL_69:
        v63 = v57;
        v64 = 0;
        if (v17 >= *v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1825CEF8CLL);
        }
        v60 = (uint64_t)&v13[(unint64_t)v14 / 4 - 4];
        ((void (*)(uint64_t *))off_1E0FD8188[v57])(&v60);
        if (v64 != -1)
          ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v64])(&v60, v62);
        ++v17;
        v14 += 24;
        if (v11 != v17)
          continue;
        v34 = *v13;
        v35 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v34 + 8));
        v37 = v35;
        *v35 = v34;
        if ((_DWORD)v34)
        {
          v38 = v35 + 6;
          v39 = 24 * v34;
          v40 = v13 + 6;
          do
          {
            *((_BYTE *)v38 - 16) = 0;
            v36 = v38 - 4;
            *v38 = -1;
            v41 = *v40;
            if ((_DWORD)v41 != -1)
            {
              ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v41])(&v61, v36, v40 - 4);
              *v38 = v41;
            }
            v38 += 6;
            v40 += 6;
            v39 -= 24;
          }
          while (v39);
        }
        *((_QWORD *)v55 + 1) = v37;
        *((_DWORD *)v55 + 6) = 8;
        v55[8] = 0.0;
        if (v59 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v59])(&v61, v58);
        v59 = -1;
        if (v57 != -1)
          ((void (*)(double **, double *))off_1E0FD7CC8[v57])(&v61, v56);
        v42 = *v13;
        if ((_DWORD)v42)
        {
          v43 = 24 * v42;
          v44 = v13 + 6;
          do
          {
            v36 = v44 - 4;
            v45 = *v44;
            if ((_DWORD)v45 != -1)
              ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v45])(v56, v36);
            *v44 = -1;
            v44 += 6;
            v43 -= 24;
          }
          while (v43);
        }
        WTF::fastFree((WTF *)v13, v36);
        v46 = v68;
        if (v68 != -1)
LABEL_87:
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v46])(v56, v67);
LABEL_88:
        v68 = -1;
        if (v66 != -1)
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v66])(v56, v65);
        return;
      default:
        goto LABEL_129;
    }
  }
}

void WGSL::constantMix(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  float *v2;
  unsigned int v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  double v54[2];
  unsigned int v55;
  double v56[2];
  unsigned int v57;
  double v58[2];
  unsigned int v59;
  uint64_t v60;
  double *v61;
  double v62[2];
  unsigned int v63;
  int v64;
  _QWORD v65[2];
  unsigned int v66;
  _QWORD v67[2];
  unsigned int v68;
  _QWORD v69[2];
  unsigned int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = (float *)*a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CFB90);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CFBB0);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825CFBD0);
  }
  LOBYTE(v65[0]) = 0;
  v66 = -1;
  v4 = *((unsigned int *)v2 + 6);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v4])(v54, v65, v2 + 2);
    v66 = v4;
  }
  v5 = v2 + 8;
  LOBYTE(v67[0]) = 0;
  v68 = -1;
  v6 = *((unsigned int *)v2 + 12);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v6])(v54, v67, v2 + 8);
    v68 = v6;
  }
  v7 = v2 + 14;
  LOBYTE(v69[0]) = 0;
  v70 = -1;
  v8 = *((unsigned int *)v2 + 18);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, float *))off_1E0FD8010[v8])(v54, v69, v2 + 14);
    v70 = v8;
  }
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  v9 = v66;
  if (v66 != -1)
  {
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v66])(&v61, v54, v65);
    v55 = v9;
    if ((_DWORD)v9 == 8)
      goto LABEL_18;
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v61, v54);
  }
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  v9 = v68;
  if (v68 == -1)
    goto LABEL_16;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v68])(&v61, v54, v67);
  v55 = v9;
  if ((_DWORD)v9 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v61, v54);
LABEL_16:
    LOBYTE(v54[0]) = 0;
    v55 = -1;
    v9 = v70;
    if (v70 == -1)
      goto LABEL_108;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v70])(&v61, v54, v69);
    v55 = v9;
    if ((_DWORD)v9 != 8)
      goto LABEL_20;
  }
LABEL_18:
  if (*(_QWORD *)&v54[0])
  {
    v10 = **(_DWORD **)&v54[0];
    goto LABEL_21;
  }
LABEL_20:
  v10 = 0;
LABEL_21:
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v61, v54);
  if (v10)
  {
    v11 = 24 * v10;
    v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
    *v12 = v10;
    v13 = 24;
    bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
    v15 = 0;
    LODWORD(v54[0]) = 0;
    v55 = 0;
    LODWORD(v56[0]) = 0;
    v57 = 0;
    LODWORD(v58[0]) = 0;
    v59 = 0;
    while (2)
    {
      if (v66 == 8)
      {
        if (v15 >= *(unsigned int *)v65[0])
          goto LABEL_133;
        v14 = v65[0] + v13 - 16;
        v16 = *(unsigned int *)(v65[0] + v13);
        v17 = v55;
        if (v55 == -1)
        {
          if ((_DWORD)v16 == -1)
            goto LABEL_36;
        }
        else if ((_DWORD)v16 == -1)
        {
          goto LABEL_31;
        }
        v61 = v54;
        ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v16])(&v61, v54, v14);
      }
      else
      {
        v17 = v55;
        if (v55 == -1)
        {
          if (v66 == -1)
            goto LABEL_36;
        }
        else if (v66 == -1)
        {
LABEL_31:
          ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v17])(&v61, v54, v14);
          v55 = -1;
          goto LABEL_36;
        }
        v61 = v54;
        ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v66])(&v61, v54, v65);
      }
LABEL_36:
      if (v68 == 8)
      {
        if (v15 >= *(unsigned int *)v67[0])
          goto LABEL_133;
        v14 = v67[0] + v13 - 16;
        v18 = *(unsigned int *)(v67[0] + v13);
        v19 = v57;
        if (v57 == -1)
        {
          if ((_DWORD)v18 == -1)
            goto LABEL_48;
        }
        else if ((_DWORD)v18 == -1)
        {
          goto LABEL_43;
        }
        v61 = v56;
        ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v18])(&v61, v56, v14);
        goto LABEL_48;
      }
      v19 = v57;
      if (v57 == -1)
      {
        if (v68 == -1)
          goto LABEL_48;
      }
      else if (v68 == -1)
      {
LABEL_43:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v19])(&v61, v56, v14);
        v57 = -1;
LABEL_48:
        if (v70 != 8)
        {
          v21 = v59;
          if (v59 == -1)
          {
            if (v70 == -1)
              goto LABEL_60;
          }
          else if (v70 == -1)
          {
LABEL_55:
            ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v21])(&v61, v58, v14);
            v59 = -1;
LABEL_60:
            switch(v55)
            {
              case 0u:
                if (v57 || v59)
                  goto LABEL_138;
                *(float *)v62 = (float)(*(float *)v56 * *(float *)v58)
                              + (float)(*(float *)v54 * (float)(1.0 - *(float *)v58));
                v63 = v55;
                v64 = 0;
                if (v15 >= *v12)
                  goto LABEL_134;
                goto LABEL_83;
              case 1u:
                if (v57 != 1 || v59 != 1)
                  goto LABEL_138;
                _H0 = LOWORD(v54[0]);
                _H1 = LOWORD(v56[0]);
                _H2 = LOWORD(v58[0]);
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S2, H2
                  FCVT            S1, H1
                }
                _S0 = (float)(_S1 * _S2) + (float)(_S0 * (float)(1.0 - _S2));
                __asm { FCVT            H0, S0 }
                LOWORD(v62[0]) = LOWORD(_S0);
                v63 = v55;
                v64 = 0;
                if (v15 >= *v12)
                  goto LABEL_134;
                goto LABEL_83;
              case 2u:
                if (v57 != 2 || v59 != 2)
                  goto LABEL_138;
                v62[0] = v56[0] * v58[0] + v54[0] * (1.0 - v58[0]);
                v63 = v55;
                v64 = 0;
                if (v15 >= *v12)
                  goto LABEL_134;
                goto LABEL_83;
              case 3u:
                if (v57 != 3 || v59 != 3)
                  goto LABEL_138;
                goto LABEL_78;
              case 4u:
                if (v57 != 4 || v59 != 4)
                  goto LABEL_138;
LABEL_78:
                LODWORD(v62[0]) = LODWORD(v54[0])
                                - LODWORD(v54[0]) * LODWORD(v58[0])
                                + LODWORD(v58[0]) * LODWORD(v56[0]);
                v63 = v55;
                v64 = 0;
                if (v15 >= *v12)
                  goto LABEL_134;
                goto LABEL_83;
              case 5u:
                if (v57 != 5 || v59 != 5)
                  goto LABEL_138;
                *(_QWORD *)&v62[0] = *(_QWORD *)&v54[0]
                                   - *(_QWORD *)&v54[0] * *(_QWORD *)&v58[0]
                                   + *(_QWORD *)&v58[0] * *(_QWORD *)&v56[0];
                v63 = v55;
                v64 = 0;
                if (v15 >= *v12)
                {
LABEL_134:
                  __break(0xC471u);
                  JUMPOUT(0x1825CFB70);
                }
LABEL_83:
                v60 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
                ((void (*)(uint64_t *))off_1E0FD8188[v55])(&v60);
                if (v64 != -1)
                  ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v64])(&v60, v62);
                ++v15;
                v13 += 24;
                if (v10 != v15)
                  continue;
                v33 = *v12;
                v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
                v36 = v34;
                *v34 = v33;
                if ((_DWORD)v33)
                {
                  v37 = v34 + 6;
                  v38 = 24 * v33;
                  v39 = v12 + 6;
                  do
                  {
                    *((_BYTE *)v37 - 16) = 0;
                    v35 = v37 - 4;
                    *v37 = -1;
                    v40 = *v39;
                    if ((_DWORD)v40 != -1)
                    {
                      ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v40])(&v61, v35, v39 - 4);
                      *v37 = v40;
                    }
                    v37 += 6;
                    v39 += 6;
                    v38 -= 24;
                  }
                  while (v38);
                }
                *(_QWORD *)(a2 + 8) = v36;
                *(_DWORD *)(a2 + 24) = 8;
                *(_DWORD *)(a2 + 32) = 0;
                if (v59 != -1)
                  ((void (*)(double **, double *))off_1E0FD7CC8[v59])(&v61, v58);
                v59 = -1;
                if (v57 != -1)
                  ((void (*)(double **, double *))off_1E0FD7CC8[v57])(&v61, v56);
                v57 = -1;
                if (v55 != -1)
                  ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v61, v54);
                v41 = *v12;
                if ((_DWORD)v41)
                {
                  v42 = 24 * v41;
                  v43 = v12 + 6;
                  do
                  {
                    v35 = v43 - 4;
                    v44 = *v43;
                    if ((_DWORD)v44 != -1)
                      ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v44])(v54, v35);
                    *v43 = -1;
                    v43 += 6;
                    v42 -= 24;
                  }
                  while (v42);
                }
                WTF::fastFree((WTF *)v12, v35);
                v45 = v70;
                if (v70 != -1)
                  goto LABEL_102;
                goto LABEL_103;
              default:
                goto LABEL_139;
            }
          }
          v61 = v58;
          ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v70])(&v61, v58, v69);
          goto LABEL_60;
        }
        if (v15 < *(unsigned int *)v69[0])
        {
          v14 = v69[0] + v13 - 16;
          v20 = *(unsigned int *)(v69[0] + v13);
          v21 = v59;
          if (v59 == -1)
          {
            if ((_DWORD)v20 == -1)
              goto LABEL_60;
          }
          else if ((_DWORD)v20 == -1)
          {
            goto LABEL_55;
          }
          v61 = v58;
          ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v20])(&v61, v58, v14);
          goto LABEL_60;
        }
LABEL_133:
        __break(0xC471u);
        JUMPOUT(0x1825CFB50);
      }
      break;
    }
    v61 = v56;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v68])(&v61, v56, v67);
    goto LABEL_48;
  }
LABEL_108:
  switch(*((_DWORD *)v2 + 6))
  {
    case 0:
      if (*((_DWORD *)v2 + 12) || *((_DWORD *)v2 + 18))
        goto LABEL_138;
      *(float *)(a2 + 8) = (float)(*v5 * *v7) + (float)(v2[2] * (float)(1.0 - *v7));
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
      goto LABEL_102;
    case 1:
      if (*((_DWORD *)v2 + 12) != 1 || *((_DWORD *)v2 + 18) != 1)
        goto LABEL_138;
      _H0 = *((_WORD *)v2 + 4);
      _H1 = *(_WORD *)v5;
      _H2 = *(_WORD *)v7;
      __asm
      {
        FCVT            S0, H0
        FCVT            S2, H2
        FCVT            S1, H1
      }
      _S0 = (float)(_S1 * _S2) + (float)(_S0 * (float)(1.0 - _S2));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(a2 + 8) = LOWORD(_S0);
      *(_DWORD *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
      goto LABEL_102;
    case 2:
      if (*((_DWORD *)v2 + 12) != 2 || *((_DWORD *)v2 + 18) != 2)
        goto LABEL_138;
      *(double *)(a2 + 8) = *(double *)v5 * *(double *)v7 + *((double *)v2 + 1) * (1.0 - *(double *)v7);
      *(_DWORD *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
      goto LABEL_102;
    case 3:
      if (*((_DWORD *)v2 + 12) != 3 || *((_DWORD *)v2 + 18) != 3)
        goto LABEL_138;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)v2 + 2) - *((_DWORD *)v2 + 2) * *(_DWORD *)v7 + *(_DWORD *)v7 * *(_DWORD *)v5;
      *(_DWORD *)(a2 + 24) = 3;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
      goto LABEL_102;
    case 4:
      if (*((_DWORD *)v2 + 12) != 4 || *((_DWORD *)v2 + 18) != 4)
        goto LABEL_138;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)v2 + 2) - *((_DWORD *)v2 + 2) * *(_DWORD *)v7 + *(_DWORD *)v7 * *(_DWORD *)v5;
      *(_DWORD *)(a2 + 24) = 4;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
      goto LABEL_102;
    case 5:
      if (*((_DWORD *)v2 + 12) != 5 || *((_DWORD *)v2 + 18) != 5)
      {
LABEL_138:
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
        __break(0xC471u);
        JUMPOUT(0x1825CFBF4);
      }
      *(_QWORD *)(a2 + 8) = *((_QWORD *)v2 + 1) - *((_QWORD *)v2 + 1) * *(_QWORD *)v7 + *(_QWORD *)v7 * *(_QWORD *)v5;
      *(_DWORD *)(a2 + 24) = 5;
      *(_DWORD *)(a2 + 32) = 0;
      v45 = v70;
      if (v70 == -1)
        goto LABEL_103;
LABEL_102:
      ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v45])(v54, v69);
LABEL_103:
      v70 = -1;
      if (v68 != -1)
        ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v68])(v54, v67);
      v68 = -1;
      if (v66 != -1)
        ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v66])(v54, v65);
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x1825CFC18);
  }
}

uint64_t WGSL::constantModf@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  long double __y[2];
  int v49;
  _QWORD v50[2];
  unsigned int v51;
  uint64_t __x[2];
  int v53;
  unsigned int *v54;
  double v55;
  _BYTE v56[8];
  int v57;
  long double v58;
  uint64_t v59;
  _DWORD v60[4];
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D0368);
  }
  v4 = v3 + 2;
  v5 = v3[6];
  if ((_DWORD)v5 != 8)
  {
    LOBYTE(v55) = 0;
    v57 = -1;
    if ((_DWORD)v5 == -1)
      goto LABEL_81;
    ((void (*)(long double *, double *, _QWORD *))off_1E0FD8010[v5])(__y, &v55, v4);
    v57 = v5;
    switch((_DWORD)v5)
    {
      case 2:
        __x[0] = 0;
        __y[0] = modf(v55, (long double *)__x);
        v35 = 2;
        v49 = 2;
        v50[0] = __x[0];
        break;
      case 1:
        _H0 = LOWORD(v55);
        LODWORD(__x[0]) = 0;
        __asm { FCVT            S0, H0; float }
        _S0 = modff(_S0, (float *)__x);
        __asm { FCVT            H0, S0 }
        _S1 = __x[0];
        __asm { FCVT            H1, S1 }
        LOWORD(__y[0]) = LOWORD(_S0);
        v35 = 1;
        v49 = 1;
        LOWORD(v50[0]) = _S1;
        break;
      case 0:
        LODWORD(__x[0]) = 0;
        LODWORD(__y[0]) = modff(*(float *)&v55, (float *)__x);
        v49 = 0;
        LODWORD(v50[0]) = __x[0];
        v51 = 0;
LABEL_52:
        ((void (*)(uint64_t *, double *))off_1E0FD7CC8[v5])(__x, &v55);
        goto LABEL_53;
      default:
LABEL_81:
        __break(0xC471u);
        JUMPOUT(0x1825D0308);
    }
    v51 = v35;
    goto LABEL_52;
  }
  if (!*v4 || (v6 = *(unsigned int *)*v4, !(_DWORD)v6))
  {
    v54 = 0;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__y, 0, &v54);
    goto LABEL_53;
  }
  v47 = a2;
  v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *v7 = v6;
  bzero(v7 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  v8 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
  *v8 = v6;
  bzero(v8 + 2, 24 * ((24 * v6 - 24) / 0x18uLL) + 24);
  v9 = 0;
  v10 = 0;
  v54 = v8;
  do
  {
    if (v10 >= *(unsigned int *)*v4)
      goto LABEL_81;
    v11 = *v4 + v9 * 4;
    LOBYTE(__x[0]) = 0;
    v53 = -1;
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
      goto LABEL_80;
    ((void (*)(long double *, uint64_t *, uint64_t))off_1E0FD8010[v12])(__y, __x, v11 + 8);
    v53 = v12;
    if ((_DWORD)v12 == 2)
    {
      __y[0] = 0.0;
      v55 = modf(*(long double *)__x, __y);
      v13 = 2;
      v57 = 2;
      v58 = __y[0];
LABEL_15:
      v60[0] = v13;
      goto LABEL_16;
    }
    if ((_DWORD)v12 == 1)
    {
      _H0 = __x[0];
      LODWORD(__y[0]) = 0;
      __asm { FCVT            S0, H0; float }
      _S0 = modff(_S0, (float *)__y);
      __asm { FCVT            H0, S0 }
      _S1 = LODWORD(__y[0]);
      __asm { FCVT            H1, S1 }
      LOWORD(v55) = LOWORD(_S0);
      v13 = 1;
      v57 = 1;
      LOWORD(v58) = _S1;
      goto LABEL_15;
    }
    if ((_DWORD)v12)
    {
LABEL_80:
      __break(0xC471u);
      JUMPOUT(0x1825D0388);
    }
    LODWORD(__y[0]) = 0;
    LODWORD(v55) = modff(*(float *)__x, (float *)__y);
    v57 = 0;
    LODWORD(v58) = LODWORD(__y[0]);
    v60[0] = 0;
LABEL_16:
    ((void (*)(long double *, uint64_t *))off_1E0FD7CC8[v12])(__y, __x);
    v53 = -1;
    if (v10 >= *v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D0328);
    }
    v22 = v7[v9 + 6];
    if ((_DWORD)v22 == -1)
    {
      if (v57 == -1)
        goto LABEL_22;
    }
    else if (v57 == -1)
    {
      ((void (*)(long double *, unsigned int *))off_1E0FD7CC8[v22])(__y, &v7[v9 + 2]);
      v7[v9 + 6] = -1;
      goto LABEL_22;
    }
    *(_QWORD *)&__y[0] = &v7[v9 + 2];
    ((void (*)(long double *))off_1E0FD80E0[v57])(__y);
LABEL_22:
    if (v10 >= *v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D0348);
    }
    v23 = v8[v9 + 6];
    if ((_DWORD)v23 == -1)
    {
      if (v60[0] == -1)
        goto LABEL_30;
LABEL_28:
      *(_QWORD *)&__y[0] = &v8[v9 + 2];
      ((void (*)(long double *))off_1E0FD80E0[v60[0]])(__y);
      v24 = v60[0];
      if (v60[0] == -1)
        goto LABEL_30;
LABEL_29:
      ((void (*)(long double *, long double *))off_1E0FD7CC8[v24])(__y, &v58);
      goto LABEL_30;
    }
    if (v60[0] != -1)
      goto LABEL_28;
    ((void (*)(long double *, unsigned int *))off_1E0FD7CC8[v23])(__y, &v8[v9 + 2]);
    v8[v9 + 6] = -1;
    v24 = v60[0];
    if (v60[0] != -1)
      goto LABEL_29;
LABEL_30:
    v60[0] = -1;
    if (v57 != -1)
      ((void (*)(long double *, double *))off_1E0FD7CC8[v57])(__y, &v55);
    ++v10;
    v9 += 6;
  }
  while (6 * v6 != v9);
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_((uint64_t)__y, v7, &v54);
  v26 = *v8;
  a2 = v47;
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    v28 = v8 + 6;
    do
    {
      v25 = v28 - 4;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v29])(&v55, v25);
      *v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  WTF::fastFree((WTF *)v8, v25);
  v31 = *v7;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v7 + 6;
    do
    {
      v30 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v34])(&v55, v30);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v7, v30);
LABEL_53:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v56[0] = 0;
  LODWORD(v58) = -1;
  v40 = v49;
  if (v49 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, long double *))off_1E0FD8010[v49])(__x, v56, __y);
    LODWORD(v58) = v40;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v59 = __x[0];
  LOBYTE(v60[0]) = 0;
  v61 = -1;
  v41 = v51;
  if (v51 != -1)
  {
    ((void (*)(uint64_t *, _DWORD *, _QWORD *))off_1E0FD8010[v51])(__x, v60, v50);
    v61 = v41;
  }
  WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(__x, (uint64_t)&v55, 2);
  v42 = __x[0];
  __x[0] = 0;
  *(_QWORD *)(a2 + 8) = v42;
  *(_DWORD *)(a2 + 24) = 10;
  *(_DWORD *)(a2 + 32) = 0;
  if (v61 != -1)
    ((void (*)(unsigned int **, _DWORD *))off_1E0FD7CC8[v61])(&v54, v60);
  v61 = -1;
  v43 = (_DWORD *)v59;
  v59 = 0;
  if (!v43)
  {
LABEL_62:
    v44 = LODWORD(v58);
    if (LODWORD(v58) == -1)
      goto LABEL_64;
    goto LABEL_63;
  }
  if (*v43 != 2)
  {
    *v43 -= 2;
    goto LABEL_62;
  }
  WTF::StringImpl::destroy();
  v44 = LODWORD(v58);
  if (LODWORD(v58) != -1)
LABEL_63:
    ((void (*)(unsigned int **, _BYTE *))off_1E0FD7CC8[v44])(&v54, v56);
LABEL_64:
  LODWORD(v58) = -1;
  result = *(_QWORD *)&v55;
  v55 = 0.0;
  if (!result)
    goto LABEL_67;
  if (*(_DWORD *)result == 2)
  {
    result = WTF::StringImpl::destroy();
    v46 = v51;
    if (v51 != -1)
      goto LABEL_68;
  }
  else
  {
    *(_DWORD *)result -= 2;
LABEL_67:
    v46 = v51;
    if (v51 != -1)
LABEL_68:
      result = ((uint64_t (*)(double *, _QWORD *))off_1E0FD7CC8[v46])(&v55, v50);
  }
  v51 = -1;
  if (v49 != -1)
    return ((uint64_t (*)(double *, long double *))off_1E0FD7CC8[v49])(&v55, __y);
  return result;
}

uint64_t WGSL::constantNormalize@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t result;
  int *v20;
  _BYTE v21[16];
  int v22;
  uint64_t v23;
  _BYTE v24[16];
  int v25;
  _BYTE v26[16];
  int v27;
  char v28[8];
  _QWORD v29[2];
  int v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 48) != 1)
    goto LABEL_40;
  v4 = (_DWORD *)*a2;
  if (!*(_DWORD *)*a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D06DCLL);
  }
  WGSL::constantLength(*(_QWORD *)a1, a2, (uint64_t)v28);
  if (v31)
  {
    if (v31 == 1)
    {
      v5 = v29[0];
      if (v29[0])
        *(_DWORD *)v29[0] += 2;
      *(_QWORD *)(a3 + 8) = v5;
      v6 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v6])(v24, v29);
    }
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v21[0] = 0;
  v22 = -1;
  v7 = v30;
  if (v30 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, _QWORD *))off_1E0FD7D20[v30])(v24, v21, v29);
    v22 = v7;
  }
  v24[0] = 0;
  v25 = -1;
  v8 = v4[6];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _DWORD *))off_1E0FD8010[v8])(&v23, v24, v4 + 2);
    v25 = v8;
    v7 = v22;
  }
  v26[0] = 0;
  v27 = -1;
  if (v7 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD8010[v7])(&v23, v26, v21);
    v27 = v7;
  }
  v9 = WTF::fastMalloc((WTF *)0x38);
  v10 = (unsigned int *)v9;
  *(_DWORD *)v9 = 2;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  v20 = (int *)v9;
  if (v25 == -1)
  {
    *(_DWORD *)(v9 + 24) = -1;
    v12 = (unsigned int *)(v9 + 32);
    v13 = v27;
    if (v27 == -1)
    {
      v11 = 0;
LABEL_21:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v11])(&v23, v12);
      v10[12] = -1;
      goto LABEL_24;
    }
  }
  else
  {
    v23 = v9 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v25])(&v23);
    if (*v10 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D06FCLL);
    }
    v11 = v10[12];
    v12 = v10 + 8;
    v13 = v27;
    if (v11 == -1)
    {
      if (v27 == -1)
        goto LABEL_24;
    }
    else if (v27 == -1)
    {
      goto LABEL_21;
    }
  }
  v23 = (uint64_t)v12;
  ((void (*)(uint64_t *))off_1E0FD80E0[v13])(&v23);
LABEL_24:
  WGSL::constantDivide(&v20, a3);
  v15 = *v10;
  if ((_DWORD)v15)
  {
    v16 = 24 * v15;
    v17 = v10 + 6;
    do
    {
      v14 = v17 - 4;
      v18 = *v17;
      if ((_DWORD)v18 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v18])(&v23, v14);
      *v17 = -1;
      v17 += 6;
      v16 -= 24;
    }
    while (v16);
  }
  result = WTF::fastFree((WTF *)v10, v14);
  if (v27 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v27])(&v23, v26);
  v27 = -1;
  if (v25 != -1)
    result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v25])(&v23, v24);
  if (v22 != -1)
    result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v22])(v24, v21);
  v6 = v31;
  if (v31 != -1)
    return ((uint64_t (*)(_BYTE *, _QWORD *))off_1E0FD7DD0[v6])(v24, v29);
  return result;
}

void WGSL::constantPow(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  long double *v5;
  uint64_t v6;
  long double *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v49;
  long double __x[2];
  unsigned int v51;
  long double __y[2];
  unsigned int v53;
  uint64_t v54;
  long double *v55;
  long double v56[2];
  int v57;
  int v58;
  _QWORD v59[2];
  int v60;
  _QWORD v61[2];
  unsigned int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D0E5CLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D0E7CLL);
  }
  v5 = (long double *)(v3 + 2);
  LOBYTE(v59[0]) = 0;
  v60 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v6])(__x, v59, v3 + 2);
    v60 = v6;
  }
  v7 = (long double *)(v3 + 8);
  LOBYTE(v61[0]) = 0;
  v62 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(long double *, _QWORD *, int *))off_1E0FD8010[v8])(__x, v61, v3 + 8);
    v62 = v8;
    LODWORD(v6) = v60;
  }
  LOBYTE(__x[0]) = 0;
  v51 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(__x[0]) = 0;
    v51 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v8])(&v55, __x, v61), v51 = v8, (_DWORD)v8 != 8)|| !*(_QWORD *)&__x[0]? (v10 = 0): (v10 = **(_DWORD **)&__x[0]), ((void (*)(long double **, long double *))off_1E0FD7CC8[v8])(&v55, __x), !v10))
    {
LABEL_74:
      v43 = v3[6];
      if (v43 == 2)
      {
        if (v3[12] == 2)
        {
          *(long double *)(a2 + 8) = pow(*v5, *v7);
          *(_DWORD *)(a2 + 24) = 2;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
LABEL_85:
          ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v42])(__x, v61);
          goto LABEL_86;
        }
      }
      else if (v43 == 1)
      {
        if (v3[12] == 1)
        {
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S0, H0; float
            FCVT            S1, H1; float
          }
          _S0 = powf(_S0, _S1);
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a2 + 8) = LOWORD(_S0);
          *(_DWORD *)(a2 + 24) = 1;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
      else
      {
        if (v43)
        {
LABEL_95:
          __break(0xC471u);
          JUMPOUT(0x1825D0E1CLL);
        }
        if (!v3[12])
        {
          *(float *)(a2 + 8) = powf(*(float *)v5, *(float *)v7);
          *(_DWORD *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 32) = 0;
          v42 = v62;
          if (v62 == -1)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
LABEL_93:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x1825D0EA0);
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(long double **, long double *, _QWORD *))off_1E0FD8010[v6])(&v55, __x, v59);
  v51 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v6])(&v55, __x);
    LODWORD(v8) = v62;
    goto LABEL_12;
  }
  if (*(_QWORD *)&__x[0])
    v10 = **(_DWORD **)&__x[0];
  else
    v10 = 0;
  ((void (*)(long double **, long double *))off_1E0FD7CC8[v9])(&v55, __x);
  if (!v10)
    goto LABEL_74;
LABEL_18:
  v49 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  v13 = 24;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v15 = 0;
  LODWORD(__x[0]) = 0;
  v51 = 0;
  LODWORD(__y[0]) = 0;
  v53 = 0;
  do
  {
    if (v60 == 8)
    {
      if (v15 >= *(unsigned int *)v59[0])
        goto LABEL_95;
      v14 = v59[0] + v13 - 16;
      v16 = *(unsigned int *)(v59[0] + v13);
      v17 = v51;
      if (v51 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_32;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_27;
      }
      v55 = __x;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v16])(&v55, __x, v14);
    }
    else
    {
      v17 = v51;
      if (v51 == -1)
      {
        if (v60 == -1)
          goto LABEL_32;
      }
      else if (v60 == -1)
      {
LABEL_27:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v17])(&v55, __x, v14);
        v51 = -1;
        goto LABEL_32;
      }
      v55 = __x;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v60])(&v55, __x, v59);
    }
LABEL_32:
    if (v62 == 8)
    {
      if (v15 >= *(unsigned int *)v61[0])
        goto LABEL_95;
      v14 = v61[0] + v13 - 16;
      v18 = *(unsigned int *)(v61[0] + v13);
      v19 = v53;
      if (v53 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_44;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_39;
      }
      v55 = __y;
      ((void (*)(long double **, long double *, uint64_t))off_1E0FD80E0[v18])(&v55, __y, v14);
    }
    else
    {
      v19 = v53;
      if (v53 == -1)
      {
        if (v62 == -1)
          goto LABEL_44;
      }
      else if (v62 == -1)
      {
LABEL_39:
        ((void (*)(long double **, long double *, uint64_t))off_1E0FD7CC8[v19])(&v55, __y, v14);
        v53 = -1;
        goto LABEL_44;
      }
      v55 = __y;
      ((void (*)(long double **, long double *, _QWORD *))off_1E0FD80E0[v62])(&v55, __y, v61);
    }
LABEL_44:
    v20 = v51;
    if (v51)
    {
      if (v51 == 1)
      {
        if (v53 != 1)
          goto LABEL_93;
        _H0 = LOWORD(__x[0]);
        _H1 = LOWORD(__y[0]);
        __asm
        {
          FCVT            S0, H0; float
          FCVT            S1, H1; float
        }
        _S0 = powf(_S0, _S1);
        __asm { FCVT            H0, S0 }
        LOWORD(v56[0]) = LOWORD(_S0);
      }
      else
      {
        if (v51 != 2)
          goto LABEL_94;
        if (v53 != 2)
          goto LABEL_93;
        v56[0] = pow(__x[0], __y[0]);
      }
    }
    else
    {
      if (v53)
        goto LABEL_93;
      LODWORD(v56[0]) = powf(*(float *)__x, *(float *)__y);
    }
    v57 = v20;
    v58 = 0;
    if (v15 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D0E3CLL);
    }
    v54 = (uint64_t)&v12[(unint64_t)v13 / 4 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v20])(&v54);
    if (v58 != -1)
      ((void (*)(uint64_t *, long double *))off_1E0FD7DD0[v58])(&v54, v56);
    ++v15;
    v13 += 24;
  }
  while (v10 != v15);
  v30 = *v12;
  v31 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v30 + 8));
  v33 = v31;
  *v31 = v30;
  if ((_DWORD)v30)
  {
    v34 = v31 + 6;
    v35 = 24 * v30;
    v36 = v12 + 6;
    do
    {
      *((_BYTE *)v34 - 16) = 0;
      v32 = v34 - 4;
      *v34 = -1;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
      {
        ((void (*)(long double **, _DWORD *, unsigned int *))off_1E0FD8010[v37])(&v55, v32, v36 - 4);
        *v34 = v37;
      }
      v34 += 6;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  *(_QWORD *)(v49 + 8) = v33;
  *(_DWORD *)(v49 + 24) = 8;
  *(_DWORD *)(v49 + 32) = 0;
  if (v53 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v53])(&v55, __y);
  v53 = -1;
  if (v51 != -1)
    ((void (*)(long double **, long double *))off_1E0FD7CC8[v51])(&v55, __x);
  v38 = *v12;
  if ((_DWORD)v38)
  {
    v39 = 24 * v38;
    v40 = v12 + 6;
    do
    {
      v32 = v40 - 4;
      v41 = *v40;
      if ((_DWORD)v41 != -1)
        ((void (*)(long double *, _DWORD *))off_1E0FD7CC8[v41])(__x, v32);
      *v40 = -1;
      v40 += 6;
      v39 -= 24;
    }
    while (v39);
  }
  WTF::fastFree((WTF *)v12, v32);
  v42 = v62;
  if (v62 != -1)
    goto LABEL_85;
LABEL_86:
  v62 = -1;
  if (v60 != -1)
    ((void (*)(long double *, _QWORD *))off_1E0FD7CC8[v60])(__x, v59);
}

uint64_t WGSL::constantQuantizeToF16@<X0>(float **a1@<X1>, uint64_t a2@<X8>)
{
  float *v3;
  uint64_t v4;
  uint64_t (*v5)();
  unsigned int v6;
  WTF::String *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::String *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL4 v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  char v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t result;
  int v50;
  _BOOL4 v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56[2];
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  int v62;
  unsigned int v63;
  _QWORD v64[2];
  int v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D15DCLL);
  }
  LOBYTE(v64[0]) = 0;
  v65 = -1;
  v4 = *((unsigned int *)v3 + 6);
  if ((_DWORD)v4 == -1)
    goto LABEL_109;
  v5 = off_1E0FD8010[v4];
  ((void (*)(uint64_t **, _QWORD *, float *))v5)(&v66, v64, v3 + 2);
  v65 = v4;
  LOBYTE(v66) = 0;
  v68 = -1;
  ((void (*)(uint64_t *, uint64_t **, _QWORD *))v5)(&v60, &v66, v64);
  v6 = 0;
  v68 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v66)
      v6 = *(_DWORD *)v66;
    else
      v6 = 0;
  }
  v7 = (WTF::String *)((uint64_t (*)(uint64_t *, uint64_t **))off_1E0FD7CC8[v4])(&v60, &v66);
  if (!v6)
  {
    if (!*((_DWORD *)v3 + 6))
    {
      _S0 = v3[2];
      if (_S0 <= 65504.0 && _S0 >= -65504.0)
      {
        v50 = 0;
        __asm
        {
          FCVT            H0, S0
          FCVT            S0, H0
        }
        LODWORD(v67) = _S0;
        v69 = 0;
        v70 = 0;
LABEL_98:
        *(_BYTE *)(a2 + 8) = 0;
        v55 = a2 + 8;
        *(_DWORD *)(v55 + 24) = -1;
        result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1E0FD7DE0[v50])(&v60, v55, &v67);
        *(_DWORD *)(v55 + 24) = v50;
        if (v70 != -1)
          result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E0FD7DD0[v70])(&v60, &v67);
        goto LABEL_100;
      }
      WTF::String::number(v7, _S0);
      if (v56[0])
      {
        v43 = *(_DWORD *)(v56[0] + 4);
        if (v43 < 0)
          goto LABEL_112;
        _VF = __OFADD__(v43, 31);
        v44 = v43 + 31;
        if (_VF)
          goto LABEL_112;
      }
      else
      {
        v44 = 31;
        if (v42)
          goto LABEL_112;
      }
      if (!__OFADD__(v44, 6))
      {
        v53 = !v56[0] || (*(_BYTE *)(v56[0] + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v44 + 6), v53, (int8x16_t *)"value ", 6u, v56[0], (int8x16_t *)" cannot be represented as 'f16'", 0x1Fu, &v60);
        if (v60)
        {
          v67 = v60;
          v70 = 1;
          v60 = 0;
          v54 = (_DWORD *)v56[0];
          v56[0] = 0;
          if (v54)
          {
            if (*v54 == 2)
              WTF::StringImpl::destroy();
            else
              *v54 -= 2;
          }
          v50 = 1;
          goto LABEL_98;
        }
LABEL_113:
        __break(0xC471u);
LABEL_114:
        JUMPOUT(0x1825D159CLL);
      }
LABEL_112:
      v60 = 0;
      goto LABEL_113;
    }
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x1825D1640);
  }
  v8 = v6;
  v9 = 24 * v6;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v6;
  v11 = (uint64_t *)(v10 + 2);
  v12 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v15 = 0;
  LODWORD(v56[0]) = 0;
  v57 = 0;
  do
  {
    if (v65 != 8)
    {
      v17 = v57;
      if (v57 == -1)
      {
        if (v65 == -1)
          goto LABEL_108;
      }
      else if (v65 == -1)
      {
        goto LABEL_107;
      }
      v66 = v56;
      v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, _QWORD *))off_1E0FD80E0[v65])(&v66, v56, v64);
      goto LABEL_21;
    }
    if (v15 >= *(unsigned int *)v64[0])
    {
      __break(0xC471u);
      goto LABEL_114;
    }
    v14 = v64[0] + v12 * 4 - 16;
    v16 = *(unsigned int *)(v64[0] + v12 * 4);
    v17 = v57;
    if (v57 == -1)
    {
      if ((_DWORD)v16 == -1)
        goto LABEL_21;
    }
    else if ((_DWORD)v16 == -1)
    {
      goto LABEL_107;
    }
    v66 = v56;
    v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, uint64_t))off_1E0FD80E0[v16])(&v66, v56, v14);
LABEL_21:
    if (v57)
      goto LABEL_108;
    _S0 = v56[0];
    if (*(float *)v56 > 65504.0 || *(float *)v56 < -65504.0)
    {
      WTF::String::number(v13, *(float *)v56);
      if (v58)
      {
        v21 = *(_DWORD *)(v58 + 4);
        if (v21 < 0 || (_VF = __OFADD__(v21, 31), v22 = v21 + 31, _VF))
        {
LABEL_110:
          v59 = 0;
LABEL_111:
          __break(0xC471u);
          JUMPOUT(0x1825D1650);
        }
      }
      else
      {
        v22 = 31;
        if (_VF)
          goto LABEL_110;
      }
      if (__OFADD__(v22, 6))
        goto LABEL_110;
      v28 = !v58 || (*(_BYTE *)(v58 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v22 + 6), v28, (int8x16_t *)"value ", 6u, v58, (int8x16_t *)" cannot be represented as 'f16'", 0x1Fu, &v59);
      if (!v59)
        goto LABEL_111;
      v67 = v59;
      v70 = 1;
      v29 = (_DWORD *)v58;
      v58 = 0;
      v59 = 0;
      if (v29)
      {
        if (*v29 == 2)
          WTF::StringImpl::destroy();
        else
          *v29 -= 2;
      }
      v23 = 1;
    }
    else
    {
      v23 = 0;
      __asm
      {
        FCVT            H0, S0
        FCVT            S0, H0
      }
      LODWORD(v67) = _S0;
      v69 = 0;
      v70 = 0;
    }
    LOBYTE(v61[0]) = 0;
    v63 = -1;
    v13 = (WTF::String *)((uint64_t (*)(uint64_t *, _QWORD *, uint64_t *))off_1E0FD7DE0[v23])(&v59, v61, &v67);
    v63 = v23;
    if (v70 != -1)
    {
      v13 = (WTF::String *)((uint64_t (*)(uint64_t *, uint64_t *))off_1E0FD7DD0[v70])(&v59, &v67);
      v23 = v63;
    }
    if (v23)
    {
      if (v23 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_107:
        ((void (*)(uint64_t **, uint64_t *, uint64_t))off_1E0FD7CC8[v17])(&v66, v56, v14);
        v57 = -1;
LABEL_108:
        __break(0xC471u);
        JUMPOUT(0x1825D1620);
      }
      v31 = v61[0];
      if (v61[0])
        *(_DWORD *)v61[0] += 2;
      *(_QWORD *)(a2 + 8) = v31;
      *(_DWORD *)(a2 + 32) = 1;
    }
    else
    {
      if (v15 >= *v10)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D15BCLL);
      }
      v32 = v10[v12];
      if ((_DWORD)v32 == -1)
      {
        if (v62 == -1)
          goto LABEL_57;
      }
      else if (v62 == -1)
      {
        v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *))off_1E0FD7CC8[v32])(&v66, v11);
        v10[v12] = -1;
        goto LABEL_57;
      }
      v66 = v11;
      v13 = (WTF::String *)((uint64_t (*)(uint64_t **, uint64_t *, _QWORD *))off_1E0FD8188[v62])(&v66, v11, v61);
    }
LABEL_57:
    if (v63 != -1)
      v13 = (WTF::String *)((uint64_t (*)(uint64_t **, _QWORD *))off_1E0FD7DD0[v63])(&v66, v61);
    if (v23)
      goto LABEL_78;
    ++v15;
    v11 += 3;
    v12 += 6;
  }
  while (v8 != v15);
  v33 = *v10;
  v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
  v35 = v34;
  *v34 = v33;
  if ((_DWORD)v33)
  {
    v36 = v34 + 6;
    v37 = 24 * v33;
    v38 = v10 + 6;
    do
    {
      *((_BYTE *)v36 - 16) = 0;
      v30 = v36 - 4;
      *v36 = -1;
      v39 = *v38;
      if ((_DWORD)v39 != -1)
      {
        ((void (*)(uint64_t **, _DWORD *, unsigned int *))off_1E0FD8010[v39])(&v66, v30, v38 - 4);
        *v36 = v39;
      }
      v36 += 6;
      v38 += 6;
      v37 -= 24;
    }
    while (v37);
  }
  *(_QWORD *)(a2 + 8) = v35;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
LABEL_78:
  if (v57 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E0FD7CC8[v57])(&v66, v56);
  v45 = *v10;
  if ((_DWORD)v45)
  {
    v46 = 24 * v45;
    v47 = v10 + 6;
    do
    {
      v30 = v47 - 4;
      v48 = *v47;
      if ((_DWORD)v48 != -1)
        ((void (*)(uint64_t **, _DWORD *))off_1E0FD7CC8[v48])(&v66, v30);
      *v47 = -1;
      v47 += 6;
      v46 -= 24;
    }
    while (v46);
  }
  result = WTF::fastFree((WTF *)v10, v30);
LABEL_100:
  if (v65 != -1)
    return ((uint64_t (*)(uint64_t **, _QWORD *))off_1E0FD7CC8[v65])(&v66, v64);
  return result;
}

uint64_t WGSL::constantRadians@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  float v38;
  uint64_t v42;
  double v43[2];
  unsigned int v44;
  uint64_t v45;
  double *v46;
  double v47;
  int v48;
  unsigned int v49;
  int v50;
  _QWORD v51[2];
  unsigned int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D1B64);
  }
  LOBYTE(v51[0]) = 0;
  v52 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v46, v51, v3 + 2);
  v52 = v4;
  LOBYTE(v46) = 0;
  v48 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v43, &v46, v51);
  v7 = 0;
  v48 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v46)
      v7 = *(_DWORD *)v46;
    else
      v7 = 0;
  }
  result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v4])(v43, &v46);
  if (!v7)
  {
    v37 = v3[6];
    switch(v37)
    {
      case 2:
        *(double *)(a2 + 8) = *v5 * 0.0174532925;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 0.0174532925;
        __asm { FCVT            H0, D0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
      case 0:
        v38 = *(float *)v5 * 0.0174532925;
        *(float *)(a2 + 8) = v38;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v36 = v52;
        if (v52 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v36])(&v46, v51);
        return result;
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825D1BC4);
  }
  v42 = a2;
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v13 = 0;
  LODWORD(v43[0]) = 0;
  v44 = 0;
  do
  {
    if (v52 == 8)
    {
      if (v13 >= *(unsigned int *)v51[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825D1B44);
      }
      v12 = v51[0] + v11 * 4 - 16;
      v14 = *(unsigned int *)(v51[0] + v11 * 4);
      v15 = v44;
      if (v44 == -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v14 == -1)
      {
        goto LABEL_58;
      }
      v46 = v43;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v14])(&v46, v43, v12);
    }
    else
    {
      v15 = v44;
      if (v44 == -1)
      {
        if (v52 == -1)
          goto LABEL_59;
      }
      else if (v52 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v15])(&v46, v43, v12);
        v44 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825D1BA4);
      }
      v46 = v43;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v52])(&v46, v43, v51);
    }
LABEL_22:
    if (v44)
    {
      if (v44 == 1)
      {
        _H0 = LOWORD(v43[0]);
        __asm { FCVT            D0, H0 }
        _D0 = _D0 * 0.0174532925;
        __asm { FCVT            H0, D0 }
        LOWORD(v47) = LOWORD(_D0);
      }
      else
      {
        if (v44 != 2)
          goto LABEL_59;
        v47 = v43[0] * 0.0174532925;
      }
    }
    else
    {
      v16 = *(float *)v43 * 0.0174532925;
      *(float *)&v47 = v16;
    }
    v49 = v44;
    v50 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D1B24);
    }
    v45 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v44])(&v45);
    if (v50 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v50])(&v45, &v47);
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  v24 = *v10;
  v25 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v24 + 8));
  v27 = v25;
  *v25 = v24;
  if ((_DWORD)v24)
  {
    v28 = v25 + 6;
    v29 = 24 * v24;
    v30 = v10 + 6;
    do
    {
      *((_BYTE *)v28 - 16) = 0;
      v26 = v28 - 4;
      *v28 = -1;
      v31 = *v30;
      if ((_DWORD)v31 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v31])(&v46, v26, v30 - 4);
        *v28 = v31;
      }
      v28 += 6;
      v30 += 6;
      v29 -= 24;
    }
    while (v29);
  }
  *(_QWORD *)(v42 + 8) = v27;
  *(_DWORD *)(v42 + 24) = 8;
  *(_DWORD *)(v42 + 32) = 0;
  if (v44 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v44])(&v46, v43);
  v32 = *v10;
  if ((_DWORD)v32)
  {
    v33 = 24 * v32;
    v34 = v10 + 6;
    do
    {
      v26 = v34 - 4;
      v35 = *v34;
      if ((_DWORD)v35 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v35])(&v46, v26);
      *v34 = -1;
      v34 += 6;
      v33 -= 24;
    }
    while (v33);
  }
  result = WTF::fastFree((WTF *)v10, v26);
  v36 = v52;
  if (v52 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v36])(&v46, v51);
  return result;
}

uint64_t WGSL::constantReflect@<X0>(_DWORD *a1@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v5;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  int v68;
  _DWORD *v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  int v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  int v110;
  _DWORD *v111;
  uint64_t v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  int *v122;
  int v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  int *v135;
  int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;
  int *v149;
  int v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t result;
  _DWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  _DWORD *v166;
  int *v167;
  _QWORD v168[2];
  int v169;
  int *v170[2];
  int v171;
  _BYTE v172[16];
  int v173;
  int *v174;
  uint64_t v175;
  _QWORD v176[2];
  int v177;
  int v178;
  uint64_t v179;
  _QWORD v180[2];
  unsigned int v181;
  int v182;
  _QWORD v183[2];
  int v184;
  _BYTE v185[16];
  int v186;
  uint64_t v187;
  _QWORD v188[2];
  unsigned int v189;
  int v190;
  uint64_t v191;

  v191 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = **a2;
  if (!v5)
  {
LABEL_361:
    __break(0xC471u);
    JUMPOUT(0x1825D3958);
  }
  if (v5 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D3978);
  }
  if (a1[12] != 1)
    goto LABEL_360;
  v7 = *(unsigned __int8 **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 48))
    goto LABEL_360;
  v8 = *v7;
  v166 = v4 + 2;
  if (v8 == 3)
  {
    LOBYTE(v183[0]) = 0;
    v184 = -1;
    v16 = v4[12];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, int *))off_1E0FD8010[v16])(&v187, v183, v4 + 8);
      v184 = v16;
    }
    v185[0] = 0;
    v186 = -1;
    v17 = v4[6];
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, int *))off_1E0FD8010[v17])(&v187, v185, v4 + 2);
      v186 = v17;
    }
    v18 = WTF::fastMalloc((WTF *)0x38);
    v19 = (unsigned int *)v18;
    *(_OWORD *)(v18 + 8) = 0u;
    *(_DWORD *)v18 = 2;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    v179 = v18;
    if (v184 == -1)
    {
      *(_DWORD *)(v18 + 24) = -1;
      v21 = (unsigned int *)(v18 + 32);
      v22 = v186;
      if (v186 == -1)
      {
        v20 = 0;
LABEL_40:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v20])(&v187, v21);
        v19[12] = -1;
        goto LABEL_64;
      }
    }
    else
    {
      v187 = v18 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v187);
      if (*v19 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D39B8);
      }
      v20 = v19[12];
      v21 = v19 + 8;
      v22 = v186;
      if (v20 == -1)
      {
        if (v186 == -1)
          goto LABEL_64;
      }
      else if (v186 == -1)
      {
        goto LABEL_40;
      }
    }
    v187 = (uint64_t)v21;
    ((void (*)(uint64_t *))off_1E0FD80E0[v22])(&v187);
LABEL_64:
    WGSL::constantDot((uint64_t)v7, (uint64_t)&v187);
    v39 = *v19;
    if ((_DWORD)v39)
    {
      v40 = 24 * v39;
      v41 = v19 + 6;
      do
      {
        v38 = v41 - 4;
        v42 = *v41;
        if ((_DWORD)v42 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v42])(&v175, v38);
        *v41 = -1;
        v41 += 6;
        v40 -= 24;
      }
      while (v40);
    }
    WTF::fastFree((WTF *)v19, v38);
    if (v186 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
    v43 = v190;
    if (v190)
      goto LABEL_88;
    v172[0] = 0;
    v173 = -1;
    v44 = v189;
    if (v189 == -1)
    {
      v183[0] = 0x4000000000000000;
      v184 = 2;
      v185[0] = 0;
      v186 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v189])(v183, v172, v188);
      v173 = v44;
      v183[0] = 0x4000000000000000;
      v184 = 2;
      v185[0] = 0;
      v186 = -1;
      ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD8010[v44])(&v175, v185, v172);
      v186 = v44;
    }
    v59 = WTF::fastMalloc((WTF *)0x38);
    v60 = (unsigned int *)v59;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_DWORD *)v59 = 2;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    v170[0] = (int *)v59;
    if (v184 == -1)
    {
      *(_DWORD *)(v59 + 24) = -1;
      v62 = (unsigned int *)(v59 + 32);
      v63 = v186;
      if (v186 == -1)
      {
        v61 = 0;
LABEL_116:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v61])(&v175, v62);
        v60[12] = -1;
        goto LABEL_126;
      }
    }
    else
    {
      v175 = v59 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v175);
      if (*v60 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3A18);
      }
      v61 = v60[12];
      v62 = v60 + 8;
      v63 = v186;
      if (v61 == -1)
      {
        if (v186 == -1)
          goto LABEL_126;
      }
      else if (v186 == -1)
      {
        goto LABEL_116;
      }
    }
    v175 = (uint64_t)v62;
    ((void (*)(uint64_t *))off_1E0FD80E0[v63])(&v175);
LABEL_126:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    v72 = *v60;
    if ((_DWORD)v72)
    {
      v73 = 24 * v72;
      v74 = v60 + 6;
      do
      {
        v71 = v74 - 4;
        v75 = *v74;
        if ((_DWORD)v75 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v75])(&v175, v71);
        *v74 = -1;
        v74 += 6;
        v73 -= 24;
      }
      while (v73);
    }
    WTF::fastFree((WTF *)v60, v71);
    if (v186 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
    v76 = v182;
    if (v182)
      goto LABEL_150;
    LOBYTE(v170[0]) = 0;
    v171 = -1;
    v77 = v181;
    if (v181 == -1)
    {
      LOBYTE(v183[0]) = 0;
      v184 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v181])(v183, v170, v180);
      v171 = v77;
      LOBYTE(v183[0]) = 0;
      v184 = -1;
      ((void (*)(_QWORD *, _QWORD *, int **))off_1E0FD8010[v77])(v168, v183, v170);
      v184 = v77;
    }
    v185[0] = 0;
    v186 = -1;
    v86 = v4[12];
    if ((_DWORD)v86 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, int *))off_1E0FD8010[v86])(v168, v185, v4 + 8);
      v186 = v86;
    }
    v87 = WTF::fastMalloc((WTF *)0x38);
    v88 = (unsigned int *)v87;
    *(_OWORD *)(v87 + 8) = 0u;
    *(_DWORD *)v87 = 2;
    *(_OWORD *)(v87 + 24) = 0u;
    *(_OWORD *)(v87 + 40) = 0u;
    v174 = (int *)v87;
    if (v184 == -1)
    {
      *(_DWORD *)(v87 + 24) = -1;
      v90 = (unsigned int *)(v87 + 32);
      v91 = v186;
      if (v186 == -1)
      {
        v89 = 0;
LABEL_174:
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v89])(v168, v90);
        v88[12] = -1;
        goto LABEL_208;
      }
    }
    else
    {
      v168[0] = v87 + 8;
      ((void (*)(_QWORD *))off_1E0FD80E0[v184])(v168);
      if (*v88 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3A58);
      }
      v89 = v88[12];
      v90 = v88 + 8;
      v91 = v186;
      if (v89 == -1)
      {
        if (v186 == -1)
          goto LABEL_208;
      }
      else if (v186 == -1)
      {
        goto LABEL_174;
      }
    }
    v168[0] = v90;
    ((void (*)(_QWORD *))off_1E0FD80E0[v91])(v168);
LABEL_208:
    WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
    v112 = *v88;
    if ((_DWORD)v112)
    {
      v113 = 24 * v112;
      v114 = v88 + 6;
      do
      {
        v111 = v114 - 4;
        v115 = *v114;
        if ((_DWORD)v115 != -1)
          ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v115])(v168, v111);
        *v114 = -1;
        v114 += 6;
        v113 -= 24;
      }
      while (v113);
    }
    WTF::fastFree((WTF *)v88, v111);
    if (v186 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v186])(v168, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v184])(v168, v183);
    v116 = v178;
    if (v178)
      goto LABEL_241;
    LOBYTE(v168[0]) = 0;
    v169 = -1;
    v117 = v177;
    if (v177 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD7D20[v177])(v183, v168, v176);
      v169 = v117;
    }
    LOBYTE(v183[0]) = 0;
    v184 = -1;
    v118 = v4[6];
    if ((_DWORD)v118 != -1)
    {
      ((void (*)(int **, _QWORD *, _DWORD *))off_1E0FD8010[v118])(&v174, v183, v166);
      v184 = v118;
      v117 = v169;
    }
    v185[0] = 0;
    v186 = -1;
    if (v117 != -1)
    {
      ((void (*)(int **, _BYTE *, _QWORD *))off_1E0FD8010[v117])(&v174, v185, v168);
      v186 = v117;
    }
    v119 = WTF::fastMalloc((WTF *)0x38);
    v120 = (unsigned int *)v119;
    *(_OWORD *)(v119 + 8) = 0u;
    *(_DWORD *)v119 = 2;
    *(_OWORD *)(v119 + 24) = 0u;
    *(_OWORD *)(v119 + 40) = 0u;
    v167 = (int *)v119;
    if (v184 == -1)
    {
      *(_DWORD *)(v119 + 24) = -1;
      v122 = (int *)(v119 + 32);
      v123 = v186;
      if (v186 == -1)
      {
        v121 = 0;
LABEL_285:
        ((void (*)(int **, int *))off_1E0FD7CC8[v121])(&v174, v122);
        v120[12] = -1;
        goto LABEL_294;
      }
    }
    else
    {
      v174 = (int *)(v119 + 8);
      ((void (*)(int **))off_1E0FD80E0[v184])(&v174);
      if (*v120 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3AB8);
      }
      v121 = v120[12];
      v122 = (int *)(v120 + 8);
      v123 = v186;
      if (v121 == -1)
      {
        if (v186 == -1)
          goto LABEL_294;
      }
      else if (v186 == -1)
      {
        goto LABEL_285;
      }
    }
    v174 = v122;
    ((void (*)(int **))off_1E0FD80E0[v123])(&v174);
LABEL_294:
    WGSL::constantMinus((uint64_t)a1, &v167, a3);
    v152 = *v120;
    if ((_DWORD)v152)
    {
      v153 = 24 * v152;
      v154 = v120 + 6;
      do
      {
        v151 = v154 - 4;
        v155 = *v154;
        if ((_DWORD)v155 != -1)
          ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v155])(&v174, v151);
        *v154 = -1;
        v154 += 6;
        v153 -= 24;
      }
      while (v153);
    }
LABEL_306:
    result = WTF::fastFree((WTF *)v120, v151);
    if (v186 != -1)
      result = ((uint64_t (*)(int **, _BYTE *))off_1E0FD7CC8[v186])(&v174, v185);
    v186 = -1;
    if (v184 != -1)
      result = ((uint64_t (*)(int **, _QWORD *))off_1E0FD7CC8[v184])(&v174, v183);
    if (v169 != -1)
      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v169])(v183, v168);
    v130 = v178;
    if (v178 == -1)
    {
LABEL_314:
      if (v171 != -1)
        result = ((uint64_t (*)(_QWORD *, int **))off_1E0FD7CC8[v171])(v183, v170);
      v84 = v182;
      if (v182 == -1)
      {
LABEL_318:
        if (v173 != -1)
          result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v173])(v183, v172);
        v51 = v190;
        if (v190 == -1)
          return result;
        return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v51])(v183, v188);
      }
LABEL_317:
      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v84])(v183, v180);
      goto LABEL_318;
    }
LABEL_313:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v130])(v183, v176);
    goto LABEL_314;
  }
  if (v8 == 4)
  {
    LOBYTE(v183[0]) = 0;
    v184 = -1;
    v23 = v4[12];
    if ((_DWORD)v23 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, int *))off_1E0FD8010[v23])(&v187, v183, v4 + 8);
      v184 = v23;
    }
    v185[0] = 0;
    v186 = -1;
    v24 = v4[6];
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(uint64_t *, _BYTE *, int *))off_1E0FD8010[v24])(&v187, v185, v4 + 2);
      v186 = v24;
    }
    v25 = WTF::fastMalloc((WTF *)0x38);
    v26 = (unsigned int *)v25;
    *(_OWORD *)(v25 + 8) = 0u;
    *(_DWORD *)v25 = 2;
    *(_OWORD *)(v25 + 24) = 0u;
    *(_OWORD *)(v25 + 40) = 0u;
    v179 = v25;
    if (v184 == -1)
    {
      *(_DWORD *)(v25 + 24) = -1;
      v28 = (unsigned int *)(v25 + 32);
      v29 = v186;
      if (v186 == -1)
      {
        v27 = 0;
LABEL_43:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v27])(&v187, v28);
        v26[12] = -1;
        goto LABEL_78;
      }
    }
    else
    {
      v187 = v25 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v187);
      if (*v26 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D39D8);
      }
      v27 = v26[12];
      v28 = v26 + 8;
      v29 = v186;
      if (v27 == -1)
      {
        if (v186 == -1)
          goto LABEL_78;
      }
      else if (v186 == -1)
      {
        goto LABEL_43;
      }
    }
    v187 = (uint64_t)v28;
    ((void (*)(uint64_t *))off_1E0FD80E0[v29])(&v187);
LABEL_78:
    WGSL::constantDot((uint64_t)v7, (uint64_t)&v187);
    v46 = *v26;
    if ((_DWORD)v46)
    {
      v47 = 24 * v46;
      v48 = v26 + 6;
      do
      {
        v45 = v48 - 4;
        v49 = *v48;
        if ((_DWORD)v49 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v49])(&v175, v45);
        *v48 = -1;
        v48 += 6;
        v47 -= 24;
      }
      while (v47);
    }
    WTF::fastFree((WTF *)v26, v45);
    if (v186 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
    v43 = v190;
    if (v190)
    {
LABEL_88:
      if (v43 != 1)
        goto LABEL_360;
      v50 = v188[0];
      if (v188[0])
        *(_DWORD *)v188[0] += 2;
      *(_QWORD *)(a3 + 8) = v50;
      v51 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v51])(v183, v188);
    }
    v172[0] = 0;
    v173 = -1;
    v52 = v189;
    if (v189 == -1)
    {
      LOWORD(v183[0]) = 0x4000;
      v184 = 1;
      v185[0] = 0;
      v186 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v189])(v183, v172, v188);
      v173 = v52;
      LOWORD(v183[0]) = 0x4000;
      v184 = 1;
      v185[0] = 0;
      v186 = -1;
      ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD8010[v52])(&v175, v185, v172);
      v186 = v52;
    }
    v64 = WTF::fastMalloc((WTF *)0x38);
    v65 = (unsigned int *)v64;
    *(_OWORD *)(v64 + 8) = 0u;
    *(_DWORD *)v64 = 2;
    *(_OWORD *)(v64 + 24) = 0u;
    *(_OWORD *)(v64 + 40) = 0u;
    v170[0] = (int *)v64;
    if (v184 == -1)
    {
      *(_DWORD *)(v64 + 24) = -1;
      v67 = (unsigned int *)(v64 + 32);
      v68 = v186;
      if (v186 == -1)
      {
        v66 = 0;
LABEL_119:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v66])(&v175, v67);
        v65[12] = -1;
        goto LABEL_140;
      }
    }
    else
    {
      v175 = v64 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v175);
      if (*v65 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3A38);
      }
      v66 = v65[12];
      v67 = v65 + 8;
      v68 = v186;
      if (v66 == -1)
      {
        if (v186 == -1)
          goto LABEL_140;
      }
      else if (v186 == -1)
      {
        goto LABEL_119;
      }
    }
    v175 = (uint64_t)v67;
    ((void (*)(uint64_t *))off_1E0FD80E0[v68])(&v175);
LABEL_140:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    v79 = *v65;
    if ((_DWORD)v79)
    {
      v80 = 24 * v79;
      v81 = v65 + 6;
      do
      {
        v78 = v81 - 4;
        v82 = *v81;
        if ((_DWORD)v82 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v82])(&v175, v78);
        *v81 = -1;
        v81 += 6;
        v80 -= 24;
      }
      while (v80);
    }
    WTF::fastFree((WTF *)v65, v78);
    if (v186 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
    v76 = v182;
    if (v182)
    {
LABEL_150:
      if (v76 != 1)
        goto LABEL_360;
      v83 = v180[0];
      if (v180[0])
        *(_DWORD *)v180[0] += 2;
      *(_QWORD *)(a3 + 8) = v83;
      v84 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_317;
    }
    LOBYTE(v170[0]) = 0;
    v171 = -1;
    v85 = v181;
    if (v181 == -1)
    {
      LOBYTE(v183[0]) = 0;
      v184 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v181])(v183, v170, v180);
      v171 = v85;
      LOBYTE(v183[0]) = 0;
      v184 = -1;
      ((void (*)(_QWORD *, _QWORD *, int **))off_1E0FD8010[v85])(v168, v183, v170);
      v184 = v85;
    }
    v185[0] = 0;
    v186 = -1;
    v92 = v4[12];
    if ((_DWORD)v92 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, int *))off_1E0FD8010[v92])(v168, v185, v4 + 8);
      v186 = v92;
    }
    v93 = WTF::fastMalloc((WTF *)0x38);
    v94 = (unsigned int *)v93;
    *(_OWORD *)(v93 + 8) = 0u;
    *(_DWORD *)v93 = 2;
    *(_OWORD *)(v93 + 24) = 0u;
    *(_OWORD *)(v93 + 40) = 0u;
    v174 = (int *)v93;
    if (v184 == -1)
    {
      *(_DWORD *)(v93 + 24) = -1;
      v96 = (unsigned int *)(v93 + 32);
      v97 = v186;
      if (v186 == -1)
      {
        v95 = 0;
LABEL_177:
        ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v95])(v168, v96);
        v94[12] = -1;
        goto LABEL_231;
      }
    }
    else
    {
      v168[0] = v93 + 8;
      ((void (*)(_QWORD *))off_1E0FD80E0[v184])(v168);
      if (*v94 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3A78);
      }
      v95 = v94[12];
      v96 = v94 + 8;
      v97 = v186;
      if (v95 == -1)
      {
        if (v186 == -1)
          goto LABEL_231;
      }
      else if (v186 == -1)
      {
        goto LABEL_177;
      }
    }
    v168[0] = v96;
    ((void (*)(_QWORD *))off_1E0FD80E0[v97])(v168);
LABEL_231:
    WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
    v125 = *v94;
    if ((_DWORD)v125)
    {
      v126 = 24 * v125;
      v127 = v94 + 6;
      do
      {
        v124 = v127 - 4;
        v128 = *v127;
        if ((_DWORD)v128 != -1)
          ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v128])(v168, v124);
        *v127 = -1;
        v127 += 6;
        v126 -= 24;
      }
      while (v126);
    }
    WTF::fastFree((WTF *)v94, v124);
    if (v186 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v186])(v168, v185);
    v186 = -1;
    if (v184 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v184])(v168, v183);
    v116 = v178;
    if (v178)
    {
LABEL_241:
      if (v116 != 1)
        goto LABEL_360;
      v129 = v176[0];
      if (v176[0])
        *(_DWORD *)v176[0] += 2;
      *(_QWORD *)(a3 + 8) = v129;
      v130 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_313;
    }
    LOBYTE(v168[0]) = 0;
    v169 = -1;
    v131 = v177;
    if (v177 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD7D20[v177])(v183, v168, v176);
      v169 = v131;
    }
    LOBYTE(v183[0]) = 0;
    v184 = -1;
    v132 = v4[6];
    if ((_DWORD)v132 != -1)
    {
      ((void (*)(int **, _QWORD *, _DWORD *))off_1E0FD8010[v132])(&v174, v183, v166);
      v184 = v132;
      v131 = v169;
    }
    v185[0] = 0;
    v186 = -1;
    if (v131 != -1)
    {
      ((void (*)(int **, _BYTE *, _QWORD *))off_1E0FD8010[v131])(&v174, v185, v168);
      v186 = v131;
    }
    v133 = WTF::fastMalloc((WTF *)0x38);
    v120 = (unsigned int *)v133;
    *(_OWORD *)(v133 + 8) = 0u;
    *(_DWORD *)v133 = 2;
    *(_OWORD *)(v133 + 24) = 0u;
    *(_OWORD *)(v133 + 40) = 0u;
    v167 = (int *)v133;
    if (v184 == -1)
    {
      *(_DWORD *)(v133 + 24) = -1;
      v135 = (int *)(v133 + 32);
      v136 = v186;
      if (v186 == -1)
      {
        v134 = 0;
LABEL_288:
        ((void (*)(int **, int *))off_1E0FD7CC8[v134])(&v174, v135);
        v120[12] = -1;
        goto LABEL_301;
      }
    }
    else
    {
      v174 = (int *)(v133 + 8);
      ((void (*)(int **))off_1E0FD80E0[v184])(&v174);
      if (*v120 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D3AD8);
      }
      v134 = v120[12];
      v135 = (int *)(v120 + 8);
      v136 = v186;
      if (v134 == -1)
      {
        if (v186 == -1)
          goto LABEL_301;
      }
      else if (v186 == -1)
      {
        goto LABEL_288;
      }
    }
    v174 = v135;
    ((void (*)(int **))off_1E0FD80E0[v136])(&v174);
LABEL_301:
    WGSL::constantMinus((uint64_t)a1, &v167, a3);
    v156 = *v120;
    if ((_DWORD)v156)
    {
      v157 = 24 * v156;
      v158 = v120 + 6;
      do
      {
        v151 = v158 - 4;
        v159 = *v158;
        if ((_DWORD)v159 != -1)
          ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v159])(&v174, v151);
        *v158 = -1;
        v158 += 6;
        v157 -= 24;
      }
      while (v157);
    }
    goto LABEL_306;
  }
  if (v8 != 5)
    goto LABEL_361;
  LOBYTE(v183[0]) = 0;
  v184 = -1;
  v9 = v4[12];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, int *))off_1E0FD8010[v9])(&v187, v183, v4 + 8);
    v184 = v9;
  }
  v185[0] = 0;
  v186 = -1;
  v10 = v4[6];
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, int *))off_1E0FD8010[v10])(&v187, v185, v4 + 2);
    v186 = v10;
  }
  v11 = WTF::fastMalloc((WTF *)0x38);
  v12 = (unsigned int *)v11;
  *(_DWORD *)v11 = 2;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  v179 = v11;
  if (v184 == -1)
  {
    *(_DWORD *)(v11 + 24) = -1;
    v14 = (unsigned int *)(v11 + 32);
    v15 = v186;
    if (v186 == -1)
    {
      v13 = 0;
LABEL_37:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v13])(&v187, v14);
      v12[12] = -1;
      goto LABEL_46;
    }
  }
  else
  {
    v187 = v11 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v187);
    if (*v12 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D3998);
    }
    v13 = v12[12];
    v14 = v12 + 8;
    v15 = v186;
    if (v13 == -1)
    {
      if (v186 == -1)
        goto LABEL_46;
    }
    else if (v186 == -1)
    {
      goto LABEL_37;
    }
  }
  v187 = (uint64_t)v14;
  ((void (*)(uint64_t *))off_1E0FD80E0[v15])(&v187);
LABEL_46:
  WGSL::constantDot((uint64_t)v7, (uint64_t)&v187);
  v31 = *v12;
  if ((_DWORD)v31)
  {
    v32 = 24 * v31;
    v33 = v12 + 6;
    do
    {
      v30 = v33 - 4;
      v34 = *v33;
      if ((_DWORD)v34 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v34])(&v175, v30);
      *v33 = -1;
      v33 += 6;
      v32 -= 24;
    }
    while (v32);
  }
  WTF::fastFree((WTF *)v12, v30);
  if (v186 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
  v186 = -1;
  if (v184 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
  if (v190)
  {
    if (v190 == 1)
    {
      v35 = v188[0];
      if (v188[0])
        *(_DWORD *)v188[0] += 2;
      *(_QWORD *)(a3 + 8) = v35;
      v36 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v36])(v183, v188);
    }
LABEL_360:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v172[0] = 0;
  v173 = -1;
  v37 = v189;
  if (v189 == -1)
  {
    LODWORD(v183[0]) = 0x40000000;
    v184 = 0;
    v185[0] = 0;
    v186 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v189])(v183, v172, v188);
    v173 = v37;
    LODWORD(v183[0]) = 0x40000000;
    v184 = 0;
    v185[0] = 0;
    v186 = -1;
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E0FD8010[v37])(&v175, v185, v172);
    v186 = v37;
  }
  v53 = WTF::fastMalloc((WTF *)0x38);
  v54 = (unsigned int *)v53;
  *(_OWORD *)(v53 + 8) = 0u;
  *(_DWORD *)v53 = 2;
  *(_OWORD *)(v53 + 24) = 0u;
  *(_OWORD *)(v53 + 40) = 0u;
  v170[0] = (int *)v53;
  if (v184 == -1)
  {
    v58 = a3;
    *(_DWORD *)(v53 + 24) = -1;
    v56 = (unsigned int *)(v53 + 32);
    v57 = v186;
    if (v186 == -1)
    {
      v55 = 0;
      goto LABEL_179;
    }
    goto LABEL_121;
  }
  v175 = v53 + 8;
  ((void (*)(uint64_t *))off_1E0FD80E0[v184])(&v175);
  if (*v54 < 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D39F8);
  }
  v55 = v54[12];
  v56 = v54 + 8;
  v57 = v186;
  v58 = a3;
  if (v55 == -1)
  {
    if (v186 == -1)
      goto LABEL_122;
    goto LABEL_121;
  }
  if (v186 != -1)
  {
LABEL_121:
    v175 = (uint64_t)v56;
    ((void (*)(uint64_t *))off_1E0FD80E0[v57])(&v175);
LABEL_122:
    WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
    v70 = *v54;
    if (!(_DWORD)v70)
      goto LABEL_184;
    goto LABEL_180;
  }
LABEL_179:
  ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v55])(&v175, v56);
  v54[12] = -1;
  WGSL::constantMultiply((uint64_t)a1, v170, (uint64_t)&v179);
  v70 = *v54;
  if (!(_DWORD)v70)
    goto LABEL_184;
LABEL_180:
  v98 = 24 * v70;
  v99 = v54 + 6;
  do
  {
    v69 = v99 - 4;
    v100 = *v99;
    if ((_DWORD)v100 != -1)
      ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v100])(&v175, v69);
    *v99 = -1;
    v99 += 6;
    v98 -= 24;
  }
  while (v98);
LABEL_184:
  WTF::fastFree((WTF *)v54, v69);
  if (v186 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v186])(&v175, v185);
  v186 = -1;
  if (v184 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v184])(&v175, v183);
  v101 = v58;
  if (v182)
  {
    if (v182 != 1)
      goto LABEL_360;
    v102 = v180[0];
    if (v180[0])
      *(_DWORD *)v180[0] += 2;
    *(_QWORD *)(v58 + 8) = v102;
    v103 = 1;
    *(_DWORD *)(v58 + 32) = 1;
    goto LABEL_340;
  }
  LOBYTE(v170[0]) = 0;
  v171 = -1;
  v104 = v181;
  if (v181 == -1)
  {
    LOBYTE(v183[0]) = 0;
    v184 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v181])(v183, v170, v180);
    v171 = v104;
    LOBYTE(v183[0]) = 0;
    v184 = -1;
    ((void (*)(_QWORD *, _QWORD *, int **))off_1E0FD8010[v104])(v168, v183, v170);
    v184 = v104;
  }
  v185[0] = 0;
  v186 = -1;
  v105 = v4[12];
  if ((_DWORD)v105 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, int *))off_1E0FD8010[v105])(v168, v185, v4 + 8);
    v186 = v105;
  }
  v106 = WTF::fastMalloc((WTF *)0x38);
  v107 = (unsigned int *)v106;
  *(_OWORD *)(v106 + 8) = 0u;
  *(_DWORD *)v106 = 2;
  *(_OWORD *)(v106 + 24) = 0u;
  *(_OWORD *)(v106 + 40) = 0u;
  v174 = (int *)v106;
  if (v184 == -1)
  {
    *(_DWORD *)(v106 + 24) = -1;
    v109 = (unsigned int *)(v106 + 32);
    v110 = v186;
    if (v186 == -1)
    {
      v108 = 0;
LABEL_205:
      ((void (*)(_QWORD *, unsigned int *))off_1E0FD7CC8[v108])(v168, v109);
      v107[12] = -1;
      goto LABEL_258;
    }
  }
  else
  {
    v168[0] = v106 + 8;
    ((void (*)(_QWORD *))off_1E0FD80E0[v184])(v168);
    if (*v107 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D3A98);
    }
    v108 = v107[12];
    v109 = v107 + 8;
    v110 = v186;
    if (v108 == -1)
    {
      if (v186 == -1)
        goto LABEL_258;
    }
    else if (v186 == -1)
    {
      goto LABEL_205;
    }
  }
  v168[0] = v109;
  ((void (*)(_QWORD *))off_1E0FD80E0[v110])(v168);
LABEL_258:
  WGSL::constantMultiply((uint64_t)a1, &v174, (uint64_t)&v175);
  v138 = *v107;
  if ((_DWORD)v138)
  {
    v139 = 24 * v138;
    v140 = v107 + 6;
    do
    {
      v137 = v140 - 4;
      v141 = *v140;
      if ((_DWORD)v141 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v141])(v168, v137);
      *v140 = -1;
      v140 += 6;
      v139 -= 24;
    }
    while (v139);
  }
  WTF::fastFree((WTF *)v107, v137);
  if (v186 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v186])(v168, v185);
  v186 = -1;
  if (v184 != -1)
    ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v184])(v168, v183);
  if (v178)
  {
    if (v178 != 1)
      goto LABEL_360;
    v142 = v176[0];
    if (v176[0])
      *(_DWORD *)v176[0] += 2;
    *(_QWORD *)(v101 + 8) = v142;
    v143 = 1;
    *(_DWORD *)(v101 + 32) = 1;
    goto LABEL_336;
  }
  LOBYTE(v168[0]) = 0;
  v169 = -1;
  v144 = v177;
  if (v177 != -1)
  {
    ((void (*)(_QWORD *, _QWORD *, _QWORD *))off_1E0FD7D20[v177])(v183, v168, v176);
    v169 = v144;
  }
  LOBYTE(v183[0]) = 0;
  v184 = -1;
  v145 = v4[6];
  if ((_DWORD)v145 != -1)
  {
    ((void (*)(int **, _QWORD *, _DWORD *))off_1E0FD8010[v145])(&v174, v183, v166);
    v184 = v145;
    v144 = v169;
  }
  v185[0] = 0;
  v186 = -1;
  if (v144 != -1)
  {
    ((void (*)(int **, _BYTE *, _QWORD *))off_1E0FD8010[v144])(&v174, v185, v168);
    v186 = v144;
  }
  v146 = WTF::fastMalloc((WTF *)0x38);
  v147 = (unsigned int *)v146;
  *(_OWORD *)(v146 + 8) = 0u;
  *(_DWORD *)v146 = 2;
  *(_OWORD *)(v146 + 24) = 0u;
  *(_OWORD *)(v146 + 40) = 0u;
  v167 = (int *)v146;
  if (v184 == -1)
  {
    *(_DWORD *)(v146 + 24) = -1;
    v149 = (int *)(v146 + 32);
    v150 = v186;
    if (v186 == -1)
    {
      v148 = 0;
LABEL_291:
      ((void (*)(int **, int *))off_1E0FD7CC8[v148])(&v174, v149);
      v147[12] = -1;
      goto LABEL_324;
    }
  }
  else
  {
    v174 = (int *)(v146 + 8);
    ((void (*)(int **))off_1E0FD80E0[v184])(&v174);
    if (*v147 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D3AF8);
    }
    v148 = v147[12];
    v149 = (int *)(v147 + 8);
    v150 = v186;
    if (v148 == -1)
    {
      if (v186 == -1)
        goto LABEL_324;
    }
    else if (v186 == -1)
    {
      goto LABEL_291;
    }
  }
  v174 = v149;
  ((void (*)(int **))off_1E0FD80E0[v150])(&v174);
LABEL_324:
  WGSL::constantMinus((uint64_t)a1, &v167, v101);
  v162 = *v147;
  if ((_DWORD)v162)
  {
    v163 = 24 * v162;
    v164 = v147 + 6;
    do
    {
      v161 = v164 - 4;
      v165 = *v164;
      if ((_DWORD)v165 != -1)
        ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v165])(&v174, v161);
      *v164 = -1;
      v164 += 6;
      v163 -= 24;
    }
    while (v163);
  }
  result = WTF::fastFree((WTF *)v147, v161);
  if (v186 != -1)
    result = ((uint64_t (*)(int **, _BYTE *))off_1E0FD7CC8[v186])(&v174, v185);
  v186 = -1;
  if (v184 != -1)
    result = ((uint64_t (*)(int **, _QWORD *))off_1E0FD7CC8[v184])(&v174, v183);
  if (v169 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v169])(v183, v168);
  v143 = v178;
  if (v178 != -1)
LABEL_336:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v143])(v183, v176);
  if (v171 != -1)
    result = ((uint64_t (*)(_QWORD *, int **))off_1E0FD7CC8[v171])(v183, v170);
  v103 = v182;
  if (v182 != -1)
LABEL_340:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v103])(v183, v180);
  if (v173 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v173])(v183, v172);
  v36 = v190;
  if (v190 != -1)
    return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v36])(v183, v188);
  return result;
}

uint64_t WGSL::constantRefract@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  int v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  int *v97;
  int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  int *v102;
  int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  int *v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  int *v120;
  int v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  int *v132;
  int v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  int *v145;
  int v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int *v174;
  int v175;
  int v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int *v180;
  int v181;
  int v182;
  uint64_t v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  int v187;
  _DWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  uint64_t v198;
  _DWORD *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  int *v214;
  int v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  int *v219;
  int v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  int *v224;
  int v225;
  _DWORD *v226;
  uint64_t v227;
  uint64_t v228;
  _DWORD *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  _DWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  _DWORD *v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t result;
  unsigned int v254;
  uint64_t v255;
  _DWORD *v256;
  int v257;
  int v258;
  int v259;
  _DWORD *v260;
  int v261;
  int v262;
  unsigned int v263;
  _DWORD *v264;
  int v265;
  int v266;
  unsigned int v267;
  _DWORD *v268;
  int v269;
  int v270;
  int v271;
  _DWORD *v272;
  uint64_t v273;
  int v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  int v278;
  _DWORD *v279;
  uint64_t v280;
  int v281;
  int v282;
  _DWORD *v283;
  uint64_t v284;
  int v285;
  int v286;
  unsigned int v287;
  _DWORD *v288;
  uint64_t v289;
  int v290;
  int v291;
  unsigned int v292;
  _DWORD *v293;
  uint64_t v294;
  int v295;
  int v296;
  unsigned int v297;
  _DWORD *v298;
  uint64_t v299;
  int v300;
  int v301;
  unsigned int v302;
  _DWORD *v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  _DWORD *v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  _DWORD *v313;
  uint64_t v314;
  int v315;
  int v316;
  unsigned int v317;
  uint64_t v318;
  _DWORD *v319;
  uint64_t v320;
  int v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  _DWORD *v325;
  uint64_t v326;
  int v327;
  int v328;
  unsigned int v329;
  _DWORD *v330;
  int v331;
  unsigned int v332;
  _DWORD *v333;
  _DWORD *v334;
  _DWORD *v335;
  int *v337;
  int *v338[2];
  int v339;
  _BYTE v340[16];
  int v341;
  _BYTE v342[16];
  int v343;
  _BYTE v344[16];
  int v345;
  _BYTE v346[16];
  int v347;
  _BYTE v348[16];
  int v349;
  _BYTE v350[16];
  int v351;
  _BYTE v352[16];
  int v353;
  _BYTE v354[16];
  int v355;
  _BYTE v356[16];
  int v357;
  _BYTE v358[16];
  int v359;
  _BYTE v360[16];
  int v361;
  char v362;
  int *v363;
  _QWORD v364[2];
  int v365;
  int v366;
  unsigned int *v367;
  _QWORD v368[2];
  int v369;
  int v370;
  WTF *v371;
  _QWORD v372[2];
  int v373;
  int v374;
  int *v375;
  _QWORD v376[2];
  int v377;
  int v378;
  int *v379;
  _QWORD v380[2];
  int v381;
  int v382;
  int *v383;
  _QWORD v384[2];
  int v385;
  int v386;
  uint64_t v387;
  _QWORD v388[2];
  unsigned int v389;
  int v390;
  int *v391;
  _QWORD v392[2];
  unsigned int v393;
  int v394;
  int *v395;
  _QWORD v396[2];
  unsigned int v397;
  int v398;
  uint64_t v399;
  _QWORD v400[2];
  int v401;
  int v402;
  uint64_t v403;
  _QWORD v404[2];
  unsigned int v405;
  int v406;
  _QWORD v407[2];
  unsigned int v408;
  _QWORD v409[2];
  int v410;
  uint64_t v411;
  _QWORD v412[2];
  unsigned int v413;
  int v414;
  uint64_t v415;

  v415 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = **a2;
  if (!v4)
  {
LABEL_825:
    __break(0xC471u);
    JUMPOUT(0x1825D6E10);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D6E30);
  }
  if (v4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D6E50);
  }
  v6 = v3[18];
  v335 = v3 + 2;
  v334 = v3 + 8;
  if (v6 == 2)
  {
    if (*(_DWORD *)(a1 + 48) != 1)
      goto LABEL_824;
    v16 = *((_QWORD *)v3 + 7);
    v17 = *(_QWORD *)a1;
    LOBYTE(v407[0]) = 0;
    v408 = -1;
    v18 = v3[12];
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v18])(&v411, v407, v3 + 8);
      v408 = v18;
    }
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    v19 = v3[6];
    if ((_DWORD)v19 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v19])(&v411, v409, v3 + 2);
      v410 = v19;
    }
    v20 = WTF::fastMalloc((WTF *)0x38);
    v21 = (unsigned int *)v20;
    *(_OWORD *)(v20 + 8) = 0u;
    *(_DWORD *)v20 = 2;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    v403 = v20;
    if (v408 == -1)
    {
      *(_DWORD *)(v20 + 24) = -1;
      v23 = (unsigned int *)(v20 + 32);
      v24 = v410;
      if (v410 == -1)
      {
        v22 = 0;
LABEL_42:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v22])(&v411, v23);
        v21[12] = -1;
        goto LABEL_66;
      }
    }
    else
    {
      v411 = v20 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v411);
      if (*v21 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D72F8);
      }
      v22 = v21[12];
      v23 = v21 + 8;
      v24 = v410;
      if (v22 == -1)
      {
        if (v410 == -1)
          goto LABEL_66;
      }
      else if (v410 == -1)
      {
        goto LABEL_42;
      }
    }
    v411 = (uint64_t)v23;
    ((void (*)(uint64_t *))off_1E0FD80E0[v24])(&v411);
LABEL_66:
    WGSL::constantDot(v17, (uint64_t)&v411);
    v43 = *v21;
    if ((_DWORD)v43)
    {
      v44 = 24 * v43;
      v45 = v21 + 6;
      do
      {
        v42 = v45 - 4;
        v46 = *v45;
        if ((_DWORD)v46 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v46])(&v399, v42);
        *v45 = -1;
        v45 += 6;
        v44 -= 24;
      }
      while (v44);
    }
    WTF::fastFree((WTF *)v21, v42);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
    v47 = v414;
    if (v414)
    {
LABEL_90:
      if (v47 == 1)
      {
        v54 = v412[0];
        if (v412[0])
          *(_DWORD *)v412[0] += 2;
        *(_QWORD *)(a3 + 8) = v54;
        v40 = 1;
        *(_DWORD *)(a3 + 32) = 1;
        return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v40])(v407, v412);
      }
      goto LABEL_824;
    }
    v360[0] = 0;
    v361 = -1;
    v48 = v413;
    if (v413 == -1)
    {
      LOBYTE(v407[0]) = 0;
      v408 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v413])(v407, v360, v412);
      v361 = v48;
      LOBYTE(v407[0]) = 0;
      v408 = -1;
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v48])(&v399, v407, v360);
      v408 = v48;
    }
    v409[0] = 0x4000000000000000;
    v410 = 2;
    v61 = WTF::fastMalloc((WTF *)0x38);
    v62 = (unsigned int *)v61;
    *(_OWORD *)(v61 + 8) = 0u;
    *(_DWORD *)v61 = 2;
    *(_OWORD *)(v61 + 24) = 0u;
    *(_OWORD *)(v61 + 40) = 0u;
    v395 = (int *)v61;
    if (v408 == -1)
    {
      *(_DWORD *)(v61 + 24) = -1;
      v64 = (unsigned int *)(v61 + 32);
      v65 = v410;
      if (v410 == -1)
      {
        v63 = 0;
LABEL_119:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v63])(&v399, v64);
        v62[12] = -1;
        goto LABEL_143;
      }
    }
    else
    {
      v399 = v61 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v399);
      if (*v62 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D76FCLL);
      }
      v63 = v62[12];
      v64 = v62 + 8;
      v65 = v410;
      if (v63 == -1)
      {
        if (v410 == -1)
          goto LABEL_143;
      }
      else if (v410 == -1)
      {
        goto LABEL_119;
      }
    }
    v399 = (uint64_t)v64;
    ((void (*)(uint64_t *))off_1E0FD80E0[v65])(&v399);
LABEL_143:
    WGSL::constantPow(&v395, (uint64_t)&v403);
    v80 = *v62;
    if ((_DWORD)v80)
    {
      v81 = 24 * v80;
      v82 = v62 + 6;
      do
      {
        v79 = v82 - 4;
        v83 = *v82;
        if ((_DWORD)v83 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v83])(&v399, v79);
        *v82 = -1;
        v82 += 6;
        v81 -= 24;
      }
      while (v81);
    }
    WTF::fastFree((WTF *)v62, v79);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
    v84 = v406;
    if (v406)
      goto LABEL_167;
    v358[0] = 0;
    v359 = -1;
    v85 = v405;
    if (v405 == -1)
    {
      v407[0] = 0x3FF0000000000000;
      v408 = 2;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v405])(v407, v358, v404);
      v359 = v85;
      v407[0] = 0x3FF0000000000000;
      v408 = 2;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
      ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v85])(&v395, v409, v358);
      v410 = v85;
    }
    v99 = WTF::fastMalloc((WTF *)0x38);
    v100 = (unsigned int *)v99;
    *(_OWORD *)(v99 + 8) = 0u;
    *(_DWORD *)v99 = 2;
    *(_OWORD *)(v99 + 24) = 0u;
    *(_OWORD *)(v99 + 40) = 0u;
    v391 = (int *)v99;
    if (v408 == -1)
    {
      *(_DWORD *)(v99 + 24) = -1;
      v102 = (int *)(v99 + 32);
      v103 = v410;
      if (v410 == -1)
      {
        v101 = 0;
LABEL_196:
        ((void (*)(int **, int *))off_1E0FD7CC8[v101])(&v395, v102);
        v100[12] = -1;
        goto LABEL_225;
      }
    }
    else
    {
      v395 = (int *)(v99 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
      if (*v100 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D7D50);
      }
      v101 = v100[12];
      v102 = (int *)(v100 + 8);
      v103 = v410;
      if (v101 == -1)
      {
        if (v410 == -1)
          goto LABEL_225;
      }
      else if (v410 == -1)
      {
        goto LABEL_196;
      }
    }
    v395 = v102;
    ((void (*)(int **))off_1E0FD80E0[v103])(&v395);
LABEL_225:
    WGSL::constantMinus(v17, &v391, (uint64_t)&v399);
    v123 = *v100;
    if ((_DWORD)v123)
    {
      v124 = 24 * v123;
      v125 = v100 + 6;
      do
      {
        v122 = v125 - 4;
        v126 = *v125;
        if ((_DWORD)v126 != -1)
          ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v126])(&v395, v122);
        *v125 = -1;
        v125 += 6;
        v124 -= 24;
      }
      while (v124);
    }
    WTF::fastFree((WTF *)v100, v122);
    if (v410 != -1)
      ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v395, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v395, v407);
    v127 = v402;
    if (v402)
      goto LABEL_254;
    v356[0] = 0;
    v357 = -1;
    v128 = v401;
    if (v401 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v401])(v407, v356, v400);
      v357 = v128;
    }
    v407[0] = v16;
    v408 = 2;
    v409[0] = 0x4000000000000000;
    v410 = 2;
    v129 = WTF::fastMalloc((WTF *)0x38);
    v130 = (unsigned int *)v129;
    *(_OWORD *)(v129 + 8) = 0u;
    *(_DWORD *)v129 = 2;
    *(_OWORD *)(v129 + 24) = 0u;
    *(_OWORD *)(v129 + 40) = 0u;
    v391 = (int *)v129;
    if (v408 == -1)
    {
      *(_DWORD *)(v129 + 24) = -1;
      v132 = (int *)(v129 + 32);
      v133 = v410;
      if (v410 == -1)
      {
        v131 = 0;
LABEL_270:
        ((void (*)(int **, int *))off_1E0FD7CC8[v131])(&v395, v132);
        v130[12] = -1;
        goto LABEL_294;
      }
    }
    else
    {
      v395 = (int *)(v129 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
      if (*v130 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D81DCLL);
      }
      v131 = v130[12];
      v132 = (int *)(v130 + 8);
      v133 = v410;
      if (v131 == -1)
      {
        if (v410 == -1)
          goto LABEL_294;
      }
      else if (v410 == -1)
      {
        goto LABEL_270;
      }
    }
    v395 = v132;
    ((void (*)(int **))off_1E0FD80E0[v133])(&v395);
LABEL_294:
    WGSL::constantPow(&v391, (uint64_t)&v395);
    v156 = *v130;
    if ((_DWORD)v156)
    {
      v157 = 24 * v156;
      v158 = v130 + 6;
      do
      {
        v155 = v158 - 4;
        v159 = *v158;
        if ((_DWORD)v159 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v159])(&v387, v155);
        *v158 = -1;
        v158 += 6;
        v157 -= 24;
      }
      while (v157);
    }
    WTF::fastFree((WTF *)v130, v155);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
    v160 = v398;
    if (v398)
      goto LABEL_318;
    v354[0] = 0;
    v355 = -1;
    v161 = v397;
    if (v397 == -1)
    {
      LOBYTE(v407[0]) = 0;
      v408 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v397])(v407, v354, v396);
      v355 = v161;
      LOBYTE(v407[0]) = 0;
      v408 = -1;
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v161])(&v387, v407, v354);
      v408 = v161;
    }
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    v176 = v357;
    if (v357 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v357])(&v387, v409, v356);
      v410 = v176;
    }
    v177 = WTF::fastMalloc((WTF *)0x38);
    v178 = (unsigned int *)v177;
    *(_OWORD *)(v177 + 8) = 0u;
    *(_DWORD *)v177 = 2;
    *(_OWORD *)(v177 + 24) = 0u;
    *(_OWORD *)(v177 + 40) = 0u;
    v383 = (int *)v177;
    if (v408 == -1)
    {
      *(_DWORD *)(v177 + 24) = -1;
      v180 = (unsigned int *)(v177 + 32);
      v181 = v410;
      if (v410 == -1)
      {
        v179 = 0;
LABEL_353:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v179])(&v387, v180);
        v178[12] = -1;
        goto LABEL_377;
      }
    }
    else
    {
      v387 = v177 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v387);
      if (*v178 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D823CLL);
      }
      v179 = v178[12];
      v180 = v178 + 8;
      v181 = v410;
      if (v179 == -1)
      {
        if (v410 == -1)
          goto LABEL_377;
      }
      else if (v410 == -1)
      {
        goto LABEL_353;
      }
    }
    v387 = (uint64_t)v180;
    ((void (*)(uint64_t *))off_1E0FD80E0[v181])(&v387);
LABEL_377:
    WGSL::constantMultiply(v17, &v383, (uint64_t)&v391);
    v197 = *v178;
    if ((_DWORD)v197)
    {
      v198 = 24 * v197;
      v199 = v178 + 6;
      do
      {
        v196 = v199 - 4;
        v200 = *v199;
        if ((_DWORD)v200 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v200])(&v387, v196);
        *v199 = -1;
        v199 += 6;
        v198 -= 24;
      }
      while (v198);
    }
    WTF::fastFree((WTF *)v178, v196);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
    v201 = v394;
    if (v394)
      goto LABEL_401;
    v352[0] = 0;
    v353 = -1;
    v202 = v393;
    if (v393 == -1)
    {
      v407[0] = 0x3FF0000000000000;
      v408 = 2;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v393])(v407, v352, v392);
      v353 = v202;
      v407[0] = 0x3FF0000000000000;
      v408 = 2;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
      ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v202])(&v383, v409, v352);
      v410 = v202;
    }
    v216 = WTF::fastMalloc((WTF *)0x38);
    v217 = (unsigned int *)v216;
    *(_OWORD *)(v216 + 8) = 0u;
    *(_DWORD *)v216 = 2;
    *(_OWORD *)(v216 + 24) = 0u;
    *(_OWORD *)(v216 + 40) = 0u;
    v379 = (int *)v216;
    if (v408 == -1)
    {
      *(_DWORD *)(v216 + 24) = -1;
      v219 = (int *)(v216 + 32);
      v220 = v410;
      if (v410 == -1)
      {
        v218 = 0;
LABEL_430:
        ((void (*)(int **, int *))off_1E0FD7CC8[v218])(&v383, v219);
        v217[12] = -1;
LABEL_454:
        WGSL::constantMinus(v17, &v379, (uint64_t)&v387);
        v235 = *v217;
        if ((_DWORD)v235)
        {
          v236 = 24 * v235;
          v237 = v217 + 6;
          do
          {
            v234 = v237 - 4;
            v238 = *v237;
            if ((_DWORD)v238 != -1)
              ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v238])(&v383, v234);
            *v237 = -1;
            v237 += 6;
            v236 -= 24;
          }
          while (v236);
        }
        WTF::fastFree((WTF *)v217, v234);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v383, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v383, v407);
        v239 = v390;
        if (v390)
          goto LABEL_478;
        v350[0] = 0;
        v351 = -1;
        v240 = v389;
        if (v389 == -1)
        {
          LOBYTE(v407[0]) = 0;
          v408 = -1;
        }
        else
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v389])(v407, v350, v388);
          v351 = v240;
          LOBYTE(v407[0]) = 0;
          v408 = -1;
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v240])(&v375, v407, v350);
          v408 = v240;
        }
        v409[0] = 0;
        v410 = 2;
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v379, (uint64_t)v407, 2);
        WGSL::constantLt(&v379, (uint64_t)&v383);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v379, v256);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v375, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v375, v407);
        v257 = v386;
        if (v386)
        {
LABEL_543:
          if (v257 != 1)
            goto LABEL_824;
          v273 = v384[0];
          if (v384[0])
            *(_DWORD *)v384[0] += 2;
          *(_QWORD *)(a3 + 8) = v273;
          v274 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_728;
        }
        v348[0] = 0;
        v349 = -1;
        v258 = v385;
        if (v385 == -1)
          goto LABEL_824;
        ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v385])(v407, v348, v384);
        v349 = v258;
        if (v258 != 6)
          goto LABEL_824;
        if (v348[0])
          goto LABEL_550;
        v407[0] = v16;
        v408 = 2;
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        v259 = v361;
        if (v361 != -1)
        {
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v361])(&v379, v409, v360);
          v410 = v259;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v375, (uint64_t)v407, 2);
        WGSL::constantMultiply(v17, &v375, (uint64_t)&v379);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v375, v260);
        if (v410 != -1)
          ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v410])(&v371, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v408])(&v371, v407);
        v261 = v382;
        if (v382)
        {
LABEL_572:
          if (v261 != 1)
            goto LABEL_824;
          v284 = v380[0];
          if (v380[0])
            *(_DWORD *)v380[0] += 2;
          *(_QWORD *)(a3 + 8) = v284;
          v285 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_724;
        }
        v346[0] = 0;
        v347 = -1;
        v262 = v381;
        if (v381 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v381])(v407, v346, v380);
          v347 = v262;
        }
        LOBYTE(v407[0]) = 0;
        v408 = -1;
        v263 = v351;
        if (v351 != -1)
        {
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v351])(&v375, v407, v350);
          v408 = v263;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v371, (uint64_t)v407, 1);
        WGSL::constantSqrt(&v371, (uint64_t)&v375);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector(&v371, v264);
        if (v408 != -1)
          ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v408])(&v367, v407);
        v265 = v378;
        if (v378)
          goto LABEL_598;
        v344[0] = 0;
        v345 = -1;
        v266 = v377;
        if (v377 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v377])(v407, v344, v376);
          v345 = v266;
        }
        LOBYTE(v407[0]) = 0;
        v408 = -1;
        v267 = v347;
        if (v347 != -1)
        {
          ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v347])(&v371, v407, v346);
          v408 = v267;
          v266 = v345;
        }
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        if (v266 != -1)
        {
          ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v266])(&v371, v409, v344);
          v410 = v266;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v367, (uint64_t)v407, 2);
        WGSL::constantAdd(v17, &v367, (uint64_t)&v371);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v367, v268);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v363, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v363, v407);
        v269 = v374;
        if (v374)
        {
LABEL_628:
          if (v269 != 1)
            goto LABEL_824;
          v304 = v372[0];
          if (v372[0])
            *(_DWORD *)v372[0] += 2;
          *(_QWORD *)(a3 + 8) = v304;
          v305 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_716;
        }
        v342[0] = 0;
        v343 = -1;
        v270 = v373;
        if (v373 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v373])(v407, v342, v372);
          v343 = v270;
        }
        v407[0] = v16;
        v271 = 2;
LABEL_651:
        v408 = v271;
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        v312 = v3[6];
        if ((_DWORD)v312 != -1)
        {
          ((void (*)(unsigned int **, _QWORD *, _DWORD *))off_1E0FD8010[v312])(&v367, v409, v335);
          v410 = v312;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v363, (uint64_t)v407, 2);
        WGSL::constantMultiply(a1, &v363, (uint64_t)&v367);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v363, v313);
        if (v410 != -1)
          ((void (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v410])(v340, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v408])(v340, v407);
        if (v370)
        {
          if (v370 != 1)
            goto LABEL_824;
          v314 = v368[0];
          if (v368[0])
            *(_DWORD *)v368[0] += 2;
          *(_QWORD *)(a3 + 8) = v314;
          v315 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_712;
        }
        v340[0] = 0;
        v341 = -1;
        v316 = v369;
        if (v369 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v369])(v407, v340, v368);
          v341 = v316;
        }
        LOBYTE(v407[0]) = 0;
        v408 = -1;
        v317 = v343;
        if (v343 != -1)
        {
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v343])(&v363, v407, v342);
          v408 = v317;
        }
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        v318 = v3[12];
        if ((_DWORD)v318 != -1)
        {
          ((void (*)(int **, _QWORD *, _DWORD *))off_1E0FD8010[v318])(&v363, v409, v334);
          v410 = v318;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(v338, (uint64_t)v407, 2);
        WGSL::constantMultiply(a1, v338, (uint64_t)&v363);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)v338, v319);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v337, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v337, v407);
        if (v366)
        {
          if (v366 != 1)
            goto LABEL_824;
          v320 = v364[0];
          if (v364[0])
            *(_DWORD *)v364[0] += 2;
          *(_QWORD *)(a3 + 8) = v320;
          v321 = 1;
          *(_DWORD *)(a3 + 32) = 1;
        }
        else
        {
          LOBYTE(v338[0]) = 0;
          v339 = -1;
          v328 = v365;
          if (v365 != -1)
          {
            ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v365])(v407, v338, v364);
            v339 = v328;
          }
          LOBYTE(v407[0]) = 0;
          v408 = -1;
          v329 = v341;
          if (v341 != -1)
          {
            ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v341])(&v337, v407, v340);
            v408 = v329;
            v328 = v339;
          }
          LOBYTE(v409[0]) = 0;
          v410 = -1;
          if (v328 != -1)
          {
            ((void (*)(int **, _QWORD *, int **))off_1E0FD8010[v328])(&v337, v409, v338);
            v410 = v328;
          }
          WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v337, (uint64_t)v407, 2);
          WGSL::constantMinus(a1, &v337, a3);
          result = (uint64_t)WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v337, v330);
          if (v410 != -1)
            result = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v410])(&v362, v409);
          v410 = -1;
          if (v408 != -1)
            result = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v408])(&v362, v407);
          if (v339 != -1)
            result = ((uint64_t (*)(_QWORD *, int **))off_1E0FD7CC8[v339])(v407, v338);
          v321 = v366;
          if (v366 == -1)
          {
LABEL_709:
            if (v341 != -1)
              result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v341])(v407, v340);
            v315 = v370;
            if (v370 == -1)
            {
LABEL_713:
              if (v343 != -1)
                result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v343])(v407, v342);
              v305 = v374;
              if (v374 == -1)
              {
LABEL_717:
                if (v345 != -1)
                  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v345])(v407, v344);
                v295 = v378;
                if (v378 == -1)
                {
LABEL_721:
                  if (v347 != -1)
                    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v347])(v407, v346);
                  v285 = v382;
                  if (v382 == -1)
                  {
LABEL_725:
                    if (v349 != -1)
                      result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v349])(v407, v348);
                    v274 = v386;
                    if (v386 == -1)
                    {
LABEL_729:
                      if (v351 != -1)
                        result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v351])(v407, v350);
                      v247 = v390;
                      if (v390 == -1)
                      {
LABEL_733:
                        if (v353 != -1)
                          result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v353])(v407, v352);
                        v209 = v394;
                        if (v394 == -1)
                        {
LABEL_737:
                          if (v355 != -1)
                            result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v355])(v407, v354);
                          v168 = v398;
                          if (v398 == -1)
                          {
LABEL_741:
                            if (v357 != -1)
                              result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v357])(v407, v356);
                            v140 = v402;
                            if (v402 == -1)
                            {
LABEL_745:
                              if (v359 != -1)
                                result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v359])(v407, v358);
                              v92 = v406;
                              if (v406 == -1)
                              {
LABEL_749:
                                if (v361 != -1)
                                  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v361])(v407, v360);
                                v40 = v414;
                                if (v414 != -1)
                                  return ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v40])(v407, v412);
                                return result;
                              }
LABEL_748:
                              result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v92])(v407, v404);
                              goto LABEL_749;
                            }
LABEL_744:
                            result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v140])(v407, v400);
                            goto LABEL_745;
                          }
LABEL_740:
                          result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v168])(v407, v396);
                          goto LABEL_741;
                        }
LABEL_736:
                        result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v209])(v407, v392);
                        goto LABEL_737;
                      }
LABEL_732:
                      result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v247])(v407, v388);
                      goto LABEL_733;
                    }
LABEL_728:
                    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v274])(v407, v384);
                    goto LABEL_729;
                  }
LABEL_724:
                  result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v285])(v407, v380);
                  goto LABEL_725;
                }
LABEL_720:
                result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v295])(v407, v376);
                goto LABEL_721;
              }
LABEL_716:
              result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v305])(v407, v372);
              goto LABEL_717;
            }
LABEL_712:
            result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v315])(v407, v368);
            goto LABEL_713;
          }
        }
        result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v321])(v407, v364);
        goto LABEL_709;
      }
    }
    else
    {
      v383 = (int *)(v216 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v383);
      if (*v217 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D829CLL);
      }
      v218 = v217[12];
      v219 = (int *)(v217 + 8);
      v220 = v410;
      if (v218 == -1)
      {
        if (v410 == -1)
          goto LABEL_454;
      }
      else if (v410 == -1)
      {
        goto LABEL_430;
      }
    }
    v383 = v219;
    ((void (*)(int **))off_1E0FD80E0[v220])(&v383);
    goto LABEL_454;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)(a1 + 48) != 1)
      goto LABEL_824;
    v25 = *((_WORD *)v3 + 28);
    v26 = *(_QWORD *)a1;
    LOBYTE(v407[0]) = 0;
    v408 = -1;
    v27 = v3[12];
    if ((_DWORD)v27 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v27])(&v411, v407, v3 + 8);
      v408 = v27;
    }
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    v28 = v3[6];
    if ((_DWORD)v28 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v28])(&v411, v409, v3 + 2);
      v410 = v28;
    }
    v29 = WTF::fastMalloc((WTF *)0x38);
    v30 = (unsigned int *)v29;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_DWORD *)v29 = 2;
    *(_OWORD *)(v29 + 24) = 0u;
    *(_OWORD *)(v29 + 40) = 0u;
    v403 = v29;
    if (v408 == -1)
    {
      *(_DWORD *)(v29 + 24) = -1;
      v32 = (unsigned int *)(v29 + 32);
      v33 = v410;
      if (v410 == -1)
      {
        v31 = 0;
LABEL_45:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v31])(&v411, v32);
        v30[12] = -1;
        goto LABEL_80;
      }
    }
    else
    {
      v411 = v29 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v411);
      if (*v30 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D7318);
      }
      v31 = v30[12];
      v32 = v30 + 8;
      v33 = v410;
      if (v31 == -1)
      {
        if (v410 == -1)
          goto LABEL_80;
      }
      else if (v410 == -1)
      {
        goto LABEL_45;
      }
    }
    v411 = (uint64_t)v32;
    ((void (*)(uint64_t *))off_1E0FD80E0[v33])(&v411);
LABEL_80:
    WGSL::constantDot(v26, (uint64_t)&v411);
    v50 = *v30;
    if ((_DWORD)v50)
    {
      v51 = 24 * v50;
      v52 = v30 + 6;
      do
      {
        v49 = v52 - 4;
        v53 = *v52;
        if ((_DWORD)v53 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v53])(&v399, v49);
        *v52 = -1;
        v52 += 6;
        v51 -= 24;
      }
      while (v51);
    }
    WTF::fastFree((WTF *)v30, v49);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
    v47 = v414;
    if (v414)
      goto LABEL_90;
    v360[0] = 0;
    v361 = -1;
    v55 = v413;
    if (v413 == -1)
    {
      LOBYTE(v407[0]) = 0;
      v408 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v413])(v407, v360, v412);
      v361 = v55;
      LOBYTE(v407[0]) = 0;
      v408 = -1;
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v55])(&v399, v407, v360);
      v408 = v55;
    }
    LOWORD(v409[0]) = 0x4000;
    v410 = 1;
    v66 = WTF::fastMalloc((WTF *)0x38);
    v67 = (unsigned int *)v66;
    *(_OWORD *)(v66 + 8) = 0u;
    *(_DWORD *)v66 = 2;
    *(_OWORD *)(v66 + 24) = 0u;
    *(_OWORD *)(v66 + 40) = 0u;
    v395 = (int *)v66;
    if (v408 == -1)
    {
      *(_DWORD *)(v66 + 24) = -1;
      v69 = (unsigned int *)(v66 + 32);
      v70 = v410;
      if (v410 == -1)
      {
        v68 = 0;
LABEL_122:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v68])(&v399, v69);
        v67[12] = -1;
        goto LABEL_157;
      }
    }
    else
    {
      v399 = v66 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v399);
      if (*v67 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D771CLL);
      }
      v68 = v67[12];
      v69 = v67 + 8;
      v70 = v410;
      if (v68 == -1)
      {
        if (v410 == -1)
          goto LABEL_157;
      }
      else if (v410 == -1)
      {
        goto LABEL_122;
      }
    }
    v399 = (uint64_t)v69;
    ((void (*)(uint64_t *))off_1E0FD80E0[v70])(&v399);
LABEL_157:
    WGSL::constantPow(&v395, (uint64_t)&v403);
    v87 = *v67;
    if ((_DWORD)v87)
    {
      v88 = 24 * v87;
      v89 = v67 + 6;
      do
      {
        v86 = v89 - 4;
        v90 = *v89;
        if ((_DWORD)v90 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v90])(&v399, v86);
        *v89 = -1;
        v89 += 6;
        v88 -= 24;
      }
      while (v88);
    }
    WTF::fastFree((WTF *)v67, v86);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
    v84 = v406;
    if (v406)
    {
LABEL_167:
      if (v84 != 1)
        goto LABEL_824;
      v91 = v404[0];
      if (v404[0])
        *(_DWORD *)v404[0] += 2;
      *(_QWORD *)(a3 + 8) = v91;
      v92 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_748;
    }
    v358[0] = 0;
    v359 = -1;
    v93 = v405;
    if (v405 == -1)
    {
      LOWORD(v407[0]) = 15360;
      v408 = 1;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v405])(v407, v358, v404);
      v359 = v93;
      LOWORD(v407[0]) = 15360;
      v408 = 1;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
      ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v93])(&v395, v409, v358);
      v410 = v93;
    }
    v104 = WTF::fastMalloc((WTF *)0x38);
    v105 = (unsigned int *)v104;
    *(_OWORD *)(v104 + 8) = 0u;
    *(_DWORD *)v104 = 2;
    *(_OWORD *)(v104 + 24) = 0u;
    *(_OWORD *)(v104 + 40) = 0u;
    v391 = (int *)v104;
    if (v408 == -1)
    {
      *(_DWORD *)(v104 + 24) = -1;
      v107 = (int *)(v104 + 32);
      v108 = v410;
      if (v410 == -1)
      {
        v106 = 0;
LABEL_199:
        ((void (*)(int **, int *))off_1E0FD7CC8[v106])(&v395, v107);
        v105[12] = -1;
        goto LABEL_244;
      }
    }
    else
    {
      v395 = (int *)(v104 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
      if (*v105 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D7D70);
      }
      v106 = v105[12];
      v107 = (int *)(v105 + 8);
      v108 = v410;
      if (v106 == -1)
      {
        if (v410 == -1)
          goto LABEL_244;
      }
      else if (v410 == -1)
      {
        goto LABEL_199;
      }
    }
    v395 = v107;
    ((void (*)(int **))off_1E0FD80E0[v108])(&v395);
LABEL_244:
    WGSL::constantMinus(v26, &v391, (uint64_t)&v399);
    v135 = *v105;
    if ((_DWORD)v135)
    {
      v136 = 24 * v135;
      v137 = v105 + 6;
      do
      {
        v134 = v137 - 4;
        v138 = *v137;
        if ((_DWORD)v138 != -1)
          ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v138])(&v395, v134);
        *v137 = -1;
        v137 += 6;
        v136 -= 24;
      }
      while (v136);
    }
    WTF::fastFree((WTF *)v105, v134);
    if (v410 != -1)
      ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v395, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v395, v407);
    v127 = v402;
    if (v402)
    {
LABEL_254:
      if (v127 != 1)
        goto LABEL_824;
      v139 = v400[0];
      if (v400[0])
        *(_DWORD *)v400[0] += 2;
      *(_QWORD *)(a3 + 8) = v139;
      v140 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_744;
    }
    v356[0] = 0;
    v357 = -1;
    v141 = v401;
    if (v401 != -1)
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v401])(v407, v356, v400);
      v357 = v141;
    }
    LOWORD(v407[0]) = v25;
    v408 = 1;
    LOWORD(v409[0]) = 0x4000;
    v410 = 1;
    v142 = WTF::fastMalloc((WTF *)0x38);
    v143 = (unsigned int *)v142;
    *(_OWORD *)(v142 + 8) = 0u;
    *(_DWORD *)v142 = 2;
    *(_OWORD *)(v142 + 24) = 0u;
    *(_OWORD *)(v142 + 40) = 0u;
    v391 = (int *)v142;
    if (v408 == -1)
    {
      *(_DWORD *)(v142 + 24) = -1;
      v145 = (int *)(v142 + 32);
      v146 = v410;
      if (v410 == -1)
      {
        v144 = 0;
LABEL_273:
        ((void (*)(int **, int *))off_1E0FD7CC8[v144])(&v395, v145);
        v143[12] = -1;
        goto LABEL_308;
      }
    }
    else
    {
      v395 = (int *)(v142 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
      if (*v143 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D81FCLL);
      }
      v144 = v143[12];
      v145 = (int *)(v143 + 8);
      v146 = v410;
      if (v144 == -1)
      {
        if (v410 == -1)
          goto LABEL_308;
      }
      else if (v410 == -1)
      {
        goto LABEL_273;
      }
    }
    v395 = v145;
    ((void (*)(int **))off_1E0FD80E0[v146])(&v395);
LABEL_308:
    WGSL::constantPow(&v391, (uint64_t)&v395);
    v163 = *v143;
    if ((_DWORD)v163)
    {
      v164 = 24 * v163;
      v165 = v143 + 6;
      do
      {
        v162 = v165 - 4;
        v166 = *v165;
        if ((_DWORD)v166 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v166])(&v387, v162);
        *v165 = -1;
        v165 += 6;
        v164 -= 24;
      }
      while (v164);
    }
    WTF::fastFree((WTF *)v143, v162);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
    v160 = v398;
    if (v398)
    {
LABEL_318:
      if (v160 != 1)
        goto LABEL_824;
      v167 = v396[0];
      if (v396[0])
        *(_DWORD *)v396[0] += 2;
      *(_QWORD *)(a3 + 8) = v167;
      v168 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_740;
    }
    v354[0] = 0;
    v355 = -1;
    v169 = v397;
    if (v397 == -1)
    {
      LOBYTE(v407[0]) = 0;
      v408 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v397])(v407, v354, v396);
      v355 = v169;
      LOBYTE(v407[0]) = 0;
      v408 = -1;
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v169])(&v387, v407, v354);
      v408 = v169;
    }
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    v182 = v357;
    if (v357 != -1)
    {
      ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v357])(&v387, v409, v356);
      v410 = v182;
    }
    v183 = WTF::fastMalloc((WTF *)0x38);
    v184 = (unsigned int *)v183;
    *(_OWORD *)(v183 + 8) = 0u;
    *(_DWORD *)v183 = 2;
    *(_OWORD *)(v183 + 24) = 0u;
    *(_OWORD *)(v183 + 40) = 0u;
    v383 = (int *)v183;
    if (v408 == -1)
    {
      *(_DWORD *)(v183 + 24) = -1;
      v186 = (unsigned int *)(v183 + 32);
      v187 = v410;
      if (v410 == -1)
      {
        v185 = 0;
LABEL_356:
        ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v185])(&v387, v186);
        v184[12] = -1;
        goto LABEL_391;
      }
    }
    else
    {
      v387 = v183 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v387);
      if (*v184 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D825CLL);
      }
      v185 = v184[12];
      v186 = v184 + 8;
      v187 = v410;
      if (v185 == -1)
      {
        if (v410 == -1)
          goto LABEL_391;
      }
      else if (v410 == -1)
      {
        goto LABEL_356;
      }
    }
    v387 = (uint64_t)v186;
    ((void (*)(uint64_t *))off_1E0FD80E0[v187])(&v387);
LABEL_391:
    WGSL::constantMultiply(v26, &v383, (uint64_t)&v391);
    v204 = *v184;
    if ((_DWORD)v204)
    {
      v205 = 24 * v204;
      v206 = v184 + 6;
      do
      {
        v203 = v206 - 4;
        v207 = *v206;
        if ((_DWORD)v207 != -1)
          ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v207])(&v387, v203);
        *v206 = -1;
        v206 += 6;
        v205 -= 24;
      }
      while (v205);
    }
    WTF::fastFree((WTF *)v184, v203);
    if (v410 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
    v410 = -1;
    if (v408 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
    v201 = v394;
    if (v394)
    {
LABEL_401:
      if (v201 != 1)
        goto LABEL_824;
      v208 = v392[0];
      if (v392[0])
        *(_DWORD *)v392[0] += 2;
      *(_QWORD *)(a3 + 8) = v208;
      v209 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      goto LABEL_736;
    }
    v352[0] = 0;
    v353 = -1;
    v210 = v393;
    if (v393 == -1)
    {
      LOWORD(v407[0]) = 15360;
      v408 = 1;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
    }
    else
    {
      ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v393])(v407, v352, v392);
      v353 = v210;
      LOWORD(v407[0]) = 15360;
      v408 = 1;
      LOBYTE(v409[0]) = 0;
      v410 = -1;
      ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v210])(&v383, v409, v352);
      v410 = v210;
    }
    v221 = WTF::fastMalloc((WTF *)0x38);
    v222 = (unsigned int *)v221;
    *(_OWORD *)(v221 + 8) = 0u;
    *(_DWORD *)v221 = 2;
    *(_OWORD *)(v221 + 24) = 0u;
    *(_OWORD *)(v221 + 40) = 0u;
    v379 = (int *)v221;
    if (v408 == -1)
    {
      *(_DWORD *)(v221 + 24) = -1;
      v224 = (int *)(v221 + 32);
      v225 = v410;
      if (v410 == -1)
      {
        v223 = 0;
LABEL_433:
        ((void (*)(int **, int *))off_1E0FD7CC8[v223])(&v383, v224);
        v222[12] = -1;
LABEL_468:
        WGSL::constantMinus(v26, &v379, (uint64_t)&v387);
        v242 = *v222;
        if ((_DWORD)v242)
        {
          v243 = 24 * v242;
          v244 = v222 + 6;
          do
          {
            v241 = v244 - 4;
            v245 = *v244;
            if ((_DWORD)v245 != -1)
              ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v245])(&v383, v241);
            *v244 = -1;
            v244 += 6;
            v243 -= 24;
          }
          while (v243);
        }
        WTF::fastFree((WTF *)v222, v241);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v383, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v383, v407);
        v239 = v390;
        if (v390)
        {
LABEL_478:
          if (v239 != 1)
            goto LABEL_824;
          v246 = v388[0];
          if (v388[0])
            *(_DWORD *)v388[0] += 2;
          *(_QWORD *)(a3 + 8) = v246;
          v247 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_732;
        }
        v350[0] = 0;
        v351 = -1;
        v248 = v389;
        if (v389 == -1)
        {
          LOBYTE(v407[0]) = 0;
          v408 = -1;
        }
        else
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v389])(v407, v350, v388);
          v351 = v248;
          LOBYTE(v407[0]) = 0;
          v408 = -1;
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v248])(&v375, v407, v350);
          v408 = v248;
        }
        LOWORD(v409[0]) = 0;
        v410 = 1;
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v379, (uint64_t)v407, 2);
        WGSL::constantLt(&v379, (uint64_t)&v383);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v379, v272);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v375, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v375, v407);
        v257 = v386;
        if (v386)
          goto LABEL_543;
        v348[0] = 0;
        v349 = -1;
        v275 = v385;
        if (v385 == -1)
          goto LABEL_824;
        ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v385])(v407, v348, v384);
        v349 = v275;
        if (v275 != 6)
          goto LABEL_824;
        if (v348[0])
        {
LABEL_550:
          result = WGSL::zeroValue((uint64_t)v407, a1);
          *(_BYTE *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 24) = -1;
          v276 = v408;
          if (v408 == -1)
          {
            *(_DWORD *)(a3 + 32) = 0;
          }
          else
          {
            result = ((uint64_t (*)(int **))off_1E0FD7D20[v408])(&v379);
            *(_DWORD *)(a3 + 24) = v276;
            v277 = v408;
            *(_DWORD *)(a3 + 32) = 0;
            if ((_DWORD)v277 != -1)
              result = ((uint64_t (*)(int **, _QWORD *))off_1E0FD7CC8[v277])(&v379, v407);
          }
          goto LABEL_725;
        }
        LOWORD(v407[0]) = v25;
        v408 = 1;
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        v282 = v361;
        if (v361 != -1)
        {
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v361])(&v379, v409, v360);
          v410 = v282;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v375, (uint64_t)v407, 2);
        WGSL::constantMultiply(v26, &v375, (uint64_t)&v379);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v375, v283);
        if (v410 != -1)
          ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v410])(&v371, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v408])(&v371, v407);
        v261 = v382;
        if (v382)
          goto LABEL_572;
        v346[0] = 0;
        v347 = -1;
        v291 = v381;
        if (v381 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v381])(v407, v346, v380);
          v347 = v291;
        }
        LOBYTE(v407[0]) = 0;
        v408 = -1;
        v292 = v351;
        if (v351 != -1)
        {
          ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v351])(&v375, v407, v350);
          v408 = v292;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v371, (uint64_t)v407, 1);
        WGSL::constantSqrt(&v371, (uint64_t)&v375);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector(&v371, v293);
        if (v408 != -1)
          ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v408])(&v367, v407);
        v265 = v378;
        if (v378)
        {
LABEL_598:
          if (v265 != 1)
            goto LABEL_824;
          v294 = v376[0];
          if (v376[0])
            *(_DWORD *)v376[0] += 2;
          *(_QWORD *)(a3 + 8) = v294;
          v295 = 1;
          *(_DWORD *)(a3 + 32) = 1;
          goto LABEL_720;
        }
        v344[0] = 0;
        v345 = -1;
        v301 = v377;
        if (v377 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v377])(v407, v344, v376);
          v345 = v301;
        }
        LOBYTE(v407[0]) = 0;
        v408 = -1;
        v302 = v347;
        if (v347 != -1)
        {
          ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v347])(&v371, v407, v346);
          v408 = v302;
          v301 = v345;
        }
        LOBYTE(v409[0]) = 0;
        v410 = -1;
        if (v301 != -1)
        {
          ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v301])(&v371, v409, v344);
          v410 = v301;
        }
        WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v367, (uint64_t)v407, 2);
        WGSL::constantAdd(v26, &v367, (uint64_t)&v371);
        WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v367, v303);
        if (v410 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v363, v409);
        v410 = -1;
        if (v408 != -1)
          ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v363, v407);
        v269 = v374;
        if (v374)
          goto LABEL_628;
        v342[0] = 0;
        v343 = -1;
        v311 = v373;
        if (v373 != -1)
        {
          ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v373])(v407, v342, v372);
          v343 = v311;
        }
        LOWORD(v407[0]) = v25;
        v271 = 1;
        goto LABEL_651;
      }
    }
    else
    {
      v383 = (int *)(v221 + 8);
      ((void (*)(int **))off_1E0FD80E0[v408])(&v383);
      if (*v222 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825D82BCLL);
      }
      v223 = v222[12];
      v224 = (int *)(v222 + 8);
      v225 = v410;
      if (v223 == -1)
      {
        if (v410 == -1)
          goto LABEL_468;
      }
      else if (v410 == -1)
      {
        goto LABEL_433;
      }
    }
    v383 = v224;
    ((void (*)(int **))off_1E0FD80E0[v225])(&v383);
    goto LABEL_468;
  }
  if (v6)
    goto LABEL_825;
  if (*(_DWORD *)(a1 + 48) != 1)
    goto LABEL_824;
  v7 = v3[14];
  v8 = *(_QWORD *)a1;
  LOBYTE(v407[0]) = 0;
  v408 = -1;
  v9 = v3[12];
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v9])(&v411, v407, v3 + 8);
    v408 = v9;
  }
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  v10 = v3[6];
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, unsigned int *))off_1E0FD8010[v10])(&v411, v409, v3 + 2);
    v410 = v10;
  }
  v11 = WTF::fastMalloc((WTF *)0x38);
  v12 = (unsigned int *)v11;
  *(_DWORD *)v11 = 2;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  v403 = v11;
  if (v408 == -1)
  {
    *(_DWORD *)(v11 + 24) = -1;
    v14 = (unsigned int *)(v11 + 32);
    v15 = v410;
    if (v410 == -1)
    {
      v13 = 0;
LABEL_39:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v13])(&v411, v14);
      v12[12] = -1;
      goto LABEL_48;
    }
  }
  else
  {
    v411 = v11 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v411);
    if (*v12 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D72D8);
    }
    v13 = v12[12];
    v14 = v12 + 8;
    v15 = v410;
    if (v13 == -1)
    {
      if (v410 == -1)
        goto LABEL_48;
    }
    else if (v410 == -1)
    {
      goto LABEL_39;
    }
  }
  v411 = (uint64_t)v14;
  ((void (*)(uint64_t *))off_1E0FD80E0[v15])(&v411);
LABEL_48:
  WGSL::constantDot(v8, (uint64_t)&v411);
  v35 = *v12;
  if ((_DWORD)v35)
  {
    v36 = 24 * v35;
    v37 = v12 + 6;
    do
    {
      v34 = v37 - 4;
      v38 = *v37;
      if ((_DWORD)v38 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v38])(&v399, v34);
      *v37 = -1;
      v37 += 6;
      v36 -= 24;
    }
    while (v36);
  }
  WTF::fastFree((WTF *)v12, v34);
  if (v410 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
  if (v414)
  {
    if (v414 == 1)
    {
      v39 = v412[0];
      if (v412[0])
        *(_DWORD *)v412[0] += 2;
      *(_QWORD *)(a3 + 8) = v39;
      v40 = 1;
      *(_DWORD *)(a3 + 32) = 1;
      return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7DD0[v40])(v407, v412);
    }
LABEL_824:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v360[0] = 0;
  v361 = -1;
  v41 = v413;
  if (v413 == -1)
  {
    LOBYTE(v407[0]) = 0;
    v408 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v413])(v407, v360, v412);
    v361 = v41;
    LOBYTE(v407[0]) = 0;
    v408 = -1;
    ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v41])(&v399, v407, v360);
    v408 = v41;
  }
  LODWORD(v409[0]) = 0x40000000;
  v410 = 0;
  v56 = WTF::fastMalloc((WTF *)0x38);
  v57 = (unsigned int *)v56;
  *(_OWORD *)(v56 + 8) = 0u;
  *(_DWORD *)v56 = 2;
  *(_OWORD *)(v56 + 24) = 0u;
  *(_OWORD *)(v56 + 40) = 0u;
  v395 = (int *)v56;
  if (v408 == -1)
  {
    *(_DWORD *)(v56 + 24) = -1;
    v59 = (unsigned int *)(v56 + 32);
    v60 = v410;
    if (v410 == -1)
    {
      v58 = 0;
LABEL_116:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v58])(&v399, v59);
      v57[12] = -1;
      goto LABEL_125;
    }
  }
  else
  {
    v399 = v56 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v399);
    if (*v57 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D76DCLL);
    }
    v58 = v57[12];
    v59 = v57 + 8;
    v60 = v410;
    if (v58 == -1)
    {
      if (v410 == -1)
        goto LABEL_125;
    }
    else if (v410 == -1)
    {
      goto LABEL_116;
    }
  }
  v399 = (uint64_t)v59;
  ((void (*)(uint64_t *))off_1E0FD80E0[v60])(&v399);
LABEL_125:
  WGSL::constantPow(&v395, (uint64_t)&v403);
  v72 = *v57;
  if ((_DWORD)v72)
  {
    v73 = 24 * v72;
    v74 = v57 + 6;
    do
    {
      v71 = v74 - 4;
      v75 = *v74;
      if ((_DWORD)v75 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v75])(&v399, v71);
      *v74 = -1;
      v74 += 6;
      v73 -= 24;
    }
    while (v73);
  }
  WTF::fastFree((WTF *)v57, v71);
  if (v410 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v399, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v399, v407);
  if (v406)
  {
    if (v406 != 1)
      goto LABEL_824;
    v76 = v404[0];
    if (v404[0])
      *(_DWORD *)v404[0] += 2;
    *(_QWORD *)(a3 + 8) = v76;
    v77 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_809;
  }
  v358[0] = 0;
  v359 = -1;
  v78 = v405;
  if (v405 == -1)
  {
    LODWORD(v407[0]) = 1065353216;
    v408 = 0;
    LOBYTE(v409[0]) = 0;
    v410 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v405])(v407, v358, v404);
    v359 = v78;
    LODWORD(v407[0]) = 1065353216;
    v408 = 0;
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v78])(&v395, v409, v358);
    v410 = v78;
  }
  v94 = WTF::fastMalloc((WTF *)0x38);
  v95 = (unsigned int *)v94;
  *(_OWORD *)(v94 + 8) = 0u;
  *(_DWORD *)v94 = 2;
  *(_OWORD *)(v94 + 24) = 0u;
  *(_OWORD *)(v94 + 40) = 0u;
  v391 = (int *)v94;
  if (v408 == -1)
  {
    *(_DWORD *)(v94 + 24) = -1;
    v97 = (int *)(v94 + 32);
    v98 = v410;
    if (v410 == -1)
    {
      v96 = 0;
LABEL_193:
      ((void (*)(int **, int *))off_1E0FD7CC8[v96])(&v395, v97);
      v95[12] = -1;
      goto LABEL_202;
    }
  }
  else
  {
    v395 = (int *)(v94 + 8);
    ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
    if (*v95 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D7D30);
    }
    v96 = v95[12];
    v97 = (int *)(v95 + 8);
    v98 = v410;
    if (v96 == -1)
    {
      if (v410 == -1)
        goto LABEL_202;
    }
    else if (v410 == -1)
    {
      goto LABEL_193;
    }
  }
  v395 = v97;
  ((void (*)(int **))off_1E0FD80E0[v98])(&v395);
LABEL_202:
  WGSL::constantMinus(v8, &v391, (uint64_t)&v399);
  v110 = *v95;
  if ((_DWORD)v110)
  {
    v111 = 24 * v110;
    v112 = v95 + 6;
    do
    {
      v109 = v112 - 4;
      v113 = *v112;
      if ((_DWORD)v113 != -1)
        ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v113])(&v395, v109);
      *v112 = -1;
      v112 += 6;
      v111 -= 24;
    }
    while (v111);
  }
  WTF::fastFree((WTF *)v95, v109);
  if (v410 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v395, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v395, v407);
  if (v402)
  {
    if (v402 != 1)
      goto LABEL_824;
    v114 = v400[0];
    if (v400[0])
      *(_DWORD *)v400[0] += 2;
    *(_QWORD *)(a3 + 8) = v114;
    v115 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_805;
  }
  v356[0] = 0;
  v357 = -1;
  v116 = v401;
  if (v401 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v401])(v407, v356, v400);
    v357 = v116;
  }
  LODWORD(v407[0]) = v7;
  v408 = 0;
  LODWORD(v409[0]) = 0x40000000;
  v410 = 0;
  v117 = WTF::fastMalloc((WTF *)0x38);
  v118 = (unsigned int *)v117;
  *(_OWORD *)(v117 + 8) = 0u;
  *(_DWORD *)v117 = 2;
  *(_OWORD *)(v117 + 24) = 0u;
  *(_OWORD *)(v117 + 40) = 0u;
  v391 = (int *)v117;
  if (v408 == -1)
  {
    *(_DWORD *)(v117 + 24) = -1;
    v120 = (int *)(v117 + 32);
    v121 = v410;
    if (v410 == -1)
    {
      v119 = 0;
LABEL_267:
      ((void (*)(int **, int *))off_1E0FD7CC8[v119])(&v395, v120);
      v118[12] = -1;
      goto LABEL_276;
    }
  }
  else
  {
    v395 = (int *)(v117 + 8);
    ((void (*)(int **))off_1E0FD80E0[v408])(&v395);
    if (*v118 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D81BCLL);
    }
    v119 = v118[12];
    v120 = (int *)(v118 + 8);
    v121 = v410;
    if (v119 == -1)
    {
      if (v410 == -1)
        goto LABEL_276;
    }
    else if (v410 == -1)
    {
      goto LABEL_267;
    }
  }
  v395 = v120;
  ((void (*)(int **))off_1E0FD80E0[v121])(&v395);
LABEL_276:
  WGSL::constantPow(&v391, (uint64_t)&v395);
  v148 = *v118;
  if ((_DWORD)v148)
  {
    v149 = 24 * v148;
    v150 = v118 + 6;
    do
    {
      v147 = v150 - 4;
      v151 = *v150;
      if ((_DWORD)v151 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v151])(&v387, v147);
      *v150 = -1;
      v150 += 6;
      v149 -= 24;
    }
    while (v149);
  }
  WTF::fastFree((WTF *)v118, v147);
  if (v410 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
  if (v398)
  {
    if (v398 != 1)
      goto LABEL_824;
    v152 = v396[0];
    if (v396[0])
      *(_DWORD *)v396[0] += 2;
    *(_QWORD *)(a3 + 8) = v152;
    v153 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_801;
  }
  v354[0] = 0;
  v355 = -1;
  v154 = v397;
  if (v397 == -1)
  {
    LOBYTE(v407[0]) = 0;
    v408 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v397])(v407, v354, v396);
    v355 = v154;
    LOBYTE(v407[0]) = 0;
    v408 = -1;
    ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v154])(&v387, v407, v354);
    v408 = v154;
  }
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  v170 = v357;
  if (v357 != -1)
  {
    ((void (*)(uint64_t *, _QWORD *, _BYTE *))off_1E0FD8010[v357])(&v387, v409, v356);
    v410 = v170;
  }
  v171 = WTF::fastMalloc((WTF *)0x38);
  v172 = (unsigned int *)v171;
  *(_OWORD *)(v171 + 8) = 0u;
  *(_DWORD *)v171 = 2;
  *(_OWORD *)(v171 + 24) = 0u;
  *(_OWORD *)(v171 + 40) = 0u;
  v383 = (int *)v171;
  if (v408 == -1)
  {
    *(_DWORD *)(v171 + 24) = -1;
    v174 = (unsigned int *)(v171 + 32);
    v175 = v410;
    if (v410 == -1)
    {
      v173 = 0;
LABEL_350:
      ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v173])(&v387, v174);
      v172[12] = -1;
      goto LABEL_359;
    }
  }
  else
  {
    v387 = v171 + 8;
    ((void (*)(uint64_t *))off_1E0FD80E0[v408])(&v387);
    if (*v172 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D821CLL);
    }
    v173 = v172[12];
    v174 = v172 + 8;
    v175 = v410;
    if (v173 == -1)
    {
      if (v410 == -1)
        goto LABEL_359;
    }
    else if (v410 == -1)
    {
      goto LABEL_350;
    }
  }
  v387 = (uint64_t)v174;
  ((void (*)(uint64_t *))off_1E0FD80E0[v175])(&v387);
LABEL_359:
  WGSL::constantMultiply(v8, &v383, (uint64_t)&v391);
  v189 = *v172;
  if ((_DWORD)v189)
  {
    v190 = 24 * v189;
    v191 = v172 + 6;
    do
    {
      v188 = v191 - 4;
      v192 = *v191;
      if ((_DWORD)v192 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v192])(&v387, v188);
      *v191 = -1;
      v191 += 6;
      v190 -= 24;
    }
    while (v190);
  }
  WTF::fastFree((WTF *)v172, v188);
  if (v410 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v410])(&v387, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(uint64_t *, _QWORD *))off_1E0FD7CC8[v408])(&v387, v407);
  if (v394)
  {
    if (v394 != 1)
      goto LABEL_824;
    v193 = v392[0];
    if (v392[0])
      *(_DWORD *)v392[0] += 2;
    *(_QWORD *)(a3 + 8) = v193;
    v194 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_797;
  }
  v352[0] = 0;
  v353 = -1;
  v195 = v393;
  if (v393 == -1)
  {
    LODWORD(v407[0]) = 1065353216;
    v408 = 0;
    LOBYTE(v409[0]) = 0;
    v410 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v393])(v407, v352, v392);
    v353 = v195;
    LODWORD(v407[0]) = 1065353216;
    v408 = 0;
    LOBYTE(v409[0]) = 0;
    v410 = -1;
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v195])(&v383, v409, v352);
    v410 = v195;
  }
  v211 = WTF::fastMalloc((WTF *)0x38);
  v212 = (unsigned int *)v211;
  *(_OWORD *)(v211 + 8) = 0u;
  *(_DWORD *)v211 = 2;
  *(_OWORD *)(v211 + 24) = 0u;
  *(_OWORD *)(v211 + 40) = 0u;
  v379 = (int *)v211;
  if (v408 == -1)
  {
    *(_DWORD *)(v211 + 24) = -1;
    v214 = (int *)(v211 + 32);
    v215 = v410;
    if (v410 == -1)
    {
      v213 = 0;
LABEL_427:
      ((void (*)(int **, int *))off_1E0FD7CC8[v213])(&v383, v214);
      v212[12] = -1;
      goto LABEL_436;
    }
  }
  else
  {
    v383 = (int *)(v211 + 8);
    ((void (*)(int **))off_1E0FD80E0[v408])(&v383);
    if (*v212 < 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D827CLL);
    }
    v213 = v212[12];
    v214 = (int *)(v212 + 8);
    v215 = v410;
    if (v213 == -1)
    {
      if (v410 == -1)
        goto LABEL_436;
    }
    else if (v410 == -1)
    {
      goto LABEL_427;
    }
  }
  v383 = v214;
  ((void (*)(int **))off_1E0FD80E0[v215])(&v383);
LABEL_436:
  WGSL::constantMinus(v8, &v379, (uint64_t)&v387);
  v227 = *v212;
  if ((_DWORD)v227)
  {
    v228 = 24 * v227;
    v229 = v212 + 6;
    do
    {
      v226 = v229 - 4;
      v230 = *v229;
      if ((_DWORD)v230 != -1)
        ((void (*)(int **, _DWORD *))off_1E0FD7CC8[v230])(&v383, v226);
      *v229 = -1;
      v229 += 6;
      v228 -= 24;
    }
    while (v228);
  }
  WTF::fastFree((WTF *)v212, v226);
  if (v410 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v383, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v383, v407);
  if (v390)
  {
    if (v390 != 1)
      goto LABEL_824;
    v231 = v388[0];
    if (v388[0])
      *(_DWORD *)v388[0] += 2;
    *(_QWORD *)(a3 + 8) = v231;
    v232 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_793;
  }
  v350[0] = 0;
  v351 = -1;
  v233 = v389;
  if (v389 == -1)
  {
    LOBYTE(v407[0]) = 0;
    v408 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v389])(v407, v350, v388);
    v351 = v233;
    LOBYTE(v407[0]) = 0;
    v408 = -1;
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v233])(&v375, v407, v350);
    v408 = v233;
  }
  LODWORD(v409[0]) = 0;
  v410 = 0;
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v379, (uint64_t)v407, 2);
  WGSL::constantLt(&v379, (uint64_t)&v383);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v379, v249);
  if (v410 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v375, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v375, v407);
  if (v386)
  {
    if (v386 != 1)
      goto LABEL_824;
    v250 = v384[0];
    if (v384[0])
      *(_DWORD *)v384[0] += 2;
    *(_QWORD *)(a3 + 8) = v250;
    v251 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_789;
  }
  v348[0] = 0;
  v349 = -1;
  v252 = v385;
  if (v385 == -1)
    goto LABEL_824;
  ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v385])(v407, v348, v384);
  v349 = v252;
  if (v252 != 6)
    goto LABEL_824;
  if (v348[0])
  {
    result = WGSL::zeroValue((uint64_t)v407, a1);
    *(_BYTE *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 24) = -1;
    v254 = v408;
    if (v408 == -1)
    {
      *(_DWORD *)(a3 + 32) = 0;
    }
    else
    {
      result = ((uint64_t (*)(int **))off_1E0FD7D20[v408])(&v379);
      *(_DWORD *)(a3 + 24) = v254;
      v255 = v408;
      *(_DWORD *)(a3 + 32) = 0;
      if ((_DWORD)v255 != -1)
        result = ((uint64_t (*)(int **, _QWORD *))off_1E0FD7CC8[v255])(&v379, v407);
    }
    goto LABEL_786;
  }
  LODWORD(v407[0]) = v7;
  v408 = 0;
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  v278 = v361;
  if (v361 != -1)
  {
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v361])(&v379, v409, v360);
    v410 = v278;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v375, (uint64_t)v407, 2);
  WGSL::constantMultiply(v8, &v375, (uint64_t)&v379);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v375, v279);
  if (v410 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v410])(&v371, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(WTF **, _QWORD *))off_1E0FD7CC8[v408])(&v371, v407);
  if (v382)
  {
    if (v382 != 1)
      goto LABEL_824;
    v280 = v380[0];
    if (v380[0])
      *(_DWORD *)v380[0] += 2;
    *(_QWORD *)(a3 + 8) = v280;
    v281 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_785;
  }
  v346[0] = 0;
  v347 = -1;
  v286 = v381;
  if (v381 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v381])(v407, v346, v380);
    v347 = v286;
  }
  LOBYTE(v407[0]) = 0;
  v408 = -1;
  v287 = v351;
  if (v351 != -1)
  {
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v351])(&v375, v407, v350);
    v408 = v287;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v371, (uint64_t)v407, 1);
  WGSL::constantSqrt(&v371, (uint64_t)&v375);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector(&v371, v288);
  if (v408 != -1)
    ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v408])(&v367, v407);
  if (v378)
  {
    if (v378 != 1)
      goto LABEL_824;
    v289 = v376[0];
    if (v376[0])
      *(_DWORD *)v376[0] += 2;
    *(_QWORD *)(a3 + 8) = v289;
    v290 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_781;
  }
  v344[0] = 0;
  v345 = -1;
  v296 = v377;
  if (v377 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v377])(v407, v344, v376);
    v345 = v296;
  }
  LOBYTE(v407[0]) = 0;
  v408 = -1;
  v297 = v347;
  if (v347 != -1)
  {
    ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v347])(&v371, v407, v346);
    v408 = v297;
    v296 = v345;
  }
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  if (v296 != -1)
  {
    ((void (*)(WTF **, _QWORD *, _BYTE *))off_1E0FD8010[v296])(&v371, v409, v344);
    v410 = v296;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v367, (uint64_t)v407, 2);
  WGSL::constantAdd(v8, &v367, (uint64_t)&v371);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v367, v298);
  if (v410 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v363, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v363, v407);
  if (v374)
  {
    if (v374 != 1)
      goto LABEL_824;
    v299 = v372[0];
    if (v372[0])
      *(_DWORD *)v372[0] += 2;
    *(_QWORD *)(a3 + 8) = v299;
    v300 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_777;
  }
  v342[0] = 0;
  v343 = -1;
  v306 = v373;
  if (v373 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v373])(v407, v342, v372);
    v343 = v306;
  }
  LODWORD(v407[0]) = v7;
  v408 = 0;
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  v307 = v3[6];
  if ((_DWORD)v307 != -1)
  {
    ((void (*)(unsigned int **, _QWORD *, _DWORD *))off_1E0FD8010[v307])(&v367, v409, v335);
    v410 = v307;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v363, (uint64_t)v407, 2);
  WGSL::constantMultiply(a1, &v363, (uint64_t)&v367);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v363, v308);
  if (v410 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v410])(v340, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(_BYTE *, _QWORD *))off_1E0FD7CC8[v408])(v340, v407);
  if (v370)
  {
    if (v370 != 1)
      goto LABEL_824;
    v309 = v368[0];
    if (v368[0])
      *(_DWORD *)v368[0] += 2;
    *(_QWORD *)(a3 + 8) = v309;
    v310 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_773;
  }
  v340[0] = 0;
  v341 = -1;
  v322 = v369;
  if (v369 != -1)
  {
    ((void (*)(_QWORD *, _BYTE *, _QWORD *))off_1E0FD7D20[v369])(v407, v340, v368);
    v341 = v322;
  }
  LOBYTE(v407[0]) = 0;
  v408 = -1;
  v323 = v343;
  if (v343 != -1)
  {
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v343])(&v363, v407, v342);
    v408 = v323;
  }
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  v324 = v3[12];
  if ((_DWORD)v324 != -1)
  {
    ((void (*)(int **, _QWORD *, _DWORD *))off_1E0FD8010[v324])(&v363, v409, v334);
    v410 = v324;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(v338, (uint64_t)v407, 2);
  WGSL::constantMultiply(a1, v338, (uint64_t)&v363);
  WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)v338, v325);
  if (v410 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v410])(&v337, v409);
  v410 = -1;
  if (v408 != -1)
    ((void (*)(int **, _QWORD *))off_1E0FD7CC8[v408])(&v337, v407);
  if (v366)
  {
    if (v366 != 1)
      goto LABEL_824;
    v326 = v364[0];
    if (v364[0])
      *(_DWORD *)v364[0] += 2;
    *(_QWORD *)(a3 + 8) = v326;
    v327 = 1;
    *(_DWORD *)(a3 + 32) = 1;
    goto LABEL_769;
  }
  LOBYTE(v338[0]) = 0;
  v339 = -1;
  v331 = v365;
  if (v365 != -1)
  {
    ((void (*)(_QWORD *, int **, _QWORD *))off_1E0FD7D20[v365])(v407, v338, v364);
    v339 = v331;
  }
  LOBYTE(v407[0]) = 0;
  v408 = -1;
  v332 = v341;
  if (v341 != -1)
  {
    ((void (*)(int **, _QWORD *, _BYTE *))off_1E0FD8010[v341])(&v337, v407, v340);
    v408 = v332;
    v331 = v339;
  }
  LOBYTE(v409[0]) = 0;
  v410 = -1;
  if (v331 != -1)
  {
    ((void (*)(int **, _QWORD *, int **))off_1E0FD8010[v331])(&v337, v409, v338);
    v410 = v331;
  }
  WTF::FixedVector<WGSL::ConstantValue>::FixedVector(&v337, (uint64_t)v407, 2);
  WGSL::constantMinus(a1, &v337, a3);
  result = (uint64_t)WTF::FixedVector<WGSL::ConstantValue>::~FixedVector((WTF **)&v337, v333);
  if (v410 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v410])(&v362, v409);
  v410 = -1;
  if (v408 != -1)
    result = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v408])(&v362, v407);
  if (v339 != -1)
    result = ((uint64_t (*)(_QWORD *, int **))off_1E0FD7CC8[v339])(v407, v338);
  v327 = v366;
  if (v366 != -1)
LABEL_769:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v327])(v407, v364);
  if (v341 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v341])(v407, v340);
  v310 = v370;
  if (v370 != -1)
LABEL_773:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v310])(v407, v368);
  if (v343 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v343])(v407, v342);
  v300 = v374;
  if (v374 != -1)
LABEL_777:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v300])(v407, v372);
  if (v345 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v345])(v407, v344);
  v290 = v378;
  if (v378 != -1)
LABEL_781:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v290])(v407, v376);
  if (v347 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v347])(v407, v346);
  v281 = v382;
  if (v382 != -1)
LABEL_785:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v281])(v407, v380);
LABEL_786:
  if (v349 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v349])(v407, v348);
  v251 = v386;
  if (v386 != -1)
LABEL_789:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v251])(v407, v384);
  if (v351 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v351])(v407, v350);
  v232 = v390;
  if (v390 != -1)
LABEL_793:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v232])(v407, v388);
  if (v353 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v353])(v407, v352);
  v194 = v394;
  if (v394 != -1)
LABEL_797:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v194])(v407, v392);
  if (v355 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v355])(v407, v354);
  v153 = v398;
  if (v398 != -1)
LABEL_801:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v153])(v407, v396);
  if (v357 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v357])(v407, v356);
  v115 = v402;
  if (v402 != -1)
LABEL_805:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v115])(v407, v400);
  if (v359 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v359])(v407, v358);
  v77 = v406;
  if (v406 != -1)
LABEL_809:
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E0FD7DD0[v77])(v407, v404);
  if (v361 != -1)
    result = ((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v361])(v407, v360);
  v40 = v414;
  if (v414 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7DD0[v40])(v407, v412);
  return result;
}

uint64_t WGSL::constantReverseBits@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64x2_t v16;
  int8x16_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34[2];
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  _QWORD v42[2];
  unsigned int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D8B98);
  }
  LOBYTE(v42[0]) = 0;
  v43 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_59;
  v5 = v3 + 2;
  v6 = off_1E0FD8010[v4];
  ((void (*)(unint64_t **, _QWORD *, _DWORD *))v6)(&v37, v42, v3 + 2);
  v43 = v4;
  LOBYTE(v37) = 0;
  v39 = -1;
  ((void (*)(unint64_t *, unint64_t **, _QWORD *))v6)(v34, &v37, v42);
  v7 = 0;
  v39 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v37)
      v7 = *(_DWORD *)v37;
    else
      v7 = 0;
  }
  result = ((uint64_t (*)(unint64_t *, unint64_t **))off_1E0FD7CC8[v4])(v34, &v37);
  if (!v7)
  {
    v31 = v3[6];
    switch(v31)
    {
      case 5:
        v32 = (*(_QWORD *)v5 >> 29) & 2 | (*(_QWORD *)v5 >> 31) & 1 | (*(_QWORD *)v5 >> 27) & 4 | (*(_QWORD *)v5 >> 25) & 8 | (*(_QWORD *)v5 >> 23) & 0x10 | (*(_QWORD *)v5 >> 21) & 0x20 | (*(_QWORD *)v5 >> 19) & 0x40 | (*(_QWORD *)v5 >> 17) & 0x80 | (*(_QWORD *)v5 >> 15) & 0x100 | (*(_QWORD *)v5 >> 13) & 0x200 | (*(_QWORD *)v5 >> 11) & 0x400 | (*(_QWORD *)v5 >> 9) & 0x800 | (*(_QWORD *)v5 >> 7) & 0x1000 | (*(_QWORD *)v5 >> 5) & 0x2000 | (*(_QWORD *)v5 >> 3) & 0x4000 | (*(_QWORD *)v5 >> 1) & 0x8000 | (2 * *(_QWORD *)v5) & 0x10000 | (unint64_t)((8 * *(_QWORD *)v5) & 0x20000) | (32 * *(_QWORD *)v5) & 0x40000 | (*(_QWORD *)v5 << 7) & 0x80000 | (*(_QWORD *)v5 << 9) & 0x100000 | (*(_QWORD *)v5 << 11) & 0x200000;
        *(_QWORD *)(a2 + 8) = v32 | (*(_QWORD *)v5 << 13) & 0x400000 | (unint64_t)((*(_QWORD *)v5 << 15) & 0x800000) | (*(_QWORD *)v5 << 17) & 0x1000000 | (*(_QWORD *)v5 << 19) & 0x2000000 | (*(_QWORD *)v5 << 21) & 0x4000000 | (*(_QWORD *)v5 << 23) & 0x8000000 | (*(_QWORD *)v5 << 25) & 0x10000000 | (*(_QWORD *)v5 << 27) & 0x20000000 | (unint64_t)((*(_QWORD *)v5 << 29) & 0x40000000) | (int)(*(_QWORD *)v5 << 31);
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        v30 = v43;
        if (v43 != -1)
          return ((uint64_t (*)(unint64_t **, _QWORD *))off_1E0FD7CC8[v30])(&v37, v42);
        return result;
      case 4:
        *(_DWORD *)(a2 + 8) = __rbit32(*v5);
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        v30 = v43;
        if (v43 != -1)
          return ((uint64_t (*)(unint64_t **, _QWORD *))off_1E0FD7CC8[v30])(&v37, v42);
        return result;
      case 3:
        *(_DWORD *)(a2 + 8) = __rbit32(*v5);
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        v30 = v43;
        if (v43 != -1)
          return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v30])(&v37, v42);
        return result;
    }
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x1825D8BF8);
  }
  v33 = a2;
  v9 = 24 * v7;
  v10 = (unsigned int *)WTF::fastMalloc((WTF *)(v9 + 8));
  *v10 = v7;
  v11 = 6;
  bzero(v10 + 2, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v13 = 0;
  LODWORD(v34[0]) = 0;
  v35 = 0;
  do
  {
    if (v43 == 8)
    {
      if (v13 >= *(unsigned int *)v42[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825D8B78);
      }
      v12 = v42[0] + v11 * 4 - 16;
      v14 = *(unsigned int *)(v42[0] + v11 * 4);
      v15 = v35;
      if (v35 != -1)
      {
        if ((_DWORD)v14 == -1)
          goto LABEL_57;
LABEL_21:
        v37 = v34;
        ((void (*)(unint64_t **, unint64_t *, uint64_t))off_1E0FD80E0[v14])(&v37, v34, v12);
        goto LABEL_22;
      }
      if ((_DWORD)v14 != -1)
        goto LABEL_21;
    }
    else
    {
      v15 = v35;
      if (v35 == -1)
      {
        if (v43 == -1)
          goto LABEL_58;
      }
      else if (v43 == -1)
      {
LABEL_57:
        ((void (*)(unint64_t **, unint64_t *, uint64_t))off_1E0FD7CC8[v15])(&v37, v34, v12);
        v35 = -1;
LABEL_58:
        __break(0xC471u);
        JUMPOUT(0x1825D8BD8);
      }
      v37 = v34;
      ((void (*)(unint64_t **, unint64_t *, _QWORD *))off_1E0FD80E0[v43])(&v37, v34, v42);
    }
LABEL_22:
    if (v35 == 3 || v35 == 4)
    {
      LODWORD(v38) = __rbit32(v34[0]);
    }
    else
    {
      if (v35 != 5)
        goto LABEL_58;
      v16 = (uint64x2_t)vdupq_n_s64(v34[0]);
      v17 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_182610300), (int8x16_t)xmmword_182610330), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_182610310), (int8x16_t)xmmword_182610320)), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102E0), (int8x16_t)xmmword_182610350), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102F0), (int8x16_t)xmmword_182610340))), vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102C0), (int8x16_t)xmmword_182610370), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102D0), (int8x16_t)xmmword_182610360)), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102A0), (int8x16_t)xmmword_182610390), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826102B0), (int8x16_t)xmmword_182610380)))), vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826103C0), (int8x16_t)xmmword_1826103F0),
                    vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826103D0), (int8x16_t)xmmword_1826103E0)),
                  vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826103A0), (int8x16_t)xmmword_182610410), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_1826103B0), (int8x16_t)xmmword_182610400))), vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_182610420), (int8x16_t)xmmword_182610450), vandq_s8((int8x16_t)vshlq_u64(v16, (uint64x2_t)xmmword_182610430), (int8x16_t)xmmword_182610440))));
      v38 = *(unint64_t *)&vorr_s8(*(int8x8_t *)v17.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)) | (LODWORD(v34[0]) << 25) & 0x10000000 | (LODWORD(v34[0]) << 29) & 0x40000000 | (((v34[0] >> 2) & 1) << 29) | (int)(LODWORD(v34[0]) << 31);
    }
    v40 = v35;
    v41 = 0;
    if (v13 >= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D8B58);
    }
    v36 = (uint64_t)&v10[v11 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v35])(&v36);
    if (v41 != -1)
      ((void (*)(uint64_t *, unint64_t *))off_1E0FD7DD0[v41])(&v36, &v38);
    ++v13;
    v11 += 6;
  }
  while (v7 != v13);
  v18 = *v10;
  v19 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v18 + 8));
  v21 = v19;
  *v19 = v18;
  if ((_DWORD)v18)
  {
    v22 = v19 + 6;
    v23 = 24 * v18;
    v24 = v10 + 6;
    do
    {
      *((_BYTE *)v22 - 16) = 0;
      v20 = v22 - 4;
      *v22 = -1;
      v25 = *v24;
      if ((_DWORD)v25 != -1)
      {
        ((void (*)(unint64_t **, _DWORD *, unsigned int *))off_1E0FD8010[v25])(&v37, v20, v24 - 4);
        *v22 = v25;
      }
      v22 += 6;
      v24 += 6;
      v23 -= 24;
    }
    while (v23);
  }
  *(_QWORD *)(v33 + 8) = v21;
  *(_DWORD *)(v33 + 24) = 8;
  *(_DWORD *)(v33 + 32) = 0;
  if (v35 != -1)
    ((void (*)(unint64_t **, unint64_t *))off_1E0FD7CC8[v35])(&v37, v34);
  v26 = *v10;
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    v28 = v10 + 6;
    do
    {
      v20 = v28 - 4;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
        ((void (*)(unint64_t **, _DWORD *))off_1E0FD7CC8[v29])(&v37, v20);
      *v28 = -1;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  result = WTF::fastFree((WTF *)v10, v20);
  v30 = v43;
  if (v43 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v30])(&v37, v42);
  return result;
}

__int16 WGSL::constantRound@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D90C4);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  ((void (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = rint(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = rintf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = rintf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825D9124);
  }
  v40 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825D90A4);
      }
      v11 = v49[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v49[0] + v10 * 4);
      v14 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v13])(&v44, v41, v11);
    }
    else
    {
      v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v14])(&v44, v41, v11);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825D9104);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = rintf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = rint(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = rintf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D9084);
    }
    v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v22 = *v9;
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  v25 = v23;
  *v23 = v22;
  if ((_DWORD)v22)
  {
    v26 = v23 + 6;
    v27 = 24 * v22;
    v28 = v9 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v24 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v44, v24, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v30 = *v9;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v9 + 6;
    do
    {
      v24 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v33])(&v44, v24);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  v35 = v50;
  if (v50 != -1)
LABEL_44:
    ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
  return LOWORD(_D0);
}

uint64_t WGSL::constantSaturate@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  float v2;
  _DWORD *v4;
  uint64_t v5;
  double *v6;
  uint64_t (*v7)();
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float v40;
  double v41;
  uint64_t v45;
  double v46[2];
  unsigned int v47;
  uint64_t v48;
  double *v49;
  double v50;
  int v51;
  unsigned int v52;
  int v53;
  _QWORD v54[2];
  unsigned int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D9690);
  }
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  v5 = v4[6];
  if ((_DWORD)v5 == -1)
    goto LABEL_84;
  v6 = (double *)(v4 + 2);
  v7 = off_1E0FD8010[v5];
  ((void (*)(double **, _QWORD *, _DWORD *))v7)(&v49, v54, v4 + 2);
  v55 = v5;
  LOBYTE(v49) = 0;
  v51 = -1;
  ((void (*)(double *, double **, _QWORD *))v7)(v46, &v49, v54);
  v8 = 0;
  v51 = v5;
  if ((_DWORD)v5 == 8)
  {
    if (v49)
      v8 = *(_DWORD *)v49;
    else
      v8 = 0;
  }
  result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v5])(v46, &v49);
  if (!v8)
  {
    v39 = v4[6];
    switch(v39)
    {
      case 2:
        v41 = *v6;
        if (*v6 < 0.0)
          v41 = 0.0;
        if (v41 > 1.0)
          v41 = 1.0;
        *(double *)(a2 + 8) = v41;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v38 = v55;
        if (v55 == -1)
          return result;
        break;
      case 1:
        LOWORD(_S0) = *(_WORD *)v6;
        __asm { FCVT            S2, H0 }
        if (_S2 < 0.0)
          _S0 = 0.0;
        __asm { FCVT            S1, H0 }
        LOWORD(_S2) = 15360;
        if (_S1 > 1.0)
          _S0 = _S2;
        *(_WORD *)(a2 + 8) = LOWORD(_S0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v38 = v55;
        if (v55 == -1)
          return result;
        break;
      case 0:
        v40 = *(float *)v6;
        if (*(float *)v6 < 0.0)
          v40 = 0.0;
        if (v40 > 1.0)
          v40 = 1.0;
        *(float *)(a2 + 8) = v40;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v38 = v55;
        if (v55 == -1)
          return result;
        return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v38])(&v49, v54);
      default:
LABEL_84:
        __break(0xC471u);
        JUMPOUT(0x1825D96F0);
    }
    return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v38])(&v49, v54);
  }
  v45 = a2;
  v10 = 24 * v8;
  v11 = (unsigned int *)WTF::fastMalloc((WTF *)(v10 + 8));
  *v11 = v8;
  v12 = 6;
  bzero(v11 + 2, 24 * ((v10 - 24) / 0x18uLL) + 24);
  v14 = 0;
  LODWORD(v46[0]) = 0;
  v47 = 0;
  LOWORD(v2) = 15360;
  do
  {
    if (v55 == 8)
    {
      if (v14 >= *(unsigned int *)v54[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825D9670);
      }
      v13 = v54[0] + v12 * 4 - 16;
      v15 = *(unsigned int *)(v54[0] + v12 * 4);
      v16 = v47;
      if (v47 == -1)
      {
        if ((_DWORD)v15 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v15 == -1)
      {
        goto LABEL_82;
      }
      v49 = v46;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v15])(&v49, v46, v13);
    }
    else
    {
      v16 = v47;
      if (v47 == -1)
      {
        if (v55 == -1)
          goto LABEL_83;
      }
      else if (v55 == -1)
      {
LABEL_82:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v16])(&v49, v46, v13);
        v47 = -1;
LABEL_83:
        __break(0xC471u);
        JUMPOUT(0x1825D96D0);
      }
      v49 = v46;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v55])(&v49, v46, v54);
    }
LABEL_22:
    if (v47)
    {
      if (v47 == 1)
      {
        LOWORD(_S0) = LOWORD(v46[0]);
        __asm { FCVT            S1, H0 }
        if (_S1 < 0.0)
          _S0 = 0.0;
        __asm { FCVT            S1, H0 }
        if (_S1 > 1.0)
          _S0 = v2;
        LOWORD(v50) = LOWORD(_S0);
      }
      else
      {
        if (v47 != 2)
          goto LABEL_83;
        v17 = v46[0];
        if (v46[0] < 0.0)
          v17 = 0.0;
        if (v17 > 1.0)
          v17 = 1.0;
        v50 = v17;
      }
    }
    else
    {
      v18 = *(float *)v46;
      if (*(float *)v46 < 0.0)
        v18 = 0.0;
      if (v18 > 1.0)
        v18 = 1.0;
      *(float *)&v50 = v18;
    }
    v52 = v47;
    v53 = 0;
    if (v14 >= *v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1825D9650);
    }
    v48 = (uint64_t)&v11[v12 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v47])(&v48);
    if (v53 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v53])(&v48, &v50);
    ++v14;
    v12 += 6;
  }
  while (v8 != v14);
  v26 = *v11;
  v27 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v26 + 8));
  v29 = v27;
  *v27 = v26;
  if ((_DWORD)v26)
  {
    v30 = v27 + 6;
    v31 = 24 * v26;
    v32 = v11 + 6;
    do
    {
      *((_BYTE *)v30 - 16) = 0;
      v28 = v30 - 4;
      *v30 = -1;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v33])(&v49, v28, v32 - 4);
        *v30 = v33;
      }
      v30 += 6;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  *(_QWORD *)(v45 + 8) = v29;
  *(_DWORD *)(v45 + 24) = 8;
  *(_DWORD *)(v45 + 32) = 0;
  if (v47 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v47])(&v49, v46);
  v34 = *v11;
  if ((_DWORD)v34)
  {
    v35 = 24 * v34;
    v36 = v11 + 6;
    do
    {
      v28 = v36 - 4;
      v37 = *v36;
      if ((_DWORD)v37 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v37])(&v49, v28);
      *v36 = -1;
      v36 += 6;
      v35 -= 24;
    }
    while (v35);
  }
  result = WTF::fastFree((WTF *)v11, v28);
  v38 = v55;
  if (v55 != -1)
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v38])(&v49, v54);
  return result;
}

uint64_t WGSL::constantSign@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  float v2;
  float v3;
  _DWORD *v5;
  uint64_t v6;
  float *v7;
  uint64_t (*v8)();
  unsigned int v9;
  uint64_t result;
  float v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  BOOL v26;
  float v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v46;
  BOOL v48;
  float v49;
  double v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  double v54[2];
  unsigned int v55;
  uint64_t v56;
  double *v57;
  double v58;
  int v59;
  unsigned int v60;
  int v61;
  _QWORD v62[2];
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825D9DA0);
  }
  LOBYTE(v62[0]) = 0;
  v63 = -1;
  v6 = v5[6];
  if ((_DWORD)v6 != -1)
  {
    v7 = (float *)(v5 + 2);
    v8 = off_1E0FD8010[v6];
    ((void (*)(double **, _QWORD *, _DWORD *))v8)(&v57, v62, v5 + 2);
    v63 = v6;
    LOBYTE(v57) = 0;
    v59 = -1;
    ((void (*)(double *, double **, _QWORD *))v8)(v54, &v57, v62);
    v9 = 0;
    v59 = v6;
    if ((_DWORD)v6 == 8)
    {
      if (v57)
        v9 = *(_DWORD *)v57;
      else
        v9 = 0;
    }
    result = ((uint64_t (*)(double *, double **))off_1E0FD7CC8[v6])(v54, &v57);
    if (v9)
    {
      v53 = a2;
      v12 = 24 * v9;
      v13 = (unsigned int *)WTF::fastMalloc((WTF *)(v12 + 8));
      *v13 = v9;
      v14 = 6;
      bzero(v13 + 2, 24 * ((v12 - 24) / 0x18uLL) + 24);
      v16 = 0;
      LODWORD(v54[0]) = 0;
      v55 = 0;
      LOWORD(v2) = -17408;
      LOWORD(v3) = 15360;
      while (2)
      {
        if (v63 == 8)
        {
          if (v16 >= *(unsigned int *)v62[0])
          {
            __break(0xC471u);
            JUMPOUT(0x1825D9D80);
          }
          v15 = v62[0] + v14 * 4 - 16;
          v17 = *(unsigned int *)(v62[0] + v14 * 4);
          v18 = v55;
          if (v55 != -1)
          {
            if ((_DWORD)v17 == -1)
            {
LABEL_105:
              ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v18])(&v57, v54, v15);
              v55 = -1;
              goto LABEL_106;
            }
            goto LABEL_21;
          }
          if ((_DWORD)v17 != -1)
          {
LABEL_21:
            v57 = v54;
            ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v17])(&v57, v54, v15);
          }
        }
        else
        {
          v18 = v55;
          if (v55 == -1)
          {
            if (v63 == -1)
            {
LABEL_106:
              __break(0xC471u);
              JUMPOUT(0x1825D9DE0);
            }
          }
          else if (v63 == -1)
          {
            goto LABEL_105;
          }
          v57 = v54;
          ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v63])(&v57, v54, v62);
        }
        switch(v55)
        {
          case 0u:
            v19 = 0.0;
            if (*(float *)v54 < 0.0)
              v19 = -1.0;
            if (*(float *)v54 > 0.0)
              v19 = 1.0;
            *(float *)&v58 = v19;
            v60 = v55;
            v61 = 0;
            if (v16 >= *v13)
              goto LABEL_102;
            goto LABEL_53;
          case 1u:
            _H0 = LOWORD(v54[0]);
            __asm { FCVT            S0, H0 }
            v26 = _S0 <= 0.0;
            if (_S0 >= 0.0)
              v27 = 0.0;
            else
              v27 = v2;
            if (!v26)
              v27 = v3;
            LOWORD(v58) = LOWORD(v27);
            v60 = v55;
            v61 = 0;
            if (v16 >= *v13)
              goto LABEL_102;
            goto LABEL_53;
          case 2u:
            if (v54[0] >= 0.0)
              v28 = 0.0;
            else
              v28 = -1.0;
            if (v54[0] > 0.0)
              v28 = 1.0;
            v58 = v28;
            v60 = v55;
            v61 = 0;
            if (v16 >= *v13)
              goto LABEL_102;
            goto LABEL_53;
          case 3u:
            if (SLODWORD(v54[0]) >= 1)
              v29 = 1;
            else
              v29 = SLODWORD(v54[0]) >> 31;
            goto LABEL_47;
          case 4u:
            v29 = LODWORD(v54[0]) != 0;
LABEL_47:
            LODWORD(v58) = v29;
            v60 = v55;
            v61 = 0;
            if (v16 >= *v13)
              goto LABEL_102;
            goto LABEL_53;
          case 5u:
            if (*(uint64_t *)&v54[0] >= 1)
              v30 = 1;
            else
              v30 = *(uint64_t *)&v54[0] >> 63;
            v58 = *(double *)&v30;
            v60 = v55;
            v61 = 0;
            if (v16 >= *v13)
            {
LABEL_102:
              __break(0xC471u);
              JUMPOUT(0x1825D9D60);
            }
LABEL_53:
            v56 = (uint64_t)&v13[v14 - 4];
            ((void (*)(uint64_t *))off_1E0FD8188[v55])(&v56);
            if (v61 != -1)
              ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v61])(&v56, &v58);
            ++v16;
            v14 += 6;
            if (v9 != v16)
              continue;
            v31 = *v13;
            v32 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v31 + 8));
            v34 = v32;
            *v32 = v31;
            if ((_DWORD)v31)
            {
              v35 = v32 + 6;
              v36 = 24 * v31;
              v37 = v13 + 6;
              do
              {
                *((_BYTE *)v35 - 16) = 0;
                v33 = v35 - 4;
                *v35 = -1;
                v38 = *v37;
                if ((_DWORD)v38 != -1)
                {
                  ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v38])(&v57, v33, v37 - 4);
                  *v35 = v38;
                }
                v35 += 6;
                v37 += 6;
                v36 -= 24;
              }
              while (v36);
            }
            *(_QWORD *)(v53 + 8) = v34;
            *(_DWORD *)(v53 + 24) = 8;
            *(_DWORD *)(v53 + 32) = 0;
            if (v55 != -1)
              ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v57, v54);
            v39 = *v13;
            if ((_DWORD)v39)
            {
              v40 = 24 * v39;
              v41 = v13 + 6;
              do
              {
                v33 = v41 - 4;
                v42 = *v41;
                if ((_DWORD)v42 != -1)
                  ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v42])(&v57, v33);
                *v41 = -1;
                v41 += 6;
                v40 -= 24;
              }
              while (v40);
            }
            result = WTF::fastFree((WTF *)v13, v33);
            v43 = v63;
            if (v63 != -1)
              return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v43])(&v57, v62);
            return result;
          default:
            goto LABEL_106;
        }
      }
    }
    switch(v5[6])
    {
      case 0:
        v44 = 0.0;
        if (*v7 < 0.0)
          v44 = -1.0;
        if (*v7 > 0.0)
          v44 = 1.0;
        *(float *)(a2 + 8) = v44;
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(double **, _QWORD *))off_1E0FD7CC8[v43])(&v57, v62);
      case 1:
        _H0 = *(_WORD *)v7;
        HIWORD(v46) = 0;
        LOWORD(v11) = -17408;
        __asm { FCVT            S0, H0 }
        v48 = _S0 <= 0.0;
        if (_S0 >= 0.0)
          v49 = 0.0;
        else
          v49 = v11;
        LOWORD(v46) = 15360;
        if (!v48)
          v49 = v46;
        *(_WORD *)(a2 + 8) = LOWORD(v49);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v43])(&v57, v62);
      case 2:
        v50 = 0.0;
        if (*(double *)v7 < 0.0)
          v50 = -1.0;
        if (*(double *)v7 > 0.0)
          v50 = 1.0;
        *(double *)(a2 + 8) = v50;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v43])(&v57, v62);
      case 3:
        if (*(int *)v7 >= 1)
          v51 = 1;
        else
          v51 = *(int *)v7 >> 31;
        *(_DWORD *)(a2 + 8) = v51;
        *(_DWORD *)(a2 + 24) = 3;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v43])(&v57, v62);
      case 4:
        *(_DWORD *)(a2 + 8) = *(_DWORD *)v7 != 0;
        *(_DWORD *)(a2 + 24) = 4;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v43])(&v57, v62);
      case 5:
        if (*(uint64_t *)v7 >= 1)
          v52 = 1;
        else
          v52 = *(uint64_t *)v7 >> 63;
        *(_QWORD *)(a2 + 8) = v52;
        *(_DWORD *)(a2 + 24) = 5;
        *(_DWORD *)(a2 + 32) = 0;
        v43 = v63;
        if (v63 == -1)
          return result;
        return ((uint64_t (*)(_QWORD, _QWORD))off_1E0FD7CC8[v43])(&v57, v62);
      default:
        break;
    }
  }
  __break(0xC471u);
  JUMPOUT(0x1825D9E04);
}

void WGSL::constantSmoothstep(unsigned int **a1@<X1>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  float v24;
  float v33;
  float v34;
  double v35;
  unsigned int *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  float v55;
  double v56;
  double v57;
  double v58;
  float v63;
  float v64;
  double v66[2];
  int v67;
  double v68[2];
  int v69;
  double v70[2];
  int v71;
  char v72;
  double *v73;
  double v74[2];
  int v75;
  unsigned int v76;
  _QWORD v77[2];
  unsigned int v78;
  _QWORD v79[2];
  unsigned int v80;
  _QWORD v81[2];
  unsigned int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DA860);
  }
  if (v3 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DA880);
  }
  if (v3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DA8A0);
  }
  LOBYTE(v77[0]) = 0;
  v78 = -1;
  v4 = v2[6];
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(double *, _QWORD *, unsigned int *))off_1E0FD8010[v4])(v66, v77, v2 + 2);
    v78 = v4;
  }
  v5 = (double *)(v2 + 8);
  LOBYTE(v79[0]) = 0;
  v80 = -1;
  v6 = v2[12];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, unsigned int *))off_1E0FD8010[v6])(v66, v79, v2 + 8);
    v80 = v6;
  }
  v7 = (double *)(v2 + 14);
  LOBYTE(v81[0]) = 0;
  v82 = -1;
  v8 = v2[18];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, unsigned int *))off_1E0FD8010[v8])(v66, v81, v2 + 14);
    v82 = v8;
  }
  LOBYTE(v66[0]) = 0;
  v67 = -1;
  v9 = v78;
  if (v78 != -1)
  {
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v78])(&v73, v66, v77);
    v67 = v9;
    if ((_DWORD)v9 == 8)
      goto LABEL_18;
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v73, v66);
  }
  LOBYTE(v66[0]) = 0;
  v67 = -1;
  v9 = v80;
  if (v80 == -1)
    goto LABEL_16;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v80])(&v73, v66, v79);
  v67 = v9;
  if ((_DWORD)v9 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v73, v66);
LABEL_16:
    LOBYTE(v66[0]) = 0;
    v67 = -1;
    v9 = v82;
    if (v82 == -1)
      goto LABEL_113;
    ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v82])(&v73, v66, v81);
    v67 = v9;
    if ((_DWORD)v9 != 8)
      goto LABEL_20;
  }
LABEL_18:
  if (*(_QWORD *)&v66[0])
  {
    v10 = **(_DWORD **)&v66[0];
    goto LABEL_21;
  }
LABEL_20:
  v10 = 0;
LABEL_21:
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v73, v66);
  if (!v10)
  {
LABEL_113:
    v52 = v2[6];
    if (v52 == 2)
    {
      if (v2[12] == 2 && v2[18] == 2)
      {
        v56 = (*v7 - *((double *)v2 + 1)) / (*v5 - *((double *)v2 + 1));
        if (v56 < 0.0)
          v56 = 0.0;
        if (v56 > 1.0)
          v56 = 1.0;
        v57 = v56 * v56;
        v58 = v56 * -2.0 + 3.0;
LABEL_134:
        *(double *)(a2 + 8) = v58 * v57;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v51 = v82;
        if (v82 != -1)
          goto LABEL_107;
        goto LABEL_108;
      }
    }
    else if (v52 == 1)
    {
      if (v2[12] == 1 && v2[18] == 1)
      {
        _H0 = *((_WORD *)v2 + 4);
        _H1 = *(_WORD *)v5;
        _H2 = *(_WORD *)v7;
        __asm
        {
          FCVT            S2, H2
          FCVT            S0, H0
        }
        v55 = _S2 - _S0;
        __asm { FCVT            S1, H1 }
        goto LABEL_129;
      }
    }
    else
    {
      if (v52)
      {
LABEL_143:
        __break(0xC471u);
        JUMPOUT(0x1825DA820);
      }
      if (!v2[12] && !v2[18])
      {
        _S0 = *((float *)v2 + 2);
        _S1 = *(float *)v5;
        v55 = *(float *)v7 - _S0;
LABEL_129:
        v63 = v55 / (float)(_S1 - _S0);
        if (v63 < 0.0)
          v63 = 0.0;
        v64 = 1.0;
        if (v63 <= 1.0)
          v64 = v63;
        v58 = (float)(v64 * v64);
        v57 = v64 * -2.0 + 3.0;
        goto LABEL_134;
      }
    }
LABEL_141:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_142:
    __break(0xC471u);
    JUMPOUT(0x1825DA8C4);
  }
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v13 = 0;
  v14 = 0;
  LODWORD(v66[0]) = 0;
  v67 = 0;
  LODWORD(v68[0]) = 0;
  v69 = 0;
  LODWORD(v70[0]) = 0;
  v71 = 0;
  do
  {
    if (v78 == 8)
    {
      if (v14 >= *(unsigned int *)v77[0])
        goto LABEL_143;
      v16 = *(unsigned int *)(v77[0] + v13 + 24);
      if (v67 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_38;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_33;
      }
      v73 = v66;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v16])(&v73, v66, v77[0] + v13 + 8);
    }
    else
    {
      if (v67 == -1)
      {
        if (v78 == -1)
          goto LABEL_38;
      }
      else if (v78 == -1)
      {
LABEL_33:
        ((void (*)(double **, double *))off_1E0FD7CC8[v67])(&v73, v66);
        v67 = -1;
        goto LABEL_38;
      }
      v73 = v66;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v78])(&v73, v66, v77);
    }
LABEL_38:
    if (v80 == 8)
    {
      if (v14 >= *(unsigned int *)v79[0])
        goto LABEL_143;
      v17 = *(unsigned int *)(v79[0] + v13 + 24);
      if (v69 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_50;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_45;
      }
      v73 = v68;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v73, v68, v79[0] + v13 + 8);
    }
    else
    {
      if (v69 == -1)
      {
        if (v80 == -1)
          goto LABEL_50;
      }
      else if (v80 == -1)
      {
LABEL_45:
        ((void (*)(double **, double *))off_1E0FD7CC8[v69])(&v73, v68);
        v69 = -1;
        goto LABEL_50;
      }
      v73 = v68;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v80])(&v73, v68, v79);
    }
LABEL_50:
    if (v82 == 8)
    {
      if (v14 >= *(unsigned int *)v81[0])
        goto LABEL_143;
      v18 = *(unsigned int *)(v81[0] + v13 + 24);
      if (v71 == -1)
      {
        if ((_DWORD)v18 == -1)
          goto LABEL_62;
      }
      else if ((_DWORD)v18 == -1)
      {
        goto LABEL_57;
      }
      v73 = v70;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v18])(&v73, v70, v81[0] + v13 + 8);
    }
    else
    {
      if (v71 == -1)
      {
        if (v82 == -1)
          goto LABEL_62;
      }
      else if (v82 == -1)
      {
LABEL_57:
        ((void (*)(double **, double *))off_1E0FD7CC8[v71])(&v73, v70);
        v71 = -1;
        goto LABEL_62;
      }
      v73 = v70;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v82])(&v73, v70, v81);
    }
LABEL_62:
    if (!v67)
    {
      if (v69 || v71)
        goto LABEL_141;
      _S0 = *(float *)v66;
      _S1 = *(float *)v68;
      v24 = *(float *)v70 - *(float *)v66;
      goto LABEL_78;
    }
    if (v67 == 1)
    {
      if (v69 != 1 || v71 != 1)
        goto LABEL_141;
      _H0 = LOWORD(v66[0]);
      _H1 = LOWORD(v68[0]);
      _H2 = LOWORD(v70[0]);
      __asm
      {
        FCVT            S2, H2
        FCVT            S0, H0
      }
      v24 = _S2 - _S0;
      __asm { FCVT            S1, H1 }
LABEL_78:
      v33 = v24 / (float)(_S1 - _S0);
      if (v33 < 0.0)
        v33 = 0.0;
      if (v33 <= 1.0)
        v34 = v33;
      else
        v34 = 1.0;
      v21 = (float)(v34 * v34);
      v20 = v34 * -2.0 + 3.0;
      goto LABEL_84;
    }
    if (v67 != 2)
      goto LABEL_142;
    if (v69 != 2 || v71 != 2)
      goto LABEL_141;
    v19 = (v70[0] - v66[0]) / (v68[0] - v66[0]);
    if (v19 < 0.0)
      v19 = 0.0;
    if (v19 > 1.0)
      v19 = 1.0;
    v20 = v19 * v19;
    v21 = v19 * -2.0 + 3.0;
LABEL_84:
    v35 = v21 * v20;
    v74[0] = v35;
    v75 = 2;
    v76 = 0;
    if (v14 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DA840);
    }
    v36 = &v12[v13 / 4];
    v37 = (double *)&v12[v13 / 4 + 2];
    v38 = v12[v13 / 4 + 6];
    if ((_DWORD)v38 == 2)
    {
      v15 = 0;
      *v37 = v35;
      goto LABEL_24;
    }
    if ((_DWORD)v38 == -1)
    {
      v15 = 0;
      *((double *)v36 + 1) = v35;
      v36[6] = 2;
LABEL_24:
      ((void (*)(char *, double *))off_1E0FD7DD0[v15])(&v72, v74);
      goto LABEL_25;
    }
    ((void (*)(char *, double *))off_1E0FD7CC8[v38])(&v72, v37);
    v15 = v76;
    *((double *)v36 + 1) = v74[0];
    v36[6] = 2;
    if ((_DWORD)v15 != -1)
      goto LABEL_24;
LABEL_25:
    ++v14;
    v13 += 24;
  }
  while (v11 != v13);
  v39 = *v12;
  v40 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v39 + 8));
  v42 = v40;
  *v40 = v39;
  if ((_DWORD)v39)
  {
    v43 = v40 + 6;
    v44 = 24 * v39;
    v45 = v12 + 6;
    do
    {
      *((_BYTE *)v43 - 16) = 0;
      v41 = v43 - 4;
      *v43 = -1;
      v46 = *v45;
      if ((_DWORD)v46 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v46])(&v73, v41, v45 - 4);
        *v43 = v46;
      }
      v43 += 6;
      v45 += 6;
      v44 -= 24;
    }
    while (v44);
  }
  *(_QWORD *)(a2 + 8) = v42;
  *(_DWORD *)(a2 + 24) = 8;
  *(_DWORD *)(a2 + 32) = 0;
  if (v71 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v71])(&v73, v70);
  v71 = -1;
  if (v69 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v69])(&v73, v68);
  v69 = -1;
  if (v67 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v67])(&v73, v66);
  v47 = *v12;
  if ((_DWORD)v47)
  {
    v48 = 24 * v47;
    v49 = v12 + 6;
    do
    {
      v41 = v49 - 4;
      v50 = *v49;
      if ((_DWORD)v50 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v50])(v66, v41);
      *v49 = -1;
      v49 += 6;
      v48 -= 24;
    }
    while (v48);
  }
  WTF::fastFree((WTF *)v12, v41);
  v51 = v82;
  if (v82 != -1)
LABEL_107:
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v51])(v66, v81);
LABEL_108:
  v82 = -1;
  if (v80 != -1)
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v80])(v66, v79);
  v80 = -1;
  if (v78 != -1)
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v78])(v66, v77);
}

__int16 WGSL::constantSqrt@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DADB0);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  ((void (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = sqrt(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = sqrtf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = sqrtf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825DAE10);
  }
  v40 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825DAD90);
      }
      v11 = v49[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v49[0] + v10 * 4);
      v14 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v13])(&v44, v41, v11);
    }
    else
    {
      v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v14])(&v44, v41, v11);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825DADF0);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = sqrtf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = sqrt(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = sqrtf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DAD70);
    }
    v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v22 = *v9;
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  v25 = v23;
  *v23 = v22;
  if ((_DWORD)v22)
  {
    v26 = v23 + 6;
    v27 = 24 * v22;
    v28 = v9 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v24 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v44, v24, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v30 = *v9;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v9 + 6;
    do
    {
      v24 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v33])(&v44, v24);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  v35 = v50;
  if (v50 != -1)
LABEL_44:
    ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
  return LOWORD(_D0);
}

void WGSL::constantStep(int **a1@<X1>, uint64_t a2@<X8>)
{
  int *v3;
  int v4;
  double *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  double v28;
  unsigned int *v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v48;
  int v51;
  double v52;
  uint64_t v53;
  double v54[2];
  int v55;
  double v56[2];
  int v57;
  char v58;
  double *v59;
  double v60[2];
  int v61;
  unsigned int v62;
  _QWORD v63[2];
  int v64;
  _QWORD v65[2];
  unsigned int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = **a1;
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DB5ACLL);
  }
  if (v4 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DB5CCLL);
  }
  v5 = (double *)(v3 + 2);
  LOBYTE(v63[0]) = 0;
  v64 = -1;
  v6 = v3[6];
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v6])(v54, v63, v3 + 2);
    v64 = v6;
  }
  v7 = (double *)(v3 + 8);
  LOBYTE(v65[0]) = 0;
  v66 = -1;
  v8 = v3[12];
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(double *, _QWORD *, int *))off_1E0FD8010[v8])(v54, v65, v3 + 8);
    v66 = v8;
    LODWORD(v6) = v64;
  }
  LOBYTE(v54[0]) = 0;
  v55 = -1;
  if ((_DWORD)v6 == -1)
  {
LABEL_12:
    LOBYTE(v54[0]) = 0;
    v55 = -1;
    if ((_DWORD)v8 == -1
      || ((((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v8])(&v59, v54, v65),
           v55 = v8,
           (_DWORD)v8 != 8)
       || !*(_QWORD *)&v54[0]
        ? (v10 = 0)
        : (v10 = **(_DWORD **)&v54[0]),
          ((void (*)(double **, double *))off_1E0FD7CC8[v8])(&v59, v54),
          !v10))
    {
LABEL_86:
      v45 = v3[6];
      if (v45 == 2)
      {
        if (v3[12] == 2)
        {
          v48 = *v5 > *v7;
          goto LABEL_96;
        }
      }
      else if (v45 == 1)
      {
        if (v3[12] == 1)
        {
          _H0 = *(_WORD *)v5;
          _H1 = *(_WORD *)v7;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          goto LABEL_95;
        }
      }
      else
      {
        if (v45)
        {
LABEL_112:
          __break(0xC471u);
          JUMPOUT(0x1825DB56CLL);
        }
        if (!v3[12])
        {
          _S0 = *(float *)v5;
          _S1 = *(float *)v7;
LABEL_95:
          v48 = _S0 > _S1;
LABEL_96:
          v51 = !v48;
          v52 = 0.0;
          if (v51)
            v52 = 1.0;
          *(double *)(a2 + 8) = v52;
          *(_DWORD *)(a2 + 24) = 2;
          *(_DWORD *)(a2 + 32) = 0;
          v44 = v66;
          if (v66 == -1)
            goto LABEL_103;
LABEL_102:
          ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v44])(v54, v65);
          goto LABEL_103;
        }
      }
LABEL_110:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_111:
      __break(0xC471u);
      JUMPOUT(0x1825DB5F0);
    }
    goto LABEL_18;
  }
  v9 = v6;
  ((void (*)(double **, double *, _QWORD *))off_1E0FD8010[v6])(&v59, v54, v63);
  v55 = v6;
  if ((_DWORD)v6 != 8)
  {
    ((void (*)(double **, double *))off_1E0FD7CC8[v6])(&v59, v54);
    LODWORD(v8) = v66;
    goto LABEL_12;
  }
  if (*(_QWORD *)&v54[0])
    v10 = **(_DWORD **)&v54[0];
  else
    v10 = 0;
  ((void (*)(double **, double *))off_1E0FD7CC8[v9])(&v59, v54);
  if (!v10)
    goto LABEL_86;
LABEL_18:
  v53 = a2;
  v11 = 24 * v10;
  v12 = (unsigned int *)WTF::fastMalloc((WTF *)(v11 + 8));
  *v12 = v10;
  bzero(v12 + 2, 24 * ((v11 - 24) / 0x18uLL) + 24);
  v13 = 0;
  v14 = 0;
  LODWORD(v54[0]) = 0;
  v55 = 0;
  LODWORD(v56[0]) = 0;
  v57 = 0;
  do
  {
    if (v64 == 8)
    {
      if (v14 >= *(unsigned int *)v63[0])
        goto LABEL_112;
      v16 = *(unsigned int *)(v63[0] + v13 + 24);
      if (v55 == -1)
      {
        if ((_DWORD)v16 == -1)
          goto LABEL_34;
      }
      else if ((_DWORD)v16 == -1)
      {
        goto LABEL_29;
      }
      v59 = v54;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v16])(&v59, v54, v63[0] + v13 + 8);
    }
    else
    {
      if (v55 == -1)
      {
        if (v64 == -1)
          goto LABEL_34;
      }
      else if (v64 == -1)
      {
LABEL_29:
        ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v59, v54);
        v55 = -1;
        goto LABEL_34;
      }
      v59 = v54;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v64])(&v59, v54, v63);
    }
LABEL_34:
    if (v66 == 8)
    {
      if (v14 >= *(unsigned int *)v65[0])
        goto LABEL_112;
      v17 = *(unsigned int *)(v65[0] + v13 + 24);
      if (v57 == -1)
      {
        if ((_DWORD)v17 == -1)
          goto LABEL_46;
      }
      else if ((_DWORD)v17 == -1)
      {
        goto LABEL_41;
      }
      v59 = v56;
      ((void (*)(double **, double *, unint64_t))off_1E0FD80E0[v17])(&v59, v56, v65[0] + v13 + 8);
    }
    else
    {
      if (v57 == -1)
      {
        if (v66 == -1)
          goto LABEL_46;
      }
      else if (v66 == -1)
      {
LABEL_41:
        ((void (*)(double **, double *))off_1E0FD7CC8[v57])(&v59, v56);
        v57 = -1;
        goto LABEL_46;
      }
      v59 = v56;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v66])(&v59, v56, v65);
    }
LABEL_46:
    if (!v55)
    {
      if (v57)
        goto LABEL_110;
      _S0 = *(float *)v54;
      _S1 = *(float *)v56;
LABEL_55:
      v18 = _S0 > _S1;
      goto LABEL_56;
    }
    if (v55 == 1)
    {
      if (v57 != 1)
        goto LABEL_110;
      _H0 = LOWORD(v54[0]);
      _H1 = LOWORD(v56[0]);
      __asm
      {
        FCVT            S1, H1
        FCVT            S0, H0
      }
      goto LABEL_55;
    }
    if (v55 != 2)
      goto LABEL_111;
    if (v57 != 2)
      goto LABEL_110;
    v18 = v54[0] > v56[0];
LABEL_56:
    if (!v18)
      v28 = 1.0;
    else
      v28 = 0.0;
    v60[0] = v28;
    v61 = 2;
    v62 = 0;
    if (v14 >= *v12)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DB58CLL);
    }
    v29 = &v12[v13 / 4];
    v30 = (double *)&v12[v13 / 4 + 2];
    v31 = v12[v13 / 4 + 6];
    if ((_DWORD)v31 == 2)
    {
      v15 = 0;
      *v30 = v28;
LABEL_20:
      ((void (*)(char *, double *))off_1E0FD7DD0[v15])(&v58, v60);
      goto LABEL_21;
    }
    if ((_DWORD)v31 == -1)
    {
      v15 = 0;
      *((double *)v29 + 1) = v28;
      v29[6] = 2;
      goto LABEL_20;
    }
    ((void (*)(char *, double *))off_1E0FD7CC8[v31])(&v58, v30);
    v15 = v62;
    *((double *)v29 + 1) = v60[0];
    v29[6] = 2;
    if ((_DWORD)v15 != -1)
      goto LABEL_20;
LABEL_21:
    ++v14;
    v13 += 24;
  }
  while (v11 != v13);
  v32 = *v12;
  v33 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v32 + 8));
  v35 = v33;
  *v33 = v32;
  if ((_DWORD)v32)
  {
    v36 = v33 + 6;
    v37 = 24 * v32;
    v38 = v12 + 6;
    do
    {
      *((_BYTE *)v36 - 16) = 0;
      v34 = v36 - 4;
      *v36 = -1;
      v39 = *v38;
      if ((_DWORD)v39 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v39])(&v59, v34, v38 - 4);
        *v36 = v39;
      }
      v36 += 6;
      v38 += 6;
      v37 -= 24;
    }
    while (v37);
  }
  *(_QWORD *)(v53 + 8) = v35;
  *(_DWORD *)(v53 + 24) = 8;
  *(_DWORD *)(v53 + 32) = 0;
  if (v57 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v57])(&v59, v56);
  v57 = -1;
  if (v55 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v55])(&v59, v54);
  v40 = *v12;
  if ((_DWORD)v40)
  {
    v41 = 24 * v40;
    v42 = v12 + 6;
    do
    {
      v34 = v42 - 4;
      v43 = *v42;
      if ((_DWORD)v43 != -1)
        ((void (*)(double *, _DWORD *))off_1E0FD7CC8[v43])(v54, v34);
      *v42 = -1;
      v42 += 6;
      v41 -= 24;
    }
    while (v41);
  }
  WTF::fastFree((WTF *)v12, v34);
  v44 = v66;
  if (v66 != -1)
    goto LABEL_102;
LABEL_103:
  v66 = -1;
  if (v64 != -1)
    ((void (*)(double *, _QWORD *))off_1E0FD7CC8[v64])(v54, v63);
}

void WGSL::constantTranspose(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  BOOL v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v34;
  unsigned int v35;
  char v36;
  char v37;
  unsigned int *v38;
  char v39;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DB944);
  }
  if (v2[6] == 9)
  {
    v3 = v2[2];
    v4 = v2[3];
    v5 = v4 * v3;
    if ((_DWORD)v4 * (_DWORD)v3)
    {
      v6 = v2[2];
      v7 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v5 + 8));
      *v7 = v5;
      bzero(v7 + 2, 24 * ((24 * (unint64_t)v5 - 24) / 0x18) + 24);
      v3 = v6;
      v32 = v4 | (v6 << 32);
      if ((_DWORD)v4)
        v8 = (_DWORD)v6 == 0;
      else
        v8 = 1;
      if (!v8)
      {
LABEL_25:
        v22 = 0;
        v23 = 0;
        v34 = v3;
        while (1)
        {
          v24 = v22;
          v25 = &v7[6 * v22 + 6];
          v26 = v23;
          v35 = v22;
          v27 = v3;
          do
          {
            while (1)
            {
              v28 = (unsigned int *)*((_QWORD *)v2 + 2);
              if (*v28 <= v26)
              {
                __break(0xC471u);
                JUMPOUT(0x1825DB904);
              }
              if (v24 >= *v7)
              {
                __break(0xC471u);
                JUMPOUT(0x1825DB924);
              }
              v29 = *v25;
              v30 = v28[6 * v26 + 6];
              if ((_DWORD)v29 != -1)
                break;
              if ((_DWORD)v30 != -1)
                goto LABEL_29;
LABEL_30:
              v25 += 6;
              ++v24;
              v26 += v4;
              if (!--v27)
                goto LABEL_26;
            }
            if ((_DWORD)v30 != -1)
            {
LABEL_29:
              v38 = v25 - 4;
              ((void (*)(unsigned int **))off_1E0FD80E0[v30])(&v38);
              goto LABEL_30;
            }
            ((void (*)(char *, unsigned int *))off_1E0FD7CC8[v29])(&v39, v25 - 4);
            *v25 = -1;
            v25 += 6;
            ++v24;
            v26 += v4;
            --v27;
          }
          while (v27);
LABEL_26:
          ++v23;
          v3 = v34;
          v22 = v35 + v34;
          if (v23 == v4)
            goto LABEL_10;
        }
      }
    }
    else
    {
      v7 = 0;
      v32 = v4 | (v3 << 32);
      if ((_DWORD)v4)
        v21 = (_DWORD)v3 == 0;
      else
        v21 = 1;
      if (!v21)
        goto LABEL_25;
    }
    if (v7)
    {
LABEL_10:
      v9 = *v7;
      v10 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
      v12 = v10;
      *v10 = v9;
      if ((_DWORD)v9)
      {
        v13 = v10 + 6;
        v14 = 24 * v9;
        v15 = v7 + 6;
        do
        {
          *((_BYTE *)v13 - 16) = 0;
          v11 = v13 - 4;
          *v13 = -1;
          v16 = *v15;
          if ((_DWORD)v16 != -1)
          {
            ((void (*)(char *, _DWORD *, unsigned int *))off_1E0FD8010[v16])(&v36, v11, v15 - 4);
            *v13 = v16;
          }
          v13 += 6;
          v15 += 6;
          v14 -= 24;
        }
        while (v14);
      }
      *(_QWORD *)(a2 + 8) = v32;
      *(_QWORD *)(a2 + 16) = v12;
      *(_DWORD *)(a2 + 24) = 9;
      *(_DWORD *)(a2 + 32) = 0;
      v17 = *v7;
      if ((_DWORD)v17)
      {
        v18 = 24 * v17;
        v19 = v7 + 6;
        do
        {
          v11 = v19 - 4;
          v20 = *v19;
          if ((_DWORD)v20 != -1)
            ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v20])(&v37, v11);
          *v19 = -1;
          v19 += 6;
          v18 -= 24;
        }
        while (v18);
      }
      WTF::fastFree((WTF *)v7, v11);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = v32;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 9;
      *(_DWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    v31 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantTrunc(v31);
  }
}

__int16 WGSL::constantTrunc@<H0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t (*v6)();
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v40;
  double v41[2];
  unsigned int v42;
  uint64_t v43;
  double *v44;
  double v45;
  int v46;
  unsigned int v47;
  int v48;
  _QWORD v49[2];
  unsigned int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DBE10);
  }
  LOBYTE(v49[0]) = 0;
  v50 = -1;
  v4 = v3[6];
  if ((_DWORD)v4 == -1)
    goto LABEL_60;
  v5 = (double *)(v3 + 2);
  v6 = off_1E0FD8010[v4];
  ((void (*)(double **, _QWORD *, _DWORD *))v6)(&v44, v49, v3 + 2);
  v50 = v4;
  LOBYTE(v44) = 0;
  v46 = -1;
  ((void (*)(double *, double **, _QWORD *))v6)(v41, &v44, v49);
  v7 = 0;
  v46 = v4;
  if ((_DWORD)v4 == 8)
  {
    if (v44)
      v7 = *(_DWORD *)v44;
    else
      v7 = 0;
  }
  ((void (*)(double *, double **))off_1E0FD7CC8[v4])(v41, &v44);
  if (!v7)
  {
    v36 = v3[6];
    switch(v36)
    {
      case 2:
        _D0 = trunc(*v5);
        *(double *)(a2 + 8) = _D0;
        *(_DWORD *)(a2 + 24) = 2;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 1:
        _H0 = *(_WORD *)v5;
        __asm { FCVT            S0, H0 }
        *(float *)&_D0 = truncf(_S0);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(a2 + 8) = LOWORD(_D0);
        *(_DWORD *)(a2 + 24) = 1;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
      case 0:
        *(float *)&_D0 = truncf(*(float *)v5);
        *(_DWORD *)(a2 + 8) = LODWORD(_D0);
        *(_DWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        v35 = v50;
        if (v50 != -1)
          goto LABEL_44;
        return LOWORD(_D0);
    }
LABEL_60:
    __break(0xC471u);
    JUMPOUT(0x1825DBE70);
  }
  v40 = a2;
  v8 = 24 * v7;
  v9 = (unsigned int *)WTF::fastMalloc((WTF *)(v8 + 8));
  *v9 = v7;
  v10 = 6;
  bzero(v9 + 2, 24 * ((v8 - 24) / 0x18uLL) + 24);
  v12 = 0;
  LODWORD(v41[0]) = 0;
  v42 = 0;
  do
  {
    if (v50 == 8)
    {
      if (v12 >= *(unsigned int *)v49[0])
      {
        __break(0xC471u);
        JUMPOUT(0x1825DBDF0);
      }
      v11 = v49[0] + v10 * 4 - 16;
      v13 = *(unsigned int *)(v49[0] + v10 * 4);
      v14 = v42;
      if (v42 == -1)
      {
        if ((_DWORD)v13 == -1)
          goto LABEL_22;
      }
      else if ((_DWORD)v13 == -1)
      {
        goto LABEL_58;
      }
      v44 = v41;
      ((void (*)(double **, double *, uint64_t))off_1E0FD80E0[v13])(&v44, v41, v11);
    }
    else
    {
      v14 = v42;
      if (v42 == -1)
      {
        if (v50 == -1)
          goto LABEL_59;
      }
      else if (v50 == -1)
      {
LABEL_58:
        ((void (*)(double **, double *, uint64_t))off_1E0FD7CC8[v14])(&v44, v41, v11);
        v42 = -1;
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825DBE50);
      }
      v44 = v41;
      ((void (*)(double **, double *, _QWORD *))off_1E0FD80E0[v50])(&v44, v41, v49);
    }
LABEL_22:
    if (v42)
    {
      if (v42 == 1)
      {
        _H0 = LOWORD(v41[0]);
        __asm { FCVT            S0, H0 }
        _S0 = truncf(_S0);
        __asm { FCVT            H0, S0 }
        LOWORD(v45) = LOWORD(_S0);
      }
      else
      {
        if (v42 != 2)
          goto LABEL_59;
        v45 = trunc(v41[0]);
      }
    }
    else
    {
      LODWORD(v45) = truncf(*(float *)v41);
    }
    v47 = v42;
    v48 = 0;
    if (v12 >= *v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DBDD0);
    }
    v43 = (uint64_t)&v9[v10 - 4];
    ((void (*)(uint64_t *))off_1E0FD8188[v42])(&v43);
    if (v48 != -1)
      ((void (*)(uint64_t *, double *))off_1E0FD7DD0[v48])(&v43, &v45);
    ++v12;
    v10 += 6;
  }
  while (v7 != v12);
  v22 = *v9;
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v22 + 8));
  v25 = v23;
  *v23 = v22;
  if ((_DWORD)v22)
  {
    v26 = v23 + 6;
    v27 = 24 * v22;
    v28 = v9 + 6;
    do
    {
      *((_BYTE *)v26 - 16) = 0;
      v24 = v26 - 4;
      *v26 = -1;
      v29 = *v28;
      if ((_DWORD)v29 != -1)
      {
        ((void (*)(double **, _DWORD *, unsigned int *))off_1E0FD8010[v29])(&v44, v24, v28 - 4);
        *v26 = v29;
      }
      v26 += 6;
      v28 += 6;
      v27 -= 24;
    }
    while (v27);
  }
  *(_QWORD *)(v40 + 8) = v25;
  *(_DWORD *)(v40 + 24) = 8;
  *(_DWORD *)(v40 + 32) = 0;
  if (v42 != -1)
    ((void (*)(double **, double *))off_1E0FD7CC8[v42])(&v44, v41);
  v30 = *v9;
  if ((_DWORD)v30)
  {
    v31 = 24 * v30;
    v32 = v9 + 6;
    do
    {
      v24 = v32 - 4;
      v33 = *v32;
      if ((_DWORD)v33 != -1)
        ((void (*)(double **, _DWORD *))off_1E0FD7CC8[v33])(&v44, v24);
      *v32 = -1;
      v32 += 6;
      v31 -= 24;
    }
    while (v31);
  }
  WTF::fastFree((WTF *)v9, v24);
  v35 = v50;
  if (v50 != -1)
LABEL_44:
    ((void (*)(double **, _QWORD *))off_1E0FD7CC8[v35])(&v44, v49);
  return LOWORD(_D0);
}

void WGSL::constantPack4x8snorm(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  unsigned __int8 v7;
  float v8;
  float v9;
  unsigned __int8 v10;
  float v11;
  float v12;
  unsigned __int8 v13;
  float v14;
  float v15;
  _BOOL8 v16;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DBFD8);
  }
  if (v2[6] != 8)
    goto LABEL_26;
  v3 = (float *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*(_DWORD *)v3)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 6))
  {
LABEL_26:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4x8unorm(v16);
    return;
  }
  if (LODWORD(v4) == 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1825DBFB8);
  }
  if (*((_DWORD *)v3 + 12))
    goto LABEL_26;
  if (LODWORD(v4) == 2)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 18))
    goto LABEL_26;
  if (LODWORD(v4) == 3)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 24))
    goto LABEL_26;
  v5 = fmaxf(v3[14], -1.0);
  if (v5 >= 1.0)
    v6 = 127.0;
  else
    v6 = v5 * 127.0;
  v7 = vcvtmd_s64_f64(v6 + 0.5);
  v8 = fmaxf(v3[8], -1.0);
  if (v8 >= 1.0)
    v9 = 127.0;
  else
    v9 = v8 * 127.0;
  v10 = vcvtmd_s64_f64(v9 + 0.5);
  v11 = fmaxf(v3[2], -1.0);
  if (v11 >= 1.0)
    v12 = 127.0;
  else
    v12 = v11 * 127.0;
  v13 = vcvtmd_s64_f64(v12 + 0.5);
  v14 = fmaxf(v3[20], -1.0);
  if (v14 >= 1.0)
    v15 = 127.0;
  else
    v15 = v14 * 127.0;
  a2[2] = (v7 << 16) | (vcvtmd_s64_f64(v15 + 0.5) << 24) | (v10 << 8) | v13;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4x8unorm(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  _BOOL8 v16;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC13CLL);
  }
  if (v2[6] != 8)
    goto LABEL_26;
  v3 = (float *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*(_DWORD *)v3)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 6))
  {
LABEL_26:
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4xI8(v16);
    return;
  }
  if (LODWORD(v4) == 1)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1825DC11CLL);
  }
  if (*((_DWORD *)v3 + 12))
    goto LABEL_26;
  if (LODWORD(v4) == 2)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 18))
    goto LABEL_26;
  if (LODWORD(v4) == 3)
    goto LABEL_24;
  if (*((_DWORD *)v3 + 24))
    goto LABEL_26;
  v5 = fmaxf(v3[14], 0.0);
  if (v5 >= 1.0)
    v6 = 255.0;
  else
    v6 = v5 * 255.0;
  v7 = vcvtmd_s64_f64(v6 + 0.5);
  v8 = fmaxf(v3[8], 0.0);
  if (v8 >= 1.0)
    v9 = 255.0;
  else
    v9 = v8 * 255.0;
  v10 = vcvtmd_s64_f64(v9 + 0.5);
  v11 = fmaxf(v3[2], 0.0);
  if (v11 >= 1.0)
    v12 = 255.0;
  else
    v12 = v11 * 255.0;
  v13 = vcvtmd_s64_f64(v12 + 0.5);
  v14 = fmaxf(v3[20], 0.0);
  if (v14 >= 1.0)
    v15 = 255.0;
  else
    v15 = v14 * 255.0;
  a2[2] = (v7 << 16) | (vcvtmd_s64_f64(v15 + 0.5) << 24) | (v10 << 8) | v13;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4xI8(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  int *v3;
  int v4;
  _BOOL8 v5;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC22CLL);
  }
  if (v2[6] != 8)
    goto LABEL_14;
  v3 = (int *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*v3)
    goto LABEL_12;
  if (v3[6] != 3)
    goto LABEL_14;
  if (v4 == 1)
    goto LABEL_12;
  if (v3[12] != 3)
    goto LABEL_14;
  if (v4 == 2)
    goto LABEL_12;
  if (v3[18] != 3)
    goto LABEL_14;
  if (v4 == 3)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1825DC20CLL);
  }
  if (v3[24] == 3)
  {
    a2[2] = (v3[14] << 16) | (v3[20] << 24) | (v3[8] << 8) | *((unsigned __int8 *)v3
                                                                                               + 8);
    a2[6] = 4;
    a2[8] = 0;
    return;
  }
LABEL_14:
  v5 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantPack4xU8(v5);
}

void WGSL::constantPack4xU8(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  int *v3;
  int v4;
  _BOOL8 v5;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC31CLL);
  }
  if (v2[6] != 8)
    goto LABEL_14;
  v3 = (int *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*v3)
    goto LABEL_12;
  if (v3[6] != 4)
    goto LABEL_14;
  if (v4 == 1)
    goto LABEL_12;
  if (v3[12] != 4)
    goto LABEL_14;
  if (v4 == 2)
    goto LABEL_12;
  if (v3[18] != 4)
    goto LABEL_14;
  if (v4 == 3)
  {
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x1825DC2FCLL);
  }
  if (v3[24] == 4)
  {
    a2[2] = (v3[14] << 16) | (v3[20] << 24) | (v3[8] << 8) | *((unsigned __int8 *)v3
                                                                                               + 8);
    a2[6] = 4;
    a2[8] = 0;
    return;
  }
LABEL_14:
  v5 = std::__throw_bad_variant_access[abi:sn180100]();
  WGSL::constantPack4xI8Clamp(v5);
}

void WGSL::constantPack4xI8Clamp(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 v9;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC454);
  }
  if (v2[6] != 8)
    goto LABEL_30;
  v3 = (int *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*v3)
    goto LABEL_28;
  if (v3[6] != 3)
  {
LABEL_30:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack4xU8Clamp(v9);
    return;
  }
  if (v4 == 1)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x1825DC434);
  }
  if (v3[12] != 3)
    goto LABEL_30;
  if (v4 == 2)
    goto LABEL_28;
  if (v3[18] != 3)
    goto LABEL_30;
  if (v4 == 3)
    goto LABEL_28;
  if (v3[24] != 3)
    goto LABEL_30;
  v5 = v3[2];
  v6 = v3[8];
  v7 = v3[14];
  if (v7 <= -128)
    v7 = -128;
  if (v7 >= 127)
    LOBYTE(v7) = 127;
  if (v6 <= -128)
    v6 = -128;
  if (v6 >= 127)
    LOBYTE(v6) = 127;
  if (v5 <= -128)
    v5 = -128;
  if (v5 >= 127)
    LOBYTE(v5) = 127;
  v8 = v3[20];
  if (v8 <= -128)
    v8 = -128;
  if (v8 >= 127)
    v8 = 127;
  a2[2] = (v7 << 16) | (v8 << 24) | (v6 << 8) | v5;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack4xU8Clamp(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  int *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL8 v9;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC568);
  }
  if (v2[6] != 8)
    goto LABEL_22;
  v3 = (int *)*((_QWORD *)v2 + 1);
  v4 = *v3;
  if (!*v3)
    goto LABEL_20;
  if (v3[6] != 4)
  {
LABEL_22:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16snorm(v9);
    return;
  }
  if (v4 == 1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1825DC548);
  }
  if (v3[12] != 4)
    goto LABEL_22;
  if (v4 == 2)
    goto LABEL_20;
  if (v3[18] != 4)
    goto LABEL_22;
  if (v4 == 3)
    goto LABEL_20;
  if (v3[24] != 4)
    goto LABEL_22;
  v5 = v3[2];
  v6 = v3[8];
  v7 = v3[14];
  if (v7 >= 0xFF)
    v7 = 255;
  if (v6 >= 0xFF)
    v6 = 255;
  if (v5 >= 0xFF)
    v5 = 255;
  v8 = v3[20];
  if (v8 >= 0xFF)
    v8 = 255;
  a2[2] = (v8 << 24) | (v7 << 16) | (v6 << 8) | v5;
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16snorm(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  float v4;
  float v5;
  unsigned __int16 v6;
  float v7;
  float v8;
  _BOOL8 v9;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC664);
  }
  if (v2[6] != 8)
    goto LABEL_16;
  v3 = *((_QWORD *)v2 + 1);
  if (!*(_DWORD *)v3)
    goto LABEL_14;
  if (*(_DWORD *)(v3 + 24))
  {
LABEL_16:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16unorm(v9);
    return;
  }
  if (*(_DWORD *)v3 == 1)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1825DC644);
  }
  if (*(_DWORD *)(v3 + 48))
    goto LABEL_16;
  v4 = fmaxf(*(float *)(v3 + 8), -1.0);
  if (v4 >= 1.0)
    v5 = 32767.0;
  else
    v5 = v4 * 32767.0;
  v6 = vcvtmd_s64_f64(v5 + 0.5);
  v7 = fmaxf(*(float *)(v3 + 32), -1.0);
  if (v7 >= 1.0)
    v8 = 32767.0;
  else
    v8 = v7 * 32767.0;
  a2[2] = v6 | ((unsigned __int16)vcvtmd_s64_f64(v8 + 0.5) << 16);
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16unorm(_QWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD *v2;
  uint64_t v3;
  float v4;
  float v5;
  unsigned int v6;
  float v7;
  float v8;
  _BOOL8 v9;

  v2 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC760);
  }
  if (v2[6] != 8)
    goto LABEL_16;
  v3 = *((_QWORD *)v2 + 1);
  if (!*(_DWORD *)v3)
    goto LABEL_14;
  if (*(_DWORD *)(v3 + 24))
  {
LABEL_16:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::constantPack2x16float(v9);
    return;
  }
  if (*(_DWORD *)v3 == 1)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1825DC740);
  }
  if (*(_DWORD *)(v3 + 48))
    goto LABEL_16;
  v4 = fmaxf(*(float *)(v3 + 8), 0.0);
  if (v4 >= 1.0)
    v5 = 65535.0;
  else
    v5 = v4 * 65535.0;
  v6 = vcvtmd_s64_f64(v5 + 0.5);
  v7 = fmaxf(*(float *)(v3 + 32), 0.0);
  if (v7 >= 1.0)
    v8 = 65535.0;
  else
    v8 = v7 * 65535.0;
  a2[2] = v6 | (vcvtmd_s64_f64(v8 + 0.5) << 16);
  a2[6] = 4;
  a2[8] = 0;
}

void WGSL::constantPack2x16float(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _OWORD v20[7];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD __src[7];
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DC9B4);
  }
  if (v3[6] != 8)
    goto LABEL_28;
  v4 = *((_QWORD *)v3 + 1);
  if (!*(_DWORD *)v4)
    goto LABEL_26;
  if (*(_DWORD *)(v4 + 24))
    goto LABEL_28;
  _S0 = *(float *)(v4 + 8);
  if (_S0 > 65504.0 || _S0 < -65504.0)
    goto LABEL_16;
  if (*(_DWORD *)v4 == 1)
  {
LABEL_26:
    __break(0xC471u);
    goto LABEL_30;
  }
  if (*(_DWORD *)(v4 + 48))
LABEL_28:
    std::__throw_bad_variant_access[abi:sn180100]();
  _S1 = *(float *)(v4 + 32);
  if (_S1 <= 65504.0 && _S1 >= -65504.0)
  {
    v14 = 0;
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S1
    }
    *(_WORD *)(a2 + 8) = _H0;
    *(_WORD *)(a2 + 10) = _H1;
    *(_DWORD *)(a2 + 24) = 4;
    goto LABEL_25;
  }
LABEL_16:
  WTF::numberToString();
  v9 = strlen((const char *)v20);
  HIDWORD(v21) = v9;
  if (v9 < 0)
    goto LABEL_29;
  if (__OFADD__(v9, 31))
    goto LABEL_29;
  v10 = (v9 + 37);
  if (__OFADD__(v9 + 31, 6))
    goto LABEL_29;
  v26 = v20[4];
  v27 = v20[5];
  v28 = v20[6];
  v29 = v21;
  v22 = v20[0];
  v23 = v20[1];
  v24 = v20[2];
  v25 = v20[3];
  WTF::tryFastCompactMalloc((WTF *)(v10 + 20));
  v11 = *(_QWORD *)&__src[0];
  if (!*(_QWORD *)&__src[0])
  {
LABEL_29:
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x1825DC994);
  }
  **(_DWORD **)&__src[0] = 2;
  *(_DWORD *)(v11 + 4) = v10;
  *(_QWORD *)(v11 + 8) = v11 + 20;
  *(_WORD *)(v11 + 24) = 8293;
  *(_DWORD *)(v11 + 16) = 4;
  *(_DWORD *)(v11 + 20) = 1970037110;
  v12 = (_BYTE *)(v11 + 26);
  __src[4] = v26;
  __src[5] = v27;
  __src[6] = v28;
  v31 = v29;
  __src[0] = v22;
  __src[1] = v23;
  __src[2] = v24;
  __src[3] = v25;
  v13 = HIDWORD(v29);
  if (HIDWORD(v29))
  {
    if (HIDWORD(v29) == 1)
      *v12 = __src[0];
    else
      memcpy((void *)(v11 + 26), __src, HIDWORD(v31));
  }
  qmemcpy(&v12[v13], " cannot be represented as 'f16'", 31);
  *(_QWORD *)(a2 + 8) = v11;
  v14 = 1;
LABEL_25:
  *(_DWORD *)(a2 + 32) = v14;
}

uint64_t WGSL::constantUnpack4x8snorm@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _BOOL8 v27;
  char v28;
  char v29;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DCC28);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = (char)v4;
    v6 = (__int16)v4 >> 8;
    v7 = v4 << 8 >> 24;
    v8 = v4 >> 24;
    v9 = WTF::fastMalloc((WTF *)0x68);
    v10 = (unsigned int *)v9;
    *(_DWORD *)v9 = 4;
    v11 = (float)v5 / 127.0;
    if (v11 < -1.0)
      v11 = -1.0;
    *(float *)(v9 + 8) = v11;
    v12 = v9 + 8;
    *(_OWORD *)(v9 + 28) = 0u;
    *(_OWORD *)(v9 + 44) = 0u;
    *(_OWORD *)(v9 + 76) = 0u;
    *(_OWORD *)(v9 + 12) = 0u;
    *(_OWORD *)(v9 + 60) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    v13 = (float)v6 / 127.0;
    if (v13 < -1.0)
      v13 = -1.0;
    *(float *)(v9 + 32) = v13;
    v14 = (float)v7 / 127.0;
    if (v14 < -1.0)
      v14 = -1.0;
    *(float *)(v9 + 56) = v14;
    v15 = (float)v8 / 127.0;
    if (v15 < -1.0)
      v15 = -1.0;
    *(float *)(v9 + 80) = v15;
    v16 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v16 = 4;
    *(_BYTE *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 24) = -1;
    v17 = v10[6];
    if ((_DWORD)v17 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD8010[v17])(&v28, v16 + 8, v12);
      *(_DWORD *)(v16 + 24) = v17;
    }
    *(_BYTE *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 48) = -1;
    v18 = v10[12];
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v18])(&v28);
      *(_DWORD *)(v16 + 48) = v18;
    }
    *(_BYTE *)(v16 + 56) = 0;
    *(_DWORD *)(v16 + 72) = -1;
    v19 = v10[18];
    if ((_DWORD)v19 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v19])(&v28);
      *(_DWORD *)(v16 + 72) = v19;
    }
    *(_BYTE *)(v16 + 80) = 0;
    v20 = (_DWORD *)(v16 + 80);
    *(_DWORD *)(v16 + 96) = -1;
    v21 = v10[24];
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v21])(&v28);
      *(_DWORD *)(v16 + 96) = v21;
    }
    *(_QWORD *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v22 = *v10;
    if ((_DWORD)v22)
    {
      v23 = 24 * v22;
      v24 = v10 + 6;
      do
      {
        v20 = v24 - 4;
        v25 = *v24;
        if ((_DWORD)v25 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v25])(&v29, v20);
        *v24 = -1;
        v24 += 6;
        v23 -= 24;
      }
      while (v23);
    }
    return WTF::fastFree((WTF *)v10, v20);
  }
  else
  {
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4x8unorm(v27);
  }
}

uint64_t WGSL::constantUnpack4x8unorm@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _BOOL8 v21;
  char v22;
  char v23;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DCE6CLL);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = BYTE1(v4);
    v6 = v4;
    v7 = BYTE2(v4);
    v8 = HIBYTE(v4);
    v9 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *v9 = 4;
    *((float *)v9 + 2) = (float)v6 / 255.0;
    *(_OWORD *)(v9 + 7) = 0u;
    *(_OWORD *)(v9 + 11) = 0u;
    *(_OWORD *)(v9 + 19) = 0u;
    *(_OWORD *)(v9 + 3) = 0u;
    *(_OWORD *)(v9 + 15) = 0u;
    *(_OWORD *)(v9 + 22) = 0u;
    *((float *)v9 + 8) = (float)v5 / 255.0;
    *((float *)v9 + 14) = (float)v7 / 255.0;
    *((float *)v9 + 20) = (float)v8 / 255.0;
    v10 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v10 = 4;
    *(_BYTE *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 24) = -1;
    v11 = v9[6];
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v11])(&v22, v10 + 8, v9 + 2);
      *(_DWORD *)(v10 + 24) = v11;
    }
    *(_BYTE *)(v10 + 32) = 0;
    *(_DWORD *)(v10 + 48) = -1;
    v12 = v9[12];
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v12])(&v22);
      *(_DWORD *)(v10 + 48) = v12;
    }
    *(_BYTE *)(v10 + 56) = 0;
    *(_DWORD *)(v10 + 72) = -1;
    v13 = v9[18];
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v13])(&v22);
      *(_DWORD *)(v10 + 72) = v13;
    }
    *(_BYTE *)(v10 + 80) = 0;
    v14 = (_DWORD *)(v10 + 80);
    *(_DWORD *)(v10 + 96) = -1;
    v15 = v9[24];
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v15])(&v22);
      *(_DWORD *)(v10 + 96) = v15;
    }
    *(_QWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v16 = *v9;
    if ((_DWORD)v16)
    {
      v17 = 24 * v16;
      v18 = v9 + 6;
      do
      {
        v14 = v18 - 4;
        v19 = *v18;
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v19])(&v23, v14);
        *v18 = -1;
        v18 += 6;
        v17 -= 24;
      }
      while (v17);
    }
    return WTF::fastFree((WTF *)v9, v14);
  }
  else
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4xI8(v21);
  }
}

uint64_t WGSL::constantUnpack4xI8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _BOOL8 v17;
  char v18;
  char v19;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DD09CLL);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *v5 = 4;
    v5[2] = (char)v4;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 22) = 0u;
    v5[8] = (__int16)v4 >> 8;
    v5[6] = 3;
    v5[12] = 3;
    v5[14] = v4 << 8 >> 24;
    v5[18] = 3;
    v5[20] = v4 >> 24;
    v5[24] = 3;
    v6 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v6 = 4;
    *(_BYTE *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v7 = v5[6];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v7])(&v18, v6 + 8, v5 + 2);
      *(_DWORD *)(v6 + 24) = v7;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    v8 = v5[12];
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v8])(&v18);
      *(_DWORD *)(v6 + 48) = v8;
    }
    *(_BYTE *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    v9 = v5[18];
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v9])(&v18);
      *(_DWORD *)(v6 + 72) = v9;
    }
    *(_BYTE *)(v6 + 80) = 0;
    v10 = (_DWORD *)(v6 + 80);
    *(_DWORD *)(v6 + 96) = -1;
    v11 = v5[24];
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v11])(&v18);
      *(_DWORD *)(v6 + 96) = v11;
    }
    *(_QWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v12 = *v5;
    if ((_DWORD)v12)
    {
      v13 = 24 * v12;
      v14 = v5 + 6;
      do
      {
        v10 = v14 - 4;
        v15 = *v14;
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v15])(&v19, v10);
        *v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v5, v10);
  }
  else
  {
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack4xU8(v17);
  }
}

uint64_t WGSL::constantUnpack4xU8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _BOOL8 v17;
  char v18;
  char v19;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DD2C8);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = (unsigned int *)WTF::fastMalloc((WTF *)0x68);
    *v5 = 4;
    v5[2] = v4;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 22) = 0u;
    v5[6] = 4;
    v5[8] = BYTE1(v4);
    v5[14] = BYTE2(v4);
    v5[12] = 4;
    v5[18] = 4;
    v5[20] = HIBYTE(v4);
    v5[24] = 4;
    v6 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v6 = 4;
    *(_BYTE *)(v6 + 8) = 0;
    *(_DWORD *)(v6 + 24) = -1;
    v7 = v5[6];
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v7])(&v18, v6 + 8, v5 + 2);
      *(_DWORD *)(v6 + 24) = v7;
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 48) = -1;
    v8 = v5[12];
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v8])(&v18);
      *(_DWORD *)(v6 + 48) = v8;
    }
    *(_BYTE *)(v6 + 56) = 0;
    *(_DWORD *)(v6 + 72) = -1;
    v9 = v5[18];
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v9])(&v18);
      *(_DWORD *)(v6 + 72) = v9;
    }
    *(_BYTE *)(v6 + 80) = 0;
    v10 = (_DWORD *)(v6 + 80);
    *(_DWORD *)(v6 + 96) = -1;
    v11 = v5[24];
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v11])(&v18);
      *(_DWORD *)(v6 + 96) = v11;
    }
    *(_QWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v12 = *v5;
    if ((_DWORD)v12)
    {
      v13 = 24 * v12;
      v14 = v5 + 6;
      do
      {
        v10 = v14 - 4;
        v15 = *v14;
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v15])(&v19, v10);
        *v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v5, v10);
  }
  else
  {
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16snorm(v17);
  }
}

uint64_t WGSL::constantUnpack2x16snorm@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _BOOL8 v21;
  char v22;
  char v23;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DD48CLL);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = (__int16)v4;
    v6 = v4 >> 16;
    v7 = WTF::fastMalloc((WTF *)0x38);
    v8 = (unsigned int *)v7;
    *(_DWORD *)v7 = 2;
    v9 = (float)v5 / 32767.0;
    if (v9 < -1.0)
      v9 = -1.0;
    *(float *)(v7 + 8) = v9;
    v10 = v7 + 8;
    *(_OWORD *)(v7 + 28) = 0u;
    *(_OWORD *)(v7 + 12) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    v11 = (float)v6 / 32767.0;
    if (v11 < -1.0)
      v11 = -1.0;
    *(float *)(v7 + 32) = v11;
    v12 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v12 = 2;
    *(_BYTE *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 24) = -1;
    v13 = v8[6];
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_1E0FD8010[v13])(&v22, v12 + 8, v10);
      *(_DWORD *)(v12 + 24) = v13;
    }
    *(_BYTE *)(v12 + 32) = 0;
    v14 = (_DWORD *)(v12 + 32);
    *(_DWORD *)(v12 + 48) = -1;
    v15 = v8[12];
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v15])(&v22);
      *(_DWORD *)(v12 + 48) = v15;
    }
    *(_QWORD *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v16 = *v8;
    if ((_DWORD)v16)
    {
      v17 = 24 * v16;
      v18 = v8 + 6;
      do
      {
        v14 = v18 - 4;
        v19 = *v18;
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v19])(&v23, v14);
        *v18 = -1;
        v18 += 6;
        v17 -= 24;
      }
      while (v17);
    }
    return WTF::fastFree((WTF *)v8, v14);
  }
  else
  {
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16unorm(v21);
  }
}

uint64_t WGSL::constantUnpack2x16unorm@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _BOOL8 v17;
  char v18;
  char v19;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DD63CLL);
  }
  if (v3[6] == 4)
  {
    v4 = v3[2];
    v5 = (unsigned __int16)v4;
    v6 = HIWORD(v4);
    v7 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *v7 = 2;
    *((float *)v7 + 2) = (float)v5 / 65535.0;
    *(_OWORD *)(v7 + 7) = 0u;
    *(_OWORD *)(v7 + 3) = 0u;
    *(_OWORD *)(v7 + 10) = 0u;
    *((float *)v7 + 8) = (float)v6 / 65535.0;
    v8 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v8 = 2;
    *(_BYTE *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 24) = -1;
    v9 = v7[6];
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v9])(&v18, v8 + 8, v7 + 2);
      *(_DWORD *)(v8 + 24) = v9;
    }
    *(_BYTE *)(v8 + 32) = 0;
    v10 = (_DWORD *)(v8 + 32);
    *(_DWORD *)(v8 + 48) = -1;
    v11 = v7[12];
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v11])(&v18);
      *(_DWORD *)(v8 + 48) = v11;
    }
    *(_QWORD *)(a2 + 8) = v8;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v12 = *v7;
    if ((_DWORD)v12)
    {
      v13 = 24 * v12;
      v14 = v7 + 6;
      do
      {
        v10 = v14 - 4;
        v15 = *v14;
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v15])(&v19, v10);
        *v14 = -1;
        v14 += 6;
        v13 -= 24;
      }
      while (v13);
    }
    return WTF::fastFree((WTF *)v7, v10);
  }
  else
  {
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::constantUnpack2x16float(v17);
  }
}

uint64_t WGSL::constantUnpack2x16float@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  unsigned int *v6;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _BOOL8 v22;
  WGSL::AST::Structure *v23;
  char v24;
  char v25;

  v3 = (_DWORD *)*a1;
  if (!*(_DWORD *)*a1)
  {
    __break(0xC471u);
    JUMPOUT(0x1825DD7E4);
  }
  if (v3[6] == 4)
  {
    _S8 = v3[2];
    _S9 = HIWORD(_S8);
    v6 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *v6 = 2;
    __asm { FCVT            S0, H8 }
    v6[2] = _S0;
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 10) = 0u;
    __asm { FCVT            S0, H9 }
    v6[8] = _S0;
    v13 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v13 = 2;
    *(_BYTE *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 24) = -1;
    v14 = v6[6];
    if ((_DWORD)v14 != -1)
    {
      ((void (*)(char *, uint64_t, unsigned int *))off_1E0FD8010[v14])(&v24, v13 + 8, v6 + 2);
      *(_DWORD *)(v13 + 24) = v14;
    }
    *(_BYTE *)(v13 + 32) = 0;
    v15 = (_DWORD *)(v13 + 32);
    *(_DWORD *)(v13 + 48) = -1;
    v16 = v6[12];
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(char *))off_1E0FD8010[v16])(&v24);
      *(_DWORD *)(v13 + 48) = v16;
    }
    *(_QWORD *)(a2 + 8) = v13;
    *(_DWORD *)(a2 + 24) = 8;
    *(_DWORD *)(a2 + 32) = 0;
    v17 = *v6;
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      v19 = v6 + 6;
      do
      {
        v15 = v19 - 4;
        v20 = *v19;
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v20])(&v25, v15);
        *v19 = -1;
        v19 += 6;
        v18 -= 24;
      }
      while (v18);
    }
    return WTF::fastFree((WTF *)v6, v15);
  }
  else
  {
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::TypeChecker::visit((WGSL::TypeChecker *)v22, v23);
  }
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, uint64_t **a2)
{
  WGSL::AST::Structure *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  unsigned int v24;
  WTF **v25;
  int i;
  unsigned int v27;
  WTF **v28;
  WTF *v29;
  WTF *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD **v41;
  _DWORD *v42;
  _BOOL8 v43;
  int v44;
  _OWORD *v45;
  int8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  char v53;
  char v54[16];
  int v55;
  char v56;
  _BYTE v57[24];

  v2 = (WGSL::AST::Structure *)a2;
  v4 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v4)
  {
    v5 = a2[7];
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WGSL::AST::Visitor::visit(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  v51 = 0;
  if (!*((_DWORD *)v2 + 21))
  {
LABEL_48:
    v36 = WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(*((_QWORD *)this + 14), (uint64_t)v2, &v51);
    *((_QWORD *)v2 + 14) = v36;
    LOBYTE(v52) = 1;
    *((_QWORD *)&v52 + 1) = v36;
    v53 = 3;
    v54[0] = 0;
    v56 = 0;
    WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v57, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)v2 + 6, &v52);
    v38 = v57[16];
    if (v56 && v55 != -1)
      ((void (*)(_BYTE *, char *))off_1E0FD7CC8[v55])(v57, v54);
    if (!v38)
    {
      LOBYTE(v52) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (__int128 *)v2 + 2, (int8x16_t *)"redeclaration of '", 19, *((_QWORD *)v2 + 6), (char *)&v52);
    }
    v39 = v51;
    if (v51)
    {
LABEL_54:
      v40 = *(unsigned int *)(v39 - 4);
      if ((_DWORD)v40)
      {
        v41 = (_DWORD **)v39;
        do
        {
          v42 = *v41;
          if (*v41 != (_DWORD *)-1)
          {
            *v41 = 0;
            if (v42)
            {
              if (*v42 == 2)
                WTF::StringImpl::destroy();
              else
                *v42 -= 2;
            }
          }
          v41 += 2;
          --v40;
        }
        while (v40);
      }
      WTF::fastFree((WTF *)(v39 - 16), v37);
    }
    return;
  }
  v8 = 0;
  v50 = (unsigned int *)v2;
LABEL_9:
  v10 = *(_QWORD *)(*((_QWORD *)v2 + 9) + 8 * v8);
  v11 = *(unsigned int *)(v10 + 100);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v10 + 88);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      WGSL::AST::Visitor::visit(this, v14);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *(_QWORD *)(v10 + 104);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) != 22)
  {
    WGSL::AST::Visitor::visit(this, v15);
    v17 = (WTF *)*((_QWORD *)this + 11);
    v18 = *((unsigned int *)v17 + 12);
    if ((_DWORD)v18 != 13)
      goto LABEL_17;
    goto LABEL_16;
  }
  v17 = (WTF *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v15 + 64), v16);
  *((_QWORD *)this + 11) = v17;
  v18 = *((unsigned int *)v17 + 12);
  if ((_DWORD)v18 == 13)
  {
LABEL_16:
    *(_QWORD *)&v52 = "' requires template arguments";
    *((_QWORD *)&v52 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v15 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v52);
    v17 = *(WTF **)(*((_QWORD *)this + 14) + 24);
    v18 = *((unsigned int *)v17 + 12);
  }
LABEL_17:
  *(_QWORD *)(v15 + 24) = v17;
  *((_QWORD *)this + 11) = 0;
  if (v18 == 14)
    goto LABEL_65;
  if (v18 == 0xFFFFFFFFLL)
  {
    v43 = std::__throw_bad_variant_access[abi:sn180100]();
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v43, v44, v45, v46, v47, v48, v49);
    return;
  }
  *(_QWORD *)&v52 = v57;
  if ((((uint64_t (*)(__int128 *, WTF *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type25hasCreationFixedFootprintEvE3__0JZNKS9_25hasCreationFixedFootprintEvE3__1ZNKS9_25hasCreationFixedFootprintEvE3__2ZNKS9_25hasCreationFixedFootprintEvE3__3ZNKS9_25hasCreationFixedFootprintEvE3__4ZNKS9_25hasCreationFixedFootprintEvE3__5ZNKS9_25hasCreationFixedFootprintEvE3__6ZNKS9_25hasCreationFixedFootprintEvE3__7ZNKS9_25hasCreationFixedFootprintEvE3__8ZNKS9_25hasCreationFixedFootprintEvE3__9ZNKS9_25hasCreationFixedFootprintEvE4__10ZNKS9_25hasCreationFixedFootprintEvE4__11ZNKS9_25hasCreationFixedFootprintEvE4__12ZNKS9_25hasCreationFixedFootprintEvE4__13ZNKS9_25hasCreationFixedFootprintEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v52, v17) & 1) != 0)goto LABEL_20;
  if ((WGSL::Type::containsRuntimeArray(v17) & 1) != 0)
  {
    if (*((unsigned int *)v2 + 21) - 1 != v8)
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(v10 + 8), "runtime arrays may only appear as the last member of a struct", 62);
      goto LABEL_65;
    }
LABEL_20:
    v20 = v51;
    if (v51
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v51, 8u), (v20 = v51) != 0))
    {
      v21 = *(_DWORD *)(v20 - 8);
      v22 = *(WTF::StringImpl **)(v10 + 48);
      v23 = *((_DWORD *)v22 + 4);
      if (v23 >= 0x100)
      {
LABEL_23:
        v24 = v23 >> 8;
LABEL_26:
        v25 = 0;
        for (i = 1; ; ++i)
        {
          v27 = v24 & v21;
          v28 = (WTF **)(v20 + 16 * (v24 & v21));
          v29 = *v28;
          if (*v28 == (WTF *)-1)
          {
            v25 = (WTF **)(v20 + 16 * v27);
          }
          else
          {
            if (!v29)
            {
              if (v25)
              {
                *v25 = 0;
                v25[1] = 0;
                --*(_DWORD *)(v20 - 16);
                v28 = v25;
              }
              v30 = *(WTF **)(v10 + 48);
              if (v30)
                *(_DWORD *)v30 += 2;
              *v28 = v30;
              v28[1] = v17;
              v31 = v51;
              if (v51)
              {
                v32 = *(_DWORD *)(v51 - 16);
                v33 = *(_DWORD *)(v51 - 12) + 1;
                *(_DWORD *)(v51 - 12) = v33;
                v34 = (v32 + v33);
                v35 = *(unsigned int *)(v31 - 4);
                if (v35 <= 0x400)
                  goto LABEL_39;
LABEL_43:
                if (v35 > 2 * v34)
                  goto LABEL_8;
LABEL_6:
                v9 = (_DWORD)v35 << (6 * v33 >= (2 * v35));
                goto LABEL_7;
              }
              v33 = 1;
              MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
              v34 = (MEMORY[0xFFFFFFFFFFFFFFF0] + 1);
              v35 = MEMORY[0xFFFFFFFFFFFFFFFC];
              if (MEMORY[0xFFFFFFFFFFFFFFFC] > 0x400u)
                goto LABEL_43;
LABEL_39:
              if (3 * v35 <= 4 * v34)
              {
                if ((_DWORD)v35)
                  goto LABEL_6;
                v9 = 8;
LABEL_7:
                WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Function *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Function *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Function *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v51, v9);
              }
LABEL_8:
              ++v8;
              v2 = (WGSL::AST::Structure *)v50;
              if (v8 >= v50[21])
                goto LABEL_48;
              goto LABEL_9;
            }
            if ((WTF::equal(v29, *(const WTF::StringImpl **)(v10 + 48), v19) & 1) != 0)
              goto LABEL_8;
          }
          v24 = i + v27;
        }
      }
    }
    else
    {
      v21 = 0;
      v22 = *(WTF::StringImpl **)(v10 + 48);
      v23 = *((_DWORD *)v22 + 4);
      if (v23 >= 0x100)
        goto LABEL_23;
    }
    v24 = WTF::StringImpl::hashSlowCase(v22);
    goto LABEL_26;
  }
  *(_QWORD *)&v52 = "' cannot be used as a struct member because it does not have creation-fixed footprint";
  *((_QWORD *)&v52 + 1) = 86;
  WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v10 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v52);
LABEL_65:
  WGSL::TypeChecker::introduceType(this, (WGSL::AST::Structure *)((char *)v2 + 24), *(const WGSL::Type **)(*((_QWORD *)this + 14) + 24));
  v39 = v51;
  if (v51)
    goto LABEL_54;
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(uint64_t a1, int a2, _OWORD *a3, int8x16_t *a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  char v23;
  _BYTE v24[48];
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v25 = -1;
  v13 = *(unsigned int *)(a6 + 48);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD7E68[v13])(v22, v24, a6);
    v25 = v13;
  }
  *(_OWORD *)v22 = *a7;
  WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(&v21, a4, a5, (uint64_t)v24, (uint64_t)v22);
  if (!v21)
  {
    __break(0xC471u);
    return;
  }
  *(_QWORD *)v22 = v21;
  *(_OWORD *)&v22[8] = *a3;
  v14 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v14 != *(_DWORD *)(a1 + 128))
  {
    v20 = *(_QWORD *)(a1 + 120) + 24 * v14;
    *(_QWORD *)v20 = v21;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)&v22[8];
    ++*(_DWORD *)(a1 + 132);
    *(_QWORD *)v22 = 0;
LABEL_10:
    v19 = v25;
    if (v25 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
  v15 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v14 + 1, (unint64_t)v22);
  v16 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v17 = *(_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)v16 = v17;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
  v18 = *(_DWORD **)v22;
  ++*(_DWORD *)(a1 + 132);
  *(_QWORD *)v22 = 0;
  if (!v18)
    goto LABEL_10;
  if (*v18 != 2)
  {
    *v18 -= 2;
    v19 = v25;
    if (v25 == -1)
      goto LABEL_12;
LABEL_11:
    ((void (*)(char *, _BYTE *))off_1E0FD7DF0[v19])(&v23, v24);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  v19 = v25;
  if (v25 != -1)
    goto LABEL_11;
LABEL_12:
  if (a2)
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(_DWORD *result, int a2, __int128 *a3, _BYTE *a4, uint64_t a5)
{
  size_t v5;
  _DWORD *v8;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;

  if (a5)
    v5 = a5 - 1;
  else
    v5 = 0;
  if (v5 >> 31)
    goto LABEL_22;
  v8 = result;
  if (!(_DWORD)v5)
  {
    v10 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v16 = v10;
    v17 = *a3;
    v11 = result[33];
    if ((_DWORD)v11 == result[32])
      goto LABEL_11;
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
  v10 = v16;
  if (!v16)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1825DE034);
  }
  result = v16 + 5;
  *v16 = 2;
  v10[1] = v5;
  *((_QWORD *)v10 + 1) = v10 + 5;
  v10[4] = 4;
  if ((_DWORD)v5 != 1)
  {
    result = memcpy(result, a4, v5);
    v16 = v10;
    v17 = *a3;
    v11 = v8[33];
    if ((_DWORD)v11 == v8[32])
      goto LABEL_11;
LABEL_16:
    v15 = *((_QWORD *)v8 + 15) + 24 * v11;
    *(_QWORD *)v15 = v10;
    *(_OWORD *)(v15 + 8) = v17;
    ++v8[33];
LABEL_17:
    if (!a2)
      return result;
    goto LABEL_18;
  }
  *(_BYTE *)result = *a4;
  v16 = v10;
  v17 = *a3;
  v11 = v8[33];
  if ((_DWORD)v11 != v8[32])
    goto LABEL_16;
LABEL_11:
  v12 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v8 + 30), v11 + 1, (unint64_t)&v16);
  v13 = *((_QWORD *)v8 + 15) + 24 * v8[33];
  v14 = *(_QWORD *)v12;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)v13 = v14;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
  result = v16;
  ++v8[33];
  v16 = 0;
  if (!result)
    goto LABEL_17;
  if (*result != 2)
  {
    *result -= 2;
    if (!a2)
      return result;
    goto LABEL_18;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  if (a2)
LABEL_18:
    *((_QWORD *)v8 + 11) = *(_QWORD *)(*((_QWORD *)v8 + 14) + 24);
  return result;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::Variable *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  char v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int16 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  WGSL::TypeChecker *v22;
  WGSL::AST::Variable *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  const char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WGSL::TypeChecker *v62;
  WGSL::AST::Variable *v63;
  __int128 *v64;
  char *v65;
  WGSL::TypeChecker *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  size_t v72;
  WGSL::TypeChecker *v73;
  WGSL::AST::Variable *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  const char **v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  void *v96;
  void *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _BYTE *v105;
  size_t v106;
  int8x16_t *v107;
  _BYTE *v108;
  unint64_t v109;
  unsigned __int128 *v110;
  unsigned __int128 v111;
  uint64_t v112;
  uint64_t v113;
  const char *v115;
  uint64_t v116;
  char *v117;
  int v118;
  char **v119;
  uint64_t v120;
  uint64_t v121;
  _WORD *v122;
  uint64_t v123;
  int8x16_t *v124;
  size_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  _BYTE *v129;
  int8x16_t *v130;
  char v131;
  _WORD *v132;
  unint64_t v133;
  __int128 v134;
  char *v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  char *v139;
  char *v140;
  char *v141;
  _BYTE *v142;
  _BYTE *v143;
  int v144;
  int v145;
  unint64_t v146;
  BOOL v147;
  uint64_t v148;
  unint64_t v149;
  _WORD *v150;
  int8x16_t *v151;
  __int16 v152;
  uint64_t v153;
  _WORD *v154;
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char **v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int8x16_t *v167;
  int8x16_t *v168;
  unint64_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int16x8_t *v174;
  int8x8_t *v175;
  unint64_t v176;
  int16x8_t v177;
  uint8x8_t *v178;
  uint16x8_t *v179;
  unint64_t v180;
  uint8x16_t v181;
  uint16x8_t v182;
  uint16x8_t v183;
  uint8x8_t *v184;
  uint16x8_t *v185;
  unint64_t v186;
  uint8x8_t v187;
  _BYTE v188[16];
  int v189;
  char v190;
  WGSL::TypeChecker *v191;
  WGSL::AST::Variable *v192;
  char v193;
  char v194;
  char v195;
  const char *v196;
  _BYTE v197[48];
  int v198;
  _BYTE v199[48];
  int v200;
  _BYTE v201[48];
  int v202;
  _BYTE v203[48];
  int v204;
  _BYTE v205[48];
  int v206;
  _BYTE v207[48];
  int v208;
  _BYTE v209[48];
  int v210;
  _BYTE v211[48];
  int v212;
  _BYTE v213[48];
  int v214;
  _BYTE v215[48];
  int v216;
  _BYTE v217[48];
  int v218;
  _BYTE v219[48];
  int v220;
  const char *v221;
  __int128 v222;
  unsigned int v223;
  const char **v224;
  __int128 v225;
  _DWORD *v226;
  uint64_t v227;
  const char **v228;
  uint64_t v229;
  const char **v230;
  const char **v231;
  const char **v232;
  const char **v233;
  __int128 v234;
  const char ***v235;
  const char ***v236;
  const char ***v237;
  const char ***v238;
  const char ***v239;
  const char ***v240;
  const char ***v241;
  const char ***v242;
  const char ***v243;
  const char ***v244;
  const char ***v245;
  const char ***v246;
  const char ***v247;
  uint64_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;

  v248 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a2 + 11);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      WGSL::AST::Visitor::visit(this, v7);
      v6 -= 8;
    }
    while (v6);
  }
  v191 = this;
  v192 = a2;
  v8 = *((unsigned __int8 *)a2 + 128);
  if (v8 == 2)
    v9 = 2;
  else
    v9 = 3;
  if (*((_BYTE *)a2 + 128))
    v10 = v9;
  else
    v10 = 1;
  v11 = *((_QWORD *)a2 + 14);
  if (!v11)
  {
    v13 = 0;
    v14 = *((_QWORD *)a2 + 15);
    if (v14)
      goto LABEL_20;
LABEL_15:
    v15 = 0;
    if (v8 > 3)
      goto LABEL_78;
    goto LABEL_55;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v11 + 16))(*((_QWORD *)a2 + 14)) != 22)
  {
    WGSL::AST::Visitor::visit(this, v11);
    v13 = (char *)*((_QWORD *)this + 11);
    if (*((_DWORD *)v13 + 12) != 13)
      goto LABEL_19;
    goto LABEL_18;
  }
  v13 = (char *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v11 + 64), v12);
  *((_QWORD *)this + 11) = v13;
  if (*((_DWORD *)v13 + 12) == 13)
  {
LABEL_18:
    v224 = (const char **)"' requires template arguments";
    *(_QWORD *)&v225 = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v11 + 8), (int8x16_t *)"type '", 7, (uint64_t)v13, &v224);
    v13 = *(char **)(*((_QWORD *)this + 14) + 24);
  }
LABEL_19:
  *(_QWORD *)(v11 + 24) = v13;
  *((_QWORD *)this + 11) = 0;
  v8 = *((unsigned __int8 *)a2 + 128);
  v14 = *((_QWORD *)a2 + 15);
  if (!v14)
    goto LABEL_15;
LABEL_20:
  v16 = v10;
  if (v8 == 3)
  {
    if (*((_QWORD *)this + 12))
      v16 = v10;
    else
      v16 = 2;
  }
  v17 = *((_WORD *)this + 52);
  *((_BYTE *)this + 105) = 0;
  *((_BYTE *)this + 104) = v16;
  WGSL::AST::Visitor::visit(this, v14);
  v18 = (char *)*((_QWORD *)this + 11);
  *(_QWORD *)(v14 + 24) = v18;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v17;
  v15 = *((_QWORD *)a2 + 15);
  if (*(_BYTE *)(v15 + 56))
    v14 = v15 + 32;
  else
    v14 = 0;
  if (v18 && *((_DWORD *)v18 + 12) == 10)
  {
    v18 = (char *)*((_QWORD *)v18 + 1);
    *(_QWORD *)(v15 + 24) = v18;
  }
  if (!v13)
  {
    v29 = *((_QWORD *)this + 14);
    if (v18 == *(char **)(v29 + 48))
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "cannot initialize variable with expression of type 'void'", 58);
      v29 = *((_QWORD *)this + 14);
      v18 = *(char **)(v29 + 24);
      if (*((_BYTE *)a2 + 128))
      {
LABEL_50:
        v221 = v18;
        v224 = &v221;
        *(_QWORD *)&v225 = v29;
        *((_QWORD *)&v225 + 1) = v29;
        v226 = (_DWORD *)v29;
        v227 = v29;
        v228 = &v221;
        v229 = v29;
        v230 = &v221;
        v231 = &v221;
        v232 = &v221;
        v233 = &v221;
        v30 = *((unsigned int *)v18 + 12);
        if ((_DWORD)v30 == -1)
          goto LABEL_385;
        *(_QWORD *)&v234 = &v224;
        v31 = ((uint64_t (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v30])(&v234, v18);
        if (v31)
        {
          v13 = (char *)v31;
          goto LABEL_53;
        }
        v219[0] = 0;
        v220 = -1;
        v68 = *((unsigned int *)v18 + 12);
        if ((_DWORD)v68 != -1)
        {
          ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v68])(&v224, v219, v18);
          v220 = v68;
        }
        v69 = *((char *)a2 + 128);
        if (v69 > 2)
        {
          v71 = "var";
          v72 = 3;
        }
        else
        {
          v70 = v69;
          v71 = off_1E0FD8408[v70];
          v72 = *(_QWORD *)((char *)&unk_1826104B8 + v70 * 8);
        }
        v73 = v191;
        v74 = v192;
        LOBYTE(v221) = 0;
        v223 = -1;
        if ((_DWORD)v68 != -1)
        {
          ((void (*)(const char ***, const char **, _BYTE *))off_1E0FD7E68[v68])(&v224, &v221, v219);
          v223 = v68;
        }
        WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v224);
        *(_QWORD *)&v234 = &v224;
        *((_QWORD *)&v234 + 1) = &v224;
        v235 = &v224;
        v236 = &v224;
        v237 = &v224;
        v238 = &v224;
        v239 = &v224;
        v240 = &v224;
        v241 = &v224;
        v242 = &v224;
        v243 = &v224;
        v244 = &v224;
        v245 = &v224;
        v246 = &v224;
        v247 = &v224;
        if (v223 == -1)
          goto LABEL_385;
        v196 = (const char *)&v234;
        ((void (*)(const char **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v223])(&v196, &v221);
        WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v224);
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v224);
        v75 = v234;
        if ((_QWORD)v234)
        {
          v76 = *(_DWORD *)(v234 + 4);
          if (v76 < 0)
            goto LABEL_164;
        }
        else
        {
          v76 = 0;
        }
        v83 = __OFADD__(v76, v72 + 36);
        v84 = v76 + v72 + 36;
        if (!v83)
        {
          v85 = (v84 + 1);
          if (!__OFADD__(v84, 1))
          {
            if ((_QWORD)v234)
            {
              v104 = *(_DWORD *)(v234 + 16);
              *(_DWORD *)v234 += 2;
              if ((v104 & 4) == 0)
              {
                if (v85 > 0x7FFFFFEF)
                {
                  v86 = 0;
                  goto LABEL_339;
                }
                WTF::tryFastCompactMalloc((WTF *)(2 * v85 + 20));
                v86 = v224;
                if (!v224)
                  goto LABEL_339;
                *(_DWORD *)v224 = 2;
                *((_DWORD *)v86 + 1) = v85;
                *((_WORD *)v86 + 10) = 39;
                v86[1] = (char *)v86 + 20;
                *((_DWORD *)v86 + 4) = 0;
                v122 = (_WORD *)v86 + 11;
                v123 = *(unsigned int *)(v75 + 4);
                *(_DWORD *)v75 += 4;
                v124 = *(int8x16_t **)(v75 + 8);
                if ((*(_BYTE *)(v75 + 16) & 4) == 0)
                {
                  if ((_DWORD)v123)
                  {
                    if ((_DWORD)v123 == 1)
                      *v122 = v124->i16[0];
                    else
                      memcpy((char *)v86 + 22, v124, 2 * v123);
                  }
LABEL_332:
                  v153 = *(unsigned int *)(v75 + 4);
                  v154 = &v122[v153];
                  *(_OWORD *)v154 = xmmword_182610460;
                  *((_OWORD *)v154 + 1) = xmmword_182610470;
                  *((_OWORD *)v154 + 2) = xmmword_182610480;
                  *((_OWORD *)v154 + 3) = xmmword_182610490;
                  *((_DWORD *)v154 + 16) = 2097249;
                  v154[34] = 39;
                  v155 = v153 * 2 + 92;
                  v156 = 2 * v72;
                  do
                  {
                    v157 = *(unsigned __int8 *)v71++;
                    *(_WORD *)((char *)v86 + v155) = v157;
                    v155 += 2;
                    v156 -= 2;
                  }
                  while (v156);
                  v154[v72 + 35] = 39;
                  v158 = *(_DWORD *)v75 - 2;
                  if (*(_DWORD *)v75 == 2)
                  {
                    WTF::StringImpl::destroy();
                    v158 = *(_DWORD *)v75;
                  }
                  else
                  {
                    *(_DWORD *)v75 = v158;
                  }
                  v145 = v158 - 2;
                  if (!v145)
                  {
LABEL_338:
                    WTF::StringImpl::destroy();
                    goto LABEL_339;
                  }
LABEL_316:
                  *(_DWORD *)v75 = v145;
                  goto LABEL_339;
                }
                v132 = &v122[v123];
                if (v123 < 0x40)
                {
                  v133 = (unint64_t)v86 + 22;
                }
                else
                {
                  v133 = (unint64_t)&v122[v123 & 0xFFFFFFC0];
                  v134 = 0uLL;
                  v135 = (char *)v86 + 22;
                  do
                  {
                    v249.val[0] = *v124;
                    v136 = v124[1];
                    v250.val[0] = v124[2];
                    v137 = v124[3];
                    v124 += 4;
                    v138 = v137;
                    v250.val[1] = 0uLL;
                    v251.val[0] = v136;
                    v249.val[1] = 0uLL;
                    v139 = v135;
                    vst2q_s8(v139, v249);
                    v139 += 32;
                    v251.val[1] = 0uLL;
                    vst2q_s8(v139, v251);
                    v140 = v135 + 64;
                    vst2q_s8(v140, v250);
                    v141 = v135 + 96;
                    vst2q_s8(v141, *(int8x16x2_t *)(&v134 - 1));
                    v135 += 128;
                  }
                  while (v135 != (char *)v133);
                }
                if ((_WORD *)v133 == v132)
                  goto LABEL_332;
                v146 = (unint64_t)v86 + 2 * v123 - v133 + 20;
                if (v146 < 0xE
                  || (v133 < (unint64_t)v124->u64 + (v146 >> 1) + 1
                    ? (v147 = (unint64_t)v124 >= (v146 & 0xFFFFFFFFFFFFFFFELL) + v133 + 2)
                    : (v147 = 1),
                      !v147))
                {
                  v150 = (_WORD *)v133;
                  v151 = v124;
                  goto LABEL_328;
                }
                v148 = (v146 >> 1) + 1;
                if (v146 >= 0x3E)
                {
                  v149 = v148 & 0xFFFFFFFFFFFFFFE0;
                  v178 = (uint8x8_t *)&v124[1];
                  v179 = (uint16x8_t *)(v133 + 32);
                  v180 = v148 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v181 = *(uint8x16_t *)v178[-2].i8;
                    v182 = vmovl_u8(*v178);
                    v183 = vmovl_high_u8(*(uint8x16_t *)v178->i8);
                    v179[-2] = vmovl_u8(*(uint8x8_t *)v181.i8);
                    v179[-1] = vmovl_high_u8(v181);
                    *v179 = v182;
                    v179[1] = v183;
                    v179 += 4;
                    v178 += 4;
                    v180 -= 32;
                  }
                  while (v180);
                  if (v148 == v149)
                    goto LABEL_332;
                  if ((v148 & 0x18) == 0)
                  {
                    v151 = (int8x16_t *)((char *)v124 + v149);
                    v150 = (_WORD *)(v133 + 2 * v149);
                    goto LABEL_328;
                  }
                }
                else
                {
                  v149 = 0;
                }
                v150 = (_WORD *)(v133 + 2 * (v148 & 0xFFFFFFFFFFFFFFF8));
                v151 = (int8x16_t *)((char *)v124 + (v148 & 0xFFFFFFFFFFFFFFF8));
                v184 = (uint8x8_t *)&v124->i8[v149];
                v185 = (uint16x8_t *)(v133 + 2 * v149);
                v186 = v149 - (v148 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v187 = *v184++;
                  *v185++ = vmovl_u8(v187);
                  v186 += 8;
                }
                while (v186);
                if (v148 == (v148 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_332;
                do
                {
LABEL_328:
                  v152 = v151->u8[0];
                  v151 = (int8x16_t *)((char *)v151 + 1);
                  *v150++ = v152;
                }
                while (v150 != v132);
                goto LABEL_332;
              }
            }
            if ((v85 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v85 + 20)), (v86 = v224) == 0))
            {
              v86 = 0;
              if (!v75)
              {
LABEL_343:
                v87 = (_DWORD *)v234;
                *(_QWORD *)&v234 = 0;
                if (!v87)
                  goto LABEL_347;
LABEL_344:
                if (*v87 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v87 -= 2;
LABEL_347:
                if (!v86)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1825DFBCCLL);
                }
                v224 = v86;
                v225 = *(_OWORD *)((char *)v74 + 8);
                v159 = *((unsigned int *)v73 + 33);
                if ((_DWORD)v159 == *((_DWORD *)v73 + 32))
                {
                  v160 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73 + 120, v159 + 1, (unint64_t)&v224);
                  v161 = *((_QWORD *)v73 + 15) + 24 * *((unsigned int *)v73 + 33);
                  v162 = *(_QWORD *)v160;
                  *(_QWORD *)v160 = 0;
                  *(_QWORD *)v161 = v162;
                  *(_OWORD *)(v161 + 8) = *(_OWORD *)(v160 + 8);
                  v163 = v224;
                  ++*((_DWORD *)v73 + 33);
                  v224 = 0;
                  if (v163)
                  {
                    if (*(_DWORD *)v163 == 2)
                    {
                      WTF::StringImpl::destroy();
                      v164 = v223;
                      if (v223 == -1)
                      {
LABEL_356:
                        v166 = *(_QWORD *)(*((_QWORD *)v73 + 14) + 24);
                        LOBYTE(v224) = 0;
                        LOBYTE(v226) = 0;
                        WGSL::TypeChecker::introduceValue((uint64_t)v73, (uint64_t)v74 + 24, v166, 3, (uint64_t)&v224);
                        if ((_BYTE)v226 && DWORD2(v225) != -1)
                          ((void (*)(__int128 *, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v234, &v224);
                        if (v220 != -1)
                          ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v220])(&v224, v219);
                        return;
                      }
                    }
                    else
                    {
                      *(_DWORD *)v163 -= 2;
                      v164 = v223;
                      if (v223 == -1)
                        goto LABEL_356;
                    }
LABEL_355:
                    ((void (*)(__int128 *, const char **))off_1E0FD7DF0[v164])(&v234, &v221);
                    goto LABEL_356;
                  }
                }
                else
                {
                  v165 = *((_QWORD *)v73 + 15) + 24 * v159;
                  *(_QWORD *)v165 = v86;
                  *(_OWORD *)(v165 + 8) = v225;
                  ++*((_DWORD *)v73 + 33);
                  v224 = 0;
                }
                v164 = v223;
                if (v223 == -1)
                  goto LABEL_356;
                goto LABEL_355;
              }
LABEL_339:
              if (*(_DWORD *)v75 != 2)
              {
                *(_DWORD *)v75 -= 2;
                v87 = (_DWORD *)v234;
                *(_QWORD *)&v234 = 0;
                if (!v87)
                  goto LABEL_347;
                goto LABEL_344;
              }
              WTF::StringImpl::destroy();
              goto LABEL_343;
            }
            *(_DWORD *)v224 = 2;
            *((_DWORD *)v86 + 1) = v85;
            v86[1] = (char *)v86 + 20;
            *((_DWORD *)v86 + 4) = 4;
            if (!v75)
            {
              qmemcpy((char *)v86 + 20, "'' cannot be used as the type of a '", 36);
              memcpy(v86 + 7, v71, v72);
              *((_BYTE *)v86 + v72 + 56) = 39;
              v87 = (_DWORD *)v234;
              *(_QWORD *)&v234 = 0;
              if (!v87)
                goto LABEL_347;
              goto LABEL_344;
            }
            *(_DWORD *)v75 += 2;
            *((_BYTE *)v86 + 20) = 39;
            v105 = (char *)v86 + 21;
            v106 = *(unsigned int *)(v75 + 4);
            *(_DWORD *)v75 += 2;
            v107 = *(int8x16_t **)(v75 + 8);
            if ((*(_BYTE *)(v75 + 16) & 4) != 0)
            {
              if ((_DWORD)v106)
              {
                if ((_DWORD)v106 == 1)
                  *v105 = v107->i8[0];
                else
                  memcpy((char *)v86 + 21, v107, v106);
              }
            }
            else
            {
              v108 = &v105[v106];
              if (v106 < 0x10)
              {
                v109 = (unint64_t)v86 + 21;
              }
              else
              {
                v109 = (unint64_t)&v105[v106 & 0xFFFFFFF0];
                v110 = (unsigned __int128 *)((char *)v86 + 21);
                do
                {
                  v111 = (unsigned __int128)vld2q_s8(v107->i8);
                  v107 += 2;
                  *v110++ = v111;
                }
                while (v110 != (unsigned __int128 *)v109);
              }
              if ((_BYTE *)v109 != v108)
              {
                v125 = (size_t)v86 + v106;
                v126 = (unint64_t)v86 + v106 - v109 + 21;
                if (v126 < 8
                  || (v109 < (unint64_t)&v107[2].u64[1] + 2 * v125 + -2 * v109 + 2
                    ? (v127 = (unint64_t)v107 >= v125 + 21)
                    : (v127 = 1),
                      !v127))
                {
                  v129 = (_BYTE *)v109;
                  v130 = v107;
                  goto LABEL_305;
                }
                if (v126 >= 0x20)
                {
                  v128 = v126 & 0xFFFFFFFFFFFFFFE0;
                  v167 = v107 + 2;
                  v168 = (int8x16_t *)(v109 + 16);
                  v169 = v126 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v171 = v167[-2];
                    v170 = v167[-1];
                    v173 = *v167;
                    v172 = v167[1];
                    v167 += 4;
                    v168[-1] = vuzp1q_s8(v171, v170);
                    *v168 = vuzp1q_s8(v173, v172);
                    v168 += 2;
                    v169 -= 32;
                  }
                  while (v169);
                  if (v126 == v128)
                    goto LABEL_312;
                  if ((v126 & 0x18) == 0)
                  {
                    v130 = (int8x16_t *)((char *)v107 + 2 * v128);
                    v129 = (_BYTE *)(v109 + v128);
                    do
                    {
LABEL_305:
                      v131 = v130->i8[0];
                      v130 = (int8x16_t *)((char *)v130 + 2);
                      *v129++ = v131;
                    }
                    while (v129 != v108);
                    goto LABEL_312;
                  }
                }
                else
                {
                  v128 = 0;
                }
                v129 = (_BYTE *)(v109 + (v126 & 0xFFFFFFFFFFFFFFF8));
                v130 = (int8x16_t *)((char *)v107 + 2 * (v126 & 0xFFFFFFFFFFFFFFF8));
                v174 = (int16x8_t *)((char *)v107 + 2 * v128);
                v175 = (int8x8_t *)(v109 + v128);
                v176 = v128 - (v126 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v177 = *v174++;
                  *v175++ = vmovn_s16(v177);
                  v176 += 8;
                }
                while (v176);
                if (v126 == (v126 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_312;
                goto LABEL_305;
              }
            }
LABEL_312:
            v142 = &v105[*(unsigned int *)(v75 + 4)];
            qmemcpy(v142, "' cannot be used as the type of a '", 35);
            v143 = v142 + 35;
            memcpy(v142 + 35, v71, v72);
            v143[v72] = 39;
            v144 = *(_DWORD *)v75 - 2;
            if (*(_DWORD *)v75 == 2)
            {
              WTF::StringImpl::destroy();
              v144 = *(_DWORD *)v75;
            }
            else
            {
              *(_DWORD *)v75 = v144;
            }
            v145 = v144 - 2;
            if (!v145)
              goto LABEL_338;
            goto LABEL_316;
          }
        }
LABEL_164:
        v86 = 0;
        v87 = (_DWORD *)v234;
        *(_QWORD *)&v234 = 0;
        if (!v87)
          goto LABEL_347;
        goto LABEL_344;
      }
    }
    else if (*((_BYTE *)a2 + 128))
    {
      goto LABEL_50;
    }
    v15 = *((_QWORD *)a2 + 15);
    v13 = v18;
LABEL_75:
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DF788);
    }
    v38 = *((unsigned int *)v13 + 12);
    if ((_DWORD)v38 == -1)
      goto LABEL_385;
    v224 = (const char **)&v234;
    if ((((uint64_t (*)(const char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v38])(&v224, v13) & 1) != 0)goto LABEL_78;
    v211[0] = 0;
    v212 = -1;
    v55 = *((unsigned int *)v13 + 12);
    if ((_DWORD)v55 != -1)
    {
      ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v55])(&v224, v211, v13);
      v212 = v55;
    }
    *(_QWORD *)&v234 = "' cannot be used as the type of a 'const'";
    *((_QWORD *)&v234 + 1) = 42;
    WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)v191, (WGSL::AST::Variable *)((char *)v192 + 8), 39, (uint64_t)v211, &v234);
    v56 = *(_QWORD *)(*((_QWORD *)v191 + 14) + 24);
    LOBYTE(v224) = 0;
    LOBYTE(v226) = 0;
    WGSL::TypeChecker::introduceValue((uint64_t)v191, (uint64_t)v192 + 24, v56, 3, (uint64_t)&v224);
    if ((_BYTE)v226 && DWORD2(v225) != -1)
      ((void (*)(const char **, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v221, &v224);
    if (v212 != -1)
      ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v212])(&v224, v211);
    return;
  }
  if (v13 == v18)
    goto LABEL_54;
  v19 = *(char **)(*((_QWORD *)this + 14) + 24);
  if (v19 == v13 || v19 == v18)
    goto LABEL_54;
  if (WGSL::conversionRank((unsigned __int8 *)v18, (unsigned __int8 *)v13) == -1)
  {
    v217[0] = 0;
    v218 = -1;
    v20 = *((unsigned int *)v13 + 12);
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v20])(&v224, v217, v13);
      v218 = v20;
    }
    v215[0] = 0;
    v216 = -1;
    v21 = *((unsigned int *)v18 + 12);
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v21])(&v224, v215, v18);
      v216 = v21;
      LODWORD(v20) = v218;
    }
    v22 = v191;
    v23 = v192;
    LOBYTE(v224) = 0;
    LODWORD(v229) = -1;
    if ((_DWORD)v20 != -1)
    {
      ((void (*)(__int128 *, const char ***, _BYTE *))off_1E0FD7E68[v20])(&v234, &v224, v217);
      LODWORD(v229) = v20;
      LODWORD(v21) = v216;
    }
    LOBYTE(v234) = 0;
    LODWORD(v239) = -1;
    if ((_DWORD)v21 != -1)
    {
      ((void (*)(const char **, __int128 *, _BYTE *))off_1E0FD7E68[v21])(&v221, &v234, v215);
      LODWORD(v239) = v21;
    }
    v221 = "' with value of type '";
    *(_QWORD *)&v222 = 23;
    v195 = 39;
    WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>((uint64_t *)&v196, (int8x16_t *)"cannot initialize var of type '", 32, (uint64_t)&v224, (uint64_t)&v221, (uint64_t)&v234, &v195);
    if (!v196)
    {
      __break(0xC471u);
      JUMPOUT(0x1825DFBD4);
    }
    v221 = v196;
    v222 = *(_OWORD *)((char *)v192 + 8);
    v24 = *((unsigned int *)v191 + 33);
    if ((_DWORD)v24 == *((_DWORD *)v191 + 32))
    {
      v25 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v191 + 120, v24 + 1, (unint64_t)&v221);
      v26 = *((_QWORD *)v191 + 15) + 24 * *((unsigned int *)v191 + 33);
      v27 = *(_QWORD *)v25;
      *(_QWORD *)v25 = 0;
      *(_QWORD *)v26 = v27;
      *(_OWORD *)(v26 + 8) = *(_OWORD *)(v25 + 8);
      v28 = v221;
      ++*((_DWORD *)v22 + 33);
      v221 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v28 -= 2;
      }
    }
    else
    {
      v80 = *((_QWORD *)v191 + 15) + 24 * v24;
      *(_QWORD *)v80 = v196;
      *(_OWORD *)(v80 + 8) = v222;
      ++*((_DWORD *)v22 + 33);
      v221 = 0;
    }
    if ((_DWORD)v239 != -1)
      ((void (*)(char *, __int128 *))off_1E0FD7DF0[v239])(&v195, &v234);
    LODWORD(v239) = -1;
    if ((_DWORD)v229 != -1)
      ((void (*)(char *, const char ***))off_1E0FD7DF0[v229])(&v195, &v224);
    v100 = *(_QWORD *)(*((_QWORD *)v22 + 14) + 24);
    LOBYTE(v224) = 0;
    LOBYTE(v226) = 0;
    WGSL::TypeChecker::introduceValue((uint64_t)v22, (uint64_t)v23 + 24, v100, 3, (uint64_t)&v224);
    if ((_BYTE)v226 && DWORD2(v225) != -1)
      ((void (*)(__int128 *, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v234, &v224);
    if (v216 != -1)
      ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v216])(&v224, v215);
    v216 = -1;
    if (v218 != -1)
      ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v218])(&v224, v217);
    return;
  }
LABEL_53:
  v15 = *((_QWORD *)a2 + 15);
LABEL_54:
  *(_QWORD *)(v15 + 24) = v13;
  v8 = *((unsigned __int8 *)a2 + 128);
LABEL_55:
  switch(v8)
  {
    case 0u:
      goto LABEL_75;
    case 1u:
      if (!*((_QWORD *)this + 12))
      {
        v62 = v191;
        v63 = v192;
        v64 = (__int128 *)((char *)v192 + 8);
        v65 = "module-scope 'let' is invalid, use 'const'";
        v66 = v191;
        v67 = 43;
        goto LABEL_206;
      }
      v32 = *((unsigned int *)v13 + 12);
      if ((_DWORD)v32 == -1)
        goto LABEL_385;
      v224 = (const char **)&v234;
      if ((((uint64_t (*)(const char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v32])(&v224, v13) & 1) != 0|| *((_DWORD *)v13 + 12) == 11)
      {
        if (!*((_QWORD *)a2 + 15))
        {
          __break(0xC471u);
          JUMPOUT(0x1825DE4D4);
        }
        goto LABEL_78;
      }
      v213[0] = 0;
      v214 = -1;
      v78 = *((unsigned int *)v13 + 12);
      if ((_DWORD)v78 != -1)
      {
        ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v78])(&v224, v213, v13);
        v214 = v78;
      }
      *(_QWORD *)&v234 = "' cannot be used as the type of a 'let'";
      *((_QWORD *)&v234 + 1) = 40;
      WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)v191, (WGSL::AST::Variable *)((char *)v192 + 8), 39, (uint64_t)v213, &v234);
      v79 = *(_QWORD *)(*((_QWORD *)v191 + 14) + 24);
      LOBYTE(v224) = 0;
      LOBYTE(v226) = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)v191, (uint64_t)v192 + 24, v79, 3, (uint64_t)&v224);
      if ((_BYTE)v226 && DWORD2(v225) != -1)
        ((void (*)(const char **, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v221, &v224);
      if (v214 != -1)
        ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v214])(&v224, v213);
      return;
    case 2u:
      if (*((_QWORD *)this + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1825DFA38);
      }
      if (!v13)
        goto LABEL_114;
      v33 = v13;
      while (1)
      {
        v34 = *((_DWORD *)v33 + 12);
        if (v34 != 10)
          break;
        v33 = (char *)*((_QWORD *)v33 + 1);
        if (!v33)
          goto LABEL_114;
      }
      if (!v34)
      {
        v57 = *v33;
        if (v57 < 6 || v57 == 7)
          goto LABEL_78;
      }
LABEL_114:
      v209[0] = 0;
      v210 = -1;
      v59 = *((unsigned int *)v13 + 12);
      if ((_DWORD)v59 != -1)
      {
        ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v59])(&v224, v209, v13);
        v210 = v59;
      }
      *(_QWORD *)&v234 = "' cannot be used as the type of an 'override'";
      *((_QWORD *)&v234 + 1) = 46;
      WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>((uint64_t)v191, (WGSL::AST::Variable *)((char *)v192 + 8), 39, (uint64_t)v209, &v234);
      v60 = *(_QWORD *)(*((_QWORD *)v191 + 14) + 24);
      LOBYTE(v224) = 0;
      LOBYTE(v226) = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)v191, (uint64_t)v192 + 24, v60, 3, (uint64_t)&v224);
      if ((_BYTE)v226 && DWORD2(v225) != -1)
        ((void (*)(const char **, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v221, &v224);
      if (v210 != -1)
        ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v210])(&v224, v209);
      return;
    case 3u:
      v35 = *((_QWORD *)a2 + 13);
      if (v35)
      {
        v36 = *(unsigned __int8 *)(v35 + 24);
        v37 = *(unsigned __int8 *)(v35 + 25);
        *((_WORD *)a2 + 76) = v36 | 0x100;
        *((_WORD *)a2 + 77) = v37 | 0x100;
        switch(v36)
        {
          case 0u:
            goto LABEL_123;
          case 1u:
            goto LABEL_152;
          case 2u:
            if ((WGSL::Type::isConstructible((WGSL::Type *)v13) & 1) == 0)
            {
              v197[0] = 0;
              v198 = -1;
              v102 = *((unsigned int *)v13 + 12);
              if ((_DWORD)v102 != -1)
              {
                ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v102])(&v224, v197, v13);
                v198 = v102;
              }
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v197, "' cannot be used in address space <private> because it's not constructible", 75);
              if (v198 != -1)
                ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v198])(&v224, v197);
              return;
            }
            v36 = 2;
            if (*((_QWORD *)this + 12))
              goto LABEL_205;
            break;
          case 3u:
            if (v37 == 2)
            {
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v191, "access mode 'write' is not valid for the <storage> address space", 65);
              return;
            }
            if ((WGSL::Type::isHostShareable((WGSL::Type *)v13) & 1) == 0)
            {
              v207[0] = 0;
              v208 = -1;
              v113 = *((unsigned int *)v13 + 12);
              if ((_DWORD)v113 != -1)
              {
                ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v113])(&v224, v207, v13);
                v208 = v113;
              }
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v207, "' cannot be used in address space <storage> because it's not host-shareable", 76);
              if (v208 != -1)
                ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v208])(&v224, v207);
              return;
            }
            if (!v37 && *((_DWORD *)v13 + 12) == 12)
            {
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v191, "atomic variables in <storage> address space must have read_write access mode", 77);
              return;
            }
            v36 = 3;
            if (!*((_QWORD *)this + 12))
              break;
            goto LABEL_205;
          case 4u:
            if ((WGSL::Type::isHostShareable((WGSL::Type *)v13) & 1) == 0)
            {
              v205[0] = 0;
              v206 = -1;
              v101 = *((unsigned int *)v13 + 12);
              if ((_DWORD)v101 != -1)
              {
                ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v101])(&v224, v205, v13);
                v206 = v101;
              }
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v205, "' cannot be used in address space <uniform> because it's not host-shareable", 76);
              if (v206 != -1)
                ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v206])(&v224, v205);
              return;
            }
            if ((WGSL::Type::isConstructible((WGSL::Type *)v13) & 1) == 0)
            {
              v203[0] = 0;
              v204 = -1;
              v112 = *((unsigned int *)v13 + 12);
              if ((_DWORD)v112 != -1)
              {
                ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v112])(&v224, v203, v13);
                v204 = v112;
              }
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v203, "' cannot be used in address space <uniform> because it's not constructible", 75);
              if (v204 != -1)
                ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v204])(&v224, v203);
              return;
            }
            v36 = 4;
            if (*((_QWORD *)this + 12))
              goto LABEL_205;
            break;
          case 5u:
            if ((WGSL::Type::hasFixedFootprint((WGSL::Type *)v13) & 1) == 0)
            {
              v201[0] = 0;
              v202 = -1;
              v103 = *((unsigned int *)v13 + 12);
              if ((_DWORD)v103 != -1)
              {
                ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v103])(&v224, v201, v13);
                v202 = v103;
              }
              WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v201, "' cannot be used in address space <workgroup> because it doesn't have fixed footprint", 86);
              if (v202 != -1)
                ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v202])(&v224, v201);
              return;
            }
            v36 = 5;
            if (*((_QWORD *)this + 12))
              goto LABEL_205;
            break;
          default:
            goto LABEL_204;
        }
LABEL_259:
        if (v36 <= 5 && ((1 << v36) & 0x3A) != 0)
        {
          if (*((_QWORD *)a2 + 15))
          {
            switch(v36)
            {
              case 1u:
                v115 = "handle";
                v116 = 7;
                break;
              case 2u:
                v115 = "private";
                v116 = 8;
                break;
              case 3u:
                v115 = "storage";
                v116 = 8;
                break;
              case 4u:
                v115 = "uniform";
                v116 = 8;
                break;
              case 5u:
                v115 = "workgroup";
                v116 = 10;
                break;
              default:
                v115 = "function";
                v116 = 9;
                break;
            }
            v62 = v191;
            v63 = v192;
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral &,WTF::ASCIILiteral &>((uint64_t)v191, (__int128 *)((char *)v192 + 8), "variables in the address space '", 33, (uint64_t)v115, v116, (uint64_t)"' cannot have an initializer", 29);
LABEL_207:
            v99 = *(_QWORD *)(*((_QWORD *)v62 + 14) + 24);
            LOBYTE(v224) = 0;
            LOBYTE(v226) = 0;
            WGSL::TypeChecker::introduceValue((uint64_t)v62, (uint64_t)v63 + 24, v99, 3, (uint64_t)&v224);
            if ((_BYTE)v226 && DWORD2(v225) != -1)
              ((void (*)(__int128 *, const char ***))off_1E0FD7CC8[DWORD2(v225)])(&v234, &v224);
            return;
          }
          if (v36 == 5)
            goto LABEL_78;
        }
        if (!v13)
          goto LABEL_78;
        goto LABEL_268;
      }
      if (!*((_QWORD *)this + 12))
      {
        *((_DWORD *)a2 + 38) = 16777473;
LABEL_152:
        if (v13)
        {
          v81 = *((_DWORD *)v13 + 12);
          if (v81)
            v82 = 0;
          else
            v82 = v13;
          if ((v81 - 7) >= 3 && (!v82 || *v82 - 8 >= 3))
            goto LABEL_159;
        }
        else if ((MEMORY[0x30] - 7) >= 3)
        {
LABEL_159:
          WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v191, "module-scope 'var' declarations that are not of texture or sampler types must provide an address space", 103);
          return;
        }
        v36 = 1;
LABEL_204:
        if (*((_QWORD *)this + 12))
        {
LABEL_205:
          v62 = v191;
          v63 = v192;
          v64 = (__int128 *)((char *)v192 + 8);
          v65 = "function-scope 'var' declaration must use 'function' address space";
          v66 = v191;
          v67 = 67;
LABEL_206:
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>(v66, v64, v65, v67);
          goto LABEL_207;
        }
        goto LABEL_259;
      }
      *((_DWORD *)a2 + 38) = 16843008;
LABEL_123:
      v61 = *((unsigned int *)v13 + 12);
      if ((_DWORD)v61 == -1)
        goto LABEL_385;
      v224 = (const char **)&v234;
      if ((((uint64_t (*)(const char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v61])(&v224, v13) & 1) == 0)
      {
        v199[0] = 0;
        v200 = -1;
        v77 = *((unsigned int *)v13 + 12);
        if ((_DWORD)v77 != -1)
        {
          ((void (*)(const char ***, _BYTE *, char *))off_1E0FD7E68[v77])(&v224, v199, v13);
          v200 = v77;
        }
        WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>((uint64_t *)&v191, (uint64_t)v199, "' cannot be used in address space <function> because it's not constructible", 76);
        if (v200 != -1)
          ((void (*)(const char ***, _BYTE *))off_1E0FD7DF0[v200])(&v224, v199);
        return;
      }
      if (!*((_QWORD *)this + 12))
      {
        WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v191, "module-scope 'var' must not use address space 'function'", 57);
        return;
      }
LABEL_268:
      v117 = v13;
      while (1)
      {
        v118 = *((_DWORD *)v117 + 12);
        if (v118 != 4)
          break;
        v120 = *(_QWORD *)v117;
        v121 = *(unsigned int *)(*(_QWORD *)v117 + 84);
        if (!(_DWORD)v121)
          goto LABEL_386;
        v119 = (char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 72) + 8 * v121 - 8) + 104) + 24);
LABEL_269:
        v117 = *v119;
        if (!v117)
          goto LABEL_78;
      }
      if (v118 == 10)
      {
        v119 = (char **)(v117 + 8);
        goto LABEL_269;
      }
      if (v118 == 3 && *((_DWORD *)v117 + 4) == 2)
      {
        WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>((uint64_t *)&v191, "array with an 'override' element count can only be used as the store type of a 'var<workgroup>'", 96);
        return;
      }
LABEL_78:
      if (v14 && *(char **)(*((_QWORD *)this + 14) + 24) != v13)
        WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)((char *)a2 + 8), (uint64_t)v13, v14);
      v39 = *((unsigned __int8 *)a2 + 128);
      if (*((_BYTE *)a2 + 128))
      {
        *((_QWORD *)a2 + 18) = v13;
        if (v39 == 3)
        {
          v40 = *((unsigned __int16 *)a2 + 76);
          if (v40 <= 0xFF)
            goto LABEL_387;
          v41 = *((unsigned __int16 *)a2 + 77);
          if (v41 <= 0xFF)
            goto LABEL_387;
          v42 = *((_QWORD *)this + 14);
          v195 = *((_WORD *)a2 + 76);
          v196 = v13;
          v194 = v41;
          v193 = 0;
          v43 = (unsigned __int16)(v40 << 8) | ((unint64_t)v41 << 16) | 6;
          v224 = (const char **)v43;
          *(_QWORD *)&v225 = v13;
          v44 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v42 + 16), (unsigned __int8 *)&v224);
          v45 = *(unsigned __int8 **)(v42 + 16);
          if (v45)
            v45 += 24 * *((unsigned int *)v45 - 1);
          if (v45 == v44 || (v46 = (const char *)*((_QWORD *)v44 + 2)) == 0)
          {
            v46 = (const char *)WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v42, &v195, &v194, (uint64_t *)&v196, &v193);
            v221 = v46;
            *(_QWORD *)&v234 = v43;
            *((_QWORD *)&v234 + 1) = v13;
            WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v42 + 16), (unsigned __int8 *)&v234, (uint64_t *)&v221, (uint64_t)&v224);
          }
          v47 = (_QWORD *)*((_QWORD *)a2 + 14);
          if (!v47)
          {
            v48 = *((_QWORD *)this + 10);
            *(_QWORD *)&v222 = 0;
            v221 = 0;
            WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v224);
            *(_QWORD *)&v234 = &v224;
            *((_QWORD *)&v234 + 1) = &v224;
            v235 = &v224;
            v236 = &v224;
            v237 = &v224;
            v238 = &v224;
            v239 = &v224;
            v240 = &v224;
            v241 = &v224;
            v242 = &v224;
            v243 = &v224;
            v244 = &v224;
            v245 = &v224;
            v246 = &v224;
            v247 = &v224;
            v49 = *((unsigned int *)v46 + 12);
            if ((_DWORD)v49 != -1)
            {
              v196 = (const char *)&v234;
              ((void (*)(const char **, const char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v49])(&v196, v46);
              WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v224);
              WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v224);
              v225 = 0uLL;
              v224 = (const char **)&off_1E0FD2F10;
              v50 = (_DWORD *)v234;
              *(_QWORD *)&v234 = 0;
              v226 = v50;
              v47 = WGSL::AST::Builder::construct<WGSL::AST::IdentifierExpression,WGSL::SourceSpan,WGSL::AST::Identifier,void>((_QWORD *)(v48 + 312), &v221, (uint64_t)&v224);
              v51 = v226;
              v224 = (const char **)&off_1E0FD2F10;
              v226 = 0;
              if (v51)
              {
                if (*v51 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v51 -= 2;
              }
              v88 = (_DWORD *)v234;
              *(_QWORD *)&v234 = 0;
              if (v88)
              {
                if (*v88 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v88 -= 2;
              }
              goto LABEL_171;
            }
LABEL_385:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_386:
            __break(0xC471u);
LABEL_387:
            __break(1u);
LABEL_388:
            __break(0xC471u);
            JUMPOUT(0x1825DFBC4);
          }
LABEL_171:
          v89 = *((_QWORD *)this + 10);
          v90 = *(_QWORD *)(v89 + 312);
          if ((unint64_t)(*(_QWORD *)(v89 + 320) - v90) <= 0x47)
          {
            WGSL::AST::Builder::allocateArena((WGSL::AST::Builder *)(v89 + 312));
            v90 = *(_QWORD *)(v89 + 312);
          }
          *(_OWORD *)(v90 + 8) = *(_OWORD *)(v47 + 1);
          *(_QWORD *)(v90 + 24) = 0;
          *(_BYTE *)(v90 + 32) = 0;
          *(_BYTE *)(v90 + 56) = 0;
          *(_QWORD *)v90 = off_1E0FD4308;
          *(_QWORD *)(v90 + 64) = v47;
          *(_QWORD *)(v89 + 312) += 72;
          v91 = *(unsigned int *)(v89 + 356);
          if ((_DWORD)v91 == *(_DWORD *)(v89 + 352))
          {
            v92 = v91 + (v91 >> 2);
            if (v92 >= 0x10)
              v93 = v92 + 1;
            else
              v93 = 16;
            if (v93 <= v91 + 1)
              v94 = v91 + 1;
            else
              v94 = v93;
            if (v94 >> 29)
              goto LABEL_388;
            v95 = *(void **)(v89 + 344);
            v96 = (void *)WTF::fastMalloc((WTF *)(8 * v94));
            *(_DWORD *)(v89 + 352) = v94;
            *(_QWORD *)(v89 + 344) = v96;
            memcpy(v96, v95, 8 * v91);
            if (v95)
            {
              if (*(void **)(v89 + 344) == v95)
              {
                *(_QWORD *)(v89 + 344) = 0;
                *(_DWORD *)(v89 + 352) = 0;
              }
              WTF::fastFree((WTF *)v95, v97);
            }
            v91 = *(unsigned int *)(v89 + 356);
            v98 = (_QWORD *)(*(_QWORD *)(v89 + 344) + 8 * v91);
          }
          else
          {
            v98 = (_QWORD *)(*(_QWORD *)(v89 + 344) + 8 * v91);
          }
          *v98 = v90;
          *(_DWORD *)(v89 + 356) = v91 + 1;
          *(_QWORD *)(v90 + 24) = v46;
          *((_QWORD *)a2 + 17) = v90;
LABEL_188:
          v53 = (char *)a2 + 24;
          v13 = (char *)v46;
LABEL_189:
          v188[0] = 0;
          v190 = 0;
          goto LABEL_190;
        }
LABEL_101:
        v46 = v13;
        goto LABEL_188;
      }
      v52 = *(char **)(*((_QWORD *)this + 14) + 24);
      *((_QWORD *)a2 + 18) = v13;
      if (v13 == v52)
        goto LABEL_101;
      v53 = (char *)a2 + 24;
      if (!v14)
        goto LABEL_189;
      v188[0] = 0;
      v190 = 0;
      if (*(_BYTE *)(v14 + 24))
      {
        v189 = -1;
        v54 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v54 != -1)
        {
          ((void (*)(const char ***, _BYTE *, uint64_t))off_1E0FD8010[v54])(&v224, v188, v14);
          v189 = v54;
        }
        v190 = 1;
      }
LABEL_190:
      WGSL::TypeChecker::introduceValue((uint64_t)this, (uint64_t)v53, (uint64_t)v13, v10, (uint64_t)v188);
      if (v190 && v189 != -1)
        ((void (*)(const char ***, _BYTE *))off_1E0FD7CC8[v189])(&v224, v188);
      return;
    default:
      goto LABEL_78;
  }
}

WTF *WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral>(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *result;
  _BYTE v8[16];
  int v9;
  char v10;
  char v11;

  v4 = *a1;
  WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>((_DWORD *)*a1, (__int128 *)(a1[1] + 8), a2, a3);
  v5 = a1[1] + 24;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 24);
  v8[0] = 0;
  v10 = 0;
  result = WGSL::TypeChecker::introduceValue(v4, v5, v6, 3, (uint64_t)v8);
  if (v10)
  {
    if (v9 != -1)
      return (WTF *)((uint64_t (*)(char *, _BYTE *))off_1E0FD7CC8[v9])(&v11, v8);
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::AST::Variable &)::$_0::operator()<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  int v20;
  char v21;
  _DWORD *v22;
  _DWORD *v23;
  __int128 v24;
  char v25;
  _BYTE v26[48];
  unsigned int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v8 = a1[1];
  v26[0] = 0;
  v27 = -1;
  v9 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v9])(&v23, v26, a2);
    v27 = v9;
  }
  v23 = a3;
  *(_QWORD *)&v24 = a4;
  WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(&v22, (int8x16_t *)"type '", 7, (uint64_t)v26, (uint64_t)&v23);
  if (!v22)
  {
    __break(0xC471u);
    return;
  }
  v23 = v22;
  v24 = *(_OWORD *)(v8 + 8);
  v10 = *(unsigned int *)(v7 + 132);
  if ((_DWORD)v10 != *(_DWORD *)(v7 + 128))
  {
    v16 = *(_QWORD *)(v7 + 120) + 24 * v10;
    *(_QWORD *)v16 = v22;
    *(_OWORD *)(v16 + 8) = v24;
    ++*(_DWORD *)(v7 + 132);
    v23 = 0;
LABEL_10:
    v15 = v27;
    if (v27 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
  v11 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7 + 120, v10 + 1, (unint64_t)&v23);
  v12 = *(_QWORD *)(v7 + 120) + 24 * *(unsigned int *)(v7 + 132);
  v13 = *(_QWORD *)v11;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)v12 = v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
  v14 = v23;
  ++*(_DWORD *)(v7 + 132);
  v23 = 0;
  if (!v14)
    goto LABEL_10;
  if (*v14 != 2)
  {
    *v14 -= 2;
    v15 = v27;
    if (v27 == -1)
      goto LABEL_12;
LABEL_11:
    ((void (*)(char *, _BYTE *))off_1E0FD7DF0[v15])(&v25, v26);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  v15 = v27;
  if (v27 != -1)
    goto LABEL_11;
LABEL_12:
  v17 = a1[1] + 24;
  v18 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 24);
  v19[0] = 0;
  v21 = 0;
  WGSL::TypeChecker::introduceValue(v7, v17, v18, 3, (uint64_t)v19);
  if (v21)
  {
    if (v20 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v20])(v26, v19);
  }
}

uint64_t WGSL::TypeChecker::convertValue(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _DWORD *v15;
  _QWORD v16[21];

  v16[20] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a4 + 24))
    return 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 112) + 24) != a3)
  {
    v16[2] = a1;
    v16[3] = a2;
    v16[4] = a4;
    v16[5] = a1;
    v16[6] = a2;
    v16[7] = a4;
    v16[8] = a1;
    v16[9] = a2;
    v16[10] = a4;
    v16[11] = a1;
    v16[12] = a2;
    v16[13] = a4;
    v16[14] = a1;
    v16[15] = a2;
    v16[0] = a4;
    v16[1] = a4;
    v8 = *(unsigned int *)(a3 + 48);
    if ((_DWORD)v8 == -1)
    {
      result = std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v14[0] = v16;
      if ((((uint64_t (*)(_QWORD *, uint64_t))off_1E0FD8348[v8])(v14, a3) & 1) != 0)
        return 1;
      result = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v16);
      if (*(_BYTE *)(a4 + 24))
      {
        WGSL::ConstantValue::dump(a4, (uint64_t)v16);
        WTF::StringPrintStream::toString((WTF::StringPrintStream *)v16);
        v14[0] = " cannot be represented as '";
        v14[1] = 28;
        v13 = 39;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WGSL::Type const&,char>(a1, a2, (int8x16_t *)"value ", 7, (uint64_t *)&v15, (uint64_t)v14, a3, &v13);
        v11 = v15;
        v15 = 0;
        if (v11)
        {
          if (*v11 == 2)
            WTF::StringImpl::destroy();
          else
            *v11 -= 2;
        }
        if (*(_BYTE *)(a4 + 24))
        {
          v12 = *(unsigned int *)(a4 + 16);
          if ((_DWORD)v12 != -1)
            ((void (*)(_QWORD *, uint64_t))off_1E0FD7CC8[v12])(v14, a4);
          *(_DWORD *)(a4 + 16) = -1;
          *(_BYTE *)(a4 + 24) = 0;
        }
        WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v16);
        return 0;
      }
    }
    __break(1u);
    return result;
  }
  v10 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v10 != -1)
    ((void (*)(_QWORD *, uint64_t))off_1E0FD7CC8[v10])(v16, a4);
  result = 0;
  *(_DWORD *)(a4 + 16) = -1;
  *(_BYTE *)(a4 + 24) = 0;
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::TypeAlias *a2)
{
  uint64_t v4;
  const WTF::StringImpl *v5;
  _QWORD *v6;
  WTF *result;
  int v8;
  __int128 v9;
  char v10;
  _BYTE v11[16];
  int v12;
  char v13;
  _BYTE v14[24];

  v4 = *((_QWORD *)a2 + 7);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) == 22)
  {
    v6 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    *((_QWORD *)this + 11) = v6;
    if (*((_DWORD *)v6 + 12) != 13)
      goto LABEL_6;
    goto LABEL_5;
  }
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (_QWORD *)*((_QWORD *)this + 11);
  if (*((_DWORD *)v6 + 12) == 13)
  {
LABEL_5:
    *(_QWORD *)&v9 = "' requires template arguments";
    *((_QWORD *)&v9 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, (uint64_t)v6, &v9);
    v6 = *(_QWORD **)(*((_QWORD *)this + 14) + 24);
  }
LABEL_6:
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  LOBYTE(v9) = 1;
  *((_QWORD *)&v9 + 1) = v6;
  v10 = 3;
  v11[0] = 0;
  v13 = 0;
  result = WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v14, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)a2 + 6, &v9);
  v8 = v14[16];
  if (v13 && v12 != -1)
    result = (WTF *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E0FD7CC8[v12])(v14, v11);
  if (!v8)
  {
    LOBYTE(v9) = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (__int128 *)a2 + 2, (int8x16_t *)"redeclaration of '", 19, *((_QWORD *)a2 + 6), (char *)&v9);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ConstAssert *a2)
{
  uint64_t v4;
  __int16 v5;
  _DWORD *result;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  _BOOL8 v16;
  int v17;
  __int128 *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23[16];
  int v24;
  char v25;
  char v26;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  result = (_DWORD *)WGSL::AST::Visitor::visit(this, v4);
  v7 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v7;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v8 = *((_QWORD *)this + 14);
  v9 = *(unsigned __int8 **)(v8 + 56);
  if (v9 != v7)
  {
    v10 = *(unsigned __int8 **)(v8 + 24);
    if (v10 != v9 && v10 != v7)
    {
      result = (_DWORD *)WGSL::conversionRank(v7, v9);
      if ((_DWORD)result == -1)
      {
        v15 = (__int128 *)(*((_QWORD *)a2 + 3) + 8);
        v23[0] = 39;
        return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, v15, "const assertion condition must be a BOOL, got '", 48, (uint64_t)v7, v23);
      }
      v8 = *((_QWORD *)this + 14);
    }
  }
  if (*(unsigned __int8 **)(v8 + 24) != v7)
  {
    v12 = *((_QWORD *)a2 + 3);
    v23[0] = 0;
    v25 = 0;
    if (!*(_BYTE *)(v12 + 56))
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(v12 + 8), "const assertion requires a const-expression", 44);
    v24 = -1;
    v13 = *(unsigned int *)(v12 + 48);
    if ((_DWORD)v13 == -1)
    {
      v25 = 1;
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))off_1E0FD8010[v13])(&v26, v23, v12 + 32);
      v24 = v13;
      v25 = 1;
      if ((_DWORD)v13 == 6)
      {
        if (v23[0])
        {
          v14 = 6;
          return (_DWORD *)((uint64_t (*)(char *, char *))off_1E0FD7CC8[v14])(&v26, v23);
        }
        result = WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "const assertion failed", 23);
        if (v25)
        {
          v14 = v24;
          if (v24 != -1)
            return (_DWORD *)((uint64_t (*)(char *, char *))off_1E0FD7CC8[v14])(&v26, v23);
        }
        return result;
      }
    }
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(v16, v17, v18, v19, v20, v21, v22);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, int a2, __int128 *a3, _DWORD *a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v13;
  char v14;
  _DWORD *result;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  char v26;
  _BYTE v27[48];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27[0] = 0;
  v28 = -1;
  v13 = *(unsigned int *)(a6 + 48);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v13])(&v24, v27, a6);
    v28 = v13;
  }
  v14 = *a7;
  v24 = a4;
  *(_QWORD *)&v25 = a5;
  v26 = v14;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,char>((uint64_t)&v24, (uint64_t)v27, &v26, &v23);
  v16 = v23;
  if (!v23)
  {
    __break(0xC471u);
    return result;
  }
  v23 = 0;
  v24 = v16;
  v25 = *a3;
  v17 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 128))
  {
    v18 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v17 + 1, (unint64_t)&v24);
    v19 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    v20 = *(_QWORD *)v18;
    *(_QWORD *)v18 = 0;
    *(_QWORD *)v19 = v20;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v18 + 8);
    v21 = v24;
    ++*(_DWORD *)(a1 + 132);
    v24 = 0;
    if (v21)
    {
      if (*v21 == 2)
      {
        WTF::StringImpl::destroy();
        result = v23;
        v23 = 0;
        if (!result)
          goto LABEL_14;
      }
      else
      {
        *v21 -= 2;
        result = v23;
        v23 = 0;
        if (!result)
          goto LABEL_14;
      }
LABEL_11:
      if (*result == 2)
        result = (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
      goto LABEL_14;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 120) + 24 * v17;
    *(_QWORD *)v22 = v16;
    *(_OWORD *)(v22 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    v24 = 0;
  }
  result = v23;
  v23 = 0;
  if (result)
    goto LABEL_11;
LABEL_14:
  if (v28 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, _BYTE *))off_1E0FD7DF0[v28])(&v26, v27);
  if (a2)
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::Function *a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const WTF::StringImpl *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  WTF *result;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  _BYTE v69[16];
  int v70;
  char v71;
  WTF *v72;
  uint64_t v73;
  __int128 v74;
  char v75;
  _BYTE v76[16];
  int v77;
  char v78;
  char v79[16];
  unsigned __int8 v80;
  char v81;

  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_QWORD *)*((_QWORD *)a2 + 9);
    v7 = 8 * v4;
    do
    {
      while (1)
      {
        v8 = *v6;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v6 + 16))(*v6) == 11)
          break;
        (*(void (**)(WGSL::TypeChecker *, uint64_t))(*(_QWORD *)this + 88))(this, v8);
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
      v5 = 1;
      ++v6;
      v7 -= 8;
    }
    while (v7);
LABEL_6:
    v68 = v5;
    v72 = 0;
    v73 = 0;
    v9 = *((unsigned int *)a2 + 17);
    if (!(_DWORD)v9)
      goto LABEL_32;
  }
  else
  {
    v68 = 0;
    v72 = 0;
    v73 = 0;
    v9 = *((unsigned int *)a2 + 17);
    if (!(_DWORD)v9)
      goto LABEL_32;
  }
  if (v9 >> 29)
  {
    __break(0xC471u);
LABEL_92:
    JUMPOUT(0x1825E0D0CLL);
  }
  LODWORD(v73) = v9;
  v72 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
  v10 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 7);
    v12 = &v11[v10];
    while (1)
    {
      v15 = *v11;
      v16 = *(unsigned int *)(*v11 + 84);
      if ((_DWORD)v16)
      {
        v17 = *(uint64_t **)(v15 + 72);
        v18 = 8 * v16;
        do
        {
          v19 = *v17++;
          WGSL::AST::Visitor::visit(this, v19);
          v18 -= 8;
        }
        while (v18);
      }
      *(_QWORD *)v79 = 0;
      v20 = *(_QWORD *)(v15 + 64);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) != 22)
        break;
      v22 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v20 + 64), v21);
      *((_QWORD *)this + 11) = v22;
      v23 = *((unsigned int *)v22 + 12);
      if ((_DWORD)v23 == 13)
        goto LABEL_20;
LABEL_21:
      *(_QWORD *)(v20 + 24) = v22;
      *((_QWORD *)this + 11) = 0;
      *(_QWORD *)v79 = v22;
      if (v23 == 0xFFFFFFFFLL)
        goto LABEL_87;
      *(_QWORD *)&v74 = &v81;
      if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v23])(&v74, v22) & 1) != 0)goto LABEL_27;
      v24 = *(_DWORD *)(*(_QWORD *)v79 + 48);
      if (v24 == 11)
        goto LABEL_27;
      if (v24)
      {
        if ((v24 - 7) < 3)
          goto LABEL_27;
LABEL_26:
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(v15 + 8), "type of function parameter must be constructible or a pointer, sampler or texture", 82);
        *(_QWORD *)v79 = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
        goto LABEL_27;
      }
      if (**(_BYTE **)v79 - 8 >= 3)
        goto LABEL_26;
LABEL_27:
      v25 = HIDWORD(v73);
      if (HIDWORD(v73) == (_DWORD)v73)
      {
        v13 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)v79);
        v14 = HIDWORD(v73);
        *((_QWORD *)v72 + HIDWORD(v73)) = *v13;
        HIDWORD(v73) = v14 + 1;
        if (++v11 == v12)
          goto LABEL_32;
      }
      else
      {
        *((_QWORD *)v72 + HIDWORD(v73)) = *(_QWORD *)v79;
        HIDWORD(v73) = v25 + 1;
        if (++v11 == v12)
          goto LABEL_32;
      }
    }
    WGSL::AST::Visitor::visit(this, v20);
    v22 = (_QWORD *)*((_QWORD *)this + 11);
    v23 = *((unsigned int *)v22 + 12);
    if ((_DWORD)v23 != 13)
      goto LABEL_21;
LABEL_20:
    *(_QWORD *)&v74 = "' requires template arguments";
    *((_QWORD *)&v74 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v20 + 8), (int8x16_t *)"type '", 7, (uint64_t)v22, &v74);
    v22 = *(_QWORD **)(*((_QWORD *)this + 14) + 24);
    v23 = *((unsigned int *)v22 + 12);
    goto LABEL_21;
  }
LABEL_32:
  v26 = *((unsigned int *)a2 + 25);
  if ((_DWORD)v26)
  {
    v27 = (uint64_t *)*((_QWORD *)a2 + 11);
    v28 = 8 * v26;
    do
    {
      v29 = *v27++;
      WGSL::AST::Visitor::visit(this, v29);
      v28 -= 8;
    }
    while (v28);
  }
  v30 = *((_QWORD *)a2 + 13);
  if (!v30)
  {
    *((_QWORD *)this + 12) = *(_QWORD *)(*((_QWORD *)this + 14) + 48);
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v30 + 16))(*((_QWORD *)a2 + 13)) == 22)
  {
    v32 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v30 + 64), v31);
    *((_QWORD *)this + 11) = v32;
    v33 = *((_DWORD *)v32 + 12);
    if (v33 != 13)
      goto LABEL_42;
    goto LABEL_41;
  }
  WGSL::AST::Visitor::visit(this, v30);
  v32 = (_QWORD *)*((_QWORD *)this + 11);
  v33 = *((_DWORD *)v32 + 12);
  if (v33 == 13)
  {
LABEL_41:
    *(_QWORD *)&v74 = "' requires template arguments";
    *((_QWORD *)&v74 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v30 + 8), (int8x16_t *)"type '", 7, (uint64_t)v32, &v74);
    v32 = *(_QWORD **)(*((_QWORD *)this + 14) + 24);
    v33 = *((_DWORD *)v32 + 12);
  }
LABEL_42:
  *(_QWORD *)(v30 + 24) = v32;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = v32;
  if (v33 == -1)
  {
LABEL_87:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_88:
    __break(0xC471u);
    goto LABEL_92;
  }
  *(_QWORD *)&v74 = v79;
  if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v74, v32) & 1) == 0)
  {
    *((_QWORD *)this + 12) = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(*((_QWORD *)a2 + 13) + 8), "function return type must be a constructible type", 50);
  }
LABEL_45:
  v34 = *((_QWORD *)this + 5);
  v35 = (uint64_t *)((char *)this + 48);
  v36 = (_QWORD *)operator new();
  *v36 = v34;
  v36[1] = 0;
  *(_QWORD *)&v74 = v36;
  v38 = *((unsigned int *)this + 15);
  if ((_DWORD)v38 != *((_DWORD *)this + 14))
  {
    v45 = *v35;
    *(_QWORD *)&v74 = 0;
    *(_QWORD *)(v45 + 8 * v38) = v36;
    v43 = v38 + 1;
    *((_DWORD *)this + 15) = v43;
    v44 = v74;
    *(_QWORD *)&v74 = 0;
    if (!v44)
      goto LABEL_50;
    goto LABEL_49;
  }
  v39 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 48, v38 + 1, (unint64_t)&v74);
  v40 = *((unsigned int *)this + 15);
  v41 = *((_QWORD *)this + 6);
  v42 = *v39;
  *v39 = 0;
  *(_QWORD *)(v41 + 8 * v40) = v42;
  v43 = v40 + 1;
  *((_DWORD *)this + 15) = v43;
  v44 = v74;
  *(_QWORD *)&v74 = 0;
  if (v44)
  {
LABEL_49:
    std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v44, v37);
    v43 = *((_DWORD *)this + 15);
  }
LABEL_50:
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E0D14);
  }
  *((_QWORD *)this + 5) = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v43 - 8);
  v46 = HIDWORD(v73);
  if (HIDWORD(v73))
  {
    v47 = 0;
    while (v47 < *((unsigned int *)a2 + 17))
    {
      v48 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 8 * v47) + 32;
      v49 = *((_QWORD *)v72 + v47);
      v69[0] = 0;
      v71 = 0;
      WGSL::TypeChecker::introduceValue((uint64_t)this, v48, v49, 3, (uint64_t)v69);
      if (v71)
      {
        if (v70 != -1)
          ((void (*)(__int128 *, _BYTE *))off_1E0FD7CC8[v70])(&v74, v69);
        v70 = -1;
      }
      if (++v47 >= v46)
        goto LABEL_59;
    }
    goto LABEL_88;
  }
LABEL_59:
  v50 = *((_QWORD *)a2 + 14);
  v51 = *(unsigned int *)(v50 + 52);
  if ((_DWORD)v51 && !*((_BYTE *)this + 32))
  {
    v66 = *(_QWORD **)(v50 + 40);
    v67 = 8 * v51 - 8;
LABEL_81:
    (*(void (**)(WGSL::TypeChecker *, _QWORD))(*(_QWORD *)this + 360))(this, *v66);
    while (v67)
    {
      ++v66;
      v67 -= 8;
      if (!*((_BYTE *)this + 32))
        goto LABEL_81;
    }
    v50 = *((_QWORD *)a2 + 14);
    v52 = *(unsigned int *)(v50 + 52);
    if (!(_DWORD)v52)
      goto LABEL_67;
  }
  else
  {
    v52 = *(unsigned int *)(v50 + 52);
    if (!(_DWORD)v52)
    {
LABEL_67:
      if (*((_QWORD *)a2 + 13))
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "missing return at end of function", 34);
      goto LABEL_69;
    }
  }
  v53 = *(uint64_t **)(v50 + 40);
  v54 = 8 * v52;
  v55 = 8;
  do
  {
    v56 = *v53++;
    v57 = WGSL::TypeChecker::analyze((uint64_t)this, v56);
    if ((v55 & 8) != 0)
      v55 = v57;
    v54 -= 8;
  }
  while (v54);
  if ((v55 & 8) != 0)
    goto LABEL_67;
LABEL_69:
  *((_QWORD *)this + 5) = v34;
  v58 = *((unsigned int *)this + 15);
  if (!(_DWORD)v58)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E0D1CLL);
  }
  v59 = v58 - 1;
  v60 = *(_QWORD *)(*v35 + 8 * (v58 - 1));
  *(_QWORD *)(*v35 + 8 * (v58 - 1)) = 0;
  if (v60)
    std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v60, v37);
  *((_DWORD *)this + 15) = v59;
  v61 = *((_QWORD *)this + 14);
  *(_QWORD *)&v74 = *((_QWORD *)this + 12);
  v79[0] = v68 & 1;
  v62 = WGSL::TypeStore::allocateType<WGSL::Types::Function,WTF::Vector<WGSL::Type const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::Type const*&,BOOL &>(v61, (uint64_t *)&v72, (uint64_t *)&v74, v79);
  LOBYTE(v74) = 2;
  *((_QWORD *)&v74 + 1) = v62;
  v75 = 3;
  v76[0] = 0;
  v78 = 0;
  WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>((uint64_t)v79, (uint64_t *)(*((_QWORD *)this + 5) + 8), (const WTF::StringImpl **)a2 + 6, &v74);
  v64 = v80;
  if (v78 && v77 != -1)
    ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v77])(v79, v76);
  if (!v64)
  {
    LOBYTE(v74) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (__int128 *)a2 + 2, (int8x16_t *)"redeclaration of '", 19, *((_QWORD *)a2 + 6), (char *)&v74);
  }
  *((_QWORD *)this + 12) = 0;
  result = v72;
  if (v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    return (WTF *)WTF::fastFree(result, v63);
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::AlignAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@align must be an i32 or u32 value", 35);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@align must be an i32 or u32 value", 35);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@align must be an i32 or u32 value", 35);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@align must be an i32 or u32 value", 35);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::BindingAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@binding must be an i32 or u32 value", 37);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@binding must be an i32 or u32 value", 37);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@binding must be an i32 or u32 value", 37);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@binding must be an i32 or u32 value", 37);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::GroupAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@group must be an i32 or u32 value", 35);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@group must be an i32 or u32 value", 35);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@group must be an i32 or u32 value", 35);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@group must be an i32 or u32 value", 35);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IdAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@id must be an i32 or u32 value", 32);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@id must be an i32 or u32 value", 32);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@id must be an i32 or u32 value", 32);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@id must be an i32 or u32 value", 32);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::LocationAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@location must be an i32 or u32 value", 38);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@location must be an i32 or u32 value", 38);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@location must be an i32 or u32 value", 38);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@location must be an i32 or u32 value", 38);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::SizeAttribute *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 1;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (!v6)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@size must be an i32 or u32 value", 34);
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@size must be an i32 or u32 value", 34);
  }
  if (v7)
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@size must be an i32 or u32 value", 34);
  if (*v6 - 1 >= 2 && (*v6 || (v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 64)) == 0))
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@size must be an i32 or u32 value", 34);
  else
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v4 + 8), (uint64_t)v6, v4 + 32);
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::WorkgroupSizeAttribute *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _DWORD *result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v20;
  BOOL v21;
  unsigned __int8 *v22;
  BOOL v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_BYTE *)this + 105);
  v6 = *((_BYTE *)this + 104);
  *((_WORD *)this + 52) = 2;
  result = (_DWORD *)WGSL::AST::Visitor::visit(this, v4);
  v8 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v8;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 104) = v6;
  *((_BYTE *)this + 105) = v5;
  if (!v8)
    goto LABEL_14;
  v9 = v8;
  while (1)
  {
    v10 = *((_DWORD *)v9 + 12);
    if (v10 != 10)
      break;
    v9 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
    if (!v9)
      goto LABEL_14;
  }
  if (v10 || *v9 >= 3u)
  {
LABEL_14:
    v15 = "@workgroup_size x dimension must be an i32 or u32 value";
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), v15, 56);
  }
  v11 = *((_QWORD *)a2 + 4);
  if (!v11)
  {
    v12 = 0;
    goto LABEL_17;
  }
  *((_WORD *)this + 52) = 2;
  result = (_DWORD *)WGSL::AST::Visitor::visit(this, v11);
  v12 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v11 + 24) = v12;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 104) = v6;
  *((_BYTE *)this + 105) = v5;
  if (!v12)
    goto LABEL_60;
  v13 = v12;
  while (1)
  {
    v14 = *((_DWORD *)v13 + 12);
    if (v14 != 10)
      break;
    v13 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
    if (!v13)
      goto LABEL_60;
  }
  if (v14 || *v13 >= 3u)
  {
LABEL_60:
    v15 = "@workgroup_size y dimension must be an i32 or u32 value";
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), v15, 56);
  }
  v29 = *((_QWORD *)a2 + 5);
  if (v29)
  {
    *((_WORD *)this + 52) = 2;
    result = (_DWORD *)WGSL::AST::Visitor::visit(this, v29);
    v11 = *((_QWORD *)this + 11);
    *(_QWORD *)(v29 + 24) = v11;
    *((_QWORD *)this + 11) = 0;
    *((_BYTE *)this + 104) = v6;
    *((_BYTE *)this + 105) = v5;
    if (!v11)
      goto LABEL_65;
    v30 = (unsigned __int8 *)v11;
    while (1)
    {
      v31 = *((_DWORD *)v30 + 12);
      if (v31 != 10)
        break;
      v30 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
      if (!v30)
        goto LABEL_65;
    }
    if (v31 || *v30 >= 3u)
    {
LABEL_65:
      v15 = "@workgroup_size z dimension must be an i32 or u32 value";
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), v15, 56);
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_17:
  v16 = *((_QWORD *)this + 14);
  v17 = *(unsigned __int8 **)(v16 + 64);
  if (v8 != v17)
  {
    v18 = *(unsigned __int8 **)(v16 + 24);
    if (v18 != v17 && v18 != v8)
    {
      result = (_DWORD *)WGSL::conversionRank(v8, v17);
      if ((_DWORD)result == -1)
        goto LABEL_37;
    }
  }
  if (v12
    && v12 != v17
    && ((v20 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24), v20 != v17) ? (v21 = v20 == v12) : (v21 = 1),
        !v21 && (result = (_DWORD *)WGSL::conversionRank(v12, v17), (_DWORD)result == -1))
    || v11
    && (unsigned __int8 *)v11 != v17
    && ((v22 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24), v22 != v17)
      ? (v23 = v22 == (unsigned __int8 *)v11)
      : (v23 = 1),
        !v23 && (result = (_DWORD *)WGSL::conversionRank((unsigned __int8 *)v11, v17), (_DWORD)result == -1)))
  {
LABEL_37:
    v24 = *((_QWORD *)this + 14);
    v25 = *(unsigned __int8 **)(v24 + 72);
    if (v8 != v25)
    {
      v26 = *(unsigned __int8 **)(v24 + 24);
      if (v26 != v25 && v26 != v8)
      {
        result = (_DWORD *)WGSL::conversionRank(v8, v25);
        if ((_DWORD)result == -1)
          return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@workgroup_size arguments must be of the same type, either i32 or u32", 70);
      }
    }
    if (v12)
    {
      if (v12 != v25)
      {
        v27 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
        if (v27 != v25 && v27 != v12)
        {
          result = (_DWORD *)WGSL::conversionRank(v12, v25);
          if ((_DWORD)result == -1)
            return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@workgroup_size arguments must be of the same type, either i32 or u32", 70);
        }
      }
    }
    if (v11)
    {
      if ((unsigned __int8 *)v11 != v25)
      {
        v28 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
        if (v28 != v25 && v28 != (unsigned __int8 *)v11)
        {
          result = (_DWORD *)WGSL::conversionRank((unsigned __int8 *)v11, v25);
          if ((_DWORD)result == -1)
            return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)((char *)a2 + 8), "@workgroup_size arguments must be of the same type, either i32 or u32", 70);
        }
      }
    }
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::AssignmentStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  __int128 *v14;
  char *v15;
  WGSL::TypeChecker *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = *((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  v7 = *((_QWORD *)a2 + 4);
  *((_WORD *)this + 52) = 3;
  result = (_DWORD *)WGSL::AST::Visitor::visit(this, v7);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v7 + 24) = v9;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v10 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
  if (v10 == (unsigned __int8 *)v6)
    return result;
  if (!v6 || *(_DWORD *)(v6 + 48) != 10)
  {
    v14 = (__int128 *)((char *)a2 + 8);
    LOBYTE(v20) = 39;
    v15 = "cannot assign to a value of type '";
    v16 = this;
    v17 = 35;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v16, 0, v14, v15, v17, v6, (char *)&v20);
  }
  if (!*(_BYTE *)(v6 + 1))
  {
    v14 = (__int128 *)((char *)a2 + 8);
    LOBYTE(v20) = 39;
    v15 = "cannot store into a read-only type '";
    v16 = this;
    v17 = 37;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v16, 0, v14, v15, v17, v6, (char *)&v20);
  }
  v11 = *(unsigned __int8 **)(v6 + 8);
  if (v11 == v9)
    goto LABEL_12;
  if (v10 == v9 || v10 == v11)
  {
    v9 = *(unsigned __int8 **)(v6 + 8);
LABEL_12:
    v13 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(v13 + 24) = v9;
    if (!*(_BYTE *)(v13 + 56))
      return result;
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v13 + 8), (uint64_t)v9, v13 + 32);
  }
  result = (_DWORD *)WGSL::conversionRank(v9, v11);
  v18 = *(_QWORD *)(v6 + 8);
  if ((_DWORD)result == -1)
  {
    *(_QWORD *)&v20 = "' to '";
    *((_QWORD *)&v20 + 1) = 7;
    v19 = 39;
    return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, (WGSL::AST::AssignmentStatement *)((char *)a2 + 8), (int8x16_t *)"cannot assign value of type '", 30, (uint64_t)v9, &v20, v18, &v19);
  }
  v9 = *(unsigned __int8 **)(v6 + 8);
  v13 = *((_QWORD *)a2 + 4);
  *(_QWORD *)(v13 + 24) = v18;
  if (*(_BYTE *)(v13 + 56))
    return (_DWORD *)WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v13 + 8), (uint64_t)v9, v13 + 32);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, int a2, _OWORD *a3, int8x16_t *a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, char *a9)
{
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  _DWORD *result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v28;
  _BYTE v29[24];
  char v30;
  _BYTE v31[48];
  unsigned int v32;
  _BYTE v33[48];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33[0] = 0;
  v34 = -1;
  v15 = *(unsigned int *)(a6 + 48);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD7E68[v15])(v29, v33, a6);
    v34 = v15;
  }
  v16 = *a7;
  v31[0] = 0;
  v32 = -1;
  v17 = *(unsigned int *)(a8 + 48);
  if ((_DWORD)v17 != -1)
  {
    v26 = v16;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD7E68[v17])(v29, v31, a8);
    v16 = v26;
    v32 = v17;
  }
  v18 = *a9;
  *(_OWORD *)v29 = v16;
  v30 = v18;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(&v28, a4, a5, (uint64_t)v33, (uint64_t)v29, (uint64_t)v31, &v30);
  if (!v28)
  {
    __break(0xC471u);
    return result;
  }
  *(_QWORD *)v29 = v28;
  *(_OWORD *)&v29[8] = *a3;
  v20 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v20 == *(_DWORD *)(a1 + 128))
  {
    v21 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v20 + 1, (unint64_t)v29);
    v22 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    v23 = *(_QWORD *)v21;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)v22 = v23;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
    result = *(_DWORD **)v29;
    ++*(_DWORD *)(a1 + 132);
    *(_QWORD *)v29 = 0;
    if (result)
    {
      if (*result == 2)
      {
        result = (_DWORD *)WTF::StringImpl::destroy();
        v24 = v32;
        if (v32 == -1)
          goto LABEL_14;
      }
      else
      {
        *result -= 2;
        v24 = v32;
        if (v32 == -1)
          goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 120) + 24 * v20;
    *(_QWORD *)v25 = v28;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)&v29[8];
    ++*(_DWORD *)(a1 + 132);
    *(_QWORD *)v29 = 0;
  }
  v24 = v32;
  if (v32 != -1)
LABEL_13:
    result = (_DWORD *)((uint64_t (*)(char *, _BYTE *))off_1E0FD7DF0[v24])(&v30, v31);
LABEL_14:
  v32 = -1;
  if (v34 != -1)
    result = (_DWORD *)((uint64_t (*)(char *, _BYTE *))off_1E0FD7DF0[v34])(&v30, v33);
  if (a2)
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CallStatement *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t result;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 259;
  result = WGSL::AST::Visitor::visit(this, v3);
  *(_QWORD *)(v3 + 24) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CompoundAssignmentStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  WTF *result;
  char v8;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = *((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  if (v6 && *(_DWORD *)(v6 + 48) == 10)
  {
    result = WGSL::TypeChecker::binaryExpression((unint64_t)this, (__int128 *)((char *)a2 + 8), 0, *((unsigned __int8 *)a2 + 40), *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4));
    *((_QWORD *)this + 11) = 0;
  }
  else
  {
    v8 = 39;
    return (WTF *)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 0, (__int128 *)((char *)a2 + 8), "cannot assign to a value of type '", 35, v6, &v8);
  }
  return result;
}

WTF *WGSL::TypeChecker::binaryExpression(unint64_t a1, __int128 *a2, const WTF::StringImpl *a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int i;
  int v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unint64_t v40;
  _DWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t **__return_ptr, uint64_t, uint64_t *);
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t *v65;
  int v66;
  unsigned int v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  WTF *result;
  int v76;
  const char *v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  int v91;
  _DWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  BOOL v112;
  int v113;
  WTF *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v126;
  _BYTE v127[16];
  int v128;
  WTF *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t **v133;
  int v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  int v138;
  char v139;
  WTF *v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  __int128 v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;

  v8 = a4;
  v126 = a2;
  v181 = *MEMORY[0x1E0C80C00];
  v10 = (&off_1E0FD7EE0)[2 * a4 + 1];
  if (v10)
  {
    a2 = (__int128 *)(v10 - 1);
    if (v10 == (char *)1)
    {
      v11 = (uint64_t *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v176;
    }
  }
  else
  {
    v11 = 0;
  }
  v129 = (WTF *)&v131;
  v123 = a5;
  v131 = a5;
  v132 = a6;
  v130 = 0x200000002;
  v158 = 0;
  v159 = 0;
  v12 = *(_QWORD *)(a1 + 152);
  if (!v12)
    goto LABEL_109;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = *((_DWORD *)v11 + 4);
  v124 = a6;
  v15 = v8;
  if (v14 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v11);
  else
    v16 = v14 >> 8;
  for (i = 0; ; v16 = i + v18)
  {
    v18 = v16 & v13;
    v19 = v12 + 48 * (v16 & v13);
    v20 = *(WTF **)v19;
    if (*(_QWORD *)v19 != -1)
    {
      if (!v20)
      {
        v8 = v15;
        goto LABEL_107;
      }
      if ((WTF::equal(v20, (const WTF::StringImpl *)v11, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v21 = *(_QWORD *)(a1 + 152);
  v8 = v15;
  if (v21 && v19 == v21 + 48 * *(unsigned int *)(v21 - 4))
    goto LABEL_107;
  v136 = 0;
  v137 = 0;
  if (HIDWORD(v130) >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E2D30);
  }
  v22 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v130)));
  LODWORD(v137) = HIDWORD(v130);
  v136 = v22;
  v23 = 0;
  do
  {
    while (1)
    {
      v176 = 0;
      v26 = *((_QWORD *)v129 + v23);
      v27 = *(_WORD *)(a1 + 104);
      *(_BYTE *)(a1 + 105) = 0;
      WGSL::AST::Visitor::visit((_BYTE *)a1, v26);
      v28 = *(uint64_t **)(a1 + 88);
      *(_QWORD *)(v26 + 24) = v28;
      *(_QWORD *)(a1 + 88) = 0;
      *(_WORD *)(a1 + 104) = v27;
      v176 = v28;
      if (*(uint64_t **)(*(_QWORD *)(a1 + 112) + 24) == v28)
      {
        *(_QWORD *)(a1 + 88) = v28;
        goto LABEL_105;
      }
      v29 = HIDWORD(v137);
      if (HIDWORD(v137) != (_DWORD)v137)
        break;
      v24 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, HIDWORD(v137) + 1, (unint64_t)&v176);
      v25 = HIDWORD(v137);
      *((_QWORD *)v136 + HIDWORD(v137)) = *v24;
      HIDWORD(v137) = v25 + 1;
      if (++v23 >= HIDWORD(v130))
        goto LABEL_25;
    }
    *((_QWORD *)v136 + HIDWORD(v137)) = v28;
    HIDWORD(v137) = v29 + 1;
    ++v23;
  }
  while (v23 < HIDWORD(v130));
LABEL_25:
  WGSL::resolveOverloads(*(_QWORD *)(a1 + 112), (uint64_t *)(v19 + 32), (uint64_t)&v136, (uint64_t)&v158, (uint64_t)&v140);
  if (!(_BYTE)v142)
  {
    v47 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v176);
    v48 = HIDWORD(v137);
    if (HIDWORD(v137))
    {
      v49 = v136;
      v50 = *(_QWORD *)v136;
      v161 = ((uint64_t (*)(uint64_t))v176[4])(v47);
      v162 = (_DWORD *)v161;
      v163 = v161;
      v164 = v161;
      v165 = v161;
      v166 = v161;
      v167 = v161;
      v168 = v161;
      v169 = v161;
      v170 = v161;
      v171 = v161;
      v172 = v161;
      v173 = v161;
      v174 = v161;
      v175 = v161;
      v51 = *(unsigned int *)(v50 + 48);
      if ((_DWORD)v51 == -1)
        goto LABEL_229;
      v143 = &v161;
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v51])(&v143, v50);
      ((void (*)(uint64_t **))v176[5])(&v176);
      if ((_DWORD)v48 != 1)
      {
        v52 = (uint64_t *)((char *)v49 + 8);
        v53 = 8 * v48 - 8;
        do
        {
          v54 = *v52;
          ((void (*)(uint64_t **))v176[4])(&v176);
          WTF::printInternal();
          ((void (*)(uint64_t **))v176[5])(&v176);
          v161 = ((uint64_t (*)(uint64_t **))v176[4])(&v176);
          v162 = (_DWORD *)v161;
          v163 = v161;
          v164 = v161;
          v165 = v161;
          v166 = v161;
          v167 = v161;
          v168 = v161;
          v169 = v161;
          v170 = v161;
          v171 = v161;
          v172 = v161;
          v173 = v161;
          v174 = v161;
          v175 = v161;
          v55 = *(unsigned int *)(v54 + 48);
          if ((_DWORD)v55 == -1)
            goto LABEL_229;
          v143 = &v161;
          ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v55])(&v143, v54);
          ((void (*)(uint64_t **))v176[5])(&v176);
          ++v52;
          v53 -= 8;
        }
        while (v53);
      }
    }
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v161);
    if (HIDWORD(v159))
    {
      (*(void (**)(uint64_t *))(v161 + 32))(&v161);
      WTF::printInternal();
      (*(void (**)(uint64_t *))(v161 + 40))(&v161);
      v56 = HIDWORD(v159);
      if (HIDWORD(v159))
      {
        v57 = v158;
        v58 = *(_QWORD *)v158;
        v143 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v161 + 32))(&v161);
        v144 = (uint64_t)v143;
        v145 = (uint64_t)v143;
        v146 = (uint64_t)v143;
        v147 = (uint64_t)v143;
        v148 = (uint64_t)v143;
        v149 = (uint64_t)v143;
        v150 = (uint64_t)v143;
        v151 = (uint64_t)v143;
        v152 = (uint64_t)v143;
        v153 = (uint64_t)v143;
        v154 = (uint64_t)v143;
        v155 = (uint64_t)v143;
        v156 = (uint64_t)v143;
        v157 = (uint64_t)v143;
        v59 = *(unsigned int *)(v58 + 48);
        if ((_DWORD)v59 == -1)
          goto LABEL_229;
        v133 = &v143;
        ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v59])(&v133, v58);
        (*(void (**)(uint64_t *))(v161 + 40))(&v161);
        if ((_DWORD)v56 != 1)
        {
          v60 = (uint64_t *)((char *)v57 + 8);
          v61 = 8 * v56 - 8;
          do
          {
            v62 = *v60;
            (*(void (**)(uint64_t *))(v161 + 32))(&v161);
            WTF::printInternal();
            (*(void (**)(uint64_t *))(v161 + 40))(&v161);
            v143 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v161 + 32))(&v161);
            v144 = (uint64_t)v143;
            v145 = (uint64_t)v143;
            v146 = (uint64_t)v143;
            v147 = (uint64_t)v143;
            v148 = (uint64_t)v143;
            v149 = (uint64_t)v143;
            v150 = (uint64_t)v143;
            v151 = (uint64_t)v143;
            v152 = (uint64_t)v143;
            v153 = (uint64_t)v143;
            v154 = (uint64_t)v143;
            v155 = (uint64_t)v143;
            v156 = (uint64_t)v143;
            v157 = (uint64_t)v143;
            v63 = *(unsigned int *)(v62 + 48);
            if ((_DWORD)v63 == -1)
              goto LABEL_229;
            v133 = &v143;
            ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v63])(&v133, v62);
            (*(void (**)(uint64_t *))(v161 + 40))(&v161);
            ++v60;
            v61 -= 8;
          }
          while (v61);
        }
      }
      (*(void (**)(uint64_t *))(v161 + 32))(&v161);
      WTF::printInternal();
      (*(void (**)(uint64_t *))(v161 + 40))(&v161);
    }
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v161);
    LOBYTE(v135) = 40;
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v176);
    v139 = 41;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>(a1, v126, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"operator", 9, 32, (uint64_t)v11, (uint64_t *)&v143, (char *)&v135, (uint64_t *)&v133, &v139);
    v64 = v133;
    v133 = 0;
    v8 = v15;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::destroy();
        v65 = v143;
        v143 = 0;
        if (!v65)
        {
LABEL_82:
          WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v161);
          WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v176);
          goto LABEL_105;
        }
LABEL_79:
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v65 -= 2;
        goto LABEL_82;
      }
      *(_DWORD *)v64 -= 2;
    }
    v65 = v143;
    v143 = 0;
    if (!v65)
      goto LABEL_82;
    goto LABEL_79;
  }
  if (*(_BYTE *)(a1 + 105) && *(_BYTE *)(v19 + 9))
  {
    LOBYTE(v176) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>(a1, v126, (int8x16_t *)"ignoring return value of builtin '", 35, (uint64_t)v11, (char *)&v176);
  }
  v30 = HIDWORD(v130);
  v31 = (uint64_t)a3;
  if (HIDWORD(v130))
  {
    v32 = (uint64_t *)((char *)v140 + 8);
    v33 = *(unsigned int *)v140;
    v34 = v129;
    do
    {
      if (!v33)
      {
        __break(0xC471u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      v36 = *v32++;
      v35 = v36;
      v37 = *(_QWORD *)v34;
      v34 = (WTF *)((char *)v34 + 8);
      *(_QWORD *)(v37 + 24) = v35;
      --v33;
      --v30;
    }
    while (v30);
  }
  v122 = v141;
  *(_QWORD *)(a1 + 88) = v141;
  if (a3 && (*(unsigned int (**)(const WTF::StringImpl *))(*(_QWORD *)a3 + 16))(a3) == 20)
  {
    *((_BYTE *)a3 + 88) = *(_BYTE *)(v19 + 8) == 1;
    *((_BYTE *)a3 + 89) = *(_BYTE *)(v19 + 24);
  }
  v38 = HIDWORD(v130);
  if (!HIDWORD(v130))
  {
    v161 = 0;
    v46 = *(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t *))(v19 + 16);
    if (v46)
      goto LABEL_74;
    v39 = 0;
LABEL_87:
    v67 = *(unsigned __int8 *)(a1 + 104);
    if (v67 <= 2)
    {
      if (v67 == 2)
        v68 = "override";
      else
        v68 = "constant";
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(a1, 0, v126, "cannot call function from ", 27, (uint64_t)v68, 9, (uint64_t)" context", 9);
    }
    v161 = 0;
    if (v39)
      goto LABEL_97;
    goto LABEL_103;
  }
  v121 = v15;
  v39 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v130) + 8));
  *v39 = HIDWORD(v130);
  bzero(v39 + 2, 24 * ((24 * v38 - 24) / 0x18uLL) + 24);
  v40 = 0;
  v161 = (uint64_t)v39;
  v41 = v39 + 6;
  v42 = 1;
  do
  {
    if (v40 >= HIDWORD(v130))
    {
      __break(0xC471u);
      JUMPOUT(0x1825E2D28);
    }
    v43 = *((_QWORD *)v129 + v40);
    if (!*(_BYTE *)(v43 + 56)
      || !WGSL::TypeChecker::convertValue(a1, (__int128 *)(v43 + 8), *(_QWORD *)(v43 + 24), v43 + 32))
    {
      v42 = 0;
      goto LABEL_39;
    }
    if (!*(_BYTE *)(v43 + 56))
      goto LABEL_214;
    if (v40 >= *v39)
    {
      __break(0xC471u);
      goto LABEL_233;
    }
    a2 = (__int128 *)(v41 - 4);
    v44 = *v41;
    v45 = *(unsigned int *)(v43 + 48);
    if ((_DWORD)v44 == -1)
    {
      if ((_DWORD)v45 == -1)
        goto LABEL_39;
    }
    else if ((_DWORD)v45 == -1)
    {
      ((void (*)(uint64_t **, __int128 *))off_1E0FD7CC8[v44])(&v176, a2);
      *v41 = -1;
      goto LABEL_39;
    }
    v176 = (uint64_t *)(v41 - 4);
    ((void (*)(uint64_t **))off_1E0FD80E0[v45])(&v176);
LABEL_39:
    ++v40;
    v41 += 6;
  }
  while (v38 != v40);
  v46 = *(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t *))(v19 + 16);
  v8 = v121;
  if (!v46)
    goto LABEL_87;
  v31 = (uint64_t)a3;
  if ((v42 & 1) == 0)
  {
    v161 = 0;
    goto LABEL_97;
  }
LABEL_74:
  v46(&v176, v122, &v161);
  if (v179)
  {
    if (v179 == 1)
    {
      WGSL::TypeChecker::typeError<WTF::String &>(a1, v126, v177);
      v66 = v179;
      if (v179 == -1)
        goto LABEL_96;
      goto LABEL_95;
    }
LABEL_229:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (!v31)
  {
    v66 = 0;
    goto LABEL_95;
  }
  WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>(a1, v31, v122, (uint64_t)&v177);
  v66 = v179;
  if (v179 != -1)
LABEL_95:
    ((void (*)(uint64_t **, __int128 *))off_1E0FD7DD0[v66])(&v143, &v177);
LABEL_96:
  v39 = (unsigned int *)v161;
  v161 = 0;
  if (!v39)
  {
LABEL_103:
    if (v140)
      WTF::fastFree(v140, a2);
    goto LABEL_105;
  }
LABEL_97:
  v69 = *v39;
  if ((_DWORD)v69)
  {
    v70 = 24 * v69;
    v71 = v39 + 6;
    do
    {
      a2 = (__int128 *)(v71 - 4);
      v72 = *v71;
      if ((_DWORD)v72 != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E0FD7CC8[v72])(&v176, a2);
      *v71 = -1;
      v71 += 6;
      v70 -= 24;
    }
    while (v70);
  }
  WTF::fastFree((WTF *)v39, a2);
  if ((_BYTE)v142)
    goto LABEL_103;
LABEL_105:
  v73 = v136;
  if (v136)
  {
    v136 = 0;
    LODWORD(v137) = 0;
    WTF::fastFree(v73, a2);
  }
LABEL_107:
  v74 = v158;
  a6 = v124;
  if (v158)
  {
    v158 = 0;
    LODWORD(v159) = 0;
    WTF::fastFree(v74, a2);
  }
LABEL_109:
  result = v129;
  if (&v131 != (uint64_t *)v129 && v129)
  {
    v129 = 0;
    LODWORD(v130) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  if (v11)
  {
    if (*(_DWORD *)v11 != 2)
    {
      *(_DWORD *)v11 -= 2;
      goto LABEL_115;
    }
    result = (WTF *)WTF::StringImpl::destroy();
    if (v8 != 3)
    {
LABEL_119:
      if (v8 == 4)
      {
        v76 = 6;
        v77 = "modulo";
        v78 = *(unsigned __int8 **)(a6 + 24);
        if (v78)
          goto LABEL_121;
      }
      return result;
    }
  }
  else
  {
LABEL_115:
    if (v8 != 3)
      goto LABEL_119;
  }
  v76 = 8;
  v77 = "division";
  v78 = *(unsigned __int8 **)(a6 + 24);
  if (!v78)
    return result;
LABEL_121:
  if (*((_DWORD *)v78 + 12) != 1 || (v78 = *(unsigned __int8 **)v78) != 0)
  {
    while (1)
    {
      v79 = *((_DWORD *)v78 + 12);
      if (v79 != 10)
        break;
      v78 = (unsigned __int8 *)*((_QWORD *)v78 + 1);
      if (!v78)
        return result;
    }
    if (!v79 && *v78 <= 2u)
    {
      v80 = *(_QWORD *)(a1 + 80);
      if (v8 != 3)
      {
        *(_BYTE *)(v80 + 15) = 1;
        LOBYTE(v143) = 0;
        LOBYTE(v146) = 0;
        v81 = v123;
        if (!*(_BYTE *)(v123 + 56))
          goto LABEL_136;
LABEL_130:
        LODWORD(v145) = -1;
        v82 = *(unsigned int *)(v81 + 48);
        if ((_DWORD)v82 != -1)
        {
          result = (WTF *)((uint64_t (*)(uint64_t **, uint64_t **, uint64_t))off_1E0FD8010[v82])(&v176, &v143, v81 + 32);
          LODWORD(v145) = v82;
        }
        LOBYTE(v146) = 1;
        LOBYTE(v129) = 0;
        LOBYTE(v132) = 0;
        if (*(_BYTE *)(a6 + 56))
        {
          LODWORD(v131) = -1;
          v83 = *(_DWORD *)(a6 + 48);
          if (v83 != -1)
          {
LABEL_138:
            ((void (*)(uint64_t **, WTF **, uint64_t))off_1E0FD8010[v83])(&v176, &v129, a6 + 32);
            LODWORD(v131) = v83;
            LOBYTE(v132) = 1;
            if (!(_BYTE)v146)
            {
              v127[0] = 0;
              v128 = -1;
              ((void (*)(uint64_t **, _BYTE *, WTF **))off_1E0FD8010[v83])(&v176, v127, &v129);
              v128 = v83;
              goto LABEL_141;
            }
            goto LABEL_222;
          }
        }
LABEL_223:
        if ((_BYTE)v146)
        {
          if ((_DWORD)v145 != -1)
            return (WTF *)((uint64_t (*)(uint64_t **, uint64_t **))off_1E0FD7CC8[v145])(&v176, &v143);
        }
        return result;
      }
      *(_BYTE *)(v80 + 14) = 1;
      LOBYTE(v143) = 0;
      LOBYTE(v146) = 0;
      v81 = v123;
      if (*(_BYTE *)(v123 + 56))
        goto LABEL_130;
LABEL_136:
      LOBYTE(v129) = 0;
      LOBYTE(v132) = 0;
      if (!*(_BYTE *)(a6 + 56))
        return result;
      LODWORD(v131) = -1;
      v83 = *(_DWORD *)(a6 + 48);
      if (v83 != -1)
        goto LABEL_138;
      LOBYTE(v132) = 1;
      v127[0] = 0;
      v128 = -1;
LABEL_141:
      v84 = *(unsigned int *)(*(_QWORD *)(a6 + 24) + 48);
      if ((_DWORD)v84 == -1)
        goto LABEL_229;
      v176 = &v161;
      ((void (*)(WTF **__return_ptr, uint64_t **))off_1E0FD8068[v84])(&v140, &v176);
      LOBYTE(v176) = 0;
      DWORD2(v177) = -1;
      v85 = v128;
      if (v128 != -1)
      {
        ((void (*)(uint64_t *, uint64_t **, _BYTE *))off_1E0FD8010[v128])(&v161, &v176, v127);
        DWORD2(v177) = v85;
      }
      LOBYTE(v178) = 0;
      v180 = -1;
      v86 = v142;
      if (v142 != -1)
      {
        ((void (*)(uint64_t *, int *, WTF **))off_1E0FD8010[v142])(&v161, &v178, &v140);
        v180 = v86;
      }
      v87 = WTF::fastMalloc((WTF *)0x38);
      v88 = (unsigned int *)v87;
      *(_OWORD *)(v87 + 8) = 0u;
      *(_DWORD *)v87 = 2;
      *(_OWORD *)(v87 + 24) = 0u;
      *(_OWORD *)(v87 + 40) = 0u;
      v136 = (WTF *)v87;
      if (DWORD2(v177) == -1)
      {
        *(_DWORD *)(v87 + 24) = -1;
        v90 = (unsigned int *)(v87 + 32);
        v91 = v180;
        if (v180 == -1)
        {
          v89 = 0;
          goto LABEL_153;
        }
        goto LABEL_155;
      }
      v161 = v87 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[DWORD2(v177)])(&v161);
      if (*v88 < 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825E2D18);
      }
      v89 = v88[12];
      v90 = v88 + 8;
      v91 = v180;
      if (v89 == -1)
      {
        if (v180 != -1)
          goto LABEL_155;
      }
      else
      {
        if (v180 == -1)
        {
LABEL_153:
          ((void (*)(uint64_t *, unsigned int *))off_1E0FD7CC8[v89])(&v161, v90);
          v88[12] = -1;
          goto LABEL_156;
        }
LABEL_155:
        v161 = (uint64_t)v90;
        ((void (*)(uint64_t *))off_1E0FD80E0[v91])(&v161);
      }
LABEL_156:
      WGSL::constantEqual((int **)&v136, (uint64_t)&v161);
      v93 = *v88;
      if ((_DWORD)v93)
      {
        v94 = 24 * v93;
        v95 = v88 + 6;
        do
        {
          v92 = v95 - 4;
          v96 = *v95;
          if ((_DWORD)v96 != -1)
            ((void (*)(WTF **, _DWORD *))off_1E0FD7CC8[v96])(&v158, v92);
          *v95 = -1;
          v95 += 6;
          v94 -= 24;
        }
        while (v94);
      }
      WTF::fastFree((WTF *)v88, v92);
      if (v180 != -1)
        ((void (*)(WTF **, int *))off_1E0FD7CC8[v180])(&v158, &v178);
      v180 = -1;
      if (DWORD2(v177) != -1)
        ((void (*)(WTF **, uint64_t **))off_1E0FD7CC8[DWORD2(v177)])(&v158, &v176);
      if ((_DWORD)v165)
      {
        if ((_DWORD)v165 != 1)
          goto LABEL_229;
        v97 = (uint64_t)v162;
        if (v162)
          *v162 += 2;
        v133 = (uint64_t **)v97;
        v98 = 1;
        v134 = 1;
        v99 = v97;
        v100 = 1;
LABEL_195:
        ((void (*)(uint64_t **, _DWORD **))off_1E0FD7DD0[v100])(&v176, &v162);
LABEL_196:
        if (v142 != -1)
          ((void (*)(uint64_t **, WTF **))off_1E0FD7CC8[v142])(&v176, &v140);
        if (v99)
          v112 = v98 == 0;
        else
          v112 = 0;
        v113 = v112;
        result = (WTF *)((uint64_t (*)(uint64_t **, uint64_t ***))off_1E0FD8000[v98])(&v176, &v133);
        if (v128 != -1)
          result = (WTF *)((uint64_t (*)(uint64_t **, _BYTE *))off_1E0FD7CC8[v128])(&v176, v127);
        v128 = -1;
        if (v113)
        {
          v176 = (uint64_t *)"invalid ";
          LODWORD(v177) = 8;
          v161 = (uint64_t)v77;
          LODWORD(v162) = v76;
          v140 = (WTF *)" by zero";
          LODWORD(v141) = 8;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v176, (uint64_t)&v161, (uint64_t)&v140, &v136);
          v114 = v136;
          if (!v136)
          {
            __break(0xC471u);
LABEL_233:
            JUMPOUT(0x1825E2CF8);
          }
          v136 = 0;
          v176 = (uint64_t *)v114;
          v177 = *v126;
          v115 = *(unsigned int *)(a1 + 132);
          if ((_DWORD)v115 != *(_DWORD *)(a1 + 128))
          {
            v120 = *(_QWORD *)(a1 + 120) + 24 * v115;
            *(_QWORD *)v120 = v114;
            *(_OWORD *)(v120 + 8) = v177;
            ++*(_DWORD *)(a1 + 132);
            v176 = 0;
            goto LABEL_216;
          }
          v116 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v115 + 1, (unint64_t)&v176);
          v117 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
          v118 = *(_QWORD *)v116;
          *(_QWORD *)v116 = 0;
          *(_QWORD *)v117 = v118;
          *(_OWORD *)(v117 + 8) = *(_OWORD *)(v116 + 8);
          v119 = v176;
          ++*(_DWORD *)(a1 + 132);
          v176 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 != 2)
            {
              *(_DWORD *)v119 -= 2;
              goto LABEL_216;
            }
LABEL_215:
            WTF::StringImpl::destroy();
          }
LABEL_216:
          result = v136;
          v136 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF *)WTF::StringImpl::destroy();
            else
              *(_DWORD *)result -= 2;
          }
        }
        if ((_BYTE)v132)
        {
          v83 = v131;
          if ((_DWORD)v131 != -1)
LABEL_222:
            result = (WTF *)((uint64_t (*)(uint64_t **, WTF **))off_1E0FD7CC8[v83])(&v176, &v129);
        }
        goto LABEL_223;
      }
      LOBYTE(v136) = 0;
      v138 = -1;
      v101 = v164;
      if ((_DWORD)v164 == -1)
      {
        LOBYTE(v158) = 0;
        v160 = -1;
      }
      else
      {
        ((void (*)(uint64_t **, WTF **, _DWORD **))off_1E0FD7D20[v164])(&v176, &v136, &v162);
        v138 = v101;
        LOBYTE(v158) = 0;
        v160 = -1;
        ((void (*)(uint64_t ***, WTF **, WTF **))off_1E0FD8010[v101])(&v133, &v158, &v136);
        v160 = v101;
      }
      v102 = WTF::fastMalloc((WTF *)0x20);
      v103 = (WTF *)v102;
      *(_QWORD *)(v102 + 8) = 0;
      *(_DWORD *)v102 = 1;
      *(_QWORD *)(v102 + 16) = 0;
      *(_QWORD *)(v102 + 24) = 0;
      v135 = v102;
      if (v160 == -1)
      {
        *(_DWORD *)(v102 + 24) = -1;
      }
      else
      {
        v133 = (uint64_t **)(v102 + 8);
        ((void (*)(uint64_t ***))off_1E0FD80E0[v160])(&v133);
      }
      WGSL::constantAny(&v135, (uint64_t)&v176);
      v105 = *(unsigned int *)v103;
      if ((_DWORD)v105)
      {
        v106 = 24 * v105;
        v107 = (_DWORD *)((char *)v103 + 24);
        do
        {
          v104 = v107 - 4;
          v108 = *v107;
          if ((_DWORD)v108 != -1)
            ((void (*)(uint64_t ***, _DWORD *))off_1E0FD7CC8[v108])(&v133, v104);
          *v107 = -1;
          v107 += 6;
          v106 -= 24;
        }
        while (v106);
      }
      WTF::fastFree(v103, v104);
      if (v160 != -1)
        ((void (*)(uint64_t ***, WTF **))off_1E0FD7CC8[v160])(&v133, &v158);
      v98 = v179;
      if (v179)
      {
        if (v179 != 1)
          goto LABEL_229;
        v109 = v177;
        if ((_QWORD)v177)
          *(_DWORD *)v177 += 2;
        v133 = (uint64_t **)v109;
        v110 = 1;
        v134 = 1;
        v99 = v109;
        goto LABEL_191;
      }
      LOBYTE(v158) = 0;
      v160 = -1;
      v111 = v178;
      if (v178 == -1)
        goto LABEL_229;
      ((void (*)(uint64_t ***, WTF **, __int128 *))off_1E0FD7D20[v178])(&v133, &v158, &v177);
      v160 = v111;
      if (v111 != 6)
        goto LABEL_229;
      v99 = v158;
      LOBYTE(v133) = (_BYTE)v158;
      v134 = 0;
      v110 = v179;
      if (v179 != -1)
LABEL_191:
        ((void (*)(WTF **, __int128 *))off_1E0FD7DD0[v110])(&v158, &v177);
      if (v138 != -1)
        ((void (*)(uint64_t **, WTF **))off_1E0FD7CC8[v138])(&v176, &v136);
      v100 = v165;
      if ((_DWORD)v165 != -1)
        goto LABEL_195;
      goto LABEL_196;
    }
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::DecrementIncrementStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  __int128 *v13;
  char *v14;
  char *v15;
  WGSL::TypeChecker *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int8x16_t *v22;
  uint64_t v23;
  char v24;
  char v25;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = *((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v7 = *((_QWORD *)this + 14);
  v8 = *(unsigned __int8 **)(v7 + 24);
  if (v8 == (unsigned __int8 *)v6)
    return;
  if (!v6 || *(_DWORD *)(v6 + 48) != 10)
  {
    v13 = (__int128 *)((char *)a2 + 8);
    v25 = 39;
    v14 = "cannot modify a value of type '";
    v15 = &v25;
    v16 = this;
    v17 = 32;
LABEL_15:
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)v16, 0, v13, v14, v17, v6, v15);
    return;
  }
  if (!*(_BYTE *)(v6 + 1))
  {
    v13 = (__int128 *)((char *)a2 + 8);
    v24 = 39;
    v14 = "cannot modify read-only type '";
    v15 = &v24;
    v16 = this;
    v17 = 31;
    goto LABEL_15;
  }
  v9 = *(unsigned __int8 **)(v7 + 64);
  v10 = *(unsigned __int8 **)(v6 + 8);
  if (v9 != v10 && v8 != v9 && v8 != v10 && WGSL::conversionRank(v10, v9) == -1)
  {
    v18 = *((_QWORD *)this + 14);
    v19 = *(unsigned __int8 **)(v18 + 72);
    v20 = *(unsigned __int8 **)(v6 + 8);
    if (v19 != v20)
    {
      v21 = *(unsigned __int8 **)(v18 + 24);
      if (v21 != v19 && v21 != v20 && WGSL::conversionRank(v20, v19) == -1)
      {
        if (*((_BYTE *)a2 + 32) == 1)
        {
          v22 = (int8x16_t *)"increment";
        }
        else
        {
          if (*((_BYTE *)a2 + 32))
          {
            v23 = 0;
            v22 = 0;
            goto LABEL_28;
          }
          v22 = (int8x16_t *)"decrement";
        }
        v23 = 10;
LABEL_28:
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral,WGSL::Type const&>((uint64_t)this, (WGSL::AST::DecrementIncrementStatement *)((char *)a2 + 8), v22, v23, (int8x16_t *)" can only be applied to integers, found ", 41, *(_QWORD *)(v6 + 8));
      }
    }
  }
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral,WGSL::Type const&>(uint64_t a1, _OWORD *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _WORD *v43;
  int8x16_t *v44;
  __int16 v45;
  uint16x8_t *v46;
  unint64_t v47;
  __int128 v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint16x8_t *v60;
  int8x16_t *v61;
  __int16 v62;
  uint64_t v63;
  int8x16_t *v64;
  _BYTE *v65;
  _BYTE *v66;
  int8x16_t *v67;
  size_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int8x16_t *v71;
  unsigned __int128 v72;
  size_t v73;
  unint64_t v74;
  int8x16_t *v75;
  int8x16_t *v76;
  int8x16_t *v77;
  __int8 v78;
  uint16x8_t *v79;
  uint16x8_t *v80;
  __int128 v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  char *v85;
  char *i8;
  char *v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint16x8_t *v93;
  int8x16_t *v94;
  __int16 v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int8x16_t *v111;
  int8x16_t *v112;
  unint64_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int16x8_t *v118;
  int8x8_t *v119;
  unint64_t v120;
  int16x8_t v121;
  uint64_t v122;
  unint64_t v123;
  uint8x8_t *v124;
  uint16x8_t *v125;
  unint64_t v126;
  uint8x16_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint8x8_t *v130;
  uint16x8_t *v131;
  unint64_t v132;
  uint8x8_t v133;
  uint8x8_t *v134;
  uint16x8_t *v135;
  unint64_t v136;
  uint8x16_t v137;
  uint16x8_t v138;
  uint16x8_t v139;
  uint8x8_t *v140;
  uint16x8_t *v141;
  unint64_t v142;
  uint8x8_t v143;
  uint8x8_t *v144;
  uint16x8_t *v145;
  unint64_t v146;
  uint8x16_t v147;
  uint16x8_t v148;
  uint16x8_t v149;
  uint8x8_t *v150;
  uint16x8_t *v151;
  unint64_t v152;
  uint8x8_t v153;
  _DWORD *v154;
  _QWORD v155[15];
  _QWORD *v156;
  _BYTE v157[48];
  unsigned int v158;
  _DWORD *v159;
  __int128 v160;
  uint64_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;
  int8x16x2_t v167;
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;

  v161 = *MEMORY[0x1E0C80C00];
  v157[0] = 0;
  v158 = -1;
  v13 = *(unsigned int *)(a7 + 48);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v13])(&v159, v157, a7);
    v158 = v13;
  }
  if (a4)
    v14 = a4 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E3A18);
  }
  if (a6)
    v15 = a6 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E3A38);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v159);
  v155[0] = &v159;
  v155[1] = &v159;
  v155[2] = &v159;
  v155[3] = &v159;
  v155[4] = &v159;
  v155[5] = &v159;
  v155[6] = &v159;
  v155[7] = &v159;
  v155[8] = &v159;
  v155[9] = &v159;
  v155[10] = &v159;
  v155[11] = &v159;
  v155[12] = &v159;
  v155[13] = &v159;
  v155[14] = &v159;
  if (v158 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v156 = v155;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v158])(&v156, v157);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v159);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v159);
  v16 = v155[0];
  if (v155[0])
  {
    v17 = *(_DWORD *)(v155[0] + 4);
    if (((v17 | v15) & 0x80000000) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
    if ((v15 & 0x80000000) != 0)
    {
LABEL_18:
      v20 = 0;
      goto LABEL_134;
    }
  }
  v18 = __OFADD__((_DWORD)v15, v17);
  v19 = v15 + v17;
  if (v18)
    goto LABEL_18;
  v21 = a4;
  v22 = a2;
  v23 = (v14 + v19);
  if (__OFADD__((_DWORD)v14, v19))
  {
    v20 = 0;
    a2 = v22;
    goto LABEL_134;
  }
  if (v155[0])
  {
    v24 = *(_DWORD *)(v155[0] + 16);
    *(_DWORD *)v155[0] += 2;
    if ((v24 & 4) == 0)
    {
      if (!(_DWORD)v23)
      {
        v20 = (_DWORD *)MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        a2 = v22;
        v25 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          goto LABEL_132;
        goto LABEL_40;
      }
      if (v23 > 0x7FFFFFEF)
      {
        v20 = 0;
        a2 = v22;
        v25 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          goto LABEL_132;
        goto LABEL_40;
      }
      WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20));
      v20 = v159;
      if (!v159)
      {
        a2 = v22;
        v25 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          goto LABEL_132;
        goto LABEL_40;
      }
      v28 = (unint64_t)(v159 + 5);
      *v159 = 2;
      v20[1] = v23;
      *((_QWORD *)v20 + 1) = v20 + 5;
      v20[4] = 0;
      *(_DWORD *)v16 += 2;
      v29 = (unint64_t)v20 + 2 * v14 + 20;
      if ((v14 & 0xFFFFFFC0) != 0)
      {
        v30 = v28 + 2 * (v14 & 0xFFFFFFC0);
        v31 = 0uLL;
        do
        {
          v162.val[0] = *a3;
          v32 = a3[1];
          v165.val[0] = a3[2];
          v33 = a3[3];
          a3 += 4;
          v34 = v33;
          v165.val[1] = 0uLL;
          v168.val[0] = v32;
          v162.val[1] = 0uLL;
          v35 = (char *)v28;
          vst2q_s8(v35, v162);
          v35 += 32;
          v168.val[1] = 0uLL;
          vst2q_s8(v35, v168);
          v36 = (char *)(v28 + 64);
          vst2q_s8(v36, v165);
          v37 = (char *)(v28 + 96);
          vst2q_s8(v37, *(int8x16x2_t *)(&v31 - 1));
          v28 += 128;
        }
        while (v28 != v30);
        v28 = v30;
      }
      a2 = v22;
      if (v28 != v29)
      {
        v38 = (unint64_t)v20 + 2 * v21 - v28;
        v39 = -2;
        if (v21)
          v40 = -2;
        else
          v40 = 0;
        v41 = v38 + v40 + 18;
        if (v41 < 0xE)
          goto LABEL_57;
        if (!v21)
          v39 = 0;
        v42 = v38 + v39 + 18;
        if (v28 < (unint64_t)a3->u64 + (v42 >> 1) + 1
          && (unint64_t)a3 < (v42 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
        {
LABEL_57:
          v43 = (_WORD *)v28;
          v44 = a3;
          goto LABEL_58;
        }
        v107 = (v41 >> 1) + 1;
        if (v41 >= 0x3E)
        {
          v108 = v107 & 0xFFFFFFFFFFFFFFE0;
          v124 = (uint8x8_t *)&a3[1];
          v125 = (uint16x8_t *)(v28 + 32);
          v126 = v107 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v127 = *(uint8x16_t *)v124[-2].i8;
            v128 = vmovl_u8(*v124);
            v129 = vmovl_high_u8(*(uint8x16_t *)v124->i8);
            v125[-2] = vmovl_u8(*(uint8x8_t *)v127.i8);
            v125[-1] = vmovl_high_u8(v127);
            *v125 = v128;
            v125[1] = v129;
            v125 += 4;
            v124 += 4;
            v126 -= 32;
          }
          while (v126);
          if (v107 == v108)
            goto LABEL_59;
          if ((v107 & 0x18) == 0)
          {
            v44 = (int8x16_t *)((char *)a3 + v108);
            v43 = (_WORD *)(v28 + 2 * v108);
            do
            {
LABEL_58:
              v45 = v44->u8[0];
              v44 = (int8x16_t *)((char *)v44 + 1);
              *v43++ = v45;
            }
            while (v43 != (_WORD *)v29);
            goto LABEL_59;
          }
        }
        else
        {
          v108 = 0;
        }
        v43 = (_WORD *)(v28 + 2 * (v107 & 0xFFFFFFFFFFFFFFF8));
        v44 = (int8x16_t *)((char *)a3 + (v107 & 0xFFFFFFFFFFFFFFF8));
        v130 = (uint8x8_t *)&a3->i8[v108];
        v131 = (uint16x8_t *)(v28 + 2 * v108);
        v132 = v108 - (v107 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v133 = *v130++;
          *v131++ = vmovl_u8(v133);
          v132 += 8;
        }
        while (v132);
        if (v107 != (v107 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_58;
      }
LABEL_59:
      *(_DWORD *)v16 += 2;
      v46 = (uint16x8_t *)(v29 + 2 * v15);
      if ((v15 & 0xFFFFFFC0) != 0)
      {
        v47 = v29 + 2 * (v15 & 0xFFFFFFC0);
        v48 = 0uLL;
        do
        {
          v163.val[0] = *a5;
          v49 = a5[1];
          v166.val[0] = a5[2];
          v50 = a5[3];
          a5 += 4;
          v51 = v50;
          v166.val[1] = 0uLL;
          v169.val[0] = v49;
          v163.val[1] = 0uLL;
          v52 = (char *)v29;
          vst2q_s8(v52, v163);
          v52 += 32;
          v169.val[1] = 0uLL;
          vst2q_s8(v52, v169);
          v53 = (char *)(v29 + 64);
          vst2q_s8(v53, v166);
          v54 = (char *)(v29 + 96);
          vst2q_s8(v54, *(int8x16x2_t *)(&v48 - 1));
          v29 += 128;
        }
        while (v29 != v47);
        v29 = v47;
      }
      if ((uint16x8_t *)v29 != v46)
      {
        v55 = (unint64_t)v20 + 2 * v15 + 2 * v21 - v29;
        v56 = -2;
        if (v21)
          v57 = -2;
        else
          v57 = 0;
        v58 = v55 + v57 + 18;
        if (v58 < 0xE)
          goto LABEL_72;
        if (!v21)
          v56 = 0;
        v59 = v55 + v56 + 18;
        if (v29 < (unint64_t)a5->u64 + (v59 >> 1) + 1
          && (unint64_t)a5 < (v59 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        {
LABEL_72:
          v60 = (uint16x8_t *)v29;
          v61 = a5;
          goto LABEL_73;
        }
        v109 = (v58 >> 1) + 1;
        if (v58 >= 0x3E)
        {
          v110 = v109 & 0xFFFFFFFFFFFFFFE0;
          v134 = (uint8x8_t *)&a5[1];
          v135 = (uint16x8_t *)(v29 + 32);
          v136 = v109 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v137 = *(uint8x16_t *)v134[-2].i8;
            v138 = vmovl_u8(*v134);
            v139 = vmovl_high_u8(*(uint8x16_t *)v134->i8);
            v135[-2] = vmovl_u8(*(uint8x8_t *)v137.i8);
            v135[-1] = vmovl_high_u8(v137);
            *v135 = v138;
            v135[1] = v139;
            v135 += 4;
            v134 += 4;
            v136 -= 32;
          }
          while (v136);
          if (v109 == v110)
            goto LABEL_74;
          if ((v109 & 0x18) == 0)
          {
            v61 = (int8x16_t *)((char *)a5 + v110);
            v60 = (uint16x8_t *)(v29 + 2 * v110);
            do
            {
LABEL_73:
              v62 = v61->u8[0];
              v61 = (int8x16_t *)((char *)v61 + 1);
              v60->i16[0] = v62;
              v60 = (uint16x8_t *)((char *)v60 + 2);
            }
            while (v60 != v46);
            goto LABEL_74;
          }
        }
        else
        {
          v110 = 0;
        }
        v60 = (uint16x8_t *)(v29 + 2 * (v109 & 0xFFFFFFFFFFFFFFF8));
        v61 = (int8x16_t *)((char *)a5 + (v109 & 0xFFFFFFFFFFFFFFF8));
        v140 = (uint8x8_t *)&a5->i8[v110];
        v141 = (uint16x8_t *)(v29 + 2 * v110);
        v142 = v110 - (v109 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v143 = *v140++;
          *v141++ = vmovl_u8(v143);
          v142 += 8;
        }
        while (v142);
        if (v109 != (v109 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_73;
      }
LABEL_74:
      v63 = *(unsigned int *)(v16 + 4);
      *(_DWORD *)v16 += 2;
      v64 = *(int8x16_t **)(v16 + 8);
      if ((*(_BYTE *)(v16 + 16) & 4) == 0)
      {
        if ((_DWORD)v63)
        {
          if ((_DWORD)v63 == 1)
            v46->i16[0] = v64->i16[0];
          else
            memcpy(v46, v64, 2 * v63);
        }
        goto LABEL_157;
      }
      v79 = (uint16x8_t *)((char *)v46 + 2 * v63);
      if (v63 >= 0x40)
      {
        v80 = (uint16x8_t *)((char *)v46 + 2 * (v63 & 0xFFFFFFC0));
        v81 = 0uLL;
        do
        {
          v164.val[0] = *v64;
          v82 = v64[1];
          v167.val[0] = v64[2];
          v83 = v64[3];
          v64 += 4;
          v84 = v83;
          v167.val[1] = 0uLL;
          v170.val[0] = v82;
          v164.val[1] = 0uLL;
          v85 = (char *)v46;
          vst2q_s8(v85, v164);
          v85 += 32;
          v170.val[1] = 0uLL;
          vst2q_s8(v85, v170);
          i8 = v46[4].i8;
          vst2q_s8(i8, v167);
          v87 = v46[6].i8;
          vst2q_s8(v87, *(int8x16x2_t *)(&v81 - 1));
          v46 += 8;
        }
        while (v46 != v80);
        v46 = v80;
      }
      if (v46 == v79)
        goto LABEL_157;
      v88 = (char *)v20 + 2 * v63 + 2 * v21 + 2 * v15 - (char *)v46;
      v89 = -2;
      if (v21)
        v90 = -2;
      else
        v90 = 0;
      v91 = v88 + v90 + 18;
      if (v91 < 0xE)
        goto LABEL_121;
      if (!v21)
        v89 = 0;
      v92 = v88 + v89 + 18;
      if (v46 < (uint16x8_t *)&v64->i8[(v92 >> 1) + 1]
        && v64 < (int8x16_t *)((char *)&v46->i16[1] + (v92 & 0xFFFFFFFFFFFFFFFELL)))
      {
LABEL_121:
        v93 = v46;
        v94 = v64;
        goto LABEL_122;
      }
      v122 = (v91 >> 1) + 1;
      if (v91 >= 0x3E)
      {
        v123 = v122 & 0xFFFFFFFFFFFFFFE0;
        v144 = (uint8x8_t *)&v64[1];
        v145 = v46 + 2;
        v146 = v122 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v147 = *(uint8x16_t *)v144[-2].i8;
          v148 = vmovl_u8(*v144);
          v149 = vmovl_high_u8(*(uint8x16_t *)v144->i8);
          v145[-2] = vmovl_u8(*(uint8x8_t *)v147.i8);
          v145[-1] = vmovl_high_u8(v147);
          *v145 = v148;
          v145[1] = v149;
          v145 += 4;
          v144 += 4;
          v146 -= 32;
        }
        while (v146);
        if (v122 == v123)
          goto LABEL_157;
        if ((v122 & 0x18) == 0)
        {
          v94 = (int8x16_t *)((char *)v64 + v123);
          v93 = (uint16x8_t *)((char *)v46 + 2 * v123);
          do
          {
LABEL_122:
            v95 = v94->u8[0];
            v94 = (int8x16_t *)((char *)v94 + 1);
            v93->i16[0] = v95;
            v93 = (uint16x8_t *)((char *)v93 + 2);
          }
          while (v93 != v79);
LABEL_157:
          v96 = *(_DWORD *)v16 - 2;
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::destroy();
            v96 = *(_DWORD *)v16;
          }
          else
          {
            *(_DWORD *)v16 = v96;
          }
          goto LABEL_129;
        }
      }
      else
      {
        v123 = 0;
      }
      v93 = (uint16x8_t *)((char *)v46 + 2 * (v122 & 0xFFFFFFFFFFFFFFF8));
      v94 = (int8x16_t *)((char *)v64 + (v122 & 0xFFFFFFFFFFFFFFF8));
      v150 = (uint8x8_t *)&v64->i8[v123];
      v151 = (uint16x8_t *)((char *)v46 + 2 * v123);
      v152 = v123 - (v122 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v153 = *v150++;
        *v151++ = vmovl_u8(v153);
        v152 += 8;
      }
      while (v152);
      if (v122 == (v122 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_157;
      goto LABEL_122;
    }
  }
  if ((_DWORD)v23)
  {
    if ((v23 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
      v26 = v159;
      if (v159)
      {
        v27 = v159 + 5;
        *v159 = 2;
        v26[1] = v23;
        *((_QWORD *)v26 + 1) = v26 + 5;
        v154 = v26;
        v26[4] = 4;
        if (v16)
          *(_DWORD *)v16 += 2;
        a2 = v22;
        if ((_DWORD)v14)
        {
          if ((_DWORD)v14 == 1)
          {
            *v27 = a3->i8[0];
          }
          else
          {
            v65 = v26 + 5;
            memcpy(v26 + 5, a3, v14);
            v27 = v65;
          }
        }
        if (v16)
          *(_DWORD *)v16 += 2;
        v66 = &v27[v14];
        if ((_DWORD)v15)
        {
          if ((_DWORD)v15 == 1)
            *v66 = a5->i8[0];
          else
            memcpy(&v27[v14], a5, v15);
        }
        if (!v16)
        {
          v20 = v154;
          goto LABEL_133;
        }
        v67 = (int8x16_t *)&v66[v15];
        v68 = *(unsigned int *)(v16 + 4);
        *(_DWORD *)v16 += 2;
        v69 = *(int8x16_t **)(v16 + 8);
        if ((*(_BYTE *)(v16 + 16) & 4) != 0)
        {
          if ((_DWORD)v68)
          {
            if ((_DWORD)v68 == 1)
              v67->i8[0] = v69->i8[0];
            else
              memcpy(v67, v69, v68);
          }
          goto LABEL_125;
        }
        v70 = (int8x16_t *)((char *)v67 + v68);
        if (v68 >= 0x10)
        {
          v71 = (int8x16_t *)((char *)v67 + (v68 & 0xFFFFFFF0));
          do
          {
            v72 = (unsigned __int128)vld2q_s8(v69->i8);
            v69 += 2;
            *v67++ = (int8x16_t)v72;
          }
          while (v67 != v71);
          v67 = v71;
        }
        if (v67 != v70)
        {
          v73 = (size_t)v154 + v68 + a6 + v21;
          v74 = v73 - (_QWORD)v67 - (a6 != 0) - (v21 != 0) + 20;
          if (v74 < 8)
            goto LABEL_100;
          if (v21)
            v75 = (int8x16_t *)&v67->i8[1];
          else
            v75 = v67;
          if (a6)
            v75 = (int8x16_t *)((char *)v75 + 1);
          if (v67 < (int8x16_t *)((char *)&v69[2].u64[1] + 2 * v73 + -2 * (_QWORD)v75)
            && v69 < (int8x16_t *)((char *)v67[1].i64 + v73 - (_QWORD)v75 + 4))
          {
LABEL_100:
            v76 = v67;
            v77 = v69;
            goto LABEL_101;
          }
          if (v74 >= 0x20)
          {
            v106 = v74 & 0xFFFFFFFFFFFFFFE0;
            v111 = v69 + 2;
            v112 = v67 + 1;
            v113 = v74 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v115 = v111[-2];
              v114 = v111[-1];
              v117 = *v111;
              v116 = v111[1];
              v111 += 4;
              v112[-1] = vuzp1q_s8(v115, v114);
              *v112 = vuzp1q_s8(v117, v116);
              v112 += 2;
              v113 -= 32;
            }
            while (v113);
            if (v74 == v106)
              goto LABEL_125;
            if ((v74 & 0x18) == 0)
            {
              v77 = (int8x16_t *)((char *)v69 + 2 * v106);
              v76 = (int8x16_t *)((char *)v67 + v106);
              do
              {
LABEL_101:
                v78 = v77->i8[0];
                v77 = (int8x16_t *)((char *)v77 + 2);
                v76->i8[0] = v78;
                v76 = (int8x16_t *)((char *)v76 + 1);
              }
              while (v76 != v70);
              goto LABEL_125;
            }
          }
          else
          {
            v106 = 0;
          }
          v76 = (int8x16_t *)((char *)v67 + (v74 & 0xFFFFFFFFFFFFFFF8));
          v77 = (int8x16_t *)((char *)v69 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
          v118 = (int16x8_t *)((char *)v69 + 2 * v106);
          v119 = (int8x8_t *)&v67->i8[v106];
          v120 = v106 - (v74 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v121 = *v118++;
            *v119++ = vmovn_s16(v121);
            v120 += 8;
          }
          while (v120);
          if (v74 != (v74 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_101;
        }
LABEL_125:
        v96 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy();
          v96 = *(_DWORD *)v16;
        }
        else
        {
          *(_DWORD *)v16 = v96;
        }
        v20 = v154;
LABEL_129:
        v97 = v96 - 2;
        if (v97)
        {
          *(_DWORD *)v16 = v97;
          v98 = v97 - 2;
          if (v98)
            goto LABEL_131;
        }
        else
        {
          WTF::StringImpl::destroy();
          v98 = *(_DWORD *)v16 - 2;
          if (*(_DWORD *)v16 != 2)
          {
LABEL_131:
            *(_DWORD *)v16 = v98;
            v25 = v98 - 2;
            if (!v25)
              goto LABEL_132;
            goto LABEL_40;
          }
        }
        WTF::StringImpl::destroy();
        v25 = *(_DWORD *)v16 - 2;
        if (*(_DWORD *)v16 == 2)
          goto LABEL_132;
        goto LABEL_40;
      }
    }
    v20 = 0;
  }
  else
  {
    v20 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
  }
  a2 = v22;
  if (v16)
  {
    v25 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
    {
LABEL_132:
      WTF::StringImpl::destroy();
      goto LABEL_133;
    }
LABEL_40:
    *(_DWORD *)v16 = v25;
  }
LABEL_133:
  v16 = v155[0];
LABEL_134:
  v155[0] = 0;
  if (!v16)
    goto LABEL_137;
  if (*(_DWORD *)v16 != 2)
  {
    *(_DWORD *)v16 -= 2;
LABEL_137:
    if (v20)
      goto LABEL_138;
LABEL_148:
    __break(0xC471u);
    JUMPOUT(0x1825E373CLL);
  }
  WTF::StringImpl::destroy();
  if (!v20)
    goto LABEL_148;
LABEL_138:
  v159 = v20;
  v160 = *a2;
  v99 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v99 != *(_DWORD *)(a1 + 128))
  {
    v105 = *(_QWORD *)(a1 + 120) + 24 * v99;
    *(_QWORD *)v105 = v20;
    *(_OWORD *)(v105 + 8) = v160;
    ++*(_DWORD *)(a1 + 132);
    v159 = 0;
LABEL_144:
    v104 = v158;
    if (v158 == -1)
      return;
    goto LABEL_145;
  }
  v100 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v99 + 1, (unint64_t)&v159);
  v101 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v102 = *(_QWORD *)v100;
  *(_QWORD *)v100 = 0;
  *(_QWORD *)v101 = v102;
  *(_OWORD *)(v101 + 8) = *(_OWORD *)(v100 + 8);
  v103 = v159;
  ++*(_DWORD *)(a1 + 132);
  v159 = 0;
  if (!v103)
    goto LABEL_144;
  if (*v103 != 2)
  {
    *v103 -= 2;
    v104 = v158;
    if (v158 == -1)
      return;
    goto LABEL_145;
  }
  WTF::StringImpl::destroy();
  v104 = v158;
  if (v158 != -1)
LABEL_145:
    ((void (*)(_QWORD *, _BYTE *))off_1E0FD7DF0[v104])(v155, v157);
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IfStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  _OWORD *v11;
  uint64_t result;
  __int128 v13;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v7 = *((_QWORD *)this + 14);
  v8 = *(unsigned __int8 **)(v7 + 56);
  if (v6 != v8)
  {
    v9 = *(unsigned __int8 **)(v7 + 24);
    v10 = v9 == v6 || v9 == v8;
    if (!v10 && WGSL::conversionRank(v8, v6) == -1)
    {
      v11 = (_OWORD *)(*((_QWORD *)a2 + 3) + 8);
      *(_QWORD *)&v13 = "'";
      *((_QWORD *)&v13 + 1) = 2;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, v11, (int8x16_t *)"expected 'BOOL', found '", 25, (uint64_t)v6, &v13);
    }
  }
  result = (*(uint64_t (**)(WGSL::TypeChecker *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 4));
  if (*((_QWORD *)a2 + 5))
    return (*(uint64_t (**)(WGSL::TypeChecker *))(*(_QWORD *)this + 360))(this);
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::PhonyAssignmentStatement *a2)
{
  uint64_t v3;
  __int16 v4;
  uint64_t result;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  result = WGSL::AST::Visitor::visit(this, v3);
  *(_QWORD *)(v3 + 24) = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  return result;
}

_DWORD *WGSL::TypeChecker::visit(_DWORD *this, WGSL::AST::ReturnStatement *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    this = (_DWORD *)WGSL::AST::Visitor::visit(this, v4);
    v6 = *(unsigned __int8 **)(v3 + 88);
    *(_QWORD *)(v4 + 24) = v6;
    *(_QWORD *)(v3 + 88) = 0;
    *(_WORD *)(v3 + 104) = v5;
    v7 = *(unsigned __int8 **)(v3 + 96);
    if (v7 == v6)
      goto LABEL_10;
  }
  else
  {
    v6 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 48);
    v7 = (unsigned __int8 *)*((_QWORD *)this + 12);
    if (v7 == v6)
      goto LABEL_10;
  }
  v8 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 112) + 24);
  if (v8 != v7 && v8 != v6)
  {
    this = (_DWORD *)WGSL::conversionRank(v6, v7);
    if ((_DWORD)this == -1)
    {
      *(_QWORD *)&v13 = "', expected '";
      *((_QWORD *)&v13 + 1) = 14;
      v11 = *(_QWORD *)(v3 + 96);
      v12 = 39;
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(v3, 0, (WGSL::AST::ReturnStatement *)((char *)a2 + 8), (int8x16_t *)"return statement type does not match its function return type, returned '", 74, (uint64_t)v6, &v13, v11, &v12);
    }
  }
LABEL_10:
  if (v4)
  {
    v10 = *(_QWORD *)(v3 + 96);
    *(_QWORD *)(v4 + 24) = v10;
    if (*(_BYTE *)(v4 + 56))
      return (_DWORD *)WGSL::TypeChecker::convertValue(v3, (__int128 *)(v4 + 8), v10, v4 + 32);
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ForStatement *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  _QWORD *v27;

  v4 = *((_QWORD *)this + 5);
  v5 = (_QWORD *)((char *)this + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v27 = v6;
  v7 = *((unsigned int *)this + 15);
  if ((_DWORD)v7 == *((_DWORD *)this + 14))
  {
    v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v7 + 1, (unint64_t)&v27);
    v10 = *((unsigned int *)this + 15);
    v11 = *((_QWORD *)this + 6);
    v12 = *v8;
    *v8 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = (uint64_t)v27;
    v14 = v10 + 1;
    *((_DWORD *)this + 15) = v14;
    v27 = 0;
    if (v13)
    {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v13, v9);
      v14 = *((_DWORD *)this + 15);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v7) = v6;
    v14 = v7 + 1;
    *((_DWORD *)this + 15) = v14;
  }
  if (!v14)
    goto LABEL_20;
  *((_QWORD *)this + 5) = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v14 - 8);
  v15 = *((_QWORD *)a2 + 3);
  if (v15)
    WGSL::AST::Visitor::visit(this, v15);
  v16 = *((_QWORD *)a2 + 4);
  if (v16)
  {
    v17 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    WGSL::AST::Visitor::visit(this, v16);
    v18 = (unsigned __int8 *)*((_QWORD *)this + 11);
    *(_QWORD *)(v16 + 24) = v18;
    *((_QWORD *)this + 11) = 0;
    *((_WORD *)this + 52) = v17;
    v19 = *((_QWORD *)this + 14);
    v20 = *(unsigned __int8 **)(v19 + 56);
    if (v20 != v18)
    {
      v21 = *(unsigned __int8 **)(v19 + 24);
      if (v21 != v20 && v21 != v18 && WGSL::conversionRank(v18, v20) == -1)
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>((uint64_t)this, (__int128 *)(v16 + 8), (int8x16_t *)"for-loop condition must be BOOL, got ", 38, (uint64_t)v18);
    }
  }
  v22 = *((_QWORD *)a2 + 5);
  if (v22)
    WGSL::AST::Visitor::visit(this, v22);
  (*(void (**)(WGSL::TypeChecker *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 6));
  *((_QWORD *)this + 5) = v4;
  v24 = *((unsigned int *)this + 15);
  if (!(_DWORD)v24)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1825E3EC0);
  }
  v25 = v24 - 1;
  result = *(_QWORD *)(*v5 + 8 * (v24 - 1));
  *(_QWORD *)(*v5 + 8 * (v24 - 1)) = 0;
  if (result)
    result = std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](result, v23);
  *((_DWORD *)this + 15) = v25;
  return result;
}

void WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  _BYTE *v17;
  unint64_t v18;
  uint16x8_t *v19;
  unint64_t v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint16x8_t *v33;
  int8x16_t *v34;
  __int16 v35;
  uint64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  size_t v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  unsigned __int128 v43;
  size_t v44;
  unint64_t v45;
  int8x16_t *v46;
  BOOL v47;
  unint64_t v48;
  int8x16_t *v49;
  int8x16_t *v50;
  __int8 v51;
  uint16x8_t *v52;
  uint16x8_t *v53;
  __int128 v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  char *v58;
  char *i8;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint16x8_t *v66;
  int8x16_t *v67;
  __int16 v68;
  uint64_t v69;
  unint64_t v70;
  int8x16_t *v71;
  int8x16_t *v72;
  unint64_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int16x8_t *v78;
  int8x8_t *v79;
  unint64_t v80;
  int16x8_t v81;
  uint64_t v82;
  unint64_t v83;
  uint8x8_t *v84;
  uint16x8_t *v85;
  unint64_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x8_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x16_t v97;
  uint16x8_t v98;
  uint16x8_t v99;
  uint8x8_t *v100;
  uint16x8_t *v101;
  unint64_t v102;
  uint8x8_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[15];
  _QWORD *v114;
  _BYTE v115[48];
  unsigned int v116;
  _DWORD *v117;
  __int128 v118;
  uint64_t v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;

  v119 = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v116 = -1;
  v9 = *(unsigned int *)(a5 + 48);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v9])(&v117, v115, a5);
    v116 = v9;
  }
  if (a4)
    v10 = a4 - 1;
  else
    v10 = 0;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E4778);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v117);
  v113[0] = &v117;
  v113[1] = &v117;
  v113[2] = &v117;
  v113[3] = &v117;
  v113[4] = &v117;
  v113[5] = &v117;
  v113[6] = &v117;
  v113[7] = &v117;
  v113[8] = &v117;
  v113[9] = &v117;
  v113[10] = &v117;
  v113[11] = &v117;
  v113[12] = &v117;
  v113[13] = &v117;
  v113[14] = &v117;
  if (v116 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v114 = v113;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v116])(&v114, v115);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v117);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v117);
  v11 = v113[0];
  if (v113[0])
  {
    v12 = *(_DWORD *)(v113[0] + 4);
    if (((v12 | v10) & 0x80000000) != 0)
      goto LABEL_14;
  }
  else
  {
    v12 = 0;
    if ((v10 & 0x80000000) != 0)
    {
LABEL_14:
      v14 = 0;
      goto LABEL_132;
    }
  }
  v13 = (v10 + v12);
  if (__OFADD__((_DWORD)v10, v12))
    goto LABEL_14;
  if (!v113[0] || (v15 = *(_DWORD *)(v113[0] + 16), *(_DWORD *)v113[0] += 2, (v15 & 4) != 0))
  {
    if ((_DWORD)v13)
    {
      if ((v13 & 0x80000000) != 0)
      {
        v14 = 0;
        if (!v11)
          goto LABEL_131;
        goto LABEL_129;
      }
      WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
      v14 = v117;
      if (v117)
      {
        v17 = v117 + 5;
        *v117 = 2;
        v14[1] = v13;
        *((_QWORD *)v14 + 1) = v14 + 5;
        v14[4] = 4;
        if (v11)
          *(_DWORD *)v11 += 2;
        if ((_DWORD)v10)
        {
          if ((_DWORD)v10 == 1)
            *v17 = a3->i8[0];
          else
            memcpy(v14 + 5, a3, v10);
        }
        if (!v11)
          goto LABEL_131;
        v38 = (int8x16_t *)&v17[v10];
        v39 = *(unsigned int *)(v11 + 4);
        *(_DWORD *)v11 += 2;
        v40 = *(int8x16_t **)(v11 + 8);
        if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        {
          if ((_DWORD)v39)
          {
            if ((_DWORD)v39 == 1)
              v38->i8[0] = v40->i8[0];
            else
              memcpy(v38, v40, v39);
          }
          goto LABEL_126;
        }
        v41 = (int8x16_t *)((char *)v38 + v39);
        if (v39 >= 0x10)
        {
          v42 = (int8x16_t *)((char *)v38 + (v39 & 0xFFFFFFF0));
          do
          {
            v43 = (unsigned __int128)vld2q_s8(v40->i8);
            v40 += 2;
            *v38++ = (int8x16_t)v43;
          }
          while (v38 != v42);
          v38 = v42;
        }
        if (v38 == v41)
          goto LABEL_126;
        v44 = (size_t)v14 + a4 + v39;
        v45 = v44 - (_QWORD)v38 - (a4 != 0) + 20;
        if (v45 < 8
          || (!a4 ? (v46 = v38) : (v46 = (int8x16_t *)&v38->i8[1]),
              v38 < (int8x16_t *)((char *)&v40[2].u64[1] + 2 * v44 + -2 * (_QWORD)v46)
            ? (v47 = (unint64_t)v40 >= v44 - (a4 != 0) + 20)
            : (v47 = 1),
              !v47))
        {
          v49 = v38;
          v50 = v40;
          goto LABEL_79;
        }
        if (v45 >= 0x20)
        {
          v48 = v45 & 0xFFFFFFFFFFFFFFE0;
          v71 = v40 + 2;
          v72 = v38 + 1;
          v73 = v45 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v75 = v71[-2];
            v74 = v71[-1];
            v77 = *v71;
            v76 = v71[1];
            v71 += 4;
            v72[-1] = vuzp1q_s8(v75, v74);
            *v72 = vuzp1q_s8(v77, v76);
            v72 += 2;
            v73 -= 32;
          }
          while (v73);
          if (v45 == v48)
            goto LABEL_126;
          if ((v45 & 0x18) == 0)
          {
            v50 = (int8x16_t *)((char *)v40 + 2 * v48);
            v49 = (int8x16_t *)((char *)v38 + v48);
            goto LABEL_79;
          }
        }
        else
        {
          v48 = 0;
        }
        v49 = (int8x16_t *)((char *)v38 + (v45 & 0xFFFFFFFFFFFFFFF8));
        v50 = (int8x16_t *)((char *)v40 + 2 * (v45 & 0xFFFFFFFFFFFFFFF8));
        v78 = (int16x8_t *)((char *)v40 + 2 * v48);
        v79 = (int8x8_t *)&v38->i8[v48];
        v80 = v48 - (v45 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v81 = *v78++;
          *v79++ = vmovn_s16(v81);
          v80 += 8;
        }
        while (v80);
        if (v45 == (v45 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_126;
        do
        {
LABEL_79:
          v51 = v50->i8[0];
          v50 = (int8x16_t *)((char *)v50 + 2);
          v49->i8[0] = v51;
          v49 = (int8x16_t *)((char *)v49 + 1);
        }
        while (v49 != v41);
        goto LABEL_126;
      }
    }
    else
    {
      v14 = (_DWORD *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    if (!v11)
      goto LABEL_131;
LABEL_129:
    v16 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 != 2)
      goto LABEL_130;
    goto LABEL_35;
  }
  if ((_DWORD)v13)
  {
    if (v13 > 0x7FFFFFEF)
    {
      v14 = 0;
      v16 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
        goto LABEL_35;
LABEL_130:
      *(_DWORD *)v11 = v16;
      goto LABEL_131;
    }
    WTF::tryFastCompactMalloc((WTF *)(2 * v13 + 20));
    v14 = v117;
    if (!v117)
      goto LABEL_129;
    v18 = (unint64_t)(v117 + 5);
    *v117 = 2;
    v14[1] = v13;
    *((_QWORD *)v14 + 1) = v14 + 5;
    v14[4] = 0;
    *(_DWORD *)v11 += 2;
    v19 = (uint16x8_t *)((char *)v14 + 2 * v10 + 20);
    if ((v10 & 0xFFFFFFC0) != 0)
    {
      v20 = v18 + 2 * (v10 & 0xFFFFFFC0);
      v21 = 0uLL;
      do
      {
        v120.val[0] = *a3;
        v22 = a3[1];
        v122.val[0] = a3[2];
        v23 = a3[3];
        a3 += 4;
        v24 = v23;
        v122.val[1] = 0uLL;
        v124.val[0] = v22;
        v120.val[1] = 0uLL;
        v25 = (char *)v18;
        vst2q_s8(v25, v120);
        v25 += 32;
        v124.val[1] = 0uLL;
        vst2q_s8(v25, v124);
        v26 = (char *)(v18 + 64);
        vst2q_s8(v26, v122);
        v27 = (char *)(v18 + 96);
        vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
        v18 += 128;
      }
      while (v18 != v20);
      v18 = v20;
    }
    if ((uint16x8_t *)v18 != v19)
    {
      v28 = (unint64_t)v14 + 2 * a4 - v18;
      v29 = -2;
      if (a4)
        v30 = -2;
      else
        v30 = 0;
      v31 = v28 + v30 + 18;
      if (v31 < 0xE)
        goto LABEL_50;
      if (!a4)
        v29 = 0;
      v32 = v28 + v29 + 18;
      if (v18 < (unint64_t)a3->u64 + (v32 >> 1) + 1
        && (unint64_t)a3 < (v32 & 0xFFFFFFFFFFFFFFFELL) + v18 + 2)
      {
LABEL_50:
        v33 = (uint16x8_t *)v18;
        v34 = a3;
        goto LABEL_51;
      }
      v69 = (v31 >> 1) + 1;
      if (v31 >= 0x3E)
      {
        v70 = v69 & 0xFFFFFFFFFFFFFFE0;
        v84 = (uint8x8_t *)&a3[1];
        v85 = (uint16x8_t *)(v18 + 32);
        v86 = v69 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v87 = *(uint8x16_t *)v84[-2].i8;
          v88 = vmovl_u8(*v84);
          v89 = vmovl_high_u8(*(uint8x16_t *)v84->i8);
          v85[-2] = vmovl_u8(*(uint8x8_t *)v87.i8);
          v85[-1] = vmovl_high_u8(v87);
          *v85 = v88;
          v85[1] = v89;
          v85 += 4;
          v84 += 4;
          v86 -= 32;
        }
        while (v86);
        if (v69 == v70)
          goto LABEL_52;
        if ((v69 & 0x18) == 0)
        {
          v34 = (int8x16_t *)((char *)a3 + v70);
          v33 = (uint16x8_t *)(v18 + 2 * v70);
          do
          {
LABEL_51:
            v35 = v34->u8[0];
            v34 = (int8x16_t *)((char *)v34 + 1);
            v33->i16[0] = v35;
            v33 = (uint16x8_t *)((char *)v33 + 2);
          }
          while (v33 != v19);
          goto LABEL_52;
        }
      }
      else
      {
        v70 = 0;
      }
      v33 = (uint16x8_t *)(v18 + 2 * (v69 & 0xFFFFFFFFFFFFFFF8));
      v34 = (int8x16_t *)((char *)a3 + (v69 & 0xFFFFFFFFFFFFFFF8));
      v90 = (uint8x8_t *)&a3->i8[v70];
      v91 = (uint16x8_t *)(v18 + 2 * v70);
      v92 = v70 - (v69 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v93 = *v90++;
        *v91++ = vmovl_u8(v93);
        v92 += 8;
      }
      while (v92);
      if (v69 != (v69 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_51;
    }
LABEL_52:
    v36 = *(unsigned int *)(v11 + 4);
    *(_DWORD *)v11 += 2;
    v37 = *(int8x16_t **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) == 0)
    {
      if ((_DWORD)v36)
      {
        if ((_DWORD)v36 == 1)
          v19->i16[0] = v37->i16[0];
        else
          memcpy(v19, v37, 2 * v36);
      }
      goto LABEL_126;
    }
    v52 = (uint16x8_t *)((char *)v19 + 2 * v36);
    if (v36 >= 0x40)
    {
      v53 = (uint16x8_t *)((char *)v19 + 2 * (v36 & 0xFFFFFFC0));
      v54 = 0uLL;
      do
      {
        v121.val[0] = *v37;
        v55 = v37[1];
        v123.val[0] = v37[2];
        v56 = v37[3];
        v37 += 4;
        v57 = v56;
        v123.val[1] = 0uLL;
        v125.val[0] = v55;
        v121.val[1] = 0uLL;
        v58 = (char *)v19;
        vst2q_s8(v58, v121);
        v58 += 32;
        v125.val[1] = 0uLL;
        vst2q_s8(v58, v125);
        i8 = v19[4].i8;
        vst2q_s8(i8, v123);
        v60 = v19[6].i8;
        vst2q_s8(v60, *(int8x16x2_t *)(&v54 - 1));
        v19 += 8;
      }
      while (v19 != v53);
      v19 = v53;
    }
    if (v19 != v52)
    {
      v61 = (char *)v14 + 2 * v36 + 2 * a4 - (char *)v19;
      v62 = -2;
      if (a4)
        v63 = -2;
      else
        v63 = 0;
      v64 = v61 + v63 + 18;
      if (v64 < 0xE)
        goto LABEL_94;
      if (!a4)
        v62 = 0;
      v65 = v61 + v62 + 18;
      if (v19 < (uint16x8_t *)&v37->i8[(v65 >> 1) + 1]
        && v37 < (int8x16_t *)((char *)&v19->i16[1] + (v65 & 0xFFFFFFFFFFFFFFFELL)))
      {
LABEL_94:
        v66 = v19;
        v67 = v37;
        goto LABEL_95;
      }
      v82 = (v64 >> 1) + 1;
      if (v64 >= 0x3E)
      {
        v83 = v82 & 0xFFFFFFFFFFFFFFE0;
        v94 = (uint8x8_t *)&v37[1];
        v95 = v19 + 2;
        v96 = v82 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v97 = *(uint8x16_t *)v94[-2].i8;
          v98 = vmovl_u8(*v94);
          v99 = vmovl_high_u8(*(uint8x16_t *)v94->i8);
          v95[-2] = vmovl_u8(*(uint8x8_t *)v97.i8);
          v95[-1] = vmovl_high_u8(v97);
          *v95 = v98;
          v95[1] = v99;
          v95 += 4;
          v94 += 4;
          v96 -= 32;
        }
        while (v96);
        if (v82 == v83)
          goto LABEL_126;
        if ((v82 & 0x18) == 0)
        {
          v67 = (int8x16_t *)((char *)v37 + v83);
          v66 = (uint16x8_t *)((char *)v19 + 2 * v83);
          goto LABEL_95;
        }
      }
      else
      {
        v83 = 0;
      }
      v66 = (uint16x8_t *)((char *)v19 + 2 * (v82 & 0xFFFFFFFFFFFFFFF8));
      v67 = (int8x16_t *)((char *)v37 + (v82 & 0xFFFFFFFFFFFFFFF8));
      v100 = (uint8x8_t *)&v37->i8[v83];
      v101 = (uint16x8_t *)((char *)v19 + 2 * v83);
      v102 = v83 - (v82 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v103 = *v100++;
        *v101++ = vmovl_u8(v103);
        v102 += 8;
      }
      while (v102);
      if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_126;
      do
      {
LABEL_95:
        v68 = v67->u8[0];
        v67 = (int8x16_t *)((char *)v67 + 1);
        v66->i16[0] = v68;
        v66 = (uint16x8_t *)((char *)v66 + 2);
      }
      while (v66 != v52);
    }
LABEL_126:
    v104 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy();
      v105 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 != 2)
        goto LABEL_128;
    }
    else
    {
      *(_DWORD *)v11 = v104;
      v105 = v104 - 2;
      if (v105)
      {
LABEL_128:
        *(_DWORD *)v11 = v105;
        goto LABEL_129;
      }
    }
    WTF::StringImpl::destroy();
    v16 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
      goto LABEL_35;
    goto LABEL_130;
  }
  v14 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v16 = *(_DWORD *)v11 - 2;
  if (*(_DWORD *)v11 != 2)
    goto LABEL_130;
LABEL_35:
  WTF::StringImpl::destroy();
LABEL_131:
  v11 = v113[0];
LABEL_132:
  v113[0] = 0;
  if (!v11)
    goto LABEL_135;
  if (*(_DWORD *)v11 != 2)
  {
    *(_DWORD *)v11 -= 2;
LABEL_135:
    if (v14)
      goto LABEL_136;
LABEL_146:
    __break(0xC471u);
    JUMPOUT(0x1825E470CLL);
  }
  WTF::StringImpl::destroy();
  if (!v14)
    goto LABEL_146;
LABEL_136:
  v117 = v14;
  v118 = *a2;
  v106 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v106 != *(_DWORD *)(a1 + 128))
  {
    v112 = *(_QWORD *)(a1 + 120) + 24 * v106;
    *(_QWORD *)v112 = v14;
    *(_OWORD *)(v112 + 8) = v118;
    ++*(_DWORD *)(a1 + 132);
    v117 = 0;
LABEL_142:
    v111 = v116;
    if (v116 == -1)
      return;
    goto LABEL_143;
  }
  v107 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v106 + 1, (unint64_t)&v117);
  v108 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v109 = *(_QWORD *)v107;
  *(_QWORD *)v107 = 0;
  *(_QWORD *)v108 = v109;
  *(_OWORD *)(v108 + 8) = *(_OWORD *)(v107 + 8);
  v110 = v117;
  ++*(_DWORD *)(a1 + 132);
  v117 = 0;
  if (!v110)
    goto LABEL_142;
  if (*v110 != 2)
  {
    *v110 -= 2;
    v111 = v116;
    if (v116 == -1)
      return;
    goto LABEL_143;
  }
  WTF::StringImpl::destroy();
  v111 = v116;
  if (v116 != -1)
LABEL_143:
    ((void (*)(_QWORD *, _BYTE *))off_1E0FD7DF0[v111])(v113, v115);
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::LoopStatement *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  _QWORD *v26;

  v4 = *((_QWORD *)this + 5);
  v5 = (_QWORD *)((char *)this + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v26 = v6;
  v8 = *((unsigned int *)this + 15);
  if ((_DWORD)v8 == *((_DWORD *)this + 14))
  {
    v9 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v8 + 1, (unint64_t)&v26);
    v10 = *((unsigned int *)this + 15);
    v11 = *((_QWORD *)this + 6);
    v12 = *v9;
    *v9 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = (uint64_t)v26;
    v14 = v10 + 1;
    *((_DWORD *)this + 15) = v14;
    v26 = 0;
    if (v13)
    {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v13, v7);
      v14 = *((_DWORD *)this + 15);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v8) = v6;
    v14 = v8 + 1;
    *((_DWORD *)this + 15) = v14;
  }
  if (!v14)
    goto LABEL_18;
  *((_QWORD *)this + 5) = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v14 - 8);
  v15 = *((unsigned int *)a2 + 9);
  if ((_DWORD)v15)
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 3);
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      WGSL::AST::Visitor::visit(this, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v19 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v19)
  {
    v20 = (uint64_t *)*((_QWORD *)a2 + 5);
    v21 = 8 * v19;
    do
    {
      v22 = *v20++;
      WGSL::AST::Visitor::visit(this, v22);
      v21 -= 8;
    }
    while (v21);
  }
  if (*((_BYTE *)a2 + 96))
    (*(void (**)(WGSL::TypeChecker *, char *))(*(_QWORD *)this + 560))(this, (char *)a2 + 56);
  *((_QWORD *)this + 5) = v4;
  v23 = *((unsigned int *)this + 15);
  if (!(_DWORD)v23)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1825E4904);
  }
  v24 = v23 - 1;
  result = *(_QWORD *)(*v5 + 8 * (v23 - 1));
  *(_QWORD *)(*v5 + 8 * (v23 - 1)) = 0;
  if (result)
    result = std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](result, v7);
  *((_DWORD *)this + 15) = v24;
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::WhileStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v7 = *((_QWORD *)this + 14);
  v8 = *(unsigned __int8 **)(v7 + 56);
  if (v8 != v6)
  {
    v9 = *(unsigned __int8 **)(v7 + 24);
    v10 = v9 == v8 || v9 == v6;
    if (!v10 && WGSL::conversionRank(v6, v8) == -1)
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>((uint64_t)this, (__int128 *)(*((_QWORD *)a2 + 3) + 8), (int8x16_t *)"while condition must be BOOL, got ", 35, (uint64_t)v6);
  }
  return (*(uint64_t (**)(WGSL::TypeChecker *, _QWORD))(*(_QWORD *)this + 400))(this, *((_QWORD *)a2 + 4));
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::SwitchStatement *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned __int8 *v17;

  v4 = *((_QWORD *)a2 + 4);
  v5 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v5;
  v17 = v6;
  if (!v6)
    goto LABEL_7;
  while (1)
  {
    v7 = *((_DWORD *)v6 + 12);
    if (v7 != 10)
      break;
    v6 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    if (!v6)
      goto LABEL_7;
  }
  if (v7 || *v6 >= 3u)
  {
LABEL_7:
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(*((_QWORD *)a2 + 4) + 8), "switch selector must be of type i32 or u32", 43);
    v17 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
  }
  v16[0] = this;
  v16[1] = &v17;
  v8 = *((unsigned int *)a2 + 13);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 5);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      WGSL::AST::Visitor::visit(this, v11);
      v10 -= 8;
    }
    while (v10);
  }
  result = WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)v16, (uint64_t)a2 + 72);
  v13 = *((unsigned int *)a2 + 17);
  if ((_DWORD)v13)
  {
    v14 = *((_QWORD *)a2 + 7);
    v15 = 24 * v13;
    do
    {
      result = WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()((uint64_t)v16, v14);
      v14 += 24;
      v15 -= 24;
    }
    while (v15);
  }
  return result;
}

uint64_t WGSL::TypeChecker::visit(WGSL::AST::SwitchStatement &)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  char v21;
  __int128 v22;

  v3 = *(_QWORD *)a1;
  v4 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v7 = *(uint64_t **)a2;
    do
    {
      v8 = *v7;
      v9 = *(_WORD *)(v3 + 104);
      *(_WORD *)(v3 + 104) = 3;
      WGSL::AST::Visitor::visit((_BYTE *)v3, v8);
      v10 = *(unsigned __int8 **)(v3 + 88);
      *(_QWORD *)(v8 + 24) = v10;
      *(_QWORD *)(v3 + 88) = 0;
      *(_WORD *)(v3 + 104) = v9;
      v11 = **(unsigned __int8 ***)(a1 + 8);
      if (v11 != v10)
      {
        v12 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 112) + 24);
        v13 = v12 == v11 || v12 == v10;
        if (!v13 && WGSL::conversionRank(v10, v11) == -1)
        {
          v14 = *(unsigned __int8 ***)(a1 + 8);
          v15 = *v14;
          if (v10 == *v14
            || ((v16 = *(unsigned __int8 **)(*(_QWORD *)(v3 + 112) + 24), v16 != v10) ? (v17 = v16 == v15) : (v17 = 1),
                v17 || (v18 = WGSL::conversionRank(v15, v10), v14 = *(unsigned __int8 ***)(a1 + 8), v18 != -1)))
          {
            *v14 = v10;
          }
          else
          {
            v19 = (uint64_t)*v14;
            *(_QWORD *)&v22 = "' and case selector has type '";
            *((_QWORD *)&v22 + 1) = 31;
            v21 = 39;
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(v3, 0, (_OWORD *)(v8 + 8), (int8x16_t *)"the case selector values must have the same type as the selector expression: the selector expression has type '", 112, v19, &v22, (uint64_t)v10, &v21);
          }
        }
      }
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 400))(v3, *(_QWORD *)(a2 + 16));
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::FieldAccessExpression *a2)
{
  uint64_t v3;
  __int16 v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  char v12;

  v10[0] = this;
  v10[1] = a2;
  v3 = *((_QWORD *)a2 + 8);
  v4 = *((_WORD *)this + 52);
  *((_BYTE *)this + 105) = 0;
  WGSL::AST::Visitor::visit(this, v3);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v3 + 24) = v5;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  if (!v5)
  {
LABEL_9:
    result = ((uint64_t (*)(_QWORD *, unsigned __int8 *, _QWORD, _QWORD))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, v5, 0, 0);
    if (result)
      *((_QWORD *)this + 11) = result;
    return result;
  }
  v6 = *((_DWORD *)v5 + 12);
  if (v6 != 11)
  {
    if (v6 == 10)
    {
      v12 = 1;
      v11 = 0;
      result = ((uint64_t (*)(_QWORD *, _QWORD, char *, unsigned __int8 *))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, *((_QWORD *)v5 + 1), &v12, &v11);
      if (result)
      {
        v8 = result;
        if (v12)
        {
          result = WGSL::TypeStore::referenceType(*((_QWORD *)this + 14), *v5, result, v5[1], v11);
          v8 = result;
        }
        *((_QWORD *)this + 11) = v8;
      }
      return result;
    }
    goto LABEL_9;
  }
  v12 = 1;
  v11 = 0;
  result = ((uint64_t (*)(_QWORD *, _QWORD, char *, unsigned __int8 *))WGSL::TypeChecker::visit(WGSL::AST::FieldAccessExpression &)::$_1::operator())(v10, *((_QWORD *)v5 + 1), &v12, &v11);
  if (result)
  {
    v9 = result;
    if (v12)
    {
      result = WGSL::TypeStore::referenceType(*((_QWORD *)this + 14), *v5, result, v5[1], v11);
      v9 = result;
    }
    *((_QWORD *)this + 11) = v9;
  }
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IndexAccessExpression *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  _DWORD *result;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21[3];
  _QWORD v22[2];
  unsigned __int8 v23;

  v22[0] = a2;
  v22[1] = this;
  v21[0] = (uint64_t)this;
  v21[1] = (uint64_t)v22;
  v21[2] = (uint64_t)a2;
  v4 = *((_QWORD *)a2 + 8);
  v5 = *((_BYTE *)this + 104);
  v6 = *((_BYTE *)this + 105);
  *((_BYTE *)this + 105) = 0;
  WGSL::AST::Visitor::visit(this, v4);
  v7 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v4 + 24) = v7;
  *((_QWORD *)this + 11) = 0;
  v8 = *((_QWORD *)a2 + 9);
  *((_BYTE *)this + 105) = 0;
  *((_BYTE *)this + 104) = v5;
  WGSL::AST::Visitor::visit(this, v8);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v8 + 24) = v9;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 104) = v5;
  *((_BYTE *)this + 105) = v6;
  v10 = *((_QWORD *)this + 14);
  v11 = *(unsigned __int8 **)(v10 + 64);
  if (v11 != v9)
  {
    v12 = *(unsigned __int8 **)(v10 + 24);
    if (v12 != v11 && v12 != v9 && WGSL::conversionRank(v9, v11) == -1)
    {
      v15 = *((_QWORD *)this + 14);
      v16 = *(unsigned __int8 **)(v15 + 72);
      if (v16 != v9)
      {
        v17 = *(unsigned __int8 **)(v15 + 24);
        if (v17 != v16 && v17 != v9 && WGSL::conversionRank(v9, v16) == -1)
        {
          v18 = *((_QWORD *)this + 14);
          v19 = *(unsigned __int8 **)(v18 + 32);
          if (v19 != v9)
          {
            v20 = *(unsigned __int8 **)(v18 + 24);
            if (v20 != v19 && v20 != v9 && WGSL::conversionRank(v9, v19) == -1)
            {
              v23 = 39;
              return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (__int128 *)((char *)a2 + 8), "index must be of type 'i32' or 'u32', found: '", 47, (uint64_t)v9, (char *)&v23);
            }
          }
        }
      }
    }
  }
  if (v7 && ((v13 = *((_DWORD *)v7 + 12), v13 == 11) || v13 == 10))
  {
    v23 = 0;
    result = WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(v21, *((_QWORD *)v7 + 1), &v23);
    if (!result)
      return result;
    result = (_DWORD *)WGSL::TypeStore::referenceType(*((_QWORD *)this + 14), *v7, (uint64_t)result, v7[1], v23);
  }
  else
  {
    result = WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(v21, (uint64_t)v7, 0);
    if (!result)
      return result;
  }
  *((_QWORD *)this + 11) = result;
  return result;
}

unsigned int *WGSL::TypeChecker::visit(WGSL::AST::IndexAccessExpression &)::$_2::operator()(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  __int128 *v60;
  unsigned int *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unsigned int *v66[2];
  int v67;
  _QWORD v68[2];
  int v69;
  char v70;
  unsigned int *v71;
  unsigned __int8 v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int **v78;
  unsigned int *v79;
  unsigned int **v80;
  unsigned int **v81;
  unsigned int **v82;
  unsigned int **v83;

  v3 = a2;
  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 112);
  if (*(_QWORD *)(v5 + 24) != a2)
  {
    if (!a2)
      goto LABEL_151;
    v7 = *(_DWORD *)(a2 + 48);
    if (v7 != 1)
    {
      if (v7 != 2)
      {
        if (v7 != 3)
          goto LABEL_151;
        v8 = *(_DWORD *)(a2 + 16);
        if (v8 == 1)
        {
          v9 = *(_DWORD *)(a2 + 8);
          v10 = v9 & 0xFFFFFF00;
        }
        else
        {
          LOBYTE(v9) = 0;
          v10 = 0;
        }
        v11 = *(unsigned int **)a2;
        v29 = (_QWORD *)a1[1];
        v30 = *v29;
        v31 = (_DWORD *)v29[1];
        v32 = *(_QWORD *)(*v29 + 64);
        LOBYTE(v73) = 0;
        LOBYTE(v76) = 0;
        if (*(_BYTE *)(v32 + 56))
        {
          LODWORD(v75) = -1;
          v33 = *(unsigned int *)(v32 + 48);
          if ((_DWORD)v33 != -1)
          {
            ((void (*)(_QWORD *, unsigned int **, uint64_t))off_1E0FD8010[v33])(v68, &v73, v32 + 32);
            LODWORD(v75) = v33;
            v30 = *v29;
          }
          LOBYTE(v76) = 1;
        }
        v34 = *(_QWORD *)(v30 + 72);
        LOBYTE(v68[0]) = 0;
        v70 = 0;
        if (!*(_BYTE *)(v34 + 56))
          goto LABEL_145;
        v69 = -1;
        v35 = *(unsigned int *)(v34 + 48);
        if ((_DWORD)v35 != -1)
        {
          ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD8010[v35])(v66, v68, v34 + 32);
          v69 = v35;
        }
        v70 = 1;
        if (v8 != 1 || (v36 = v10 | v9) == 0)
        {
          if (!(_BYTE)v76)
            goto LABEL_130;
          if ((_DWORD)v75 != 7)
            goto LABEL_156;
          if (!v73 || (v36 = *v73) == 0)
          {
LABEL_130:
            if ((_DWORD)v35 != -1)
              ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v35])(&v71, v68);
            goto LABEL_145;
          }
        }
        switch((_DWORD)v35)
        {
          case 5:
            v37 = v68[0];
            break;
          case 4:
            v37 = LODWORD(v68[0]);
            break;
          case 3:
            v37 = SLODWORD(v68[0]);
            break;
          default:
            goto LABEL_159;
        }
        if ((v37 & 0x8000000000000000) != 0 || v37 >= v36)
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(v31, (__int128 *)(*v29 + 8), "index ", 7, v37, " is out of bounds [0..", 23, v36 - 1, 93);
        }
        else if ((_BYTE)v76)
        {
          if ((_DWORD)v75 == 7)
          {
            v45 = *v29;
            WGSL::ConstantArray::operator[]((uint64_t)&v73, v37, (uint64_t)v66);
            v46 = v45 + 32;
            if (!*(_BYTE *)(v45 + 56))
            {
              *(_BYTE *)(v45 + 32) = 0;
              *(_DWORD *)(v45 + 48) = -1;
              v58 = v67;
              if (v67 != -1)
              {
                ((void (*)(unsigned int **, uint64_t, unsigned int **))off_1E0FD8010[v67])(&v71, v46, v66);
                *(_DWORD *)(v45 + 48) = v58;
              }
              *(_BYTE *)(v45 + 56) = 1;
              goto LABEL_125;
            }
            v47 = *(unsigned int *)(v45 + 48);
            if ((_DWORD)v47 == -1)
            {
              if (v67 == -1)
              {
LABEL_127:
                v67 = -1;
                goto LABEL_128;
              }
            }
            else if (v67 == -1)
            {
              ((void (*)(unsigned int **, uint64_t))off_1E0FD7CC8[v47])(&v71, v46);
              *(_DWORD *)(v45 + 48) = -1;
              goto LABEL_125;
            }
            v71 = (unsigned int *)(v45 + 32);
            ((void (*)(unsigned int **))off_1E0FD80E0[v67])(&v71);
LABEL_125:
            if (v67 != -1)
              ((void (*)(unsigned int **, unsigned int **))off_1E0FD7CC8[v67])(&v71, v66);
            goto LABEL_127;
          }
LABEL_156:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_157;
        }
LABEL_128:
        if (!v70)
          goto LABEL_145;
        LODWORD(v35) = v69;
        goto LABEL_130;
      }
      v21 = *(unsigned int **)a2;
      v72 = *(_BYTE *)(a2 + 9);
      v71 = v21;
      v22 = ((unint64_t)v72 << 8) | 1;
      v73 = (unsigned int *)v22;
      v74 = v21;
      v23 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v5 + 16), (unsigned __int8 *)&v73);
      v24 = *(unsigned __int8 **)(v5 + 16);
      if (v24)
        v24 += 24 * *((unsigned int *)v24 - 1);
      if (v24 == v23 || (v11 = (unsigned int *)*((_QWORD *)v23 + 2)) == 0)
      {
        v11 = (unsigned int *)WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>(v5, &v71, (char *)&v72);
        v66[0] = v11;
        v68[0] = v22;
        v68[1] = v21;
        WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v5 + 16), (unsigned __int8 *)v68, (uint64_t *)v66, (uint64_t)&v73);
      }
      v12 = (_QWORD *)a1[1];
      v13 = *(unsigned __int8 *)(v3 + 8);
      v25 = *v12;
      v15 = (_DWORD *)v12[1];
      v26 = *(_QWORD *)(*v12 + 64);
      LOBYTE(v73) = 0;
      LOBYTE(v76) = 0;
      if (*(_BYTE *)(v26 + 56))
      {
        LODWORD(v75) = -1;
        v27 = *(unsigned int *)(v26 + 48);
        if ((_DWORD)v27 != -1)
        {
          ((void (*)(_QWORD *, unsigned int **, uint64_t))off_1E0FD8010[v27])(v68, &v73, v26 + 32);
          LODWORD(v75) = v27;
          v25 = *v12;
        }
        LOBYTE(v76) = 1;
      }
      v28 = *(_QWORD *)(v25 + 72);
      LOBYTE(v68[0]) = 0;
      v70 = 0;
      if (*(_BYTE *)(v28 + 56))
      {
        v69 = -1;
        v19 = *(unsigned int *)(v28 + 48);
        if ((_DWORD)v19 != -1)
        {
          ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD8010[v19])(v66, v68, v28 + 32);
          v69 = v19;
        }
        v70 = 1;
        if (!v13)
        {
          if (!(_BYTE)v76)
            goto LABEL_143;
          if ((_DWORD)v75 != 9)
            goto LABEL_156;
          v13 = v73;
          if (!(_DWORD)v73)
            goto LABEL_143;
        }
        switch((_DWORD)v19)
        {
          case 5:
            v20 = v68[0];
            break;
          case 4:
            v20 = LODWORD(v68[0]);
            break;
          case 3:
            v20 = SLODWORD(v68[0]);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1825E6868);
        }
        if ((v20 & 0x8000000000000000) == 0 && v20 < v13)
        {
          if ((_BYTE)v76)
          {
            if ((_DWORD)v75 != 9)
              goto LABEL_156;
            v38 = *v12;
            WGSL::ConstantMatrix::operator[]((uint64_t)&v73, v20, &v71);
            v39 = v71;
            v66[0] = v71;
            v67 = 8;
            if (*(_BYTE *)(v38 + 56))
            {
              v40 = v38 + 32;
              v41 = *(_DWORD *)(v38 + 48);
              if (v41 == 8)
              {
                WTF::FixedVector<WGSL::ConstantValue>::operator=((WTF **)(v38 + 32), v66);
              }
              else
              {
                if (v71)
                {
                  v53 = *v71;
                  v64 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v53 + 8));
                  *v64 = v53;
                  if ((_DWORD)v53)
                  {
                    v54 = v64 + 6;
                    v55 = 24 * v53;
                    v56 = v39 + 6;
                    do
                    {
                      *((_BYTE *)v54 - 16) = 0;
                      *v54 = -1;
                      v57 = *v56;
                      if ((_DWORD)v57 != -1)
                      {
                        ((void (*)(unsigned __int8 *, _DWORD *, unsigned int *))off_1E0FD8010[v57])(&v72, v54 - 4, v56 - 4);
                        *v54 = v57;
                      }
                      v54 += 6;
                      v56 += 6;
                      v55 -= 24;
                    }
                    while (v55);
                  }
                  v59 = v64;
                  v41 = *(_DWORD *)(v38 + 48);
                  v40 = v38 + 32;
                }
                else
                {
                  v59 = 0;
                }
                if (v41 != -1)
                  ((void (*)(unsigned __int8 *, uint64_t))off_1E0FD7CC8[v41])(&v72, v40);
                *(_QWORD *)(v38 + 32) = v59;
                *(_DWORD *)(v38 + 48) = 8;
              }
            }
            else
            {
              *(_BYTE *)(v38 + 32) = 0;
              *(_DWORD *)(v38 + 48) = -1;
              if (v39)
              {
                v48 = *v39;
                v49 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v48 + 8));
                *v49 = v48;
                if ((_DWORD)v48)
                {
                  v65 = v38;
                  v50 = 0;
                  do
                  {
                    LOBYTE(v49[v50 + 2]) = 0;
                    v49[v50 + 6] = -1;
                    v51 = v39[v50 + 6];
                    if ((_DWORD)v51 != -1)
                    {
                      ((void (*)(unsigned __int8 *, _DWORD *, unsigned int *))off_1E0FD8010[v51])(&v72, &v49[v50 + 2], &v39[v50 + 2]);
                      v49[v50 + 6] = v51;
                    }
                    v50 += 6;
                  }
                  while (6 * v48 != v50);
                  v38 = v65;
                }
              }
              else
              {
                v49 = 0;
              }
              *(_QWORD *)(v38 + 32) = v49;
              *(_DWORD *)(v38 + 48) = 8;
              *(_BYTE *)(v38 + 56) = 1;
            }
            if (v67 != -1)
              ((void (*)(unsigned __int8 *, unsigned int **))off_1E0FD7CC8[v67])(&v72, v66);
            goto LABEL_141;
          }
LABEL_87:
          if (!v70)
            goto LABEL_145;
LABEL_142:
          LODWORD(v19) = v69;
LABEL_143:
          if ((_DWORD)v19 != -1)
            ((void (*)(unsigned int **, _QWORD *))off_1E0FD7CC8[v19])(&v71, v68);
          goto LABEL_145;
        }
LABEL_86:
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(v15, (__int128 *)(*v12 + 8), "index ", 7, v20, " is out of bounds [0..", 23, v13 - 1, 93);
        goto LABEL_87;
      }
LABEL_145:
      if ((_BYTE)v76 && (_DWORD)v75 != -1)
        ((void (*)(_QWORD *, unsigned int **))off_1E0FD7CC8[v75])(v68, &v73);
      if (v11)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1[2] + 72) + 56))
          return v11;
        v62 = *(unsigned int **)(v4 + 112);
        v66[0] = v11;
        v73 = (unsigned int *)v66;
        v74 = v62;
        v75 = v62;
        v76 = v62;
        v77 = v62;
        v78 = v66;
        v79 = v62;
        v80 = v66;
        v81 = v66;
        v82 = v66;
        v83 = v66;
        v63 = v11[12];
        if ((_DWORD)v63 != -1)
        {
          v68[0] = &v73;
          v3 = ((uint64_t (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v63])(v68, v11);
          if (v3)
            return (unsigned int *)v3;
LABEL_159:
          __break(0xC471u);
          JUMPOUT(0x1825E6824);
        }
        goto LABEL_156;
      }
LABEL_151:
      v60 = (__int128 *)(a1[2] + 8);
      LOBYTE(v73) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>(v4, 1, v60, "cannot index type '", 20, v3, (char *)&v73);
      return 0;
    }
    if (a3)
      *a3 = 1;
    v11 = *(unsigned int **)a2;
    v12 = (_QWORD *)a1[1];
    v13 = *(unsigned __int8 *)(a2 + 8);
    v14 = *v12;
    v15 = (_DWORD *)v12[1];
    v16 = *(_QWORD *)(*v12 + 64);
    LOBYTE(v73) = 0;
    LOBYTE(v76) = 0;
    if (*(_BYTE *)(v16 + 56))
    {
      LODWORD(v75) = -1;
      v17 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v17 != -1)
      {
        ((void (*)(_QWORD *, unsigned int **, uint64_t))off_1E0FD8010[v17])(v68, &v73, v16 + 32);
        LODWORD(v75) = v17;
        v14 = *v12;
      }
      LOBYTE(v76) = 1;
    }
    v18 = *(_QWORD *)(v14 + 72);
    LOBYTE(v68[0]) = 0;
    v70 = 0;
    if (!*(_BYTE *)(v18 + 56))
      goto LABEL_145;
    v69 = -1;
    v19 = *(unsigned int *)(v18 + 48);
    if ((_DWORD)v19 != -1)
    {
      ((void (*)(unsigned int **, _QWORD *, uint64_t))off_1E0FD8010[v19])(v66, v68, v18 + 32);
      v69 = v19;
    }
    v70 = 1;
    if (!v13)
    {
      if (!(_BYTE)v76)
        goto LABEL_143;
      if ((_DWORD)v75 != 8)
        goto LABEL_156;
      if (!v73)
        goto LABEL_143;
      v13 = *v73;
      if (!*v73)
        goto LABEL_143;
    }
    switch((_DWORD)v19)
    {
      case 5:
        v20 = v68[0];
        break;
      case 4:
        v20 = LODWORD(v68[0]);
        break;
      case 3:
        v20 = SLODWORD(v68[0]);
        break;
      default:
LABEL_157:
        __break(0xC471u);
        JUMPOUT(0x1825E6848);
    }
    if ((v20 & 0x8000000000000000) != 0 || v20 >= v13)
      goto LABEL_86;
    if (!(_BYTE)v76)
      goto LABEL_87;
    if ((_DWORD)v75 != 8)
      goto LABEL_156;
    v42 = *v12;
    WGSL::ConstantArray::operator[]((uint64_t)&v73, v20, (uint64_t)v66);
    v43 = v42 + 32;
    if (!*(_BYTE *)(v42 + 56))
    {
      *(_BYTE *)(v42 + 32) = 0;
      *(_DWORD *)(v42 + 48) = -1;
      v52 = v67;
      if (v67 != -1)
      {
        ((void (*)(unsigned int **, uint64_t, unsigned int **))off_1E0FD8010[v67])(&v71, v43, v66);
        *(_DWORD *)(v42 + 48) = v52;
      }
      *(_BYTE *)(v42 + 56) = 1;
      goto LABEL_120;
    }
    v44 = *(unsigned int *)(v42 + 48);
    if ((_DWORD)v44 == -1)
    {
      if (v67 == -1)
        goto LABEL_141;
    }
    else if (v67 == -1)
    {
      ((void (*)(unsigned int **, uint64_t))off_1E0FD7CC8[v44])(&v71, v43);
      *(_DWORD *)(v42 + 48) = -1;
      goto LABEL_120;
    }
    v71 = (unsigned int *)(v42 + 32);
    ((void (*)(unsigned int **))off_1E0FD80E0[v67])(&v71);
LABEL_120:
    if (v67 != -1)
      ((void (*)(unsigned int **, unsigned int **))off_1E0FD7CC8[v67])(&v71, v66);
LABEL_141:
    v67 = -1;
    if (!v70)
      goto LABEL_145;
    goto LABEL_142;
  }
  return (unsigned int *)v3;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::BinaryExpression *a2)
{
  return WGSL::TypeChecker::binaryExpression((unint64_t)this, (__int128 *)((char *)a2 + 8), a2, *((unsigned __int8 *)a2 + 80), *((_QWORD *)a2 + 8), *((_QWORD *)a2 + 9));
}

uint64_t WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::IdentifierExpression *a2, const WTF::StringImpl *a3)
{
  BOOL v3;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  WTF *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  _BYTE *v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _DWORD *v46;
  __int128 v47;
  char *v48;

  v6 = (char *)a2 + 64;
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  while (1)
  {
    v8 = v7[1];
    if (v8)
    {
      v9 = *(_DWORD *)(v8 - 8);
      v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
      v11 = *((_DWORD *)v10 + 4);
      v12 = v11 < 0x100 ? WTF::StringImpl::hashSlowCase(v10) : v11 >> 8;
      for (i = 0; ; v12 = i + v14)
      {
        v14 = v12 & v9;
        v15 = *(WTF **)(v8 + (v14 << 6));
        v3 = __OFADD__(v15, 1);
        if (v15 != (WTF *)-1)
        {
          if (!v15)
          {
            if (v7[1])
              v3 = 0;
            goto LABEL_2;
          }
          result = WTF::equal(v15, *((const WTF::StringImpl **)a2 + 11), a3);
          if ((result & 1) != 0)
            break;
        }
        ++i;
      }
      v17 = v8 + (v14 << 6);
      v18 = v7[1];
      if (!v18)
        break;
      v19 = v18 + ((unint64_t)*(unsigned int *)(v18 - 4) << 6);
      v3 = __OFSUB__(v17, v19);
      if (v17 != v19)
        break;
    }
LABEL_2:
    v7 = (_QWORD *)*v7;
    if (!v7)
    {
      v28 = *((_QWORD *)a2 + 11);
      if (v28)
      {
        v29 = *(_DWORD *)(v28 + 4);
        *(_DWORD *)v28 += 2;
        if (v29 < 0)
          goto LABEL_61;
        v3 = __OFADD__(v29, 1);
        v30 = v29 + 1;
        if (v3)
          goto LABEL_61;
      }
      else
      {
        v30 = 1;
        if (v3)
          goto LABEL_61;
      }
      if (!__OFADD__(v30, 23))
      {
        v31 = !v28 || (*(_BYTE *)(v28 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v30 + 23), v31, (int8x16_t *)"unresolved identifier '", 0x17u, v28, 39, &v48);
        v32 = v48;
        if (v48)
        {
          v48 = 0;
          v46 = v32;
          v47 = *(_OWORD *)((char *)a2 + 8);
          v33 = *((unsigned int *)this + 33);
          if ((_DWORD)v33 == *((_DWORD *)this + 32))
          {
            v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v33 + 1, (unint64_t)&v46);
            v35 = *((_QWORD *)this + 15) + 24 * *((unsigned int *)this + 33);
            v36 = *(_QWORD *)v34;
            *(_QWORD *)v34 = 0;
            *(_QWORD *)v35 = v36;
            *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
            v37 = v46;
            ++*((_DWORD *)this + 33);
            v46 = 0;
            if (v37)
            {
              if (*v37 == 2)
              {
                WTF::StringImpl::destroy();
                result = (uint64_t)v48;
                v48 = 0;
                if (!result)
                  goto LABEL_42;
              }
              else
              {
                *v37 -= 2;
                result = (uint64_t)v48;
                v48 = 0;
                if (!result)
                  goto LABEL_42;
              }
              goto LABEL_39;
            }
          }
          else
          {
            v38 = *((_QWORD *)this + 15) + 24 * v33;
            *(_QWORD *)v38 = v32;
            *(_OWORD *)(v38 + 8) = v47;
            ++*((_DWORD *)this + 33);
            v46 = 0;
          }
          result = (uint64_t)v48;
          v48 = 0;
          if (!result)
          {
LABEL_42:
            if (v28)
            {
              if (*(_DWORD *)v28 == 2)
                result = WTF::StringImpl::destroy();
              else
                *(_DWORD *)v28 -= 2;
            }
            *((_QWORD *)this + 11) = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
            return result;
          }
LABEL_39:
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy();
          else
            *(_DWORD *)result -= 2;
          goto LABEL_42;
        }
LABEL_62:
        __break(0xC471u);
        JUMPOUT(0x1825E6C6CLL);
      }
LABEL_61:
      v48 = 0;
      goto LABEL_62;
    }
  }
  v20 = *(unsigned __int8 *)(v17 + 8);
  if (*(_BYTE *)(v17 + 8))
  {
    if (v20 == 2)
    {
      v40 = (int8x16_t *)"function";
      v41 = 9;
    }
    else if (v20 == 1)
    {
      v40 = (int8x16_t *)"type";
      v41 = 5;
    }
    else
    {
      v40 = (int8x16_t *)"value";
      v41 = 6;
    }
    return (uint64_t)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier &,WTF::ASCIILiteral>((uint64_t)this, (__int128 *)((char *)a2 + 8), (int8x16_t *)"cannot use ", 12, v40, v41, " '", 3, (uint64_t)v6, "' as value", 11);
  }
  else
  {
    v21 = *(unsigned __int8 *)(v17 + 24);
    v22 = *((unsigned __int8 *)this + 104);
    if (v21 > v22)
    {
      if (v21 == 3)
      {
        v42 = "runtime";
        v43 = 8;
      }
      else
      {
        if (v21 == 2)
          v42 = "override";
        else
          v42 = "constant";
        v43 = 9;
      }
      if (v22 == 3)
      {
        v44 = "runtime";
        v45 = 8;
      }
      else
      {
        if (v22 == 2)
          v44 = "override";
        else
          v44 = "constant";
        v45 = 9;
      }
      return (uint64_t)WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(this, (__int128 *)((char *)a2 + 8), "cannot use ", 12, v42, v43, " value in ", 11, v44, v45, " expression", 12);
    }
    else
    {
      v23 = *(_QWORD *)(v17 + 16);
      *((_QWORD *)this + 11) = v23;
      if (*(_BYTE *)(v17 + 56))
      {
        LOBYTE(v46) = 0;
        DWORD2(v47) = -1;
        v24 = *(unsigned int *)(v17 + 48);
        if ((_DWORD)v24 != -1)
        {
          v25 = off_1E0FD8010[v24];
          ((void (*)(char **, _DWORD **, uint64_t))v25)(&v48, &v46, v17 + 32);
          DWORD2(v47) = v24;
          v26 = (char *)a2 + 56;
          v27 = (char *)a2 + 32;
          if (*((_BYTE *)a2 + 56))
          {
            v48 = (char *)a2 + 32;
            ((void (*)(char **, char *, _DWORD **))off_1E0FD80E0[v24])(&v48, (char *)a2 + 32, &v46);
LABEL_55:
            if (DWORD2(v47) != -1)
              ((void (*)(char **, _DWORD **))off_1E0FD7CC8[DWORD2(v47)])(&v48, &v46);
            goto LABEL_57;
          }
          *((_BYTE *)a2 + 32) = 0;
          *((_DWORD *)a2 + 12) = -1;
          ((void (*)(char **, char *, _DWORD **))v25)(&v48, (char *)a2 + 32, &v46);
          *((_DWORD *)a2 + 12) = v24;
LABEL_54:
          *v26 = 1;
          goto LABEL_55;
        }
        v26 = (char *)a2 + 56;
        v27 = (char *)a2 + 32;
        if (!*((_BYTE *)a2 + 56))
        {
          *((_BYTE *)a2 + 32) = 0;
          *((_DWORD *)a2 + 12) = -1;
          goto LABEL_54;
        }
        v39 = *((unsigned int *)a2 + 12);
        if ((_DWORD)v39 != -1)
        {
          ((void (*)(char **, char *))off_1E0FD7CC8[v39])(&v48, (char *)a2 + 32);
          *((_DWORD *)a2 + 12) = -1;
          goto LABEL_55;
        }
LABEL_57:
        DWORD2(v47) = -1;
        return WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)((char *)a2 + 8), v23, (uint64_t)v27);
      }
    }
  }
  return result;
}

WTF *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::CallExpression *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int i;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  const WTF::StringImpl *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  WGSL::AST::CallExpression *v37;
  uint64_t v38;
  const WTF::StringImpl *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  int v49;
  int v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  unsigned __int8 *v59;
  BOOL v60;
  unsigned __int8 *v61;
  int v63;
  uint64_t v64;
  int m;
  int v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  unint64_t v72;
  _QWORD *v73;
  int v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  unint64_t v88;
  _DWORD *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int16 v95;
  unsigned __int8 *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  const char *v120;
  int v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _DWORD *v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  void (*v129)(char **__return_ptr, uint64_t, const char **);
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  unint64_t j;
  uint64_t v150;
  unsigned __int8 *v151;
  __int16 v152;
  unsigned __int8 *v153;
  unsigned __int8 *v154;
  BOOL v155;
  int v156;
  int v157;
  _QWORD *v158;
  _QWORD *v159;
  int v160;
  unsigned __int8 v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  unsigned int v164;
  int v165;
  unsigned __int8 v166;
  unsigned int v167;
  int v168;
  BOOL v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  _BYTE *v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  WTF::StringImpl *v191;
  unsigned int v192;
  unint64_t v193;
  int v194;
  unsigned __int8 *v195;
  int k;
  uint64_t v197;
  WTF *v198;
  __int16 v199;
  unsigned __int8 *v200;
  unsigned __int8 *v201;
  BOOL v202;
  uint64_t v203;
  unsigned int v204;
  WTF::StringImpl *v205;
  unsigned int v206;
  int v207;
  _OWORD *v208;
  int v209;
  uint64_t v210;
  _OWORD *v211;
  WTF *v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  unsigned int v216;
  uint64_t v217;
  _DWORD *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  int v229;
  unsigned int v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  _DWORD *v234;
  uint64_t v235;
  WTF *v236;
  unint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  _BOOL4 v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  uint64_t v271;
  WTF *v272;
  unsigned __int8 *v273;
  int v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  __int16 v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  BOOL v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  _DWORD *v286;
  unint64_t v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _DWORD *v296;
  uint64_t v297;
  unsigned int v298;
  BOOL v299;
  unsigned __int8 *v301;
  int v302;
  int v303;
  unsigned int v304;
  uint64_t v306;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  WTF *v313;
  _DWORD *v314;
  uint64_t v315;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  WTF *result;
  const char *v320;
  char *v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  WTF::String *v325;
  char *v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  _DWORD *v332;
  uint64_t v333;
  _DWORD *v334;
  int v335;
  __int128 *v336;
  uint64_t *v337;
  const char *v338;
  const WTF::StringImpl *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  _QWORD *v345;
  int v346;
  WTF *v347;
  WTF *v348;
  int v349;
  __int128 *v350;
  uint64_t v351;
  uint64_t v352;
  WTF *v354;
  uint64_t v355;
  char v356;
  char v357;
  WTF *v358;
  uint64_t v359;
  char v360;
  WTF *v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  const char *v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t *v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t *v388;
  uint64_t *v389;
  uint64_t *v390;
  uint64_t *v391;
  uint64_t *v392;
  uint64_t *v393;
  char *v394;
  __int128 v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t v399;
  uint64_t **v400;
  uint64_t **v401;
  uint64_t **v402;
  uint64_t **v403;
  uint64_t v404;

  v404 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 8);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  v354 = 0;
  v355 = 0;
  v349 = v5;
  v346 = v6;
  if (v4 == 22)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) != 22)
    {
      __break(0xC471u);
      JUMPOUT(0x1825E97C8);
    }
    v8 = *(_QWORD *)(v3 + 88);
    if (!v8)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v6 == 59)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = (uint64_t)v394;
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3) != 60)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E9870);
  }
  v9 = v3;
  v10 = *(unsigned int *)(v3 + 108);
  if ((_DWORD)v10)
  {
    v11 = *(uint64_t **)(v3 + 96);
    v12 = 8 * v10;
    while (1)
    {
      v15 = *v11;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 16))(*v11) == 22)
        break;
      WGSL::AST::Visitor::visit(this, v15);
      v17 = (_QWORD *)*((_QWORD *)this + 11);
      if (*((_DWORD *)v17 + 12) == 13)
        goto LABEL_15;
LABEL_16:
      *(_QWORD *)(v15 + 24) = v17;
      *((_QWORD *)this + 11) = 0;
      v394 = (char *)v17;
      v18 = HIDWORD(v355);
      if (HIDWORD(v355) == (_DWORD)v355)
      {
        v13 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v354, HIDWORD(v355) + 1, (unint64_t)&v394);
        v14 = HIDWORD(v355);
        *((_QWORD *)v354 + HIDWORD(v355)) = *v13;
        HIDWORD(v355) = v14 + 1;
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_18;
      }
      else
      {
        *((_QWORD *)v354 + HIDWORD(v355)) = v17;
        HIDWORD(v355) = v18 + 1;
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_18;
      }
    }
    v17 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v15 + 64), v16);
    *((_QWORD *)this + 11) = v17;
    if (*((_DWORD *)v17 + 12) != 13)
      goto LABEL_16;
LABEL_15:
    v394 = "' requires template arguments";
    *(_QWORD *)&v395 = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v15 + 8), (int8x16_t *)"type '", 7, (uint64_t)v17, &v394);
    v17 = *(_QWORD **)(*((_QWORD *)this + 14) + 24);
    goto LABEL_16;
  }
LABEL_18:
  v3 = v9;
  v8 = *(_QWORD *)(v9 + 88);
  if (v8)
LABEL_19:
    *(_DWORD *)v8 += 2;
LABEL_20:
  v19 = (_QWORD *)*((_QWORD *)this + 5);
  while (1)
  {
    v20 = v19[1];
    if (v20)
    {
      v21 = *(_DWORD *)(v20 - 8);
      v22 = *(_DWORD *)(v8 + 16);
      v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v8) : v22 >> 8;
      for (i = 0; ; v23 = i + v25)
      {
        v25 = v23 & v21;
        v26 = *(WTF **)(v20 + (v25 << 6));
        if (v26 != (WTF *)-1)
        {
          if (!v26)
            goto LABEL_21;
          if ((WTF::equal(v26, (const WTF::StringImpl *)v8, v7) & 1) != 0)
            break;
        }
        ++i;
      }
      v28 = v20 + (v25 << 6);
      v29 = v19[1];
      if (!v29 || v28 != v29 + ((unint64_t)*(unsigned int *)(v29 - 4) << 6))
        break;
    }
LABEL_21:
    v19 = (_QWORD *)*v19;
    if (!v19)
    {
      v37 = a2;
      goto LABEL_53;
    }
  }
  v345 = *(_QWORD **)(v28 + 16);
  *(_QWORD *)(v3 + 24) = v345;
  v30 = *(unsigned __int8 *)(v28 + 8);
  if (v30 == 2)
  {
    if (*((_DWORD *)v345 + 12) != 6)
      goto LABEL_689;
    v45 = *((unsigned __int8 *)this + 104);
    if (v45 <= 2)
    {
      if (v45 == 2)
        v320 = "override";
      else
        v320 = "constant";
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 1, (__int128 *)((char *)a2 + 8), "cannot call function from ", 27, (uint64_t)v320, 9, (uint64_t)" context", 9);
      goto LABEL_608;
    }
    v46 = *((unsigned int *)a2 + 21);
    v47 = *((unsigned int *)v345 + 3);
    v48 = __OFSUB__((_DWORD)v46, (_DWORD)v47);
    if ((_DWORD)v46 != (_DWORD)v47)
    {
      if (v46 >= v47)
        v321 = "many";
      else
        v321 = "few";
      if (v46 < v47)
        v322 = 4;
      else
        v322 = 5;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned long &,WTF::ASCIILiteral,unsigned long &>(this, (WGSL::AST::CallExpression *)((char *)a2 + 8), "funtion call has too ", 22, v321, v322, " arguments: expected ", 22, v47, ", found ", 9, v46);
      goto LABEL_608;
    }
    if (!*((_BYTE *)this + 105) || !*((_BYTE *)v345 + 24))
      goto LABEL_205;
    if (v8)
    {
      v49 = *(_DWORD *)(v8 + 4);
      *(_DWORD *)v8 += 2;
      if (v49 < 0)
        goto LABEL_644;
      v48 = __OFADD__(v49, 26);
      v50 = v49 + 26;
      if (v48)
        goto LABEL_644;
    }
    else
    {
      v50 = 26;
      if (v48)
        goto LABEL_644;
    }
    if (!__OFADD__(v50, 35))
    {
      v51 = !v8 || (*(_BYTE *)(v8 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v50 + 35), v51, (int8x16_t *)"ignoring return value of function '", 0x23u, v8, (int8x16_t *)"' annotated with @must_use", 0x1Au, &v379);
      v114 = (uint64_t)v379;
      if (v379)
      {
        v379 = 0;
        v394 = (char *)v114;
        v395 = *(_OWORD *)((char *)a2 + 8);
        v115 = *((unsigned int *)this + 33);
        if ((_DWORD)v115 == *((_DWORD *)this + 32))
        {
          v116 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v115 + 1, (unint64_t)&v394);
          v117 = *((_QWORD *)this + 15) + 24 * *((unsigned int *)this + 33);
          v118 = *(_QWORD *)v116;
          *(_QWORD *)v116 = 0;
          *(_QWORD *)v117 = v118;
          *(_OWORD *)(v117 + 8) = *(_OWORD *)(v116 + 8);
          v119 = v394;
          ++*((_DWORD *)this + 33);
          v394 = 0;
          if (v119)
          {
            if (*(_DWORD *)v119 == 2)
            {
              WTF::StringImpl::destroy();
              v120 = v379;
              v379 = 0;
              if (!v120)
                goto LABEL_202;
            }
            else
            {
              *(_DWORD *)v119 -= 2;
              v120 = v379;
              v379 = 0;
              if (!v120)
                goto LABEL_202;
            }
LABEL_178:
            if (*(_DWORD *)v120 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v120 -= 2;
LABEL_202:
            if (v8)
            {
              if (*(_DWORD *)v8 == 2)
              {
                WTF::StringImpl::destroy();
                if (!(_DWORD)v46)
                  goto LABEL_219;
LABEL_206:
                for (j = 0; j != v46; ++j)
                {
                  if (j >= *((unsigned int *)a2 + 21))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1825E9DA0);
                  }
                  if (j >= *((unsigned int *)v345 + 3))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1825E9DA8);
                  }
                  v150 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * j);
                  v151 = *(unsigned __int8 **)(*v345 + 8 * j);
                  v152 = *((_WORD *)this + 52);
                  *((_BYTE *)this + 105) = 0;
                  WGSL::AST::Visitor::visit(this, v150);
                  v153 = (unsigned __int8 *)*((_QWORD *)this + 11);
                  *(_QWORD *)(v150 + 24) = v153;
                  *((_QWORD *)this + 11) = 0;
                  *((_WORD *)this + 52) = v152;
                  if (v151 != v153)
                  {
                    v154 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
                    v155 = v154 == v151 || v154 == v153;
                    if (!v155 && WGSL::conversionRank(v153, v151) == -1)
                    {
                      v394 = "', found '";
                      *(_QWORD *)&v395 = 11;
                      LOBYTE(v379) = 39;
                      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (_OWORD *)(v150 + 8), (int8x16_t *)"type in function call does not match parameter type: expected '", 64, (uint64_t)v151, (__int128 *)&v394, (uint64_t)v153, (char *)&v379);
                      goto LABEL_608;
                    }
                  }
                  *(_QWORD *)(v150 + 24) = v151;
                  if (*(_BYTE *)(v150 + 56))
                    WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v150 + 8), (uint64_t)v151, v150 + 32);
                }
LABEL_219:
                *((_QWORD *)this + 11) = v345[2];
                goto LABEL_608;
              }
              *(_DWORD *)v8 -= 2;
            }
LABEL_205:
            if (!(_DWORD)v46)
              goto LABEL_219;
            goto LABEL_206;
          }
        }
        else
        {
          v128 = *((_QWORD *)this + 15) + 24 * v115;
          *(_QWORD *)v128 = v114;
          *(_OWORD *)(v128 + 8) = v395;
          ++*((_DWORD *)this + 33);
          v394 = 0;
        }
        v120 = v379;
        v379 = 0;
        if (!v120)
          goto LABEL_202;
        goto LABEL_178;
      }
LABEL_645:
      __break(0xC471u);
      JUMPOUT(0x1825E9998);
    }
LABEL_644:
    v379 = 0;
    goto LABEL_645;
  }
  if (v30 != 1)
  {
    LOBYTE(v394) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (__int128 *)(v3 + 8), "cannot call value of type '", 28, (uint64_t)v345, (char *)&v394);
    goto LABEL_608;
  }
  *((_BYTE *)a2 + 88) = 1;
  v31 = *((_DWORD *)v345 + 12);
  if (v31 != 1)
  {
    if (v31 == 4)
    {
      if ((std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>((uint64_t)&v394, (uint64_t)v345) & 1) == 0)
      {
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "struct is not constructible", 28);
        goto LABEL_608;
      }
      if (*((_BYTE *)this + 105))
      {
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "value constructor evaluated but not used", 41);
        goto LABEL_608;
      }
      v33 = *((unsigned int *)a2 + 21);
      v34 = v345[1];
      if (v34)
        LODWORD(v34) = *(_DWORD *)(v34 - 12);
      if ((_DWORD)v33 && (_DWORD)v33 != (_DWORD)v34)
      {
        if (v33 >= v34)
          v35 = "many";
        else
          v35 = "few";
        if (v33 < v34)
          v36 = 4;
        else
          v36 = 5;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>((uint64_t)this, (__int128 *)((char *)a2 + 8), "struct initializer has too ", 28, v35, v36, " inputs: expected ", 19, v34, ", found ", 9, v33);
        goto LABEL_608;
      }
      v379 = 0;
      if (!(_DWORD)v33)
      {
        v266 = *(_QWORD *)(v28 + 16);
        WGSL::zeroValue((uint64_t)&v394, v266);
        WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v266, (uint64_t)&v394);
        if (DWORD2(v395) != -1)
          ((void (*)(uint64_t **, char **))off_1E0FD7CC8[DWORD2(v395)])(&v363, &v394);
LABEL_483:
        *((_QWORD *)this + 11) = *(_QWORD *)(v28 + 16);
        v267 = (uint64_t)v379;
        if (v379)
          goto LABEL_484;
        goto LABEL_608;
      }
      v186 = 0;
      v344 = 1;
      v348 = (WTF *)v33;
LABEL_302:
      if (v186 >= *((unsigned int *)a2 + 21))
      {
        __break(0xC471u);
        JUMPOUT(0x1825E9DE8);
      }
      if (v186 >= *(unsigned int *)(*v345 + 84))
      {
        __break(0xC471u);
LABEL_706:
        __break(1u);
LABEL_707:
        __break(0xC471u);
        JUMPOUT(0x1825E9DF8);
      }
      v187 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v186);
      v188 = *(_QWORD *)(*(_QWORD *)(*v345 + 72) + 8 * v186);
      v189 = v345[1];
      v351 = v187;
      if (!v189)
      {
        v195 = 0;
        goto LABEL_317;
      }
      v190 = *(_DWORD *)(v189 - 8);
      v191 = *(WTF::StringImpl **)(v188 + 48);
      v192 = *((_DWORD *)v191 + 4);
      v193 = v186;
      if (v192 < 0x100)
        v194 = WTF::StringImpl::hashSlowCase(v191);
      else
        v194 = v192 >> 8;
      for (k = 0; ; v194 = k + v197)
      {
        v197 = v194 & v190;
        v198 = *(WTF **)(v189 + 16 * v197);
        if (v198 != (WTF *)-1)
        {
          if (!v198)
          {
            v195 = 0;
LABEL_316:
            v186 = v193;
            v33 = (unint64_t)v348;
            v187 = v351;
LABEL_317:
            v199 = *((_WORD *)this + 52);
            *((_BYTE *)this + 105) = 0;
            WGSL::AST::Visitor::visit(this, v187);
            v200 = (unsigned __int8 *)*((_QWORD *)this + 11);
            *(_QWORD *)(v187 + 24) = v200;
            *((_QWORD *)this + 11) = 0;
            *((_WORD *)this + 52) = v199;
            if (v195 != v200)
            {
              v201 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
              v202 = v201 == v195 || v201 == v200;
              if (!v202 && WGSL::conversionRank(v200, v195) == -1)
              {
                v394 = "', found '";
                *(_QWORD *)&v395 = 11;
                LOBYTE(v363) = 39;
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (_OWORD *)(v187 + 8), (int8x16_t *)"type in struct initializer does not match struct member type: expected '", 73, (uint64_t)v195, (__int128 *)&v394, (uint64_t)v200, (char *)&v363);
                v267 = (uint64_t)v379;
                if (!v379)
                  goto LABEL_608;
LABEL_484:
                v268 = *(unsigned int *)(v267 - 4);
                if ((_DWORD)v268)
                {
                  v269 = v267;
                  do
                  {
                    v270 = *(_DWORD **)v269;
                    if (*(_QWORD *)v269 != -1)
                    {
                      v271 = *(unsigned int *)(v269 + 24);
                      if ((_DWORD)v271 != -1)
                      {
                        ((void (*)(char **, uint64_t))off_1E0FD7CC8[v271])(&v394, v269 + 8);
                        v270 = *(_DWORD **)v269;
                      }
                      *(_DWORD *)(v269 + 24) = -1;
                      *(_QWORD *)v269 = 0;
                      if (v270)
                      {
                        if (*v270 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *v270 -= 2;
                      }
                    }
                    v269 += 32;
                    --v268;
                  }
                  while (v268);
                }
                v272 = (WTF *)(v267 - 16);
LABEL_548:
                WTF::fastFree(v272, v27);
                goto LABEL_608;
              }
            }
            *(_QWORD *)(v187 + 24) = v195;
            if (!*(_BYTE *)(v187 + 56)
              || !WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v187 + 8), (uint64_t)v195, v187 + 32))
            {
              v344 = 0;
              goto LABEL_301;
            }
            v339 = (const WTF::StringImpl *)(v187 + 32);
            if (!*(_BYTE *)(v187 + 56))
              goto LABEL_706;
            v203 = (uint64_t)v379;
            if (v379
              || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v379, 8u, 0), (v203 = (uint64_t)v379) != 0))
            {
              v204 = *(_DWORD *)(v203 - 8);
              v205 = *(WTF::StringImpl **)(v188 + 48);
              v206 = *((_DWORD *)v205 + 4);
              v340 = v186;
              if (v206 >= 0x100)
                goto LABEL_329;
LABEL_331:
              v207 = WTF::StringImpl::hashSlowCase(v205);
            }
            else
            {
              v204 = 0;
              v205 = *(WTF::StringImpl **)(v188 + 48);
              v206 = *((_DWORD *)v205 + 4);
              v340 = v186;
              if (v206 < 0x100)
                goto LABEL_331;
LABEL_329:
              v207 = v206 >> 8;
            }
            v208 = 0;
            v209 = 1;
            while (2)
            {
              v210 = v207 & v204;
              v211 = (_OWORD *)(v203 + 32 * v210);
              v212 = *(WTF **)v211;
              if (*(_QWORD *)v211 == -1)
              {
                v208 = (_OWORD *)(v203 + 32 * v210);
LABEL_334:
                v207 = v209 + v210;
                ++v209;
                continue;
              }
              break;
            }
            if (!v212)
            {
              if (v208)
              {
                *v208 = 0u;
                v208[1] = 0u;
                --*((_DWORD *)v379 - 4);
                v211 = v208;
              }
              v218 = *(_DWORD **)(v188 + 48);
              v186 = v340;
              if (v218)
                *v218 += 2;
              *(_QWORD *)v211 = v218;
              v33 = (unint64_t)v348;
              v27 = (_DWORD *)v211 + 2;
              v219 = *((unsigned int *)v211 + 6);
              v220 = *(unsigned int *)(v351 + 48);
              if ((_DWORD)v219 == -1)
              {
                v32 = v339;
                if ((_DWORD)v220 != -1)
                  goto LABEL_349;
              }
              else
              {
                if ((_DWORD)v220 == -1)
                {
                  ((void (*)(char **, _DWORD *, const WTF::StringImpl *))off_1E0FD7CC8[v219])(&v394, v27, v339);
                  *((_DWORD *)v211 + 6) = -1;
                  goto LABEL_350;
                }
LABEL_349:
                v394 = (char *)v211 + 8;
                ((void (*)(char **))off_1E0FD80E0[v220])(&v394);
              }
LABEL_350:
              if (v379)
                v221 = *((_DWORD *)v379 - 3) + 1;
              else
                v221 = 1;
              *((_DWORD *)v379 - 3) = v221;
              if (v379)
                v222 = *((_DWORD *)v379 - 3);
              else
                v222 = 0;
              v223 = (*((_DWORD *)v379 - 4) + v222);
              v224 = *((unsigned int *)v379 - 1);
              if (v224 > 0x400)
              {
                if (v224 > 2 * v223)
                  goto LABEL_301;
              }
              else
              {
                if (3 * v224 > 4 * v223)
                  goto LABEL_301;
                if (!(_DWORD)v224)
                {
                  v225 = 8;
LABEL_362:
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)&v379, v225, (WTF::StringImpl **)v211);
                  goto LABEL_301;
                }
              }
              v225 = (_DWORD)v224 << (6 * *((_DWORD *)v379 - 3) >= (2 * v224));
              goto LABEL_362;
            }
            if (!WTF::equal(v212, *(const WTF::StringImpl **)(v188 + 48), v32))
              goto LABEL_334;
            v213 = v203 + 32 * v210;
            v216 = *(_DWORD *)(v213 + 24);
            v215 = (_DWORD *)(v213 + 24);
            v214 = v216;
            v27 = v215 - 4;
            v217 = *(unsigned int *)(v351 + 48);
            if (v216 == -1)
            {
              v33 = (unint64_t)v348;
              v186 = v340;
              if ((_DWORD)v217 != -1)
                goto LABEL_364;
            }
            else
            {
              v33 = (unint64_t)v348;
              v186 = v340;
              if ((_DWORD)v217 == -1)
              {
                ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v214])(&v394, v27);
                *v215 = -1;
                goto LABEL_301;
              }
LABEL_364:
              v394 = (char *)(v215 - 4);
              ((void (*)(char **))off_1E0FD80E0[v217])(&v394);
            }
LABEL_301:
            if (++v186 == v33)
            {
              if ((v344 & 1) != 0)
              {
                v263 = *(_QWORD *)(v28 + 16);
                v264 = (uint64_t)v379;
                v379 = 0;
                v363 = 0;
                v394 = (char *)v264;
                DWORD2(v395) = 10;
                WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v263, (uint64_t)&v394);
                if (DWORD2(v395) != -1)
                  ((void (*)(WTF **, char **))off_1E0FD7CC8[DWORD2(v395)])(&v358, &v394);
                DWORD2(v395) = -1;
                WGSL::ConstantStruct::~ConstantStruct((WGSL::ConstantStruct *)&v363, v265);
              }
              goto LABEL_483;
            }
            goto LABEL_302;
          }
          if ((WTF::equal(v198, *(const WTF::StringImpl **)(v188 + 48), v32) & 1) != 0)
          {
            v195 = *(unsigned __int8 **)(v189 + 16 * v197 + 8);
            goto LABEL_316;
          }
        }
        ++k;
      }
    }
    v343 = v3;
    v125 = (_DWORD *)v8;
    v126 = *(_QWORD *)(v28 + 16);
    v127 = *(_DWORD *)(v126 + 48);
    if (v127 == 2)
      goto LABEL_240;
LABEL_280:
    v8 = (uint64_t)v125;
    v37 = a2;
    if (!v127)
      goto LABEL_273;
LABEL_281:
    v3 = v343;
    goto LABEL_53;
  }
  v121 = HIDWORD(v355);
  if (HIDWORD(v355) == (_DWORD)v355)
  {
    v122 = v345;
    v123 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v354, HIDWORD(v355) + 1, (unint64_t)v345);
    v121 = HIDWORD(v355);
    v124 = (_QWORD *)((char *)v354 + 8 * HIDWORD(v355));
  }
  else
  {
    v124 = (_QWORD *)((char *)v354 + 8 * HIDWORD(v355));
    v122 = v345;
    v123 = v345;
  }
  *v124 = *v123;
  HIDWORD(v355) = v121 + 1;
  v156 = *((unsigned __int8 *)v122 + 8);
  v343 = v3;
  switch(v156)
  {
    case 4:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v125 = v394;
      if (!v8)
        goto LABEL_239;
      break;
    case 3:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v125 = v394;
      if (!v8)
        goto LABEL_239;
      break;
    case 2:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v125 = v394;
      if (!v8)
      {
LABEL_239:
        v126 = *(_QWORD *)(v28 + 16);
        v127 = *(_DWORD *)(v126 + 48);
        if (v127 != 2)
          goto LABEL_280;
        goto LABEL_240;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1825E9D98);
  }
  if (*(_DWORD *)v8 != 2)
  {
    *(_DWORD *)v8 -= 2;
    goto LABEL_239;
  }
  WTF::StringImpl::destroy();
  v126 = *(_QWORD *)(v28 + 16);
  v127 = *(_DWORD *)(v126 + 48);
  if (v127 != 2)
    goto LABEL_280;
LABEL_240:
  v157 = HIDWORD(v355);
  if (HIDWORD(v355) == (_DWORD)v355)
  {
    v158 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v354, HIDWORD(v355) + 1, v126);
    v157 = HIDWORD(v355);
    v159 = (_QWORD *)((char *)v354 + 8 * HIDWORD(v355));
  }
  else
  {
    v159 = (_QWORD *)((char *)v354 + 8 * HIDWORD(v355));
    v158 = (_QWORD *)v126;
  }
  v160 = 0;
  *v159 = *v158;
  HIDWORD(v355) = v157 + 1;
  v161 = *(_BYTE *)(v126 + 8);
  v162 = *(_BYTE *)(v126 + 9);
  v163 = v161;
  do
  {
    ++v160;
    v164 = v163;
    v163 /= 0xAu;
  }
  while (v164 > 9);
  v165 = 0;
  v166 = *(_BYTE *)(v126 + 9);
  do
  {
    ++v165;
    v167 = v166;
    v166 /= 0xAu;
  }
  while (v167 > 9);
  if (v165 < 0)
    goto LABEL_703;
  v48 = __OFADD__(v165, 1);
  v168 = v165 + 1;
  v169 = v48;
  if (v160 < 0)
    goto LABEL_703;
  if (v169)
    goto LABEL_703;
  v48 = __OFADD__(v160, v168);
  v170 = v160 + v168;
  if (v48)
    goto LABEL_703;
  v171 = (v170 + 3);
  if (__OFADD__(v170, 3))
    goto LABEL_703;
  if (v170 == -3)
  {
    v8 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_269;
  }
  if ((v171 & 0x80000000) != 0 || (WTF::tryFastCompactMalloc((WTF *)(v171 + 20)), (v8 = (uint64_t)v394) == 0))
  {
LABEL_703:
    __break(0xC471u);
    JUMPOUT(0x1825E9DE0);
  }
  v172 = 0;
  *(_DWORD *)v394 = 2;
  *(_DWORD *)(v8 + 4) = v171;
  *(_WORD *)(v8 + 20) = 24941;
  *(_QWORD *)(v8 + 8) = v8 + 20;
  *(_DWORD *)(v8 + 16) = 4;
  *(_BYTE *)(v8 + 22) = 116;
  v173 = v161;
  do
  {
    v174 = v173;
    *((_BYTE *)&v394 + v172-- + 3) = (v173 % 0xAu) | 0x30;
    v173 /= 0xAu;
  }
  while (v174 > 9);
  if (v172 + 5 <= 4)
    memcpy((void *)(v8 + 23), (char *)&v394 + v172 + 4, -v172);
  v175 = 0;
  do
  {
    ++v175;
    v176 = v161;
    v161 /= 0xAu;
  }
  while (v176 > 9);
  v177 = 0;
  v178 = (_BYTE *)(v8 + 23 + v175);
  *v178 = 120;
  do
  {
    v179 = v162;
    *((_BYTE *)&v394 + v177-- + 3) = (v162 % 0xAu) | 0x30;
    v162 /= 0xAu;
  }
  while (v179 > 9);
  if (v177 + 5 <= 4)
    memcpy(v178 + 1, (char *)&v394 + v177 + 4, -v177);
LABEL_269:
  if (!v125)
    goto LABEL_272;
  if (*v125 == 2)
  {
    WTF::StringImpl::destroy();
    v126 = *(_QWORD *)(v28 + 16);
    v37 = a2;
    if (!*(_DWORD *)(v126 + 48))
      goto LABEL_273;
    goto LABEL_281;
  }
  *v125 -= 2;
LABEL_272:
  v126 = *(_QWORD *)(v28 + 16);
  v37 = a2;
  if (*(_DWORD *)(v126 + 48))
    goto LABEL_281;
LABEL_273:
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v394);
  v379 = (const char *)&v394;
  v380 = (uint64_t)&v394;
  v381 = (uint64_t *)&v394;
  v382 = (uint64_t *)&v394;
  v383 = (uint64_t *)&v394;
  v384 = (uint64_t *)&v394;
  v385 = (uint64_t *)&v394;
  v386 = (uint64_t *)&v394;
  v387 = (uint64_t *)&v394;
  v388 = (uint64_t *)&v394;
  v389 = (uint64_t *)&v394;
  v390 = (uint64_t *)&v394;
  v391 = (uint64_t *)&v394;
  v392 = (uint64_t *)&v394;
  v393 = (uint64_t *)&v394;
  v180 = *(unsigned int *)(v126 + 48);
  if ((_DWORD)v180 == -1)
    goto LABEL_689;
  v363 = (uint64_t *)&v379;
  ((void (*)(uint64_t **, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v180])(&v363, v126);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v394);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v394);
  v181 = (uint64_t)v379;
  v379 = 0;
  v3 = v343;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy();
      v182 = v379;
      v379 = 0;
      if (v182)
      {
        if (*(_DWORD *)v182 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v182 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  v8 = v181;
LABEL_53:
  if (v4 == 22 || v349 == 60)
  {
    v341 = v3;
    v350 = (__int128 *)((char *)v37 + 8);
    v41 = *((_QWORD *)this + 19);
    if (!v41)
      goto LABEL_397;
    v42 = *(_DWORD *)(v41 - 8);
    v43 = *(_DWORD *)(v8 + 16);
    if (v43 < 0x100)
      v44 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v8);
    else
      v44 = v43 >> 8;
    for (m = 0; ; v44 = m + v66)
    {
      v66 = v44 & v42;
      v67 = v41 + 48 * (v44 & v42);
      v68 = *(WTF **)v67;
      if (*(_QWORD *)v67 != -1)
      {
        if (!v68)
          goto LABEL_397;
        if ((WTF::equal(v68, (const WTF::StringImpl *)v8, v7) & 1) != 0)
          break;
      }
      ++m;
    }
    v69 = *((_QWORD *)this + 19);
    if (v69 && v67 == v69 + 48 * *(unsigned int *)(v69 - 4))
    {
LABEL_397:
      if (MEMORY[0x186DAB1B8](v8, "bitcast", 7))
      {
        v237 = *((unsigned int *)v37 + 21);
        if ((_DWORD)v237 != 1)
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>((uint64_t)this, v350, "bitcast expects a single argument, found ", 42, v237);
          goto LABEL_608;
        }
        if (HIDWORD(v355) != 1)
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>((uint64_t)this, v350, "bitcast expects a single template argument, found ", 51, HIDWORD(v355));
          goto LABEL_608;
        }
        if (*((_BYTE *)this + 105))
        {
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, v350, "cannot discard the result of bitcast", 37);
          goto LABEL_608;
        }
        v238 = **((_QWORD **)v37 + 9);
        v239 = *((_BYTE *)this + 104);
        *((_BYTE *)this + 105) = 0;
        WGSL::AST::Visitor::visit(this, v238);
        v240 = *((_QWORD *)this + 11);
        *(_QWORD *)(v238 + 24) = v240;
        *((_QWORD *)this + 11) = 0;
        *((_BYTE *)this + 104) = v239;
        *((_BYTE *)this + 105) = 0;
        if (!HIDWORD(v355))
        {
          __break(0xC471u);
          JUMPOUT(0x1825E9E00);
        }
        v241 = *((_QWORD *)this + 14);
        v98 = *(unsigned __int8 **)(v241 + 24);
        if (v98 == (unsigned __int8 *)v240 || (v242 = *(_QWORD *)v354, v98 == *(unsigned __int8 **)v354))
        {
LABEL_434:
          *((_QWORD *)this + 11) = v98;
          goto LABEL_608;
        }
        if (v240 && *(_DWORD *)(v240 + 48) == 10)
          v240 = *(_QWORD *)(v240 + 8);
        if (v242 && *(_DWORD *)(v242 + 48) == 1)
        {
          if (v240 && *(_DWORD *)(v240 + 48) == 1)
          {
            v243 = *(unsigned __int8 *)(v240 + 8);
            v244 = *(unsigned __int8 *)(v242 + 8);
            if (v243 != v244
              || ((v245 = *(_QWORD *)v240, v246 = *(_QWORD *)v242,
                                           !WGSL::satisfies(*(_QWORD *)v240, 0x2Cu))
               || (WGSL::satisfies(v246, 0x2Cu) & 1) == 0)
              && ((v247 = *(_QWORD *)(v241 + 88), v247 != v245) || v247 != v246))
            {
              if (v243 == 2 && (v248 = WGSL::satisfies(*(_QWORD *)v240, 0x2Cu), v244 == 4) && v248)
              {
                v249 = *(_QWORD *)v242;
              }
              else
              {
                if (v244 != 2)
                  goto LABEL_583;
                v303 = WGSL::satisfies(*(_QWORD *)v242, 0x2Cu);
                if (v243 != 4 || !v303)
                  goto LABEL_583;
                v249 = *(_QWORD *)v240;
              }
              if (v249 == *(_QWORD *)(v241 + 88))
                goto LABEL_588;
LABEL_583:
              v363 = (uint64_t *)v240;
              v394 = (char *)&v363;
              *(_QWORD *)&v395 = v241;
              *((_QWORD *)&v395 + 1) = v241;
              v396 = v241;
              v397 = v241;
              v398 = &v363;
              v399 = v241;
              v400 = &v363;
              v401 = &v363;
              v402 = &v363;
              v403 = &v363;
              v308 = *(unsigned int *)(v240 + 48);
              if ((_DWORD)v308 != -1)
              {
                v379 = (const char *)&v394;
                v309 = ((uint64_t (*)(const char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v308])(&v379, v240);
                if (v309)
                  v310 = v309;
                else
                  v310 = v240;
                v394 = "' to '";
                *(_QWORD *)&v395 = 7;
                LOBYTE(v379) = 39;
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, v350, (int8x16_t *)"cannot bitcast from '", 22, v310, (__int128 *)&v394, v242, (char *)&v379);
                goto LABEL_608;
              }
              goto LABEL_689;
            }
          }
          else if (*(_BYTE *)(v242 + 8) != 2
                 || *(_QWORD *)(v241 + 88) != *(_QWORD *)v242
                 || (WGSL::satisfies(v240, 0x2Cu) & 1) == 0)
          {
            goto LABEL_583;
          }
        }
        else
        {
          if (v240)
          {
            if (*(_DWORD *)(v240 + 48) == 1)
            {
              if (*(_BYTE *)(v240 + 8) != 2
                || *(_QWORD *)(v241 + 88) != *(_QWORD *)v240
                || !WGSL::satisfies(*(_QWORD *)v354, 0x2Cu))
              {
                goto LABEL_583;
              }
              goto LABEL_588;
            }
            v273 = (unsigned __int8 *)v240;
            while (1)
            {
              v274 = *((_DWORD *)v273 + 12);
              if (v274 != 10)
                break;
              v273 = (unsigned __int8 *)*((_QWORD *)v273 + 1);
              if (!v273)
                goto LABEL_579;
            }
            if (!v274)
            {
              v298 = *v273;
              v299 = v298 < 4 || v298 == 5;
              if (v299 && v242 != 0)
              {
                v301 = *(unsigned __int8 **)v354;
                while (1)
                {
                  v302 = *((_DWORD *)v301 + 12);
                  if (v302 != 10)
                    break;
                  v301 = (unsigned __int8 *)*((_QWORD *)v301 + 1);
                  if (!v301)
                    goto LABEL_579;
                }
                if (!v302)
                {
                  v304 = *v301;
                  if (v304 < 4 || v304 == 5)
                    goto LABEL_588;
                }
              }
            }
          }
LABEL_579:
          v306 = *(_QWORD *)(v241 + 88);
          if (v306 != v240 || v306 != v242)
            goto LABEL_583;
        }
LABEL_588:
        *(_QWORD *)(*((_QWORD *)a2 + 8) + 24) = v242;
        if (*(_BYTE *)(v238 + 56))
        {
          LOBYTE(v379) = 0;
          LODWORD(v381) = -1;
          v311 = *(unsigned int *)(v238 + 48);
          if ((_DWORD)v311 != -1)
          {
            ((void (*)(char **, const char **, uint64_t))off_1E0FD8010[v311])(&v394, &v379, v238 + 32);
            LODWORD(v381) = v311;
          }
          v312 = WTF::fastMalloc((WTF *)0x20);
          v313 = (WTF *)v312;
          *(_QWORD *)(v312 + 8) = 0;
          *(_DWORD *)v312 = 1;
          *(_QWORD *)(v312 + 16) = 0;
          *(_QWORD *)(v312 + 24) = 0;
          v363 = (uint64_t *)v312;
          if ((_DWORD)v381 == -1)
          {
            *(_DWORD *)(v312 + 24) = -1;
          }
          else
          {
            v394 = (char *)(v312 + 8);
            ((void (*)(char **))off_1E0FD80E0[v381])(&v394);
          }
          WGSL::constantBitcast(&v394, v242, &v363);
          v315 = *(unsigned int *)v313;
          if ((_DWORD)v315)
          {
            v316 = 24 * v315;
            v317 = (_DWORD *)((char *)v313 + 24);
            do
            {
              v314 = v317 - 4;
              v318 = *v317;
              if ((_DWORD)v318 != -1)
                ((void (*)(WTF **, _DWORD *))off_1E0FD7CC8[v318])(&v358, v314);
              *v317 = -1;
              v317 += 6;
              v316 -= 24;
            }
            while (v316);
          }
          WTF::fastFree(v313, v314);
          if ((_DWORD)v381 != -1)
            ((void (*)(WTF **, const char **))off_1E0FD7CC8[v381])(&v358, &v379);
          if ((_DWORD)v397)
          {
            if ((_DWORD)v397 != 1)
              goto LABEL_689;
            WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v350, v395);
          }
          else
          {
            WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v242, (uint64_t)&v395);
          }
          if ((_DWORD)v397 != -1)
            ((void (*)(const char **, __int128 *))off_1E0FD7DD0[v397])(&v379, &v395);
        }
        *((_QWORD *)this + 11) = v242;
        goto LABEL_608;
      }
      if (v8)
      {
        v250 = *(_DWORD *)(v8 + 4);
        *(_DWORD *)v8 += 2;
        v251 = v341;
        if (v250 < 0)
          goto LABEL_639;
        v48 = __OFADD__(v250, 1);
        v252 = v250 + 1;
        if (v48)
          goto LABEL_639;
      }
      else
      {
        v251 = v341;
        v252 = 1;
      }
      if (!__OFADD__(v252, 24))
      {
        v253 = !v8 || (*(_BYTE *)(v8 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v379, v252 + 24, v253, (int8x16_t *)"unresolved call target '", 0x18u, v8, 39);
        if (v379)
        {
          v394 = (char *)v379;
          v395 = *(_OWORD *)(v251 + 8);
          v254 = *((unsigned int *)this + 33);
          if ((_DWORD)v254 == *((_DWORD *)this + 32))
          {
            v255 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v254 + 1, (unint64_t)&v394);
            v256 = *((_QWORD *)this + 15) + 24 * *((unsigned int *)this + 33);
            v257 = *(_QWORD *)v255;
            *(_QWORD *)v255 = 0;
            *(_QWORD *)v256 = v257;
            *(_OWORD *)(v256 + 8) = *(_OWORD *)(v255 + 8);
            v258 = v394;
            ++*((_DWORD *)this + 33);
            v394 = 0;
            if (v258)
            {
              if (*(_DWORD *)v258 == 2)
              {
                WTF::StringImpl::destroy();
                if (!v8)
                  goto LABEL_441;
              }
              else
              {
                *(_DWORD *)v258 -= 2;
                if (!v8)
                  goto LABEL_441;
              }
              goto LABEL_438;
            }
          }
          else
          {
            v259 = *((_QWORD *)this + 15) + 24 * v254;
            *(_QWORD *)v259 = v379;
            *(_OWORD *)(v259 + 8) = v395;
            ++*((_DWORD *)this + 33);
            v394 = 0;
          }
          if (!v8)
          {
LABEL_441:
            *((_QWORD *)this + 11) = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
            goto LABEL_608;
          }
LABEL_438:
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v8 -= 2;
          goto LABEL_441;
        }
      }
LABEL_639:
      __break(0xC471u);
      JUMPOUT(0x1825E9958);
    }
    v361 = 0;
    v362 = 0;
    v70 = *((unsigned int *)v37 + 21);
    if ((_DWORD)v70)
    {
      if (v70 >> 29)
        goto LABEL_707;
      v71 = (WTF *)WTF::fastMalloc((WTF *)(8 * v70));
      LODWORD(v362) = v70;
      v361 = v71;
      if (*((_DWORD *)v37 + 21))
      {
        v72 = 0;
        do
        {
          while (1)
          {
            v394 = 0;
            v75 = *(_QWORD *)(*((_QWORD *)v37 + 9) + 8 * v72);
            v76 = *((_WORD *)this + 52);
            *((_BYTE *)this + 105) = 0;
            WGSL::AST::Visitor::visit(this, v75);
            v77 = *((_QWORD *)this + 11);
            *(_QWORD *)(v75 + 24) = v77;
            *((_QWORD *)this + 11) = 0;
            *((_WORD *)this + 52) = v76;
            v394 = (char *)v77;
            if (*(_QWORD *)(*((_QWORD *)this + 14) + 24) == v77)
            {
              *((_QWORD *)this + 11) = v77;
              goto LABEL_391;
            }
            v78 = HIDWORD(v362);
            if (HIDWORD(v362) != (_DWORD)v362)
              break;
            v73 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v361, HIDWORD(v362) + 1, (unint64_t)&v394);
            v74 = HIDWORD(v362);
            *((_QWORD *)v361 + HIDWORD(v362)) = *v73;
            HIDWORD(v362) = v74 + 1;
            if (++v72 >= *((unsigned int *)v37 + 21))
              goto LABEL_118;
          }
          *((_QWORD *)v361 + HIDWORD(v362)) = v77;
          HIDWORD(v362) = v78 + 1;
          ++v72;
        }
        while (v72 < *((unsigned int *)v37 + 21));
      }
    }
LABEL_118:
    WGSL::resolveOverloads(*((_QWORD *)this + 14), (uint64_t *)(v67 + 32), (uint64_t)&v361, (uint64_t)&v354, (uint64_t)&v358);
    if (!v360)
    {
      v131 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v394);
      v132 = HIDWORD(v362);
      if (HIDWORD(v362))
      {
        v133 = v361;
        v134 = *(_QWORD *)v361;
        v379 = (const char *)(*((uint64_t (**)(uint64_t))v394 + 4))(v131);
        v380 = (uint64_t)v379;
        v381 = (uint64_t *)v379;
        v382 = (uint64_t *)v379;
        v383 = (uint64_t *)v379;
        v384 = (uint64_t *)v379;
        v385 = (uint64_t *)v379;
        v386 = (uint64_t *)v379;
        v387 = (uint64_t *)v379;
        v388 = (uint64_t *)v379;
        v389 = (uint64_t *)v379;
        v390 = (uint64_t *)v379;
        v391 = (uint64_t *)v379;
        v392 = (uint64_t *)v379;
        v393 = (uint64_t *)v379;
        v135 = *(unsigned int *)(v134 + 48);
        if ((_DWORD)v135 == -1)
          goto LABEL_689;
        v363 = (uint64_t *)&v379;
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v135])(&v363, v134);
        (*((void (**)(char **))v394 + 5))(&v394);
        if ((_DWORD)v132 != 1)
        {
          v136 = (uint64_t *)((char *)v133 + 8);
          v137 = 8 * v132 - 8;
          do
          {
            v138 = *v136;
            (*((void (**)(char **))v394 + 4))(&v394);
            WTF::printInternal();
            (*((void (**)(char **))v394 + 5))(&v394);
            v379 = (const char *)(*((uint64_t (**)(char **))v394 + 4))(&v394);
            v380 = (uint64_t)v379;
            v381 = (uint64_t *)v379;
            v382 = (uint64_t *)v379;
            v383 = (uint64_t *)v379;
            v384 = (uint64_t *)v379;
            v385 = (uint64_t *)v379;
            v386 = (uint64_t *)v379;
            v387 = (uint64_t *)v379;
            v388 = (uint64_t *)v379;
            v389 = (uint64_t *)v379;
            v390 = (uint64_t *)v379;
            v391 = (uint64_t *)v379;
            v392 = (uint64_t *)v379;
            v393 = (uint64_t *)v379;
            v139 = *(unsigned int *)(v138 + 48);
            if ((_DWORD)v139 == -1)
              goto LABEL_689;
            v363 = (uint64_t *)&v379;
            ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v139])(&v363, v138);
            (*((void (**)(char **))v394 + 5))(&v394);
            ++v136;
            v137 -= 8;
          }
          while (v137);
        }
      }
      WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v379);
      if (HIDWORD(v355))
      {
        (*((void (**)(const char **))v379 + 4))(&v379);
        WTF::printInternal();
        (*((void (**)(const char **))v379 + 5))(&v379);
        v140 = HIDWORD(v355);
        if (HIDWORD(v355))
        {
          v141 = v354;
          v142 = *(_QWORD *)v354;
          v363 = (uint64_t *)(*((uint64_t (**)(const char **))v379 + 4))(&v379);
          v364 = (uint64_t)v363;
          v365 = (uint64_t)v363;
          v366 = (uint64_t)v363;
          v367 = (uint64_t)v363;
          v368 = (uint64_t)v363;
          v369 = (uint64_t)v363;
          v370 = (uint64_t)v363;
          v371 = (uint64_t)v363;
          v372 = (uint64_t)v363;
          v373 = (uint64_t)v363;
          v374 = (uint64_t)v363;
          v375 = (uint64_t)v363;
          v376 = (uint64_t)v363;
          v377 = (uint64_t)v363;
          v143 = *(unsigned int *)(v142 + 48);
          if ((_DWORD)v143 == -1)
            goto LABEL_689;
          v378 = (uint64_t *)&v363;
          ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v143])(&v378, v142);
          (*((void (**)(const char **))v379 + 5))(&v379);
          if ((_DWORD)v140 != 1)
          {
            v144 = (uint64_t *)((char *)v141 + 8);
            v145 = 8 * v140 - 8;
            do
            {
              v146 = *v144;
              (*((void (**)(const char **))v379 + 4))(&v379);
              WTF::printInternal();
              (*((void (**)(const char **))v379 + 5))(&v379);
              v363 = (uint64_t *)(*((uint64_t (**)(const char **))v379 + 4))(&v379);
              v364 = (uint64_t)v363;
              v365 = (uint64_t)v363;
              v366 = (uint64_t)v363;
              v367 = (uint64_t)v363;
              v368 = (uint64_t)v363;
              v369 = (uint64_t)v363;
              v370 = (uint64_t)v363;
              v371 = (uint64_t)v363;
              v372 = (uint64_t)v363;
              v373 = (uint64_t)v363;
              v374 = (uint64_t)v363;
              v375 = (uint64_t)v363;
              v376 = (uint64_t)v363;
              v377 = (uint64_t)v363;
              v147 = *(unsigned int *)(v146 + 48);
              if ((_DWORD)v147 == -1)
                goto LABEL_689;
              v378 = (uint64_t *)&v363;
              ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v147])(&v378, v146);
              (*((void (**)(const char **))v379 + 5))(&v379);
              ++v144;
              v145 -= 8;
            }
            while (v145);
          }
        }
        (*((void (**)(const char **))v379 + 4))(&v379);
        WTF::printInternal();
        (*((void (**)(const char **))v379 + 5))(&v379);
      }
      WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v379);
      v357 = 40;
      WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v394);
      v356 = 41;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>((uint64_t)this, v350, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"initializer", 12, 32, v8, (uint64_t *)&v363, &v357, (uint64_t *)&v378, &v356);
      v148 = v378;
      v378 = 0;
      if (v148)
      {
        if (*(_DWORD *)v148 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v148 -= 2;
      }
      v183 = v363;
      v363 = 0;
      if (v183)
      {
        if (*(_DWORD *)v183 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v183 -= 2;
      }
      v77 = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v379);
      WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v394);
      goto LABEL_391;
    }
    if (*((_BYTE *)this + 105) && *(_BYTE *)(v67 + 9))
    {
      LOBYTE(v394) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>((uint64_t)this, v350, (int8x16_t *)"ignoring return value of builtin '", 35, v8, (char *)&v394);
    }
    v79 = *((unsigned int *)v37 + 21);
    if ((_DWORD)v79)
    {
      v80 = (uint64_t *)((char *)v358 + 8);
      v81 = *(unsigned int *)v358;
      v82 = (uint64_t *)*((_QWORD *)v37 + 9);
      do
      {
        if (!v81)
          goto LABEL_710;
        v84 = *v80++;
        v83 = v84;
        v85 = *v82++;
        *(_QWORD *)(v85 + 24) = v83;
        --v81;
        --v79;
      }
      while (v79);
    }
    v77 = v359;
    *((_QWORD *)this + 11) = v359;
    if ((*(unsigned int (**)(WGSL::AST::CallExpression *))(*(_QWORD *)v37 + 16))(v37) == 20)
    {
      *((_BYTE *)v37 + 88) = *(_BYTE *)(v67 + 8) == 1;
      *((_BYTE *)v37 + 89) = *(_BYTE *)(v67 + 24);
    }
    v86 = *((unsigned int *)v37 + 21);
    if (!(_DWORD)v86)
    {
      v379 = 0;
      v129 = *(void (**)(char **__return_ptr, uint64_t, const char **))(v67 + 16);
      v37 = a2;
      if (v129)
        goto LABEL_230;
      v130 = 0;
      goto LABEL_377;
    }
    v87 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v86 + 8));
    *v87 = v86;
    bzero(v87 + 2, 24 * ((24 * v86 - 24) / 0x18uLL) + 24);
    v88 = 0;
    v379 = (const char *)v87;
    v347 = (WTF *)v87;
    v89 = v87 + 6;
    v90 = 1;
    while (1)
    {
      if (v88 >= *((unsigned int *)a2 + 21))
      {
        __break(0xC471u);
        JUMPOUT(0x1825E9DD8);
      }
      v91 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v88);
      if (*(_BYTE *)(v91 + 56)
        && WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v91 + 8), *(_QWORD *)(v91 + 24), v91 + 32))
      {
        if (!*(_BYTE *)(v91 + 56))
          goto LABEL_706;
        if (v88 >= *(unsigned int *)v347)
        {
          __break(0xC471u);
          JUMPOUT(0x1825E9808);
        }
        v27 = v89 - 4;
        v92 = *v89;
        v93 = *(unsigned int *)(v91 + 48);
        if ((_DWORD)v92 == -1)
        {
          if ((_DWORD)v93 != -1)
          {
LABEL_141:
            v394 = (char *)(v89 - 4);
            ((void (*)(char **))off_1E0FD80E0[v93])(&v394);
          }
        }
        else
        {
          if ((_DWORD)v93 != -1)
            goto LABEL_141;
          ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v92])(&v394, v27);
          *v89 = -1;
        }
      }
      else
      {
        v90 = 0;
      }
      ++v88;
      v89 += 6;
      if (v86 == v88)
      {
        v129 = *(void (**)(char **__return_ptr, uint64_t, const char **))(v67 + 16);
        if (v129)
        {
          v37 = a2;
          v130 = v347;
          if ((v90 & 1) == 0)
          {
            v379 = 0;
            goto LABEL_383;
          }
LABEL_230:
          v129(&v394, v77, &v379);
          if ((_DWORD)v397)
          {
            if ((_DWORD)v397 == 1)
            {
              WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v350, v395);
              goto LABEL_366;
            }
LABEL_689:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_690:
            WTF::StringImpl::destroy();
            goto LABEL_691;
          }
          WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)v37, v77, (uint64_t)&v395);
LABEL_366:
          if ((_DWORD)v397 != -1)
            ((void (*)(uint64_t **, __int128 *))off_1E0FD7DD0[v397])(&v363, &v395);
          v130 = (WTF *)v379;
LABEL_382:
          v379 = 0;
          if (v130)
          {
LABEL_383:
            v232 = *(unsigned int *)v130;
            if ((_DWORD)v232)
            {
              v233 = 24 * v232;
              v234 = (_DWORD *)((char *)v130 + 24);
              do
              {
                v27 = v234 - 4;
                v235 = *v234;
                if ((_DWORD)v235 != -1)
                  ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v235])(&v394, v27);
                *v234 = -1;
                v234 += 6;
                v233 -= 24;
              }
              while (v233);
            }
            WTF::fastFree(v130, v27);
            if (v360)
              goto LABEL_389;
          }
          else
          {
LABEL_389:
            if (v358)
              WTF::fastFree(v358, v27);
          }
LABEL_391:
          v236 = v361;
          if (v361)
          {
            v361 = 0;
            LODWORD(v362) = 0;
            WTF::fastFree(v236, v27);
          }
          if (v77)
          {
            *(_QWORD *)(v341 + 24) = v77;
            if (*(_QWORD *)(*((_QWORD *)this + 14) + 24) == v77)
              goto LABEL_608;
            if (MEMORY[0x186DAB1B8](v8, "workgroupUniformLoad", 20))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 13) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "frexp", 5))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 16) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "modf", 4))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 17) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "atomicCompareExchangeWeak", 25))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 18) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "dot", 3))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 20) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "firstLeadingBit", 15))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 21) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "firstTrailingBit", 16))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 22) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "sign", 4))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 23) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "dot4I8Packed", 12))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 27) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "dot4U8Packed", 12))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 28) = 1;
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "extractBits", 11))
            {
              *(_BYTE *)(*((_QWORD *)this + 10) + 29) = 1;
              goto LABEL_608;
            }
            if ((MEMORY[0x186DAB1B8](v8, "textureGather", 13) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureGatherCompare", 20) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureSample", 13) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureSampleBias", 17) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureSampleCompare", 20) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureSampleCompareLevel", 25) & 1) == 0
              && (MEMORY[0x186DAB1B8](v8, "textureSampleGrad", 17) & 1) == 0
              && !MEMORY[0x186DAB1B8](v8, "textureSampleLevel", 18))
            {
              goto LABEL_608;
            }
            if (MEMORY[0x186DAB1B8](v8, "textureGather", 13))
            {
              if (*((_DWORD *)a2 + 21))
              {
                v323 = (uint64_t *)*((_QWORD *)a2 + 9);
                v324 = *v323;
                if (WGSL::satisfies(*(_QWORD *)(*v323 + 24), 0xCu))
                {
                  if (*(_BYTE *)(v324 + 56))
                  {
                    v325 = (WTF::String *)WGSL::ConstantValue::integerValue((WGSL::ConstantValue *)(v324 + 32));
                    if ((unint64_t)v325 >= 4)
                    {
                      WTF::String::number(v325);
                      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String>((uint64_t)this, (__int128 *)(v324 + 8), (int8x16_t *)"the component argument must be at least 0 and at most 3. component is ", 71, (uint64_t *)&v394);
                      v326 = v394;
                      v394 = 0;
                      if (v326)
                      {
                        if (*(_DWORD *)v326 == 2)
                          WTF::StringImpl::destroy();
                        else
                          *(_DWORD *)v326 -= 2;
                      }
                    }
                  }
                  else
                  {
                    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(v324 + 8), "the component argument must be a const-expression", 50);
                  }
                }
                goto LABEL_670;
              }
LABEL_710:
              __break(0xC471u);
              JUMPOUT(0x1825E94B8);
            }
LABEL_670:
            v328 = *((unsigned int *)a2 + 21);
            if (!(_DWORD)v328)
            {
              __break(0xC471u);
              JUMPOUT(0x1825E9E08);
            }
            v329 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v328 - 8);
            v330 = *(_QWORD *)(v329 + 24);
            if (!v330
              || *(_DWORD *)(v330 + 48) != 1
              || *(_BYTE *)(v330 + 8) != 2
              || *(_QWORD *)v330 != *(_QWORD *)(*((_QWORD *)this + 14) + 64))
            {
              goto LABEL_608;
            }
            if (!*(_BYTE *)(v329 + 56))
            {
              WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 0, (__int128 *)(v329 + 8), "the offset argument must be a const-expression", 47);
              goto LABEL_608;
            }
            if (*(_DWORD *)(v329 + 48) != 8)
              goto LABEL_689;
            v331 = *(_DWORD **)(v329 + 32);
            v332 = v331 + 2;
            if (*v331)
            {
              if (v331[6] != 3)
                goto LABEL_689;
              if ((*v332 - 8) <= 0xFFFFFFEF)
              {
                v333 = 0;
                goto LABEL_686;
              }
              if (*v331 != 1)
              {
                if (v331[12] != 3)
                  goto LABEL_689;
                v335 = v331[8];
                v334 = v331 + 8;
                if ((v335 - 8) >= 0xFFFFFFF0)
                  goto LABEL_608;
                v333 = 1;
                v332 = v334;
LABEL_686:
                v336 = (__int128 *)(v329 + 8);
                WTF::String::number((WTF::String *)v333);
                v394 = " is ";
                *(_QWORD *)&v395 = 5;
                WTF::String::number((WTF::String *)*v332);
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)this, v336, (unint64_t)"each component of the offset argument must be at least -8 and at most 7. offset component ", 91, (uint64_t *)&v379, (__int128 *)&v394, (uint64_t *)&v363);
                v337 = v363;
                v363 = 0;
                if (v337)
                {
                  if (*(_DWORD *)v337 == 2)
                    goto LABEL_690;
                  *(_DWORD *)v337 -= 2;
                }
LABEL_691:
                v338 = v379;
                v379 = 0;
                if (v338)
                {
                  if (*(_DWORD *)v338 == 2)
                    WTF::StringImpl::destroy();
                  else
                    *(_DWORD *)v338 -= 2;
                }
                goto LABEL_608;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x1825E9DD0);
          }
          goto LABEL_397;
        }
        v37 = a2;
        v130 = v347;
LABEL_377:
        v230 = *((unsigned __int8 *)this + 104);
        if (v230 <= 2)
        {
          if (v230 == 2)
            v231 = "override";
          else
            v231 = "constant";
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 0, v350, "cannot call function from ", 27, (uint64_t)v231, 9, (uint64_t)" context", 9);
          v77 = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
        }
        goto LABEL_382;
      }
    }
  }
  if (v346 != 59)
  {
    __break(0xC471u);
    JUMPOUT(0x1825E9850);
  }
  v38 = *(_QWORD *)(v3 + 64);
  if (!v38)
  {
    v52 = *((unsigned int *)v37 + 21);
    if (!(_DWORD)v52)
    {
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)v37 + 8), "cannot infer array element type from constructor", 49);
      goto LABEL_608;
    }
    v342 = v3;
    v40 = 0;
    v53 = (uint64_t *)*((_QWORD *)v37 + 9);
    v54 = *((unsigned int *)v37 + 21);
    v55 = 8 * v52;
    while (1)
    {
      v56 = *v53;
      v57 = *((_WORD *)this + 52);
      *((_BYTE *)this + 105) = 0;
      WGSL::AST::Visitor::visit(this, v56);
      v58 = *((_QWORD *)this + 11);
      *(_QWORD *)(v56 + 24) = v58;
      *((_QWORD *)this + 11) = 0;
      *((_WORD *)this + 52) = v57;
      if (v58 && *(_DWORD *)(v58 + 48) == 10)
        v58 = *(_QWORD *)(v58 + 8);
      if (v40)
      {
        if (v40 == (unsigned __int8 *)v58)
          goto LABEL_80;
        v59 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
        v60 = v59 == v40 || v59 == (unsigned __int8 *)v58;
        if (v60 || WGSL::conversionRank((unsigned __int8 *)v58, v40) != -1)
          goto LABEL_80;
        v61 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
        if (v61 != (unsigned __int8 *)v58 && v61 != v40)
        {
          v63 = WGSL::conversionRank(v40, (unsigned __int8 *)v58);
          v40 = (unsigned __int8 *)v58;
          if (v63 == -1)
          {
            WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)(v56 + 8), "cannot infer common array element type from constructor arguments", 66);
            goto LABEL_608;
          }
          goto LABEL_80;
        }
      }
      else
      {
        v64 = *(unsigned int *)(v58 + 48);
        if ((_DWORD)v64 == -1)
          goto LABEL_689;
        v394 = (char *)&v379;
        if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v64])(&v394, v58) & 1) == 0)
        {
          v394 = "' cannot be used as an element type of an array";
          *(_QWORD *)&v395 = 48;
          WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (_OWORD *)(v342 + 8), 39, v58, &v394);
          goto LABEL_608;
        }
      }
      v40 = (unsigned __int8 *)v58;
LABEL_80:
      ++v53;
      v55 -= 8;
      if (!v55)
      {
        v37 = a2;
        v104 = *((unsigned int *)a2 + 21);
        if (!(_DWORD)v104)
        {
          v113 = v54;
          goto LABEL_521;
        }
        v105 = *((_QWORD *)a2 + 9);
        v106 = (v104 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v106)
        {
          v107 = v106 + 1;
          v108 = (v106 + 1) & 0x3FFFFFFFFFFFFFFELL;
          v109 = (uint64_t *)(v105 + 8 * v108);
          v110 = (uint64_t *)(v105 + 8);
          v111 = v108;
          do
          {
            v112 = *v110;
            *(_QWORD *)(*(v110 - 1) + 24) = v40;
            *(_QWORD *)(v112 + 24) = v40;
            v110 += 2;
            v111 -= 2;
          }
          while (v111);
          v113 = v54;
          if (v107 == v108)
            goto LABEL_521;
        }
        else
        {
          v109 = (uint64_t *)*((_QWORD *)a2 + 9);
          v113 = v54;
        }
        v184 = (uint64_t *)(v105 + 8 * v104);
        do
        {
          v185 = *v109++;
          *(_QWORD *)(v185 + 24) = v40;
        }
        while (v109 != v184);
        goto LABEL_521;
      }
    }
  }
  if (!*(_QWORD *)(v3 + 72))
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)v37 + 8), "cannot construct a runtime-sized array", 39);
    goto LABEL_608;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v38 + 16))(*(_QWORD *)(v3 + 64)) == 22)
  {
    v40 = (unsigned __int8 *)WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v38 + 64), v39);
    *((_QWORD *)this + 11) = v40;
    if (*((_DWORD *)v40 + 12) != 13)
      goto LABEL_145;
    goto LABEL_144;
  }
  WGSL::AST::Visitor::visit(this, v38);
  v40 = (unsigned __int8 *)*((_QWORD *)this + 11);
  if (*((_DWORD *)v40 + 12) == 13)
  {
LABEL_144:
    v394 = "' requires template arguments";
    *(_QWORD *)&v395 = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v38 + 8), (int8x16_t *)"type '", 7, (uint64_t)v40, &v394);
    v40 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
  }
LABEL_145:
  *(_QWORD *)(v38 + 24) = v40;
  *((_QWORD *)this + 11) = 0;
  v94 = *(_QWORD *)(v3 + 72);
  v95 = *((_WORD *)this + 52);
  *((_BYTE *)this + 105) = 0;
  WGSL::AST::Visitor::visit(this, v94);
  v96 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *(_QWORD *)(v94 + 24) = v96;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v95;
  v97 = *((_QWORD *)this + 14);
  v98 = *(unsigned __int8 **)(v97 + 24);
  if (v98 == v40 || v98 == v96)
    goto LABEL_434;
  v99 = *(unsigned __int8 **)(v97 + 64);
  if (v99 != v96 && v98 != v99 && WGSL::conversionRank(v96, v99) == -1)
  {
    v226 = *((_QWORD *)this + 14);
    v227 = *(unsigned __int8 **)(v226 + 72);
    if (v227 != v96)
    {
      v228 = *(unsigned __int8 **)(v226 + 24);
      if (v228 != v227 && v228 != v96 && WGSL::conversionRank(v96, v227) == -1)
      {
        LOBYTE(v394) = 39;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (__int128 *)(v3 + 8), "array count must be an i32 or u32 value, found '", 49, (uint64_t)v96, (char *)&v394);
        goto LABEL_608;
      }
    }
  }
  v100 = *((unsigned int *)v40 + 12);
  if ((_DWORD)v100 == -1)
    goto LABEL_689;
  v394 = (char *)&v379;
  if ((((uint64_t (*)(char **, unsigned __int8 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v100])(&v394, v40) & 1) == 0)
  {
    v394 = "' cannot be used as an element type of an array";
    *(_QWORD *)&v395 = 48;
    WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (_OWORD *)(v3 + 8), 39, (uint64_t)v40, &v394);
    goto LABEL_608;
  }
  v101 = *(_QWORD *)(v3 + 72);
  LOBYTE(v394) = 0;
  LOBYTE(v396) = 0;
  if (!*(_BYTE *)(v101 + 56))
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)v37 + 8), "array must have constant size in order to be constructed", 57);
    LODWORD(v103) = 0;
    v229 = 0;
    if (!(_BYTE)v396)
      goto LABEL_519;
    goto LABEL_517;
  }
  DWORD2(v395) = -1;
  v102 = *(unsigned int *)(v101 + 48);
  if ((_DWORD)v102 == -1)
  {
    LOBYTE(v396) = 1;
    goto LABEL_696;
  }
  ((void (*)(const char **, char **, uint64_t))off_1E0FD8010[v102])(&v379, &v394, v101 + 32);
  DWORD2(v395) = v102;
  LOBYTE(v396) = 1;
  switch((_DWORD)v102)
  {
    case 5:
      v103 = (unint64_t)v394;
      break;
    case 4:
      v103 = v394;
      break;
    case 3:
      v103 = (int)v394;
      break;
    default:
LABEL_696:
      __break(0xC471u);
      JUMPOUT(0x1825E9D78);
  }
  if ((uint64_t)v103 <= 0)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)v37 + 8), "array count must be greater than 0", 35);
    LODWORD(v103) = 0;
    v229 = 0;
    if (!(_BYTE)v396)
      goto LABEL_519;
    goto LABEL_517;
  }
  if (v103 >= 0x10000)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral>((uint64_t)this, (__int128 *)((char *)v37 + 8), "array count (", 14, v103, ") must be less than 65536", 26);
    LODWORD(v103) = 0;
    v229 = 0;
    if (!(_BYTE)v396)
      goto LABEL_519;
    goto LABEL_517;
  }
  v260 = *((unsigned int *)v37 + 21);
  if ((_DWORD)v260 && (_DWORD)v260 != (_DWORD)v103)
  {
    if (v103 <= v260)
      v261 = "many";
    else
      v261 = "few";
    if (v103 > v260)
      v262 = 4;
    else
      v262 = 5;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>((uint64_t)this, (__int128 *)((char *)v37 + 8), "array constructor has too ", 27, v261, v262, " elements: expected ", 21, v103, ", found ", 9, *((unsigned int *)v37 + 21));
    v229 = 0;
    if (!(_BYTE)v396)
      goto LABEL_519;
    goto LABEL_517;
  }
  if (!(_DWORD)v260)
  {
LABEL_516:
    v229 = 1;
    if (!(_BYTE)v396)
      goto LABEL_519;
    goto LABEL_517;
  }
  v275 = (uint64_t *)*((_QWORD *)v37 + 9);
  v276 = 8 * v260;
  while (1)
  {
    v277 = *v275;
    v278 = *((_WORD *)this + 52);
    *((_BYTE *)this + 105) = 0;
    WGSL::AST::Visitor::visit(this, v277);
    v279 = (unsigned __int8 *)*((_QWORD *)this + 11);
    *(_QWORD *)(v277 + 24) = v279;
    *((_QWORD *)this + 11) = 0;
    *((_WORD *)this + 52) = v278;
    if (v40 != v279)
    {
      v280 = *(unsigned __int8 **)(*((_QWORD *)this + 14) + 24);
      v281 = v280 == v40 || v280 == v279;
      if (!v281 && WGSL::conversionRank(v279, v40) == -1)
        break;
    }
    *(_QWORD *)(v277 + 24) = v40;
    ++v275;
    v276 -= 8;
    if (!v276)
      goto LABEL_516;
  }
  v379 = "' cannot be used to construct an array of '";
  v380 = 44;
  LOBYTE(v363) = 39;
  WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, (__int128 *)(v277 + 8), 39, (uint64_t)v279, (uint64_t)&v379, (uint64_t)v40, (char *)&v363);
  v229 = 0;
  if ((_BYTE)v396)
  {
LABEL_517:
    if (DWORD2(v395) != -1)
      ((void (*)(const char **, char **))off_1E0FD7CC8[DWORD2(v395)])(&v379, &v394);
  }
LABEL_519:
  if (!v229)
    goto LABEL_608;
  v113 = v103;
LABEL_521:
  *((_BYTE *)v37 + 88) = 1;
  v282 = WGSL::TypeStore::arrayType(*((_QWORD *)this + 14), (uint64_t)v40, v113, 1);
  v283 = v282;
  *((_QWORD *)this + 11) = v282;
  v284 = *((unsigned int *)v37 + 21);
  if (!(_DWORD)v284)
  {
    v293 = *(unsigned int *)(v282 + 48);
    if ((_DWORD)v293 == -1)
      goto LABEL_689;
    v379 = (const char *)&v363;
    ((void (*)(char **__return_ptr, const char **, uint64_t))off_1E0FD8068[v293])(&v394, &v379, v282);
    WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)v37, v283, (uint64_t)&v394);
    v292 = DWORD2(v395);
    if (DWORD2(v395) == -1)
      goto LABEL_608;
LABEL_541:
    ((void (*)(const char **, char **))off_1E0FD7CC8[v292])(&v379, &v394);
    goto LABEL_608;
  }
  v352 = v282;
  v285 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v284 + 8));
  *v285 = v284;
  v286 = v285 + 6;
  bzero(v285 + 2, 24 * ((24 * v284 - 24) / 0x18uLL) + 24);
  v287 = 0;
  v288 = 1;
  do
  {
    if (v287 >= *((unsigned int *)a2 + 21))
    {
      __break(0xC471u);
      JUMPOUT(0x1825E9DB0);
    }
    v289 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * v287);
    if (!*(_BYTE *)(v289 + 56)
      || !WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v289 + 8), *(_QWORD *)(v289 + 24), v289 + 32))
    {
      v288 = 0;
      goto LABEL_524;
    }
    if (!*(_BYTE *)(v289 + 56))
      goto LABEL_706;
    if (v287 >= *v285)
    {
      __break(0xC471u);
      JUMPOUT(0x1825E97E8);
    }
    v27 = v286 - 4;
    v290 = *v286;
    v291 = *(unsigned int *)(v289 + 48);
    if ((_DWORD)v290 == -1)
    {
      if ((_DWORD)v291 == -1)
        goto LABEL_524;
    }
    else if ((_DWORD)v291 == -1)
    {
      ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v290])(&v394, v27);
      *v286 = -1;
      goto LABEL_524;
    }
    v394 = (char *)(v286 - 4);
    ((void (*)(char **))off_1E0FD80E0[v291])(&v394);
LABEL_524:
    ++v287;
    v286 += 6;
  }
  while (v284 != v287);
  if ((v288 & 1) == 0)
  {
    v294 = *v285;
    if ((_DWORD)v294)
    {
      v295 = 24 * v294;
      v296 = v285 + 6;
      do
      {
        v27 = v296 - 4;
        v297 = *v296;
        if ((_DWORD)v297 != -1)
          ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v297])(&v394, v27);
        *v296 = -1;
        v296 += 6;
        v295 -= 24;
      }
      while (v295);
    }
    v272 = (WTF *)v285;
    goto LABEL_548;
  }
  if (v284 >= 0x800)
  {
    WTF::String::number((WTF::String *)0x7FF);
    v394 = " elements";
    *(_QWORD *)&v395 = 10;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t)this, (__int128 *)((char *)a2 + 8), (int8x16_t *)"constant array cannot have more than ", 38, (uint64_t *)&v379, (uint64_t)&v394);
    v327 = v379;
    v379 = 0;
    if (v327)
    {
      if (*(_DWORD *)v327 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v327 -= 2;
    }
  }
  v394 = (char *)v285;
  DWORD2(v395) = 7;
  WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v352, (uint64_t)&v394);
  v292 = DWORD2(v395);
  if (DWORD2(v395) != -1)
    goto LABEL_541;
LABEL_608:
  if (!v8)
    goto LABEL_611;
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy();
    result = v354;
    if (v354)
      goto LABEL_612;
  }
  else
  {
    *(_DWORD *)v8 -= 2;
LABEL_611:
    result = v354;
    if (v354)
    {
LABEL_612:
      v354 = 0;
      LODWORD(v355) = 0;
      return (WTF *)WTF::fastFree(result, v27);
    }
  }
  return result;
}

uint64_t WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)();
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  int v14;
  uint64_t v15;

  v13[0] = 0;
  v14 = -1;
  v7 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v7 != -1)
  {
    v8 = off_1E0FD8010[v7];
    ((void (*)(uint64_t *, _BYTE *, uint64_t))v8)(&v15, v13, a4);
    v14 = v7;
    v9 = (_BYTE *)(a2 + 56);
    v10 = a2 + 32;
    if (*(_BYTE *)(a2 + 56))
    {
      v15 = a2 + 32;
      ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E0FD80E0[v7])(&v15, a2 + 32, v13);
      goto LABEL_10;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = -1;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))v8)(&v15, a2 + 32, v13);
    *(_DWORD *)(a2 + 48) = v7;
    goto LABEL_9;
  }
  v9 = (_BYTE *)(a2 + 56);
  v10 = a2 + 32;
  if (!*(_BYTE *)(a2 + 56))
  {
    *(_BYTE *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = -1;
LABEL_9:
    *v9 = 1;
    goto LABEL_10;
  }
  v11 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v11 == -1)
    goto LABEL_12;
  ((void (*)(uint64_t *, uint64_t))off_1E0FD7CC8[v11])(&v15, a2 + 32);
  *(_DWORD *)(a2 + 48) = -1;
LABEL_10:
  if (v14 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E0FD7CC8[v14])(&v15, v13);
LABEL_12:
  v14 = -1;
  return WGSL::TypeChecker::convertValue(a1, (__int128 *)(a2 + 8), a3, v10);
}

void WGSL::ConstantStruct::~ConstantStruct(WGSL::ConstantStruct *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = *(_QWORD *)this;
      do
      {
        v5 = *(_DWORD **)v4;
        if (*(_QWORD *)v4 != -1)
        {
          v6 = *(unsigned int *)(v4 + 24);
          if ((_DWORD)v6 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD7CC8[v6])(&v7, v4 + 8);
            v5 = *(_DWORD **)v4;
          }
          *(_DWORD *)(v4 + 24) = -1;
          *(_QWORD *)v4 = 0;
          if (v5)
          {
            if (*v5 == 2)
              WTF::StringImpl::destroy();
            else
              *v5 -= 2;
          }
        }
        v4 += 32;
        --v3;
      }
      while (v3);
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

uint64_t WGSL::zeroValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::ConstantValue::integerValue((WGSL::ConstantValue *)v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))off_1E0FD8068[v2])(&v6);
  }
}

uint64_t WGSL::ConstantValue::integerValue(WGSL::ConstantValue *this)
{
  int v1;
  uint64_t result;

  if (this)
  {
    v1 = *((_DWORD *)this + 4);
    switch(v1)
    {
      case 5:
        return *(_QWORD *)this;
      case 4:
        return *(unsigned int *)this;
      case 3:
        return *(int *)this;
    }
  }
  result = 151;
  __break(0xC471u);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *result;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  __int128 v21;

  v5 = *a5;
  *a5 = 0;
  if (a4)
    v6 = a4 - 1;
  else
    v6 = 0;
  if (v6 >> 31)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  if (v5)
  {
    v9 = *(_DWORD *)(v5 + 4);
    if (((v9 | v6) & 0x80000000) != 0)
      goto LABEL_32;
  }
  else
  {
    v9 = 0;
    if ((v6 & 0x80000000) != 0)
    {
LABEL_32:
      v19 = 0;
      goto LABEL_33;
    }
  }
  v10 = (v6 + v9);
  if (__OFADD__((_DWORD)v6, v9))
    goto LABEL_32;
  if (v5)
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, (*(unsigned __int8 *)(v5 + 16) >> 2) & 1, a3, v6, v5, &v19);
    v11 = v19;
    if (!v19)
      goto LABEL_33;
  }
  else
  {
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, 1, a3, v6, 0, &v19);
    v11 = v19;
    if (!v19)
    {
LABEL_33:
      __break(0xC471u);
LABEL_34:
      JUMPOUT(0x1825EA2BCLL);
    }
  }
  v19 = 0;
  v20 = v11;
  v21 = *a2;
  v12 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v12 != *(_DWORD *)(a1 + 128))
  {
    v18 = *(_QWORD *)(a1 + 120) + 24 * v12;
    *(_QWORD *)v18 = v11;
    *(_OWORD *)(v18 + 8) = v21;
    ++*(_DWORD *)(a1 + 132);
    v20 = 0;
LABEL_20:
    result = v19;
    v19 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_21;
  }
  v13 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v12 + 1, (unint64_t)&v20);
  v14 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v15 = *(_QWORD *)v13;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)v14 = v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
  v16 = v20;
  ++*(_DWORD *)(a1 + 132);
  v20 = 0;
  if (!v16)
    goto LABEL_20;
  if (*v16 == 2)
  {
    WTF::StringImpl::destroy();
    result = v19;
    v19 = 0;
    if (!result)
      goto LABEL_24;
  }
  else
  {
    *v16 -= 2;
    result = v19;
    v19 = 0;
    if (!result)
      goto LABEL_24;
  }
LABEL_21:
  if (*result == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *result -= 2;
LABEL_24:
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v5 -= 2;
  }
  return result;
}

unint64_t *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, uint64_t *a7)
{
  uint64_t v9;
  __int128 v10;
  unint64_t *result;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t *v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  __int128 v26;

  v9 = *a5;
  *a5 = 0;
  v21 = (_DWORD *)*a7;
  v22 = (unint64_t *)v9;
  v24 = (_DWORD *)a3;
  *(_QWORD *)&v25 = a4;
  v10 = *a6;
  *a7 = 0;
  v26 = v10;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((unint64_t *)&v24, (uint64_t *)&v22, (uint64_t)&v26, (uint64_t *)&v21, &v23);
  v12 = (unint64_t)v23;
  if (!v23)
  {
    __break(0xC471u);
    return result;
  }
  v23 = 0;
  v24 = (_DWORD *)v12;
  v25 = *a2;
  v13 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v13 != *(_DWORD *)(a1 + 128))
  {
    v19 = *(_QWORD *)(a1 + 120) + 24 * v13;
    *(_QWORD *)v19 = v12;
    *(_OWORD *)(v19 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    v24 = 0;
LABEL_8:
    v18 = v23;
    v23 = 0;
    if (!v18)
      goto LABEL_12;
    goto LABEL_9;
  }
  v14 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v13 + 1, (unint64_t)&v24);
  v15 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v16 = *(_QWORD *)v14;
  *(_QWORD *)v14 = 0;
  *(_QWORD *)v15 = v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v14 + 8);
  v17 = v24;
  ++*(_DWORD *)(a1 + 132);
  v24 = 0;
  if (!v17)
    goto LABEL_8;
  if (*v17 == 2)
  {
    WTF::StringImpl::destroy();
    v18 = v23;
    v23 = 0;
    if (!v18)
      goto LABEL_12;
  }
  else
  {
    *v17 -= 2;
    v18 = v23;
    v23 = 0;
    if (!v18)
      goto LABEL_12;
  }
LABEL_9:
  if (*v18 == 2)
    WTF::StringImpl::destroy();
  else
    *v18 -= 2;
LABEL_12:
  v20 = v21;
  v21 = 0;
  if (v20)
  {
    if (*v20 == 2)
    {
      WTF::StringImpl::destroy();
      result = v22;
      v22 = 0;
      if (!result)
        return result;
      goto LABEL_18;
    }
    *v20 -= 2;
  }
  result = v22;
  v22 = 0;
  if (!result)
    return result;
LABEL_18:
  if (*(_DWORD *)result == 2)
    return (unint64_t *)WTF::StringImpl::destroy();
  *(_DWORD *)result -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  int v14;
  BOOL v15;
  int v16;
  int8x16_t *v17;
  _BOOL4 v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *result;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  __int128 v29;

  v6 = *a5;
  *a5 = 0;
  if (a4)
    v7 = a4 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(a6 + 8);
  v9 = v8 != 0;
  v10 = v8 - 1;
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825EA6A4);
  }
  if (v6)
  {
    v14 = *(_DWORD *)(v6 + 4);
    if (((v14 | v11) & 0x80000000) != 0)
      goto LABEL_39;
  }
  else
  {
    v14 = 0;
    if ((v11 & 0x80000000) != 0)
    {
LABEL_39:
      v27 = 0;
LABEL_40:
      __break(0xC471u);
LABEL_41:
      JUMPOUT(0x1825EA684);
    }
  }
  v15 = __OFADD__(v14, (_DWORD)v11);
  v16 = v14 + v11;
  if (v15 || __OFADD__((_DWORD)v7, v16))
    goto LABEL_39;
  v17 = *(int8x16_t **)a6;
  v18 = !v6 || (*(_BYTE *)(v6 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v7 + v16), v18, a3, v7, v6, v17, v11, &v27);
  v19 = v27;
  if (!v27)
    goto LABEL_40;
  v27 = 0;
  v28 = v19;
  v29 = *a2;
  v20 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v20 != *(_DWORD *)(a1 + 128))
  {
    v26 = *(_QWORD *)(a1 + 120) + 24 * v20;
    *(_QWORD *)v26 = v19;
    *(_OWORD *)(v26 + 8) = v29;
    ++*(_DWORD *)(a1 + 132);
    v28 = 0;
LABEL_26:
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_30;
    goto LABEL_27;
  }
  v21 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v20 + 1, (unint64_t)&v28);
  v22 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v23 = *(_QWORD *)v21;
  *(_QWORD *)v21 = 0;
  *(_QWORD *)v22 = v23;
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
  v24 = v28;
  ++*(_DWORD *)(a1 + 132);
  v28 = 0;
  if (!v24)
    goto LABEL_26;
  if (*v24 == 2)
  {
    WTF::StringImpl::destroy();
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_30;
  }
  else
  {
    *v24 -= 2;
    result = v27;
    v27 = 0;
    if (!result)
      goto LABEL_30;
  }
LABEL_27:
  if (*result == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *result -= 2;
LABEL_30:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

WTF **WTF::FixedVector<WGSL::ConstantValue>::~FixedVector(WTF **a1, _DWORD *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *(unsigned int *)v3;
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = (_DWORD *)((char *)v3 + 24);
      do
      {
        a2 = v6 - 4;
        v7 = *v6;
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v7])(&v9, a2);
        *v6 = -1;
        v6 += 6;
        v5 -= 24;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  return a1;
}

_DWORD *WGSL::constantBitcast(_DWORD *result, uint64_t a2, _QWORD *a3)
{
  _DWORD *v3;
  _DWORD *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  double v19;
  double v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  float v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  _DWORD *v40;
  int *v41;
  int v42;
  int v43;
  double v44;
  BOOL v45;
  int v46;
  double v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  char *v60;
  WTF *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  WTF *v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  BOOL v114;
  BOOL v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD *v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  int v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _DWORD *v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  _DWORD *v142;
  uint64_t v143;
  _DWORD *v144;
  _DWORD *v145;
  _BYTE v146[16];
  unsigned int v147;
  _DWORD v148[4];
  int v149;
  _DWORD v150[4];
  int v151;
  _DWORD *v152;
  char v153;
  _DWORD v154[4];
  int v155;
  uint64_t v156;
  uint64_t v157;
  char __s[16];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 __src;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*a3;
  if (!*(_DWORD *)*a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1825EBBD0);
  }
  v5 = result;
  v6 = (float *)(v3 + 2);
  if (!a2 || *(_DWORD *)(a2 + 48) != 1)
  {
    v14 = v3[6];
    switch((_DWORD)v14)
    {
      case 2:
        v20 = *(double *)v6;
        WGSL::convertFloat<float,double>(double)::max = 2139095039;
        WGSL::convertFloat<float,double>(double)::lowest = -8388609;
        if (v20 <= 3.40282347e38 && v20 >= -3.40282347e38)
        {
          v31 = v20;
          *(float *)v148 = v31;
          v149 = 0;
          result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v148);
          *((_BYTE *)v5 + 8) = 0;
          v5[6] = -1;
          v32 = v175;
          if ((_DWORD)v175 == -1)
          {
            v5[8] = 0;
          }
          else
          {
            result = (_DWORD *)((uint64_t (*)(__int128 *))off_1E0FD7D20[v175])(&v166);
            v5[6] = v32;
            v33 = v175;
            v5[8] = 0;
            if ((_DWORD)v33 != -1)
              result = (_DWORD *)((uint64_t (*)(__int128 *, __int128 *))off_1E0FD7CC8[v33])(&v166, &__src);
          }
          LODWORD(v175) = -1;
          if (v149 != -1)
            return (_DWORD *)((uint64_t (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v149])(&v166, v148);
          return result;
        }
        WTF::numberToString();
        v22 = strlen(__s);
        HIDWORD(v165) = v22;
        if (v22 < 0)
          goto LABEL_276;
        if (__OFADD__(v22, 31))
          goto LABEL_276;
        v23 = (v22 + 37);
        if (__OFADD__(v22 + 31, 6))
          goto LABEL_276;
        v170 = v162;
        v171 = v163;
        v172 = v164;
        v173 = v165;
        v166 = *(_OWORD *)__s;
        v167 = v159;
        v168 = v160;
        v169 = v161;
        result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20));
        v24 = __src;
        if (!(_QWORD)__src)
        {
LABEL_276:
          __break(0xC471u);
          JUMPOUT(0x1825EBD80);
        }
        *(_DWORD *)__src = 2;
        *(_DWORD *)(v24 + 4) = v23;
        *(_QWORD *)(v24 + 8) = v24 + 20;
        *(_WORD *)(v24 + 24) = 8293;
        *(_DWORD *)(v24 + 16) = 4;
        *(_DWORD *)(v24 + 20) = 1970037110;
        v25 = (_BYTE *)(v24 + 26);
        v178 = v170;
        v179 = v171;
        v180 = v172;
        v181 = v173;
        __src = v166;
        v175 = v167;
        v176 = v168;
        v177 = v169;
        v26 = HIDWORD(v173);
        if (HIDWORD(v173))
        {
          if (HIDWORD(v173) == 1)
            *v25 = __src;
          else
            result = memcpy((void *)(v24 + 26), &__src, HIDWORD(v181));
        }
        qmemcpy(&v25[v26], " cannot be represented as 'f32'", 31);
        *((_QWORD *)v5 + 1) = v24;
        break;
      case 5:
        if (*(_DWORD *)(a2 + 48))
        {
LABEL_275:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_276;
        }
        v19 = *(double *)v6;
        if (*(_BYTE *)a2 == 2)
        {
          if (!HIDWORD(*(_QWORD *)&v19))
          {
            result[2] = LODWORD(v19);
            result[6] = 4;
            result[8] = 0;
            return result;
          }
          if ((*(_QWORD *)&v19 & 0x8000000000000000) != 0)
          {
            v113 = -*(_QWORD *)&v19;
            v43 = 1;
            do
            {
              ++v43;
              v114 = v113 >= 0xA;
              v113 /= 0xAuLL;
            }
            while (v114);
          }
          else
          {
            v43 = 0;
            v44 = *(double *)v6;
            do
            {
              ++v43;
              v45 = *(_QWORD *)&v44 > 9uLL;
              *(_QWORD *)&v44 /= 0xAuLL;
            }
            while (v45);
          }
          if (v43 < 0)
            goto LABEL_277;
          v115 = __OFADD__(v43, 31);
          v116 = v43 + 31;
          if (v115)
            goto LABEL_277;
          if (__OFADD__(v116, 6))
            goto LABEL_277;
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__src, v116 + 6, "value ", 6u, *(unint64_t *)&v19, " cannot be represented as 'u32'", 0x1Fu);
          v117 = __src;
          if (!(_QWORD)__src)
            goto LABEL_277;
        }
        else
        {
          if (*(_QWORD *)&v19 == SLODWORD(v19))
          {
            v150[0] = *(_QWORD *)v6;
            v151 = 3;
            result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v150);
            *((_BYTE *)v5 + 8) = 0;
            v5[6] = -1;
            v34 = v175;
            if ((_DWORD)v175 == -1)
            {
              v5[8] = 0;
            }
            else
            {
              result = (_DWORD *)((uint64_t (*)(__int128 *))off_1E0FD7D20[v175])(&v166);
              v5[6] = v34;
              v35 = v175;
              v5[8] = 0;
              if ((_DWORD)v35 != -1)
                result = (_DWORD *)((uint64_t (*)(__int128 *, __int128 *))off_1E0FD7CC8[v35])(&v166, &__src);
            }
            LODWORD(v175) = -1;
            if (v151 != -1)
              return (_DWORD *)((uint64_t (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v151])(&v166, v150);
            return result;
          }
          if ((*(_QWORD *)&v19 & 0x8000000000000000) != 0)
          {
            v118 = -*(_QWORD *)&v19;
            v46 = 1;
            do
            {
              ++v46;
              v114 = v118 >= 0xA;
              v118 /= 0xAuLL;
            }
            while (v114);
          }
          else
          {
            v46 = 0;
            v47 = *(double *)v6;
            do
            {
              ++v46;
              v45 = *(_QWORD *)&v47 > 9uLL;
              *(_QWORD *)&v47 /= 0xAuLL;
            }
            while (v45);
          }
          if (v46 < 0
            || (v115 = __OFADD__(v46, 31), v119 = v46 + 31, v115)
            || __OFADD__(v119, 6)
            || (result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&__src, v119 + 6, "value ", 6u, *(unint64_t *)&v19, " cannot be represented as 'i32'", 0x1Fu), (v117 = __src) == 0))
          {
LABEL_277:
            __break(0xC471u);
            JUMPOUT(0x1825EB7F0);
          }
        }
        *((_QWORD *)v5 + 1) = v117;
        break;
      case 8:
        v15 = *(double *)v6;
        v16 = **(_DWORD **)v6;
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EBBF0);
        }
        if (*(_DWORD *)(*(_QWORD *)&v15 + 24) == 1)
        {
          if (v16 <= 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EBC10);
          }
          if (*(_DWORD *)(*(_QWORD *)&v15 + 48) == 1)
          {
            LODWORD(__src) = *(unsigned __int16 *)(*(_QWORD *)&v15 + 8) | (*(unsigned __int16 *)(*(_QWORD *)&v15 + 32) << 16);
            LODWORD(v175) = 4;
            result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&v166, a2, (uint64_t)&__src);
            if ((_DWORD)v175 != -1)
              result = (_DWORD *)((uint64_t (*)(char *, __int128 *))off_1E0FD7CC8[v175])(__s, &__src);
            *((_BYTE *)v5 + 8) = 0;
            v5[6] = -1;
            v17 = v167;
            if ((_DWORD)v167 == -1)
            {
              v5[8] = 0;
            }
            else
            {
              result = (_DWORD *)((uint64_t (*)(__int128 *))off_1E0FD7D20[v167])(&__src);
              v5[6] = v17;
              v18 = v167;
              v5[8] = 0;
              if ((_DWORD)v18 != -1)
                return (_DWORD *)((uint64_t (*)(__int128 *, __int128 *))off_1E0FD7CC8[v18])(&__src, &v166);
            }
            return result;
          }
        }
        goto LABEL_275;
      default:
        v146[0] = 0;
        v147 = -1;
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(__int128 *, _BYTE *, float *))off_1E0FD8010[v14])(&__src, v146, v6);
          v147 = v14;
        }
        result = (_DWORD *)WGSL::convertValue<WGSL::BitwiseCast>(&__src, a2, (uint64_t)v146);
        *((_BYTE *)v5 + 8) = 0;
        v5[6] = -1;
        v27 = v175;
        if ((_DWORD)v175 == -1)
        {
          v5[8] = 0;
          LODWORD(v175) = -1;
          v29 = v147;
          if (v147 == -1)
            return result;
        }
        else
        {
          result = (_DWORD *)((uint64_t (*)(__int128 *))off_1E0FD7D20[v175])(&v166);
          v5[6] = v27;
          v28 = v175;
          v5[8] = 0;
          if ((_DWORD)v28 != -1)
            result = (_DWORD *)((uint64_t (*)(__int128 *, __int128 *))off_1E0FD7CC8[v28])(&v166, &__src);
          LODWORD(v175) = -1;
          v29 = v147;
          if (v147 == -1)
            return result;
        }
        return (_DWORD *)((uint64_t (*)(__int128 *, _BYTE *))off_1E0FD7CC8[v29])(&v166, v146);
    }
    v5[8] = 1;
    return result;
  }
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (v3[6] != 8)
  {
    if ((_DWORD)v7 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1825EBC30);
    }
    v30 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    *v30 = 2;
    *(_OWORD *)(v30 + 2) = 0u;
    *(_OWORD *)(v30 + 6) = 0u;
    *(_OWORD *)(v30 + 10) = 0u;
    *(_QWORD *)&__src = v30;
    WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&v152, (unsigned int **)&__src, v6, 0);
    if (v153 && v152)
    {
      if (*v152 == 2)
        WTF::StringImpl::destroy();
      else
        *v152 -= 2;
    }
    v48 = *v30;
    v49 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v48 + 8));
    v51 = v49;
    *v49 = v48;
    if ((_DWORD)v48)
    {
      v52 = v49 + 6;
      v53 = 24 * v48;
      v54 = v30 + 6;
      do
      {
        *((_BYTE *)v52 - 16) = 0;
        v50 = v52 - 4;
        *v52 = -1;
        v55 = *v54;
        if ((_DWORD)v55 != -1)
        {
          ((void (*)(__int128 *, _DWORD *, unsigned int *))off_1E0FD8010[v55])(&v166, v50, v54 - 4);
          *v52 = v55;
        }
        v52 += 6;
        v54 += 6;
        v53 -= 24;
      }
      while (v53);
    }
    *((_QWORD *)v5 + 1) = v51;
    v5[6] = 8;
    v5[8] = 0;
    v56 = *v30;
    if ((_DWORD)v56)
    {
      v57 = 24 * v56;
      v58 = v30 + 6;
      do
      {
        v50 = v58 - 4;
        v59 = *v58;
        if ((_DWORD)v59 != -1)
          ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v59])(&v166, v50);
        *v58 = -1;
        v58 += 6;
        v57 -= 24;
      }
      while (v57);
    }
    return (_DWORD *)WTF::fastFree((WTF *)v30, v50);
  }
  v8 = *(float **)v6;
  if (!*(_QWORD *)v6)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      v36 = 0;
      *(_QWORD *)__s = 0;
      LODWORD(v159) = 8;
      v37 = *(_QWORD *)a2;
      goto LABEL_222;
    }
    goto LABEL_65;
  }
  v9 = *(unsigned int *)v8;
  if ((_DWORD)v9 != (_DWORD)v7)
  {
    if (!*(_BYTE *)(a2 + 8))
    {
      v38 = 0;
      *(_QWORD *)__s = 0;
      goto LABEL_162;
    }
LABEL_65:
    v38 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v7 + 8));
    *v38 = v7;
    bzero(v38 + 2, 24 * v7 - ((unsigned __int16)(24 * v7 - 24 - 24 * (((24 * (_WORD)v7 - 24) & 0xFFF8u) / 0x18)) & 0xFFF8));
    v39 = *(unsigned __int8 *)(a2 + 8);
    *(_QWORD *)__s = v38;
    v8 = *(float **)v6;
    if (v39 == 4)
    {
      if (!*(_DWORD *)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EBD50);
      }
      WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&__src, (unsigned int **)__s, v8 + 2, 0);
      if (BYTE8(__src))
      {
        v41 = (int *)__src;
        if ((_QWORD)__src)
          goto LABEL_69;
        goto LABEL_219;
      }
      if (**(_DWORD **)v6 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EBD70);
      }
      WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()((WTF::String *)&__src, (unsigned int **)__s, (float *)(*(_QWORD *)v6 + 32), 2u);
      if (BYTE8(__src))
      {
        v41 = (int *)__src;
        if ((_QWORD)__src)
        {
LABEL_69:
          v42 = *v41;
          *v41 += 2;
          *((_QWORD *)v5 + 1) = v41;
          v5[8] = 1;
          if (v42)
            *v41 = v42;
          else
            WTF::StringImpl::destroy();
          goto LABEL_242;
        }
LABEL_219:
        *((_QWORD *)v5 + 1) = 0;
        v5[8] = 1;
LABEL_242:
        *(_QWORD *)__s = 0;
        goto LABEL_243;
      }
      v106 = v38;
LABEL_190:
      v108 = *v38;
      result = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v108 + 8));
      v109 = result;
      *result = v108;
      if ((_DWORD)v108)
      {
        v110 = 0;
        v111 = 24 * v108;
        do
        {
          LOBYTE(v109[v110 / 4 + 2]) = 0;
          v40 = &v109[v110 / 4 + 2];
          v109[v110 / 4 + 6] = -1;
          v112 = v38[v110 / 4 + 6];
          if ((_DWORD)v112 != -1)
          {
            result = (_DWORD *)((uint64_t (*)(__int128 *, _DWORD *, unsigned int *))off_1E0FD8010[v112])(&__src, v40, &v38[v110 / 4 + 2]);
            v109[v110 / 4 + 6] = v112;
          }
          v110 += 24;
        }
        while (v111 != v110);
        v38 = *(unsigned int **)__s;
        *((_QWORD *)v5 + 1) = v109;
        v5[6] = 8;
        v5[8] = 0;
        *(_QWORD *)__s = 0;
        if (!v38)
          return result;
      }
      else
      {
        *((_QWORD *)v5 + 1) = result;
        v5[6] = 8;
        v5[8] = 0;
        *(_QWORD *)__s = 0;
        v38 = v106;
      }
LABEL_243:
      v135 = *v38;
      if ((_DWORD)v135)
      {
        v136 = 24 * v135;
        v137 = v38 + 6;
        do
        {
          v40 = v137 - 4;
          v138 = *v137;
          if ((_DWORD)v138 != -1)
            ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v138])(&__src, v40);
          *v137 = -1;
          v137 += 6;
          v136 -= 24;
        }
        while (v136);
      }
      return (_DWORD *)WTF::fastFree((WTF *)v38, v40);
    }
    *(float *)&v9 = *v8;
LABEL_162:
    if (!(_DWORD)v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1825EBC90);
    }
    if (*((_DWORD *)v8 + 6) == 1)
    {
      if (v9 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EBCB0);
      }
      if (*((_DWORD *)v8 + 12) == 1)
      {
        v101 = *(_QWORD *)a2;
        LODWORD(__src) = *((unsigned __int16 *)v8 + 4) | (*((unsigned __int16 *)v8 + 16) << 16);
        LODWORD(v175) = 4;
        WGSL::convertValue<WGSL::BitwiseCast>(&v166, v101, (uint64_t)&__src);
        if ((_DWORD)v175 != -1)
          ((void (*)(_DWORD *, __int128 *))off_1E0FD7CC8[v175])(v154, &__src);
        if (!*v38)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EBCD0);
        }
        v102 = v38[6];
        if ((_DWORD)v102 == -1)
        {
          if ((_DWORD)v167 == -1)
            goto LABEL_176;
        }
        else if ((_DWORD)v167 == -1)
        {
          ((void (*)(__int128 *, unsigned int *))off_1E0FD7CC8[v102])(&__src, v38 + 2);
          v38[6] = -1;
          goto LABEL_174;
        }
        *(_QWORD *)&__src = v38 + 2;
        ((void (*)(__int128 *))off_1E0FD8188[v167])(&__src);
LABEL_174:
        if ((_DWORD)v167 != -1)
          ((void (*)(__int128 *, __int128 *))off_1E0FD7CC8[v167])(&__src, &v166);
LABEL_176:
        v103 = *(double *)v6;
        v104 = **(_DWORD **)v6;
        if (v104 <= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EBCF0);
        }
        if (*(_DWORD *)(*(_QWORD *)&v103 + 72) == 1)
        {
          if (v104 <= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EBD10);
          }
          if (*(_DWORD *)(*(_QWORD *)&v103 + 96) == 1)
          {
            v105 = *(_QWORD *)a2;
            LODWORD(__src) = *(unsigned __int16 *)(*(_QWORD *)&v103 + 56) | (*(unsigned __int16 *)(*(_QWORD *)&v103 + 80) << 16);
            LODWORD(v175) = 4;
            WGSL::convertValue<WGSL::BitwiseCast>(&v166, v105, (uint64_t)&__src);
            if ((_DWORD)v175 != -1)
              ((void (*)(_DWORD *, __int128 *))off_1E0FD7CC8[v175])(v154, &__src);
            v106 = *(unsigned int **)__s;
            if (**(_DWORD **)__s <= 1u)
            {
              __break(0xC471u);
              JUMPOUT(0x1825EBD30);
            }
            v107 = *(unsigned int *)(*(_QWORD *)__s + 48);
            if ((_DWORD)v107 == -1)
            {
              if ((_DWORD)v167 == -1)
                goto LABEL_190;
            }
            else if ((_DWORD)v167 == -1)
            {
              ((void (*)(__int128 *, uint64_t))off_1E0FD7CC8[v107])(&__src, *(_QWORD *)__s + 32);
              v106[12] = -1;
              goto LABEL_188;
            }
            *(_QWORD *)&__src = *(_QWORD *)__s + 32;
            ((void (*)(__int128 *))off_1E0FD8188[v167])(&__src);
LABEL_188:
            if ((_DWORD)v167 != -1)
              ((void (*)(__int128 *, __int128 *))off_1E0FD7CC8[v167])(&__src, &v166);
            goto LABEL_190;
          }
        }
        goto LABEL_275;
      }
    }
    goto LABEL_275;
  }
  v145 = result;
  v10 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
  *v10 = v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 24 * v9;
    do
    {
      LOBYTE(v10[v11 / 4 + 2]) = 0;
      v10[v11 / 4 + 6] = -1;
      v13 = LODWORD(v8[v11 / 4 + 6]);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(__int128 *, _DWORD *, float *))off_1E0FD8010[v13])(&__src, &v10[v11 / 4 + 2], &v8[v11 / 4 + 2]);
        v10[v11 / 4 + 6] = v13;
      }
      v11 += 24;
    }
    while (v12 != v11);
    LODWORD(v9) = *v10;
  }
  *(_QWORD *)__s = v10;
  LODWORD(v159) = 8;
  v61 = (WTF *)WTF::fastMalloc((WTF *)(24 * v9 + 8));
  *(_DWORD *)v61 = v9;
  if (!(_DWORD)v9)
    goto LABEL_106;
  v62 = 0;
  v63 = 24 * v9;
  do
  {
    *((_BYTE *)v61 + v62 + 8) = 0;
    v60 = (char *)v61 + v62 + 8;
    *(_DWORD *)((char *)v61 + v62 + 24) = -1;
    v64 = v10[v62 / 4 + 6];
    if ((_DWORD)v64 != -1)
    {
      ((void (*)(__int128 *, char *, _DWORD *))off_1E0FD8010[v64])(&__src, v60, &v10[v62 / 4 + 2]);
      *(_DWORD *)((char *)v61 + v62 + 24) = v64;
    }
    v62 += 24;
  }
  while (v63 != v62);
  v65 = *(unsigned int *)v61;
  if (!(_DWORD)v65)
  {
LABEL_106:
    WTF::fastFree(v61, v60);
    v69 = *(unsigned int **)v6;
    v37 = *(_QWORD *)a2;
    if (*(_QWORD *)v6)
    {
      v70 = *v69;
      v36 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v70 + 8));
      *v36 = v70;
      if ((_DWORD)v70)
      {
        v71 = 0;
        v72 = 24 * v70;
        do
        {
          LOBYTE(v36[v71 / 4 + 2]) = 0;
          v36[v71 / 4 + 6] = -1;
          v73 = v69[v71 / 4 + 6];
          if ((_DWORD)v73 != -1)
          {
            ((void (*)(_DWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v73])(v154, &v36[v71 / 4 + 2], &v69[v71 / 4 + 2]);
            v36[v71 / 4 + 6] = v73;
          }
          v71 += 24;
        }
        while (v72 != v71);
      }
    }
    else
    {
      v36 = 0;
    }
    v5 = v145;
LABEL_222:
    *(_QWORD *)&__src = v36;
    LODWORD(v175) = 8;
    v120 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v120 = 1;
    v120[1] = 0;
    v120[2] = 0;
    v120[3] = 0;
    *(_QWORD *)&v166 = v120;
    if (v36)
    {
      v121 = *v36;
      v122 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v121 + 8));
      v123 = v122;
      *v122 = v121;
      if ((_DWORD)v121)
      {
        v124 = v122 + 6;
        v125 = 24 * v121;
        v126 = v36 + 6;
        do
        {
          *((_BYTE *)v124 - 16) = 0;
          *v124 = -1;
          v127 = *v126;
          if ((_DWORD)v127 != -1)
          {
            ((void (*)(_DWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v127])(v154, v124 - 4, v126 - 4);
            *v124 = v127;
          }
          v124 += 6;
          v126 += 6;
          v125 -= 24;
        }
        while (v125);
      }
      v128 = *((_DWORD *)v120 + 6);
      if (v128 == -1)
      {
LABEL_232:
        v120[1] = v123;
        *((_DWORD *)v120 + 6) = 8;
        WGSL::constantBitcast(v5, v37, &v166);
        v130 = *(unsigned int *)v120;
        if ((_DWORD)v130)
        {
          v131 = 24 * v130;
          v132 = v120 + 3;
          do
          {
            v129 = v132 - 4;
            v133 = *v132;
            if ((_DWORD)v133 != -1)
              ((void (*)(_DWORD *, _DWORD *))off_1E0FD7CC8[v133])(v154, v129);
            *v132 = -1;
            v132 += 6;
            v131 -= 24;
          }
          while (v131);
        }
        result = (_DWORD *)WTF::fastFree((WTF *)v120, v129);
        if ((_DWORD)v175 != -1)
          result = (_DWORD *)((uint64_t (*)(_DWORD *, __int128 *))off_1E0FD7CC8[v175])(v154, &__src);
        v134 = v159;
        if ((_DWORD)v159 != -1)
          return (_DWORD *)((uint64_t (*)(__int128 *, char *))off_1E0FD7CC8[v134])(&__src, __s);
        return result;
      }
    }
    else
    {
      v123 = 0;
      v128 = 0;
    }
    ((void (*)(_DWORD *, _QWORD *))off_1E0FD7CC8[v128])(v154, v120 + 1);
    goto LABEL_232;
  }
  v66 = 0;
  do
  {
    v67 = (char *)v61 + v66;
    v68 = *(unsigned int *)((char *)v61 + v66 + 24);
    if ((_DWORD)v68 != -1)
      ((void (*)(__int128 *, char *))off_1E0FD7CC8[v68])(&__src, v67 + 8);
    *((_DWORD *)v67 + 6) = -1;
    v66 += 24;
  }
  while (24 * v65 != v66);
  WTF::fastFree(v61, v60);
  v74 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v65 + 8));
  *v74 = v65;
  v75 = v74;
  v144 = v74 + 2;
  bzero(v74 + 2, 24 * ((24 * v65 - 24) / 0x18uLL) + 24);
  v76 = 0;
  v154[0] = 0;
  v155 = 0;
  do
  {
    if ((_DWORD)v159 == 8)
    {
      if (v76 >= **(_DWORD **)__s)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EBC50);
      }
      v77 = *(_QWORD *)__s + 24 * v76;
      v78 = *(unsigned int *)(v77 + 24);
      if (v155 != -1)
      {
        if ((_DWORD)v78 == -1)
          goto LABEL_122;
LABEL_127:
        *(_QWORD *)&__src = v154;
        ((void (*)(__int128 *, _DWORD *, uint64_t))off_1E0FD80E0[v78])(&__src, v154, v77 + 8);
        goto LABEL_128;
      }
      if ((_DWORD)v78 != -1)
        goto LABEL_127;
    }
    else
    {
      if (v155 == -1)
      {
        if ((_DWORD)v159 == -1)
          goto LABEL_125;
      }
      else if ((_DWORD)v159 == -1)
      {
LABEL_122:
        ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v155])(&__src, v154);
        v155 = -1;
LABEL_125:
        v79 = *(_QWORD *)a2;
        LOBYTE(v166) = 0;
        v80 = -1;
        goto LABEL_130;
      }
      *(_QWORD *)&__src = v154;
      ((void (*)(__int128 *, _DWORD *, char *))off_1E0FD80E0[v159])(&__src, v154, __s);
    }
LABEL_128:
    v80 = v155;
    v79 = *(_QWORD *)a2;
    LOBYTE(v166) = 0;
    LODWORD(v167) = -1;
    if (v155 == -1)
      goto LABEL_131;
    ((void (*)(uint64_t *, __int128 *, _DWORD *))off_1E0FD8010[v155])(&v157, &v166, v154);
LABEL_130:
    LODWORD(v167) = v80;
LABEL_131:
    v81 = WTF::fastMalloc((WTF *)0x20);
    v82 = (WTF *)v81;
    *(_QWORD *)(v81 + 8) = 0;
    *(_DWORD *)v81 = 1;
    *(_QWORD *)(v81 + 16) = 0;
    *(_QWORD *)(v81 + 24) = 0;
    v156 = v81;
    if ((_DWORD)v167 == -1)
    {
      *(_DWORD *)(v81 + 24) = -1;
      WGSL::constantBitcast(&__src, v79, &v156);
      v84 = *(unsigned int *)v82;
      if (!(_DWORD)v84)
        goto LABEL_139;
    }
    else
    {
      v157 = v81 + 8;
      ((void (*)(uint64_t *))off_1E0FD80E0[v167])(&v157);
      WGSL::constantBitcast(&__src, v79, &v156);
      v84 = *(unsigned int *)v82;
      if (!(_DWORD)v84)
        goto LABEL_139;
    }
    v85 = 24 * v84;
    v86 = (_DWORD *)((char *)v82 + 24);
    do
    {
      v83 = v86 - 4;
      v87 = *v86;
      if ((_DWORD)v87 != -1)
        ((void (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v87])(&v157, v83);
      *v86 = -1;
      v86 += 6;
      v85 -= 24;
    }
    while (v85);
LABEL_139:
    WTF::fastFree(v82, v83);
    if ((_DWORD)v167 != -1)
      ((void (*)(uint64_t *, __int128 *))off_1E0FD7CC8[v167])(&v157, &v166);
    v89 = v176;
    if ((_DWORD)v176)
    {
      if ((_DWORD)v176 != 1)
        goto LABEL_275;
      v90 = *((_QWORD *)&__src + 1);
      if (*((_QWORD *)&__src + 1))
        **((_DWORD **)&__src + 1) += 2;
      *((_QWORD *)v145 + 1) = v90;
      v145[8] = 1;
    }
    else
    {
      if (v76 >= *v75)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EBC70);
      }
      v91 = &v144[6 * v76];
      v92 = v91[4];
      if ((_DWORD)v92 == -1)
      {
        if (DWORD2(v175) == -1)
          goto LABEL_152;
      }
      else if (DWORD2(v175) == -1)
      {
        ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v92])(&v166, &v144[6 * v76]);
        v91[4] = -1;
        goto LABEL_152;
      }
      *(_QWORD *)&v166 = &v144[6 * v76];
      ((void (*)(__int128 *, _QWORD, char *))off_1E0FD8188[DWORD2(v175)])(&v166, v166, (char *)&__src + 8);
    }
LABEL_152:
    if ((_DWORD)v176 != -1)
      ((void (*)(__int128 *, char *))off_1E0FD7DD0[v176])(&v166, (char *)&__src + 8);
    if (v89)
      goto LABEL_250;
    ++v76;
  }
  while (v76 != v65);
  v93 = v75;
  v94 = *v75;
  v95 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v94 + 8));
  v96 = v95;
  *v95 = v94;
  if ((_DWORD)v94)
  {
    v97 = v95 + 6;
    v98 = 24 * v94;
    v99 = v75 + 6;
    do
    {
      *((_BYTE *)v97 - 16) = 0;
      *v97 = -1;
      v100 = *v99;
      if ((_DWORD)v100 != -1)
      {
        ((void (*)(__int128 *, _DWORD *, unsigned int *))off_1E0FD8010[v100])(&__src, v97 - 4, v99 - 4);
        *v97 = v100;
      }
      v97 += 6;
      v99 += 6;
      v98 -= 24;
    }
    while (v98);
  }
  LODWORD(v175) = 8;
  *(_QWORD *)&__src = 0;
  *((_QWORD *)v145 + 1) = v96;
  v145[6] = 8;
  v145[8] = 0;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJfDhdijxbS9_SA_SB_SC_EEEEEEDcSG_DpT0_((uint64_t)&v166, (WTF **)&__src);
  v75 = v93;
LABEL_250:
  if (v155 != -1)
    ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v155])(&__src, v154);
  v139 = (WTF *)v75;
  v140 = *v75;
  if ((_DWORD)v140)
  {
    v141 = 24 * v140;
    v142 = (_DWORD *)((char *)v139 + 24);
    do
    {
      v88 = v142 - 4;
      v143 = *v142;
      if ((_DWORD)v143 != -1)
        ((void (*)(__int128 *, _DWORD *))off_1E0FD7CC8[v143])(&__src, v88);
      *v142 = -1;
      v142 += 6;
      v141 -= 24;
    }
    while (v141);
  }
  result = (_DWORD *)WTF::fastFree(v139, v88);
  v134 = v159;
  if ((_DWORD)v159 != -1)
    return (_DWORD *)((uint64_t (*)(__int128 *, char *))off_1E0FD7CC8[v134])(&__src, __s);
  return result;
}

unint64_t WGSL::TypeChecker::typeError<WTF::String &>(unint64_t result, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  _BYTE *v11;
  unint64_t v12;
  unsigned __int128 v13;
  size_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  _WORD *v18;
  unint64_t v19;
  __int128 v20;
  int8x16_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  char *v32;
  char v33;
  _WORD *v34;
  unsigned __int8 *v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t *v49;
  int8x8_t *v50;
  unint64_t v51;
  int16x8_t v52;
  uint8x8_t *v53;
  uint16x8_t *v54;
  unint64_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint8x8_t *v59;
  uint16x8_t *v60;
  unint64_t v61;
  uint8x8_t v62;
  _DWORD *v63;
  __int128 v64;
  int8x16x2_t v65;
  int8x16x2_t v66;
  int8x16x2_t v67;

  v5 = result;
  if (!a3)
    goto LABEL_27;
  v6 = *(unsigned int *)(a3 + 4);
  *(_DWORD *)a3 += 2;
  if ((v6 & 0x80000000) != 0)
    goto LABEL_83;
  if ((*(_BYTE *)(a3 + 16) & 4) != 0)
  {
    if (!(_DWORD)v6)
      goto LABEL_27;
    result = WTF::tryFastCompactMalloc((WTF *)(v6 + 20));
    v7 = v63;
    if (v63)
    {
      result = (unint64_t)(v63 + 5);
      *v63 = 2;
      v7[1] = v6;
      *((_QWORD *)v7 + 1) = v7 + 5;
      v7[4] = 4;
      v8 = *(_QWORD *)(a3 + 8);
      v10 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        if (!(_DWORD)v10)
          goto LABEL_52;
        if ((_DWORD)v10 == 1)
        {
          *(_BYTE *)result = *(_BYTE *)v8;
          goto LABEL_52;
        }
        goto LABEL_51;
      }
      v11 = (_BYTE *)(result + v10);
      if (v10 >= 0x10)
      {
        v12 = result + (v10 & 0xFFFFFFF0);
        do
        {
          v13 = (unsigned __int128)vld2q_s8((const char *)v8);
          v8 += 32;
          *(_OWORD *)result = v13;
          result += 16;
        }
        while (result != v12);
        result = v12;
      }
      if ((_BYTE *)result == v11)
        goto LABEL_52;
      v14 = (size_t)v7 + v10;
      v15 = (unint64_t)v7 + v10 - result + 20;
      if (v15 < 8 || (result < v8 - 2 * result + 2 * v14 + 40 ? (v16 = v8 >= v14 + 20) : (v16 = 1), !v16))
      {
        v31 = (_BYTE *)result;
        v32 = (char *)v8;
        goto LABEL_45;
      }
      if (v15 >= 0x20)
      {
        v17 = v15 & 0xFFFFFFFFFFFFFFE0;
        v42 = (int8x16_t *)(v8 + 32);
        v43 = (int8x16_t *)(result + 16);
        v44 = v15 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v46 = v42[-2];
          v45 = v42[-1];
          v48 = *v42;
          v47 = v42[1];
          v42 += 4;
          v43[-1] = vuzp1q_s8(v46, v45);
          *v43 = vuzp1q_s8(v48, v47);
          v43 += 2;
          v44 -= 32;
        }
        while (v44);
        if (v15 == v17)
          goto LABEL_52;
        if ((v15 & 0x18) == 0)
        {
          v32 = (char *)(v8 + 2 * v17);
          v31 = (_BYTE *)(result + v17);
          goto LABEL_45;
        }
      }
      else
      {
        v17 = 0;
      }
      v31 = (_BYTE *)(result + (v15 & 0xFFFFFFFFFFFFFFF8));
      v32 = (char *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF8));
      v49 = (int16x8_t *)(v8 + 2 * v17);
      v50 = (int8x8_t *)(result + v17);
      v51 = v17 - (v15 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v52 = *v49++;
        *v50++ = vmovn_s16(v52);
        v51 += 8;
      }
      while (v51);
      if (v15 == (v15 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_52;
      do
      {
LABEL_45:
        v33 = *v32;
        v32 += 2;
        *v31++ = v33;
      }
      while (v31 != v11);
      goto LABEL_52;
    }
LABEL_83:
    __break(0xC471u);
    return result;
  }
  if (!(_DWORD)v6)
  {
LABEL_27:
    v7 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_52;
  }
  if (v6 > 0x7FFFFFEF)
    goto LABEL_83;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v6 + 20));
  v7 = v63;
  if (!v63)
    goto LABEL_83;
  result = (unint64_t)(v63 + 5);
  *v63 = 2;
  v7[1] = v6;
  *((_QWORD *)v7 + 1) = v7 + 5;
  v7[4] = 0;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(unsigned int *)(a3 + 4);
  if ((*(_BYTE *)(a3 + 16) & 4) == 0)
  {
    if (!(_DWORD)v9)
      goto LABEL_52;
    if ((_DWORD)v9 == 1)
    {
      *(_WORD *)result = *(_WORD *)v8;
      goto LABEL_52;
    }
    v10 = 2 * v9;
LABEL_51:
    result = (unint64_t)memcpy((void *)result, (const void *)v8, v10);
    goto LABEL_52;
  }
  v18 = (_WORD *)(result + 2 * v9);
  if (v9 >= 0x40)
  {
    v19 = result + 2 * (v9 & 0xFFFFFFC0);
    v20 = 0uLL;
    do
    {
      v65.val[0] = *(int8x16_t *)v8;
      v21 = *(int8x16_t *)(v8 + 16);
      v66.val[0] = *(int8x16_t *)(v8 + 32);
      v22 = *(_OWORD *)(v8 + 48);
      v8 += 64;
      v23 = v22;
      v66.val[1] = 0uLL;
      v67.val[0] = v21;
      v65.val[1] = 0uLL;
      v24 = (char *)result;
      vst2q_s8(v24, v65);
      v24 += 32;
      v67.val[1] = 0uLL;
      vst2q_s8(v24, v67);
      v25 = (char *)(result + 64);
      vst2q_s8(v25, v66);
      v26 = (char *)(result + 96);
      vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
      result += 128;
    }
    while (result != v19);
    result = v19;
  }
  if ((_WORD *)result != v18)
  {
    v27 = (unint64_t)v7 + 2 * v9 - result + 18;
    if (v27 < 0xE
      || (result < v8 + (v27 >> 1) + 1 ? (v28 = v8 >= (v27 & 0xFFFFFFFFFFFFFFFELL) + result + 2) : (v28 = 1), !v28))
    {
      v34 = (_WORD *)result;
      v35 = (unsigned __int8 *)v8;
      goto LABEL_48;
    }
    v29 = (v27 >> 1) + 1;
    if (v27 >= 0x3E)
    {
      v30 = v29 & 0xFFFFFFFFFFFFFFE0;
      v53 = (uint8x8_t *)(v8 + 16);
      v54 = (uint16x8_t *)(result + 32);
      v55 = v29 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v56 = *(uint8x16_t *)v53[-2].i8;
        v57 = vmovl_u8(*v53);
        v58 = vmovl_high_u8(*(uint8x16_t *)v53->i8);
        v54[-2] = vmovl_u8(*(uint8x8_t *)v56.i8);
        v54[-1] = vmovl_high_u8(v56);
        *v54 = v57;
        v54[1] = v58;
        v54 += 4;
        v53 += 4;
        v55 -= 32;
      }
      while (v55);
      if (v29 == v30)
        goto LABEL_52;
      if ((v29 & 0x18) == 0)
      {
        v35 = (unsigned __int8 *)(v8 + v30);
        v34 = (_WORD *)(result + 2 * v30);
        do
        {
LABEL_48:
          v36 = *v35++;
          *v34++ = v36;
        }
        while (v34 != v18);
        goto LABEL_52;
      }
    }
    else
    {
      v30 = 0;
    }
    v34 = (_WORD *)(result + 2 * (v29 & 0xFFFFFFFFFFFFFFF8));
    v35 = (unsigned __int8 *)(v8 + (v29 & 0xFFFFFFFFFFFFFFF8));
    v59 = (uint8x8_t *)(v8 + v30);
    v60 = (uint16x8_t *)(result + 2 * v30);
    v61 = v30 - (v29 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v62 = *v59++;
      *v60++ = vmovl_u8(v62);
      v61 += 8;
    }
    while (v61);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_48;
  }
LABEL_52:
  v63 = v7;
  v64 = *a2;
  v37 = *(unsigned int *)(v5 + 132);
  if ((_DWORD)v37 != *(_DWORD *)(v5 + 128))
  {
    v41 = *(_QWORD *)(v5 + 120) + 24 * v37;
    *(_QWORD *)v41 = v7;
    *(_OWORD *)(v41 + 8) = v64;
    ++*(_DWORD *)(v5 + 132);
    v63 = 0;
LABEL_58:
    if (!a3)
      return result;
    goto LABEL_59;
  }
  v38 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 120, v37 + 1, (unint64_t)&v63);
  v39 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 132);
  v40 = *(_QWORD *)v38;
  *(_QWORD *)v38 = 0;
  *(_QWORD *)v39 = v40;
  *(_OWORD *)(v39 + 8) = *(_OWORD *)(v38 + 8);
  result = (unint64_t)v63;
  ++*(_DWORD *)(v5 + 132);
  v63 = 0;
  if (!result)
    goto LABEL_58;
  if (*(_DWORD *)result == 2)
  {
    result = WTF::StringImpl::destroy();
    if (!a3)
      return result;
  }
  else
  {
    *(_DWORD *)result -= 2;
    if (!a3)
      return result;
  }
LABEL_59:
  if (*(_DWORD *)a3 == 2)
    return WTF::StringImpl::destroy();
  *(_DWORD *)a3 -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::UnaryExpression *a2)
{
  uint64_t v4;
  __int16 v5;
  unsigned __int8 *v6;
  unsigned int v7;
  _DWORD *result;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int i;
  int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  WTF *v31;
  unint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t (**v37)(uint64_t);
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  _DWORD *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t (***__return_ptr)(uint64_t), uint64_t, uint64_t *);
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  WTF *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  char v92;
  char v93;
  WTF *v94;
  uint64_t v95;
  char v96;
  WTF *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (**v130)(uint64_t);
  uint64_t v131[3];
  int v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 72) == 2)
  {
    v9 = *((_QWORD *)a2 + 8);
    v10 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    WGSL::AST::Visitor::visit(this, v9);
    v11 = *((_QWORD *)this + 11);
    *(_QWORD *)(v9 + 24) = v11;
    *((_QWORD *)this + 11) = 0;
    *((_WORD *)this + 52) = v10;
    if (v11 && *(_DWORD *)(v11 + 48) == 11)
    {
      v12 = *((_QWORD *)this + 14);
      v13 = *(WTF **)(v11 + 8);
      v14 = *(unsigned __int8 *)(v11 + 1);
      LOBYTE(v88) = *(_BYTE *)v11;
      v94 = v13;
      LOBYTE(v97) = v14;
      LOBYTE(v86) = 0;
      v15 = (v14 << 16) | ((unint64_t)v88 << 8) | 6;
      v130 = (uint64_t (**)(uint64_t))v15;
      v131[0] = (uint64_t)v13;
      result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v12 + 16), (unsigned __int8 *)&v130);
      v16 = *(_DWORD **)(v12 + 16);
      if (v16)
        v16 += 6 * *(v16 - 1);
      if (v16 == result || (v17 = *((_QWORD *)result + 2)) == 0)
      {
        v17 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(v12, &v88, (char *)&v97, (uint64_t *)&v94, (char *)&v86);
        v99 = (uint64_t *)v17;
        v115 = v15;
        v116 = (uint64_t)v13;
        result = (_DWORD *)WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v12 + 16), (unsigned __int8 *)&v115, (uint64_t *)&v99, (uint64_t)&v130);
      }
      *((_QWORD *)this + 11) = v17;
    }
    else
    {
      LOBYTE(v130) = 39;
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (__int128 *)((char *)a2 + 8), "cannot dereference expression of type '", 40, v11, (char *)&v130);
    }
    return result;
  }
  if (!*((_BYTE *)a2 + 72))
  {
    v4 = *((_QWORD *)a2 + 8);
    v5 = *((_WORD *)this + 52);
    *((_WORD *)this + 52) = 3;
    WGSL::AST::Visitor::visit(this, v4);
    v6 = (unsigned __int8 *)*((_QWORD *)this + 11);
    *(_QWORD *)(v4 + 24) = v6;
    *((_QWORD *)this + 11) = 0;
    *((_WORD *)this + 52) = v5;
    if (!v6 || *((_DWORD *)v6 + 12) != 10)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "cannot take address of expression", 34);
    v7 = *v6;
    if (v7 == 1)
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "cannot take the address of expression in handle address space", 62);
    if (v6[16])
      return WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "cannot take the address of a vector component", 46);
    result = (_DWORD *)WGSL::TypeStore::pointerType(*((_QWORD *)this + 14), v7, *((_QWORD *)v6 + 1), v6[1]);
    *((_QWORD *)this + 11) = result;
    return result;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = *((_QWORD *)a2 + 8);
  v87 = 0;
  v88 = (WTF *)&v90;
  v90 = v20;
  v89 = 0x100000001;
  v86 = 0;
  v21 = *((_QWORD *)this + 19);
  if (!v21)
    goto LABEL_118;
  v22 = (__int128 *)((char *)a2 + 8);
  v23 = *(_DWORD *)(v21 - 8);
  v24 = *((_DWORD *)v91 + 4);
  if (v24 < 0x100)
    v25 = WTF::StringImpl::hashSlowCase(v91);
  else
    v25 = v24 >> 8;
  for (i = 0; ; v25 = i + v27)
  {
    v27 = v25 & v23;
    v28 = v21 + 48 * (v25 & v23);
    v29 = *(WTF **)v28;
    if (*(_QWORD *)v28 != -1)
    {
      if (!v29)
        goto LABEL_116;
      if ((WTF::equal(v29, v91, v19) & 1) != 0)
        break;
    }
    ++i;
  }
  v30 = *((_QWORD *)this + 19);
  if (v30 && v28 == v30 + 48 * *(unsigned int *)(v30 - 4))
    goto LABEL_116;
  v97 = 0;
  v98 = 0;
  if (HIDWORD(v89) >> 29)
  {
    __break(0xC471u);
    goto LABEL_132;
  }
  v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v89)));
  LODWORD(v98) = HIDWORD(v89);
  v97 = v31;
  v32 = 0;
  do
  {
    while (1)
    {
      v130 = 0;
      v35 = *((_QWORD *)v88 + v32);
      v36 = *((_WORD *)this + 52);
      *((_BYTE *)this + 105) = 0;
      WGSL::AST::Visitor::visit(this, v35);
      v37 = (uint64_t (**)(uint64_t))*((_QWORD *)this + 11);
      *(_QWORD *)(v35 + 24) = v37;
      *((_QWORD *)this + 11) = 0;
      *((_WORD *)this + 52) = v36;
      v130 = v37;
      if (*(uint64_t (***)(uint64_t))(*((_QWORD *)this + 14) + 24) == v37)
      {
        *((_QWORD *)this + 11) = v37;
        goto LABEL_114;
      }
      v38 = HIDWORD(v98);
      if (HIDWORD(v98) != (_DWORD)v98)
        break;
      v33 = (_QWORD *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v97, HIDWORD(v98) + 1, (unint64_t)&v130);
      v34 = HIDWORD(v98);
      *((_QWORD *)v97 + HIDWORD(v98)) = *v33;
      HIDWORD(v98) = v34 + 1;
      if (++v32 >= HIDWORD(v89))
        goto LABEL_36;
    }
    *((_QWORD *)v97 + HIDWORD(v98)) = v37;
    HIDWORD(v98) = v38 + 1;
    ++v32;
  }
  while (v32 < HIDWORD(v89));
LABEL_36:
  WGSL::resolveOverloads(*((_QWORD *)this + 14), (uint64_t *)(v28 + 32), (uint64_t)&v97, (uint64_t)&v86, (uint64_t)&v94);
  if (!v96)
  {
    v57 = WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v130);
    v58 = HIDWORD(v98);
    if (HIDWORD(v98))
    {
      v59 = v97;
      v60 = *(_QWORD *)v97;
      v115 = v130[4](v57);
      v116 = v115;
      v117 = v115;
      v118 = v115;
      v119 = v115;
      v120 = v115;
      v121 = v115;
      v122 = v115;
      v123 = v115;
      v124 = v115;
      v125 = v115;
      v126 = v115;
      v127 = v115;
      v128 = v115;
      v129 = v115;
      v61 = *(unsigned int *)(v60 + 48);
      if ((_DWORD)v61 == -1)
        goto LABEL_129;
      v99 = &v115;
      ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v61])(&v99, v60);
      v130[5]((uint64_t)&v130);
      if ((_DWORD)v58 != 1)
      {
        v62 = (uint64_t *)((char *)v59 + 8);
        v63 = 8 * v58 - 8;
        do
        {
          v64 = *v62;
          v130[4]((uint64_t)&v130);
          WTF::printInternal();
          v130[5]((uint64_t)&v130);
          v115 = v130[4]((uint64_t)&v130);
          v116 = v115;
          v117 = v115;
          v118 = v115;
          v119 = v115;
          v120 = v115;
          v121 = v115;
          v122 = v115;
          v123 = v115;
          v124 = v115;
          v125 = v115;
          v126 = v115;
          v127 = v115;
          v128 = v115;
          v129 = v115;
          v65 = *(unsigned int *)(v64 + 48);
          if ((_DWORD)v65 == -1)
            goto LABEL_129;
          v99 = &v115;
          ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v65])(&v99, v64);
          v130[5]((uint64_t)&v130);
          ++v62;
          v63 -= 8;
        }
        while (v63);
      }
    }
    WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v115);
    if (HIDWORD(v87))
    {
      (*(void (**)(uint64_t *))(v115 + 32))(&v115);
      WTF::printInternal();
      (*(void (**)(uint64_t *))(v115 + 40))(&v115);
      v66 = HIDWORD(v87);
      if (HIDWORD(v87))
      {
        v67 = v86;
        v68 = *(_QWORD *)v86;
        v99 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v115 + 32))(&v115);
        v100 = (uint64_t)v99;
        v101 = (uint64_t)v99;
        v102 = (uint64_t)v99;
        v103 = (uint64_t)v99;
        v104 = (uint64_t)v99;
        v105 = (uint64_t)v99;
        v106 = (uint64_t)v99;
        v107 = (uint64_t)v99;
        v108 = (uint64_t)v99;
        v109 = (uint64_t)v99;
        v110 = (uint64_t)v99;
        v111 = (uint64_t)v99;
        v112 = (uint64_t)v99;
        v113 = (uint64_t)v99;
        v69 = *(unsigned int *)(v68 + 48);
        if ((_DWORD)v69 == -1)
          goto LABEL_129;
        v114 = (uint64_t *)&v99;
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v69])(&v114, v68);
        (*(void (**)(uint64_t *))(v115 + 40))(&v115);
        if ((_DWORD)v66 != 1)
        {
          v70 = (uint64_t *)((char *)v67 + 8);
          v71 = 8 * v66 - 8;
          do
          {
            v72 = *v70;
            (*(void (**)(uint64_t *))(v115 + 32))(&v115);
            WTF::printInternal();
            (*(void (**)(uint64_t *))(v115 + 40))(&v115);
            v99 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v115 + 32))(&v115);
            v100 = (uint64_t)v99;
            v101 = (uint64_t)v99;
            v102 = (uint64_t)v99;
            v103 = (uint64_t)v99;
            v104 = (uint64_t)v99;
            v105 = (uint64_t)v99;
            v106 = (uint64_t)v99;
            v107 = (uint64_t)v99;
            v108 = (uint64_t)v99;
            v109 = (uint64_t)v99;
            v110 = (uint64_t)v99;
            v111 = (uint64_t)v99;
            v112 = (uint64_t)v99;
            v113 = (uint64_t)v99;
            v73 = *(unsigned int *)(v72 + 48);
            if ((_DWORD)v73 == -1)
              goto LABEL_129;
            v114 = (uint64_t *)&v99;
            ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v73])(&v114, v72);
            (*(void (**)(uint64_t *))(v115 + 40))(&v115);
            ++v70;
            v71 -= 8;
          }
          while (v71);
        }
      }
      (*(void (**)(uint64_t *))(v115 + 32))(&v115);
      WTF::printInternal();
      (*(void (**)(uint64_t *))(v115 + 40))(&v115);
    }
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v115);
    v93 = 40;
    WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v130);
    v92 = 41;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>((uint64_t)this, v22, (int8x16_t *)"no matching overload for ", 26, (int8x16_t *)"operator", 9, 32, (uint64_t)v91, (uint64_t *)&v99, &v93, (uint64_t *)&v114, &v92);
    v74 = v114;
    v114 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v74 -= 2;
    }
    v75 = v99;
    v99 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy();
      else
        *(_DWORD *)v75 -= 2;
    }
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v115);
    WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v130);
    goto LABEL_114;
  }
  if (*((_BYTE *)this + 105) && *(_BYTE *)(v28 + 9))
  {
    LOBYTE(v130) = 39;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>((uint64_t)this, (__int128 *)((char *)a2 + 8), (int8x16_t *)"ignoring return value of builtin '", 35, (uint64_t)v91, (char *)&v130);
  }
  v39 = HIDWORD(v89);
  if (HIDWORD(v89))
  {
    v40 = (uint64_t *)((char *)v94 + 8);
    v41 = *(unsigned int *)v94;
    v42 = v88;
    while (v41)
    {
      v44 = *v40++;
      v43 = v44;
      v45 = *(_QWORD *)v42;
      v42 = (WTF *)((char *)v42 + 8);
      *(_QWORD *)(v45 + 24) = v43;
      --v41;
      if (!--v39)
        goto LABEL_44;
    }
    __break(0xC471u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(0xC471u);
LABEL_132:
    JUMPOUT(0x1825ECE8CLL);
  }
LABEL_44:
  v46 = v95;
  *((_QWORD *)this + 11) = v95;
  if ((*(unsigned int (**)(WGSL::AST::UnaryExpression *))(*(_QWORD *)a2 + 16))(a2) == 20)
  {
    *((_BYTE *)a2 + 88) = *(_BYTE *)(v28 + 8) == 1;
    *((_BYTE *)a2 + 89) = *(_BYTE *)(v28 + 24);
  }
  v85 = v46;
  v47 = HIDWORD(v89);
  if (!HIDWORD(v89))
  {
    v115 = 0;
    v55 = *(void (**)(uint64_t (***__return_ptr)(uint64_t), uint64_t, uint64_t *))(v28 + 16);
    v56 = (__int128 *)((char *)a2 + 8);
    if (v55)
      goto LABEL_84;
    v48 = 0;
    goto LABEL_100;
  }
  v48 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * HIDWORD(v89) + 8));
  *v48 = v47;
  bzero(v48 + 2, 24 * ((24 * v47 - 24) / 0x18uLL) + 24);
  v49 = 0;
  v115 = (uint64_t)v48;
  v50 = v48 + 6;
  v51 = 1;
  do
  {
    if (v49 >= HIDWORD(v89))
      goto LABEL_130;
    v52 = *((_QWORD *)v88 + v49);
    if (!*(_BYTE *)(v52 + 56)
      || !WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)(v52 + 8), *(_QWORD *)(v52 + 24), v52 + 32))
    {
      v51 = 0;
      goto LABEL_49;
    }
    if (!*(_BYTE *)(v52 + 56))
      goto LABEL_127;
    if (v49 >= *v48)
      goto LABEL_128;
    v18 = v50 - 4;
    v53 = *v50;
    v54 = *(unsigned int *)(v52 + 48);
    if ((_DWORD)v53 == -1)
    {
      if ((_DWORD)v54 == -1)
        goto LABEL_49;
    }
    else if ((_DWORD)v54 == -1)
    {
      ((void (*)(uint64_t (***)(uint64_t), _DWORD *))off_1E0FD7CC8[v53])(&v130, v18);
      *v50 = -1;
      goto LABEL_49;
    }
    v130 = (uint64_t (**)(uint64_t))(v50 - 4);
    ((void (*)(uint64_t (***)(uint64_t)))off_1E0FD80E0[v54])(&v130);
LABEL_49:
    ++v49;
    v50 += 6;
  }
  while (v47 != v49);
  v55 = *(void (**)(uint64_t (***__return_ptr)(uint64_t), uint64_t, uint64_t *))(v28 + 16);
  if (!v55)
  {
    v56 = (__int128 *)((char *)a2 + 8);
LABEL_100:
    v76 = *((unsigned __int8 *)this + 104);
    if (v76 <= 2)
    {
      if (v76 == 2)
        v77 = "override";
      else
        v77 = "constant";
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)this, 0, v56, "cannot call function from ", 27, (uint64_t)v77, 9, (uint64_t)" context", 9);
    }
    goto LABEL_105;
  }
  v56 = (__int128 *)((char *)a2 + 8);
  if ((v51 & 1) == 0)
  {
    v115 = 0;
    goto LABEL_106;
  }
LABEL_84:
  v55(&v130, v85, &v115);
  if (v132)
  {
    if (v132 == 1)
    {
      WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)this, v56, v131[0]);
      goto LABEL_96;
    }
LABEL_129:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x1825ECE98);
  }
  WGSL::TypeChecker::setConstantValue<WGSL::AST::CallExpression>((uint64_t)this, (uint64_t)a2, v85, (uint64_t)v131);
LABEL_96:
  if (v132 != -1)
    ((void (*)(uint64_t **, uint64_t *))off_1E0FD7DD0[v132])(&v99, v131);
  v48 = (unsigned int *)v115;
LABEL_105:
  v115 = 0;
  if (v48)
  {
LABEL_106:
    v78 = *v48;
    if ((_DWORD)v78)
    {
      v79 = 24 * v78;
      v80 = v48 + 6;
      do
      {
        v18 = v80 - 4;
        v81 = *v80;
        if ((_DWORD)v81 != -1)
          ((void (*)(uint64_t (***)(uint64_t), _DWORD *))off_1E0FD7CC8[v81])(&v130, v18);
        *v80 = -1;
        v80 += 6;
        v79 -= 24;
      }
      while (v79);
    }
    WTF::fastFree((WTF *)v48, v18);
    if (v96)
      goto LABEL_112;
  }
  else
  {
LABEL_112:
    if (v94)
      WTF::fastFree(v94, v18);
  }
LABEL_114:
  v82 = v97;
  if (v97)
  {
    v97 = 0;
    LODWORD(v98) = 0;
    WTF::fastFree(v82, v18);
  }
LABEL_116:
  v83 = v86;
  if (v86)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree(v83, v18);
  }
LABEL_118:
  v84 = v88;
  if (&v90 != (uint64_t *)v88 && v88)
  {
    v88 = 0;
    LODWORD(v89) = 0;
    WTF::fastFree(v84, v18);
  }
  result = v91;
  v91 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::BoolLiteral *a2)
{
  char v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 56);
  v3 = *((_BYTE *)a2 + 64);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (char *)a2 + 32;
      if ((_DWORD)v4 == 6)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _BYTE *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_BYTE *)a2 + 32) = v3;
    *((_DWORD *)a2 + 12) = 6;
  }
  else
  {
    *((_BYTE *)a2 + 32) = v3;
    *((_DWORD *)a2 + 12) = 6;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Signed32Literal *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 64);
  v3 = *((_DWORD *)a2 + 16);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_DWORD *)((char *)a2 + 32);
      if ((_DWORD)v4 == 3)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 3;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 3;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Float32Literal *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 80);
  v3 = *((_DWORD *)a2 + 16);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_DWORD *)((char *)a2 + 32);
      if (!(_DWORD)v4)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 0;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 0;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Float16Literal *a2)
{
  __int16 v3;
  uint64_t v4;
  _WORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 88);
  v3 = *((_WORD *)a2 + 32);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_WORD *)((char *)a2 + 32);
      if ((_DWORD)v4 == 1)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _WORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_WORD *)a2 + 16) = v3;
    *((_DWORD *)a2 + 12) = 1;
  }
  else
  {
    *((_WORD *)a2 + 16) = v3;
    *((_DWORD *)a2 + 12) = 1;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::Unsigned32Literal *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 72);
  v3 = *((_DWORD *)a2 + 16);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_DWORD *)((char *)a2 + 32);
      if ((_DWORD)v4 == 4)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 4;
  }
  else
  {
    *((_DWORD *)a2 + 8) = v3;
    *((_DWORD *)a2 + 12) = 4;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::AbstractIntegerLiteral *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 32);
  v3 = *((_QWORD *)a2 + 8);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_QWORD *)((char *)a2 + 32);
      if ((_DWORD)v4 == 5)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_QWORD *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 5;
  }
  else
  {
    *((_QWORD *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 5;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

uint64_t WGSL::TypeChecker::visit(uint64_t this, WGSL::AST::AbstractFloatLiteral *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;

  *(_QWORD *)(this + 88) = *(_QWORD *)(*(_QWORD *)(this + 112) + 40);
  v3 = *((_QWORD *)a2 + 8);
  if (*((_BYTE *)a2 + 56))
  {
    v4 = *((unsigned int *)a2 + 12);
    if ((_DWORD)v4 != -1)
    {
      v5 = (_QWORD *)((char *)a2 + 32);
      if ((_DWORD)v4 == 2)
      {
        *v5 = v3;
        return this;
      }
      this = ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v4])(&v6, v5);
    }
    *((_QWORD *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 2;
  }
  else
  {
    *((_QWORD *)a2 + 4) = v3;
    *((_DWORD *)a2 + 12) = 2;
    *((_BYTE *)a2 + 56) = 1;
  }
  return this;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ArrayTypeExpression *a2)
{
  uint64_t v4;
  const WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26[4];
  int v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  __int128 *v40;

  v4 = *((_QWORD *)a2 + 8);
  if (!v4)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "'array' requires at least 1 template argument", 46);
    return;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v4 + 16))(*((_QWORD *)a2 + 8)) == 22)
  {
    v6 = WGSL::TypeChecker::lookupType(this, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    *((_QWORD *)this + 11) = v6;
    v7 = *((unsigned int *)v6 + 12);
    if ((_DWORD)v7 != 13)
      goto LABEL_4;
LABEL_24:
    *(_QWORD *)&v30 = "' requires template arguments";
    *((_QWORD *)&v30 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, (uint64_t)v6, &v30);
    v20 = *(_QWORD *)(*((_QWORD *)this + 14) + 24);
    *(_QWORD *)(v4 + 24) = v20;
    *((_QWORD *)this + 11) = v20;
    return;
  }
  WGSL::AST::Visitor::visit(this, v4);
  v6 = (_QWORD *)*((_QWORD *)this + 11);
  v7 = *((unsigned int *)v6 + 12);
  if ((_DWORD)v7 == 13)
    goto LABEL_24;
LABEL_4:
  *((_QWORD *)this + 11) = 0;
  v8 = *(_QWORD **)(*((_QWORD *)this + 14) + 24);
  *(_QWORD *)(v4 + 24) = v6;
  if (v8 == v6)
  {
    *((_QWORD *)this + 11) = v6;
    return;
  }
  if ((_DWORD)v7 == -1)
    goto LABEL_48;
  *(_QWORD *)&v30 = v26;
  if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type25hasCreationFixedFootprintEvE3__0JZNKS9_25hasCreationFixedFootprintEvE3__1ZNKS9_25hasCreationFixedFootprintEvE3__2ZNKS9_25hasCreationFixedFootprintEvE3__3ZNKS9_25hasCreationFixedFootprintEvE3__4ZNKS9_25hasCreationFixedFootprintEvE3__5ZNKS9_25hasCreationFixedFootprintEvE3__6ZNKS9_25hasCreationFixedFootprintEvE3__7ZNKS9_25hasCreationFixedFootprintEvE3__8ZNKS9_25hasCreationFixedFootprintEvE3__9ZNKS9_25hasCreationFixedFootprintEvE4__10ZNKS9_25hasCreationFixedFootprintEvE4__11ZNKS9_25hasCreationFixedFootprintEvE4__12ZNKS9_25hasCreationFixedFootprintEvE4__13ZNKS9_25hasCreationFixedFootprintEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v30, v6) & 1) == 0)
  {
    *(_QWORD *)&v30 = "' cannot be used as an element type of an array";
    *((_QWORD *)&v30 + 1) = 48;
    WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (WGSL::AST::ArrayTypeExpression *)((char *)a2 + 8), 39, (uint64_t)v6, &v30);
    return;
  }
  v9 = *((_QWORD *)a2 + 9);
  if (!v9)
  {
    v21 = 0;
    goto LABEL_46;
  }
  v10 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 2;
  WGSL::AST::Visitor::visit(this, v9);
  v11 = *((_QWORD *)this + 11);
  *(_QWORD *)(v9 + 24) = v11;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v10;
  v12 = *((_QWORD *)this + 14);
  v13 = *(unsigned __int8 **)(v12 + 64);
  if (v13 != (unsigned __int8 *)v11)
  {
    v14 = *(unsigned __int8 **)(v12 + 24);
    if (v14 != v13
      && v14 != (unsigned __int8 *)v11
      && WGSL::conversionRank((unsigned __int8 *)v11, v13) == -1)
    {
      v23 = *((_QWORD *)this + 14);
      v24 = *(unsigned __int8 **)(v23 + 72);
      if (v24 != (unsigned __int8 *)v11)
      {
        v25 = *(unsigned __int8 **)(v23 + 24);
        if (v25 != v24
          && v25 != (unsigned __int8 *)v11
          && WGSL::conversionRank((unsigned __int8 *)v11, v24) == -1)
        {
          LOBYTE(v30) = 39;
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,char>((uint64_t)this, 1, (__int128 *)((char *)a2 + 8), "array count must be an i32 or u32 value, found '", 49, v11, (char *)&v30);
          return;
        }
      }
    }
  }
  v9 = *((_QWORD *)a2 + 9);
  LOBYTE(v26[0]) = 0;
  v28 = 0;
  if (!*(_BYTE *)(v9 + 56))
  {
    v21 = 2;
    goto LABEL_46;
  }
  v27 = -1;
  v15 = *(unsigned int *)(v9 + 48);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(__int128 *, unsigned int *, uint64_t))off_1E0FD8010[v15])(&v30, v26, v9 + 32);
    v27 = v15;
    v9 = *((_QWORD *)a2 + 9);
  }
  v28 = 1;
  v16 = *((_QWORD *)this + 14);
  v29 = v11;
  *(_QWORD *)&v30 = &v29;
  *((_QWORD *)&v30 + 1) = v16;
  v31 = v16;
  v32 = v16;
  v33 = v16;
  v34 = &v29;
  v35 = v16;
  v36 = &v29;
  v37 = &v29;
  v38 = &v29;
  v39 = &v29;
  v17 = *(unsigned int *)(v11 + 48);
  if ((_DWORD)v17 == -1)
    goto LABEL_48;
  v9 += 8;
  v40 = &v30;
  v18 = ((uint64_t (*)(__int128 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN4WGSL10concretizeEPKNS8_4TypeERNS8_9TypeStoreEE3__0JZNS8_10concretizeESB_SD_E3__1ZNS8_10concretizeESB_SD_E3__2ZNS8_10concretizeESB_SD_E3__3ZNS8_10concretizeESB_SD_E3__4ZNS8_10concretizeESB_SD_E3__5ZNS8_10concretizeESB_SD_E3__6ZNS8_10concretizeESB_SD_E3__7ZNS8_10concretizeESB_SD_E3__8ZNS8_10concretizeESB_SD_E3__9ZNS8_10concretizeESB_SD_E4__10ZNS8_10concretizeESB_SD_E4__11ZNS8_10concretizeESB_SD_E4__12ZNS8_10concretizeESB_SD_E4__13ZNS8_10concretizeESB_SD_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSW_6VectorENSW_6MatrixENSW_5ArrayENSW_6StructENSW_15PrimitiveStructENSW_8FunctionENSW_7TextureENSW_14TextureStorageENSW_12TextureDepthENSW_9ReferenceENSW_7PointerENSW_6AtomicENSW_15TypeConstructorENSW_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v40, v11);
  if (!WGSL::TypeChecker::convertValue((uint64_t)this, (__int128 *)v9, v18, (uint64_t)v26))
  {
    v9 = 0;
    v21 = 1;
    if (v28)
    {
      v22 = 1;
      goto LABEL_43;
    }
LABEL_46:
    *((_QWORD *)this + 11) = WGSL::TypeStore::arrayType(*((_QWORD *)this + 14), (uint64_t)v6, v9, v21);
    return;
  }
  if (!v28)
  {
    __break(1u);
LABEL_48:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_49;
  }
  switch(v27)
  {
    case 5:
      v19 = *(_QWORD *)v26;
      break;
    case 4:
      v19 = v26[0];
      break;
    case 3:
      v19 = (int)v26[0];
      break;
    default:
LABEL_49:
      __break(0xC471u);
      return;
  }
  if (v19 < 1)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(this, 1, (__int128 *)((char *)a2 + 8), "array count must be greater than 0", 35);
    if (!v28)
      return;
    v22 = 0;
    v21 = 0;
  }
  else
  {
    v9 = v19;
    v22 = 1;
    v21 = 1;
  }
LABEL_43:
  if (v27 != -1)
    ((void (*)(__int128 *, unsigned int *))off_1E0FD7CC8[v27])(&v30, v26);
  if ((v22 & 1) != 0)
    goto LABEL_46;
}

_QWORD *WGSL::TypeChecker::lookupType(WGSL::TypeChecker *this, const WGSL::AST::Identifier *a2, const WTF::StringImpl *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *result;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  __int128 v31;

  v5 = (_QWORD *)*((_QWORD *)this + 5);
  while (1)
  {
    v6 = v5[1];
    if (v6)
      break;
LABEL_3:
    v5 = (_QWORD *)*v5;
    if (!v5)
    {
      LOBYTE(v30) = 39;
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>((uint64_t)this, (__int128 *)((char *)a2 + 8), (int8x16_t *)"unresolved type '", 18, *((_QWORD *)a2 + 3), (char *)&v30);
      goto LABEL_39;
    }
  }
  v7 = *(_DWORD *)(v6 - 8);
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
  v9 = *((_DWORD *)v8 + 4);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(v8);
  else
    v10 = v9 >> 8;
  for (i = 0; ; v10 = i + v12)
  {
    v12 = v10 & v7;
    v13 = *(WTF **)(v6 + (v12 << 6));
    if (v13 != (WTF *)-1)
    {
      if (!v13)
      {
        v15 = v5[1];
        if (!v15)
          goto LABEL_3;
        v16 = *(unsigned int *)(v15 - 4);
        v14 = v15 + (v16 << 6);
        goto LABEL_2;
      }
      if ((WTF::equal(v13, *((const WTF::StringImpl **)a2 + 3), a3) & 1) != 0)
        break;
    }
    ++i;
  }
  v14 = v6 + (v12 << 6);
  v15 = v5[1];
  if (!v15)
    goto LABEL_18;
  v16 = *(unsigned int *)(v15 - 4);
LABEL_2:
  if (v14 == v15 + (v16 << 6))
    goto LABEL_3;
LABEL_18:
  v17 = *(unsigned __int8 *)(v14 + 8);
  if (v17 == 1)
  {
    v18 = v14 + 16;
    return *(_QWORD **)v18;
  }
  if (v17 == 2)
    v19 = (int8x16_t *)"function";
  else
    v19 = (int8x16_t *)"value";
  if (v17 == 2)
    v20 = 9;
  else
    v20 = 6;
  v21 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v21)
    *v21 += 2;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(&v29, (int8x16_t *)"cannot use ", 12, v19, v20, " '", 3, (uint64_t)v21, "' as type", 10);
  if (v29)
  {
    v30 = v29;
    v31 = *(_OWORD *)((char *)a2 + 8);
    v23 = *((unsigned int *)this + 33);
    if ((_DWORD)v23 == *((_DWORD *)this + 32))
    {
      v24 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, v23 + 1, (unint64_t)&v30);
      v25 = *((_QWORD *)this + 15) + 24 * *((unsigned int *)this + 33);
      v26 = *(_QWORD *)v24;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)v25 = v26;
      *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
      v27 = v30;
      ++*((_DWORD *)this + 33);
      v30 = 0;
      if (v27)
      {
        if (*v27 == 2)
        {
          WTF::StringImpl::destroy();
          if (!v21)
            goto LABEL_39;
        }
        else
        {
          *v27 -= 2;
          if (!v21)
            goto LABEL_39;
        }
        goto LABEL_36;
      }
    }
    else
    {
      v28 = *((_QWORD *)this + 15) + 24 * v23;
      *(_QWORD *)v28 = v29;
      *(_OWORD *)(v28 + 8) = v31;
      ++*((_DWORD *)this + 33);
      v30 = 0;
    }
    if (!v21)
    {
LABEL_39:
      v18 = *((_QWORD *)this + 14) + 24;
      return *(_QWORD **)v18;
    }
LABEL_36:
    if (*v21 == 2)
      WTF::StringImpl::destroy();
    else
      *v21 -= 2;
    goto LABEL_39;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::AST::Identifier const&,char>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, char *a6)
{
  unint64_t v9;
  int v10;
  char v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *result;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;

  if (a4)
    v9 = a4 - 1;
  else
    v9 = 0;
  if (!a5)
  {
    if (!(v9 >> 31))
    {
      v11 = *a6;
      v13 = 1;
      goto LABEL_8;
    }
LABEL_35:
    __break(0xC471u);
LABEL_36:
    JUMPOUT(0x1825EDC38);
  }
  *(_DWORD *)a5 += 2;
  if (v9 >> 31)
    goto LABEL_35;
  v10 = *(_DWORD *)(a5 + 4);
  if (v10 < 0)
    goto LABEL_33;
  v11 = *a6;
  v12 = __OFADD__(v10, 1);
  v13 = v10 + 1;
  if (v12)
    goto LABEL_33;
LABEL_8:
  if (__OFADD__((_DWORD)v9, v13))
  {
LABEL_33:
    v23 = 0;
LABEL_34:
    __break(0xC471u);
    goto LABEL_36;
  }
  v14 = !a5 || (*(_BYTE *)(a5 + 16) & 4) != 0;
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<char,void>>((v9 + v13), v14, a3, v9, a5, v11, &v23);
  v15 = v23;
  if (!v23)
    goto LABEL_34;
  v23 = 0;
  v24 = v15;
  v25 = *a2;
  v16 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v16 != *(_DWORD *)(a1 + 128))
  {
    v22 = *(_QWORD *)(a1 + 120) + 24 * v16;
    *(_QWORD *)v22 = v15;
    *(_OWORD *)(v22 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    v24 = 0;
LABEL_20:
    result = v23;
    v23 = 0;
    if (!result)
      goto LABEL_24;
    goto LABEL_21;
  }
  v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v24);
  v18 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v19 = *(_QWORD *)v17;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  v20 = v24;
  ++*(_DWORD *)(a1 + 132);
  v24 = 0;
  if (!v20)
    goto LABEL_20;
  if (*v20 == 2)
  {
    WTF::StringImpl::destroy();
    result = v23;
    v23 = 0;
    if (!result)
      goto LABEL_24;
  }
  else
  {
    *v20 -= 2;
    result = v23;
    v23 = 0;
    if (!result)
      goto LABEL_24;
  }
LABEL_21:
  if (*result == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *result -= 2;
LABEL_24:
  if (a5)
  {
    if (*(_DWORD *)a5 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)a5 -= 2;
  }
  return result;
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ElaboratedTypeExpression *a2, const WTF::StringImpl *a3)
{
  _QWORD *v5;
  uint64_t v6;
  WGSL::TypeChecker *v7;
  WGSL::AST::ReferenceTypeExpression *v8;
  __int128 v9;

  v5 = WGSL::TypeChecker::lookupType(this, (WGSL::AST::ElaboratedTypeExpression *)((char *)a2 + 64), a3);
  if (*(_QWORD **)(*((_QWORD *)this + 14) + 24) == v5)
  {
    *((_QWORD *)this + 11) = v5;
  }
  else if (v5 && *((_DWORD *)v5 + 12) == 13)
  {
    v6 = v5[5];
    if (!v6)
    {
      v7 = (WGSL::TypeChecker *)std::__throw_bad_function_call[abi:sn180100]();
      WGSL::TypeChecker::visit(v7, v8);
    }
    *((_QWORD *)this + 11) = (*(uint64_t (**)(uint64_t, WGSL::AST::ElaboratedTypeExpression *))(*(_QWORD *)v6 + 48))(v6, a2);
  }
  else
  {
    *(_QWORD *)&v9 = "' does not take template arguments";
    *((_QWORD *)&v9 + 1) = 35;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 1, (WGSL::AST::ElaboratedTypeExpression *)((char *)a2 + 8), (int8x16_t *)"type '", 7, (uint64_t)v5, &v9);
  }
}

void WGSL::TypeChecker::visit(WGSL::TypeChecker *this, WGSL::AST::ReferenceTypeExpression *a2)
{
  __break(0xC471u);
}

uint64_t WGSL::TypeChecker::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  _QWORD *v32;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (_QWORD *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v32 = v6;
  v8 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 56))
  {
    v9 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v8 + 1, (unint64_t)&v32);
    v10 = *(unsigned int *)(a1 + 60);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *v9;
    *v9 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = (uint64_t)v32;
    v14 = v10 + 1;
    *(_DWORD *)(a1 + 60) = v14;
    v32 = 0;
    if (v13)
    {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v13, v7);
      v14 = *(_DWORD *)(a1 + 60);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8) = v6;
    v14 = v8 + 1;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (!v14)
    goto LABEL_24;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14 - 8);
  v15 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v15)
  {
    v16 = *(uint64_t **)(a2 + 16);
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      WGSL::AST::Visitor::visit((_BYTE *)a1, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t **)a2;
    v21 = 8 * v19;
    do
    {
      v22 = *v20++;
      WGSL::AST::Visitor::visit((_BYTE *)a1, v22);
      v21 -= 8;
    }
    while (v21);
  }
  v23 = *(_QWORD *)(a2 + 32);
  if (v23)
  {
    v24 = *(_WORD *)(a1 + 104);
    *(_WORD *)(a1 + 104) = 3;
    WGSL::AST::Visitor::visit((_BYTE *)a1, v23);
    v25 = *(unsigned __int8 **)(a1 + 88);
    *(_QWORD *)(v23 + 24) = v25;
    *(_QWORD *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 104) = v24;
    v26 = *(_QWORD *)(a1 + 112);
    v7 = *(unsigned __int8 **)(v26 + 56);
    if (v7 != v25)
    {
      v27 = *(unsigned __int8 **)(v26 + 24);
      v28 = v27 == v7 || v27 == v25;
      if (!v28 && WGSL::conversionRank(v25, v7) == -1)
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&>(a1, (__int128 *)(v23 + 8), (int8x16_t *)"expected 'BOOL', found ", 24, (uint64_t)v25);
    }
  }
  *(_QWORD *)(a1 + 40) = v4;
  v29 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v29)
  {
LABEL_24:
    __break(0xC471u);
    JUMPOUT(0x1825EDF0CLL);
  }
  v30 = v29 - 1;
  result = *(_QWORD *)(*v5 + 8 * (v29 - 1));
  *(_QWORD *)(*v5 + 8 * (v29 - 1)) = 0;
  if (result)
    result = std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](result, v7);
  *(_DWORD *)(a1 + 60) = v30;
  return result;
}

uint64_t WGSL::TypeChecker::vectorFieldAccess(WGSL::Types::Vector const&,WGSL::AST::FieldAccessExpression &)::$_2::operator()(uint64_t result, _DWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;

  v3 = result;
  switch(a3)
  {
    case 'a':
    case 'w':
      if (*a2 <= 3u)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EE070);
      }
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 16) = -1;
      v4 = a2[24];
      if ((_DWORD)v4 == -1)
        return result;
      result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1E0FD8010[v4])(&v8, result, a2 + 20);
      break;
    case 'b':
    case 'z':
      if (*a2 <= 2u)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EE0D0);
      }
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 16) = -1;
      v4 = a2[18];
      if ((_DWORD)v4 == -1)
        return result;
      result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1E0FD8010[v4])(&v7, result, a2 + 14);
      break;
    case 'g':
    case 'y':
      if (*a2 <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EE090);
      }
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 16) = -1;
      v4 = a2[12];
      if ((_DWORD)v4 == -1)
        return result;
      result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1E0FD8010[v4])(&v6, result, a2 + 8);
      break;
    case 'r':
    case 'x':
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825EE0B0);
      }
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 16) = -1;
      v4 = a2[6];
      if ((_DWORD)v4 == -1)
        return result;
      result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1E0FD8010[v4])(&v5, result, a2 + 2);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1825EE0F0);
  }
  *(_DWORD *)(v3 + 16) = v4;
  return result;
}

uint64_t WGSL::TypeChecker::analyze(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  WTF *v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  WTF *v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  WTF *v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  WTF *v74;
  WTF *v75;
  void *v76;
  uint64_t v77;
  WTF *v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  WTF *v128;
  WTF *v129;
  void *v130;
  uint64_t v131;
  WTF *v132;
  __int128 v133;
  uint64_t v134;
  _OWORD *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  __int128 *v144;
  char *v145;
  _DWORD *v146;
  uint64_t v147;

  v4 = 0;
  while (2)
  {
    switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
    {
      case '&':
      case '(':
      case ')':
      case '+':
      case '-':
      case '.':
      case '2':
      case '4':
      case '6':
        goto LABEL_145;
      case '\'':
        v35 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v35)
        {
          if (*(_DWORD *)(*(_QWORD *)(a1 + 136) + 16 * v35 - 8) != 4)
          {
            v43 = 2;
            return v43 | v4;
          }
          v36 = (__int128 *)(a2 + 8);
          v38 = (_DWORD *)a1;
          v39 = 81;
        }
        else
        {
          v36 = (__int128 *)(a2 + 8);
          v37 = "break statement must be in a loop or switch case";
          v38 = (_DWORD *)a1;
          v39 = 49;
        }
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v38, 0, v36, v37, v39);
        v43 = 2;
        return v43 | v4;
      case '*':
        v40 = *(unsigned int *)(a2 + 52);
        if (!(_DWORD)v40)
          goto LABEL_145;
        v41 = *(uint64_t **)(a2 + 40);
        v42 = 8 * v40;
        v43 = 8;
        do
        {
          v44 = *v41++;
          v45 = WGSL::TypeChecker::analyze(a1, v44) | v43 & 0xFFFFFFF7;
          if ((v43 & 8) != 0)
            v43 = v45;
          v42 -= 8;
        }
        while (v42);
        return v43 | v4;
      case ',':
        v46 = 0;
        LODWORD(v47) = *(_DWORD *)(a1 + 148);
        v48 = v47;
        while (2)
        {
          v49 = v48 - 1;
          if (v48 - 1 >= 0)
          {
            if (v47 <= v49)
            {
              __break(0xC471u);
              JUMPOUT(0x1825EEB1CLL);
            }
            v50 = (_DWORD *)(*(_QWORD *)(a1 + 136) + 16 * v49);
            v51 = v50[2];
            switch(v51)
            {
              case 0:
LABEL_59:
                --v48;
                if (v51)
                  goto LABEL_143;
                continue;
              case 1:
                if (*(_BYTE *)(*(_QWORD *)v50 + 96))
                {
                  *(_BYTE *)(*(_QWORD *)v50 + 104) = 1;
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 44)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1825EEAF0);
                  }
                  *(_BYTE *)(a2 + 24) = 1;
                  v47 = *(unsigned int *)(a1 + 148);
                  if (v48 < v47)
                  {
                    v52 = *(_QWORD *)(a1 + 136);
                    v53 = (_DWORD *)(v52 + 16 * v48);
                    if (v53[2])
                      goto LABEL_219;
                    *(_BYTE *)(*(_QWORD *)v53 + 24) = 1;
                    v54 = v48 + 1;
                    if (v54 < v47)
                    {
                      v55 = (_DWORD *)(v52 + 16 * v48 + 24);
                      while (!*v55)
                      {
                        v46 = 1;
                        *(_BYTE *)(*((_QWORD *)v55 - 1) + 25) = 1;
                        ++v54;
                        v55 += 4;
                        if (v54 >= v47)
                          goto LABEL_59;
                      }
LABEL_219:
                      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_220:
                      __break(0xC471u);
                      JUMPOUT(0x1825EEB14);
                    }
                  }
                }
                break;
              case 4:
                WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (__int128 *)(a2 + 8), "continuing blocks must not contain a continue statement", 56);
                v43 = 4;
                return v43 | v4;
            }
LABEL_202:
            v43 = 4;
            return v43 | v4;
          }
          break;
        }
LABEL_143:
        if ((v46 & 1) != 0)
          goto LABEL_202;
        WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (__int128 *)(a2 + 8), "continue statement must be in a loop", 37);
LABEL_145:
        v43 = 8;
        return v43 | v4;
      case '/':
        if (*(_QWORD *)(a2 + 32))
          v12 = 10;
        else
          v12 = 0;
        v13 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v13 == *(_DWORD *)(a1 + 144))
        {
          v14 = v13 + (v13 >> 2);
          if (v14 >= 0x10)
            v15 = v14 + 1;
          else
            v15 = 16;
          if (v15 <= v13 + 1)
            v16 = v13 + 1;
          else
            v16 = v15;
          if (v16 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EEB4CLL);
          }
          v17 = *(WTF **)(a1 + 136);
          v18 = (WTF *)WTF::fastMalloc((WTF *)(16 * v16));
          *(_DWORD *)(a1 + 144) = v16;
          *(_QWORD *)(a1 + 136) = v18;
          if ((_DWORD)v13)
          {
            v20 = 16 * v13;
            v21 = v17;
            do
            {
              v22 = *(_OWORD *)v21;
              v21 = (WTF *)((char *)v21 + 16);
              *(_OWORD *)v18 = v22;
              v18 = (WTF *)((char *)v18 + 16);
              v20 -= 16;
            }
            while (v20);
            v18 = *(WTF **)(a1 + 136);
          }
          if (v17)
          {
            if (v18 == v17)
            {
              *(_QWORD *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v17, v19);
            v18 = *(WTF **)(a1 + 136);
          }
          v13 = *(unsigned int *)(a1 + 148);
          v23 = (uint64_t)v18 + 16 * v13;
        }
        else
        {
          v23 = *(_QWORD *)(a1 + 136) + 16 * v13;
        }
        *(_QWORD *)v23 = a2;
        *(_DWORD *)(v23 + 8) = 2;
        v81 = v13 + 1;
        *(_DWORD *)(a1 + 148) = v13 + 1;
        v82 = *(_QWORD *)(a2 + 48);
        v83 = *(unsigned int *)(v82 + 52);
        if ((_DWORD)v83)
        {
          v84 = *(uint64_t **)(v82 + 40);
          v85 = 8 * v83;
          v86 = 8;
          do
          {
            v87 = *v84++;
            v88 = WGSL::TypeChecker::analyze(a1, v87) | v86 & 0xFFFFFFF7;
            if ((v86 & 8) != 0)
              v86 = v88;
            v85 -= 8;
          }
          while (v85);
          v81 = *(_DWORD *)(a1 + 148);
        }
        else
        {
          v86 = 8;
        }
        if (!v81)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EEB24);
        }
        v112 = v86 | v12;
        *(_DWORD *)(a1 + 148) = v81 - 1;
        if (((v86 | v12) & 2) != 0)
        {
          v113 = v86 & 0xFFFFFFF1;
          goto LABEL_214;
        }
        if ((v112 & 0xF3) != 0)
        {
          v43 = v112 & 0xFFFFFFF3;
          return v43 | v4;
        }
        v144 = (__int128 *)(a2 + 8);
        v145 = "for-loop does not exit";
        v146 = (_DWORD *)a1;
        v147 = 23;
        goto LABEL_217;
      case '0':
        v5 = *(_QWORD *)(a2 + 32);
        v6 = *(unsigned int *)(v5 + 52);
        if ((_DWORD)v6)
        {
          v7 = *(uint64_t **)(v5 + 40);
          v8 = 8 * v6;
          v9 = 8;
          do
          {
            v10 = *v7++;
            v11 = WGSL::TypeChecker::analyze(a1, v10) | v9 & 0xFFFFFFF7;
            if ((v9 & 8) != 0)
              v9 = v11;
            v8 -= 8;
          }
          while (v8);
          a2 = *(_QWORD *)(a2 + 40);
          if (!a2)
          {
LABEL_112:
            v43 = v9 | 8;
            return v43 | v4;
          }
        }
        else
        {
          v9 = 8;
          a2 = *(_QWORD *)(a2 + 40);
          if (!a2)
            goto LABEL_112;
        }
        v4 |= v9;
        continue;
      case '1':
        v70 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v70 == *(_DWORD *)(a1 + 144))
        {
          v71 = v70 + (v70 >> 2);
          if (v71 >= 0x10)
            v72 = v71 + 1;
          else
            v72 = 16;
          if (v72 <= v70 + 1)
            v73 = v70 + 1;
          else
            v73 = v72;
          if (v73 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EEB64);
          }
          v74 = *(WTF **)(a1 + 136);
          v75 = (WTF *)WTF::fastMalloc((WTF *)(16 * v73));
          *(_DWORD *)(a1 + 144) = v73;
          *(_QWORD *)(a1 + 136) = v75;
          if ((_DWORD)v70)
          {
            v77 = 16 * v70;
            v78 = v74;
            do
            {
              v79 = *(_OWORD *)v78;
              v78 = (WTF *)((char *)v78 + 16);
              *(_OWORD *)v75 = v79;
              v75 = (WTF *)((char *)v75 + 16);
              v77 -= 16;
            }
            while (v77);
            v75 = *(WTF **)(a1 + 136);
          }
          if (v74)
          {
            if (v75 == v74)
            {
              *(_QWORD *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v74, v76);
            v75 = *(WTF **)(a1 + 136);
          }
          v70 = *(unsigned int *)(a1 + 148);
          v80 = (uint64_t)v75 + 16 * v70;
        }
        else
        {
          v80 = *(_QWORD *)(a1 + 136) + 16 * v70;
        }
        *(_QWORD *)v80 = a2;
        *(_DWORD *)(v80 + 8) = 1;
        v104 = v70 + 1;
        *(_DWORD *)(a1 + 148) = v70 + 1;
        v105 = *(unsigned int *)(a2 + 52);
        if (!(_DWORD)v105)
        {
          v108 = 8;
          if (!*(_BYTE *)(a2 + 96))
            goto LABEL_209;
LABEL_173:
          v124 = a2 + 56;
          if (v104 == *(_DWORD *)(a1 + 144))
          {
            v125 = v104 + ((unint64_t)v104 >> 2);
            if (v125 >= 0x10)
              v126 = v125 + 1;
            else
              v126 = 16;
            if (v126 <= (unint64_t)v104 + 1)
              v127 = v104 + 1;
            else
              v127 = v126;
            if (v127 >> 28)
            {
              __break(0xC471u);
              goto LABEL_232;
            }
            v128 = *(WTF **)(a1 + 136);
            v129 = (WTF *)WTF::fastMalloc((WTF *)(16 * v127));
            *(_DWORD *)(a1 + 144) = v127;
            *(_QWORD *)(a1 + 136) = v129;
            if (v104)
            {
              v131 = 16 * v104;
              v132 = v128;
              do
              {
                v133 = *(_OWORD *)v132;
                v132 = (WTF *)((char *)v132 + 16);
                *(_OWORD *)v129 = v133;
                v129 = (WTF *)((char *)v129 + 16);
                v131 -= 16;
              }
              while (v131);
              v129 = *(WTF **)(a1 + 136);
            }
            if (v128)
            {
              if (v129 == v128)
              {
                *(_QWORD *)(a1 + 136) = 0;
                *(_DWORD *)(a1 + 144) = 0;
              }
              WTF::fastFree(v128, v130);
              v129 = *(WTF **)(a1 + 136);
            }
            v134 = *(unsigned int *)(a1 + 148);
            v135 = (_OWORD *)((char *)v129 + 16 * v134);
            *(_QWORD *)v135 = v124;
            *((_DWORD *)v135 + 2) = 4;
            LODWORD(v135) = *(unsigned __int8 *)(a2 + 96);
            v136 = v134 + 1;
            *(_DWORD *)(a1 + 148) = v136;
            if (!(_DWORD)v135)
            {
LABEL_232:
              __break(1u);
              JUMPOUT(0x1825EEB70);
            }
          }
          else
          {
            v137 = *(_QWORD *)(a1 + 136) + 16 * v104;
            *(_QWORD *)v137 = v124;
            *(_DWORD *)(v137 + 8) = 4;
            v136 = v104 + 1;
            *(_DWORD *)(a1 + 148) = v104 + 1;
          }
          v138 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v138)
          {
            v139 = *(uint64_t **)(a2 + 56);
            v140 = 8 * v138;
            v141 = 8;
            do
            {
              v142 = *v139++;
              v143 = WGSL::TypeChecker::analyze(a1, v142) | v141 & 0xFFFFFFF7;
              if ((v141 & 8) != 0)
                v141 = v143;
              v140 -= 8;
            }
            while (v140);
            v136 = *(_DWORD *)(a1 + 148);
          }
          else
          {
            v141 = 8;
          }
          if (!v136)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EEB44);
          }
          v104 = v136 - 1;
          *(_DWORD *)(a1 + 148) = v136 - 1;
          if (*(_BYTE *)(a2 + 96))
          {
            if (*(_QWORD *)(a2 + 88))
              v108 |= v141 | 6;
            else
              v108 |= v141;
            goto LABEL_209;
          }
          goto LABEL_232;
        }
        v106 = *(uint64_t **)(a2 + 40);
        v107 = 8 * v105;
        v108 = 8;
        do
        {
          v109 = *v106++;
          v110 = WGSL::TypeChecker::analyze(a1, v109) | v108 & 0xFFFFFFF7;
          if ((v108 & 8) != 0)
            v108 = v110;
          v107 -= 8;
        }
        while (v107);
        v104 = *(_DWORD *)(a1 + 148);
        if (*(_BYTE *)(a2 + 96))
          goto LABEL_173;
LABEL_209:
        if (!v104)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EEB3CLL);
        }
        *(_DWORD *)(a1 + 148) = v104 - 1;
        if ((v108 & 2) != 0)
        {
          v113 = v108 & 0xFFFFFFF1;
LABEL_214:
          v43 = v113 | 8;
        }
        else if ((v108 & 0xF3) != 0)
        {
          v43 = v108 & 0xFFFFFFF3;
        }
        else
        {
          v144 = (__int128 *)(a2 + 8);
          v145 = "loop does not exit";
          v146 = (_DWORD *)a1;
          v147 = 19;
LABEL_217:
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v146, 0, v144, v145, v147);
          v43 = 0;
        }
        return v43 | v4;
      case '3':
        v67 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v67)
        {
          v68 = (int *)(*(_QWORD *)(a1 + 136) + 8);
          v43 = 1;
          while (1)
          {
            v69 = *v68;
            v68 += 4;
            if (v69 == 4)
              break;
            if (!--v67)
              return v43 | v4;
          }
          WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)a1, 0, (__int128 *)(a2 + 8), "continuing blocks must not contain a return statement", 54);
          v43 = 1;
        }
        else
        {
          v43 = 1;
        }
        return v43 | v4;
      case '5':
        v56 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v56 == *(_DWORD *)(a1 + 144))
        {
          v57 = v56 + (v56 >> 2);
          if (v57 >= 0x10)
            v58 = v57 + 1;
          else
            v58 = 16;
          if (v58 <= v56 + 1)
            v59 = v56 + 1;
          else
            v59 = v58;
          if (v59 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EEB5CLL);
          }
          v60 = *(WTF **)(a1 + 136);
          v61 = (WTF *)WTF::fastMalloc((WTF *)(16 * v59));
          *(_DWORD *)(a1 + 144) = v59;
          *(_QWORD *)(a1 + 136) = v61;
          if ((_DWORD)v56)
          {
            v63 = 16 * v56;
            v64 = v60;
            do
            {
              v65 = *(_OWORD *)v64;
              v64 = (WTF *)((char *)v64 + 16);
              *(_OWORD *)v61 = v65;
              v61 = (WTF *)((char *)v61 + 16);
              v63 -= 16;
            }
            while (v63);
            v61 = *(WTF **)(a1 + 136);
          }
          if (v60)
          {
            if (v61 == v60)
            {
              *(_QWORD *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v60, v62);
            v61 = *(WTF **)(a1 + 136);
          }
          v56 = *(unsigned int *)(a1 + 148);
          v66 = (uint64_t)v61 + 16 * v56;
        }
        else
        {
          v66 = *(_QWORD *)(a1 + 136) + 16 * v56;
        }
        *(_QWORD *)v66 = a2;
        *(_DWORD *)(v66 + 8) = 0;
        *(_DWORD *)(a1 + 148) = v56 + 1;
        v97 = *(_QWORD *)(a2 + 88);
        v98 = *(unsigned int *)(v97 + 52);
        if ((_DWORD)v98)
        {
          v99 = *(uint64_t **)(v97 + 40);
          v100 = 8 * v98;
          v43 = 8;
          do
          {
            v101 = *v99++;
            v102 = WGSL::TypeChecker::analyze(a1, v101) | v43 & 0xFFFFFFF7;
            if ((v43 & 8) != 0)
              v43 = v102;
            v100 -= 8;
          }
          while (v100);
          v103 = *(_DWORD *)(a2 + 68);
          if (!v103)
          {
LABEL_168:
            v123 = *(_DWORD *)(a1 + 148);
            if (!v123)
            {
              __break(0xC471u);
              JUMPOUT(0x1825EEB34);
            }
            *(_DWORD *)(a1 + 148) = v123 - 1;
            if ((v43 & 2) != 0)
              v43 = v43 & 0xFFFFFFF5 | 8;
            return v43 | v4;
          }
        }
        else
        {
          v43 = 8;
          v103 = *(_DWORD *)(a2 + 68);
          if (!v103)
            goto LABEL_168;
        }
        v114 = *(_QWORD *)(a2 + 56);
        v115 = v114 + 24 * v103;
        do
        {
          v117 = *(_QWORD *)(v114 + 16);
          v118 = *(unsigned int *)(v117 + 52);
          if ((_DWORD)v118)
          {
            v119 = *(uint64_t **)(v117 + 40);
            v120 = 8 * v118;
            v116 = 8;
            do
            {
              v121 = *v119++;
              v122 = WGSL::TypeChecker::analyze(a1, v121) | v116 & 0xFFFFFFF7;
              if ((v116 & 8) != 0)
                v116 = v122;
              v120 -= 8;
            }
            while (v120);
          }
          else
          {
            v116 = 8;
          }
          v43 |= v116;
          v114 += 24;
        }
        while (v114 != v115);
        goto LABEL_168;
      case '7':
        v24 = *(unsigned int *)(a1 + 148);
        if ((_DWORD)v24 == *(_DWORD *)(a1 + 144))
        {
          v25 = v24 + (v24 >> 2);
          if (v25 >= 0x10)
            v26 = v25 + 1;
          else
            v26 = 16;
          if (v26 <= v24 + 1)
            v27 = v24 + 1;
          else
            v27 = v26;
          if (v27 >> 28)
          {
            __break(0xC471u);
            JUMPOUT(0x1825EEB54);
          }
          v28 = *(WTF **)(a1 + 136);
          v29 = (WTF *)WTF::fastMalloc((WTF *)(16 * v27));
          *(_DWORD *)(a1 + 144) = v27;
          *(_QWORD *)(a1 + 136) = v29;
          if ((_DWORD)v24)
          {
            v31 = 16 * v24;
            v32 = v28;
            do
            {
              v33 = *(_OWORD *)v32;
              v32 = (WTF *)((char *)v32 + 16);
              *(_OWORD *)v29 = v33;
              v29 = (WTF *)((char *)v29 + 16);
              v31 -= 16;
            }
            while (v31);
            v29 = *(WTF **)(a1 + 136);
          }
          if (v28)
          {
            if (v29 == v28)
            {
              *(_QWORD *)(a1 + 136) = 0;
              *(_DWORD *)(a1 + 144) = 0;
            }
            WTF::fastFree(v28, v30);
            v29 = *(WTF **)(a1 + 136);
          }
          v24 = *(unsigned int *)(a1 + 148);
          v34 = (uint64_t)v29 + 16 * v24;
        }
        else
        {
          v34 = *(_QWORD *)(a1 + 136) + 16 * v24;
        }
        *(_QWORD *)v34 = a2;
        *(_DWORD *)(v34 + 8) = 3;
        v89 = v24 + 1;
        *(_DWORD *)(a1 + 148) = v24 + 1;
        v90 = *(_QWORD *)(a2 + 32);
        v91 = *(unsigned int *)(v90 + 52);
        if ((_DWORD)v91)
        {
          v92 = *(uint64_t **)(v90 + 40);
          v93 = 8 * v91;
          v94 = 8;
          do
          {
            v95 = *v92++;
            v96 = WGSL::TypeChecker::analyze(a1, v95) | v94 & 0xFFFFFFF7;
            if ((v94 & 8) != 0)
              v94 = v96;
            v93 -= 8;
          }
          while (v93);
          v89 = *(_DWORD *)(a1 + 148);
          v43 = v94 & 0xFFFFFFF1 | 8;
        }
        else
        {
          v43 = 8;
        }
        if (!v89)
        {
          __break(0xC471u);
          JUMPOUT(0x1825EEB2CLL);
        }
        *(_DWORD *)(a1 + 148) = v89 - 1;
        return v43 | v4;
      default:
        goto LABEL_220;
    }
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v13;
  int8x16_t *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  unint64_t v19;
  int v20;
  int v21;
  _DWORD *v22;
  BOOL v23;
  int v24;
  int v25;
  char v26;
  int v27;
  _DWORD *result;
  uint64_t v29;
  int v30;
  unint64_t v31;
  _WORD *v32;
  unint64_t v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _WORD *v46;
  int8x16_t *v47;
  __int16 v48;
  uint64_t v49;
  int8x16_t *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int128 *v53;
  int8x16_t *v54;
  size_t v55;
  _BYTE *v56;
  unint64_t v57;
  unsigned __int128 *v58;
  unsigned __int128 v59;
  uint64_t v60;
  _WORD *v61;
  unint64_t v62;
  __int128 v63;
  char *v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  size_t v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  _BYTE *v76;
  int8x16_t *v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _WORD *v86;
  int8x16_t *v87;
  __int16 v88;
  _BYTE *v89;
  _BYTE *v90;
  size_t v91;
  int8x16_t *v92;
  _BYTE *v93;
  unint64_t v94;
  unsigned __int128 *v95;
  unsigned __int128 v96;
  size_t v97;
  unint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  int8x16_t *v101;
  char v102;
  unint64_t v103;
  _WORD *v104;
  unint64_t v105;
  __int128 v106;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _WORD *v121;
  int8x16_t *v122;
  __int16 v123;
  uint64_t v124;
  int8x16_t *v125;
  _WORD *v126;
  unint64_t v127;
  __int128 v128;
  char *v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _WORD *v143;
  int8x16_t *v144;
  __int16 v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint8x8_t *v153;
  uint16x8_t *v154;
  unint64_t v155;
  uint8x16_t v156;
  uint16x8_t v157;
  uint16x8_t v158;
  uint8x8_t *v159;
  uint16x8_t *v160;
  unint64_t v161;
  uint8x8_t v162;
  uint8x8_t *v163;
  uint16x8_t *v164;
  unint64_t v165;
  uint8x16_t v166;
  uint16x8_t v167;
  uint16x8_t v168;
  uint8x8_t *v169;
  uint16x8_t *v170;
  unint64_t v171;
  uint8x8_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  int8x16_t *v177;
  int8x16_t *v178;
  unint64_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int16x8_t *v184;
  int8x8_t *v185;
  unint64_t v186;
  int16x8_t v187;
  uint8x8_t *v188;
  uint16x8_t *v189;
  unint64_t v190;
  uint8x16_t v191;
  uint16x8_t v192;
  uint16x8_t v193;
  uint8x8_t *v194;
  uint16x8_t *v195;
  unint64_t v196;
  uint8x8_t v197;
  int8x16_t *v198;
  int8x16_t *v199;
  unint64_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int16x8_t *v205;
  int8x8_t *v206;
  unint64_t v207;
  int16x8_t v208;
  uint8x8_t *v209;
  uint16x8_t *v210;
  unint64_t v211;
  uint8x16_t v212;
  uint16x8_t v213;
  uint16x8_t v214;
  uint8x8_t *v215;
  uint16x8_t *v216;
  unint64_t v217;
  uint8x8_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int16 v226;
  uint64_t v227;
  __int128 *v228;
  _QWORD v229[15];
  _QWORD *v230;
  _BYTE v231[48];
  unsigned int v232;
  _DWORD *v233;
  __int128 v234;
  uint64_t v235;
  int8x16x2_t v236;
  int8x16x2_t v237;
  int8x16x2_t v238;
  int8x16x2_t v239;
  int8x16x2_t v240;
  int8x16x2_t v241;
  int8x16x2_t v242;
  int8x16x2_t v243;
  int8x16x2_t v244;
  int8x16x2_t v245;
  int8x16x2_t v246;
  int8x16x2_t v247;

  v235 = *MEMORY[0x1E0C80C00];
  v13 = *a5;
  *a5 = 0;
  v14 = *(int8x16_t **)a6;
  v15 = *(_QWORD *)(a6 + 8);
  v231[0] = 0;
  v232 = -1;
  v16 = *(unsigned int *)(a7 + 48);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v16])(&v233, v231, a7);
    v232 = v16;
  }
  if (a4)
    v17 = a4 - 1;
  else
    v17 = 0;
  if (v17 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825EF72CLL);
  }
  v227 = v15;
  if (v15)
    v18 = v15 - 1;
  else
    v18 = 0;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825EF74CLL);
  }
  v226 = *a8;
  v19 = (unint64_t)&v233;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v233);
  v229[0] = &v233;
  v229[1] = &v233;
  v229[2] = &v233;
  v229[3] = &v233;
  v229[4] = &v233;
  v229[5] = &v233;
  v229[6] = &v233;
  v229[7] = &v233;
  v229[8] = &v233;
  v229[9] = &v233;
  v229[10] = &v233;
  v229[11] = &v233;
  v229[12] = &v233;
  v229[13] = &v233;
  v229[14] = &v233;
  if (v232 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_293;
  }
  v230 = v229;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v232])(&v230, v231);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v233);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v233);
  a8 = (char *)v229[0];
  if (!v13)
  {
    v20 = 0;
    v228 = a2;
    if (v229[0])
      goto LABEL_14;
LABEL_19:
    v22 = 0;
    v24 = 1;
    goto LABEL_20;
  }
  v20 = *(_DWORD *)(v13 + 4);
  v228 = a2;
  if (!v229[0])
    goto LABEL_19;
LABEL_14:
  v21 = *(_DWORD *)(v229[0] + 4);
  if (v21 < 0)
    goto LABEL_28;
  v22 = 0;
  v23 = __OFADD__(v21, 1);
  v24 = v21 + 1;
  if (v23)
    goto LABEL_300;
LABEL_20:
  v23 = __OFADD__((_DWORD)v18, v24);
  v25 = v18 + v24;
  v26 = v23;
  if (v20 < 0 || (v26 & 1) != 0)
    goto LABEL_300;
  v23 = __OFADD__(v20, v25);
  v27 = v20 + v25;
  if (v23 || (v19 = (v17 + v27), __OFADD__((_DWORD)v17, v27)))
  {
LABEL_28:
    v22 = 0;
    result = (_DWORD *)v229[0];
    v229[0] = 0;
    if (!result)
      goto LABEL_303;
    goto LABEL_301;
  }
  if (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0)
  {
    if (v229[0])
    {
      v30 = *(_DWORD *)(v229[0] + 16);
      *(_DWORD *)v229[0] += 2;
      if ((v30 & 4) == 0)
      {
        v29 = v13;
        if ((_DWORD)v19)
        {
          if (v19 <= 0x7FFFFFEF)
            goto LABEL_40;
          goto LABEL_73;
        }
        goto LABEL_294;
      }
    }
    if (!(_DWORD)v19)
      goto LABEL_294;
    if ((v19 & 0x80000000) != 0)
    {
LABEL_73:
      v22 = 0;
      if (a8)
        goto LABEL_296;
LABEL_300:
      result = (_DWORD *)v229[0];
      v229[0] = 0;
      if (!result)
        goto LABEL_303;
      goto LABEL_301;
    }
    WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
    v22 = v233;
    if (!v233)
      goto LABEL_295;
    v52 = v233 + 5;
    *v233 = 2;
    v22[1] = v19;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 4;
    if (a8)
      *(_DWORD *)a8 += 2;
    if ((_DWORD)v17)
    {
      if ((_DWORD)v17 == 1)
      {
        *v52 = a3->i8[0];
      }
      else
      {
        memcpy(v22 + 5, a3, v17);
        v52 = v22 + 5;
      }
    }
    if (a8)
      *(_DWORD *)a8 += 2;
    v53 = (unsigned __int128 *)&v52[v17];
    if (!v13)
    {
      v60 = 0;
      goto LABEL_125;
    }
    v54 = *(int8x16_t **)(v13 + 8);
    v55 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v55)
      {
        if ((_DWORD)v55 == 1)
          *(_BYTE *)v53 = v54->i8[0];
        else
          memcpy(&v52[v17], v54, v55);
      }
      goto LABEL_124;
    }
    v56 = (char *)v53 + v55;
    if (v55 < 0x10)
    {
      v57 = (unint64_t)&v52[v17];
    }
    else
    {
      v57 = (unint64_t)v53 + (v55 & 0xFFFFFFF0);
      v58 = v53;
      do
      {
        v59 = (unsigned __int128)vld2q_s8(v54->i8);
        v54 += 2;
        *v58++ = v59;
      }
      while (v58 != (unsigned __int128 *)v57);
    }
    if ((_BYTE *)v57 == v56)
    {
LABEL_124:
      v60 = *(unsigned int *)(v13 + 4);
LABEL_125:
      if (a8)
        *(_DWORD *)a8 += 2;
      v89 = (char *)v53 + v60;
      if ((_DWORD)v18)
      {
        if ((_DWORD)v18 == 1)
          *v89 = v14->i8[0];
        else
          memcpy(v89, v14, v18);
      }
      v90 = &v89[v18];
      if (!a8)
      {
        *v90 = v226;
        result = (_DWORD *)v229[0];
        v229[0] = 0;
        if (!result)
          goto LABEL_303;
        goto LABEL_301;
      }
      v91 = *((unsigned int *)a8 + 1);
      *(_DWORD *)a8 += 2;
      v92 = (int8x16_t *)*((_QWORD *)a8 + 1);
      if ((a8[16] & 4) != 0)
      {
        if ((_DWORD)v91)
        {
          if ((_DWORD)v91 == 1)
            *v90 = v92->i8[0];
          else
            memcpy(&v89[v18], v92, v91);
        }
        goto LABEL_154;
      }
      v93 = &v90[v91];
      if (v91 < 0x10)
      {
        v94 = (unint64_t)&v89[v18];
      }
      else
      {
        v94 = (unint64_t)&v90[v91 & 0xFFFFFFF0];
        v95 = (unsigned __int128 *)&v89[v18];
        do
        {
          v96 = (unsigned __int128)vld2q_s8(v92->i8);
          v92 += 2;
          *v95++ = v96;
        }
        while (v95 != (unsigned __int128 *)v94);
      }
      if ((_BYTE *)v94 == v93)
      {
LABEL_154:
        v90[*((unsigned int *)a8 + 1)] = v226;
LABEL_212:
        v146 = *(_DWORD *)a8 - 2;
        if (*(_DWORD *)a8 == 2)
        {
          WTF::StringImpl::destroy();
          v146 = *(_DWORD *)a8;
        }
        else
        {
          *(_DWORD *)a8 = v146;
        }
        v147 = v146 - 2;
        if (v147)
        {
          *(_DWORD *)a8 = v147;
        }
        else
        {
          WTF::StringImpl::destroy();
          v147 = *(_DWORD *)a8;
        }
        v148 = v147 - 2;
        if (v148)
        {
          *(_DWORD *)a8 = v148;
        }
        else
        {
          WTF::StringImpl::destroy();
          v148 = *(_DWORD *)a8;
        }
        v149 = v148 - 2;
        if (v149)
          *(_DWORD *)a8 = v149;
        else
          WTF::StringImpl::destroy();
        goto LABEL_296;
      }
      v97 = (size_t)v22 + a4 + v60 + v227 + v91;
      v98 = v97 - v94 - (v227 != 0) - (a4 != 0) + 20;
      if (v98 < 8)
        goto LABEL_150;
      if (a4)
        v99 = v94 + 1;
      else
        v99 = v94;
      if (v227)
        ++v99;
      if (v94 < (unint64_t)&v92[2].u64[1] + 2 * v97 + -2 * v99 && (unint64_t)v92 < v97 - v99 + v94 + 20)
      {
LABEL_150:
        v100 = (_BYTE *)v94;
        v101 = v92;
        goto LABEL_151;
      }
      if (v98 >= 0x20)
      {
        v152 = v98 & 0xFFFFFFFFFFFFFFE0;
        v177 = v92 + 2;
        v178 = (int8x16_t *)(v94 + 16);
        v179 = v98 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v181 = v177[-2];
          v180 = v177[-1];
          v183 = *v177;
          v182 = v177[1];
          v177 += 4;
          v178[-1] = vuzp1q_s8(v181, v180);
          *v178 = vuzp1q_s8(v183, v182);
          v178 += 2;
          v179 -= 32;
        }
        while (v179);
        if (v98 == v152)
          goto LABEL_154;
        if ((v98 & 0x18) == 0)
        {
          v101 = (int8x16_t *)((char *)v92 + 2 * v152);
          v100 = (_BYTE *)(v94 + v152);
          do
          {
LABEL_151:
            v102 = v101->i8[0];
            v101 = (int8x16_t *)((char *)v101 + 2);
            *v100++ = v102;
          }
          while (v100 != v93);
          goto LABEL_154;
        }
      }
      else
      {
        v152 = 0;
      }
      v100 = (_BYTE *)(v94 + (v98 & 0xFFFFFFFFFFFFFFF8));
      v101 = (int8x16_t *)((char *)v92 + 2 * (v98 & 0xFFFFFFFFFFFFFFF8));
      v184 = (int16x8_t *)((char *)v92 + 2 * v152);
      v185 = (int8x8_t *)(v94 + v152);
      v186 = v152 - (v98 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v187 = *v184++;
        *v185++ = vmovn_s16(v187);
        v186 += 8;
      }
      while (v186);
      if (v98 == (v98 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_154;
      goto LABEL_151;
    }
    v71 = (size_t)v22 + a4 + v55;
    v72 = v71 - v57 - (a4 != 0) + 20;
    if (v72 < 8
      || (!a4 ? (v73 = v57) : (v73 = v57 + 1),
          v57 < (unint64_t)&v54[2].u64[1] + 2 * v71 + -2 * v73
        ? (v74 = (unint64_t)v54 >= v71 - (a4 != 0) + 20)
        : (v74 = 1),
          !v74))
    {
      v76 = (_BYTE *)v57;
      v77 = v54;
      goto LABEL_106;
    }
    if (v72 >= 0x20)
    {
      v75 = v72 & 0xFFFFFFFFFFFFFFE0;
      v198 = v54 + 2;
      v199 = (int8x16_t *)(v57 + 16);
      v200 = v72 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v202 = v198[-2];
        v201 = v198[-1];
        v204 = *v198;
        v203 = v198[1];
        v198 += 4;
        v199[-1] = vuzp1q_s8(v202, v201);
        *v199 = vuzp1q_s8(v204, v203);
        v199 += 2;
        v200 -= 32;
      }
      while (v200);
      if (v72 == v75)
        goto LABEL_124;
      if ((v72 & 0x18) == 0)
      {
        v77 = (int8x16_t *)((char *)v54 + 2 * v75);
        v76 = (_BYTE *)(v57 + v75);
        do
        {
LABEL_106:
          v78 = v77->i8[0];
          v77 = (int8x16_t *)((char *)v77 + 2);
          *v76++ = v78;
        }
        while (v76 != v56);
        goto LABEL_124;
      }
    }
    else
    {
      v75 = 0;
    }
    v76 = (_BYTE *)(v57 + (v72 & 0xFFFFFFFFFFFFFFF8));
    v77 = (int8x16_t *)((char *)v54 + 2 * (v72 & 0xFFFFFFFFFFFFFFF8));
    v205 = (int16x8_t *)((char *)v54 + 2 * v75);
    v206 = (int8x8_t *)(v57 + v75);
    v207 = v75 - (v72 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v208 = *v205++;
      *v206++ = vmovn_s16(v208);
      v207 += 8;
    }
    while (v207);
    if (v72 == (v72 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_124;
    goto LABEL_106;
  }
  if (v229[0])
  {
    *(_DWORD *)v229[0] += 2;
    if ((_DWORD)v19)
      goto LABEL_34;
LABEL_294:
    v22 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_295;
  }
LABEL_293:
  if (!(_DWORD)v19)
    goto LABEL_294;
LABEL_34:
  v29 = 1;
  if (v19 > 0x7FFFFFEF)
    goto LABEL_73;
LABEL_40:
  v225 = v29;
  WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20));
  v22 = v233;
  if (v233)
  {
    v31 = (unint64_t)(v233 + 5);
    *v233 = 2;
    v22[1] = v19;
    *((_QWORD *)v22 + 1) = v22 + 5;
    v22[4] = 0;
    if (a8)
      *(_DWORD *)a8 += 2;
    v32 = (_WORD *)(v31 + 2 * v17);
    if ((v17 & 0xFFFFFFC0) != 0)
    {
      v33 = v31 + 2 * (v17 & 0xFFFFFFC0);
      v34 = 0uLL;
      do
      {
        v236.val[0] = *a3;
        v35 = a3[1];
        v240.val[0] = a3[2];
        v36 = a3[3];
        a3 += 4;
        v37 = v36;
        v240.val[1] = 0uLL;
        v244.val[0] = v35;
        v236.val[1] = 0uLL;
        v38 = (char *)v31;
        vst2q_s8(v38, v236);
        v38 += 32;
        v244.val[1] = 0uLL;
        vst2q_s8(v38, v244);
        v39 = (char *)(v31 + 64);
        vst2q_s8(v39, v240);
        v40 = (char *)(v31 + 96);
        vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
        v31 += 128;
      }
      while (v31 != v33);
      v31 = v33;
    }
    if ((_WORD *)v31 != v32)
    {
      v41 = (unint64_t)v22 + 2 * a4 - v31;
      v42 = -2;
      if (a4)
        v43 = -2;
      else
        v43 = 0;
      v44 = v41 + v43 + 18;
      if (v44 < 0xE)
        goto LABEL_56;
      if (!a4)
        v42 = 0;
      v45 = v41 + v42 + 18;
      if (v31 < (unint64_t)a3->u64 + (v45 >> 1) + 1
        && (unint64_t)a3 < (v45 & 0xFFFFFFFFFFFFFFFELL) + v31 + 2)
      {
LABEL_56:
        v46 = (_WORD *)v31;
        v47 = a3;
        goto LABEL_57;
      }
      v79 = (v44 >> 1) + 1;
      if (v44 >= 0x3E)
      {
        v80 = v79 & 0xFFFFFFFFFFFFFFE0;
        v153 = (uint8x8_t *)&a3[1];
        v154 = (uint16x8_t *)(v31 + 32);
        v155 = v79 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v156 = *(uint8x16_t *)v153[-2].i8;
          v157 = vmovl_u8(*v153);
          v158 = vmovl_high_u8(*(uint8x16_t *)v153->i8);
          v154[-2] = vmovl_u8(*(uint8x8_t *)v156.i8);
          v154[-1] = vmovl_high_u8(v156);
          *v154 = v157;
          v154[1] = v158;
          v154 += 4;
          v153 += 4;
          v155 -= 32;
        }
        while (v155);
        if (v79 == v80)
          goto LABEL_58;
        if ((v79 & 0x18) == 0)
        {
          v47 = (int8x16_t *)((char *)a3 + v80);
          v46 = (_WORD *)(v31 + 2 * v80);
          do
          {
LABEL_57:
            v48 = v47->u8[0];
            v47 = (int8x16_t *)((char *)v47 + 1);
            *v46++ = v48;
          }
          while (v46 != v32);
          goto LABEL_58;
        }
      }
      else
      {
        v80 = 0;
      }
      v46 = (_WORD *)(v31 + 2 * (v79 & 0xFFFFFFFFFFFFFFF8));
      v47 = (int8x16_t *)((char *)a3 + (v79 & 0xFFFFFFFFFFFFFFF8));
      v159 = (uint8x8_t *)&a3->i8[v80];
      v160 = (uint16x8_t *)(v31 + 2 * v80);
      v161 = v80 - (v79 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v162 = *v159++;
        *v160++ = vmovl_u8(v162);
        v161 += 8;
      }
      while (v161);
      if (v79 != (v79 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_57;
    }
LABEL_58:
    if (a8)
      *(_DWORD *)a8 += 2;
    v49 = v225;
    if (!v225)
    {
LABEL_157:
      v103 = (unint64_t)&v32[v49];
      if (a8)
        *(_DWORD *)a8 += 2;
      v104 = (_WORD *)(v103 + 2 * v18);
      if ((v18 & 0xFFFFFFC0) != 0)
      {
        v105 = v103 + 2 * (v18 & 0xFFFFFFC0);
        v106 = 0uLL;
        v107 = v227;
        do
        {
          v238.val[0] = *v14;
          v108 = v14[1];
          v242.val[0] = v14[2];
          v109 = v14[3];
          v14 += 4;
          v110 = v109;
          v242.val[1] = 0uLL;
          v246.val[0] = v108;
          v238.val[1] = 0uLL;
          v111 = (char *)v103;
          vst2q_s8(v111, v238);
          v111 += 32;
          v246.val[1] = 0uLL;
          vst2q_s8(v111, v246);
          v112 = (char *)(v103 + 64);
          vst2q_s8(v112, v242);
          v113 = (char *)(v103 + 96);
          vst2q_s8(v113, *(int8x16x2_t *)(&v106 - 1));
          v103 += 128;
        }
        while (v103 != v105);
        v103 = v105;
      }
      else
      {
        v107 = v227;
      }
      if ((_WORD *)v103 != v104)
      {
        v114 = (unint64_t)v22 + 2 * v49 + 2 * v107 + 2 * a4 - v103;
        v115 = -2;
        if (a4)
          v116 = -2;
        else
          v116 = 0;
        if (v107)
          v117 = -2;
        else
          v117 = 0;
        v118 = v114 + v116 + v117 + 18;
        if (v118 < 0xE)
          goto LABEL_179;
        if (a4)
          v119 = -2;
        else
          v119 = 0;
        if (!v107)
          v115 = 0;
        v120 = v114 + v119 + v115 + 18;
        if (v103 < (unint64_t)v14->u64 + (v120 >> 1) + 1
          && (unint64_t)v14 < (v120 & 0xFFFFFFFFFFFFFFFELL) + v103 + 2)
        {
LABEL_179:
          v121 = (_WORD *)v103;
          v122 = v14;
          goto LABEL_180;
        }
        v150 = (v118 >> 1) + 1;
        if (v118 >= 0x3E)
        {
          v151 = v150 & 0xFFFFFFFFFFFFFFE0;
          v163 = (uint8x8_t *)&v14[1];
          v164 = (uint16x8_t *)(v103 + 32);
          v165 = v150 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v166 = *(uint8x16_t *)v163[-2].i8;
            v167 = vmovl_u8(*v163);
            v168 = vmovl_high_u8(*(uint8x16_t *)v163->i8);
            v164[-2] = vmovl_u8(*(uint8x8_t *)v166.i8);
            v164[-1] = vmovl_high_u8(v166);
            *v164 = v167;
            v164[1] = v168;
            v164 += 4;
            v163 += 4;
            v165 -= 32;
          }
          while (v165);
          if (v150 == v151)
            goto LABEL_181;
          if ((v150 & 0x18) == 0)
          {
            v122 = (int8x16_t *)((char *)v14 + v151);
            v121 = (_WORD *)(v103 + 2 * v151);
            do
            {
LABEL_180:
              v123 = v122->u8[0];
              v122 = (int8x16_t *)((char *)v122 + 1);
              *v121++ = v123;
            }
            while (v121 != v104);
            goto LABEL_181;
          }
        }
        else
        {
          v151 = 0;
        }
        v121 = (_WORD *)(v103 + 2 * (v150 & 0xFFFFFFFFFFFFFFF8));
        v122 = (int8x16_t *)((char *)v14 + (v150 & 0xFFFFFFFFFFFFFFF8));
        v169 = (uint8x8_t *)&v14->i8[v151];
        v170 = (uint16x8_t *)(v103 + 2 * v151);
        v171 = v151 - (v150 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v172 = *v169++;
          *v170++ = vmovl_u8(v172);
          v171 += 8;
        }
        while (v171);
        if (v150 != (v150 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_180;
      }
LABEL_181:
      if (!a8)
      {
        *v104 = v226;
        result = (_DWORD *)v229[0];
        v229[0] = 0;
        if (!result)
          goto LABEL_303;
        goto LABEL_301;
      }
      v124 = *((unsigned int *)a8 + 1);
      *(_DWORD *)a8 += 2;
      v125 = (int8x16_t *)*((_QWORD *)a8 + 1);
      if ((a8[16] & 4) == 0)
      {
        if (!(_DWORD)v124)
        {
LABEL_211:
          v104[v124] = v226;
          goto LABEL_212;
        }
        if ((_DWORD)v124 == 1)
        {
          *v104 = v125->i16[0];
          LODWORD(v124) = 1;
          goto LABEL_211;
        }
        memcpy(v104, v125, 2 * v124);
LABEL_210:
        LODWORD(v124) = *((_DWORD *)a8 + 1);
        goto LABEL_211;
      }
      v126 = &v104[v124];
      if (v124 < 0x40)
      {
        v127 = (unint64_t)v104;
      }
      else
      {
        v127 = (unint64_t)&v104[v124 & 0xFFFFFFC0];
        v128 = 0uLL;
        v129 = (char *)v104;
        do
        {
          v239.val[0] = *v125;
          v130 = v125[1];
          v243.val[0] = v125[2];
          v131 = v125[3];
          v125 += 4;
          v132 = v131;
          v243.val[1] = 0uLL;
          v247.val[0] = v130;
          v239.val[1] = 0uLL;
          v133 = v129;
          vst2q_s8(v133, v239);
          v133 += 32;
          v247.val[1] = 0uLL;
          vst2q_s8(v133, v247);
          v134 = v129 + 64;
          vst2q_s8(v134, v243);
          v135 = v129 + 96;
          vst2q_s8(v135, *(int8x16x2_t *)(&v128 - 1));
          v129 += 128;
        }
        while (v129 != (char *)v127);
      }
      if ((_WORD *)v127 == v126)
        goto LABEL_210;
      v136 = (unint64_t)v22 + 2 * v49 + 2 * v107 + 2 * a4 + 2 * v124 - v127;
      v137 = -2;
      if (a4)
        v138 = -2;
      else
        v138 = 0;
      if (v107)
        v139 = -2;
      else
        v139 = 0;
      v140 = v136 + v138 + v139 + 18;
      if (v140 < 0xE)
        goto LABEL_206;
      if (a4)
        v141 = -2;
      else
        v141 = 0;
      if (!v107)
        v137 = 0;
      v142 = v136 + v141 + v137 + 18;
      if (v127 < (unint64_t)v125->u64 + (v142 >> 1) + 1
        && (unint64_t)v125 < (v142 & 0xFFFFFFFFFFFFFFFELL) + v127 + 2)
      {
LABEL_206:
        v143 = (_WORD *)v127;
        v144 = v125;
        goto LABEL_207;
      }
      v173 = (v140 >> 1) + 1;
      if (v140 >= 0x3E)
      {
        v174 = v173 & 0xFFFFFFFFFFFFFFE0;
        v188 = (uint8x8_t *)&v125[1];
        v189 = (uint16x8_t *)(v127 + 32);
        v190 = v173 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v191 = *(uint8x16_t *)v188[-2].i8;
          v192 = vmovl_u8(*v188);
          v193 = vmovl_high_u8(*(uint8x16_t *)v188->i8);
          v189[-2] = vmovl_u8(*(uint8x8_t *)v191.i8);
          v189[-1] = vmovl_high_u8(v191);
          *v189 = v192;
          v189[1] = v193;
          v189 += 4;
          v188 += 4;
          v190 -= 32;
        }
        while (v190);
        if (v173 == v174)
          goto LABEL_210;
        if ((v173 & 0x18) == 0)
        {
          v144 = (int8x16_t *)((char *)v125 + v174);
          v143 = (_WORD *)(v127 + 2 * v174);
          do
          {
LABEL_207:
            v145 = v144->u8[0];
            v144 = (int8x16_t *)((char *)v144 + 1);
            *v143++ = v145;
          }
          while (v143 != v126);
          goto LABEL_210;
        }
      }
      else
      {
        v174 = 0;
      }
      v143 = (_WORD *)(v127 + 2 * (v173 & 0xFFFFFFFFFFFFFFF8));
      v144 = (int8x16_t *)((char *)v125 + (v173 & 0xFFFFFFFFFFFFFFF8));
      v194 = (uint8x8_t *)&v125->i8[v174];
      v195 = (uint16x8_t *)(v127 + 2 * v174);
      v196 = v174 - (v173 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v197 = *v194++;
        *v195++ = vmovl_u8(v197);
        v196 += 8;
      }
      while (v196);
      if (v173 == (v173 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_210;
      goto LABEL_207;
    }
    v50 = *(int8x16_t **)(v13 + 8);
    v51 = *(unsigned int *)(v13 + 4);
    if ((*(_BYTE *)(v13 + 16) & 4) == 0)
    {
      if ((_DWORD)v51)
      {
        if ((_DWORD)v51 == 1)
          *v32 = v50->i16[0];
        else
          memcpy(v32, v50, 2 * v51);
      }
      goto LABEL_156;
    }
    v61 = &v32[v51];
    if (v51 < 0x40)
    {
      v62 = (unint64_t)v32;
    }
    else
    {
      v62 = (unint64_t)&v32[v51 & 0xFFFFFFC0];
      v63 = 0uLL;
      v64 = (char *)v32;
      do
      {
        v237.val[0] = *v50;
        v65 = v50[1];
        v241.val[0] = v50[2];
        v66 = v50[3];
        v50 += 4;
        v67 = v66;
        v241.val[1] = 0uLL;
        v245.val[0] = v65;
        v237.val[1] = 0uLL;
        v68 = v64;
        vst2q_s8(v68, v237);
        v68 += 32;
        v245.val[1] = 0uLL;
        vst2q_s8(v68, v245);
        v69 = v64 + 64;
        vst2q_s8(v69, v241);
        v70 = v64 + 96;
        vst2q_s8(v70, *(int8x16x2_t *)(&v63 - 1));
        v64 += 128;
      }
      while (v64 != (char *)v62);
    }
    if ((_WORD *)v62 == v61)
    {
LABEL_156:
      v49 = *(unsigned int *)(v13 + 4);
      goto LABEL_157;
    }
    v81 = (unint64_t)v22 + 2 * v51 + 2 * a4 - v62;
    v82 = -2;
    if (a4)
      v83 = -2;
    else
      v83 = 0;
    v84 = v81 + v83 + 18;
    if (v84 < 0xE)
      goto LABEL_120;
    if (!a4)
      v82 = 0;
    v85 = v81 + v82 + 18;
    if (v62 < (unint64_t)v50->u64 + (v85 >> 1) + 1
      && (unint64_t)v50 < (v85 & 0xFFFFFFFFFFFFFFFELL) + v62 + 2)
    {
LABEL_120:
      v86 = (_WORD *)v62;
      v87 = v50;
      goto LABEL_121;
    }
    v175 = (v84 >> 1) + 1;
    if (v84 >= 0x3E)
    {
      v176 = v175 & 0xFFFFFFFFFFFFFFE0;
      v209 = (uint8x8_t *)&v50[1];
      v210 = (uint16x8_t *)(v62 + 32);
      v211 = v175 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v212 = *(uint8x16_t *)v209[-2].i8;
        v213 = vmovl_u8(*v209);
        v214 = vmovl_high_u8(*(uint8x16_t *)v209->i8);
        v210[-2] = vmovl_u8(*(uint8x8_t *)v212.i8);
        v210[-1] = vmovl_high_u8(v212);
        *v210 = v213;
        v210[1] = v214;
        v210 += 4;
        v209 += 4;
        v211 -= 32;
      }
      while (v211);
      if (v175 == v176)
        goto LABEL_156;
      if ((v175 & 0x18) == 0)
      {
        v87 = (int8x16_t *)((char *)v50 + v176);
        v86 = (_WORD *)(v62 + 2 * v176);
        do
        {
LABEL_121:
          v88 = v87->u8[0];
          v87 = (int8x16_t *)((char *)v87 + 1);
          *v86++ = v88;
        }
        while (v86 != v61);
        goto LABEL_156;
      }
    }
    else
    {
      v176 = 0;
    }
    v86 = (_WORD *)(v62 + 2 * (v175 & 0xFFFFFFFFFFFFFFF8));
    v87 = (int8x16_t *)((char *)v50 + (v175 & 0xFFFFFFFFFFFFFFF8));
    v215 = (uint8x8_t *)&v50->i8[v176];
    v216 = (uint16x8_t *)(v62 + 2 * v176);
    v217 = v176 - (v175 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v218 = *v215++;
      *v216++ = vmovl_u8(v218);
      v217 += 8;
    }
    while (v217);
    if (v175 == (v175 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_156;
    goto LABEL_121;
  }
LABEL_295:
  if (!a8)
    goto LABEL_300;
LABEL_296:
  if (*(_DWORD *)a8 == 2)
  {
    WTF::StringImpl::destroy();
    goto LABEL_300;
  }
  *(_DWORD *)a8 -= 2;
  result = (_DWORD *)v229[0];
  v229[0] = 0;
  if (!result)
  {
LABEL_303:
    if (v22)
      goto LABEL_304;
LABEL_317:
    __break(0xC471u);
    JUMPOUT(0x1825EFB6CLL);
  }
LABEL_301:
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_303;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v22)
    goto LABEL_317;
LABEL_304:
  v233 = v22;
  v234 = *v228;
  v219 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v219 != *(_DWORD *)(a1 + 128))
  {
    v224 = *(_QWORD *)(a1 + 120) + 24 * v219;
    *(_QWORD *)v224 = v22;
    *(_OWORD *)(v224 + 8) = v234;
    ++*(_DWORD *)(a1 + 132);
    v233 = 0;
LABEL_310:
    v223 = v232;
    if (v232 == -1)
      goto LABEL_312;
    goto LABEL_311;
  }
  v220 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v219 + 1, (unint64_t)&v233);
  v221 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v222 = *(_QWORD *)v220;
  *(_QWORD *)v220 = 0;
  *(_QWORD *)v221 = v222;
  *(_OWORD *)(v221 + 8) = *(_OWORD *)(v220 + 8);
  result = v233;
  ++*(_DWORD *)(a1 + 132);
  v233 = 0;
  if (!result)
    goto LABEL_310;
  if (*result != 2)
  {
    *result -= 2;
    v223 = v232;
    if (v232 == -1)
      goto LABEL_312;
LABEL_311:
    result = (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7DF0[v223])(v229, v231);
    goto LABEL_312;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  v223 = v232;
  if (v232 != -1)
    goto LABEL_311;
LABEL_312:
  v232 = -1;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)v13 -= 2;
  }
  return result;
}

WTF *WGSL::typeCheck@<X0>(WGSL *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  WTF *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *result;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void (**v41)(WGSL::AST::Visitor *__hidden);
  WTF *v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;

  WGSL::TypeChecker::TypeChecker((WGSL::TypeChecker *)&v41, this);
  v4 = v44;
  v5 = (_QWORD *)operator new();
  *v5 = v4;
  v5[1] = 0;
  v56 = v5;
  v7 = v47;
  if (v47 == v46)
  {
    v8 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v45, v47 + 1, (unint64_t)&v56);
    v9 = v47;
    v10 = v45;
    v11 = *v8;
    *v8 = 0;
    *((_QWORD *)v10 + v9) = v11;
    v12 = (uint64_t)v56;
    v13 = v9 + 1;
    v47 = v13;
    v56 = 0;
    if (v12)
    {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v12, v6);
      v13 = v47;
    }
  }
  else
  {
    *((_QWORD *)v45 + v47) = v5;
    v13 = v7 + 1;
    v47 = v13;
  }
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1825EFEE0);
  }
  v14 = v50;
  v44 = *((_QWORD *)v45 + v13 - 1);
  v15 = *(unsigned int *)(v50 + 92);
  if ((_DWORD)v15 && !v43)
  {
    v37 = *(_QWORD **)(v50 + 80);
    v38 = 8 * v15 - 8;
LABEL_45:
    ((void (*)(void (***)(WGSL::AST::Visitor *__hidden), _QWORD))v41[3])(&v41, *v37);
    while (v38)
    {
      ++v37;
      v38 -= 8;
      if (!v43)
        goto LABEL_45;
    }
  }
  v16 = *(unsigned int *)(v14 + 76);
  if ((_DWORD)v16 && !v43)
  {
    v39 = *(_QWORD **)(v14 + 64);
    v40 = 8 * v16 - 8;
LABEL_50:
    ((void (*)(void (***)(WGSL::AST::Visitor *__hidden), _QWORD))v41[5])(&v41, *v39);
    while (v40)
    {
      ++v39;
      v40 -= 8;
      if (!v43)
        goto LABEL_50;
    }
  }
  v17 = HIDWORD(v52);
  if (HIDWORD(v52))
  {
    v18 = v51;
    v19 = v52;
    v51 = 0;
    v52 = 0;
    *(_QWORD *)a2 = v18;
    *(_DWORD *)(a2 + 8) = v19;
    *(_DWORD *)(a2 + 12) = v17;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 1;
    v44 = v4;
    v20 = v47;
    if (!v47)
      goto LABEL_56;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    v44 = v4;
    v20 = v47;
    if (!v47)
      goto LABEL_56;
  }
  v21 = v20 - 1;
  v22 = *((_QWORD *)v45 + v20 - 1);
  *((_QWORD *)v45 + v20 - 1) = 0;
  if (v22)
    std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v22, v6);
  v47 = v21;
  v41 = &off_1E0FD7A90;
  if (v55)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v55, v6);
  v23 = v53;
  if (v53)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree(v23, v6);
  }
  if (HIDWORD(v52))
  {
    v24 = v51;
    v25 = 24 * HIDWORD(v52);
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WTF::StringImpl::destroy();
        else
          *v26 -= 2;
      }
      v24 = (WTF *)((char *)v24 + 24);
      v25 -= 24;
    }
    while (v25);
  }
  v27 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v27, v6);
  }
  v28 = v48;
  *v48 = v49;
  v29 = *((unsigned int *)v28 + 5);
  if (!(_DWORD)v29)
  {
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1825EFE44);
  }
  v30 = v29 - 1;
  v31 = v28[1];
  v32 = *(_QWORD *)(v31 + 8 * v30);
  *(_QWORD *)(v31 + 8 * v30) = 0;
  if (v32)
    std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v32, v6);
  *((_DWORD *)v28 + 5) = v30;
  if (v47)
  {
    v33 = v45;
    v34 = 8 * v47;
    do
    {
      v35 = *(_QWORD *)v33;
      *(_QWORD *)v33 = 0;
      if (v35)
        std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v35, v6);
      v33 = (WTF *)((char *)v33 + 8);
      v34 -= 8;
    }
    while (v34);
  }
  result = v45;
  if (v45)
  {
    v45 = 0;
    v46 = 0;
    result = (WTF *)WTF::fastFree(result, v6);
  }
  v41 = &off_1E0FD25C8;
  if (v43)
  {
    result = v42;
    v42 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy();
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WGSL::TypeChecker::~TypeChecker(WGSL::TypeChecker *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;

  *(_QWORD *)this = &off_1E0FD7A90;
  v3 = *((_QWORD *)this + 19);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 33);
  if ((_DWORD)v5)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 15);
    v7 = 24 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*v8 == 2)
          WTF::StringImpl::destroy();
        else
          *v8 -= 2;
      }
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 8);
  *(_QWORD *)v10 = *((_QWORD *)this + 9);
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    if (v14)
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v14, a2);
    *(_DWORD *)(v10 + 20) = v12;
    v15 = *((unsigned int *)this + 15);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 6);
      v17 = 8 * v15;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
          std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v18, a2);
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v19 = (WTF *)*((_QWORD *)this + 6);
    if (v19)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v19, a2);
    }
    *(_QWORD *)this = &off_1E0FD25C8;
    if (*((_BYTE *)this + 32))
    {
      v20 = (_DWORD *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v20)
      {
        if (*v20 == 2)
          WTF::StringImpl::destroy();
        else
          *v20 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _DWORD *v20;

  *(_QWORD *)this = &off_1E0FD7A90;
  v3 = *((_QWORD *)this + 19);
  if (v3)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *((unsigned int *)this + 33);
  if ((_DWORD)v5)
  {
    v6 = (_DWORD **)*((_QWORD *)this + 15);
    v7 = 24 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*v8 == 2)
          WTF::StringImpl::destroy();
        else
          *v8 -= 2;
      }
      v6 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v9 = (WTF *)*((_QWORD *)this + 15);
  if (v9)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *((_QWORD *)this + 8);
  *(_QWORD *)v10 = *((_QWORD *)this + 9);
  v11 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v11)
  {
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v10 + 8);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    *(_QWORD *)(v13 + 8 * v12) = 0;
    if (v14)
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v14, a2);
    *(_DWORD *)(v10 + 20) = v12;
    v15 = *((unsigned int *)this + 15);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t *)*((_QWORD *)this + 6);
      v17 = 8 * v15;
      do
      {
        v18 = *v16;
        *v16 = 0;
        if (v18)
          std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v18, a2);
        ++v16;
        v17 -= 8;
      }
      while (v17);
    }
    v19 = (WTF *)*((_QWORD *)this + 6);
    if (v19)
    {
      *((_QWORD *)this + 6) = 0;
      *((_DWORD *)this + 14) = 0;
      WTF::fastFree(v19, a2);
    }
    *(_QWORD *)this = &off_1E0FD25C8;
    if (*((_BYTE *)this + 32))
    {
      v20 = (_DWORD *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = 0;
      if (v20)
      {
        if (*v20 == 2)
          WTF::StringImpl::destroy();
        else
          *v20 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::TypeChecker::accessMode(WGSL::TypeChecker *this, WGSL::AST::Expression *a2)
{
  __int16 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t result;
  __int128 v11;

  v4 = *((_WORD *)this + 52);
  *((_WORD *)this + 52) = 3;
  WGSL::AST::Visitor::visit(this, (uint64_t)a2);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 11);
  *((_QWORD *)a2 + 3) = v5;
  *((_QWORD *)this + 11) = 0;
  *((_WORD *)this + 52) = v4;
  v6 = *((_QWORD *)this + 14);
  v7 = *(unsigned __int8 **)(v6 + 24);
  if (v7 == v5)
    return 0;
  v8 = *(unsigned __int8 **)(v6 + 120);
  v9 = v5 == v8 || v7 == v8;
  if (!v9 && WGSL::conversionRank(v8, v5) == -1)
  {
    *(_QWORD *)&v11 = "' as access mode";
    *((_QWORD *)&v11 + 1) = 17;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)this, 0, (WGSL::AST::Expression *)((char *)a2 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v5, &v11);
    return 0;
  }
  if ((*(unsigned int (**)(WGSL::AST::Expression *))(*(_QWORD *)a2 + 16))(a2) == 22)
    return *(unsigned __int8 *)WGSL::parseAccessMode((uint64_t *)a2 + 11) | 0x100u;
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WGSL::AST::ScopedVisitor<WGSL::Binding>::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (_QWORD *)(a1 + 48);
  v6 = (_QWORD *)operator new();
  *v6 = v4;
  v6[1] = 0;
  v20 = v6;
  v8 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 56))
  {
    v9 = (uint64_t *)WTF::Vector<WebGPU::BindGroupLayout::Entry const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v8 + 1, (unint64_t)&v20);
    v10 = *(unsigned int *)(a1 + 60);
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *v9;
    *v9 = 0;
    *(_QWORD *)(v11 + 8 * v10) = v12;
    v13 = (uint64_t)v20;
    v14 = v10 + 1;
    *(_DWORD *)(a1 + 60) = v14;
    v20 = 0;
    if (v13)
    {
      std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](v13, v7);
      v14 = *(_DWORD *)(a1 + 60);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8) = v6;
    v14 = v8 + 1;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (!v14)
    goto LABEL_18;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14 - 8);
  v15 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v15 || *(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a1 + 40) = v4;
    goto LABEL_15;
  }
  v16 = *(_QWORD **)(a2 + 40);
  v17 = 8 * v15 - 8;
LABEL_10:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 360))(a1, *v16);
  while (v17)
  {
    ++v16;
    v17 -= 8;
    if (!*(_BYTE *)(a1 + 32))
      goto LABEL_10;
  }
  v14 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 40) = v4;
  if (!v14)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1825F045CLL);
  }
LABEL_15:
  v18 = v14 - 1;
  result = *(_QWORD *)(*v5 + 8 * v18);
  *(_QWORD *)(*v5 + 8 * v18) = 0;
  if (result)
    result = std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](result, v7);
  *(_DWORD *)(a1 + 60) = v18;
  return result;
}

uint64_t std::default_delete<WGSL::ContextProvider<WGSL::Binding>::Context>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v9;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 32;
      do
      {
        v6 = *(_DWORD **)(v5 - 32);
        if (v6 != (_DWORD *)-1)
        {
          if (*(_BYTE *)(v5 + 24))
          {
            v7 = *(unsigned int *)(v5 + 16);
            if ((_DWORD)v7 != -1)
            {
              ((void (*)(char *, uint64_t))off_1E0FD7CC8[v7])(&v9, v5);
              v6 = *(_DWORD **)(v5 - 32);
            }
            *(_DWORD *)(v5 + 16) = -1;
          }
          *(_QWORD *)(v5 - 32) = 0;
          if (v6)
          {
            if (*v6 == 2)
              WTF::StringImpl::destroy();
            else
              *v6 -= 2;
          }
        }
        v5 += 64;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return MEMORY[0x186DAB2A8](a1, 0x72C404B2EE363);
}

unint64_t WTF::Vector<std::unique_ptr<std::variant<WGSL::AbstractVector,WGSL::AbstractMatrix,WGSL::AbstractTexture,WGSL::AbstractTextureStorage,WGSL::AbstractChannelFormat,WGSL::AbstractReference,WGSL::AbstractPointer,WGSL::AbstractArray,WGSL::AbstractAtomic,WGSL::TypeVariable,WGSL::Type const*>>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v20;
  void *v21;

  v5 = *(void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v20 = *(void **)a1;
        return (unint64_t)v20 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
      }
      if (v10 < 3)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 2;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v20 = *(void **)a1;
        if ((void *)(a1 + 16) != v5 && v5)
        {
          if (v20 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((WTF *)v5, v21);
          v20 = *(void **)a1;
        }
        return (unint64_t)v20 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1825F0718);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 <= v12)
    return a3;
  v16 = *(unsigned int *)(a1 + 12);
  if (v15 < 3)
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 2;
    memcpy((void *)(a1 + 16), v5, 8 * v16);
    if ((void *)(a1 + 16) == v5)
      return a3;
  }
  else
  {
    if (v15 >> 29)
      goto LABEL_37;
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 8) = v15;
    *(_QWORD *)a1 = v17;
    memcpy(v17, v5, 8 * v16);
    if ((void *)(a1 + 16) == v5)
      return a3;
  }
  if (!v5)
    return a3;
  if (*(void **)a1 == v5)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  WTF::fastFree((WTF *)v5, v18);
  return a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL14AbstractVectorENS8_14AbstractMatrixENS8_15AbstractTextureENS8_22AbstractTextureStorageENS8_21AbstractChannelFormatENS8_17AbstractReferenceENS8_15AbstractPointerENS8_13AbstractArrayENS8_14AbstractAtomicENS8_12TypeVariableEPKNS8_4TypeEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SA_SB_SC_SD_SE_SF_SG_SH_SI_SL_EEEEEEDcSP_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v3])(&v5, v2);
    *(_DWORD *)(v2 + 24) = -1;
    return MEMORY[0x186DAB2A8](v2, 0x1062C40D964B916);
  }
  return result;
}

void WGSL::OverloadCandidate::~OverloadCandidate(WGSL::OverloadCandidate *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  WGSL::OverloadCandidate *v12;
  WTF *v14;
  char v16;
  char v17;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, uint64_t))off_1E0FD7D78[v4])(&v16, v3);
    *(_DWORD *)(v3 + 24) = -1;
    MEMORY[0x186DAB2A8](v3, 0x1062C40D964B916);
  }
  v5 = *((unsigned int *)this + 15);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 6);
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        v9 = *(unsigned int *)(v8 + 24);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))off_1E0FD7D78[v9])(&v17, v8);
        *(_DWORD *)(v8 + 24) = -1;
        MEMORY[0x186DAB2A8](v8, 0x1062C40D964B916);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v10 = (WTF *)*((_QWORD *)this + 6);
  if ((WGSL::OverloadCandidate *)((char *)this + 64) != v10 && v10 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v10, a2);
    v12 = (WGSL::OverloadCandidate *)*((_QWORD *)this + 3);
    if ((WGSL::OverloadCandidate *)((char *)this + 40) != v12 && v12 != 0)
      goto LABEL_28;
LABEL_22:
    v14 = *(WTF **)this;
    if ((WGSL::OverloadCandidate *)((char *)this + 16) == *(WGSL::OverloadCandidate **)this)
      return;
    goto LABEL_29;
  }
  v12 = (WGSL::OverloadCandidate *)*((_QWORD *)this + 3);
  if ((WGSL::OverloadCandidate *)((char *)this + 40) == v12 || v12 == 0)
    goto LABEL_22;
LABEL_28:
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  WTF::fastFree(v12, a2);
  v14 = *(WTF **)this;
  if ((WGSL::OverloadCandidate *)((char *)this + 16) == *(WGSL::OverloadCandidate **)this)
    return;
LABEL_29:
  if (v14)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2);
  }
}

unint64_t WTF::Vector<WGSL::ValueVariable,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1 > a2 || (v5 = *(unsigned int *)(a1 + 12), (unint64_t)v4 + 4 * v5 <= a2))
  {
    v13 = *(unsigned int *)(a1 + 8);
    v14 = v13 + (v13 >> 2);
    v15 = 2;
    if (v14 > 2)
      v15 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > v13)
    {
      if (v16 >> 30)
        goto LABEL_30;
      v17 = *(unsigned int *)(a1 + 12);
      v18 = (void *)WTF::fastMalloc((WTF *)(4 * v16));
      *(_DWORD *)(a1 + 8) = v16;
      *(_QWORD *)a1 = v18;
      memcpy(v18, v4, 4 * v17);
      if ((void *)(a1 + 16) != v4 && v4)
      {
        if (*(void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v19);
      }
    }
    return a2;
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v6 + (v6 >> 2);
  v8 = 2;
  if (v7 > 2)
    v8 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v9 = v8 + 1;
  else
    v9 = 16;
  if (v9 > v6)
  {
    if (!(v9 >> 30))
    {
      v10 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
      *(_DWORD *)(a1 + 8) = v9;
      *(_QWORD *)a1 = v10;
      memcpy(v10, v4, 4 * v5);
      v12 = *(void **)a1;
      if ((void *)(a1 + 16) != v4 && v4)
      {
        if (v12 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((WTF *)v4, v11);
        v12 = *(void **)a1;
      }
      return (unint64_t)v12 + 4 * ((uint64_t)(a2 - (_QWORD)v4) >> 2);
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1825F0D38);
  }
  v12 = *(void **)a1;
  return (unint64_t)v12 + 4 * ((uint64_t)(a2 - (_QWORD)v4) >> 2);
}

char *WTF::Vector<WGSL::TypeVariable,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF *v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  WTF *v29;
  uint64_t v30;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  WTF *v35;
  __int128 *v36;
  _OWORD *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = *(unsigned int *)(a1 + 12), v7 = (WTF *)((char *)v5 + 8 * v6), (unint64_t)v7 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= (unint64_t)a2)
      v17 = (unint64_t)a2;
    else
      v17 = v16;
    if (v17 <= v14)
      return (char *)a3;
    v18 = *(unsigned int *)(a1 + 12);
    if (v17 < 2)
    {
      v19 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      if (!(_DWORD)v18)
        goto LABEL_35;
    }
    else
    {
      if (v17 >> 29)
        goto LABEL_55;
      v19 = WTF::fastMalloc((WTF *)(8 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      if (!(_DWORD)v18)
        goto LABEL_35;
    }
    v20 = (v18 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3 || (unint64_t)(v19 - (_QWORD)v5) < 0x20)
    {
      v23 = (_QWORD *)v19;
      v24 = v5;
    }
    else
    {
      v21 = v20 + 1;
      v22 = (v20 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v23 = (_QWORD *)(v19 + 8 * v22);
      v24 = (WTF *)((char *)v5 + 8 * v22);
      v25 = (__int128 *)((char *)v5 + 16);
      v26 = (_OWORD *)(v19 + 16);
      v27 = v22;
      do
      {
        v28 = *v25;
        *(v26 - 1) = *(v25 - 1);
        *v26 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      if (v21 == v22)
      {
LABEL_35:
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return (char *)a3;
      }
    }
    do
    {
      v30 = *(_QWORD *)v24;
      v24 = (WTF *)((char *)v24 + 8);
      *v23++ = v30;
    }
    while (v24 != (WTF *)((char *)v5 + 8 * v18));
    goto LABEL_35;
  }
  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    if (v11 < 2)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
      v13 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 3)
        goto LABEL_47;
      goto LABEL_42;
    }
    if (!(v11 >> 29))
    {
      v12 = WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v12;
      v13 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 3)
        goto LABEL_47;
LABEL_42:
      if ((unint64_t)(v12 - (_QWORD)v5) >= 0x20)
      {
        v32 = v13 + 1;
        v33 = (v13 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v34 = (_QWORD *)(v12 + 8 * v33);
        v35 = (WTF *)((char *)v5 + 8 * v33);
        v36 = (__int128 *)((char *)v5 + 16);
        v37 = (_OWORD *)(v12 + 16);
        v38 = v33;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 4;
        }
        while (v38);
        if (v32 == v33)
        {
LABEL_49:
          v29 = *(WTF **)a1;
          if ((WTF *)(a1 + 16) != v5 && v5)
          {
            if (v29 == v5)
            {
              *(_QWORD *)a1 = 0;
              *(_DWORD *)(a1 + 8) = 0;
            }
            WTF::fastFree(v5, a2);
            v29 = *(WTF **)a1;
          }
          return (char *)v29 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
        }
        do
        {
LABEL_48:
          v40 = *(_QWORD *)v35;
          v35 = (WTF *)((char *)v35 + 8);
          *v34++ = v40;
        }
        while (v35 != v7);
        goto LABEL_49;
      }
LABEL_47:
      v34 = (_QWORD *)v12;
      v35 = v5;
      goto LABEL_48;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1825F0FE0);
  }
  v29 = *(WTF **)a1;
  return (char *)v29 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v3])(&v5, a2);
  *(_DWORD *)(a2 + 16) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  char v6;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 16) = -1;
  v3 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v3 != -1)
  {
    result = ((uint64_t (*)(char *))off_1E0FD7D20[v3])(&v6);
    *(_DWORD *)(a2 + 16) = v3;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN4WGSL13ConstantValueEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WGSL::constantBitwiseShiftLeft(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a4 != 4)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_28;
  }
  v4 = result;
  v5 = a2[4];
  if (v5 == 5)
  {
    if (a3 >= 0x40)
    {
      result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x40uLL);
      v6 = v13;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F1188);
      }
      goto LABEL_25;
    }
    v8 = -1 << -(uint64_t)(a3 + 1);
    v9 = *(_QWORD *)a2 & v8;
    if (v9)
      v10 = v9 == v8;
    else
      v10 = 1;
    if (v10)
    {
      *(_QWORD *)(result + 8) = *(_QWORD *)a2 << a3;
      *(_DWORD *)(result + 24) = 5;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
    goto LABEL_24;
  }
  if (v5 == 4)
  {
    if (a3 >= 0x20)
    {
      result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x20uLL);
      v6 = v13;
      if (!v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F1158);
      }
      goto LABEL_25;
    }
    v7 = *a2;
    if (!(v7 >> (32 - a3)))
    {
      *(_DWORD *)(result + 8) = (_DWORD)v7 << a3;
      *(_DWORD *)(result + 24) = 4;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
LABEL_24:
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v6 = v13;
LABEL_25:
    *(_QWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  if (v5 != 3)
  {
LABEL_28:
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x1825F1128);
  }
  if (a3 >= 0x20)
  {
    result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, "shift left value must be less than the bit width of the shifted value, which is ", 81, 0x20uLL);
    v6 = v13;
    if (!v13)
    {
      __break(0xC471u);
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  v11 = (int)*a2;
  v12 = -1 << (31 - a3);
  if ((v12 & v11) != 0 && (v12 & v11) != v12)
    goto LABEL_24;
  *(_DWORD *)(result + 8) = (_DWORD)v11 << a3;
  *(_DWORD *)(result + 24) = 3;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>(uint64_t result, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  if (a3)
    v4 = a3 - 1;
  else
    v4 = 0;
  v5 = v4 >> 31;
  if (v4 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F1464);
  }
  v6 = a4;
  v8 = (_QWORD *)result;
  v9 = a4;
  do
  {
    LODWORD(v5) = v5 + 1;
    v10 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v10);
  if (((v5 | v4) & 0x80000000) != 0)
    goto LABEL_10;
  v11 = (v4 + v5);
  if (__OFADD__((_DWORD)v4, (_DWORD)v5))
    goto LABEL_10;
  if (!(_DWORD)v11)
  {
    v12 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_23;
  }
  if ((v11 & 0x80000000) != 0)
  {
LABEL_10:
    v12 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v11 + 20));
    v12 = v15[0];
    if (v15[0])
    {
      v13 = (_BYTE *)(v15[0] + 20);
      *(_DWORD *)v15[0] = 2;
      *(_DWORD *)(v12 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
          *v13 = *a2;
        else
          result = (uint64_t)memcpy((void *)(v12 + 20), a2, v4);
      }
      v14 = 0;
      do
      {
        *((_BYTE *)&v15[3] + v14--) = (v6 % 0xA) | 0x30;
        v10 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v10);
      if (v14 + 26 <= 25)
        result = (uint64_t)memcpy(&v13[v4], (char *)&v15[3] + v14 + 1, -v14);
    }
  }
LABEL_23:
  *v8 = v12;
  return result;
}

uint64_t WGSL::constantBitwiseShiftRight(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (a4 != 4)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  v4 = result;
  v5 = *(_DWORD *)(a2 + 16);
  if (v5 == 5)
  {
    if (a3 >= 0x40)
    {
      result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x40uLL);
      v6 = v7;
      if (!v7)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x1825F14D0);
      }
      goto LABEL_13;
    }
    *(_QWORD *)(result + 8) = *(uint64_t *)a2 >> a3;
    *(_DWORD *)(result + 24) = 5;
    *(_DWORD *)(result + 32) = 0;
    return result;
  }
  if (v5 != 4)
  {
    if (v5 == 3)
    {
      if (a3 >= 0x20)
      {
        result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x20uLL);
        v6 = v7;
        if (!v7)
          goto LABEL_19;
        goto LABEL_13;
      }
      *(_DWORD *)(result + 8) = *(int *)a2 >> a3;
      *(_DWORD *)(result + 24) = 3;
      *(_DWORD *)(result + 32) = 0;
      return result;
    }
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1825F15E0);
  }
  if (a3 >= 0x20)
  {
    result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v7, "shift right value must be less than the bit width of the shifted value, which is ", 82, 0x20uLL);
    v6 = v7;
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1825F1500);
    }
LABEL_13:
    *(_QWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  *(_DWORD *)(result + 8) = *(_DWORD *)a2 >> a3;
  *(_DWORD *)(result + 24) = 4;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

char *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, unsigned int a2, _BYTE *a3, unsigned int a4, unint64_t a5, char *a6, unsigned int a7)
{
  char *v7;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  _BYTE *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  _QWORD v27[5];

  v7 = result;
  v27[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v14 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_32;
  }
  if ((a2 & 0x80000000) != 0)
  {
    v14 = 0;
    goto LABEL_32;
  }
  result = (char *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v14 = v27[0];
  if (v27[0])
  {
    v15 = (_BYTE *)(v27[0] + 20);
    *(_DWORD *)v27[0] = 2;
    *(_DWORD *)(v14 + 4) = a2;
    *(_QWORD *)(v14 + 8) = v14 + 20;
    *(_DWORD *)(v14 + 16) = 4;
    if (a4)
    {
      if (a4 != 1)
      {
        result = (char *)memcpy((void *)(v14 + 20), a3, a4);
        v16 = &v15[a4];
        v17 = 0;
        if ((a5 & 0x8000000000000000) == 0)
          goto LABEL_8;
        goto LABEL_15;
      }
      *v15 = *a3;
    }
    v16 = &v15[a4];
    v17 = 0;
    if ((a5 & 0x8000000000000000) == 0)
    {
LABEL_8:
      v18 = a5;
      do
      {
        *((_BYTE *)&v27[3] + v17--) = (v18 % 0xA) | 0x30;
        v19 = v18 > 9;
        v18 /= 0xAuLL;
      }
      while (v19);
      if (v17 + 26 <= 25)
      {
        v20 = (char *)&v27[3] + v17 + 1;
        v21 = -v17;
LABEL_21:
        result = (char *)memcpy(v16, v20, v21);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
LABEL_15:
    v22 = -(uint64_t)a5;
    do
    {
      *((_BYTE *)&v27[3] + v17--) = (v22 % 0xA) | 0x30;
      v19 = v22 > 9;
      v22 /= 0xAuLL;
    }
    while (v19);
    v23 = v17 + 24;
    v20 = (char *)&v27[3] + v17;
    *v20 = 45;
    if (v17 + 26 <= 26)
    {
      if (v23 <= 24)
        v23 = 24;
      v21 = v23 - v17 - 23;
      goto LABEL_21;
    }
LABEL_22:
    if ((a5 & 0x8000000000000000) != 0)
    {
      v25 = -(uint64_t)a5;
      v24 = 1;
      do
      {
        ++v24;
        v26 = v25 >= 0xA;
        v25 /= 0xAuLL;
      }
      while (v26);
    }
    else
    {
      v24 = 0;
      do
      {
        ++v24;
        v19 = a5 > 9;
        a5 /= 0xAuLL;
      }
      while (v19);
    }
    if (a7)
    {
      result = &v16[v24];
      if (a7 == 1)
        *result = *a6;
      else
        result = (char *)memcpy(result, a6, a7);
    }
  }
LABEL_32:
  *(_QWORD *)v7 = v14;
  return result;
}

void WGSL::constantVector(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int **v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t (*v51)();
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  _BYTE v62[16];
  int v63;
  _BYTE v64[16];
  int v65;
  _QWORD v66[2];
  unsigned int v67;
  _QWORD v68[2];
  unsigned int v69;
  char *v70;

  v8 = a4;
  v9 = 24 * a4;
  v61 = (WTF *)WTF::fastMalloc((WTF *)(v9 + 8));
  *(_DWORD *)v61 = a4;
  v10 = (char *)v61 + 8;
  bzero((char *)v61 + 8, 24 * ((v9 - 24) / 0x18uLL) + 24);
  v11 = (_DWORD *)*a3;
  if (!*a3)
  {
LABEL_4:
    v13 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v13 != -1)
    {
      v68[0] = v66;
      ((void (*)(_QWORD *, uint64_t))off_1E0FD8068[v13])(v68, a2);
      v15 = *(unsigned int *)v61;
      if ((_DWORD)v15)
        goto LABEL_49;
      goto LABEL_53;
    }
    goto LABEL_93;
  }
  v12 = *v11;
  if (*v11 == 1)
  {
    if (*(_DWORD *)(a2 + 48) != 1)
    {
LABEL_93:
      v55 = std::__throw_bad_variant_access[abi:sn180100]();
      WGSL::convertValue<WGSL::StaticCast>(v55, v56, v57);
      return;
    }
    v16 = *(_QWORD *)a2;
    v58 = a1;
    if (v11[6] == 8)
    {
      v17 = (unsigned int *)*((_QWORD *)v11 + 1);
      if (v17)
        v18 = v17 + 2;
      else
        v18 = 0;
      if (v17)
      {
        v19 = (uint64_t)&v17[6 * *v17 + 2];
        if (v18 == (unsigned int *)v19)
          goto LABEL_87;
      }
      else
      {
        v19 = 0;
        if (!v18)
        {
LABEL_87:
          *(_QWORD *)v58 = v61;
          *(_DWORD *)(v58 + 16) = 8;
          return;
        }
      }
      v49 = 0;
      while (1)
      {
        LOBYTE(v68[0]) = 0;
        v69 = -1;
        v50 = v18[4];
        if ((_DWORD)v50 == -1)
        {
          v64[0] = 0;
        }
        else
        {
          v51 = off_1E0FD8010[v50];
          ((void (*)(_QWORD *, _QWORD *, unsigned int *))v51)(v66, v68, v18);
          v69 = v50;
          v64[0] = 0;
          v65 = -1;
          ((void (*)(char **, _BYTE *, _QWORD *))v51)(&v70, v64, v68);
        }
        v65 = v50;
        WGSL::convertValue<WGSL::StaticCast>((uint64_t)v66, v16, (uint64_t)v64);
        if (*(_DWORD *)v61 <= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1825F1F9CLL);
        }
        v52 = &v10[24 * v49];
        v53 = *((unsigned int *)v52 + 4);
        if ((_DWORD)v53 == -1)
        {
          if (v67 == -1)
            goto LABEL_83;
        }
        else if (v67 == -1)
        {
          ((void (*)(char **, char *))off_1E0FD7CC8[v53])(&v70, &v10[24 * v49]);
          *((_DWORD *)v52 + 4) = -1;
          v54 = v67;
          if (v67 == -1)
            goto LABEL_83;
LABEL_82:
          ((void (*)(char **, _QWORD *))off_1E0FD7CC8[v54])(&v70, v66);
          goto LABEL_83;
        }
        v70 = &v10[24 * v49];
        ((void (*)(char **, char *, _QWORD *))off_1E0FD8188[v67])(&v70, v70, v66);
        v54 = v67;
        if (v67 != -1)
          goto LABEL_82;
LABEL_83:
        v67 = -1;
        if (v65 != -1)
          ((void (*)(char **, _BYTE *))off_1E0FD7CC8[v65])(&v70, v64);
        v65 = -1;
        if (v69 != -1)
          ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v69])(v66, v68);
        v18 += 6;
        ++v49;
        if (v18 == (unsigned int *)v19)
          goto LABEL_87;
      }
    }
    v43 = 0;
    v44 = (_DWORD *)((char *)v61 + 24);
    while (1)
    {
      v45 = (_DWORD *)*a3;
      if (!*(_DWORD *)*a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F1F3CLL);
      }
      v62[0] = 0;
      v63 = -1;
      v46 = v45[6];
      if ((_DWORD)v46 != -1)
      {
        ((void (*)(_QWORD *, _BYTE *, _DWORD *))off_1E0FD8010[v46])(v68, v62, v45 + 2);
        v63 = v46;
      }
      WGSL::convertValue<WGSL::StaticCast>((uint64_t)v68, v16, (uint64_t)v62);
      if (v43 >= *(unsigned int *)v61)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F1F5CLL);
      }
      v47 = *v44;
      if ((_DWORD)v47 == -1)
      {
        if (v69 == -1)
          goto LABEL_67;
      }
      else if (v69 == -1)
      {
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v47])(v66, v44 - 4);
        *v44 = -1;
        v48 = v69;
        if (v69 == -1)
          goto LABEL_67;
LABEL_66:
        ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v48])(v66, v68);
        goto LABEL_67;
      }
      v66[0] = v44 - 4;
      ((void (*)(_QWORD *))off_1E0FD8188[v69])(v66);
      v48 = v69;
      if (v69 != -1)
        goto LABEL_66;
LABEL_67:
      v69 = -1;
      if (v63 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_1E0FD7CC8[v63])(v66, v62);
      v63 = -1;
      ++v43;
      v44 += 6;
      if (v8 == v43)
        goto LABEL_87;
    }
  }
  if (!v12)
    goto LABEL_4;
  v20 = 0;
  v21 = (unsigned int **)(v11 + 2);
  v59 = a1;
  v60 = (uint64_t)&v11[6 * v12 + 2];
  do
  {
    v22 = *((unsigned int *)v21 + 4);
    if ((_DWORD)v22 == 8)
    {
      v23 = *v21;
      if (*v21)
        v24 = (uint64_t)(*v21 + 2);
      else
        v24 = 0;
      if (v23)
        v25 = (uint64_t)&(*v21)[6 * *v23 + 2];
      else
        v25 = 0;
      for (i = v20; ; i = (i + 1))
      {
        if (v24 == v25)
          goto LABEL_18;
        LOBYTE(v68[0]) = 0;
        v69 = -1;
        v29 = *(unsigned int *)(v24 + 16);
        if ((_DWORD)v29 != -1)
        {
          ((void (*)(_QWORD *, _QWORD *, uint64_t))off_1E0FD8010[v29])(v66, v68, v24);
          v69 = v29;
        }
        if (*(_DWORD *)v61 <= i)
        {
          __break(0xC471u);
          JUMPOUT(0x1825F1F1CLL);
        }
        v30 = &v10[24 * i];
        v31 = *((unsigned int *)v30 + 4);
        if ((_DWORD)v31 == -1)
          break;
        if ((_DWORD)v29 != -1)
          goto LABEL_41;
        ((void (*)(_QWORD *, char *))off_1E0FD7CC8[v31])(v66, &v10[24 * i]);
        *((_DWORD *)v30 + 4) = -1;
        v32 = v69;
        if (v69 != -1)
          goto LABEL_42;
LABEL_31:
        v24 += 24;
      }
      if ((_DWORD)v29 == -1)
        goto LABEL_31;
LABEL_41:
      v66[0] = &v10[24 * i];
      ((void (*)(_QWORD *, _QWORD, _QWORD *))off_1E0FD80E0[v29])(v66, v66[0], v68);
      v32 = v69;
      if (v69 == -1)
        goto LABEL_31;
LABEL_42:
      ((void (*)(_QWORD *, _QWORD *))off_1E0FD7CC8[v32])(v66, v68);
      goto LABEL_31;
    }
    if (*(_DWORD *)v61 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1825F1F7CLL);
    }
    i = (v20 + 1);
    v27 = &v10[24 * v20];
    v28 = *((unsigned int *)v27 + 4);
    if ((_DWORD)v28 == -1)
    {
      if ((_DWORD)v22 == -1)
        goto LABEL_18;
LABEL_17:
      v68[0] = v27;
      ((void (*)(_QWORD *, char *, unsigned int **))off_1E0FD80E0[v22])(v68, v27, v21);
      goto LABEL_18;
    }
    if ((_DWORD)v22 != -1)
      goto LABEL_17;
    ((void (*)(_QWORD *, char *))off_1E0FD7CC8[v28])(v68, v27);
    *((_DWORD *)v27 + 4) = -1;
LABEL_18:
    v21 += 3;
    v20 = i;
  }
  while (v21 != (unsigned int **)v60);
  v33 = *(unsigned int *)v61;
  v34 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v33 + 8));
  v35 = v34;
  *v34 = v33;
  if ((_DWORD)v33)
  {
    v36 = v34 + 6;
    v37 = 24 * v33;
    v38 = (unsigned int *)((char *)v61 + 24);
    do
    {
      *((_BYTE *)v36 - 16) = 0;
      v14 = v36 - 4;
      *v36 = -1;
      v39 = *v38;
      if ((_DWORD)v39 != -1)
      {
        ((void (*)(_QWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v39])(v68, v14, v38 - 4);
        *v36 = v39;
      }
      v36 += 6;
      v38 += 6;
      v37 -= 24;
    }
    while (v37);
  }
  *(_QWORD *)v59 = v35;
  *(_DWORD *)(v59 + 16) = 8;
  v15 = *(unsigned int *)v61;
  if ((_DWORD)v15)
  {
LABEL_49:
    v40 = 24 * v15;
    v41 = (_DWORD *)((char *)v61 + 24);
    do
    {
      v14 = v41 - 4;
      v42 = *v41;
      if ((_DWORD)v42 != -1)
        ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v42])(v68, v14);
      *v41 = -1;
      v41 += 6;
      v40 -= 24;
    }
    while (v40);
  }
LABEL_53:
  WTF::fastFree(v61, v14);
}

uint64_t WGSL::convertValue<WGSL::StaticCast>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  float v14;
  uint64_t v16;
  uint64_t v18;
  char v34;
  double v35[2];
  int v36;
  unsigned int v37[4];
  int v38;
  double v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  double v43[2];
  int v44;
  double v45[2];
  int v46;
  double v47[2];
  int v48;
  char v49;

  if (*(_DWORD *)(a2 + 48))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        LOBYTE(v47[0]) = 0;
        v48 = -1;
        v4 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v4 != -1)
        {
          ((void (*)(char *, double *))off_1E0FD8010[v4])(&v49, v47);
          v48 = v4;
          switch((int)v4)
          {
            case 0:
              v5 = (uint64_t)*(float *)v47;
              goto LABEL_30;
            case 1:
              _H0 = LOWORD(v47[0]);
              __asm { FCVT            S0, H0 }
              v5 = (uint64_t)_S0;
              goto LABEL_30;
            case 2:
              v5 = (uint64_t)v47[0];
              goto LABEL_30;
            case 3:
              v5 = SLODWORD(v47[0]);
              goto LABEL_30;
            case 4:
              v5 = LODWORD(v47[0]);
              goto LABEL_30;
            case 5:
              v5 = *(_QWORD *)&v47[0];
              goto LABEL_30;
            case 6:
              v5 = LOBYTE(v47[0]);
LABEL_30:
              *(_QWORD *)a1 = v5;
              *(_DWORD *)(a1 + 16) = 5;
              return ((uint64_t (*)(char *, double *))off_1E0FD7CC8[v4])(&v49, v47);
            default:
              goto LABEL_76;
          }
        }
        break;
      case 1:
        LOBYTE(v45[0]) = 0;
        v46 = -1;
        v6 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v6 != -1)
        {
          ((void (*)(char *, double *))off_1E0FD8010[v6])(&v49, v45);
          v46 = v6;
          switch((int)v6)
          {
            case 0:
              v7 = (int)*(float *)v45;
              goto LABEL_35;
            case 1:
              _H0 = LOWORD(v45[0]);
              __asm { FCVT            S0, H0 }
              v7 = (int)_S0;
              goto LABEL_35;
            case 2:
              v7 = (int)v45[0];
              goto LABEL_35;
            case 3:
            case 4:
            case 5:
              v7 = LODWORD(v45[0]);
              goto LABEL_35;
            case 6:
              v7 = LOBYTE(v45[0]);
LABEL_35:
              *(_DWORD *)a1 = v7;
              *(_DWORD *)(a1 + 16) = 3;
              return ((uint64_t (*)(char *, double *))off_1E0FD7CC8[v6])(&v49, v45);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F25DCLL);
      case 2:
        LOBYTE(v43[0]) = 0;
        v44 = -1;
        v8 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v8 != -1)
        {
          ((void (*)(char *, double *))off_1E0FD8010[v8])(&v49, v43);
          v44 = v8;
          switch((int)v8)
          {
            case 0:
              v9 = *(float *)v43;
              goto LABEL_40;
            case 1:
              _H0 = LOWORD(v43[0]);
              __asm { FCVT            S0, H0 }
              v9 = _S0;
              goto LABEL_40;
            case 2:
              v9 = v43[0];
              goto LABEL_40;
            case 3:
            case 4:
            case 5:
              v9 = LODWORD(v43[0]);
              goto LABEL_40;
            case 6:
              v9 = LOBYTE(v43[0]);
LABEL_40:
              *(_DWORD *)a1 = v9;
              *(_DWORD *)(a1 + 16) = 4;
              return ((uint64_t (*)(char *, double *))off_1E0FD7CC8[v8])(&v49, v43);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F25FCLL);
      case 3:
        LOBYTE(v41[0]) = 0;
        v42 = -1;
        v10 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, _QWORD *))off_1E0FD8010[v10])(&v49, v41);
          v42 = v10;
          switch((int)v10)
          {
            case 0:
              _D0 = *(float *)v41;
              goto LABEL_48;
            case 1:
              _H0 = v41[0];
              __asm { FCVT            D0, H0 }
              goto LABEL_48;
            case 2:
              _D0 = *(double *)v41;
              goto LABEL_48;
            case 3:
              _D0 = (double)SLODWORD(v41[0]);
              goto LABEL_48;
            case 4:
              LODWORD(v11) = v41[0];
              _D0 = (double)v11;
              goto LABEL_48;
            case 5:
              _D0 = (double)v41[0];
              goto LABEL_48;
            case 6:
              _D0 = 0.0;
              if (LOBYTE(v41[0]))
                _D0 = 1.0;
LABEL_48:
              *(double *)a1 = _D0;
              *(_DWORD *)(a1 + 16) = 2;
              return ((uint64_t (*)(char *, _QWORD *))off_1E0FD7CC8[v10])(&v49, v41);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F261CLL);
      case 4:
        LOBYTE(v37[0]) = 0;
        v38 = -1;
        v13 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v13 != -1)
        {
          ((void (*)(char *, unsigned int *))off_1E0FD8010[v13])(&v49, v37);
          v38 = v13;
          switch((int)v13)
          {
            case 0:
              LODWORD(_D0) = v37[0];
              goto LABEL_54;
            case 1:
              LOWORD(_D0) = v37[0];
              goto LABEL_57;
            case 2:
              _D0 = *(_QWORD *)v37;
              __asm { FCVT            H0, D0 }
              goto LABEL_57;
            case 3:
              *(float *)&_D0 = (float)(int)v37[0];
              goto LABEL_54;
            case 4:
              *(float *)&_D0 = (float)v37[0];
              goto LABEL_54;
            case 5:
              *(float *)&_D0 = (float)*(uint64_t *)v37;
LABEL_54:
              __asm { FCVT            H0, S0 }
              goto LABEL_57;
            case 6:
              LOWORD(_D0) = 0;
              LOWORD(v14) = 15360;
              if (LOBYTE(v37[0]))
                *(float *)&_D0 = v14;
LABEL_57:
              *(_WORD *)a1 = _D0;
              *(_DWORD *)(a1 + 16) = 1;
              return ((uint64_t (*)(char *, unsigned int *))off_1E0FD7CC8[v13])(&v49, v37);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F263CLL);
      case 5:
        LOBYTE(v39[0]) = 0;
        v40 = -1;
        v16 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(char *, double *))off_1E0FD8010[v16])(&v49, v39);
          v40 = v16;
          switch((int)v16)
          {
            case 0:
              _S0 = *(float *)v39;
              goto LABEL_65;
            case 1:
              _H0 = LOWORD(v39[0]);
              __asm { FCVT            S0, H0 }
              goto LABEL_65;
            case 2:
              _S0 = v39[0];
              goto LABEL_65;
            case 3:
              _S0 = (float)SLODWORD(v39[0]);
              goto LABEL_65;
            case 4:
              _S0 = (float)LODWORD(v39[0]);
              goto LABEL_65;
            case 5:
              _S0 = (float)*(uint64_t *)&v39[0];
              goto LABEL_65;
            case 6:
              _S0 = 0.0;
              if (LOBYTE(v39[0]))
                _S0 = 1.0;
LABEL_65:
              *(float *)a1 = _S0;
              *(_DWORD *)(a1 + 16) = 0;
              return ((uint64_t (*)(char *, double *))off_1E0FD7CC8[v16])(&v49, v39);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F265CLL);
      case 7:
        LOBYTE(v35[0]) = 0;
        v36 = -1;
        v18 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v18 != -1)
        {
          ((void (*)(char *, double *))off_1E0FD8010[v18])(&v49, v35);
          v36 = v18;
          switch((int)v18)
          {
            case 0:
              _Q0.n128_u32[0] = LODWORD(v35[0]);
              _ZF = *(float *)v35 == 0.0;
              goto LABEL_70;
            case 1:
              _H0 = LOWORD(v35[0]);
              __asm { FCVT            S0, H0 }
              _ZF = _Q0.n128_f32[0] == 0.0;
              goto LABEL_70;
            case 2:
              _Q0.n128_f64[0] = v35[0];
              _ZF = v35[0] == 0.0;
              goto LABEL_70;
            case 3:
            case 4:
              _ZF = LODWORD(v35[0]) == 0;
              goto LABEL_70;
            case 5:
              _ZF = *(_QWORD *)&v35[0] == 0;
LABEL_70:
              v34 = !_ZF;
              goto LABEL_73;
            case 6:
              v34 = LOBYTE(v35[0]);
LABEL_73:
              *(_BYTE *)a1 = v34;
              *(_DWORD *)(a1 + 16) = 6;
              return ((uint64_t (*)(char *, double *, __n128))off_1E0FD7CC8[v18])(&v49, v35, _Q0);
            default:
              break;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1825F267CLL);
      default:
        __break(0xC471u);
        JUMPOUT(0x1825F269CLL);
    }
  }
LABEL_76:
  __break(0xC471u);
  JUMPOUT(0x1825F25BCLL);
}

void WGSL::constantMatrix(_QWORD *a1, uint64_t a2, unsigned int **a3, unsigned int a4, uint64_t a5)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int **v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v47;
  unsigned int **v48;
  _BYTE v49[16];
  int v50;
  _QWORD v51[2];
  unsigned int v52;
  _DWORD *v53;

  v5 = *a3;
  if (!*a3)
  {
LABEL_4:
    v7 = *(unsigned int *)(a2 + 48);
    if ((_DWORD)v7 != -1)
    {
      v51[0] = &v53;
      ((void (*)(_QWORD *))off_1E0FD8068[v7])(v51);
      return;
    }
    goto LABEL_65;
  }
  v6 = *v5;
  if ((_DWORD)v6 != 1)
  {
    if (!(_DWORD)v6)
      goto LABEL_4;
    v16 = (unsigned int *)(a5 * a4);
    if ((_DWORD)v6 == (_DWORD)v16)
    {
      v47 = a5 << 32;
      v17 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
      v18 = 0;
      *v17 = v6;
      do
      {
        LOBYTE(v17[v18 + 2]) = 0;
        v17[v18 + 6] = -1;
        v19 = v5[v18 + 6];
        if ((_DWORD)v19 != -1)
        {
          ((void (*)(_QWORD *, _DWORD *, unsigned int *))off_1E0FD8010[v19])(v51, &v17[v18 + 2], &v5[v18 + 2]);
          v17[v18 + 6] = v19;
        }
        v18 += 6;
      }
      while (6 * v6 != v18);
      v33 = *a3;
      if (*a3)
        v33 = (unsigned int *)*v33;
      if (v33 != v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F2C90);
      }
      v34 = a1;
      *a1 = v47 | a4;
      a1[1] = v17;
      goto LABEL_60;
    }
    if ((_DWORD)v6 != a4)
    {
      __break(0xC471u);
      JUMPOUT(0x1825F2C70);
    }
    v20 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * (_QWORD)v16 + 8));
    *v20 = v16;
    v21 = v20 + 2;
    bzero(v20 + 2, 24 * ((24 * (uint64_t)v16 - 24) / 0x18uLL) + 24);
    v22 = *a3;
    if (*a3)
    {
      v25 = *v22;
      v24 = (unsigned int **)(v22 + 2);
      v23 = v25;
      if (v25)
      {
        v26 = 0;
        v48 = &v24[3 * v23];
        do
        {
          if (*((_DWORD *)v24 + 4) != 8)
            goto LABEL_65;
          v27 = *v24;
          if (*v24)
            v28 = (uint64_t)(*v24 + 2);
          else
            v28 = 0;
          if (v27)
            v29 = (uint64_t)&(*v24)[6 * *v27 + 2];
          else
            v29 = 0;
          while (v28 != v29)
          {
            if (*v20 <= v26)
            {
              __break(0xC471u);
              JUMPOUT(0x1825F2C30);
            }
            v30 = &v21[6 * v26];
            v31 = v30[4];
            v32 = *(unsigned int *)(v28 + 16);
            if ((_DWORD)v31 == -1)
            {
              if ((_DWORD)v32 == -1)
                goto LABEL_33;
LABEL_32:
              v51[0] = &v21[6 * v26];
              ((void (*)(_QWORD *, _QWORD, uint64_t))off_1E0FD80E0[v32])(v51, v51[0], v28);
              goto LABEL_33;
            }
            if ((_DWORD)v32 != -1)
              goto LABEL_32;
            ((void (*)(_QWORD *, _DWORD *))off_1E0FD7CC8[v31])(v51, &v21[6 * v26]);
            v30[4] = -1;
LABEL_33:
            v28 += 24;
            ++v26;
          }
          v24 += 3;
        }
        while (v24 != v48);
      }
    }
    v34 = a1;
    *a1 = a4 | (unint64_t)(a5 << 32);
    a1[1] = v20;
LABEL_60:
    *((_DWORD *)v34 + 4) = 9;
    return;
  }
  if (*(_DWORD *)(a2 + 48) == 2 && v5[6] == 9)
  {
    v8 = *(_QWORD *)a2;
    v9 = a5 * a4;
    v10 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a5 * a4 + 8));
    *v10 = v9;
    v11 = v10 + 2;
    bzero(v10 + 2, 24 * ((24 * (unint64_t)v9 - 24) / 0x18) + 24);
    v12 = (unsigned int *)*((_QWORD *)v5 + 2);
    if (v12)
      v13 = v12 + 2;
    else
      v13 = 0;
    if (v12)
    {
      v14 = (uint64_t)&v12[6 * *v12 + 2];
      if (v13 == (unsigned int *)v14)
        goto LABEL_59;
    }
    else
    {
      v14 = 0;
      if (!v13)
      {
LABEL_59:
        v34 = a1;
        *a1 = a4 | (unint64_t)(a5 << 32);
        a1[1] = v10;
        goto LABEL_60;
      }
    }
    v35 = 0;
    while (1)
    {
      v49[0] = 0;
      v50 = -1;
      v36 = v13[4];
      if ((_DWORD)v36 != -1)
      {
        ((void (*)(_QWORD *, _BYTE *, unsigned int *))off_1E0FD8010[v36])(v51, v49, v13);
        v50 = v36;
      }
      WGSL::convertValue<WGSL::StaticCast>((uint64_t)v51, v8, (uint64_t)v49);
      if (*v10 <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F2C50);
      }
      v37 = &v11[6 * v35];
      v38 = v37[4];
      if ((_DWORD)v38 == -1)
      {
        if (v52 == -1)
          goto LABEL_57;
      }
      else if (v52 == -1)
      {
        ((void (*)(_DWORD **, _DWORD *))off_1E0FD7CC8[v38])(&v53, &v11[6 * v35]);
        v37[4] = -1;
        v39 = v52;
        if (v52 == -1)
          goto LABEL_57;
LABEL_56:
        ((void (*)(_DWORD **, _QWORD *))off_1E0FD7CC8[v39])(&v53, v51);
        goto LABEL_57;
      }
      v53 = &v11[6 * v35];
      ((void (*)(_DWORD **, _DWORD *, _QWORD *))off_1E0FD8188[v52])(&v53, v53, v51);
      v39 = v52;
      if (v52 != -1)
        goto LABEL_56;
LABEL_57:
      v52 = -1;
      if (v50 != -1)
        ((void (*)(_DWORD **, _BYTE *))off_1E0FD7CC8[v50])(&v53, v49);
      v50 = -1;
      v13 += 6;
      ++v35;
      if (v13 == (unsigned int *)v14)
        goto LABEL_59;
    }
  }
LABEL_65:
  v40 = std::__throw_bad_variant_access[abi:sn180100]();
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(v40);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJN4WGSL13ConstantValueES4_EEC2B8sn180100IJLm0ELm1EEJS4_S4_EJEJEJRNS3_14ConstantVectorES8_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSA_IJDpT2_EEEDpOT3_(uint64_t a1, unsigned int *a2, unsigned int **a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;

  if (a2)
  {
    v6 = *a2;
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v6 + 8));
    *v7 = v6;
    if ((_DWORD)v6)
    {
      v8 = 0;
      v9 = 24 * v6;
      do
      {
        LOBYTE(v7[v8 / 4 + 2]) = 0;
        v7[v8 / 4 + 6] = -1;
        v10 = a2[v8 / 4 + 6];
        if ((_DWORD)v10 != -1)
        {
          ((void (*)(char *, _DWORD *, unsigned int *))off_1E0FD8010[v10])(&v18, &v7[v8 / 4 + 2], &a2[v8 / 4 + 2]);
          v7[v8 / 4 + 6] = v10;
        }
        v8 += 24;
      }
      while (v9 != v8);
    }
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 16) = 8;
  v11 = *a3;
  if (*a3)
  {
    v12 = *v11;
    v13 = (_DWORD *)WTF::fastMalloc((WTF *)(24 * v12 + 8));
    *v13 = v12;
    if ((_DWORD)v12)
    {
      v14 = 0;
      v15 = 24 * v12;
      do
      {
        LOBYTE(v13[v14 / 4 + 2]) = 0;
        v13[v14 / 4 + 6] = -1;
        v16 = v11[v14 / 4 + 6];
        if ((_DWORD)v16 != -1)
        {
          ((void (*)(char *, _DWORD *, unsigned int *))off_1E0FD8010[v16])(&v19, &v13[v14 / 4 + 2], &v11[v14 / 4 + 2]);
          v13[v14 / 4 + 6] = v16;
        }
        v14 += 24;
      }
      while (v15 != v14);
    }
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 40) = 8;
  return a1;
}

uint64_t *WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::HashMap(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  *a1 = 0;
  v6 = (a3 - 1) | ((a3 - 1) >> 1) | ((((_DWORD)a3 - 1) | ((a3 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * (unint64_t)a3)
      goto LABEL_8;
    goto LABEL_5;
  }
  if (3 * v8 <= 4 * (unint64_t)a3)
  {
LABEL_5:
    LODWORD(v8) = 2 * v8;
    if (v8 <= 0x400)
      goto LABEL_6;
LABEL_8:
    if ((double)v8 * 0.416666667 > (double)a3)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_6:
  if ((double)v8 * 0.604166667 <= (double)a3)
LABEL_9:
    LODWORD(v8) = 2 * v8;
LABEL_10:
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = WTF::fastMalloc((WTF *)((32 * v9) | 0x10));
  bzero((void *)(v10 + 16), 32 * v9);
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  if (a3)
  {
    v11 = a2 + 32 * a3;
    do
    {
      WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::add<WGSL::ConstantValue const&>(a1, (const WTF::StringImpl **)a2, (unsigned int *)(a2 + 8), (uint64_t)v13);
      a2 += 32;
    }
    while (a2 != v11);
  }
  return a1;
}

uint64_t WGSL::constantInsertBits(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_0::operator()<WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue,WGSL::ConstantValue>(uint64_t result, _DWORD *a2, _DWORD *a3, unsigned int a4, int a5, unsigned int a6, int a7)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL8 v13;
  char v14;
  char v15;

  if (a5 != 4 || (a4 >= 0x20 ? (v7 = 32) : (v7 = a4), a7 != 4))
  {
LABEL_23:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(v13);
  }
  v8 = result;
  v9 = 32 - v7;
  if (32 - v7 >= a6)
    v9 = a6;
  if (v9 != 32)
  {
    if (!v9)
    {
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 16) = -1;
      v10 = a2[4];
      if ((_DWORD)v10 != -1)
      {
        result = ((uint64_t (*)(char *, uint64_t, _DWORD *))off_1E0FD7D20[v10])(&v14, result, a2);
        *(_DWORD *)(v8 + 16) = v10;
      }
      return result;
    }
    if (a2)
    {
      v12 = a2[4];
      if (v12 == 3)
      {
        if (a3[4] == 3)
        {
          *(_DWORD *)result = ((*a3 & ~(-1 << v9)) << v7) | *a2 & ~(~(-1 << v9) << v7);
          *(_DWORD *)(result + 16) = 3;
          return result;
        }
        goto LABEL_23;
      }
    }
    else
    {
      v12 = MEMORY[0x10];
    }
    if (v12 == 4 && a3[4] == 4)
    {
      *(_DWORD *)result = ((*a3 & ~(-1 << v9)) << v7) | *a2 & ~(~(-1 << v9) << v7);
      *(_DWORD *)(result + 16) = 4;
      return result;
    }
    goto LABEL_23;
  }
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 16) = -1;
  v11 = a3[4];
  if ((_DWORD)v11 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7D20[v11])(&v15, result);
    *(_DWORD *)(v8 + 16) = v11;
  }
  return result;
}

int8x16_t *WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral,WGSL::Type,char>(uint64_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  size_t v7;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t **v31;
  int8x16_t *result;
  _BOOL4 v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  uint16x8_t *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  int8x16_t *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint16x8_t *v54;
  int8x16_t *v55;
  __int16 v56;
  uint64_t v57;
  unint64_t v58;
  uint8x8_t *v59;
  uint16x8_t *v60;
  unint64_t v61;
  uint8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint8x8_t *v65;
  uint16x8_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  _BOOL8 v69;
  uint64_t *v70;
  __int8 *v71;
  unsigned int v72;
  uint64_t *v73;
  char v74;
  __int8 *__src;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t v93[22];
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;

  v93[20] = *MEMORY[0x1E0C80C00];
  if (a3)
    v7 = a3 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F3760);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v93);
  v77 = v93;
  v78 = v93;
  v79 = v93;
  v80 = v93;
  v81 = v93;
  v82 = v93;
  v83 = v93;
  v84 = v93;
  v85 = v93;
  v86 = v93;
  v87 = v93;
  v88 = v93;
  v89 = v93;
  v90 = v93;
  v91 = v93;
  v15 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v15 == -1)
    goto LABEL_143;
  v92 = &v77;
  ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v92, a4);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v93);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v93);
  v16 = *(_QWORD *)(a5 + 8);
  v17 = v16 != 0;
  v18 = v16 - 1;
  if (v17)
    v19 = v18;
  else
    v19 = 0;
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F3780);
  }
  __src = *(__int8 **)a5;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v93);
  v77 = v93;
  v78 = v93;
  v79 = v93;
  v80 = v93;
  v81 = v93;
  v82 = v93;
  v83 = v93;
  v84 = v93;
  v85 = v93;
  v86 = v93;
  v87 = v93;
  v88 = v93;
  v89 = v93;
  v90 = v93;
  v91 = v93;
  v20 = *(unsigned int *)(a6 + 48);
  if ((_DWORD)v20 == -1)
  {
LABEL_143:
    v69 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>((int8x16_t *)v69, v70, v71, v72, v73, v74);
  }
  v92 = &v77;
  ((void (*)(uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v92, a6);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v93);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v93);
  v22 = (uint64_t *)v92;
  if (v76)
  {
    v23 = *(_DWORD *)(v76 + 4);
    v24 = *a7;
    if (v92)
    {
LABEL_13:
      v25 = *((_DWORD *)v92 + 1);
      if ((v25 & 0x80000000) == 0)
      {
        v21 = __OFADD__(v25, 1);
        v26 = v25 + 1;
        if (!v21)
          goto LABEL_19;
      }
LABEL_27:
      *a1 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    v23 = 0;
    v24 = *a7;
    if (v92)
      goto LABEL_13;
  }
  v26 = 1;
  if (v21)
    goto LABEL_27;
LABEL_19:
  v21 = __OFADD__((_DWORD)v19, v26);
  v27 = v19 + v26;
  v28 = v21;
  if (v23 < 0)
    goto LABEL_27;
  if ((v28 & 1) != 0)
    goto LABEL_27;
  v21 = __OFADD__(v23, v27);
  v29 = v23 + v27;
  if (v21)
    goto LABEL_27;
  v30 = (v7 + v29);
  if (__OFADD__((_DWORD)v7, v29))
    goto LABEL_27;
  if (v76 && (*(_BYTE *)(v76 + 16) & 4) == 0)
  {
    v33 = 0;
LABEL_46:
    *(_DWORD *)v76 += 2;
    goto LABEL_47;
  }
  v33 = !v92 || ((_BYTE)v92[2] & 4) != 0;
  if (v76)
    goto LABEL_46;
LABEL_47:
  if (v22)
    *(_DWORD *)v22 += 2;
  if (v33)
  {
    if ((_DWORD)v30)
    {
      if ((v30 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
        v34 = v93[0];
        if (!v93[0])
          goto LABEL_116;
        v35 = (_BYTE *)(v93[0] + 20);
        *(_DWORD *)v93[0] = 2;
        *(_DWORD *)(v34 + 4) = v30;
        *(_QWORD *)(v34 + 8) = v34 + 20;
        *(_DWORD *)(v34 + 16) = 4;
        if (v76)
          *(_DWORD *)v76 += 2;
        if (v22)
          *(_DWORD *)v22 += 2;
        if ((_DWORD)v7)
        {
          if ((_DWORD)v7 == 1)
            *v35 = a2->i8[0];
          else
            memcpy((void *)(v34 + 20), a2, v7);
        }
        v47 = (int8x16_t *)&v35[v7];
        if (v76)
          *(_DWORD *)v76 += 2;
        v93[0] = v76;
        if (v22)
        {
          *(_DWORD *)v22 += 2;
          v77 = v22;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v47, v93, __src, v19, (uint64_t *)&v77, v24);
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy();
            if (!v76)
              goto LABEL_84;
          }
          else
          {
            *(_DWORD *)v22 -= 2;
            if (!v76)
              goto LABEL_84;
          }
        }
        else
        {
          v77 = 0;
          WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v47, v93, __src, v19, (uint64_t *)&v77, v24);
          if (!v76)
            goto LABEL_84;
        }
        if (*(_DWORD *)v76 == 2)
          WTF::StringImpl::destroy();
        else
          *(_DWORD *)v76 -= 2;
LABEL_84:
        if (!v22)
          goto LABEL_112;
        v48 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::destroy();
          goto LABEL_112;
        }
        goto LABEL_111;
      }
LABEL_62:
      v34 = 0;
      goto LABEL_116;
    }
LABEL_63:
    v34 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_116;
  }
  if (!(_DWORD)v30)
    goto LABEL_63;
  if (v30 > 0x7FFFFFEF)
    goto LABEL_62;
  WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20));
  v34 = v93[0];
  if (!v93[0])
    goto LABEL_116;
  v36 = v93[0] + 20;
  *(_DWORD *)v93[0] = 2;
  *(_DWORD *)(v34 + 4) = v30;
  *(_QWORD *)(v34 + 8) = v34 + 20;
  *(_DWORD *)(v34 + 16) = 0;
  if (v76)
    *(_DWORD *)v76 += 2;
  if (v22)
    *(_DWORD *)v22 += 2;
  v37 = (uint16x8_t *)(v36 + 2 * v7);
  if ((v7 & 0xFFFFFFC0) != 0)
  {
    v38 = v36 + 2 * (v7 & 0xFFFFFFC0);
    v39 = 0uLL;
    v40 = (unint64_t)__src;
    do
    {
      v94.val[0] = *a2;
      v41 = a2[1];
      v95.val[0] = a2[2];
      v42 = a2[3];
      a2 += 4;
      v43 = v42;
      v95.val[1] = 0uLL;
      v96.val[0] = v41;
      v94.val[1] = 0uLL;
      v44 = (char *)v36;
      vst2q_s8(v44, v94);
      v44 += 32;
      v96.val[1] = 0uLL;
      vst2q_s8(v44, v96);
      v45 = (char *)(v36 + 64);
      vst2q_s8(v45, v95);
      v46 = (char *)(v36 + 96);
      vst2q_s8(v46, *(int8x16x2_t *)(&v39 - 1));
      v36 += 128;
    }
    while (v36 != v38);
    v36 = v38;
  }
  else
  {
    v40 = (unint64_t)__src;
  }
  if ((uint16x8_t *)v36 != v37)
  {
    v49 = v34 + 2 * a3 - v36;
    v50 = -2;
    if (a3)
      v51 = -2;
    else
      v51 = 0;
    v52 = v49 + v51 + 18;
    if (v52 < 0xE)
      goto LABEL_97;
    if (!a3)
      v50 = 0;
    v53 = v49 + v50 + 18;
    if (v36 < (unint64_t)a2->u64 + (v53 >> 1) + 1
      && (unint64_t)a2 < (v53 & 0xFFFFFFFFFFFFFFFELL) + v36 + 2)
    {
LABEL_97:
      v54 = (uint16x8_t *)v36;
      v55 = a2;
      goto LABEL_98;
    }
    v57 = (v52 >> 1) + 1;
    if (v52 >= 0x3E)
    {
      v58 = v57 & 0xFFFFFFFFFFFFFFE0;
      v59 = (uint8x8_t *)&a2[1];
      v60 = (uint16x8_t *)(v36 + 32);
      v61 = v57 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v62 = *(uint8x16_t *)v59[-2].i8;
        v63 = vmovl_u8(*v59);
        v64 = vmovl_high_u8(*(uint8x16_t *)v59->i8);
        v60[-2] = vmovl_u8(*(uint8x8_t *)v62.i8);
        v60[-1] = vmovl_high_u8(v62);
        *v60 = v63;
        v60[1] = v64;
        v60 += 4;
        v59 += 4;
        v61 -= 32;
      }
      while (v61);
      if (v57 == v58)
        goto LABEL_99;
      if ((v57 & 0x18) == 0)
      {
        v55 = (int8x16_t *)((char *)a2 + v58);
        v54 = (uint16x8_t *)(v36 + 2 * v58);
        do
        {
LABEL_98:
          v56 = v55->u8[0];
          v55 = (int8x16_t *)((char *)v55 + 1);
          v54->i16[0] = v56;
          v54 = (uint16x8_t *)((char *)v54 + 2);
        }
        while (v54 != v37);
        goto LABEL_99;
      }
    }
    else
    {
      v58 = 0;
    }
    v54 = (uint16x8_t *)(v36 + 2 * (v57 & 0xFFFFFFFFFFFFFFF8));
    v55 = (int8x16_t *)((char *)a2 + (v57 & 0xFFFFFFFFFFFFFFF8));
    v65 = (uint8x8_t *)&a2->i8[v58];
    v66 = (uint16x8_t *)(v36 + 2 * v58);
    v67 = v58 - (v57 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v68 = *v65++;
      *v66++ = vmovl_u8(v68);
      v67 += 8;
    }
    while (v67);
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_98;
  }
LABEL_99:
  if (v76)
    *(_DWORD *)v76 += 2;
  v93[0] = v76;
  if (v22)
  {
    *(_DWORD *)v22 += 2;
    v77 = v22;
    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v37, v93, v40, v19, (uint64_t *)&v77, v24);
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy();
      if (!v76)
        goto LABEL_109;
    }
    else
    {
      *(_DWORD *)v22 -= 2;
      if (!v76)
        goto LABEL_109;
    }
  }
  else
  {
    v77 = 0;
    WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v37, v93, v40, v19, (uint64_t *)&v77, v24);
    if (!v76)
      goto LABEL_109;
  }
  if (*(_DWORD *)v76 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v76 -= 2;
LABEL_109:
  if (!v22)
    goto LABEL_112;
  v48 = *(_DWORD *)v22 - 2;
  if (*(_DWORD *)v22 != 2)
  {
LABEL_111:
    *(_DWORD *)v22 = v48;
LABEL_112:
    if (v76)
      goto LABEL_113;
    goto LABEL_116;
  }
  WTF::StringImpl::destroy();
  if (v76)
  {
LABEL_113:
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v76 -= 2;
  }
LABEL_116:
  *a1 = v34;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy();
    else
      *(_DWORD *)v76 -= 2;
  }
LABEL_28:
  v31 = v92;
  v92 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::destroy();
      result = (int8x16_t *)v76;
      if (!v76)
        return result;
      goto LABEL_34;
    }
    *(_DWORD *)v31 -= 2;
  }
  result = (int8x16_t *)v76;
  if (!v76)
    return result;
LABEL_34:
  if (result->i32[0] == 2)
    return (int8x16_t *)WTF::StringImpl::destroy();
  result->i32[0] -= 2;
  return result;
}

int8x16_t *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(int8x16_t *__dst, uint64_t *a2, __int8 *__src, unsigned int a4, uint64_t *a5, char a6)
{
  int8x16_t *v10;
  uint64_t v11;
  const char *v13;
  size_t v14;
  int8x16_t *v15;
  int8x16_t *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int8x16_t *v22;
  const char *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  uint64_t v28;
  __int8 *v29;
  size_t v30;
  int8x16_t *v31;
  __int8 *v32;
  unint64_t v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  int8x16_t *v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  __int8 *v40;
  int8x16_t *v41;
  char v42;
  int v43;
  int v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int16x8_t *v52;
  int8x8_t *v53;
  unint64_t v54;
  int16x8_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t *v63;
  int8x8_t *v64;
  unint64_t v65;
  int16x8_t v66;

  v10 = __dst;
  v11 = *a2;
  if (!*a2)
  {
LABEL_27:
    v25 = 0;
    v26 = *a5;
    if (!v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  v13 = *(const char **)(v11 + 8);
  v14 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    v15 = (int8x16_t *)((char *)__dst + v14);
    if (v14 < 0x10)
    {
      v16 = __dst;
      if (__dst == v15)
        goto LABEL_24;
    }
    else
    {
      v16 = (int8x16_t *)((char *)__dst + (v14 & 0xFFFFFFF0));
      v17 = (unsigned __int128 *)__dst;
      do
      {
        v18 = (unsigned __int128)vld2q_s8(v13);
        v13 += 32;
        *v17++ = v18;
      }
      while (v17 != (unsigned __int128 *)v16);
      if (v16 == v15)
        goto LABEL_24;
    }
    v19 = &__dst->i8[v14] - (__int8 *)v16;
    if (v19 < 8 || (v16 < (int8x16_t *)&v13[2 * v19] ? (v20 = v13 >= &__dst->i8[v14]) : (v20 = 1), !v20))
    {
      v22 = v16;
      v23 = v13;
      goto LABEL_21;
    }
    if (v19 >= 0x20)
    {
      v21 = v19 & 0xFFFFFFFFFFFFFFE0;
      v56 = (int8x16_t *)(v13 + 32);
      v57 = v16 + 1;
      v58 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v60 = v56[-2];
        v59 = v56[-1];
        v62 = *v56;
        v61 = v56[1];
        v56 += 4;
        v57[-1] = vuzp1q_s8(v60, v59);
        *v57 = vuzp1q_s8(v62, v61);
        v57 += 2;
        v58 -= 32;
      }
      while (v58);
      if (v19 == v21)
        goto LABEL_24;
      if ((v19 & 0x18) == 0)
      {
        v23 = &v13[2 * v21];
        v22 = (int8x16_t *)((char *)v16 + v21);
        goto LABEL_21;
      }
    }
    else
    {
      v21 = 0;
    }
    v22 = (int8x16_t *)((char *)v16 + (v19 & 0xFFFFFFFFFFFFFFF8));
    v23 = &v13[2 * (v19 & 0xFFFFFFFFFFFFFFF8)];
    v63 = (int16x8_t *)&v13[2 * v21];
    v64 = (int8x8_t *)&v16->i8[v21];
    v65 = v21 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v66 = *v63++;
      *v64++ = vmovn_s16(v66);
      v65 += 8;
    }
    while (v65);
    if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_24;
    do
    {
LABEL_21:
      v24 = *v23;
      v23 += 2;
      v22->i8[0] = v24;
      v22 = (int8x16_t *)((char *)v22 + 1);
    }
    while (v22 != v15);
    goto LABEL_24;
  }
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 == 1)
      __dst->i8[0] = *v13;
    else
      __dst = (int8x16_t *)memcpy(__dst, v13, v14);
  }
LABEL_24:
  if (!*a2)
    goto LABEL_27;
  v25 = *(unsigned int *)(*a2 + 4);
  v26 = *a5;
  if (v26)
LABEL_28:
    *(_DWORD *)v26 += 2;
LABEL_29:
  v27 = &v10->i8[v25];
  if (a4)
  {
    if (a4 == 1)
      *v27 = *__src;
    else
      __dst = (int8x16_t *)memcpy(&v10->i8[v25], __src, a4);
  }
  v28 = a4;
  v29 = &v27[a4];
  if (!v26)
  {
    *v29 = a6;
    return __dst;
  }
  v30 = *(unsigned int *)(v26 + 4);
  *(_DWORD *)v26 += 2;
  v31 = *(int8x16_t **)(v26 + 8);
  if ((*(_BYTE *)(v26 + 16) & 4) != 0)
  {
    if ((_DWORD)v30)
    {
      if ((_DWORD)v30 == 1)
        *v29 = v31->i8[0];
      else
        __dst = (int8x16_t *)memcpy(v29, v31, v30);
    }
    goto LABEL_56;
  }
  v32 = &v29[v30];
  if (v30 >= 0x10)
  {
    v33 = (unint64_t)&v29[v30 & 0xFFFFFFF0];
    v34 = (unsigned __int128 *)v29;
    do
    {
      v35 = (unsigned __int128)vld2q_s8(v31->i8);
      v31 += 2;
      *v34++ = v35;
    }
    while (v34 != (unsigned __int128 *)v33);
    if ((__int8 *)v33 == v32)
      goto LABEL_56;
LABEL_44:
    v36 = (int8x16_t *)((char *)v10 + v25 + v30 + v28);
    v37 = (unint64_t)v36 - v33;
    if ((unint64_t)v36 - v33 < 8
      || (v33 < (unint64_t)v31 + 2 * v37 ? (v38 = v31 >= v36) : (v38 = 1), !v38))
    {
      v40 = (__int8 *)v33;
      v41 = v31;
      goto LABEL_53;
    }
    if (v37 >= 0x20)
    {
      v39 = v37 & 0xFFFFFFFFFFFFFFE0;
      v45 = v31 + 2;
      v46 = (int8x16_t *)(v33 + 16);
      v47 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v49 = v45[-2];
        v48 = v45[-1];
        v51 = *v45;
        v50 = v45[1];
        v45 += 4;
        v46[-1] = vuzp1q_s8(v49, v48);
        *v46 = vuzp1q_s8(v51, v50);
        v46 += 2;
        v47 -= 32;
      }
      while (v47);
      if (v37 == v39)
        goto LABEL_56;
      if ((v37 & 0x18) == 0)
      {
        v41 = (int8x16_t *)((char *)v31 + 2 * v39);
        v40 = (__int8 *)(v33 + v39);
        do
        {
LABEL_53:
          v42 = v41->i8[0];
          v41 = (int8x16_t *)((char *)v41 + 2);
          *v40++ = v42;
        }
        while (v40 != v32);
        goto LABEL_56;
      }
    }
    else
    {
      v39 = 0;
    }
    v40 = (__int8 *)(v33 + (v37 & 0xFFFFFFFFFFFFFFF8));
    v41 = (int8x16_t *)((char *)v31 + 2 * (v37 & 0xFFFFFFFFFFFFFFF8));
    v52 = (int16x8_t *)((char *)v31 + 2 * v39);
    v53 = (int8x8_t *)(v33 + v39);
    v54 = v39 - (v37 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v55 = *v52++;
      *v53++ = vmovn_s16(v55);
      v54 += 8;
    }
    while (v54);
    if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
    goto LABEL_53;
  }
  v33 = (unint64_t)v29;
  if (v29 != v32)
    goto LABEL_44;
LABEL_56:
  v29[*(unsigned int *)(v26 + 4)] = a6;
  v43 = *(_DWORD *)v26 - 2;
  if (*(_DWORD *)v26 == 2)
  {
    __dst = (int8x16_t *)WTF::StringImpl::destroy();
    v44 = *(_DWORD *)v26 - 2;
    if (*(_DWORD *)v26 != 2)
      goto LABEL_58;
  }
  else
  {
    *(_DWORD *)v26 = v43;
    v44 = v43 - 2;
    if (v44)
    {
LABEL_58:
      *(_DWORD *)v26 = v44;
      return __dst;
    }
  }
  return (int8x16_t *)WTF::StringImpl::destroy();
}

uint16x8_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(uint16x8_t *__dst, uint64_t *a2, unint64_t a3, unsigned int a4, uint64_t *a5, char a6)
{
  uint16x8_t *v10;
  uint64_t v11;
  _OWORD *v13;
  uint64_t v14;
  uint16x8_t *v15;
  uint16x8_t *v16;
  __int128 v17;
  char *v18;
  int8x16_t v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint16x8_t *v29;
  unsigned __int8 *v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;
  _WORD *v34;
  unint64_t v35;
  __int128 v36;
  int8x16_t v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  _WORD *v44;
  unsigned __int8 *v45;
  __int16 v46;
  uint64_t v47;
  int8x16_t *v48;
  int v49;
  int v50;
  _WORD *v51;
  unint64_t v52;
  __int128 v53;
  char *v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  _WORD *v65;
  int8x16_t *v66;
  __int16 v67;
  uint64_t v68;
  unint64_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint8x8_t *v76;
  uint16x8_t *v77;
  unint64_t v78;
  uint8x8_t v79;
  uint8x8_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint8x16_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint8x8_t *v86;
  uint16x8_t *v87;
  unint64_t v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  uint16x8_t *v91;
  unint64_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint8x8_t *v96;
  uint16x8_t *v97;
  unint64_t v98;
  uint8x8_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;

  v10 = __dst;
  v11 = *a2;
  if (!*a2)
    goto LABEL_26;
  v13 = *(_OWORD **)(v11 + 8);
  v14 = *(unsigned int *)(v11 + 4);
  if ((*(_BYTE *)(v11 + 16) & 4) == 0)
  {
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
        __dst->i16[0] = *(_WORD *)v13;
      else
        __dst = (uint16x8_t *)memcpy(__dst, v13, 2 * v14);
    }
    goto LABEL_24;
  }
  v15 = (uint16x8_t *)((char *)__dst + 2 * v14);
  if (v14 < 0x40)
  {
    v16 = __dst;
    if (__dst == v15)
      goto LABEL_24;
LABEL_12:
    v25 = (char *)__dst + 2 * v14 - (char *)v16 - 2;
    if (v25 < 0xE
      || (v16 < (uint16x8_t *)((char *)v13 + (v25 >> 1) + 1)
        ? (v26 = v13 >= (_OWORD *)((char *)&v16->i16[1] + (v25 & 0xFFFFFFFFFFFFFFFELL)))
        : (v26 = 1),
          !v26))
    {
      v29 = v16;
      v30 = (unsigned __int8 *)v13;
      goto LABEL_21;
    }
    v27 = (v25 >> 1) + 1;
    if (v25 >= 0x3E)
    {
      v28 = v27 & 0xFFFFFFFFFFFFFFE0;
      v90 = (uint8x8_t *)(v13 + 1);
      v91 = v16 + 2;
      v92 = v27 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v93 = *(uint8x16_t *)v90[-2].i8;
        v94 = vmovl_u8(*v90);
        v95 = vmovl_high_u8(*(uint8x16_t *)v90->i8);
        v91[-2] = vmovl_u8(*(uint8x8_t *)v93.i8);
        v91[-1] = vmovl_high_u8(v93);
        *v91 = v94;
        v91[1] = v95;
        v91 += 4;
        v90 += 4;
        v92 -= 32;
      }
      while (v92);
      if (v27 == v28)
        goto LABEL_24;
      if ((v27 & 0x18) == 0)
      {
        v30 = (unsigned __int8 *)v13 + v28;
        v29 = (uint16x8_t *)((char *)v16 + 2 * v28);
        goto LABEL_21;
      }
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint16x8_t *)((char *)v16 + 2 * (v27 & 0xFFFFFFFFFFFFFFF8));
    v30 = (unsigned __int8 *)v13 + (v27 & 0xFFFFFFFFFFFFFFF8);
    v96 = (uint8x8_t *)((char *)v13 + v28);
    v97 = (uint16x8_t *)((char *)v16 + 2 * v28);
    v98 = v28 - (v27 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v99 = *v96++;
      *v97++ = vmovl_u8(v99);
      v98 += 8;
    }
    while (v98);
    if (v27 == (v27 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_24;
    do
    {
LABEL_21:
      v31 = *v30++;
      v29->i16[0] = v31;
      v29 = (uint16x8_t *)((char *)v29 + 2);
    }
    while (v29 != v15);
    goto LABEL_24;
  }
  v16 = (uint16x8_t *)((char *)__dst + 2 * (v14 & 0xFFFFFFC0));
  v17 = 0uLL;
  v18 = (char *)__dst;
  do
  {
    v100.val[0] = (int8x16_t)*v13;
    v19 = *((int8x16_t *)v13 + 1);
    v103.val[0] = (int8x16_t)v13[2];
    v20 = v13[3];
    v13 += 4;
    v21 = v20;
    v103.val[1] = 0uLL;
    v106.val[0] = v19;
    v100.val[1] = 0uLL;
    v22 = v18;
    vst2q_s8(v22, v100);
    v22 += 32;
    v106.val[1] = 0uLL;
    vst2q_s8(v22, v106);
    v23 = v18 + 64;
    vst2q_s8(v23, v103);
    v24 = v18 + 96;
    vst2q_s8(v24, *(int8x16x2_t *)(&v17 - 1));
    v18 += 128;
  }
  while (v18 != (char *)v16);
  if (v16 != v15)
    goto LABEL_12;
LABEL_24:
  v11 = *a2;
  if (*a2)
    v11 = *(unsigned int *)(v11 + 4);
LABEL_26:
  v32 = (unint64_t)v10 + 2 * v11;
  v33 = *a5;
  if (v33)
    *(_DWORD *)v33 += 2;
  v34 = (_WORD *)(v32 + 2 * a4);
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v35 = v32 + 2 * (a4 & 0xFFFFFFC0);
    v36 = 0uLL;
    do
    {
      v101.val[0] = *(int8x16_t *)a3;
      v37 = *(int8x16_t *)(a3 + 16);
      v104.val[0] = *(int8x16_t *)(a3 + 32);
      v38 = *(_OWORD *)(a3 + 48);
      a3 += 64;
      v39 = v38;
      v104.val[1] = 0uLL;
      v107.val[0] = v37;
      v101.val[1] = 0uLL;
      v40 = (char *)v32;
      vst2q_s8(v40, v101);
      v40 += 32;
      v107.val[1] = 0uLL;
      vst2q_s8(v40, v107);
      v41 = (char *)(v32 + 64);
      vst2q_s8(v41, v104);
      v42 = (char *)(v32 + 96);
      vst2q_s8(v42, *(int8x16x2_t *)(&v36 - 1));
      v32 += 128;
    }
    while (v32 != v35);
    v32 = v35;
  }
  if ((_WORD *)v32 != v34)
  {
    v43 = (unint64_t)v10->u64 + 2 * v11 + 2 * a4 - v32 - 2;
    if (v43 < 0xE || v32 < a3 + (v43 >> 1) + 1 && a3 < (v43 & 0xFFFFFFFFFFFFFFFELL) + v32 + 2)
    {
      v44 = (_WORD *)v32;
      v45 = (unsigned __int8 *)a3;
      goto LABEL_37;
    }
    v68 = (v43 >> 1) + 1;
    if (v43 >= 0x3E)
    {
      v69 = v68 & 0xFFFFFFFFFFFFFFE0;
      v70 = (uint8x8_t *)(a3 + 16);
      v71 = (uint16x8_t *)(v32 + 32);
      v72 = v68 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v73 = *(uint8x16_t *)v70[-2].i8;
        v74 = vmovl_u8(*v70);
        v75 = vmovl_high_u8(*(uint8x16_t *)v70->i8);
        v71[-2] = vmovl_u8(*(uint8x8_t *)v73.i8);
        v71[-1] = vmovl_high_u8(v73);
        *v71 = v74;
        v71[1] = v75;
        v71 += 4;
        v70 += 4;
        v72 -= 32;
      }
      while (v72);
      if (v68 == v69)
        goto LABEL_38;
      if ((v68 & 0x18) == 0)
      {
        v45 = (unsigned __int8 *)(a3 + v69);
        v44 = (_WORD *)(v32 + 2 * v69);
        do
        {
LABEL_37:
          v46 = *v45++;
          *v44++ = v46;
        }
        while (v44 != v34);
        goto LABEL_38;
      }
    }
    else
    {
      v69 = 0;
    }
    v44 = (_WORD *)(v32 + 2 * (v68 & 0xFFFFFFFFFFFFFFF8));
    v45 = (unsigned __int8 *)(a3 + (v68 & 0xFFFFFFFFFFFFFFF8));
    v76 = (uint8x8_t *)(a3 + v69);
    v77 = (uint16x8_t *)(v32 + 2 * v69);
    v78 = v69 - (v68 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v79 = *v76++;
      *v77++ = vmovl_u8(v79);
      v78 += 8;
    }
    while (v78);
    if (v68 != (v68 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_37;
  }
LABEL_38:
  if (v33)
  {
    v47 = *(unsigned int *)(v33 + 4);
    *(_DWORD *)v33 += 2;
    v48 = *(int8x16_t **)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 4) == 0)
    {
      if (!(_DWORD)v47)
        goto LABEL_43;
      if ((_DWORD)v47 == 1)
      {
        *v34 = v48->i16[0];
        LODWORD(v47) = 1;
LABEL_43:
        v34[v47] = a6;
        v49 = *(_DWORD *)v33 - 2;
        if (*(_DWORD *)v33 != 2)
          goto LABEL_44;
        goto LABEL_65;
      }
      __dst = (uint16x8_t *)memcpy(v34, v48, 2 * v47);
LABEL_64:
      v34[*(unsigned int *)(v33 + 4)] = a6;
      v49 = *(_DWORD *)v33 - 2;
      if (*(_DWORD *)v33 != 2)
      {
LABEL_44:
        *(_DWORD *)v33 = v49;
        v50 = v49 - 2;
        if (v50)
        {
LABEL_45:
          *(_DWORD *)v33 = v50;
          return __dst;
        }
        return (uint16x8_t *)WTF::StringImpl::destroy();
      }
LABEL_65:
      __dst = (uint16x8_t *)WTF::StringImpl::destroy();
      v50 = *(_DWORD *)v33 - 2;
      if (*(_DWORD *)v33 != 2)
        goto LABEL_45;
      return (uint16x8_t *)WTF::StringImpl::destroy();
    }
    v51 = &v34[v47];
    if (v47 < 0x40)
    {
      v52 = (unint64_t)v34;
      if (v34 == v51)
        goto LABEL_64;
    }
    else
    {
      v52 = (unint64_t)&v34[v47 & 0xFFFFFFC0];
      v53 = 0uLL;
      v54 = (char *)v34;
      do
      {
        v102.val[0] = *v48;
        v55 = v48[1];
        v105.val[0] = v48[2];
        v56 = v48[3];
        v48 += 4;
        v57 = v56;
        v105.val[1] = 0uLL;
        v108.val[0] = v55;
        v102.val[1] = 0uLL;
        v58 = v54;
        vst2q_s8(v58, v102);
        v58 += 32;
        v108.val[1] = 0uLL;
        vst2q_s8(v58, v108);
        v59 = v54 + 64;
        vst2q_s8(v59, v105);
        v60 = v54 + 96;
        vst2q_s8(v60, *(int8x16x2_t *)(&v53 - 1));
        v54 += 128;
      }
      while (v54 != (char *)v52);
      if ((_WORD *)v52 == v51)
        goto LABEL_64;
    }
    v61 = (unint64_t)v10->u64 + 2 * v11 + 2 * v47 + 2 * a4 - v52 - 2;
    if (v61 < 0xE
      || (v52 < (unint64_t)v48->u64 + (v61 >> 1) + 1
        ? (v62 = (unint64_t)v48 >= (v61 & 0xFFFFFFFFFFFFFFFELL) + v52 + 2)
        : (v62 = 1),
          !v62))
    {
      v65 = (_WORD *)v52;
      v66 = v48;
      goto LABEL_61;
    }
    v63 = (v61 >> 1) + 1;
    if (v61 >= 0x3E)
    {
      v64 = v63 & 0xFFFFFFFFFFFFFFE0;
      v80 = (uint8x8_t *)&v48[1];
      v81 = (uint16x8_t *)(v52 + 32);
      v82 = v63 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v83 = *(uint8x16_t *)v80[-2].i8;
        v84 = vmovl_u8(*v80);
        v85 = vmovl_high_u8(*(uint8x16_t *)v80->i8);
        v81[-2] = vmovl_u8(*(uint8x8_t *)v83.i8);
        v81[-1] = vmovl_high_u8(v83);
        *v81 = v84;
        v81[1] = v85;
        v81 += 4;
        v80 += 4;
        v82 -= 32;
      }
      while (v82);
      if (v63 == v64)
        goto LABEL_64;
      if ((v63 & 0x18) == 0)
      {
        v66 = (int8x16_t *)((char *)v48 + v64);
        v65 = (_WORD *)(v52 + 2 * v64);
        goto LABEL_61;
      }
    }
    else
    {
      v64 = 0;
    }
    v65 = (_WORD *)(v52 + 2 * (v63 & 0xFFFFFFFFFFFFFFF8));
    v66 = (int8x16_t *)((char *)v48 + (v63 & 0xFFFFFFFFFFFFFFF8));
    v86 = (uint8x8_t *)&v48->i8[v64];
    v87 = (uint16x8_t *)(v52 + 2 * v64);
    v88 = v64 - (v63 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v89 = *v86++;
      *v87++ = vmovl_u8(v89);
      v88 += 8;
    }
    while (v88);
    if (v63 == (v63 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_64;
    do
    {
LABEL_61:
      v67 = v66->u8[0];
      v66 = (int8x16_t *)((char *)v66 + 1);
      *v65++ = v67;
    }
    while (v65 != v51);
    goto LABEL_64;
  }
  *v34 = a6;
  return __dst;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral &>(_DWORD *result, __int128 *a2, _BYTE *a3, uint64_t a4)
{
  size_t v4;
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  __int128 v15;

  if (a4)
    v4 = a4 - 1;
  else
    v4 = 0;
  if (v4 >> 31)
    goto LABEL_18;
  v6 = result;
  if (!(_DWORD)v4)
  {
    v8 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v14 = v8;
    v15 = *a2;
    v9 = result[33];
    if ((_DWORD)v9 == result[32])
      goto LABEL_11;
    goto LABEL_16;
  }
  WTF::tryFastCompactMalloc((WTF *)(v4 + 20));
  v8 = v14;
  if (!v14)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x1825F4370);
  }
  result = v14 + 5;
  *v14 = 2;
  v8[1] = v4;
  *((_QWORD *)v8 + 1) = v8 + 5;
  v8[4] = 4;
  if ((_DWORD)v4 != 1)
  {
    result = memcpy(result, a3, v4);
    v14 = v8;
    v15 = *a2;
    v9 = v6[33];
    if ((_DWORD)v9 == v6[32])
      goto LABEL_11;
LABEL_16:
    v13 = *((_QWORD *)v6 + 15) + 24 * v9;
    *(_QWORD *)v13 = v8;
    *(_OWORD *)(v13 + 8) = v15;
    ++v6[33];
    return result;
  }
  *(_BYTE *)result = *a3;
  v14 = v8;
  v15 = *a2;
  v9 = v6[33];
  if ((_DWORD)v9 != v6[32])
    goto LABEL_16;
LABEL_11:
  v10 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v6 + 30), v9 + 1, (unint64_t)&v14);
  v11 = *((_QWORD *)v6 + 15) + 24 * v6[33];
  v12 = *(_QWORD *)v10;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)v11 = v12;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
  result = v14;
  ++v6[33];
  v14 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

void WGSL::TypeChecker::typeError<char &,WGSL::Type &,WTF::ASCIILiteral &>(uint64_t a1, _OWORD *a2, char a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  char v19;
  _BYTE v20[48];
  unsigned int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20[0] = 0;
  v21 = -1;
  v9 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v9 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD7E68[v9])(v18, v20, a4);
    v21 = v9;
  }
  *(_OWORD *)v18 = *a5;
  WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(&v17, a3, (uint64_t)v20, (uint64_t)v18);
  if (!v17)
  {
    __break(0xC471u);
    return;
  }
  *(_QWORD *)v18 = v17;
  *(_OWORD *)&v18[8] = *a2;
  v10 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v10 != *(_DWORD *)(a1 + 128))
  {
    v16 = *(_QWORD *)(a1 + 120) + 24 * v10;
    *(_QWORD *)v16 = v17;
    *(_OWORD *)(v16 + 8) = *(_OWORD *)&v18[8];
    ++*(_DWORD *)(a1 + 132);
    *(_QWORD *)v18 = 0;
LABEL_10:
    v15 = v21;
    if (v21 == -1)
      return;
    goto LABEL_11;
  }
  v11 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v10 + 1, (unint64_t)v18);
  v12 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v13 = *(_QWORD *)v11;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)v12 = v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
  v14 = *(_DWORD **)v18;
  ++*(_DWORD *)(a1 + 132);
  *(_QWORD *)v18 = 0;
  if (!v14)
    goto LABEL_10;
  if (*v14 != 2)
  {
    *v14 -= 2;
    v15 = v21;
    if (v21 == -1)
      return;
    goto LABEL_11;
  }
  WTF::StringImpl::destroy();
  v15 = v21;
  if (v21 != -1)
LABEL_11:
    ((void (*)(char *, _BYTE *))off_1E0FD7DF0[v15])(&v19, v20);
}

void WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int8x16_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  int8x16_t *v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned __int128 v26;
  size_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  _BYTE *v37;
  int8x16_t *v38;
  char v39;
  _WORD *v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  int v51;
  int v52;
  unint64_t v53;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  _WORD *v57;
  int8x16_t *v58;
  __int16 v59;
  uint64_t v60;
  unint64_t v61;
  _WORD *v62;
  unint64_t v63;
  __int128 v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  _WORD *v72;
  int8x16_t *v73;
  __int16 v74;
  uint64_t v75;
  unint64_t v76;
  int8x16_t *v77;
  int8x16_t *v78;
  unint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int16x8_t *v84;
  int8x8_t *v85;
  unint64_t v86;
  int16x8_t v87;
  uint8x8_t *v88;
  uint16x8_t *v89;
  unint64_t v90;
  uint8x16_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint8x8_t *v94;
  uint16x8_t *v95;
  unint64_t v96;
  uint8x8_t v97;
  uint8x8_t *v98;
  uint16x8_t *v99;
  unint64_t v100;
  uint8x16_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  uint8x8_t *v104;
  uint16x8_t *v105;
  unint64_t v106;
  uint8x8_t v107;
  _QWORD v108[15];
  _QWORD *v109;
  _QWORD v110[21];
  int8x16x2_t v111;
  int8x16x2_t v112;
  int8x16x2_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;

  v110[20] = *MEMORY[0x1E0C80C00];
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v110);
  v108[0] = v110;
  v108[1] = v110;
  v108[2] = v110;
  v108[3] = v110;
  v108[4] = v110;
  v108[5] = v110;
  v108[6] = v110;
  v108[7] = v110;
  v108[8] = v110;
  v108[9] = v110;
  v108[10] = v110;
  v108[11] = v110;
  v108[12] = v110;
  v108[13] = v110;
  v108[14] = v110;
  v8 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v8 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v109 = v108;
  ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v109, a3);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v110);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v110);
  v9 = *(_QWORD *)(a4 + 8);
  v29 = v9 != 0;
  v10 = v9 - 1;
  if (v29)
    v11 = v10;
  else
    v11 = 0;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F4CACLL);
  }
  v12 = v108[0];
  if (v108[0])
  {
    v13 = *(_DWORD *)(v108[0] + 4);
    if (((v13 | v11) & 0x80000000) != 0)
      goto LABEL_13;
  }
  else
  {
    v13 = 0;
    if ((v11 & 0x80000000) != 0)
      goto LABEL_13;
  }
  v14 = __OFADD__(v13, (_DWORD)v11);
  v15 = v13 + v11;
  if (!v14)
  {
    v16 = (v15 + 1);
    if (!__OFADD__(v15, 1))
    {
      v17 = *(int8x16_t **)a4;
      if (v108[0])
      {
        v18 = *(_DWORD *)(v108[0] + 16);
        *(_DWORD *)v108[0] += 2;
        if ((v18 & 4) == 0)
        {
          if (!(_DWORD)v16)
          {
            v32 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            *a1 = v32;
            v19 = *(_DWORD *)v12 - 2;
            if (*(_DWORD *)v12 == 2)
              goto LABEL_73;
            goto LABEL_43;
          }
          if (v16 > 0x7FFFFFEF)
          {
            *a1 = 0;
            v19 = *(_DWORD *)v12 - 2;
            if (*(_DWORD *)v12 == 2)
              goto LABEL_73;
LABEL_43:
            *(_DWORD *)v12 = v19;
            v12 = v108[0];
            v108[0] = 0;
            if (!v12)
              return;
            goto LABEL_75;
          }
          WTF::tryFastCompactMalloc((WTF *)(2 * v16 + 20));
          v20 = v110[0];
          if (!v110[0])
            goto LABEL_72;
          *(_DWORD *)v110[0] = 2;
          *(_DWORD *)(v20 + 4) = v16;
          *(_WORD *)(v20 + 20) = a2;
          *(_QWORD *)(v20 + 8) = v20 + 20;
          *(_DWORD *)(v20 + 16) = 0;
          v33 = (_WORD *)(v20 + 22);
          v34 = *(unsigned int *)(v12 + 4);
          *(_DWORD *)v12 += 4;
          v35 = *(int8x16_t **)(v12 + 8);
          if ((*(_BYTE *)(v12 + 16) & 4) == 0)
          {
            if ((_DWORD)v34)
            {
              if ((_DWORD)v34 == 1)
                *v33 = v35->i16[0];
              else
                memcpy((void *)(v20 + 22), v35, 2 * v34);
            }
LABEL_96:
            v60 = *(unsigned int *)(v12 + 4);
            v61 = (unint64_t)&v33[v60];
            v62 = (_WORD *)(v61 + 2 * v11);
            if ((v11 & 0xFFFFFFC0) != 0)
            {
              v63 = v61 + 2 * (v11 & 0xFFFFFFC0);
              v64 = 0uLL;
              do
              {
                v112.val[0] = *v17;
                v65 = v17[1];
                v114.val[0] = v17[2];
                v66 = v17[3];
                v17 += 4;
                v67 = v66;
                v114.val[1] = 0uLL;
                v116.val[0] = v65;
                v112.val[1] = 0uLL;
                v68 = (char *)v61;
                vst2q_s8(v68, v112);
                v68 += 32;
                v116.val[1] = 0uLL;
                vst2q_s8(v68, v116);
                v69 = (char *)(v61 + 64);
                vst2q_s8(v69, v114);
                v70 = (char *)(v61 + 96);
                vst2q_s8(v70, *(int8x16x2_t *)(&v64 - 1));
                v61 += 128;
              }
              while (v61 != v63);
              v61 = v63;
            }
            if ((_WORD *)v61 != v62)
            {
              v71 = v20 + 2 * (v11 + v60) - v61 + 20;
              if (v71 < 0xE
                || v61 < (unint64_t)v17->u64 + (v71 >> 1) + 1
                && (unint64_t)v17 < (v71 & 0xFFFFFFFFFFFFFFFELL) + v61 + 2)
              {
                v72 = (_WORD *)v61;
                v73 = v17;
                goto LABEL_105;
              }
              v75 = (v71 >> 1) + 1;
              if (v71 >= 0x3E)
              {
                v76 = v75 & 0xFFFFFFFFFFFFFFE0;
                v88 = (uint8x8_t *)&v17[1];
                v89 = (uint16x8_t *)(v61 + 32);
                v90 = v75 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v91 = *(uint8x16_t *)v88[-2].i8;
                  v92 = vmovl_u8(*v88);
                  v93 = vmovl_high_u8(*(uint8x16_t *)v88->i8);
                  v89[-2] = vmovl_u8(*(uint8x8_t *)v91.i8);
                  v89[-1] = vmovl_high_u8(v91);
                  *v89 = v92;
                  v89[1] = v93;
                  v89 += 4;
                  v88 += 4;
                  v90 -= 32;
                }
                while (v90);
                if (v75 == v76)
                  goto LABEL_69;
                if ((v75 & 0x18) == 0)
                {
                  v73 = (int8x16_t *)((char *)v17 + v76);
                  v72 = (_WORD *)(v61 + 2 * v76);
                  do
                  {
LABEL_105:
                    v74 = v73->u8[0];
                    v73 = (int8x16_t *)((char *)v73 + 1);
                    *v72++ = v74;
                  }
                  while (v72 != v62);
                  goto LABEL_69;
                }
              }
              else
              {
                v76 = 0;
              }
              v72 = (_WORD *)(v61 + 2 * (v75 & 0xFFFFFFFFFFFFFFF8));
              v73 = (int8x16_t *)((char *)v17 + (v75 & 0xFFFFFFFFFFFFFFF8));
              v94 = (uint8x8_t *)&v17->i8[v76];
              v95 = (uint16x8_t *)(v61 + 2 * v76);
              v96 = v76 - (v75 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v97 = *v94++;
                *v95++ = vmovl_u8(v97);
                v96 += 8;
              }
              while (v96);
              if (v75 != (v75 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_105;
            }
LABEL_69:
            v51 = *(_DWORD *)v12 - 2;
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::destroy();
              v52 = *(_DWORD *)v12 - 2;
              if (*(_DWORD *)v12 != 2)
                goto LABEL_71;
            }
            else
            {
              *(_DWORD *)v12 = v51;
              v52 = v51 - 2;
              if (v52)
              {
LABEL_71:
                *(_DWORD *)v12 = v52;
LABEL_72:
                *a1 = v20;
                v19 = *(_DWORD *)v12 - 2;
                if (*(_DWORD *)v12 != 2)
                  goto LABEL_43;
                goto LABEL_73;
              }
            }
            WTF::StringImpl::destroy();
            *a1 = v20;
            v19 = *(_DWORD *)v12 - 2;
            if (*(_DWORD *)v12 == 2)
              goto LABEL_73;
            goto LABEL_43;
          }
          v40 = &v33[v34];
          if (v34 < 0x40)
          {
            v41 = v20 + 22;
          }
          else
          {
            v41 = (unint64_t)&v33[v34 & 0xFFFFFFC0];
            v42 = 0uLL;
            v43 = (char *)(v20 + 22);
            do
            {
              v111.val[0] = *v35;
              v44 = v35[1];
              v113.val[0] = v35[2];
              v45 = v35[3];
              v35 += 4;
              v46 = v45;
              v113.val[1] = 0uLL;
              v115.val[0] = v44;
              v111.val[1] = 0uLL;
              v47 = v43;
              vst2q_s8(v47, v111);
              v47 += 32;
              v115.val[1] = 0uLL;
              vst2q_s8(v47, v115);
              v48 = v43 + 64;
              vst2q_s8(v48, v113);
              v49 = v43 + 96;
              vst2q_s8(v49, *(int8x16x2_t *)(&v42 - 1));
              v43 += 128;
            }
            while (v43 != (char *)v41);
          }
          if ((_WORD *)v41 == v40)
            goto LABEL_96;
          v53 = v20 + 2 * v34 - v41 + 20;
          if (v53 < 0xE
            || (v41 < (unint64_t)v35->u64 + (v53 >> 1) + 1
              ? (v54 = (unint64_t)v35 >= (v53 & 0xFFFFFFFFFFFFFFFELL) + v41 + 2)
              : (v54 = 1),
                !v54))
          {
            v57 = (_WORD *)v41;
            v58 = v35;
            goto LABEL_93;
          }
          v55 = (v53 >> 1) + 1;
          if (v53 >= 0x3E)
          {
            v56 = v55 & 0xFFFFFFFFFFFFFFE0;
            v98 = (uint8x8_t *)&v35[1];
            v99 = (uint16x8_t *)(v41 + 32);
            v100 = v55 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v101 = *(uint8x16_t *)v98[-2].i8;
              v102 = vmovl_u8(*v98);
              v103 = vmovl_high_u8(*(uint8x16_t *)v98->i8);
              v99[-2] = vmovl_u8(*(uint8x8_t *)v101.i8);
              v99[-1] = vmovl_high_u8(v101);
              *v99 = v102;
              v99[1] = v103;
              v99 += 4;
              v98 += 4;
              v100 -= 32;
            }
            while (v100);
            if (v55 == v56)
              goto LABEL_96;
            if ((v55 & 0x18) == 0)
            {
              v58 = (int8x16_t *)((char *)v35 + v56);
              v57 = (_WORD *)(v41 + 2 * v56);
              goto LABEL_93;
            }
          }
          else
          {
            v56 = 0;
          }
          v57 = (_WORD *)(v41 + 2 * (v55 & 0xFFFFFFFFFFFFFFF8));
          v58 = (int8x16_t *)((char *)v35 + (v55 & 0xFFFFFFFFFFFFFFF8));
          v104 = (uint8x8_t *)&v35->i8[v56];
          v105 = (uint16x8_t *)(v41 + 2 * v56);
          v106 = v56 - (v55 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v107 = *v104++;
            *v105++ = vmovl_u8(v107);
            v106 += 8;
          }
          while (v106);
          if (v55 == (v55 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_96;
          do
          {
LABEL_93:
            v59 = v58->u8[0];
            v58 = (int8x16_t *)((char *)v58 + 1);
            *v57++ = v59;
          }
          while (v57 != v40);
          goto LABEL_96;
        }
      }
      if ((_DWORD)v16)
      {
        if ((v16 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v16 + 20));
          v20 = v110[0];
          if (v110[0])
          {
            *(_DWORD *)v110[0] = 2;
            *(_DWORD *)(v20 + 4) = v16;
            *(_QWORD *)(v20 + 8) = v20 + 20;
            *(_DWORD *)(v20 + 16) = 4;
            if (!v12)
            {
              v36 = 0;
              *(_BYTE *)(v20 + 20) = a2;
              if (!(_DWORD)v11)
                goto LABEL_68;
              goto LABEL_65;
            }
            *(_DWORD *)v12 += 2;
            *(_BYTE *)(v20 + 20) = a2;
            v21 = v20 + 21;
            v22 = *(unsigned int *)(v12 + 4);
            *(_DWORD *)v12 += 2;
            v23 = *(int8x16_t **)(v12 + 8);
            if ((*(_BYTE *)(v12 + 16) & 4) != 0)
            {
              if ((_DWORD)v22)
              {
                if ((_DWORD)v22 == 1)
                {
                  *(_BYTE *)v21 = v23->i8[0];
                  v36 = *(unsigned int *)(v12 + 4);
                  if (!(_DWORD)v11)
                    goto LABEL_68;
                  goto LABEL_65;
                }
                memcpy((void *)v21, v23, v22);
              }
            }
            else
            {
              v24 = (_BYTE *)(v21 + v22);
              if (v22 >= 0x10)
              {
                v25 = v21 + (v22 & 0xFFFFFFF0);
                do
                {
                  v26 = (unsigned __int128)vld2q_s8(v23->i8);
                  v23 += 2;
                  *(_OWORD *)v21 = v26;
                  v21 += 16;
                }
                while (v21 != v25);
                v21 = v25;
              }
              if ((_BYTE *)v21 != v24)
              {
                v27 = v20 + v22;
                v28 = v20 + v22 - v21 + 21;
                if (v28 < 8
                  || (v21 < (unint64_t)&v23[2].u64[1] + 2 * v27 + -2 * v21 + 2
                    ? (v29 = (unint64_t)v23 >= v27 + 21)
                    : (v29 = 1),
                      !v29))
                {
                  v37 = (_BYTE *)v21;
                  v38 = v23;
                  goto LABEL_57;
                }
                if (v28 >= 0x20)
                {
                  v30 = v28 & 0xFFFFFFFFFFFFFFE0;
                  v77 = v23 + 2;
                  v78 = (int8x16_t *)(v21 + 16);
                  v79 = v28 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v81 = v77[-2];
                    v80 = v77[-1];
                    v83 = *v77;
                    v82 = v77[1];
                    v77 += 4;
                    v78[-1] = vuzp1q_s8(v81, v80);
                    *v78 = vuzp1q_s8(v83, v82);
                    v78 += 2;
                    v79 -= 32;
                  }
                  while (v79);
                  if (v28 == v30)
                    goto LABEL_64;
                  if ((v28 & 0x18) == 0)
                  {
                    v38 = (int8x16_t *)((char *)v23 + 2 * v30);
                    v37 = (_BYTE *)(v21 + v30);
                    do
                    {
LABEL_57:
                      v39 = v38->i8[0];
                      v38 = (int8x16_t *)((char *)v38 + 2);
                      *v37++ = v39;
                    }
                    while (v37 != v24);
                    goto LABEL_64;
                  }
                }
                else
                {
                  v30 = 0;
                }
                v37 = (_BYTE *)(v21 + (v28 & 0xFFFFFFFFFFFFFFF8));
                v38 = (int8x16_t *)((char *)v23 + 2 * (v28 & 0xFFFFFFFFFFFFFFF8));
                v84 = (int16x8_t *)((char *)v23 + 2 * v30);
                v85 = (int8x8_t *)(v21 + v30);
                v86 = v30 - (v28 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v87 = *v84++;
                  *v85++ = vmovn_s16(v87);
                  v86 += 8;
                }
                while (v86);
                if (v28 != (v28 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_57;
              }
            }
LABEL_64:
            v36 = *(unsigned int *)(v12 + 4);
            if (!(_DWORD)v11)
              goto LABEL_68;
LABEL_65:
            v50 = (_BYTE *)(v20 + v36 + 21);
            if ((_DWORD)v11 == 1)
              *v50 = v17->i8[0];
            else
              memcpy(v50, v17, v11);
LABEL_68:
            if (!v12)
            {
              *a1 = v20;
              v12 = v108[0];
              v108[0] = 0;
              if (!v12)
                return;
              goto LABEL_75;
            }
            goto LABEL_69;
          }
        }
        v31 = 0;
      }
      else
      {
        v31 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      *a1 = v31;
      if (!v12)
        goto LABEL_74;
      v19 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 != 2)
        goto LABEL_43;
LABEL_73:
      WTF::StringImpl::destroy();
LABEL_74:
      v12 = v108[0];
      v108[0] = 0;
      if (!v12)
        return;
      goto LABEL_75;
    }
  }
LABEL_13:
  *a1 = 0;
  v108[0] = 0;
  if (!v12)
    return;
LABEL_75:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v12 -= 2;
}

void WTF::tryMakeString<WTF::ASCIILiteral,WGSL::Type,WTF::ASCIILiteral>(_QWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  int8x16_t *v20;
  int v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _WORD *v28;
  unint64_t v29;
  __int128 v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _WORD *v42;
  int8x16_t *v43;
  __int16 v44;
  uint64_t v45;
  int8x16_t *v46;
  _BYTE *v47;
  size_t v48;
  int8x16_t *v49;
  _BYTE *v50;
  unint64_t v51;
  unsigned __int128 *v52;
  unsigned __int128 v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  _BYTE *v60;
  int8x16_t *v61;
  char v62;
  _WORD *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char *v70;
  char *v71;
  char *v72;
  _BYTE *v73;
  int v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _WORD *v81;
  int8x16_t *v82;
  __int16 v83;
  uint64_t v84;
  unint64_t v85;
  _WORD *v86;
  unint64_t v87;
  __int128 v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _WORD *v100;
  int8x16_t *v101;
  __int16 v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int8x16_t *v107;
  int8x16_t *v108;
  unint64_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int16x8_t *v114;
  int8x8_t *v115;
  unint64_t v116;
  int16x8_t v117;
  uint64_t v118;
  unint64_t v119;
  uint8x8_t *v120;
  uint16x8_t *v121;
  unint64_t v122;
  uint8x16_t v123;
  uint16x8_t v124;
  uint16x8_t v125;
  uint8x8_t *v126;
  uint16x8_t *v127;
  unint64_t v128;
  uint8x8_t v129;
  uint8x8_t *v130;
  uint16x8_t *v131;
  unint64_t v132;
  uint8x16_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint8x8_t *v136;
  uint16x8_t *v137;
  unint64_t v138;
  uint8x8_t v139;
  uint8x8_t *v140;
  uint16x8_t *v141;
  unint64_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint8x8_t *v146;
  uint16x8_t *v147;
  unint64_t v148;
  uint8x8_t v149;
  _QWORD v150[15];
  _QWORD *v151;
  _QWORD v152[22];
  int8x16x2_t v153;
  int8x16x2_t v154;
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;

  v152[20] = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = a3 - 1;
  else
    v5 = 0;
  if (v5 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F5694);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v152);
  v150[0] = v152;
  v150[1] = v152;
  v150[2] = v152;
  v150[3] = v152;
  v150[4] = v152;
  v150[5] = v152;
  v150[6] = v152;
  v150[7] = v152;
  v150[8] = v152;
  v150[9] = v152;
  v150[10] = v152;
  v150[11] = v152;
  v150[12] = v152;
  v150[13] = v152;
  v150[14] = v152;
  v11 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v11 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v151 = v150;
  ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v151, a4);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v152);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v152);
  v12 = *(_QWORD *)(a5 + 8);
  v58 = v12 != 0;
  v13 = v12 - 1;
  if (v58)
    v14 = v13;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F56B4);
  }
  v15 = v150[0];
  if (v150[0])
  {
    v16 = *(_DWORD *)(v150[0] + 4);
    if (((v16 | v14) & 0x80000000) != 0)
      goto LABEL_17;
  }
  else
  {
    v16 = 0;
    if ((v14 & 0x80000000) != 0)
      goto LABEL_17;
  }
  v17 = __OFADD__(v16, (_DWORD)v14);
  v18 = v16 + v14;
  if (!v17)
  {
    v19 = (v5 + v18);
    if (!__OFADD__((_DWORD)v5, v18))
    {
      v20 = *(int8x16_t **)a5;
      if (v150[0])
      {
        v21 = *(_DWORD *)(v150[0] + 16);
        *(_DWORD *)v150[0] += 2;
        if ((v21 & 4) == 0)
        {
          if (!(_DWORD)v19)
          {
            v26 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            *a1 = v26;
            v22 = *(_DWORD *)v15 - 2;
            if (*(_DWORD *)v15 == 2)
              goto LABEL_102;
            goto LABEL_37;
          }
          if (v19 > 0x7FFFFFEF)
          {
            *a1 = 0;
            v22 = *(_DWORD *)v15 - 2;
            if (*(_DWORD *)v15 == 2)
              goto LABEL_102;
LABEL_37:
            *(_DWORD *)v15 = v22;
            v15 = v150[0];
            v150[0] = 0;
            if (!v15)
              return;
            goto LABEL_104;
          }
          WTF::tryFastCompactMalloc((WTF *)(2 * v19 + 20));
          v23 = v152[0];
          if (!v152[0])
            goto LABEL_101;
          v27 = v152[0] + 20;
          *(_DWORD *)v152[0] = 2;
          *(_DWORD *)(v23 + 4) = v19;
          *(_QWORD *)(v23 + 8) = v23 + 20;
          *(_DWORD *)(v23 + 16) = 0;
          *(_DWORD *)v15 += 2;
          v28 = (_WORD *)(v23 + 20 + 2 * v5);
          if ((v5 & 0xFFFFFFC0) != 0)
          {
            v29 = v27 + 2 * (v5 & 0xFFFFFFC0);
            v30 = 0uLL;
            do
            {
              v153.val[0] = *a2;
              v31 = a2[1];
              v156.val[0] = a2[2];
              v32 = a2[3];
              a2 += 4;
              v33 = v32;
              v156.val[1] = 0uLL;
              v159.val[0] = v31;
              v153.val[1] = 0uLL;
              v34 = (char *)v27;
              vst2q_s8(v34, v153);
              v34 += 32;
              v159.val[1] = 0uLL;
              vst2q_s8(v34, v159);
              v35 = (char *)(v27 + 64);
              vst2q_s8(v35, v156);
              v36 = (char *)(v27 + 96);
              vst2q_s8(v36, *(int8x16x2_t *)(&v30 - 1));
              v27 += 128;
            }
            while (v27 != v29);
            v27 = v29;
          }
          if ((_WORD *)v27 != v28)
          {
            v37 = v23 + 2 * a3 - v27;
            v38 = -2;
            if (a3)
              v39 = -2;
            else
              v39 = 0;
            v40 = v37 + v39 + 18;
            if (v40 < 0xE)
              goto LABEL_55;
            if (!a3)
              v38 = 0;
            v41 = v37 + v38 + 18;
            if (v27 < (unint64_t)a2->u64 + (v41 >> 1) + 1
              && (unint64_t)a2 < (v41 & 0xFFFFFFFFFFFFFFFELL) + v27 + 2)
            {
LABEL_55:
              v42 = (_WORD *)v27;
              v43 = a2;
              goto LABEL_56;
            }
            v103 = (v40 >> 1) + 1;
            if (v40 >= 0x3E)
            {
              v104 = v103 & 0xFFFFFFFFFFFFFFE0;
              v120 = (uint8x8_t *)&a2[1];
              v121 = (uint16x8_t *)(v27 + 32);
              v122 = v103 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v123 = *(uint8x16_t *)v120[-2].i8;
                v124 = vmovl_u8(*v120);
                v125 = vmovl_high_u8(*(uint8x16_t *)v120->i8);
                v121[-2] = vmovl_u8(*(uint8x8_t *)v123.i8);
                v121[-1] = vmovl_high_u8(v123);
                *v121 = v124;
                v121[1] = v125;
                v121 += 4;
                v120 += 4;
                v122 -= 32;
              }
              while (v122);
              if (v103 == v104)
                goto LABEL_57;
              if ((v103 & 0x18) == 0)
              {
                v43 = (int8x16_t *)((char *)a2 + v104);
                v42 = (_WORD *)(v27 + 2 * v104);
                do
                {
LABEL_56:
                  v44 = v43->u8[0];
                  v43 = (int8x16_t *)((char *)v43 + 1);
                  *v42++ = v44;
                }
                while (v42 != v28);
                goto LABEL_57;
              }
            }
            else
            {
              v104 = 0;
            }
            v42 = (_WORD *)(v27 + 2 * (v103 & 0xFFFFFFFFFFFFFFF8));
            v43 = (int8x16_t *)((char *)a2 + (v103 & 0xFFFFFFFFFFFFFFF8));
            v126 = (uint8x8_t *)&a2->i8[v104];
            v127 = (uint16x8_t *)(v27 + 2 * v104);
            v128 = v104 - (v103 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v129 = *v126++;
              *v127++ = vmovl_u8(v129);
              v128 += 8;
            }
            while (v128);
            if (v103 != (v103 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_56;
          }
LABEL_57:
          v45 = *(unsigned int *)(v15 + 4);
          *(_DWORD *)v15 += 2;
          v46 = *(int8x16_t **)(v15 + 8);
          if ((*(_BYTE *)(v15 + 16) & 4) == 0)
          {
            if ((_DWORD)v45)
            {
              if ((_DWORD)v45 == 1)
                *v28 = v46->i16[0];
              else
                memcpy((void *)(v23 + 20 + 2 * v5), v46, 2 * v45);
            }
LABEL_125:
            v84 = *(unsigned int *)(v15 + 4);
            v85 = (unint64_t)&v28[v84];
            v86 = (_WORD *)(v85 + 2 * v14);
            if ((v14 & 0xFFFFFFC0) != 0)
            {
              v87 = v85 + 2 * (v14 & 0xFFFFFFC0);
              v88 = 0uLL;
              do
              {
                v155.val[0] = *v20;
                v89 = v20[1];
                v158.val[0] = v20[2];
                v90 = v20[3];
                v20 += 4;
                v91 = v90;
                v158.val[1] = 0uLL;
                v161.val[0] = v89;
                v155.val[1] = 0uLL;
                v92 = (char *)v85;
                vst2q_s8(v92, v155);
                v92 += 32;
                v161.val[1] = 0uLL;
                vst2q_s8(v92, v161);
                v93 = (char *)(v85 + 64);
                vst2q_s8(v93, v158);
                v94 = (char *)(v85 + 96);
                vst2q_s8(v94, *(int8x16x2_t *)(&v88 - 1));
                v85 += 128;
              }
              while (v85 != v87);
              v85 = v87;
            }
            if ((_WORD *)v85 != v86)
            {
              v95 = v23 + 2 * (v84 + a3 + v14) - v85;
              v96 = -2;
              if (a3)
                v97 = -2;
              else
                v97 = 0;
              v98 = v95 + v97 + 18;
              if (v98 < 0xE)
                goto LABEL_138;
              if (!a3)
                v96 = 0;
              v99 = v95 + v96 + 18;
              if (v85 < (unint64_t)v20->u64 + (v99 >> 1) + 1
                && (unint64_t)v20 < (v99 & 0xFFFFFFFFFFFFFFFELL) + v85 + 2)
              {
LABEL_138:
                v100 = (_WORD *)v85;
                v101 = v20;
                goto LABEL_139;
              }
              v105 = (v98 >> 1) + 1;
              if (v98 >= 0x3E)
              {
                v106 = v105 & 0xFFFFFFFFFFFFFFE0;
                v130 = (uint8x8_t *)&v20[1];
                v131 = (uint16x8_t *)(v85 + 32);
                v132 = v105 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v133 = *(uint8x16_t *)v130[-2].i8;
                  v134 = vmovl_u8(*v130);
                  v135 = vmovl_high_u8(*(uint8x16_t *)v130->i8);
                  v131[-2] = vmovl_u8(*(uint8x8_t *)v133.i8);
                  v131[-1] = vmovl_high_u8(v133);
                  *v131 = v134;
                  v131[1] = v135;
                  v131 += 4;
                  v130 += 4;
                  v132 -= 32;
                }
                while (v132);
                if (v105 == v106)
                  goto LABEL_98;
                if ((v105 & 0x18) == 0)
                {
                  v101 = (int8x16_t *)((char *)v20 + v106);
                  v100 = (_WORD *)(v85 + 2 * v106);
                  do
                  {
LABEL_139:
                    v102 = v101->u8[0];
                    v101 = (int8x16_t *)((char *)v101 + 1);
                    *v100++ = v102;
                  }
                  while (v100 != v86);
                  goto LABEL_98;
                }
              }
              else
              {
                v106 = 0;
              }
              v100 = (_WORD *)(v85 + 2 * (v105 & 0xFFFFFFFFFFFFFFF8));
              v101 = (int8x16_t *)((char *)v20 + (v105 & 0xFFFFFFFFFFFFFFF8));
              v136 = (uint8x8_t *)&v20->i8[v106];
              v137 = (uint16x8_t *)(v85 + 2 * v106);
              v138 = v106 - (v105 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v139 = *v136++;
                *v137++ = vmovl_u8(v139);
                v138 += 8;
              }
              while (v138);
              if (v105 != (v105 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_139;
            }
LABEL_98:
            v74 = *(_DWORD *)v15 - 2;
            if (*(_DWORD *)v15 == 2)
            {
              WTF::StringImpl::destroy();
              v75 = *(_DWORD *)v15 - 2;
              if (*(_DWORD *)v15 != 2)
                goto LABEL_100;
            }
            else
            {
              *(_DWORD *)v15 = v74;
              v75 = v74 - 2;
              if (v75)
              {
LABEL_100:
                *(_DWORD *)v15 = v75;
LABEL_101:
                *a1 = v23;
                v22 = *(_DWORD *)v15 - 2;
                if (*(_DWORD *)v15 != 2)
                  goto LABEL_37;
                goto LABEL_102;
              }
            }
            WTF::StringImpl::destroy();
            *a1 = v23;
            v22 = *(_DWORD *)v15 - 2;
            if (*(_DWORD *)v15 == 2)
              goto LABEL_102;
            goto LABEL_37;
          }
          v63 = &v28[v45];
          if (v45 < 0x40)
          {
            v64 = v23 + 20 + 2 * v5;
          }
          else
          {
            v64 = (unint64_t)&v28[v45 & 0xFFFFFFC0];
            v65 = 0uLL;
            v66 = v23 + 20 + 2 * v5;
            do
            {
              v154.val[0] = *v46;
              v67 = v46[1];
              v157.val[0] = v46[2];
              v68 = v46[3];
              v46 += 4;
              v69 = v68;
              v157.val[1] = 0uLL;
              v160.val[0] = v67;
              v154.val[1] = 0uLL;
              v70 = (char *)v66;
              vst2q_s8(v70, v154);
              v70 += 32;
              v160.val[1] = 0uLL;
              vst2q_s8(v70, v160);
              v71 = (char *)(v66 + 64);
              vst2q_s8(v71, v157);
              v72 = (char *)(v66 + 96);
              vst2q_s8(v72, *(int8x16x2_t *)(&v65 - 1));
              v66 += 128;
            }
            while (v66 != v64);
          }
          if ((_WORD *)v64 == v63)
            goto LABEL_125;
          v76 = v23 + 2 * (v45 + a3) - v64;
          v77 = -2;
          if (a3)
            v78 = -2;
          else
            v78 = 0;
          v79 = v76 + v78 + 18;
          if (v79 < 0xE)
            goto LABEL_121;
          if (!a3)
            v77 = 0;
          v80 = v76 + v77 + 18;
          if (v64 < (unint64_t)v46->u64 + (v80 >> 1) + 1
            && (unint64_t)v46 < (v80 & 0xFFFFFFFFFFFFFFFELL) + v64 + 2)
          {
LABEL_121:
            v81 = (_WORD *)v64;
            v82 = v46;
            goto LABEL_122;
          }
          v118 = (v79 >> 1) + 1;
          if (v79 >= 0x3E)
          {
            v119 = v118 & 0xFFFFFFFFFFFFFFE0;
            v140 = (uint8x8_t *)&v46[1];
            v141 = (uint16x8_t *)(v64 + 32);
            v142 = v118 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v143 = *(uint8x16_t *)v140[-2].i8;
              v144 = vmovl_u8(*v140);
              v145 = vmovl_high_u8(*(uint8x16_t *)v140->i8);
              v141[-2] = vmovl_u8(*(uint8x8_t *)v143.i8);
              v141[-1] = vmovl_high_u8(v143);
              *v141 = v144;
              v141[1] = v145;
              v141 += 4;
              v140 += 4;
              v142 -= 32;
            }
            while (v142);
            if (v118 == v119)
              goto LABEL_125;
            if ((v118 & 0x18) == 0)
            {
              v82 = (int8x16_t *)((char *)v46 + v119);
              v81 = (_WORD *)(v64 + 2 * v119);
              goto LABEL_122;
            }
          }
          else
          {
            v119 = 0;
          }
          v81 = (_WORD *)(v64 + 2 * (v118 & 0xFFFFFFFFFFFFFFF8));
          v82 = (int8x16_t *)((char *)v46 + (v118 & 0xFFFFFFFFFFFFFFF8));
          v146 = (uint8x8_t *)&v46->i8[v119];
          v147 = (uint16x8_t *)(v64 + 2 * v119);
          v148 = v119 - (v118 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v149 = *v146++;
            *v147++ = vmovl_u8(v149);
            v148 += 8;
          }
          while (v148);
          if (v118 == (v118 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_125;
          do
          {
LABEL_122:
            v83 = v82->u8[0];
            v82 = (int8x16_t *)((char *)v82 + 1);
            *v81++ = v83;
          }
          while (v81 != v63);
          goto LABEL_125;
        }
      }
      if ((_DWORD)v19)
      {
        if ((v19 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
          v23 = v152[0];
          if (v152[0])
          {
            v24 = (_BYTE *)(v152[0] + 20);
            *(_DWORD *)v152[0] = 2;
            *(_DWORD *)(v23 + 4) = v19;
            *(_QWORD *)(v23 + 8) = v23 + 20;
            *(_DWORD *)(v23 + 16) = 4;
            if (v15)
              *(_DWORD *)v15 += 2;
            if ((_DWORD)v5)
            {
              if ((_DWORD)v5 == 1)
                *v24 = a2->i8[0];
              else
                memcpy((void *)(v23 + 20), a2, v5);
            }
            v47 = &v24[v5];
            if (!v15)
            {
              v54 = 0;
              if (!(_DWORD)v14)
                goto LABEL_97;
              goto LABEL_94;
            }
            v48 = *(unsigned int *)(v15 + 4);
            *(_DWORD *)v15 += 2;
            v49 = *(int8x16_t **)(v15 + 8);
            if ((*(_BYTE *)(v15 + 16) & 4) != 0)
            {
              if ((_DWORD)v48)
              {
                if ((_DWORD)v48 == 1)
                {
                  *v47 = v49->i8[0];
                  v54 = *(unsigned int *)(v15 + 4);
                  if (!(_DWORD)v14)
                    goto LABEL_97;
                  goto LABEL_94;
                }
                memcpy(v47, v49, v48);
              }
            }
            else
            {
              v50 = &v47[v48];
              if (v48 < 0x10)
              {
                v51 = (unint64_t)v47;
              }
              else
              {
                v51 = (unint64_t)&v47[v48 & 0xFFFFFFF0];
                v52 = (unsigned __int128 *)v47;
                do
                {
                  v53 = (unsigned __int128)vld2q_s8(v49->i8);
                  v49 += 2;
                  *v52++ = v53;
                }
                while (v52 != (unsigned __int128 *)v51);
              }
              if ((_BYTE *)v51 != v50)
              {
                v55 = v23 + a3 + v48;
                v56 = v55 - v51 - (a3 != 0) + 20;
                if (v56 < 8
                  || (!a3 ? (v57 = v51) : (v57 = v51 + 1),
                      v51 < (unint64_t)&v49[2].u64[1] + 2 * v55 + -2 * v57
                    ? (v58 = (unint64_t)v49 >= v55 - (a3 != 0) + 20)
                    : (v58 = 1),
                      !v58))
                {
                  v60 = (_BYTE *)v51;
                  v61 = v49;
                  goto LABEL_86;
                }
                if (v56 >= 0x20)
                {
                  v59 = v56 & 0xFFFFFFFFFFFFFFE0;
                  v107 = v49 + 2;
                  v108 = (int8x16_t *)(v51 + 16);
                  v109 = v56 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v111 = v107[-2];
                    v110 = v107[-1];
                    v113 = *v107;
                    v112 = v107[1];
                    v107 += 4;
                    v108[-1] = vuzp1q_s8(v111, v110);
                    *v108 = vuzp1q_s8(v113, v112);
                    v108 += 2;
                    v109 -= 32;
                  }
                  while (v109);
                  if (v56 == v59)
                    goto LABEL_93;
                  if ((v56 & 0x18) == 0)
                  {
                    v61 = (int8x16_t *)((char *)v49 + 2 * v59);
                    v60 = (_BYTE *)(v51 + v59);
                    do
                    {
LABEL_86:
                      v62 = v61->i8[0];
                      v61 = (int8x16_t *)((char *)v61 + 2);
                      *v60++ = v62;
                    }
                    while (v60 != v50);
                    goto LABEL_93;
                  }
                }
                else
                {
                  v59 = 0;
                }
                v60 = (_BYTE *)(v51 + (v56 & 0xFFFFFFFFFFFFFFF8));
                v61 = (int8x16_t *)((char *)v49 + 2 * (v56 & 0xFFFFFFFFFFFFFFF8));
                v114 = (int16x8_t *)((char *)v49 + 2 * v59);
                v115 = (int8x8_t *)(v51 + v59);
                v116 = v59 - (v56 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v117 = *v114++;
                  *v115++ = vmovn_s16(v117);
                  v116 += 8;
                }
                while (v116);
                if (v56 != (v56 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_86;
              }
            }
LABEL_93:
            v54 = *(unsigned int *)(v15 + 4);
            if (!(_DWORD)v14)
              goto LABEL_97;
LABEL_94:
            v73 = &v47[v54];
            if ((_DWORD)v14 == 1)
              *v73 = v20->i8[0];
            else
              memcpy(v73, v20, v14);
LABEL_97:
            if (!v15)
            {
              *a1 = v23;
              v15 = v150[0];
              v150[0] = 0;
              if (!v15)
                return;
              goto LABEL_104;
            }
            goto LABEL_98;
          }
        }
        v25 = 0;
      }
      else
      {
        v25 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      *a1 = v25;
      if (!v15)
        goto LABEL_103;
      v22 = *(_DWORD *)v15 - 2;
      if (*(_DWORD *)v15 != 2)
        goto LABEL_37;
LABEL_102:
      WTF::StringImpl::destroy();
LABEL_103:
      v15 = v150[0];
      v150[0] = 0;
      if (!v15)
        return;
      goto LABEL_104;
    }
  }
LABEL_17:
  *a1 = 0;
  v150[0] = 0;
  if (!v15)
    return;
LABEL_104:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy();
  else
    *(_DWORD *)v15 -= 2;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral &,WTF::ASCIILiteral &,WTF::ASCIILiteral &>(uint64_t a1, __int128 *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *result;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;

  v8 = a4 - 1;
  if (!a4)
    v8 = 0;
  v22 = a3;
  if (v8 >> 31)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  LODWORD(v23) = v8;
  v9 = a6 - 1;
  if (!a6)
    v9 = 0;
  v26 = a5;
  if (v9 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F58DCLL);
  }
  v27 = v9;
  v10 = a8 - 1;
  if (!a8)
    v10 = 0;
  v24 = a7;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F58FCLL);
  }
  v25 = v10;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v22, (uint64_t)&v26, (uint64_t)&v24, &v21);
  v13 = v21;
  if (!v21)
  {
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x1825F58BCLL);
  }
  v21 = 0;
  v22 = v13;
  v23 = *a2;
  v14 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v14 != *(_DWORD *)(a1 + 128))
  {
    v20 = *(_QWORD *)(a1 + 120) + 24 * v14;
    *(_QWORD *)v20 = v13;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 132);
    v22 = 0;
LABEL_17:
    result = v21;
    v21 = 0;
    if (!result)
      return result;
    goto LABEL_18;
  }
  v15 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v14 + 1, (unint64_t)&v22);
  v16 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v17 = *(_QWORD *)v15;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)v16 = v17;
  *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
  v18 = v22;
  ++*(_DWORD *)(a1 + 132);
  v22 = 0;
  if (!v18)
    goto LABEL_17;
  if (*v18 == 2)
  {
    WTF::StringImpl::destroy();
    result = v21;
    v21 = 0;
    if (!result)
      return result;
  }
  else
  {
    *v18 -= 2;
    result = v21;
    v21 = 0;
    if (!result)
      return result;
  }
LABEL_18:
  if (*result == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *result -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral,WGSL::AST::Identifier &,char>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  __int16 v20;
  size_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _DWORD *v25;
  BOOL v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  _DWORD *result;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _WORD *v40;
  unint64_t v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _WORD *v54;
  int8x16_t *v55;
  __int16 v56;
  uint64_t v57;
  int8x16_t *v58;
  uint64_t v59;
  unint64_t v60;
  _WORD *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _WORD *v65;
  unint64_t v66;
  __int128 v67;
  char *v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  char *v72;
  char *v73;
  char *v74;
  unsigned __int128 *v75;
  size_t v76;
  int8x16_t *v77;
  _BYTE *v78;
  unint64_t v79;
  unsigned __int128 *v80;
  unsigned __int128 v81;
  uint64_t v82;
  char v83;
  size_t v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  _BYTE *v89;
  int8x16_t *v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _WORD *v97;
  int8x16_t *v98;
  __int16 v99;
  _BYTE *v100;
  int8x16_t *v101;
  size_t v102;
  _BYTE *v103;
  unint64_t v104;
  unsigned __int128 *v105;
  uint64_t v106;
  unsigned __int128 v107;
  uint64_t v108;
  size_t v109;
  unint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  int8x16_t *v113;
  char v114;
  unint64_t v115;
  __int128 v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  char *v120;
  char *v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _WORD *v130;
  int8x16_t *v131;
  __int16 v132;
  int8x16_t *v133;
  uint64_t v134;
  uint64_t v135;
  _WORD *v136;
  unint64_t v137;
  __int128 v138;
  char *v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _WORD *v157;
  int8x16_t *v158;
  __int16 v159;
  int v160;
  int v161;
  uint8x8_t *v162;
  uint16x8_t *v163;
  unint64_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  uint8x8_t *v168;
  uint16x8_t *v169;
  unint64_t v170;
  uint8x8_t v171;
  uint8x8_t *v172;
  uint16x8_t *v173;
  unint64_t v174;
  uint8x16_t v175;
  uint16x8_t v176;
  uint16x8_t v177;
  uint8x8_t *v178;
  uint16x8_t *v179;
  unint64_t v180;
  uint8x8_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  int8x16_t *v187;
  int8x16_t *v188;
  unint64_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int16x8_t *v194;
  int8x8_t *v195;
  unint64_t v196;
  int16x8_t v197;
  uint8x8_t *v198;
  uint16x8_t *v199;
  unint64_t v200;
  uint8x16_t v201;
  uint16x8_t v202;
  uint16x8_t v203;
  uint8x8_t *v204;
  uint16x8_t *v205;
  unint64_t v206;
  uint8x8_t v207;
  int8x16_t *v208;
  int8x16_t *v209;
  unint64_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int16x8_t *v215;
  int8x8_t *v216;
  unint64_t v217;
  int16x8_t v218;
  uint8x8_t *v219;
  uint16x8_t *v220;
  unint64_t v221;
  uint8x16_t v222;
  uint16x8_t v223;
  uint16x8_t v224;
  uint8x8_t *v225;
  uint16x8_t *v226;
  unint64_t v227;
  uint8x8_t v228;
  uint64_t v229;
  uint64_t v230;
  __int16 v231;
  __int128 *v232;
  _QWORD v233[15];
  _QWORD *v234;
  _BYTE v235[48];
  int v236;
  _DWORD *v237;
  __int128 v238;
  uint64_t v239;
  int8x16x2_t v240;
  int8x16x2_t v241;
  int8x16x2_t v242;
  int8x16x2_t v243;
  int8x16x2_t v244;
  int8x16x2_t v245;
  int8x16x2_t v246;
  int8x16x2_t v247;
  int8x16x2_t v248;
  int8x16x2_t v249;
  int8x16x2_t v250;
  int8x16x2_t v251;

  v239 = *MEMORY[0x1E0C80C00];
  v235[0] = 0;
  v236 = -1;
  v15 = *(unsigned int *)(a5 + 48);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v15])(&v237, v235, a5);
    v236 = v15;
  }
  v16 = *(int8x16_t **)a6;
  v17 = *(_QWORD *)(a6 + 8);
  v18 = *(_QWORD *)(a7 + 24);
  if (v18)
    *(_DWORD *)v18 += 2;
  if (a4)
    v19 = a4 - 1;
  else
    v19 = 0;
  if (v19 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F6578);
  }
  v20 = *a8;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v237);
  v233[0] = &v237;
  v233[1] = &v237;
  v233[2] = &v237;
  v233[3] = &v237;
  v233[4] = &v237;
  v233[5] = &v237;
  v233[6] = &v237;
  v233[7] = &v237;
  v233[8] = &v237;
  v233[9] = &v237;
  v233[10] = &v237;
  v233[11] = &v237;
  v233[12] = &v237;
  v233[13] = &v237;
  v233[14] = &v237;
  if (v236 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v234 = v233;
  ((void (*)(_QWORD **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v236])(&v234, v235);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v237);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v237);
  v230 = v17;
  if (v17)
    v21 = v17 - 1;
  else
    v21 = 0;
  if (v21 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F6598);
  }
  v231 = v20;
  v22 = v233[0];
  if (!v233[0])
  {
    v23 = 0;
    v232 = a2;
    if (v18)
      goto LABEL_16;
LABEL_21:
    v25 = 0;
    v27 = 1;
    goto LABEL_22;
  }
  v23 = *(_DWORD *)(v233[0] + 4);
  v232 = a2;
  if (!v18)
    goto LABEL_21;
LABEL_16:
  v24 = *(_DWORD *)(v18 + 4);
  if (v24 < 0)
    goto LABEL_30;
  v25 = 0;
  v26 = __OFADD__(v24, 1);
  v27 = v24 + 1;
  if (v26)
    goto LABEL_31;
LABEL_22:
  v26 = __OFADD__((_DWORD)v21, v27);
  v28 = v21 + v27;
  v29 = v26;
  if ((v23 & 0x80000000) == 0 && (v29 & 1) == 0)
  {
    v26 = __OFADD__(v23, v28);
    v30 = v23 + v28;
    if (!v26)
    {
      v31 = (v19 + v30);
      if (!__OFADD__((_DWORD)v19, v30))
      {
        if (v233[0] && (*(_BYTE *)(v233[0] + 16) & 4) == 0)
          goto LABEL_57;
        if (v18 && (*(_BYTE *)(v18 + 16) & 4) == 0)
        {
          if (!v233[0])
          {
            if ((_DWORD)v31)
            {
              v38 = 1;
              if (v31 <= 0x7FFFFFEF)
              {
LABEL_59:
                v229 = v38;
                WTF::tryFastCompactMalloc((WTF *)(2 * (v19 + v30) + 20));
                v25 = v237;
                if (v237)
                {
                  v39 = (unint64_t)(v237 + 5);
                  *v237 = 2;
                  v25[1] = v31;
                  *((_QWORD *)v25 + 1) = v25 + 5;
                  v25[4] = 0;
                  if (v22)
                    *(_DWORD *)v22 += 2;
                  v40 = (_WORD *)(v39 + 2 * v19);
                  if ((v19 & 0xFFFFFFC0) != 0)
                  {
                    v41 = v39 + 2 * (v19 & 0xFFFFFFC0);
                    v42 = 0uLL;
                    do
                    {
                      v240.val[0] = *a3;
                      v43 = a3[1];
                      v244.val[0] = a3[2];
                      v44 = a3[3];
                      a3 += 4;
                      v45 = v44;
                      v244.val[1] = 0uLL;
                      v248.val[0] = v43;
                      v240.val[1] = 0uLL;
                      v46 = (char *)v39;
                      vst2q_s8(v46, v240);
                      v46 += 32;
                      v248.val[1] = 0uLL;
                      vst2q_s8(v46, v248);
                      v47 = (char *)(v39 + 64);
                      vst2q_s8(v47, v244);
                      v48 = (char *)(v39 + 96);
                      vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
                      v39 += 128;
                    }
                    while (v39 != v41);
                    v39 = v41;
                  }
                  if ((_WORD *)v39 != v40)
                  {
                    v49 = (unint64_t)v25 + 2 * a4 - v39;
                    v50 = -2;
                    if (a4)
                      v51 = -2;
                    else
                      v51 = 0;
                    v52 = v49 + v51 + 18;
                    if (v52 < 0xE)
                      goto LABEL_75;
                    if (!a4)
                      v50 = 0;
                    v53 = v49 + v50 + 18;
                    if (v39 < (unint64_t)a3->u64 + (v53 >> 1) + 1
                      && (unint64_t)a3 < (v53 & 0xFFFFFFFFFFFFFFFELL) + v39 + 2)
                    {
LABEL_75:
                      v54 = (_WORD *)v39;
                      v55 = a3;
                      goto LABEL_76;
                    }
                    v146 = (v52 >> 1) + 1;
                    if (v52 >= 0x3E)
                    {
                      v147 = v146 & 0xFFFFFFFFFFFFFFE0;
                      v162 = (uint8x8_t *)&a3[1];
                      v163 = (uint16x8_t *)(v39 + 32);
                      v164 = v146 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v165 = *(uint8x16_t *)v162[-2].i8;
                        v166 = vmovl_u8(*v162);
                        v167 = vmovl_high_u8(*(uint8x16_t *)v162->i8);
                        v163[-2] = vmovl_u8(*(uint8x8_t *)v165.i8);
                        v163[-1] = vmovl_high_u8(v165);
                        *v163 = v166;
                        v163[1] = v167;
                        v163 += 4;
                        v162 += 4;
                        v164 -= 32;
                      }
                      while (v164);
                      if (v146 == v147)
                        goto LABEL_77;
                      if ((v146 & 0x18) == 0)
                      {
                        v55 = (int8x16_t *)((char *)a3 + v147);
                        v54 = (_WORD *)(v39 + 2 * v147);
                        do
                        {
LABEL_76:
                          v56 = v55->u8[0];
                          v55 = (int8x16_t *)((char *)v55 + 1);
                          *v54++ = v56;
                        }
                        while (v54 != v40);
                        goto LABEL_77;
                      }
                    }
                    else
                    {
                      v147 = 0;
                    }
                    v54 = (_WORD *)(v39 + 2 * (v146 & 0xFFFFFFFFFFFFFFF8));
                    v55 = (int8x16_t *)((char *)a3 + (v146 & 0xFFFFFFFFFFFFFFF8));
                    v168 = (uint8x8_t *)&a3->i8[v147];
                    v169 = (uint16x8_t *)(v39 + 2 * v147);
                    v170 = v147 - (v146 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v171 = *v168++;
                      *v169++ = vmovl_u8(v171);
                      v170 += 8;
                    }
                    while (v170);
                    if (v146 != (v146 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_76;
                  }
LABEL_77:
                  if (!v22)
                  {
                    v59 = 0;
                    v60 = (unint64_t)v40;
                    v61 = &v40[v21];
                    v62 = v21 & 0xFFFFFFC0;
                    if ((v21 & 0xFFFFFFC0) == 0)
                      goto LABEL_82;
                    goto LABEL_166;
                  }
                  v57 = *(unsigned int *)(v22 + 4);
                  *(_DWORD *)v22 += 2;
                  v58 = *(int8x16_t **)(v22 + 8);
                  if ((*(_BYTE *)(v22 + 16) & 4) == 0)
                  {
                    if ((_DWORD)v57)
                    {
                      if ((_DWORD)v57 == 1)
                      {
                        *v40 = v58->i16[0];
                        v59 = *(unsigned int *)(v22 + 4);
                        v60 = (unint64_t)&v40[v59];
                        v61 = (_WORD *)(v60 + 2 * v21);
                        v62 = v21 & 0xFFFFFFC0;
                        if ((v21 & 0xFFFFFFC0) == 0)
                        {
LABEL_82:
                          v63 = v230;
                          goto LABEL_169;
                        }
LABEL_166:
                        v115 = v60 + 2 * v62;
                        v116 = 0uLL;
                        v63 = v230;
                        do
                        {
                          v242.val[0] = *v16;
                          v117 = v16[1];
                          v246.val[0] = v16[2];
                          v118 = v16[3];
                          v16 += 4;
                          v119 = v118;
                          v246.val[1] = 0uLL;
                          v250.val[0] = v117;
                          v242.val[1] = 0uLL;
                          v120 = (char *)v60;
                          vst2q_s8(v120, v242);
                          v120 += 32;
                          v250.val[1] = 0uLL;
                          vst2q_s8(v120, v250);
                          v121 = (char *)(v60 + 64);
                          vst2q_s8(v121, v246);
                          v122 = (char *)(v60 + 96);
                          vst2q_s8(v122, *(int8x16x2_t *)(&v116 - 1));
                          v60 += 128;
                        }
                        while (v60 != v115);
                        v60 = v115;
LABEL_169:
                        if ((_WORD *)v60 == v61)
                          goto LABEL_186;
                        v123 = (unint64_t)v25 + 2 * v59 + 2 * v63 + 2 * a4 - v60;
                        v124 = -2;
                        if (a4)
                          v125 = -2;
                        else
                          v125 = 0;
                        if (v63)
                          v126 = -2;
                        else
                          v126 = 0;
                        v127 = v123 + v125 + v126 + 18;
                        if (v127 < 0xE)
                          goto LABEL_184;
                        if (a4)
                          v128 = -2;
                        else
                          v128 = 0;
                        if (!v63)
                          v124 = 0;
                        v129 = v123 + v128 + v124 + 18;
                        if (v60 < (unint64_t)v16->u64 + (v129 >> 1) + 1
                          && (unint64_t)v16 < (v129 & 0xFFFFFFFFFFFFFFFELL) + v60 + 2)
                        {
LABEL_184:
                          v130 = (_WORD *)v60;
                          v131 = v16;
                          goto LABEL_185;
                        }
                        v148 = (v127 >> 1) + 1;
                        if (v127 >= 0x3E)
                        {
                          v149 = v148 & 0xFFFFFFFFFFFFFFE0;
                          v172 = (uint8x8_t *)&v16[1];
                          v173 = (uint16x8_t *)(v60 + 32);
                          v174 = v148 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v175 = *(uint8x16_t *)v172[-2].i8;
                            v176 = vmovl_u8(*v172);
                            v177 = vmovl_high_u8(*(uint8x16_t *)v172->i8);
                            v173[-2] = vmovl_u8(*(uint8x8_t *)v175.i8);
                            v173[-1] = vmovl_high_u8(v175);
                            *v173 = v176;
                            v173[1] = v177;
                            v173 += 4;
                            v172 += 4;
                            v174 -= 32;
                          }
                          while (v174);
                          if (v148 == v149)
                            goto LABEL_186;
                          if ((v148 & 0x18) == 0)
                          {
                            v131 = (int8x16_t *)((char *)v16 + v149);
                            v130 = (_WORD *)(v60 + 2 * v149);
                            do
                            {
LABEL_185:
                              v132 = v131->u8[0];
                              v131 = (int8x16_t *)((char *)v131 + 1);
                              *v130++ = v132;
                            }
                            while (v130 != v61);
                            goto LABEL_186;
                          }
                        }
                        else
                        {
                          v149 = 0;
                        }
                        v130 = (_WORD *)(v60 + 2 * (v148 & 0xFFFFFFFFFFFFFFF8));
                        v131 = (int8x16_t *)((char *)v16 + (v148 & 0xFFFFFFFFFFFFFFF8));
                        v178 = (uint8x8_t *)&v16->i8[v149];
                        v179 = (uint16x8_t *)(v60 + 2 * v149);
                        v180 = v149 - (v148 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v181 = *v178++;
                          *v179++ = vmovl_u8(v181);
                          v180 += 8;
                        }
                        while (v180);
                        if (v148 != (v148 & 0xFFFFFFFFFFFFFFF8))
                          goto LABEL_185;
LABEL_186:
                        if (!v229)
                        {
                          v135 = 0;
                          goto LABEL_225;
                        }
                        v133 = *(int8x16_t **)(v18 + 8);
                        v134 = *(unsigned int *)(v18 + 4);
                        if ((*(_BYTE *)(v18 + 16) & 4) == 0)
                        {
                          if ((_DWORD)v134)
                          {
                            if ((_DWORD)v134 == 1)
                              *v61 = v133->i16[0];
                            else
                              memcpy(v61, v133, 2 * v134);
                          }
                          goto LABEL_224;
                        }
                        v136 = &v61[v134];
                        if (v134 < 0x40)
                        {
                          v137 = (unint64_t)v61;
                        }
                        else
                        {
                          v137 = (unint64_t)&v61[v134 & 0xFFFFFFC0];
                          v138 = 0uLL;
                          v139 = (char *)v61;
                          do
                          {
                            v243.val[0] = *v133;
                            v140 = v133[1];
                            v247.val[0] = v133[2];
                            v141 = v133[3];
                            v133 += 4;
                            v142 = v141;
                            v247.val[1] = 0uLL;
                            v251.val[0] = v140;
                            v243.val[1] = 0uLL;
                            v143 = v139;
                            vst2q_s8(v143, v243);
                            v143 += 32;
                            v251.val[1] = 0uLL;
                            vst2q_s8(v143, v251);
                            v144 = v139 + 64;
                            vst2q_s8(v144, v247);
                            v145 = v139 + 96;
                            vst2q_s8(v145, *(int8x16x2_t *)(&v138 - 1));
                            v139 += 128;
                          }
                          while (v139 != (char *)v137);
                        }
                        if ((_WORD *)v137 == v136)
                        {
LABEL_224:
                          v135 = *(unsigned int *)(v18 + 4);
LABEL_225:
                          v61[v135] = v231;
                          if (!v22)
                            goto LABEL_31;
LABEL_226:
                          v160 = *(_DWORD *)v22 - 2;
                          if (*(_DWORD *)v22 == 2)
                          {
                            WTF::StringImpl::destroy();
                            v160 = *(_DWORD *)v22;
                          }
                          else
                          {
                            *(_DWORD *)v22 = v160;
                          }
                          v161 = v160 - 2;
                          if (v161)
                            *(_DWORD *)v22 = v161;
                          else
                            WTF::StringImpl::destroy();
LABEL_307:
                          if (*(_DWORD *)v22 == 2)
                            WTF::StringImpl::destroy();
                          else
                            *(_DWORD *)v22 -= 2;
                          goto LABEL_31;
                        }
                        v150 = (unint64_t)v25 + 2 * v59 + 2 * v63 + 2 * a4 + 2 * v134 - v137;
                        v151 = -2;
                        if (a4)
                          v152 = -2;
                        else
                          v152 = 0;
                        if (v63)
                          v153 = -2;
                        else
                          v153 = 0;
                        v154 = v150 + v152 + v153 + 18;
                        if (v154 < 0xE)
                          goto LABEL_216;
                        if (a4)
                          v155 = -2;
                        else
                          v155 = 0;
                        if (!v63)
                          v151 = 0;
                        v156 = v150 + v155 + v151 + 18;
                        if (v137 < (unint64_t)v133->u64 + (v156 >> 1) + 1
                          && (unint64_t)v133 < (v156 & 0xFFFFFFFFFFFFFFFELL) + v137 + 2)
                        {
LABEL_216:
                          v157 = (_WORD *)v137;
                          v158 = v133;
                          goto LABEL_217;
                        }
                        v185 = (v154 >> 1) + 1;
                        if (v154 >= 0x3E)
                        {
                          v186 = v185 & 0xFFFFFFFFFFFFFFE0;
                          v219 = (uint8x8_t *)&v133[1];
                          v220 = (uint16x8_t *)(v137 + 32);
                          v221 = v185 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            v222 = *(uint8x16_t *)v219[-2].i8;
                            v223 = vmovl_u8(*v219);
                            v224 = vmovl_high_u8(*(uint8x16_t *)v219->i8);
                            v220[-2] = vmovl_u8(*(uint8x8_t *)v222.i8);
                            v220[-1] = vmovl_high_u8(v222);
                            *v220 = v223;
                            v220[1] = v224;
                            v220 += 4;
                            v219 += 4;
                            v221 -= 32;
                          }
                          while (v221);
                          if (v185 == v186)
                            goto LABEL_224;
                          if ((v185 & 0x18) == 0)
                          {
                            v158 = (int8x16_t *)((char *)v133 + v186);
                            v157 = (_WORD *)(v137 + 2 * v186);
                            do
                            {
LABEL_217:
                              v159 = v158->u8[0];
                              v158 = (int8x16_t *)((char *)v158 + 1);
                              *v157++ = v159;
                            }
                            while (v157 != v136);
                            goto LABEL_224;
                          }
                        }
                        else
                        {
                          v186 = 0;
                        }
                        v157 = (_WORD *)(v137 + 2 * (v185 & 0xFFFFFFFFFFFFFFF8));
                        v158 = (int8x16_t *)((char *)v133 + (v185 & 0xFFFFFFFFFFFFFFF8));
                        v225 = (uint8x8_t *)&v133->i8[v186];
                        v226 = (uint16x8_t *)(v137 + 2 * v186);
                        v227 = v186 - (v185 & 0xFFFFFFFFFFFFFFF8);
                        do
                        {
                          v228 = *v225++;
                          *v226++ = vmovl_u8(v228);
                          v227 += 8;
                        }
                        while (v227);
                        if (v185 == (v185 & 0xFFFFFFFFFFFFFFF8))
                          goto LABEL_224;
                        goto LABEL_217;
                      }
                      memcpy(v40, v58, 2 * v57);
                    }
LABEL_165:
                    v59 = *(unsigned int *)(v22 + 4);
                    v60 = (unint64_t)&v40[v59];
                    v61 = (_WORD *)(v60 + 2 * v21);
                    v62 = v21 & 0xFFFFFFC0;
                    if ((v21 & 0xFFFFFFC0) == 0)
                      goto LABEL_82;
                    goto LABEL_166;
                  }
                  v65 = &v40[v57];
                  if (v57 < 0x40)
                  {
                    v66 = (unint64_t)v40;
                  }
                  else
                  {
                    v66 = (unint64_t)&v40[v57 & 0xFFFFFFC0];
                    v67 = 0uLL;
                    v68 = (char *)v40;
                    do
                    {
                      v241.val[0] = *v58;
                      v69 = v58[1];
                      v245.val[0] = v58[2];
                      v70 = v58[3];
                      v58 += 4;
                      v71 = v70;
                      v245.val[1] = 0uLL;
                      v249.val[0] = v69;
                      v241.val[1] = 0uLL;
                      v72 = v68;
                      vst2q_s8(v72, v241);
                      v72 += 32;
                      v249.val[1] = 0uLL;
                      vst2q_s8(v72, v249);
                      v73 = v68 + 64;
                      vst2q_s8(v73, v245);
                      v74 = v68 + 96;
                      vst2q_s8(v74, *(int8x16x2_t *)(&v67 - 1));
                      v68 += 128;
                    }
                    while (v68 != (char *)v66);
                  }
                  if ((_WORD *)v66 == v65)
                    goto LABEL_165;
                  v92 = (unint64_t)v25 + 2 * v57 + 2 * a4 - v66;
                  v93 = -2;
                  if (a4)
                    v94 = -2;
                  else
                    v94 = 0;
                  v95 = v92 + v94 + 18;
                  if (v95 < 0xE)
                    goto LABEL_133;
                  if (!a4)
                    v93 = 0;
                  v96 = v92 + v93 + 18;
                  if (v66 < (unint64_t)v58->u64 + (v96 >> 1) + 1
                    && (unint64_t)v58 < (v96 & 0xFFFFFFFFFFFFFFFELL) + v66 + 2)
                  {
LABEL_133:
                    v97 = (_WORD *)v66;
                    v98 = v58;
                    goto LABEL_134;
                  }
                  v182 = (v95 >> 1) + 1;
                  if (v95 >= 0x3E)
                  {
                    v183 = v182 & 0xFFFFFFFFFFFFFFE0;
                    v198 = (uint8x8_t *)&v58[1];
                    v199 = (uint16x8_t *)(v66 + 32);
                    v200 = v182 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v201 = *(uint8x16_t *)v198[-2].i8;
                      v202 = vmovl_u8(*v198);
                      v203 = vmovl_high_u8(*(uint8x16_t *)v198->i8);
                      v199[-2] = vmovl_u8(*(uint8x8_t *)v201.i8);
                      v199[-1] = vmovl_high_u8(v201);
                      *v199 = v202;
                      v199[1] = v203;
                      v199 += 4;
                      v198 += 4;
                      v200 -= 32;
                    }
                    while (v200);
                    if (v182 == v183)
                      goto LABEL_165;
                    if ((v182 & 0x18) == 0)
                    {
                      v98 = (int8x16_t *)((char *)v58 + v183);
                      v97 = (_WORD *)(v66 + 2 * v183);
                      goto LABEL_134;
                    }
                  }
                  else
                  {
                    v183 = 0;
                  }
                  v97 = (_WORD *)(v66 + 2 * (v182 & 0xFFFFFFFFFFFFFFF8));
                  v98 = (int8x16_t *)((char *)v58 + (v182 & 0xFFFFFFFFFFFFFFF8));
                  v204 = (uint8x8_t *)&v58->i8[v183];
                  v205 = (uint16x8_t *)(v66 + 2 * v183);
                  v206 = v183 - (v182 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v207 = *v204++;
                    *v205++ = vmovl_u8(v207);
                    v206 += 8;
                  }
                  while (v206);
                  if (v182 == (v182 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_165;
                  do
                  {
LABEL_134:
                    v99 = v98->u8[0];
                    v98 = (int8x16_t *)((char *)v98 + 1);
                    *v97++ = v99;
                  }
                  while (v97 != v65);
                  goto LABEL_165;
                }
LABEL_306:
                if (!v22)
                  goto LABEL_31;
                goto LABEL_307;
              }
LABEL_303:
              v25 = 0;
              if (!v22)
                goto LABEL_31;
              goto LABEL_307;
            }
LABEL_305:
            v25 = (_DWORD *)MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
            goto LABEL_306;
          }
LABEL_57:
          *(_DWORD *)v233[0] += 2;
          v38 = v18;
          if ((_DWORD)v31)
          {
            if (v31 <= 0x7FFFFFEF)
              goto LABEL_59;
            goto LABEL_303;
          }
          goto LABEL_305;
        }
        if (v233[0])
        {
          *(_DWORD *)v233[0] += 2;
          if (!(_DWORD)v31)
            goto LABEL_305;
        }
        else if (!(_DWORD)v31)
        {
          goto LABEL_305;
        }
        if ((v31 & 0x80000000) != 0)
          goto LABEL_303;
        WTF::tryFastCompactMalloc((WTF *)(v31 + 20));
        v25 = v237;
        if (!v237)
          goto LABEL_306;
        v64 = v237 + 5;
        *v237 = 2;
        v25[1] = v31;
        *((_QWORD *)v25 + 1) = v25 + 5;
        v25[4] = 4;
        if (v22)
          *(_DWORD *)v22 += 2;
        if ((_DWORD)v19)
        {
          if ((_DWORD)v19 == 1)
          {
            *v64 = a3->i8[0];
          }
          else
          {
            memcpy(v25 + 5, a3, v19);
            v64 = v25 + 5;
          }
        }
        v75 = (unsigned __int128 *)&v64[v19];
        if (!v22)
        {
          v82 = 0;
          v83 = v231;
          if (!(_DWORD)v21)
            goto LABEL_141;
          goto LABEL_138;
        }
        v76 = *(unsigned int *)(v22 + 4);
        *(_DWORD *)v22 += 2;
        v77 = *(int8x16_t **)(v22 + 8);
        if ((*(_BYTE *)(v22 + 16) & 4) != 0)
        {
          if ((_DWORD)v76)
          {
            if ((_DWORD)v76 == 1)
            {
              *(_BYTE *)v75 = v77->i8[0];
              v82 = *(unsigned int *)(v22 + 4);
              v83 = v231;
              v75 = (unsigned __int128 *)((char *)v75 + v82);
              if (!(_DWORD)v21)
                goto LABEL_141;
              goto LABEL_138;
            }
            memcpy(&v64[v19], v77, v76);
          }
        }
        else
        {
          v78 = (char *)v75 + v76;
          if (v76 < 0x10)
          {
            v79 = (unint64_t)&v64[v19];
          }
          else
          {
            v79 = (unint64_t)v75 + (v76 & 0xFFFFFFF0);
            v80 = v75;
            do
            {
              v81 = (unsigned __int128)vld2q_s8(v77->i8);
              v77 += 2;
              *v80++ = v81;
            }
            while (v80 != (unsigned __int128 *)v79);
          }
          if ((_BYTE *)v79 != v78)
          {
            v84 = (size_t)v25 + a4 + v76;
            v85 = v84 - v79 - (a4 != 0) + 20;
            if (v85 < 8
              || (!a4 ? (v86 = v79) : (v86 = v79 + 1),
                  v79 < (unint64_t)&v77[2].u64[1] + 2 * v84 + -2 * v86
                ? (v87 = (unint64_t)v77 >= v84 - (a4 != 0) + 20)
                : (v87 = 1),
                  !v87))
            {
              v89 = (_BYTE *)v79;
              v90 = v77;
              goto LABEL_121;
            }
            if (v85 >= 0x20)
            {
              v88 = v85 & 0xFFFFFFFFFFFFFFE0;
              v187 = v77 + 2;
              v188 = (int8x16_t *)(v79 + 16);
              v189 = v85 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v191 = v187[-2];
                v190 = v187[-1];
                v193 = *v187;
                v192 = v187[1];
                v187 += 4;
                v188[-1] = vuzp1q_s8(v191, v190);
                *v188 = vuzp1q_s8(v193, v192);
                v188 += 2;
                v189 -= 32;
              }
              while (v189);
              if (v85 == v88)
                goto LABEL_137;
              if ((v85 & 0x18) == 0)
              {
                v90 = (int8x16_t *)((char *)v77 + 2 * v88);
                v89 = (_BYTE *)(v79 + v88);
                do
                {
LABEL_121:
                  v91 = v90->i8[0];
                  v90 = (int8x16_t *)((char *)v90 + 2);
                  *v89++ = v91;
                }
                while (v89 != v78);
                goto LABEL_137;
              }
            }
            else
            {
              v88 = 0;
            }
            v89 = (_BYTE *)(v79 + (v85 & 0xFFFFFFFFFFFFFFF8));
            v90 = (int8x16_t *)((char *)v77 + 2 * (v85 & 0xFFFFFFFFFFFFFFF8));
            v194 = (int16x8_t *)((char *)v77 + 2 * v88);
            v195 = (int8x8_t *)(v79 + v88);
            v196 = v88 - (v85 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v197 = *v194++;
              *v195++ = vmovn_s16(v197);
              v196 += 8;
            }
            while (v196);
            if (v85 != (v85 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_121;
          }
        }
LABEL_137:
        v82 = *(unsigned int *)(v22 + 4);
        v83 = v231;
        v75 = (unsigned __int128 *)((char *)v75 + v82);
        if (!(_DWORD)v21)
          goto LABEL_141;
LABEL_138:
        if ((_DWORD)v21 == 1)
          *(_BYTE *)v75 = v16->i8[0];
        else
          memcpy(v75, v16, v21);
LABEL_141:
        v100 = (char *)v75 + v21;
        if (!v18)
        {
          v108 = 0;
          goto LABEL_221;
        }
        v101 = *(int8x16_t **)(v18 + 8);
        v102 = *(unsigned int *)(v18 + 4);
        if ((*(_BYTE *)(v18 + 16) & 4) != 0)
        {
          if ((_DWORD)v102)
          {
            if ((_DWORD)v102 == 1)
              *v100 = v101->i8[0];
            else
              memcpy((char *)v75 + v21, v101, v102);
          }
          goto LABEL_220;
        }
        v103 = &v100[v102];
        if (v102 < 0x10)
        {
          v104 = (unint64_t)v75 + v21;
          v106 = v230;
        }
        else
        {
          v104 = (unint64_t)&v100[v102 & 0xFFFFFFF0];
          v105 = (unsigned __int128 *)((char *)v75 + v21);
          v106 = v230;
          do
          {
            v107 = (unsigned __int128)vld2q_s8(v101->i8);
            v101 += 2;
            *v105++ = v107;
          }
          while (v105 != (unsigned __int128 *)v104);
        }
        if ((_BYTE *)v104 == v103)
        {
LABEL_220:
          v108 = *(unsigned int *)(v18 + 4);
LABEL_221:
          v100[v108] = v83;
          if (!v22)
            goto LABEL_31;
          goto LABEL_226;
        }
        v109 = (size_t)v25 + a4 + v82 + v106 + v102;
        v110 = v109 - v104 - (v106 != 0) - (a4 != 0) + 20;
        if (v110 < 8)
          goto LABEL_161;
        if (a4)
          v111 = v104 + 1;
        else
          v111 = v104;
        if (v106)
          ++v111;
        if (v104 < (unint64_t)&v101[2].u64[1] + 2 * v109 + -2 * v111
          && (unint64_t)v101 < v109 - v111 + v104 + 20)
        {
LABEL_161:
          v112 = (_BYTE *)v104;
          v113 = v101;
          goto LABEL_162;
        }
        if (v110 >= 0x20)
        {
          v184 = v110 & 0xFFFFFFFFFFFFFFE0;
          v208 = v101 + 2;
          v209 = (int8x16_t *)(v104 + 16);
          v210 = v110 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v212 = v208[-2];
            v211 = v208[-1];
            v214 = *v208;
            v213 = v208[1];
            v208 += 4;
            v209[-1] = vuzp1q_s8(v212, v211);
            *v209 = vuzp1q_s8(v214, v213);
            v209 += 2;
            v210 -= 32;
          }
          while (v210);
          if (v110 == v184)
            goto LABEL_220;
          if ((v110 & 0x18) == 0)
          {
            v113 = (int8x16_t *)((char *)v101 + 2 * v184);
            v112 = (_BYTE *)(v104 + v184);
            do
            {
LABEL_162:
              v114 = v113->i8[0];
              v113 = (int8x16_t *)((char *)v113 + 2);
              *v112++ = v114;
            }
            while (v112 != v103);
            goto LABEL_220;
          }
        }
        else
        {
          v184 = 0;
        }
        v112 = (_BYTE *)(v104 + (v110 & 0xFFFFFFFFFFFFFFF8));
        v113 = (int8x16_t *)((char *)v101 + 2 * (v110 & 0xFFFFFFFFFFFFFFF8));
        v215 = (int16x8_t *)((char *)v101 + 2 * v184);
        v216 = (int8x8_t *)(v104 + v184);
        v217 = v184 - (v110 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v218 = *v215++;
          *v216++ = vmovn_s16(v218);
          v217 += 8;
        }
        while (v217);
        if (v110 == (v110 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_220;
        goto LABEL_162;
      }
    }
LABEL_30:
    v25 = 0;
  }
LABEL_31:
  result = (_DWORD *)v233[0];
  v233[0] = 0;
  if (!result)
    goto LABEL_34;
  if (*result != 2)
  {
    *result -= 2;
LABEL_34:
    if (v25)
      goto LABEL_35;
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1825F5B98);
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v25)
    goto LABEL_45;
LABEL_35:
  v237 = v25;
  v238 = *v232;
  v33 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v33 != *(_DWORD *)(a1 + 128))
  {
    v37 = *(_QWORD *)(a1 + 120) + 24 * v33;
    *(_QWORD *)v37 = v25;
    *(_OWORD *)(v37 + 8) = v238;
    ++*(_DWORD *)(a1 + 132);
    v237 = 0;
LABEL_41:
    if (!v18)
      goto LABEL_47;
    goto LABEL_42;
  }
  v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v33 + 1, (unint64_t)&v237);
  v35 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v36 = *(_QWORD *)v34;
  *(_QWORD *)v34 = 0;
  *(_QWORD *)v35 = v36;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
  result = v237;
  ++*(_DWORD *)(a1 + 132);
  v237 = 0;
  if (!result)
    goto LABEL_41;
  if (*result == 2)
  {
    result = (_DWORD *)WTF::StringImpl::destroy();
    if (!v18)
      goto LABEL_47;
  }
  else
  {
    *result -= 2;
    if (!v18)
      goto LABEL_47;
  }
LABEL_42:
  if (*(_DWORD *)v18 == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *(_DWORD *)v18 -= 2;
LABEL_47:
  if (v236 != -1)
    result = (_DWORD *)((uint64_t (*)(_QWORD *, _BYTE *))off_1E0FD7DF0[v236])(v233, v235);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral,unsigned int,char>(_DWORD *result, __int128 *a2, _BYTE *a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7, unsigned int a8, char a9)
{
  unint64_t v9;
  unint64_t v10;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  char *v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  __int128 v42;

  if (a4)
    v9 = a4 - 1;
  else
    v9 = 0;
  if (v9 >> 31)
    goto LABEL_47;
  if (a7)
    v10 = a7 - 1;
  else
    v10 = 0;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F6B3CLL);
  }
  v15 = result;
  v40 = (uint64_t)(result + 30);
  if ((a5 & 0x8000000000000000) != 0)
  {
    v19 = -(uint64_t)a5;
    v16 = 1;
    do
    {
      ++v16;
      v20 = v19 >= 0xA;
      v19 /= 0xAuLL;
    }
    while (v20);
  }
  else
  {
    v16 = 0;
    v17 = a5;
    do
    {
      ++v16;
      v18 = v17 > 9;
      v17 /= 0xAuLL;
    }
    while (v18);
  }
  v21 = 0;
  v22 = a8;
  do
  {
    ++v21;
    v18 = v22 > 9;
    v22 /= 0xAu;
  }
  while (v18);
  if (v21 < 0)
    goto LABEL_47;
  v23 = __OFADD__(v21, 1);
  v24 = v21 + 1;
  v25 = v23;
  if ((v10 & 0x80000000) != 0 || v25)
    goto LABEL_47;
  v23 = __OFADD__((_DWORD)v10, v24);
  v26 = v10 + v24;
  v27 = v23;
  if (v16 < 0 || v27)
    goto LABEL_47;
  v23 = __OFADD__(v16, v26);
  v28 = v16 + v26;
  v29 = v23;
  if ((v9 & 0x80000000) != 0)
    goto LABEL_47;
  if (v29)
    goto LABEL_47;
  v30 = (v9 + v28);
  if (__OFADD__((_DWORD)v9, v28))
    goto LABEL_47;
  if ((_DWORD)v30)
  {
    if ((v30 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v30 + 20));
      v32 = a6;
      v33 = v41;
      if (v41)
      {
        v34 = v41 + 5;
        *v41 = 2;
        v33[1] = v30;
        *((_QWORD *)v33 + 1) = v33 + 5;
        v33[4] = 4;
        result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(v34, a3, v9, a5, v32, v10, a8, a9);
        v41 = v33;
        v42 = *a2;
        v35 = v15[33];
        if ((_DWORD)v35 == v15[32])
          goto LABEL_38;
LABEL_42:
        v39 = *((_QWORD *)v15 + 15) + 24 * v35;
        *(_QWORD *)v39 = v33;
        *(_OWORD *)(v39 + 8) = v42;
        ++v15[33];
        return result;
      }
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1825F6B1CLL);
  }
  v33 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
  v41 = v33;
  v42 = *a2;
  v35 = result[33];
  if ((_DWORD)v35 != result[32])
    goto LABEL_42;
LABEL_38:
  v36 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v35 + 1, (unint64_t)&v41);
  v37 = *((_QWORD *)v15 + 15) + 24 * v15[33];
  v38 = *(_QWORD *)v36;
  *(_QWORD *)v36 = 0;
  *(_QWORD *)v37 = v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v36 + 8);
  result = v41;
  ++v15[33];
  v41 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>,WTF::StringTypeAdapter<char,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, unint64_t a4, char *__src, unsigned int a6, unsigned int a7, char a8)
{
  unint64_t v12;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _BYTE *v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  int v30;
  _BYTE v31[25];
  uint64_t v32;

  v12 = a4;
  v14 = __dst;
  v32 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
LABEL_4:
    v15 = &__dst[a3];
    v16 = 0;
    if ((a4 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    v21 = -(uint64_t)v12;
    do
    {
      v31[v16-- + 24] = (v21 % 0xA) | 0x30;
      v18 = v21 > 9;
      v21 /= 0xAuLL;
    }
    while (v18);
    v22 = v16 + 24;
    v19 = &v31[v16 + 24];
    *v19 = 45;
    if (v16 + 26 > 26)
      goto LABEL_17;
    if (v22 <= 24)
      v22 = 24;
    v20 = v22 - v16 - 23;
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    *__dst = *a2;
    goto LABEL_4;
  }
  __dst = memcpy(__dst, a2, a3);
  v15 = &v14[a3];
  v16 = 0;
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  v17 = v12;
  do
  {
    v31[v16-- + 24] = (v17 % 0xA) | 0x30;
    v18 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v18);
  if (v16 + 26 > 25)
    goto LABEL_17;
  v19 = &v31[v16 + 25];
  v20 = -v16;
LABEL_16:
  __dst = memcpy(v15, v19, v20);
LABEL_17:
  if ((v12 & 0x8000000000000000) != 0)
  {
    v24 = -(uint64_t)v12;
    v23 = 1;
    do
    {
      ++v23;
      v25 = v24 >= 0xA;
      v24 /= 0xAuLL;
    }
    while (v25);
  }
  else
  {
    v23 = 0;
    do
    {
      ++v23;
      v18 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v18);
  }
  v26 = &v15[v23];
  if (a6)
  {
    if (a6 == 1)
      *v26 = *__src;
    else
      __dst = memcpy(&v15[v23], __src, a6);
  }
  v27 = 0;
  v28 = a7;
  do
  {
    v31[v27-- + 12] = (v28 % 0xA) | 0x30;
    v18 = v28 > 9;
    v28 /= 0xAu;
  }
  while (v18);
  v29 = &v26[a6];
  if (v27 + 14 <= 13)
    __dst = memcpy(v29, &v31[v27 + 13], -v27);
  v30 = 0;
  do
  {
    ++v30;
    v18 = a7 > 9;
    a7 /= 0xAu;
  }
  while (v18);
  v29[v30] = a8;
  return __dst;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 2)
      return (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1825F6E18 + *((int *)qword_1825F6EB8 + *a2)))();
}

void sub_1825F6E28(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 5;
}

void sub_1825F6E38(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 3;
}

void sub_1825F6E48(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 4;
}

void sub_1825F6E58(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 2;
}

float sub_1825F6E68@<S0>(uint64_t a1@<X8>)
{
  float result;

  result = 0.0;
  *(_WORD *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

void sub_1825F6E7C(_DWORD *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

void sub_1825F6E88(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 16) = 6;
}

void sub_1825F6E98()
{
  __break(0xC471u);
  JUMPOUT(0x1825F6EB4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>@<X0>(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  char v13;
  char *v14;

  v4 = a1[8];
  if (!a1[8])
  {
    v5 = 0;
    v6 = *(unsigned int *)(*(_QWORD *)a1 + 48);
    if ((_DWORD)v6 != -1)
      goto LABEL_3;
LABEL_16:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_17:
    result = 146;
    __break(0xC471u);
    return result;
  }
  v5 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
  *v5 = v4;
  bzero(v5 + 2, 24 * v4 - ((unsigned __int16)(24 * v4 - 24 - 24 * (((24 * (_WORD)v4 - 24) & 0xFFF8u) / 0x18)) & 0xFFF8));
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 48);
  if ((_DWORD)v6 == -1)
    goto LABEL_16;
LABEL_3:
  v14 = &v13;
  result = (uint64_t)((uint64_t (*)(_QWORD *__return_ptr, char **))off_1E0FD8068[v6])(v11, &v14);
  if (a1[8])
  {
    v8 = 0;
    v9 = v5 + 6;
    do
    {
      while (1)
      {
        if (v8 >= *v5)
          goto LABEL_17;
        v10 = *v9;
        if ((_DWORD)v10 != -1)
          break;
        if (v12 != -1)
          goto LABEL_6;
LABEL_7:
        ++v8;
        v9 += 6;
        if (v8 >= a1[8])
          goto LABEL_12;
      }
      if (v12 != -1)
      {
LABEL_6:
        v14 = (char *)(v9 - 4);
        result = ((uint64_t (*)(char **))off_1E0FD80E0[v12])(&v14);
        goto LABEL_7;
      }
      result = ((uint64_t (*)(char **, _DWORD *))off_1E0FD7CC8[v10])(&v14, v9 - 4);
      *v9 = -1;
      v9 += 6;
      ++v8;
    }
    while (v8 < a1[8]);
  }
LABEL_12:
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = 8;
  if (v12 != -1)
    return ((uint64_t (*)(char **, _QWORD *))off_1E0FD7CC8[v12])(&v14, v11);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>@<X0>(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  char v17;
  char *v18;

  v4 = a1[8];
  v5 = a1[9];
  v6 = v5 * v4;
  if ((_DWORD)v5 * (_DWORD)v4)
  {
    v7 = 24 * v6;
    v8 = (unsigned int *)WTF::fastMalloc((WTF *)(v7 + 8));
    *v8 = v6;
    bzero(v8 + 2, v7 - ((int)v7 - 24) % 0x18u);
    v9 = *(unsigned int *)(*(_QWORD *)a1 + 48);
    if ((_DWORD)v9 != -1)
      goto LABEL_3;
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    result = 146;
    __break(0xC471u);
    return result;
  }
  v8 = 0;
  v9 = *(unsigned int *)(*(_QWORD *)a1 + 48);
  if ((_DWORD)v9 == -1)
    goto LABEL_17;
LABEL_3:
  v18 = &v17;
  result = (uint64_t)((uint64_t (*)(_QWORD *__return_ptr, char **))off_1E0FD8068[v9])(v15, &v18);
  if (v8)
  {
    v11 = *v8;
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = v8 + 6;
      do
      {
        while (1)
        {
          if (v12 >= v11)
            goto LABEL_18;
          v14 = *v13;
          if ((_DWORD)v14 != -1)
            break;
          if (v16 != -1)
            goto LABEL_7;
LABEL_8:
          ++v12;
          v11 = *v8;
          v13 += 6;
          if (v12 >= v11)
            goto LABEL_13;
        }
        if (v16 != -1)
        {
LABEL_7:
          v18 = (char *)(v13 - 4);
          result = ((uint64_t (*)(char **))off_1E0FD80E0[v16])(&v18);
          goto LABEL_8;
        }
        result = ((uint64_t (*)(char **, _DWORD *))off_1E0FD7CC8[v14])(&v18, v13 - 4);
        *v13 = -1;
        v13 += 6;
        ++v12;
        v11 = *v8;
      }
      while (v12 < v11);
    }
  }
LABEL_13:
  *(_QWORD *)a2 = v4 | (v5 << 32);
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = 9;
  if (v16 != -1)
    return ((uint64_t (*)(char **, _QWORD *))off_1E0FD7CC8[v16])(&v18, v15);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  char v13;
  char *v14;

  if (a1[4] != 1)
    goto LABEL_17;
  v4 = a1[2];
  if (!(_DWORD)v4)
  {
    v5 = 0;
    v6 = *(unsigned int *)(*(_QWORD *)a1 + 48);
    if ((_DWORD)v6 != -1)
      goto LABEL_4;
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
    result = 146;
    __break(0xC471u);
    return result;
  }
  v5 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v4 + 8));
  *v5 = v4;
  bzero(v5 + 2, 24 * ((24 * v4 - 24) / 0x18uLL) + 24);
  v6 = *(unsigned int *)(*(_QWORD *)a1 + 48);
  if ((_DWORD)v6 == -1)
    goto LABEL_17;
LABEL_4:
  v14 = &v13;
  result = (uint64_t)((uint64_t (*)(_QWORD *__return_ptr, char **))off_1E0FD8068[v6])(v11, &v14);
  if ((_DWORD)v4)
  {
    v8 = 0;
    v9 = v5 + 6;
    do
    {
      while (1)
      {
        if (v8 >= *v5)
          goto LABEL_18;
        v10 = *v9;
        if ((_DWORD)v10 != -1)
          break;
        if (v12 != -1)
          goto LABEL_7;
LABEL_8:
        ++v8;
        v9 += 6;
        if (v4 == v8)
          goto LABEL_13;
      }
      if (v12 != -1)
      {
LABEL_7:
        v14 = (char *)(v9 - 4);
        result = ((uint64_t (*)(char **))off_1E0FD80E0[v12])(&v14);
        goto LABEL_8;
      }
      result = ((uint64_t (*)(char **, _DWORD *))off_1E0FD7CC8[v10])(&v14, v9 - 4);
      *v9 = -1;
      v9 += 6;
      ++v8;
    }
    while (v4 != v8);
  }
LABEL_13:
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 16) = 7;
  if (v12 != -1)
    return ((uint64_t (*)(char **, _QWORD *))off_1E0FD7CC8[v12])(&v14, v11);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  const WTF::StringImpl **v2;
  uint64_t v3;
  const WTF::StringImpl **v4;
  const WTF::StringImpl **v5;
  uint64_t v6;
  const WTF::StringImpl **v7;
  uint64_t v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  _OWORD *v15;
  int i;
  uint64_t v17;
  _OWORD *v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  const WTF::StringImpl **v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  unsigned int v35;
  uint64_t v36;
  char v37;
  char *v38;

  v2 = *(const WTF::StringImpl ***)(a1 + 8);
  v36 = 0;
  if (v2)
  {
    v3 = *((unsigned int *)v2 - 1);
    v4 = &v2[2 * v3];
    if (!*((_DWORD *)v2 - 3))
    {
      v5 = &v2[2 * v3];
      v4 = v5;
      goto LABEL_10;
    }
    v5 = v2;
    if ((_DWORD)v3)
    {
      v6 = 16 * v3;
      v5 = v2;
      do
      {
        if ((unint64_t)*v5 + 1 > 1)
          goto LABEL_9;
        v5 += 2;
        v6 -= 16;
      }
      while (v6);
      v5 = v4;
      goto LABEL_10;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
LABEL_9:
  if (!v2)
  {
    v7 = 0;
    if (v5)
      goto LABEL_11;
LABEL_63:
    v32 = 0;
    goto LABEL_64;
  }
LABEL_10:
  v7 = &v2[2 * *((unsigned int *)v2 - 1)];
  if (v7 == v5)
    goto LABEL_63;
LABEL_11:
  v33 = a2;
  do
  {
    v8 = *((unsigned int *)v5[1] + 12);
    if ((_DWORD)v8 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
    }
    v38 = &v37;
    ((void (*)(_QWORD *__return_ptr, char **))off_1E0FD8068[v8])(v34, &v38);
    v10 = v36;
    if (v36
      || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v36, 8u, 0), (v10 = v36) != 0))
    {
      v11 = *(_DWORD *)(v10 - 8);
      v12 = *v5;
      v13 = *((_DWORD *)*v5 + 4);
      if (v13 < 0x100)
        goto LABEL_19;
    }
    else
    {
      v11 = 0;
      v12 = *v5;
      v13 = *((_DWORD *)*v5 + 4);
      if (v13 < 0x100)
      {
LABEL_19:
        v14 = WTF::StringImpl::hashSlowCase(v12);
        goto LABEL_20;
      }
    }
    v14 = v13 >> 8;
LABEL_20:
    v15 = 0;
    for (i = 1; ; ++i)
    {
      v17 = v14 & v11;
      v18 = (_OWORD *)(v10 + 32 * v17);
      v19 = *(WTF **)v18;
      if (*(_QWORD *)v18 == -1)
      {
        v15 = (_OWORD *)(v10 + 32 * v17);
        goto LABEL_22;
      }
      if (!v19)
      {
        if (v15)
        {
          *v15 = 0u;
          v15[1] = 0u;
          --*(_DWORD *)(v36 - 16);
          v18 = v15;
        }
        v25 = *v5;
        if (*v5)
          *(_DWORD *)v25 += 2;
        *(_QWORD *)v18 = v25;
        v26 = *((unsigned int *)v18 + 6);
        if ((_DWORD)v26 == -1)
        {
          if (v35 != -1)
            goto LABEL_38;
        }
        else
        {
          if (v35 == -1)
          {
            ((void (*)(char **, char *))off_1E0FD7CC8[v26])(&v38, (char *)v18 + 8);
            *((_DWORD *)v18 + 6) = -1;
            goto LABEL_39;
          }
LABEL_38:
          v38 = (char *)v18 + 8;
          ((void (*)(char **))off_1E0FD8188[v35])(&v38);
        }
LABEL_39:
        if (v36)
        {
          ++*(_DWORD *)(v36 - 12);
          v27 = v36;
          if (v36)
          {
            v28 = (*(_DWORD *)(v36 - 16) + *(_DWORD *)(v36 - 12));
            v29 = *(unsigned int *)(v36 - 4);
            if (v29 <= 0x400)
              goto LABEL_42;
LABEL_47:
            if (v29 <= 2 * v28)
            {
LABEL_48:
              v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v29));
              goto LABEL_49;
            }
            goto LABEL_50;
          }
        }
        else
        {
          MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
          v27 = 0;
        }
        v28 = *(unsigned int *)(v27 - 16);
        v29 = *(unsigned int *)(v27 - 4);
        if (v29 > 0x400)
          goto LABEL_47;
LABEL_42:
        if (3 * v29 <= 4 * v28)
        {
          if ((_DWORD)v29)
            goto LABEL_48;
          v30 = 8;
LABEL_49:
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::ConstantValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::ConstantValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::ConstantValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(&v36, v30, (WTF::StringImpl **)v18);
        }
LABEL_50:
        v24 = v35;
        if (v35 == -1)
          goto LABEL_55;
        goto LABEL_54;
      }
      if (WTF::equal(v19, *v5, v9))
        break;
LABEL_22:
      v14 = i + v17;
    }
    v20 = v10 + 32 * v17;
    v23 = *(_DWORD *)(v20 + 24);
    v22 = (_DWORD *)(v20 + 24);
    v21 = v23;
    if (v23 == -1)
    {
      if (v35 == -1)
        goto LABEL_55;
    }
    else if (v35 == -1)
    {
      ((void (*)(char **, _DWORD *))off_1E0FD7CC8[v21])(&v38, v22 - 4);
      *v22 = -1;
      v24 = v35;
      if (v35 == -1)
        goto LABEL_55;
      goto LABEL_54;
    }
    v38 = (char *)(v22 - 4);
    ((void (*)(char **))off_1E0FD8188[v35])(&v38);
    v24 = v35;
    if (v35 == -1)
      goto LABEL_55;
LABEL_54:
    ((void (*)(char **, _QWORD *))off_1E0FD7CC8[v24])(&v38, v34);
LABEL_55:
    v31 = v5 + 2;
    v5 = v4;
    if (v31 != v4)
    {
      v5 = v31;
      while ((unint64_t)*v5 + 1 <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  while (v5 != v7);
  v32 = v36;
  a2 = v33;
LABEL_64:
  *(_QWORD *)a2 = v32;
  *(_DWORD *)(a2 + 16) = 10;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::zeroValue(WGSL::Type const*)::$_0,WGSL::zeroValue(WGSL::Type const*)::$_1,WGSL::zeroValue(WGSL::Type const*)::$_2,WGSL::zeroValue(WGSL::Type const*)::$_3,WGSL::zeroValue(WGSL::Type const*)::$_4,WGSL::zeroValue(WGSL::Type const*)::$_5,WGSL::zeroValue(WGSL::Type const*)::$_6,WGSL::zeroValue(WGSL::Type const*)::$_7,WGSL::zeroValue(WGSL::Type const*)::$_8,WGSL::zeroValue(WGSL::Type const*)::$_9,WGSL::zeroValue(WGSL::Type const*)::$_10,WGSL::zeroValue(WGSL::Type const*)::$_11,WGSL::zeroValue(WGSL::Type const*)::$_12,WGSL::zeroValue(WGSL::Type const*)::$_13,WGSL::zeroValue(WGSL::Type const*)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

WTF::String *WGSL::constantBitcast(WGSL::Type const*,WTF::FixedVector<WGSL::ConstantValue> const&)::$_1::operator()(WTF::String *result, unsigned int **a2, float *a3, unsigned int a4)
{
  WTF::String *v6;
  float v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _DWORD *v14;
  uint64_t v15;
  double v16;
  char v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  float v24;
  _BOOL4 v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = result;
  switch(*((_DWORD *)a3 + 4))
  {
    case 0:
    case 3:
    case 4:
      v7 = *a3;
      goto LABEL_3;
    case 2:
      v16 = *(double *)a3;
      WGSL::convertFloat<float,double>(double)::max = 2139095039;
      WGSL::convertFloat<float,double>(double)::lowest = -8388609;
      if (v16 <= 3.40282347e38 && v16 >= -3.40282347e38)
      {
        v24 = v16;
        v7 = v24;
LABEL_3:
        v8 = *a2;
        v9 = **a2;
        if (v9 <= a4)
        {
          __break(0xC471u);
          JUMPOUT(0x1825F7C94);
        }
        v10 = &v8[6 * a4];
        v11 = v10 + 2;
        v12 = v10[6];
        if ((_DWORD)v12 != -1)
        {
          if ((_DWORD)v12 == 1)
          {
            *(_WORD *)v11 = LOWORD(v7);
            goto LABEL_9;
          }
          result = (WTF::String *)((uint64_t (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v12])(&v30, v11);
          v8 = *a2;
          v9 = **a2;
        }
        *(_WORD *)v11 = LOWORD(v7);
        v11[4] = 1;
LABEL_9:
        if (v9 <= a4 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1825F7CB4);
        }
        v13 = &v8[6 * a4 + 6];
        v14 = v13 + 2;
        v15 = v13[6];
        if ((_DWORD)v15 != -1)
        {
          if ((_DWORD)v15 == 1)
          {
            *(_WORD *)v14 = HIWORD(v7);
LABEL_15:
            *(_BYTE *)v6 = 0;
            *((_BYTE *)v6 + 8) = 0;
            return result;
          }
          result = (WTF::String *)((uint64_t (*)(uint64_t *, _DWORD *))off_1E0FD7CC8[v15])(&v30, v14);
        }
        *(_WORD *)v14 = HIWORD(v7);
        v14[4] = 1;
        goto LABEL_15;
      }
      WTF::String::number(result, v16);
      if (v28)
      {
        v19 = *(_DWORD *)(v28 + 4);
        if (v19 < 0)
          goto LABEL_60;
        v21 = __OFADD__(v19, 31);
        v20 = v19 + 31;
        if (v21)
          goto LABEL_60;
      }
      else
      {
        v20 = 31;
        if (v18)
          goto LABEL_60;
      }
      if (!__OFADD__(v20, 6))
      {
        v27 = !v28 || (*(_BYTE *)(v28 + 16) & 4) != 0;
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v20 + 6), v27, (int8x16_t *)"value ", 6u, v28, (int8x16_t *)" cannot be represented as 'f32'", 0x1Fu, &v30);
        if (v30)
        {
          *(_QWORD *)v6 = v30;
          *((_BYTE *)v6 + 8) = 1;
          v30 = 0;
          result = (WTF::String *)v28;
          if (v28)
          {
            v26 = *(_DWORD *)v28 - 2;
            if (*(_DWORD *)v28 == 2)
              return (WTF::String *)WTF::StringImpl::destroy();
            goto LABEL_44;
          }
          return result;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x1825F7CECLL);
      }
LABEL_60:
      v30 = 0;
      goto LABEL_61;
    case 5:
      result = *(WTF::String **)a3;
      if ((int)*(_QWORD *)a3 == *(_QWORD *)a3)
      {
        LODWORD(v7) = *(_QWORD *)a3;
        goto LABEL_3;
      }
      WTF::String::number(result);
      if (v29)
      {
        v22 = *(_DWORD *)(v29 + 4);
        if (v22 < 0)
          goto LABEL_58;
        v21 = __OFADD__(v22, 31);
        v23 = v22 + 31;
        if (v21)
          goto LABEL_58;
      }
      else
      {
        v23 = 31;
        if (v21)
        {
LABEL_58:
          v30 = 0;
          goto LABEL_59;
        }
      }
      if (__OFADD__(v23, 6))
        goto LABEL_58;
      v25 = !v29 || (*(_BYTE *)(v29 + 16) & 4) != 0;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::AST::Identifier,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((v23 + 6), v25, (int8x16_t *)"value ", 6u, v29, (int8x16_t *)" cannot be represented as 'i32'", 0x1Fu, &v30);
      if (!v30)
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x1825F7CE0);
      }
      *(_QWORD *)v6 = v30;
      *((_BYTE *)v6 + 8) = 1;
      result = (WTF::String *)v29;
      v30 = 0;
      if (v29)
      {
        v26 = *(_DWORD *)v29 - 2;
        if (*(_DWORD *)v29 == 2)
          return (WTF::String *)WTF::StringImpl::destroy();
LABEL_44:
        *(_DWORD *)result = v26;
      }
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x1825F7CD4);
  }
}

uint64_t WGSL::convertValue<WGSL::BitwiseCast>(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  int v13;
  _WORD v14[8];
  int v15;
  _DWORD v16[4];
  int v17;
  _BYTE v18[16];
  int v19;
  _DWORD v20[4];
  int v21;
  _DWORD v22[4];
  int v23;
  _BYTE v24[16];
  int v25;
  char v26;

  if (*(_DWORD *)(a2 + 48))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x1825F7F34);
  }
  switch(*(_BYTE *)a2)
  {
    case 0:
      v24[0] = 0;
      v25 = -1;
      v9 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(char *, _BYTE *))off_1E0FD8010[v9])(&v26, v24);
        v25 = v9;
      }
      __break(0xC471u);
      JUMPOUT(0x1825F7FE8);
    case 1:
      LOBYTE(v22[0]) = 0;
      v23 = -1;
      v4 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v4 == -1
        || (((void (*)(char *, _DWORD *))off_1E0FD8010[v4])(&v26, v22), v23 = v4, (v4 - 3) >= 2)
        && (_DWORD)v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F7F54);
      }
      *a1 = v22[0];
      a1[4] = 3;
      return ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v4])(&v26, v22);
    case 2:
      LOBYTE(v20[0]) = 0;
      v21 = -1;
      v7 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v7 == -1
        || (((void (*)(char *, _DWORD *))off_1E0FD8010[v7])(&v26, v20), v21 = v7, (v7 - 3) >= 2)
        && (_DWORD)v7)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F7F74);
      }
      *a1 = v20[0];
      a1[4] = 4;
      return ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v7])(&v26, v20);
    case 3:
      v18[0] = 0;
      v19 = -1;
      v10 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v10 != -1)
      {
        ((void (*)(char *, _BYTE *))off_1E0FD8010[v10])(&v26, v18);
        v19 = v10;
      }
      __break(0xC471u);
      JUMPOUT(0x1825F803CLL);
    case 4:
      LOBYTE(v14[0]) = 0;
      v15 = -1;
      v6 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v6 == -1)
        goto LABEL_19;
      result = ((uint64_t (*)(char *, _WORD *))off_1E0FD8010[v6])(&v26, v14);
      v15 = v6;
      if ((_DWORD)v6 != 1)
        goto LABEL_19;
      *(_WORD *)a1 = v14[0];
      a1[4] = 1;
      return result;
    case 5:
      LOBYTE(v16[0]) = 0;
      v17 = -1;
      v8 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v8 == -1
        || (((void (*)(char *, _DWORD *))off_1E0FD8010[v8])(&v26, v16), v17 = v8, (v8 - 3) >= 2)
        && (_DWORD)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F7F94);
      }
      *a1 = v16[0];
      a1[4] = 0;
      return ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v8])(&v26, v16);
    case 7:
      v12[0] = 0;
      v13 = -1;
      v11 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v11 != -1)
      {
        ((void (*)(char *, _BYTE *))off_1E0FD8010[v11])(&v26, v12);
        v13 = v11;
      }
      __break(0xC471u);
      JUMPOUT(0x1825F80B0);
    default:
      __break(0xC471u);
      JUMPOUT(0x1825F805CLL);
  }
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  _DWORD *v4;
  uint64_t v5;
  float result;
  char v7;

  v4 = *(_DWORD **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1E0FD7CC8[v5])(&v7, v4);
  }
  result = *a3;
  *v4 = *(_DWORD *)a3;
  v4[4] = 0;
  return result;
}

__int16 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_@<H0>(uint64_t *a1@<X0>, __int16 *a2@<X1>, __int16 *a3@<X2>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *a3;
      *a2 = *a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v7, v4);
  }
  result = *a3;
  *(_WORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 1;
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t *a1, _QWORD *a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      result = *a3;
      *a2 = *(_QWORD *)a3;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v7, v4);
  }
  result = *a3;
  *(double *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v5])(&v6, v4);
  }
  v4[4] = -1;
  *v4 = *a3;
  v4[4] = 3;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E0FD7CC8[v5])(&v6, v4);
  }
  v4[4] = -1;
  *v4 = *a3;
  v4[4] = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 5;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 6)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 16) = 6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm7ELm7EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 7)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v14, v4);
LABEL_10:
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 16) = 7;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(unsigned int *)v7;
    if ((_DWORD)v8)
    {
      v9 = 24 * v8;
      v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = (WTF **)(v10 - 4);
        v11 = *v10;
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, WTF **))off_1E0FD7CC8[v11])(&v13, a2);
        *v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm8ELm8EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 8)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v14, v4);
LABEL_10:
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 16) = 8;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(unsigned int *)v7;
    if ((_DWORD)v8)
    {
      v9 = 24 * v8;
      v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = (WTF **)(v10 - 4);
        v11 = *v10;
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, WTF **))off_1E0FD7CC8[v11])(&v13, a2);
        *v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9ELm9EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 9)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 16) = -1;
    *(_QWORD *)v4 = *a3;
    v12 = a3[1];
    a3[1] = 0;
    *(_QWORD *)(v4 + 8) = v12;
    *(_DWORD *)(v4 + 16) = 9;
    return result;
  }
  *a2 = *a3;
  v6 = a3[1];
  a3[1] = 0;
  v7 = (WTF *)a2[1];
  a2[1] = v6;
  if (v7)
  {
    v8 = *(unsigned int *)v7;
    if ((_DWORD)v8)
    {
      v9 = 24 * v8;
      v10 = (_DWORD *)((char *)v7 + 24);
      do
      {
        a2 = v10 - 4;
        v11 = *v10;
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, _QWORD *))off_1E0FD7CC8[v11])(&v13, a2);
        *v10 = -1;
        v10 += 6;
        v9 -= 24;
      }
      while (v9);
    }
    return WTF::fastFree(v7, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10ELm10EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEEOSR_EEEDcSJ_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_15;
  if ((_DWORD)v5 != 10)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E0FD7CC8[v5])(&v14, v4);
LABEL_15:
    *(_QWORD *)v4 = 0;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 16) = 10;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v8)
    {
      v9 = v7;
      do
      {
        v10 = *(_DWORD **)v9;
        if (*(_QWORD *)v9 != -1)
        {
          v11 = *(unsigned int *)(v9 + 24);
          if ((_DWORD)v11 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD7CC8[v11])(&v13, v9 + 8);
            v10 = *(_DWORD **)v9;
          }
          *(_DWORD *)(v9 + 24) = -1;
          *(_QWORD *)v9 = 0;
          if (v10)
          {
            if (*v10 == 2)
              WTF::StringImpl::destroy();
            else
              *v10 -= 2;
          }
        }
        v9 += 32;
        --v8;
      }
      while (v8);
    }
    return WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t i;
  _DWORD **v4;
  uint64_t v5;
  WTF **v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v19;
  WTF *v21;
  WTF *v23;
  _DWORD *v24;
  uint64_t v27;
  char v28;
  char v29;

  v2 = a1;
  v27 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v27)
  {
    for (i = 0; i != v27; ++i)
    {
      v4 = (_DWORD **)(v2 + 48 * i);
      if (*v4 != (_DWORD *)-1)
      {
        v5 = v2 + 48 * i;
        v6 = (WTF **)(v5 + 32);
        v7 = *(_DWORD *)(v5 + 44);
        if (v7)
        {
          v8 = *v6;
          v9 = (uint64_t)*v6 + 88 * v7;
          do
          {
            v10 = *((_QWORD *)v8 + 10);
            *((_QWORD *)v8 + 10) = 0;
            if (v10)
            {
              v11 = *(unsigned int *)(v10 + 24);
              if ((_DWORD)v11 != -1)
                ((void (*)(char *, uint64_t))off_1E0FD7D78[v11])(&v28, v10);
              *(_DWORD *)(v10 + 24) = -1;
              MEMORY[0x186DAB2A8](v10, 0x1062C40D964B916);
            }
            v12 = *((unsigned int *)v8 + 15);
            if ((_DWORD)v12)
            {
              v13 = (uint64_t *)*((_QWORD *)v8 + 6);
              v14 = 8 * v12;
              do
              {
                v15 = *v13;
                *v13 = 0;
                if (v15)
                {
                  v16 = *(unsigned int *)(v15 + 24);
                  if ((_DWORD)v16 != -1)
                    ((void (*)(char *, uint64_t))off_1E0FD7D78[v16])(&v29, v15);
                  *(_DWORD *)(v15 + 24) = -1;
                  MEMORY[0x186DAB2A8](v15, 0x1062C40D964B916);
                }
                ++v13;
                v14 -= 8;
              }
              while (v14);
            }
            v17 = (WTF *)*((_QWORD *)v8 + 6);
            if ((WTF *)((char *)v8 + 64) == v17 || v17 == 0)
            {
              v19 = (WTF *)*((_QWORD *)v8 + 3);
              if ((WTF *)((char *)v8 + 40) == v19 || v19 == 0)
              {
LABEL_30:
                v21 = *(WTF **)v8;
                if ((WTF *)((char *)v8 + 16) != *(WTF **)v8)
                  goto LABEL_37;
                goto LABEL_8;
              }
            }
            else
            {
              *((_QWORD *)v8 + 6) = 0;
              *((_DWORD *)v8 + 14) = 0;
              WTF::fastFree(v17, a2);
              v19 = (WTF *)*((_QWORD *)v8 + 3);
              if ((WTF *)((char *)v8 + 40) == v19 || v19 == 0)
                goto LABEL_30;
            }
            *((_QWORD *)v8 + 3) = 0;
            *((_DWORD *)v8 + 8) = 0;
            WTF::fastFree(v19, a2);
            v21 = *(WTF **)v8;
            if ((WTF *)((char *)v8 + 16) != *(WTF **)v8)
            {
LABEL_37:
              if (v21)
              {
                *(_QWORD *)v8 = 0;
                *((_DWORD *)v8 + 2) = 0;
                WTF::fastFree(v21, a2);
              }
            }
LABEL_8:
            v8 = (WTF *)((char *)v8 + 88);
          }
          while (v8 != (WTF *)v9);
        }
        v23 = *v6;
        v2 = a1;
        if (*v6)
        {
          *v6 = 0;
          *(_DWORD *)(a1 + 48 * i + 40) = 0;
          WTF::fastFree(v23, a2);
        }
        v24 = *v4;
        *v4 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WTF::StringImpl::destroy();
          else
            *v24 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(v2 - 16), a2);
}

uint64_t WTF::FixedVector<WGSL::ConstantValue>::FixedVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  char v19;

  if (a3)
  {
    v6 = 24 * a3;
    v7 = (_DWORD *)WTF::fastMalloc((WTF *)(v6 + 8));
    v8 = v7;
    *v7 = a3;
    if ((_DWORD)a3)
      bzero(v7 + 2, 24 * ((v6 - 24) / 0x18uLL) + 24);
    v9 = 0;
    *a1 = v8;
    v10 = 24 * a3;
    v11 = -1;
    while (1)
    {
      while (1)
      {
        v12 = (_DWORD *)*a1;
        if (*(_DWORD *)*a1 <= ++v11)
        {
          result = 146;
          __break(0xC471u);
          return result;
        }
        v13 = &v12[v9 / 4];
        v14 = (uint64_t)&v12[v9 / 4 + 2];
        v15 = v12[v9 / 4 + 6];
        v16 = *(unsigned int *)(a2 + v9 + 16);
        if ((_DWORD)v15 != -1)
          break;
        if ((_DWORD)v16 != -1)
          goto LABEL_6;
LABEL_7:
        v9 += 24;
        if (v10 == v9)
          return (uint64_t)a1;
      }
      if ((_DWORD)v16 != -1)
      {
LABEL_6:
        v18 = v14;
        ((void (*)(uint64_t *))off_1E0FD80E0[v16])(&v18);
        goto LABEL_7;
      }
      ((void (*)(char *, uint64_t))off_1E0FD7CC8[v15])(&v19, v14);
      v13[6] = -1;
      v9 += 24;
      if (v10 == v9)
        return (uint64_t)a1;
    }
  }
  *a1 = 0;
  return (uint64_t)a1;
}

void std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD81F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FD81F0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int16 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  unsigned __int8 **v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned __int16 v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  char v34;
  _QWORD *v35;
  char v36;
  _QWORD v37[2];
  __int128 v38;
  uint64_t v39;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a2 + 108);
  if (v4 <= 1)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(*(_DWORD **)(a1 + 8), 0, (__int128 *)(a2 + 8), "'ptr' requires at least 2 template argument", 44);
    return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  }
  if (v4 >= 4)
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(*(_DWORD **)(a1 + 8), 0, (__int128 *)(a2 + 8), "'ptr' requires at most 3 template argument", 43);
    return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  }
  v5 = **(_QWORD **)(a2 + 96);
  v6 = *(_WORD *)(v3 + 104);
  *(_WORD *)(v3 + 104) = 3;
  WGSL::AST::Visitor::visit((_BYTE *)v3, v5);
  v7 = *(unsigned __int8 **)(v3 + 88);
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 104) = v6;
  v8 = *(_QWORD *)(v3 + 112);
  v9 = *(unsigned __int8 **)(v8 + 24);
  if (v9 == v7)
    return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  v10 = *(unsigned __int8 **)(v8 + 136);
  v11 = v7 == v10 || v9 == v10;
  if (!v11 && WGSL::conversionRank(v10, v7) == -1)
  {
    *(_QWORD *)&v38 = "' as address space";
    *((_QWORD *)&v38 + 1) = 19;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v7, &v38);
    return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) != 22)
  {
    __break(0xC471u);
    goto LABEL_60;
  }
  v12 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseAddressSpace(WTF::String const&)::__map, (uint64_t *)(v5 + 88));
  if (*(_DWORD *)(a2 + 108) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1825F9104);
  }
  v13 = *(unsigned __int8 *)v12;
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14) == 22)
  {
    v16 = WGSL::TypeChecker::lookupType((WGSL::TypeChecker *)v3, (const WGSL::AST::Identifier *)(v14 + 64), v15);
    *(_QWORD *)(v3 + 88) = v16;
    v17 = *((unsigned int *)v16 + 12);
    if ((_DWORD)v17 != 13)
      goto LABEL_15;
LABEL_30:
    *(_QWORD *)&v38 = "' requires template arguments";
    *((_QWORD *)&v38 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v14 + 8), (int8x16_t *)"type '", 7, (uint64_t)v16, &v38);
    v16 = *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
    *(_QWORD *)(v14 + 24) = v16;
    *(_QWORD *)(v3 + 88) = 0;
    return v16;
  }
  WGSL::AST::Visitor::visit((_BYTE *)v3, v14);
  v16 = *(_QWORD **)(v3 + 88);
  v17 = *((unsigned int *)v16 + 12);
  if ((_DWORD)v17 == 13)
    goto LABEL_30;
LABEL_15:
  v18 = *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v3 + 88) = 0;
  if (v18 == v16)
    return v16;
  if ((_DWORD)v17 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_56:
    __break(0xC471u);
    JUMPOUT(0x1825F90FCLL);
  }
  *(_QWORD *)&v38 = v37;
  if ((((uint64_t (*)(__int128 *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type10isStorableEvE3__0JZNKS9_10isStorableEvE3__1ZNKS9_10isStorableEvE3__2ZNKS9_10isStorableEvE3__3ZNKS9_10isStorableEvE3__4ZNKS9_10isStorableEvE3__5ZNKS9_10isStorableEvE3__6ZNKS9_10isStorableEvE3__7ZNKS9_10isStorableEvE3__8ZNKS9_10isStorableEvE3__9ZNKS9_10isStorableEvE4__10ZNKS9_10isStorableEvE4__11ZNKS9_10isStorableEvE4__12ZNKS9_10isStorableEvE4__13ZNKS9_10isStorableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v38, v16) & 1) == 0)
  {
    v20 = (_OWORD *)(a2 + 8);
    v21 = "' cannot be used as the store type of a pointer";
    v22 = 48;
    goto LABEL_22;
  }
  v19 = v16;
  if (*((_DWORD *)v16 + 12) == 12)
  {
    v19 = v16;
    if ((_DWORD)v13 != 3)
    {
      v19 = v16;
      if ((_DWORD)v13 != 5)
      {
        v20 = (_OWORD *)(a2 + 8);
        v21 = "' atomic variables must have <storage> or <workgroup> address space";
        v22 = 68;
LABEL_22:
        *(_QWORD *)&v38 = v21;
        *((_QWORD *)&v38 + 1) = v22;
        WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, v20, 39, (uint64_t)v16, &v38);
        return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
      }
    }
  }
  while (1)
  {
    while (1)
    {
      v25 = *((_DWORD *)v19 + 12);
      if (v25 != 4)
        break;
      v23 = *v19;
      v24 = *(unsigned int *)(*v19 + 84);
      if (!(_DWORD)v24)
        goto LABEL_56;
      v19 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 72) + 8 * v24 - 8) + 104) + 24);
      if (!v19)
        goto LABEL_35;
    }
    if (v25 != 10)
      break;
    v19 = (_QWORD *)v19[1];
    if (!v19)
      goto LABEL_35;
  }
  if (v25 == 3 && (_DWORD)v13 != 3 && !*((_DWORD *)v19 + 4))
  {
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)v3, 0, (__int128 *)(a2 + 8), "runtime-sized arrays can only be used in the <storage> address space", 69);
    return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
  }
LABEL_35:
  if (v4 >= 3)
  {
    v26 = *(_DWORD *)(a2 + 108);
    if ((_DWORD)v13 != 3)
    {
      if (v26 <= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1825F910CLL);
      }
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>((_DWORD *)v3, 0, (__int128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 16) + 8), "only pointers in <storage> address space may specify an access mode", 68);
      return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
    }
    if (v26 > 2)
    {
      v27 = WGSL::TypeChecker::accessMode((WGSL::TypeChecker *)v3, *(WGSL::AST::Expression **)(*(_QWORD *)(a2 + 96) + 16));
      if (v27 <= 0xFFu)
        return *(_QWORD **)(*(_QWORD *)(v3 + 112) + 24);
      goto LABEL_42;
    }
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x1825F90BCLL);
  }
  if (v13 <= 5)
    LOBYTE(v27) = 0x10000010001uLL >> (8 * v13);
  else
    LOBYTE(v27) = 0;
LABEL_42:
  v28 = *(_QWORD *)(v3 + 112);
  v36 = v13;
  v35 = v16;
  v34 = v27;
  v29 = (v13 << 8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v27 << 16) | 7;
  *(_QWORD *)&v38 = v29;
  *((_QWORD *)&v38 + 1) = v16;
  v30 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v28 + 16), (unsigned __int8 *)&v38);
  v31 = *(unsigned __int8 **)(v28 + 16);
  if (v31)
    v31 += 24 * *((unsigned int *)v31 - 1);
  if (v31 == v30 || (v32 = *((_QWORD *)v30 + 2)) == 0)
  {
    v32 = WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(v28, &v36, &v34, (uint64_t *)&v35);
    v39 = v32;
    v37[0] = v29;
    v37[1] = v16;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v28 + 16), (unsigned __int8 *)v37, &v39, (uint64_t)&v38);
  }
  return (_QWORD *)v32;
}

void WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral>(uint64_t a1, int a2, _OWORD *a3, char a4, uint64_t a5, _OWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  char v21;
  _BYTE v22[48];
  unsigned int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v22[0] = 0;
  v23 = -1;
  v11 = *(unsigned int *)(a5 + 48);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E0FD7E68[v11])(v20, v22, a5);
    v23 = v11;
  }
  *(_OWORD *)v20 = *a6;
  WTF::tryMakeString<char,WGSL::Type,WTF::ASCIILiteral>(&v19, a4, (uint64_t)v22, (uint64_t)v20);
  if (!v19)
  {
    __break(0xC471u);
    return;
  }
  *(_QWORD *)v20 = v19;
  *(_OWORD *)&v20[8] = *a3;
  v12 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v12 != *(_DWORD *)(a1 + 128))
  {
    v18 = *(_QWORD *)(a1 + 120) + 24 * v12;
    *(_QWORD *)v18 = v19;
    *(_OWORD *)(v18 + 8) = *(_OWORD *)&v20[8];
    ++*(_DWORD *)(a1 + 132);
    *(_QWORD *)v20 = 0;
LABEL_10:
    v17 = v23;
    if (v23 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
  v13 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v12 + 1, (unint64_t)v20);
  v14 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v15 = *(_QWORD *)v13;
  *(_QWORD *)v13 = 0;
  *(_QWORD *)v14 = v15;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
  v16 = *(_DWORD **)v20;
  ++*(_DWORD *)(a1 + 132);
  *(_QWORD *)v20 = 0;
  if (!v16)
    goto LABEL_10;
  if (*v16 != 2)
  {
    *v16 -= 2;
    v17 = v23;
    if (v23 == -1)
      goto LABEL_12;
LABEL_11:
    ((void (*)(char *, _BYTE *))off_1E0FD7DF0[v17])(&v21, v22);
    goto LABEL_12;
  }
  WTF::StringImpl::destroy();
  v17 = v23;
  if (v23 != -1)
    goto LABEL_11;
LABEL_12:
  if (a2)
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
}

void std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

_QWORD *std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FD8238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FD8238;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1,std::allocator<WGSL::TypeChecker::TypeChecker(WGSL::ShaderModule &)::$_1>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  WGSL::TypeChecker *v3;
  uint64_t v4;
  const WTF::StringImpl *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  char *v12;
  WGSL::TypeChecker *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;

  v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    v11 = (__int128 *)(a2 + 8);
    v12 = "'atomic' requires 1 template arguments";
    v13 = *(WGSL::TypeChecker **)(a1 + 8);
    v14 = 39;
    goto LABEL_10;
  }
  v4 = **(_QWORD **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) == 22)
  {
    result = (uint64_t)WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v4 + 64), v5);
    v7 = result;
    *((_QWORD *)v3 + 11) = result;
    if (*(_DWORD *)(result + 48) != 13)
      goto LABEL_4;
LABEL_13:
    *(_QWORD *)&v18 = "' requires template arguments";
    *((_QWORD *)&v18 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v4 + 8), (int8x16_t *)"type '", 7, v7, &v18);
    v15 = *(_QWORD *)(*((_QWORD *)v3 + 14) + 24);
    *(_QWORD *)(v4 + 24) = v15;
    *((_QWORD *)v3 + 11) = 0;
    return v15;
  }
  result = WGSL::AST::Visitor::visit(v3, v4);
  v7 = *((_QWORD *)v3 + 11);
  if (*(_DWORD *)(v7 + 48) == 13)
    goto LABEL_13;
LABEL_4:
  v8 = (_QWORD *)*((_QWORD *)v3 + 14);
  v9 = v8[3];
  *(_QWORD *)(v4 + 24) = v7;
  *((_QWORD *)v3 + 11) = 0;
  if (v9 == v7)
    return v7;
  v10 = v8[8];
  if (v7 == v10 || v7 == v8[9])
  {
    v16 = v7 == v10;
    v17 = 24;
    if (v16)
      v17 = 23;
    return v8[v17];
  }
  else
  {
    if (*(_DWORD *)(a2 + 108))
    {
      v11 = (__int128 *)(**(_QWORD **)(a2 + 96) + 8);
      v12 = "atomic only supports i32 or u32 types";
      v13 = v3;
      v14 = 38;
LABEL_10:
      WGSL::TypeChecker::typeError<WTF::ASCIILiteral>(v13, 0, v11, v12, v14);
      return *(_QWORD *)(*((_QWORD *)v3 + 14) + 24);
    }
    __break(0xC471u);
  }
  return result;
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E0FD8280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E0FD8280;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_2 const&,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  WGSL::TypeChecker *v3;
  uint64_t v5;
  const WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  uint64_t (*v15)(_QWORD *, _QWORD, _QWORD *);
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  __int128 v19;

  v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(_BYTE **)(a1 + 8), (__int128 *)(a2 + 8), 39, *(_QWORD *)(a2 + 88), (int8x16_t *)"' requires 1 template argument", 31);
    return *(_QWORD *)(*((_QWORD *)v3 + 14) + 24);
  }
  v5 = **(_QWORD **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 22)
  {
    v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((_QWORD *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13)
      goto LABEL_4;
LABEL_11:
    *(_QWORD *)&v19 = "' requires template arguments";
    *((_QWORD *)&v19 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v19);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    *(_QWORD *)(v5 + 24) = v7;
    *((_QWORD *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  v7 = (_QWORD *)*((_QWORD *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13)
    goto LABEL_11;
LABEL_4:
  v8 = *((_QWORD *)v3 + 14);
  v9 = *(_QWORD **)(v8 + 24);
  *(_QWORD *)(v5 + 24) = v7;
  *((_QWORD *)v3 + 11) = 0;
  if (v9 == v7)
    return (uint64_t)v7;
  v10 = (unsigned __int8 *)v7;
  while (1)
  {
    v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10)
      break;
    v10 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (!v10)
      goto LABEL_22;
  }
  if (v11 || ((v13 = *v10, v13 >= 6) ? (v14 = v13 == 7) : (v14 = 1), !v14))
  {
LABEL_22:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v19) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (__int128 *)(a2 + 8), v19);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    v18 = (_DWORD *)v19;
    *(_QWORD *)&v19 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WTF::StringImpl::destroy();
      else
        *v18 -= 2;
    }
    return (uint64_t)v7;
  }
  v15 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (_QWORD *)(v8 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*v17 + v15);
  return v15(v17, *(unsigned __int8 *)(a1 + 40), v7);
}

_BYTE *WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(_BYTE *result, __int128 *a2, char a3, uint64_t a4, int8x16_t *a5, uint64_t a6)
{
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  _BYTE *v20;
  int8x16_t *v21;
  size_t v22;
  _BYTE *v23;
  unint64_t v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  uint64_t v27;
  _WORD *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  char *v35;
  char *v36;
  char *v37;
  size_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  _BYTE *v42;
  int8x16_t *v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  _WORD *v49;
  int8x16_t *v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  _WORD *v54;
  unint64_t v55;
  __int128 v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  _WORD *v64;
  int8x16_t *v65;
  __int16 v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint8x8_t *v74;
  uint16x8_t *v75;
  unint64_t v76;
  uint8x16_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint8x8_t *v80;
  uint16x8_t *v81;
  unint64_t v82;
  uint8x8_t v83;
  int8x16_t *v84;
  int8x16_t *v85;
  unint64_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int16x8_t *v91;
  int8x8_t *v92;
  unint64_t v93;
  int16x8_t v94;
  uint8x8_t *v95;
  uint16x8_t *v96;
  unint64_t v97;
  uint8x16_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint8x8_t *v101;
  uint16x8_t *v102;
  unint64_t v103;
  uint8x8_t v104;
  _DWORD *v105;
  __int128 v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;

  v10 = result;
  if (a4)
  {
    *(_DWORD *)a4 += 2;
    if (a6)
      v11 = a6 - 1;
    else
      v11 = 0;
    if (v11 >> 31)
      goto LABEL_126;
    LODWORD(v12) = *(_DWORD *)(a4 + 4);
  }
  else
  {
    if (a6)
      v11 = a6 - 1;
    else
      v11 = 0;
    v12 = v11 >> 31;
    if (v11 >> 31)
      goto LABEL_126;
  }
  if (((v12 | v11) & 0x80000000) != 0)
    goto LABEL_126;
  v13 = __OFADD__((_DWORD)v12, (_DWORD)v11);
  v14 = v12 + v11;
  if (v13)
    goto LABEL_126;
  v15 = (v14 + 1);
  if (__OFADD__(v14, 1))
    goto LABEL_126;
  if (!a4 || (*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    if (v14 == -1)
      goto LABEL_29;
    if ((v15 & 0x80000000) == 0)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v15 + 20));
      v16 = v105;
      if (v105)
      {
        *v105 = 2;
        v16[1] = v15;
        *((_BYTE *)v16 + 20) = a3;
        *((_QWORD *)v16 + 1) = v16 + 5;
        v16[4] = 4;
        v20 = (char *)v16 + 21;
        if (!a4)
        {
          v27 = 0;
          if (!(_DWORD)v11)
            goto LABEL_80;
          goto LABEL_66;
        }
        v21 = *(int8x16_t **)(a4 + 8);
        v22 = *(unsigned int *)(a4 + 4);
        if ((*(_BYTE *)(a4 + 16) & 4) != 0)
        {
          if ((_DWORD)v22)
          {
            if ((_DWORD)v22 == 1)
              *v20 = v21->i8[0];
            else
              result = memcpy((char *)v16 + 21, v21, v22);
          }
LABEL_65:
          v27 = *(unsigned int *)(a4 + 4);
          if (!(_DWORD)v11)
            goto LABEL_80;
LABEL_66:
          result = &v20[v27];
          if ((_DWORD)v11 == 1)
            *result = a5->i8[0];
          else
            result = memcpy(result, a5, v11);
          goto LABEL_80;
        }
        v23 = &v20[v22];
        if (v22 < 0x10)
        {
          v24 = (unint64_t)v16 + 21;
          if (v20 == v23)
            goto LABEL_65;
        }
        else
        {
          v24 = (unint64_t)&v20[v22 & 0xFFFFFFF0];
          v25 = (unsigned __int128 *)((char *)v16 + 21);
          do
          {
            v26 = (unsigned __int128)vld2q_s8(v21->i8);
            v21 += 2;
            *v25++ = v26;
          }
          while (v25 != (unsigned __int128 *)v24);
          if ((_BYTE *)v24 == v23)
            goto LABEL_65;
        }
        v38 = (size_t)v16 + v22;
        v39 = (unint64_t)v16 + v22 - v24 + 21;
        if (v39 < 8
          || (v24 < (unint64_t)&v21[2].u64[1] + 2 * v38 + -2 * v24 + 2
            ? (v40 = (unint64_t)v21 >= v38 + 21)
            : (v40 = 1),
              !v40))
        {
          v42 = (_BYTE *)v24;
          v43 = v21;
          goto LABEL_49;
        }
        if (v39 >= 0x20)
        {
          v41 = v39 & 0xFFFFFFFFFFFFFFE0;
          v84 = v21 + 2;
          v85 = (int8x16_t *)(v24 + 16);
          v86 = v39 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v88 = v84[-2];
            v87 = v84[-1];
            v90 = *v84;
            v89 = v84[1];
            v84 += 4;
            v85[-1] = vuzp1q_s8(v88, v87);
            *v85 = vuzp1q_s8(v90, v89);
            v85 += 2;
            v86 -= 32;
          }
          while (v86);
          if (v39 == v41)
            goto LABEL_65;
          if ((v39 & 0x18) == 0)
          {
            v43 = (int8x16_t *)((char *)v21 + 2 * v41);
            v42 = (_BYTE *)(v24 + v41);
            goto LABEL_49;
          }
        }
        else
        {
          v41 = 0;
        }
        v42 = (_BYTE *)(v24 + (v39 & 0xFFFFFFFFFFFFFFF8));
        v43 = (int8x16_t *)((char *)v21 + 2 * (v39 & 0xFFFFFFFFFFFFFFF8));
        v91 = (int16x8_t *)((char *)v21 + 2 * v41);
        v92 = (int8x8_t *)(v24 + v41);
        v93 = v41 - (v39 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v94 = *v91++;
          *v92++ = vmovn_s16(v94);
          v93 += 8;
        }
        while (v93);
        if (v39 == (v39 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_65;
        do
        {
LABEL_49:
          v44 = v43->i8[0];
          v43 = (int8x16_t *)((char *)v43 + 2);
          *v42++ = v44;
        }
        while (v42 != v23);
        goto LABEL_65;
      }
    }
LABEL_126:
    __break(0xC471u);
    JUMPOUT(0x1825F9E3CLL);
  }
  if (v14 == -1)
  {
LABEL_29:
    v16 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_80;
  }
  if (v15 > 0x7FFFFFEF)
    goto LABEL_126;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v15 + 20));
  v16 = v105;
  if (!v105)
    goto LABEL_126;
  *v105 = 2;
  v16[1] = v15;
  *((_WORD *)v16 + 10) = a3;
  *((_QWORD *)v16 + 1) = v16 + 5;
  v16[4] = 0;
  v17 = (_WORD *)v16 + 11;
  v18 = *(int8x16_t **)(a4 + 8);
  v19 = *(unsigned int *)(a4 + 4);
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
  {
    v28 = &v17[v19];
    if (v19 < 0x40)
    {
      v29 = (unint64_t)v16 + 22;
    }
    else
    {
      v29 = (unint64_t)&v17[v19 & 0xFFFFFFC0];
      v30 = 0uLL;
      v31 = (char *)v16 + 22;
      do
      {
        v107.val[0] = *v18;
        v32 = v18[1];
        v109.val[0] = v18[2];
        v33 = v18[3];
        v18 += 4;
        v34 = v33;
        v109.val[1] = 0uLL;
        v111.val[0] = v32;
        v107.val[1] = 0uLL;
        v35 = v31;
        vst2q_s8(v35, v107);
        v35 += 32;
        v111.val[1] = 0uLL;
        vst2q_s8(v35, v111);
        v36 = v31 + 64;
        vst2q_s8(v36, v109);
        v37 = v31 + 96;
        vst2q_s8(v37, *(int8x16x2_t *)(&v30 - 1));
        v31 += 128;
      }
      while (v31 != (char *)v29);
    }
    if ((_WORD *)v29 == v28)
      goto LABEL_70;
    v45 = (unint64_t)v16 + 2 * v19 - v29 + 20;
    if (v45 < 0xE
      || (v29 < (unint64_t)v18->u64 + (v45 >> 1) + 1
        ? (v46 = (unint64_t)v18 >= (v45 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
        : (v46 = 1),
          !v46))
    {
      v49 = (_WORD *)v29;
      v50 = v18;
      goto LABEL_62;
    }
    v47 = (v45 >> 1) + 1;
    if (v45 >= 0x3E)
    {
      v48 = v47 & 0xFFFFFFFFFFFFFFE0;
      v95 = (uint8x8_t *)&v18[1];
      v96 = (uint16x8_t *)(v29 + 32);
      v97 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v98 = *(uint8x16_t *)v95[-2].i8;
        v99 = vmovl_u8(*v95);
        v100 = vmovl_high_u8(*(uint8x16_t *)v95->i8);
        v96[-2] = vmovl_u8(*(uint8x8_t *)v98.i8);
        v96[-1] = vmovl_high_u8(v98);
        *v96 = v99;
        v96[1] = v100;
        v96 += 4;
        v95 += 4;
        v97 -= 32;
      }
      while (v97);
      if (v47 == v48)
        goto LABEL_70;
      if ((v47 & 0x18) == 0)
      {
        v50 = (int8x16_t *)((char *)v18 + v48);
        v49 = (_WORD *)(v29 + 2 * v48);
        goto LABEL_62;
      }
    }
    else
    {
      v48 = 0;
    }
    v49 = (_WORD *)(v29 + 2 * (v47 & 0xFFFFFFFFFFFFFFF8));
    v50 = (int8x16_t *)((char *)v18 + (v47 & 0xFFFFFFFFFFFFFFF8));
    v101 = (uint8x8_t *)&v18->i8[v48];
    v102 = (uint16x8_t *)(v29 + 2 * v48);
    v103 = v48 - (v47 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v104 = *v101++;
      *v102++ = vmovl_u8(v104);
      v103 += 8;
    }
    while (v103);
    if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_70;
    do
    {
LABEL_62:
      v51 = v50->u8[0];
      v50 = (int8x16_t *)((char *)v50 + 1);
      *v49++ = v51;
    }
    while (v49 != v28);
    goto LABEL_70;
  }
  if ((_DWORD)v19)
  {
    if ((_DWORD)v19 == 1)
      *v17 = v18->i16[0];
    else
      result = memcpy((char *)v16 + 22, v18, 2 * v19);
  }
LABEL_70:
  v52 = *(unsigned int *)(a4 + 4);
  v53 = (unint64_t)&v17[v52];
  v54 = (_WORD *)(v53 + 2 * v11);
  if ((v11 & 0xFFFFFFC0) != 0)
  {
    v55 = v53 + 2 * (v11 & 0xFFFFFFC0);
    v56 = 0uLL;
    do
    {
      v108.val[0] = *a5;
      v57 = a5[1];
      v110.val[0] = a5[2];
      v58 = a5[3];
      a5 += 4;
      v59 = v58;
      v110.val[1] = 0uLL;
      v112.val[0] = v57;
      v108.val[1] = 0uLL;
      v60 = (char *)v53;
      vst2q_s8(v60, v108);
      v60 += 32;
      v112.val[1] = 0uLL;
      vst2q_s8(v60, v112);
      v61 = (char *)(v53 + 64);
      vst2q_s8(v61, v110);
      v62 = (char *)(v53 + 96);
      vst2q_s8(v62, *(int8x16x2_t *)(&v56 - 1));
      v53 += 128;
    }
    while (v53 != v55);
    v53 = v55;
  }
  if ((_WORD *)v53 != v54)
  {
    v63 = (unint64_t)v16 + 2 * v11 + 2 * v52 - v53 + 20;
    if (v63 < 0xE
      || v53 < (unint64_t)a5->u64 + (v63 >> 1) + 1
      && (unint64_t)a5 < (v63 & 0xFFFFFFFFFFFFFFFELL) + v53 + 2)
    {
      v64 = (_WORD *)v53;
      v65 = a5;
      goto LABEL_79;
    }
    v72 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      v73 = v72 & 0xFFFFFFFFFFFFFFE0;
      v74 = (uint8x8_t *)&a5[1];
      v75 = (uint16x8_t *)(v53 + 32);
      v76 = v72 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v77 = *(uint8x16_t *)v74[-2].i8;
        v78 = vmovl_u8(*v74);
        v79 = vmovl_high_u8(*(uint8x16_t *)v74->i8);
        v75[-2] = vmovl_u8(*(uint8x8_t *)v77.i8);
        v75[-1] = vmovl_high_u8(v77);
        *v75 = v78;
        v75[1] = v79;
        v75 += 4;
        v74 += 4;
        v76 -= 32;
      }
      while (v76);
      if (v72 == v73)
        goto LABEL_80;
      if ((v72 & 0x18) == 0)
      {
        v65 = (int8x16_t *)((char *)a5 + v73);
        v64 = (_WORD *)(v53 + 2 * v73);
        do
        {
LABEL_79:
          v66 = v65->u8[0];
          v65 = (int8x16_t *)((char *)v65 + 1);
          *v64++ = v66;
        }
        while (v64 != v54);
        goto LABEL_80;
      }
    }
    else
    {
      v73 = 0;
    }
    v64 = (_WORD *)(v53 + 2 * (v72 & 0xFFFFFFFFFFFFFFF8));
    v65 = (int8x16_t *)((char *)a5 + (v72 & 0xFFFFFFFFFFFFFFF8));
    v80 = (uint8x8_t *)&a5->i8[v73];
    v81 = (uint16x8_t *)(v53 + 2 * v73);
    v82 = v73 - (v72 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v83 = *v80++;
      *v81++ = vmovl_u8(v83);
      v82 += 8;
    }
    while (v82);
    if (v72 != (v72 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_79;
  }
LABEL_80:
  v105 = v16;
  v106 = *a2;
  v67 = *((unsigned int *)v10 + 33);
  if ((_DWORD)v67 != *((_DWORD *)v10 + 32))
  {
    v71 = *((_QWORD *)v10 + 15) + 24 * v67;
    *(_QWORD *)v71 = v16;
    *(_OWORD *)(v71 + 8) = v106;
    ++*((_DWORD *)v10 + 33);
    v105 = 0;
LABEL_86:
    if (!a4)
      return result;
    goto LABEL_87;
  }
  v68 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v10 + 120), v67 + 1, (unint64_t)&v105);
  v69 = *((_QWORD *)v10 + 15) + 24 * *((unsigned int *)v10 + 33);
  v70 = *(_QWORD *)v68;
  *(_QWORD *)v68 = 0;
  *(_QWORD *)v69 = v70;
  *(_OWORD *)(v69 + 8) = *(_OWORD *)(v68 + 8);
  result = v105;
  ++*((_DWORD *)v10 + 33);
  v105 = 0;
  if (!result)
    goto LABEL_86;
  if (*(_DWORD *)result == 2)
  {
    result = (_BYTE *)WTF::StringImpl::destroy();
    if (!a4)
      return result;
  }
  else
  {
    *(_DWORD *)result -= 2;
    if (!a4)
      return result;
  }
LABEL_87:
  if (*(_DWORD *)a4 == 2)
    return (_BYTE *)WTF::StringImpl::destroy();
  *(_DWORD *)a4 -= 2;
  return result;
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E0FD82C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E0FD82C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3,int,int>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(unsigned char,unsigned char,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_3 const&,int,int &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  WGSL::TypeChecker *v3;
  uint64_t v5;
  const WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  uint64_t (*v17)(_QWORD *, _QWORD, _QWORD, _QWORD *);
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  __int128 v21;

  v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(_BYTE **)(a1 + 8), (__int128 *)(a2 + 8), 39, *(_QWORD *)(a2 + 88), (int8x16_t *)"' requires 1 template argument", 31);
    return *(_QWORD *)(*((_QWORD *)v3 + 14) + 24);
  }
  v5 = **(_QWORD **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 22)
  {
    v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((_QWORD *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13)
      goto LABEL_4;
LABEL_11:
    *(_QWORD *)&v21 = "' requires template arguments";
    *((_QWORD *)&v21 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v21);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    *(_QWORD *)(v5 + 24) = v7;
    *((_QWORD *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  v7 = (_QWORD *)*((_QWORD *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13)
    goto LABEL_11;
LABEL_4:
  v8 = *((_QWORD *)v3 + 14);
  v9 = *(_QWORD **)(v8 + 24);
  *(_QWORD *)(v5 + 24) = v7;
  *((_QWORD *)v3 + 11) = 0;
  if (v9 == v7)
    return (uint64_t)v7;
  v10 = (unsigned __int8 *)v7;
  while (1)
  {
    v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10)
      break;
    v10 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (!v10)
      goto LABEL_21;
  }
  if (v11 || ((v13 = *v10, v14 = v13 > 5, v15 = (1 << v13) & 0x39, !v14) ? (v16 = v15 == 0) : (v16 = 1), v16))
  {
LABEL_21:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v21) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (__int128 *)(a2 + 8), v21);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    v20 = (_DWORD *)v21;
    *(_QWORD *)&v21 = 0;
    if (v20)
    {
      if (*v20 == 2)
        WTF::StringImpl::destroy();
      else
        *v20 -= 2;
    }
    return (uint64_t)v7;
  }
  v17 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD *))(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  v19 = (_QWORD *)(v8 + (v18 >> 1));
  if ((v18 & 1) != 0)
    v17 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD *))(*v19 + v17);
  return v17(v19, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), v7);
}

void std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E0FD8310;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E0FD8310;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void WGSL::TypeChecker::allocateSimpleConstructor<WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4,WGSL::Types::Texture::Kind>(WTF::ASCIILiteral,WGSL::Type const* (WGSL::TypeStore::*)(WGSL::Types::Texture::Kind,WGSL::Type const*),WGSL::TypeChecker::(WGSL::ShaderModule &)::$_4 const&,WGSL::Types::Texture::Kind &&)::{lambda(WGSL::AST::ElaboratedTypeExpression &)#1},std::allocator<WGSL::AST::ElaboratedTypeExpression &>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression)>::operator()(uint64_t a1, uint64_t a2)
{
  WGSL::TypeChecker *v3;
  uint64_t v5;
  const WTF::StringImpl *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v13;
  BOOL v14;
  uint64_t (*v15)(_QWORD *, _QWORD, _QWORD *);
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  __int128 v19;

  v3 = *(WGSL::TypeChecker **)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 1)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(_BYTE **)(a1 + 8), (__int128 *)(a2 + 8), 39, *(_QWORD *)(a2 + 88), (int8x16_t *)"' requires 1 template argument", 31);
    return *(_QWORD *)(*((_QWORD *)v3 + 14) + 24);
  }
  v5 = **(_QWORD **)(a2 + 96);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 22)
  {
    v7 = WGSL::TypeChecker::lookupType(v3, (const WGSL::AST::Identifier *)(v5 + 64), v6);
    *((_QWORD *)v3 + 11) = v7;
    if (*((_DWORD *)v7 + 12) != 13)
      goto LABEL_4;
LABEL_11:
    *(_QWORD *)&v19 = "' requires template arguments";
    *((_QWORD *)&v19 + 1) = 30;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>((uint64_t)v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"type '", 7, (uint64_t)v7, &v19);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    *(_QWORD *)(v5 + 24) = v7;
    *((_QWORD *)v3 + 11) = 0;
    return (uint64_t)v7;
  }
  WGSL::AST::Visitor::visit(v3, v5);
  v7 = (_QWORD *)*((_QWORD *)v3 + 11);
  if (*((_DWORD *)v7 + 12) == 13)
    goto LABEL_11;
LABEL_4:
  v8 = *((_QWORD *)v3 + 14);
  v9 = *(_QWORD **)(v8 + 24);
  *(_QWORD *)(v5 + 24) = v7;
  *((_QWORD *)v3 + 11) = 0;
  if (v9 == v7)
    return (uint64_t)v7;
  v10 = (unsigned __int8 *)v7;
  while (1)
  {
    v11 = *((_DWORD *)v10 + 12);
    if (v11 != 10)
      break;
    v10 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
    if (!v10)
      goto LABEL_22;
  }
  if (v11 || ((v13 = *v10, v13 >= 4) ? (v14 = v13 == 5) : (v14 = 1), !v14))
  {
LABEL_22:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    BYTE8(v19) = 1;
    WGSL::TypeChecker::typeError<WTF::String &>((unint64_t)v3, (__int128 *)(a2 + 8), v19);
    v7 = *(_QWORD **)(*((_QWORD *)v3 + 14) + 24);
    v18 = (_DWORD *)v19;
    *(_QWORD *)&v19 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WTF::StringImpl::destroy();
      else
        *v18 -= 2;
    }
    return (uint64_t)v7;
  }
  v15 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (_QWORD *)(v8 + (v16 >> 1));
  if ((v16 & 1) != 0)
    v15 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD *))(*v17 + v15);
  return v15(v17, *(unsigned __int8 *)(a1 + 40), v7);
}

_QWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::OverloadedDeclaration>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::OverloadedDeclaration,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::OverloadedDeclaration>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, _DWORD **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF **v17;
  unsigned int v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v30;
  WTF *v32;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  WTF *v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF *v55;
  WTF *v57;
  WTF *v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  WTF *v66;
  int v67;
  unsigned int v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF *v80;
  WTF *v82;
  WTF *v84;
  _DWORD *v85;
  _QWORD *result;
  _DWORD *v89;
  _QWORD *v90;
  WTF **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD **v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;

  v4 = *a1;
  v94 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 48 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v90 = 0;
    v93 = v5;
    v12 = v94;
    while (1)
    {
      v14 = *(WTF::StringImpl **)(v12 + 48 * v11);
      if (v14 == (WTF::StringImpl *)-1)
        goto LABEL_12;
      v95 = (_DWORD **)(v12 + 48 * v11);
      if (v14)
        break;
      v15 = v11;
      v16 = v12 + 48 * v11;
      v17 = (WTF **)(v16 + 32);
      v18 = *(_DWORD *)(v16 + 44);
      if (v18)
      {
        v19 = *v17;
        v20 = (uint64_t)*v17 + 88 * v18;
        do
        {
          v21 = *((_QWORD *)v19 + 10);
          *((_QWORD *)v19 + 10) = 0;
          if (v21)
          {
            v22 = *(unsigned int *)(v21 + 24);
            if ((_DWORD)v22 != -1)
              ((void (*)(char *, uint64_t))off_1E0FD7D78[v22])(&v96, v21);
            *(_DWORD *)(v21 + 24) = -1;
            MEMORY[0x186DAB2A8](v21, 0x1062C40D964B916);
          }
          v23 = *((unsigned int *)v19 + 15);
          if ((_DWORD)v23)
          {
            v24 = (uint64_t *)*((_QWORD *)v19 + 6);
            v25 = 8 * v23;
            do
            {
              v26 = *v24;
              *v24 = 0;
              if (v26)
              {
                v27 = *(unsigned int *)(v26 + 24);
                if ((_DWORD)v27 != -1)
                  ((void (*)(char *, uint64_t))off_1E0FD7D78[v27])(&v97, v26);
                *(_DWORD *)(v26 + 24) = -1;
                MEMORY[0x186DAB2A8](v26, 0x1062C40D964B916);
              }
              ++v24;
              v25 -= 8;
            }
            while (v25);
          }
          v28 = (WTF *)*((_QWORD *)v19 + 6);
          if ((WTF *)((char *)v19 + 64) == v28 || v28 == 0)
          {
            v30 = (WTF *)*((_QWORD *)v19 + 3);
            if ((WTF *)((char *)v19 + 40) == v30 || v30 == 0)
            {
LABEL_39:
              v32 = *(WTF **)v19;
              if ((WTF *)((char *)v19 + 16) != *(WTF **)v19)
                goto LABEL_46;
              goto LABEL_17;
            }
          }
          else
          {
            *((_QWORD *)v19 + 6) = 0;
            *((_DWORD *)v19 + 14) = 0;
            WTF::fastFree(v28, v8);
            v30 = (WTF *)*((_QWORD *)v19 + 3);
            if ((WTF *)((char *)v19 + 40) == v30 || v30 == 0)
              goto LABEL_39;
          }
          *((_QWORD *)v19 + 3) = 0;
          *((_DWORD *)v19 + 8) = 0;
          WTF::fastFree(v30, v8);
          v32 = *(WTF **)v19;
          if ((WTF *)((char *)v19 + 16) != *(WTF **)v19)
          {
LABEL_46:
            if (v32)
            {
              *(_QWORD *)v19 = 0;
              *((_DWORD *)v19 + 2) = 0;
              WTF::fastFree(v32, v8);
            }
          }
LABEL_17:
          v19 = (WTF *)((char *)v19 + 88);
        }
        while (v19 != (WTF *)v20);
      }
      v38 = *v17;
      v12 = v94;
      v11 = v15;
      if (*v17)
      {
        *v17 = 0;
        *(_DWORD *)(v94 + 48 * v15 + 40) = 0;
        WTF::fastFree(v38, v8);
      }
      v39 = *v95;
      *v95 = 0;
      if (v39)
      {
        if (*v39 == 2)
          WTF::StringImpl::destroy();
        else
          *v39 -= 2;
      }
LABEL_12:
      if (++v11 == v93)
        goto LABEL_139;
    }
    v92 = v11;
    v34 = *a1;
    if (*a1)
    {
      v35 = *(_DWORD *)(v34 - 8);
      v36 = *((_DWORD *)v14 + 4);
      if (v36 >= 0x100)
        goto LABEL_50;
LABEL_57:
      v37 = WTF::StringImpl::hashSlowCase(v14);
    }
    else
    {
      v35 = 0;
      v36 = *((_DWORD *)v14 + 4);
      if (v36 < 0x100)
        goto LABEL_57;
LABEL_50:
      v37 = v36 >> 8;
    }
    v40 = 0;
    do
    {
      v41 = v37 & v35;
      v42 = (_QWORD *)(v34 + 48 * (v37 & v35));
      v37 = ++v40 + (v37 & v35);
    }
    while (*v42);
    v43 = v34 + 48 * v41;
    v89 = (_DWORD *)(v43 + 44);
    v91 = (WTF **)(v43 + 32);
    if (*(_DWORD *)(v43 + 44))
    {
      v44 = *v91;
      v45 = (uint64_t)*v91 + 88 * *(unsigned int *)(v43 + 44);
      do
      {
        v46 = *((_QWORD *)v44 + 10);
        *((_QWORD *)v44 + 10) = 0;
        if (v46)
        {
          v47 = *(unsigned int *)(v46 + 24);
          if ((_DWORD)v47 != -1)
            ((void (*)(char *, uint64_t))off_1E0FD7D78[v47])(&v100, v46);
          *(_DWORD *)(v46 + 24) = -1;
          MEMORY[0x186DAB2A8](v46, 0x1062C40D964B916);
        }
        v48 = *((unsigned int *)v44 + 15);
        if ((_DWORD)v48)
        {
          v49 = (uint64_t *)*((_QWORD *)v44 + 6);
          v50 = 8 * v48;
          do
          {
            v51 = *v49;
            *v49 = 0;
            if (v51)
            {
              v52 = *(unsigned int *)(v51 + 24);
              if ((_DWORD)v52 != -1)
                ((void (*)(char *, uint64_t))off_1E0FD7D78[v52])(&v101, v51);
              *(_DWORD *)(v51 + 24) = -1;
              MEMORY[0x186DAB2A8](v51, 0x1062C40D964B916);
            }
            ++v49;
            v50 -= 8;
          }
          while (v50);
        }
        v53 = (WTF *)*((_QWORD *)v44 + 6);
        if ((WTF *)((char *)v44 + 64) == v53 || v53 == 0)
        {
          v55 = (WTF *)*((_QWORD *)v44 + 3);
          if ((WTF *)((char *)v44 + 40) == v55 || v55 == 0)
          {
LABEL_84:
            v57 = *(WTF **)v44;
            if ((WTF *)((char *)v44 + 16) != *(WTF **)v44)
              goto LABEL_91;
            goto LABEL_62;
          }
        }
        else
        {
          *((_QWORD *)v44 + 6) = 0;
          *((_DWORD *)v44 + 14) = 0;
          WTF::fastFree(v53, v8);
          v55 = (WTF *)*((_QWORD *)v44 + 3);
          if ((WTF *)((char *)v44 + 40) == v55 || v55 == 0)
            goto LABEL_84;
        }
        *((_QWORD *)v44 + 3) = 0;
        *((_DWORD *)v44 + 8) = 0;
        WTF::fastFree(v55, v8);
        v57 = *(WTF **)v44;
        if ((WTF *)((char *)v44 + 16) != *(WTF **)v44)
        {
LABEL_91:
          if (v57)
          {
            *(_QWORD *)v44 = 0;
            *((_DWORD *)v44 + 2) = 0;
            WTF::fastFree(v57, v8);
          }
        }
LABEL_62:
        v44 = (WTF *)((char *)v44 + 88);
      }
      while (v44 != (WTF *)v45);
    }
    v59 = *v91;
    if (*v91)
    {
      *v91 = 0;
      *(_DWORD *)(v34 + 48 * v41 + 40) = 0;
      WTF::fastFree(v59, v8);
    }
    v60 = (_DWORD *)*v42;
    *v42 = 0;
    if (v60)
    {
      if (*v60 == 2)
        WTF::StringImpl::destroy();
      else
        *v60 -= 2;
    }
    v61 = *v95;
    *v95 = 0;
    *v42 = v61;
    v62 = v34 + 48 * v41;
    v63 = v94 + 48 * v92;
    v64 = *(_OWORD *)(v63 + 8);
    *(_BYTE *)(v62 + 24) = *(_BYTE *)(v63 + 24);
    *(_OWORD *)(v62 + 8) = v64;
    *v91 = 0;
    v91[1] = 0;
    v66 = *(WTF **)(v63 + 32);
    v65 = v63 + 32;
    *(_QWORD *)v65 = 0;
    *v91 = v66;
    v67 = *(_DWORD *)(v65 + 8);
    *(_DWORD *)(v65 + 8) = 0;
    *(_DWORD *)(v62 + 40) = v67;
    LODWORD(v62) = *(_DWORD *)(v65 + 12);
    *(_DWORD *)(v65 + 12) = 0;
    *v89 = v62;
    v68 = *(_DWORD *)(v65 + 12);
    if (!v68)
    {
LABEL_133:
      v84 = *(WTF **)v65;
      if (*(_QWORD *)v65)
      {
        *(_QWORD *)v65 = 0;
        *(_DWORD *)(v65 + 8) = 0;
        WTF::fastFree(v84, v8);
      }
      v85 = *v95;
      *v95 = 0;
      v11 = v92;
      if (v85)
      {
        if (*v85 == 2)
          WTF::StringImpl::destroy();
        else
          *v85 -= 2;
      }
      v13 = v90;
      if (v95 == a3)
        v13 = v42;
      v90 = v13;
      v12 = v94;
      goto LABEL_12;
    }
    v69 = *(WTF **)v65;
    v70 = *(_QWORD *)v65 + 88 * v68;
    while (1)
    {
      v71 = *((_QWORD *)v69 + 10);
      *((_QWORD *)v69 + 10) = 0;
      if (v71)
      {
        v72 = *(unsigned int *)(v71 + 24);
        if ((_DWORD)v72 != -1)
          ((void (*)(char *, uint64_t))off_1E0FD7D78[v72])(&v98, v71);
        *(_DWORD *)(v71 + 24) = -1;
        MEMORY[0x186DAB2A8](v71, 0x1062C40D964B916);
      }
      v73 = *((unsigned int *)v69 + 15);
      if ((_DWORD)v73)
      {
        v74 = (uint64_t *)*((_QWORD *)v69 + 6);
        v75 = 8 * v73;
        do
        {
          v76 = *v74;
          *v74 = 0;
          if (v76)
          {
            v77 = *(unsigned int *)(v76 + 24);
            if ((_DWORD)v77 != -1)
              ((void (*)(char *, uint64_t))off_1E0FD7D78[v77])(&v99, v76);
            *(_DWORD *)(v76 + 24) = -1;
            MEMORY[0x186DAB2A8](v76, 0x1062C40D964B916);
          }
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      v78 = (WTF *)*((_QWORD *)v69 + 6);
      if ((WTF *)((char *)v69 + 64) == v78 || v78 == 0)
      {
        v80 = (WTF *)*((_QWORD *)v69 + 3);
        if ((WTF *)((char *)v69 + 40) == v80 || v80 == 0)
        {
LABEL_124:
          v82 = *(WTF **)v69;
          if ((WTF *)((char *)v69 + 16) != *(WTF **)v69)
            goto LABEL_131;
          goto LABEL_102;
        }
      }
      else
      {
        *((_QWORD *)v69 + 6) = 0;
        *((_DWORD *)v69 + 14) = 0;
        WTF::fastFree(v78, v8);
        v80 = (WTF *)*((_QWORD *)v69 + 3);
        if ((WTF *)((char *)v69 + 40) == v80 || v80 == 0)
          goto LABEL_124;
      }
      *((_QWORD *)v69 + 3) = 0;
      *((_DWORD *)v69 + 8) = 0;
      WTF::fastFree(v80, v8);
      v82 = *(WTF **)v69;
      if ((WTF *)((char *)v69 + 16) != *(WTF **)v69)
      {
LABEL_131:
        if (v82)
        {
          *(_QWORD *)v69 = 0;
          *((_DWORD *)v69 + 2) = 0;
          WTF::fastFree(v82, v8);
        }
      }
LABEL_102:
      v69 = (WTF *)((char *)v69 + 88);
      if (v69 == (WTF *)v70)
        goto LABEL_133;
    }
  }
  v90 = 0;
  result = 0;
  v12 = v94;
  if (v94)
  {
LABEL_139:
    WTF::fastFree((WTF *)(v12 - 16), v8);
    return v90;
  }
  return result;
}

void *WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WGSL::OverloadCandidate>(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  char **v25;
  _DWORD *v26;
  _DWORD *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  void *result;
  char **v33;
  _DWORD *v34;
  char *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v3 = WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = v3;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 88 * v5;
  v8 = (_QWORD *)(v7 + 16);
  *(_QWORD *)v7 = v7 + 16;
  *(_QWORD *)(v7 + 8) = 1;
  v9 = *(uint64_t **)v3;
  v10 = *(uint64_t **)v3;
  if (*(char **)v3 == v3 + 16)
  {
    v12 = *((unsigned int *)v3 + 3);
    if ((_DWORD)v12)
    {
      v13 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v13 < 9)
        goto LABEL_9;
      if (v6 + 88 * (unint64_t)v5 - (unint64_t)v9 + 16 < 0x20)
        goto LABEL_9;
      v14 = v13 + 1;
      v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      v8 = (_QWORD *)((char *)v8 + v15 * 8);
      v10 = &v9[v15];
      v16 = (__int128 *)(v9 + 2);
      v17 = (_OWORD *)(88 * v5 + v6 + 32);
      v18 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *v16;
        *(v17 - 1) = *(v16 - 1);
        *v17 = v19;
        v16 += 2;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_9:
        v20 = &v9[v12];
        do
        {
          v21 = *v10++;
          *v8++ = v21;
        }
        while (v10 != v20);
      }
    }
  }
  else
  {
    *(_QWORD *)v3 = v3 + 16;
    *(_QWORD *)v7 = v10;
    v11 = *((_DWORD *)v3 + 2);
    *((_DWORD *)v3 + 2) = 1;
    *(_DWORD *)(v7 + 8) = v11;
  }
  v22 = *((_DWORD *)v3 + 3);
  *((_DWORD *)v3 + 3) = 0;
  *(_DWORD *)(v7 + 12) = v22;
  v23 = v6 + 88 * v5;
  v24 = (void *)(v23 + 40);
  *(_QWORD *)(v23 + 24) = v23 + 40;
  v25 = (char **)(v23 + 24);
  v25[1] = (char *)2;
  v26 = v25 + 1;
  v27 = (_DWORD *)v25 + 3;
  v28 = (char *)*((_QWORD *)v4 + 3);
  if (v28 == v4 + 40)
  {
    memcpy(v24, v28, 4 * *((unsigned int *)v4 + 9));
  }
  else
  {
    *((_QWORD *)v4 + 3) = v4 + 40;
    *v25 = v28;
    v29 = *((_DWORD *)v4 + 8);
    *((_DWORD *)v4 + 8) = 2;
    *v26 = v29;
  }
  v30 = *((_DWORD *)v4 + 9);
  *((_DWORD *)v4 + 9) = 0;
  *v27 = v30;
  v31 = v6 + 88 * v5;
  result = (void *)(v31 + 64);
  *(_QWORD *)(v31 + 48) = v31 + 64;
  v33 = (char **)(v31 + 48);
  v33[1] = (char *)2;
  v34 = v33 + 1;
  v35 = (char *)*((_QWORD *)v4 + 6);
  if (v35 == v4 + 64)
  {
    result = memcpy(result, v35, 8 * *((unsigned int *)v4 + 15));
  }
  else
  {
    *((_QWORD *)v4 + 6) = v4 + 64;
    *v33 = v35;
    v36 = *((_DWORD *)v4 + 14);
    *((_DWORD *)v4 + 14) = 2;
    *v34 = v36;
  }
  v37 = v6 + 88 * v5;
  v38 = *((_DWORD *)v4 + 15);
  *((_DWORD *)v4 + 15) = 0;
  *(_DWORD *)(v37 + 60) = v38;
  v39 = *((_QWORD *)v4 + 10);
  *((_QWORD *)v4 + 10) = 0;
  *(_QWORD *)(v37 + 80) = v39;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<WGSL::OverloadCandidate,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  WGSL::OverloadCandidate *v5;
  WGSL::OverloadCandidate *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  WGSL::OverloadCandidate *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WGSL::OverloadCandidate *v17;
  int v18;
  uint64_t v19;
  void *v20;

  v5 = *(WGSL::OverloadCandidate **)a1;
  if (*(_QWORD *)a1 > a3
    || (v6 = (WGSL::OverloadCandidate *)((char *)v5 + 88 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v16 = a2;
    if (v16 > v14)
    {
      if (v16 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x1825FAE54);
      }
      v17 = (WGSL::OverloadCandidate *)((char *)v5 + 88 * *(unsigned int *)(a1 + 12));
      v18 = 88 * v16;
      v19 = WTF::fastMalloc((WTF *)(88 * v16));
      *(_DWORD *)(a1 + 8) = (v18 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WGSL::OverloadCandidate>::move(v5, v17, v19);
      if (v5)
      {
        if (*(WGSL::OverloadCandidate **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
    return (char *)a3;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v13 = *(WGSL::OverloadCandidate **)a1;
    }
    else
    {
      if (v9 >= 0x2E8BA2F)
      {
        __break(0xC471u);
        JUMPOUT(0x1825FAE5CLL);
      }
      v10 = 88 * v9;
      v11 = WTF::fastMalloc((WTF *)(88 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WGSL::OverloadCandidate>::move(v5, v6, v11);
      v13 = *(WGSL::OverloadCandidate **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WGSL::OverloadCandidate **)a1;
      }
    }
    return (char *)v13 + 8 * ((uint64_t)(a3 - (_QWORD)v5) >> 3);
  }
}

void WTF::VectorMover<false,WGSL::OverloadCandidate>::move(WGSL::OverloadCandidate *this, WGSL::OverloadCandidate *a2, uint64_t a3)
{
  uint64_t v3;
  WGSL::OverloadCandidate *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  char *v29;

  if (this != a2)
  {
    v3 = a3;
    v5 = this;
    v6 = 0;
    v7 = a3 + 16;
    while (1)
    {
      v11 = (_QWORD *)(v3 + 16);
      *(_QWORD *)v3 = v3 + 16;
      *(_QWORD *)(v3 + 8) = 1;
      v12 = *(uint64_t **)v5;
      if (*(WGSL::OverloadCandidate **)v5 != (WGSL::OverloadCandidate *)((char *)v5 + 16))
      {
        *(_QWORD *)v5 = (char *)v5 + 16;
        *(_QWORD *)v3 = v12;
        v13 = *((_DWORD *)v5 + 2);
        *((_DWORD *)v5 + 2) = 1;
        *(_DWORD *)(v3 + 8) = v13;
        goto LABEL_17;
      }
      v14 = *((unsigned int *)v5 + 3);
      if (!(_DWORD)v14)
        goto LABEL_17;
      v15 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v15 < 3)
        break;
      v16 = *(uint64_t **)v5;
      if ((unint64_t)(v7 + 88 * v6 - (_QWORD)v12) < 0x20)
        goto LABEL_15;
      v17 = 0;
      v18 = v15 + 1;
      v19 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      v11 = (_QWORD *)((char *)v11 + v19 * 8);
      v16 = &v12[v19];
      v20 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = v3 + v17 * 8;
        v22 = *(_OWORD *)&v12[v17 + 2];
        *(_OWORD *)(v21 + 16) = *(_OWORD *)&v12[v17];
        *(_OWORD *)(v21 + 32) = v22;
        v17 += 4;
        v20 -= 4;
      }
      while (v20);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_15;
LABEL_17:
      v25 = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v25;
      *(_QWORD *)(v3 + 24) = v3 + 40;
      *(_QWORD *)(v3 + 32) = 2;
      v26 = (char *)*((_QWORD *)v5 + 3);
      if (v26 == (char *)v5 + 40)
      {
        memcpy((void *)(v3 + 40), v26, 4 * *((unsigned int *)v5 + 9));
      }
      else
      {
        *((_QWORD *)v5 + 3) = (char *)v5 + 40;
        *(_QWORD *)(v3 + 24) = v26;
        v27 = *((_DWORD *)v5 + 8);
        *((_DWORD *)v5 + 8) = 2;
        *(_DWORD *)(v3 + 32) = v27;
      }
      v28 = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(v3 + 36) = v28;
      *(_QWORD *)(v3 + 48) = v3 + 64;
      *(_QWORD *)(v3 + 56) = 2;
      v29 = (char *)*((_QWORD *)v5 + 6);
      if (v29 == (char *)v5 + 64)
      {
        memcpy((void *)(v3 + 64), v29, 8 * *((unsigned int *)v5 + 15));
      }
      else
      {
        *((_QWORD *)v5 + 6) = (char *)v5 + 64;
        *(_QWORD *)(v3 + 48) = v29;
        v8 = *((_DWORD *)v5 + 14);
        *((_DWORD *)v5 + 14) = 2;
        *(_DWORD *)(v3 + 56) = v8;
      }
      v9 = *((_DWORD *)v5 + 15);
      *((_DWORD *)v5 + 15) = 0;
      *(_DWORD *)(v3 + 60) = v9;
      v10 = *((_QWORD *)v5 + 10);
      *((_QWORD *)v5 + 10) = 0;
      *(_QWORD *)(v3 + 80) = v10;
      WGSL::OverloadCandidate::~OverloadCandidate(v5, v29);
      v3 += 88;
      v5 = (WGSL::OverloadCandidate *)((char *)v5 + 88);
      ++v6;
      if (v5 == a2)
        return;
    }
    v16 = *(uint64_t **)v5;
LABEL_15:
    v23 = &v12[v14];
    do
    {
      v24 = *v16++;
      *v11++ = v24;
    }
    while (v16 != v23);
    goto LABEL_17;
  }
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::String const&,char>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, char *a6)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  _DWORD *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  __int128 v23;

  if (a4)
    v10 = a4 - 1;
  else
    v10 = 0;
  if (!a5)
  {
    v11 = v10 >> 31;
    if (!(v10 >> 31))
      goto LABEL_7;
LABEL_28:
    __break(0xC471u);
    goto LABEL_30;
  }
  *(_DWORD *)a5 += 2;
  if (v10 >> 31)
    goto LABEL_28;
  LODWORD(v11) = *(_DWORD *)(a5 + 4);
  if ((v11 & 0x80000000) != 0)
  {
LABEL_29:
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x1825FB208);
  }
LABEL_7:
  v12 = __OFADD__((_DWORD)v11, 1);
  v13 = v11 + 1;
  if (v12 || __OFADD__((_DWORD)v10, v13))
    goto LABEL_29;
  v14 = !a5 || (*(_BYTE *)(a5 + 16) & 4) != 0;
  result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v21, (int)v10 + v13, v14, a3, v10, a5, *a6);
  if (!v21)
    goto LABEL_29;
  v22 = v21;
  v23 = *a2;
  v16 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v16 != *(_DWORD *)(a1 + 128))
  {
    v20 = *(_QWORD *)(a1 + 120) + 24 * v16;
    *(_QWORD *)v20 = v21;
    *(_OWORD *)(v20 + 8) = v23;
    ++*(_DWORD *)(a1 + 132);
    v22 = 0;
LABEL_20:
    if (!a5)
      return result;
    goto LABEL_21;
  }
  v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v22);
  v18 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v19 = *(_QWORD *)v17;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  result = v22;
  ++*(_DWORD *)(a1 + 132);
  v22 = 0;
  if (!result)
    goto LABEL_20;
  if (*result == 2)
  {
    result = (_DWORD *)WTF::StringImpl::destroy();
    if (!a5)
      return result;
  }
  else
  {
    *result -= 2;
    if (!a5)
      return result;
  }
LABEL_21:
  if (*(_DWORD *)a5 == 2)
    return (_DWORD *)WTF::StringImpl::destroy();
  *(_DWORD *)a5 -= 2;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(uint64_t a1, int a2, __int128 *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *result;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  v9 = a5 - 1;
  if (!a5)
    v9 = 0;
  v24 = a4;
  if (v9 >> 31)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  LODWORD(v25) = v9;
  v10 = a7 - 1;
  if (!a7)
    v10 = 0;
  v28 = a6;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FB3E8);
  }
  v29 = v10;
  v11 = a9 - 1;
  if (!a9)
    v11 = 0;
  v26 = a8;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FB408);
  }
  v27 = v11;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v24, (uint64_t)&v28, (uint64_t)&v26, &v23);
  v15 = v23;
  if (!v23)
  {
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x1825FB3C8);
  }
  v23 = 0;
  v24 = v15;
  v25 = *a3;
  v16 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v16 != *(_DWORD *)(a1 + 128))
  {
    v22 = *(_QWORD *)(a1 + 120) + 24 * v16;
    *(_QWORD *)v22 = v15;
    *(_OWORD *)(v22 + 8) = v25;
    ++*(_DWORD *)(a1 + 132);
    v24 = 0;
LABEL_17:
    result = v23;
    v23 = 0;
    if (!result)
      goto LABEL_21;
    goto LABEL_18;
  }
  v17 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v16 + 1, (unint64_t)&v24);
  v18 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v19 = *(_QWORD *)v17;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)v18 = v19;
  *(_OWORD *)(v18 + 8) = *(_OWORD *)(v17 + 8);
  v20 = v24;
  ++*(_DWORD *)(a1 + 132);
  v24 = 0;
  if (!v20)
    goto LABEL_17;
  if (*v20 != 2)
  {
    *v20 -= 2;
    result = v23;
    v23 = 0;
    if (!result)
      goto LABEL_21;
LABEL_18:
    if (*result == 2)
      result = (_DWORD *)WTF::StringImpl::destroy();
    else
      *result -= 2;
    goto LABEL_21;
  }
  WTF::StringImpl::destroy();
  result = v23;
  v23 = 0;
  if (result)
    goto LABEL_18;
LABEL_21:
  if (a2)
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, int8x16_t *a4, unsigned int a5, uint64_t a6, char a7)
{
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  int8x16_t *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  unint64_t v23;
  _WORD *v24;
  unint64_t v25;
  __int128 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  _WORD *v37;
  int8x16_t *v38;
  __int16 v39;
  int8x16_t *v40;
  uint64_t v41;
  uint64_t v42;
  _WORD *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  size_t v53;
  unint64_t v54;
  BOOL v55;
  unint64_t v56;
  _BYTE *v57;
  int8x16_t *v58;
  char v59;
  unint64_t v60;
  _WORD *v61;
  int8x16_t *v62;
  __int16 v63;
  uint8x8_t *v64;
  uint16x8_t *v65;
  unint64_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint8x8_t *v70;
  uint16x8_t *v71;
  unint64_t v72;
  uint8x8_t v73;
  uint64_t v74;
  unint64_t v75;
  int8x16_t *v76;
  int8x16_t *v77;
  unint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int16x8_t *v83;
  int8x8_t *v84;
  unint64_t v85;
  int16x8_t v86;
  uint8x8_t *v87;
  uint16x8_t *v88;
  unint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint8x8_t *v93;
  uint16x8_t *v94;
  unint64_t v95;
  uint8x8_t v96;
  uint64_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;

  v12 = (_QWORD *)result;
  if (!a3)
  {
    if (!a2)
      goto LABEL_17;
    if (a2 > 0x7FFFFFEF)
      goto LABEL_16;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    v13 = v97;
    if (!v97)
      goto LABEL_75;
    v23 = v97 + 20;
    *(_DWORD *)v97 = 2;
    *(_DWORD *)(v97 + 4) = a2;
    *(_QWORD *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 0;
    v24 = (_WORD *)(v97 + 20 + 2 * a5);
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v25 = v23 + 2 * (a5 & 0xFFFFFFC0);
      v26 = 0uLL;
      do
      {
        v98.val[0] = *a4;
        v27 = a4[1];
        v100.val[0] = a4[2];
        v28 = a4[3];
        a4 += 4;
        v29 = v28;
        v100.val[1] = 0uLL;
        v102.val[0] = v27;
        v98.val[1] = 0uLL;
        v30 = (char *)v23;
        vst2q_s8(v30, v98);
        v30 += 32;
        v102.val[1] = 0uLL;
        vst2q_s8(v30, v102);
        v31 = (char *)(v23 + 64);
        vst2q_s8(v31, v100);
        v32 = (char *)(v23 + 96);
        vst2q_s8(v32, *(int8x16x2_t *)(&v26 - 1));
        v23 += 128;
      }
      while (v23 != v25);
      v23 = v25;
    }
    if ((_WORD *)v23 != v24)
    {
      v33 = v97 + 2 * a5 - v23 + 18;
      if (v33 < 0xE
        || (v23 < (unint64_t)a4->u64 + (v33 >> 1) + 1
          ? (v34 = (unint64_t)a4 >= (v33 & 0xFFFFFFFFFFFFFFFELL) + v23 + 2)
          : (v34 = 1),
            !v34))
      {
        v37 = (_WORD *)v23;
        v38 = a4;
        goto LABEL_33;
      }
      v35 = (v33 >> 1) + 1;
      if (v33 >= 0x3E)
      {
        v36 = v35 & 0xFFFFFFFFFFFFFFE0;
        v64 = (uint8x8_t *)&a4[1];
        v65 = (uint16x8_t *)(v23 + 32);
        v66 = v35 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v67 = *(uint8x16_t *)v64[-2].i8;
          v68 = vmovl_u8(*v64);
          v69 = vmovl_high_u8(*(uint8x16_t *)v64->i8);
          v65[-2] = vmovl_u8(*(uint8x8_t *)v67.i8);
          v65[-1] = vmovl_high_u8(v67);
          *v65 = v68;
          v65[1] = v69;
          v65 += 4;
          v64 += 4;
          v66 -= 32;
        }
        while (v66);
        if (v35 == v36)
          goto LABEL_34;
        if ((v35 & 0x18) == 0)
        {
          v38 = (int8x16_t *)((char *)a4 + v36);
          v37 = (_WORD *)(v23 + 2 * v36);
          do
          {
LABEL_33:
            v39 = v38->u8[0];
            v38 = (int8x16_t *)((char *)v38 + 1);
            *v37++ = v39;
          }
          while (v37 != v24);
          goto LABEL_34;
        }
      }
      else
      {
        v36 = 0;
      }
      v37 = (_WORD *)(v23 + 2 * (v35 & 0xFFFFFFFFFFFFFFF8));
      v38 = (int8x16_t *)((char *)a4 + (v35 & 0xFFFFFFFFFFFFFFF8));
      v70 = (uint8x8_t *)&a4->i8[v36];
      v71 = (uint16x8_t *)(v23 + 2 * v36);
      v72 = v36 - (v35 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v73 = *v70++;
        *v71++ = vmovl_u8(v73);
        v72 += 8;
      }
      while (v72);
      if (v35 != (v35 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
    }
LABEL_34:
    if (!a6)
    {
      v42 = 0;
LABEL_74:
      v24[v42] = a7;
      goto LABEL_75;
    }
    v40 = *(int8x16_t **)(a6 + 8);
    v41 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) == 0)
    {
      if ((_DWORD)v41)
      {
        if ((_DWORD)v41 == 1)
          *v24 = v40->i16[0];
        else
          result = (uint64_t)memcpy((void *)(v97 + 20 + 2 * a5), v40, 2 * v41);
      }
      goto LABEL_73;
    }
    v43 = &v24[v41];
    if (v41 < 0x40)
    {
      v44 = v97 + 20 + 2 * a5;
    }
    else
    {
      v44 = (unint64_t)&v24[v41 & 0xFFFFFFC0];
      v45 = 0uLL;
      v46 = v97 + 20 + 2 * a5;
      do
      {
        v99.val[0] = *v40;
        v47 = v40[1];
        v101.val[0] = v40[2];
        v48 = v40[3];
        v40 += 4;
        v49 = v48;
        v101.val[1] = 0uLL;
        v103.val[0] = v47;
        v99.val[1] = 0uLL;
        v50 = (char *)v46;
        vst2q_s8(v50, v99);
        v50 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v50, v103);
        v51 = (char *)(v46 + 64);
        vst2q_s8(v51, v101);
        v52 = (char *)(v46 + 96);
        vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
        v46 += 128;
      }
      while (v46 != v44);
    }
    if ((_WORD *)v44 == v43)
    {
LABEL_73:
      v42 = *(unsigned int *)(a6 + 4);
      goto LABEL_74;
    }
    v60 = v97 + 2 * (a5 + v41) - v44 + 18;
    if (v60 < 0xE
      || v44 < (unint64_t)v40->u64 + (v60 >> 1) + 1
      && (unint64_t)v40 < (v60 & 0xFFFFFFFFFFFFFFFELL) + v44 + 2)
    {
      v61 = (_WORD *)v44;
      v62 = v40;
      goto LABEL_68;
    }
    v74 = (v60 >> 1) + 1;
    if (v60 >= 0x3E)
    {
      v75 = v74 & 0xFFFFFFFFFFFFFFE0;
      v87 = (uint8x8_t *)&v40[1];
      v88 = (uint16x8_t *)(v44 + 32);
      v89 = v74 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v90 = *(uint8x16_t *)v87[-2].i8;
        v91 = vmovl_u8(*v87);
        v92 = vmovl_high_u8(*(uint8x16_t *)v87->i8);
        v88[-2] = vmovl_u8(*(uint8x8_t *)v90.i8);
        v88[-1] = vmovl_high_u8(v90);
        *v88 = v91;
        v88[1] = v92;
        v88 += 4;
        v87 += 4;
        v89 -= 32;
      }
      while (v89);
      if (v74 == v75)
        goto LABEL_73;
      if ((v74 & 0x18) == 0)
      {
        v62 = (int8x16_t *)((char *)v40 + v75);
        v61 = (_WORD *)(v44 + 2 * v75);
        do
        {
LABEL_68:
          v63 = v62->u8[0];
          v62 = (int8x16_t *)((char *)v62 + 1);
          *v61++ = v63;
        }
        while (v61 != v43);
        goto LABEL_73;
      }
    }
    else
    {
      v75 = 0;
    }
    v61 = (_WORD *)(v44 + 2 * (v74 & 0xFFFFFFFFFFFFFFF8));
    v62 = (int8x16_t *)((char *)v40 + (v74 & 0xFFFFFFFFFFFFFFF8));
    v93 = (uint8x8_t *)&v40->i8[v75];
    v94 = (uint16x8_t *)(v44 + 2 * v75);
    v95 = v75 - (v74 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v96 = *v93++;
      *v94++ = vmovl_u8(v96);
      v95 += 8;
    }
    while (v95);
    if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_73;
    goto LABEL_68;
  }
  if (!a2)
  {
LABEL_17:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_75;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_16:
    v13 = 0;
    goto LABEL_75;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v13 = v97;
  if (v97)
  {
    v14 = (_BYTE *)(v97 + 20);
    *(_DWORD *)v97 = 2;
    *(_DWORD *)(v97 + 4) = a2;
    *(_QWORD *)(v97 + 8) = v97 + 20;
    *(_DWORD *)(v97 + 16) = 4;
    if (a5)
    {
      if (a5 != 1)
      {
        result = (uint64_t)memcpy((void *)(v97 + 20), a4, a5);
        v15 = a5;
        v16 = &v14[a5];
        if (a6)
        {
LABEL_9:
          v17 = *(int8x16_t **)(a6 + 8);
          v18 = *(unsigned int *)(a6 + 4);
          if ((*(_BYTE *)(a6 + 16) & 4) != 0)
          {
            if ((_DWORD)v18)
            {
              if ((_DWORD)v18 == 1)
                *v16 = v17->i8[0];
              else
                result = (uint64_t)memcpy(v16, v17, v18);
            }
            goto LABEL_71;
          }
          v19 = &v16[v18];
          if (v18 < 0x10)
          {
            v20 = (unint64_t)v16;
          }
          else
          {
            v20 = (unint64_t)&v16[v18 & 0xFFFFFFF0];
            v21 = (unsigned __int128 *)v16;
            do
            {
              v22 = (unsigned __int128)vld2q_s8(v17->i8);
              v17 += 2;
              *v21++ = v22;
            }
            while (v21 != (unsigned __int128 *)v20);
          }
          if ((_BYTE *)v20 == v19)
          {
LABEL_71:
            v16[*(unsigned int *)(a6 + 4)] = a7;
            goto LABEL_75;
          }
          v53 = v97 + v18 + v15;
          v54 = v53 - v20 + 20;
          if (v54 < 8
            || (v20 < (unint64_t)&v17[2].u64[1] + 2 * v53 + -2 * v20
              ? (v55 = (unint64_t)v17 >= v53 + 20)
              : (v55 = 1),
                !v55))
          {
            v57 = (_BYTE *)v20;
            v58 = v17;
            goto LABEL_60;
          }
          if (v54 >= 0x20)
          {
            v56 = v54 & 0xFFFFFFFFFFFFFFE0;
            v76 = v17 + 2;
            v77 = (int8x16_t *)(v20 + 16);
            v78 = v54 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v80 = v76[-2];
              v79 = v76[-1];
              v82 = *v76;
              v81 = v76[1];
              v76 += 4;
              v77[-1] = vuzp1q_s8(v80, v79);
              *v77 = vuzp1q_s8(v82, v81);
              v77 += 2;
              v78 -= 32;
            }
            while (v78);
            if (v54 == v56)
              goto LABEL_71;
            if ((v54 & 0x18) == 0)
            {
              v58 = (int8x16_t *)((char *)v17 + 2 * v56);
              v57 = (_BYTE *)(v20 + v56);
              do
              {
LABEL_60:
                v59 = v58->i8[0];
                v58 = (int8x16_t *)((char *)v58 + 2);
                *v57++ = v59;
              }
              while (v57 != v19);
              goto LABEL_71;
            }
          }
          else
          {
            v56 = 0;
          }
          v57 = (_BYTE *)(v20 + (v54 & 0xFFFFFFFFFFFFFFF8));
          v58 = (int8x16_t *)((char *)v17 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
          v83 = (int16x8_t *)((char *)v17 + 2 * v56);
          v84 = (int8x8_t *)(v20 + v56);
          v85 = v56 - (v54 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v86 = *v83++;
            *v84++ = vmovn_s16(v86);
            v85 += 8;
          }
          while (v85);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_71;
          goto LABEL_60;
        }
        goto LABEL_40;
      }
      *v14 = a4->i8[0];
    }
    v15 = a5;
    v16 = &v14[a5];
    if (a6)
      goto LABEL_9;
LABEL_40:
    *v16 = a7;
  }
LABEL_75:
  *v12 = v13;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,char,WTF::String const&,WTF::String,char,WTF::String,char>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, char a7, uint64_t a8, uint64_t *a9, char *a10, uint64_t *a11, char *a12)
{
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  char v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  char v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v35;
  _DWORD *result;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  __int128 v43;

  if (a8)
    *(_DWORD *)a8 += 2;
  v17 = *a9;
  *a9 = 0;
  v18 = *a10;
  v19 = *a11;
  *a11 = 0;
  if (a4)
    v20 = a4 - 1;
  else
    v20 = 0;
  if (v20 >> 31)
  {
    __break(0xC471u);
    goto LABEL_68;
  }
  v21 = a6 - 1;
  if (!a6)
    v21 = 0;
  if (v21 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FBC8CLL);
  }
  if (a8)
  {
    v22 = *(_DWORD *)(a8 + 4);
    if (v17)
      goto LABEL_12;
LABEL_18:
    v23 = 0;
    v24 = *a12;
    if (v19)
      goto LABEL_13;
LABEL_19:
    v27 = 1;
    if (!__OFSUB__(a6, 1))
      goto LABEL_20;
LABEL_67:
    __break(0xC471u);
LABEL_68:
    JUMPOUT(0x1825FBC6CLL);
  }
  v22 = 0;
  if (!v17)
    goto LABEL_18;
LABEL_12:
  v23 = *(_DWORD *)(v17 + 4);
  v24 = *a12;
  if (!v19)
    goto LABEL_19;
LABEL_13:
  v25 = *(_DWORD *)(v19 + 4);
  if (v25 < 0)
    goto LABEL_67;
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    goto LABEL_67;
LABEL_20:
  v26 = __OFADD__(v27, 1);
  v28 = v27 + 1;
  v29 = v26;
  if (v23 < 0 || (v29 & 1) != 0)
    goto LABEL_67;
  v26 = __OFADD__(v23, v28);
  v30 = v23 + v28;
  v31 = v26;
  if (v22 < 0)
    goto LABEL_67;
  if (v31)
    goto LABEL_67;
  v26 = __OFADD__(v22, v30);
  v32 = v22 + v30;
  if (v26)
    goto LABEL_67;
  v26 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  if (v26)
    goto LABEL_67;
  v26 = __OFADD__((_DWORD)v21, v33);
  v34 = v21 + v33;
  if (v26 || __OFADD__((_DWORD)v20, v34))
    goto LABEL_67;
  v35 = (!a8 || (*(_BYTE *)(a8 + 16) & 4) != 0)
     && (!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0)
     && (!v19 || (*(_BYTE *)(v19 + 16) & 4) != 0);
  result = (_DWORD *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v42, (int)v20 + v34, v35, a3, v20, a5, v21, a7, a8, v17, v18, v19, v24);
  if (!v42)
    goto LABEL_67;
  v43 = *a2;
  v37 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v37 != *(_DWORD *)(a1 + 128))
  {
    v41 = *(_QWORD *)(a1 + 120) + 24 * v37;
    *(_QWORD *)v41 = v42;
    *(_OWORD *)(v41 + 8) = v43;
    ++*(_DWORD *)(a1 + 132);
    v42 = 0;
LABEL_49:
    if (!v19)
      goto LABEL_53;
    goto LABEL_50;
  }
  v38 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v37 + 1, (unint64_t)&v42);
  v39 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v40 = *(_QWORD *)v38;
  *(_QWORD *)v38 = 0;
  *(_QWORD *)v39 = v40;
  *(_OWORD *)(v39 + 8) = *(_OWORD *)(v38 + 8);
  result = v42;
  ++*(_DWORD *)(a1 + 132);
  v42 = 0;
  if (!result)
    goto LABEL_49;
  if (*result == 2)
  {
    result = (_DWORD *)WTF::StringImpl::destroy();
    if (!v19)
      goto LABEL_53;
  }
  else
  {
    *result -= 2;
    if (!v19)
      goto LABEL_53;
  }
LABEL_50:
  if (*(_DWORD *)v19 == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *(_DWORD *)v19 -= 2;
LABEL_53:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      result = (_DWORD *)WTF::StringImpl::destroy();
      if (!a8)
        goto LABEL_62;
      goto LABEL_59;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (!a8)
    goto LABEL_62;
LABEL_59:
  if (*(_DWORD *)a8 == 2)
    result = (_DWORD *)WTF::StringImpl::destroy();
  else
    *(_DWORD *)a8 -= 2;
LABEL_62:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, unsigned int a2, int a3, int8x16_t *a4, int a5, int8x16_t *a6, int a7, char a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v15;
  _QWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char v26;
  _BYTE *v27;
  int8x16_t *v28;
  size_t v29;
  _BYTE *v30;
  unint64_t v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  _WORD *v55;
  int8x16_t *v56;
  __int16 v57;
  _WORD *v58;
  unint64_t v59;
  __int128 v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  _WORD *v68;
  int8x16_t *v69;
  __int16 v70;
  _WORD *v71;
  int8x16_t *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _WORD *v76;
  uint64_t v77;
  _WORD *v78;
  uint64_t v79;
  _WORD *v80;
  unint64_t v81;
  __int128 v82;
  char *v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  char *v87;
  char *v88;
  char *v89;
  size_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  _BYTE *v94;
  int8x16_t *v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  BOOL v100;
  uint64_t v101;
  unint64_t v102;
  _WORD *v103;
  int8x16_t *v104;
  __int16 v105;
  uint64_t v106;
  int8x16_t *v107;
  size_t v108;
  _BYTE *v109;
  unint64_t v110;
  unsigned __int128 *v111;
  unsigned __int128 v112;
  unint64_t v113;
  size_t v114;
  BOOL v115;
  unint64_t v116;
  _BYTE *v117;
  int8x16_t *v118;
  char v119;
  uint64_t v120;
  _BYTE *v121;
  int8x16_t *v122;
  size_t v123;
  _BYTE *v124;
  unint64_t v125;
  unsigned __int128 *v126;
  unsigned __int128 v127;
  unint64_t v128;
  size_t v129;
  BOOL v130;
  unint64_t v131;
  _BYTE *v132;
  int8x16_t *v133;
  char v134;
  uint64_t v135;
  int8x16_t *v136;
  uint64_t v137;
  _WORD *v138;
  unint64_t v139;
  __int128 v140;
  char *v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  char *v145;
  char *v146;
  char *v147;
  unint64_t v148;
  BOOL v149;
  uint64_t v150;
  unint64_t v151;
  _WORD *v152;
  int8x16_t *v153;
  __int16 v154;
  uint64_t v155;
  _WORD *v156;
  int8x16_t *v157;
  uint64_t v158;
  _WORD *v159;
  unint64_t v160;
  __int128 v161;
  char *v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  char *v166;
  char *v167;
  char *v168;
  unint64_t v169;
  BOOL v170;
  uint64_t v171;
  unint64_t v172;
  _WORD *v173;
  int8x16_t *v174;
  __int16 v175;
  uint64_t v176;
  uint8x8_t *v177;
  uint16x8_t *v178;
  unint64_t v179;
  uint8x16_t v180;
  uint16x8_t v181;
  uint16x8_t v182;
  uint8x8_t *v183;
  uint16x8_t *v184;
  unint64_t v185;
  uint8x8_t v186;
  uint8x8_t *v187;
  uint16x8_t *v188;
  unint64_t v189;
  uint8x16_t v190;
  uint16x8_t v191;
  uint16x8_t v192;
  uint8x8_t *v193;
  uint16x8_t *v194;
  unint64_t v195;
  uint8x8_t v196;
  int8x16_t *v197;
  int8x16_t *v198;
  unint64_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int16x8_t *v204;
  int8x8_t *v205;
  unint64_t v206;
  int16x8_t v207;
  int8x16_t *v208;
  int8x16_t *v209;
  unint64_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int16x8_t *v215;
  int8x8_t *v216;
  unint64_t v217;
  int16x8_t v218;
  int8x16_t *v219;
  int8x16_t *v220;
  unint64_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int16x8_t *v226;
  int8x8_t *v227;
  unint64_t v228;
  int16x8_t v229;
  uint8x8_t *v230;
  uint16x8_t *v231;
  unint64_t v232;
  uint8x16_t v233;
  uint16x8_t v234;
  uint16x8_t v235;
  uint8x8_t *v236;
  uint16x8_t *v237;
  unint64_t v238;
  uint8x8_t v239;
  uint8x8_t *v240;
  uint16x8_t *v241;
  unint64_t v242;
  uint8x16_t v243;
  uint16x8_t v244;
  uint16x8_t v245;
  uint8x8_t *v246;
  uint16x8_t *v247;
  unint64_t v248;
  uint8x8_t v249;
  uint8x8_t *v250;
  uint16x8_t *v251;
  unint64_t v252;
  uint8x16_t v253;
  uint16x8_t v254;
  uint16x8_t v255;
  uint8x8_t *v256;
  uint16x8_t *v257;
  unint64_t v258;
  uint8x8_t v259;
  uint64_t v261;
  int8x16x2_t v262;
  int8x16x2_t v263;
  int8x16x2_t v264;
  int8x16x2_t v265;
  int8x16x2_t v266;
  int8x16x2_t v267;
  int8x16x2_t v268;
  int8x16x2_t v269;
  int8x16x2_t v270;
  int8x16x2_t v271;
  int8x16x2_t v272;
  int8x16x2_t v273;
  int8x16x2_t v274;
  int8x16x2_t v275;
  int8x16x2_t v276;

  LODWORD(v13) = a7;
  LODWORD(v15) = a5;
  v18 = (_QWORD *)result;
  if (!a3)
  {
    if (!a2)
      goto LABEL_18;
    if (a2 > 0x7FFFFFEF)
      goto LABEL_17;
    result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20));
    v20 = v261;
    if (!v261)
      goto LABEL_194;
    v34 = v261 + 20;
    *(_DWORD *)v261 = 2;
    *(_DWORD *)(v261 + 4) = a2;
    *(_QWORD *)(v261 + 8) = v261 + 20;
    *(_DWORD *)(v261 + 16) = 0;
    v35 = v261 + 20 + 2 * v15;
    if ((v15 & 0xFFFFFFC0) != 0)
    {
      v36 = v34 + 2 * (v15 & 0xFFFFFFC0);
      v37 = 0uLL;
      v39 = a10;
      v38 = a12;
      result = a9;
      do
      {
        v262.val[0] = *a4;
        v40 = a4[1];
        v267.val[0] = a4[2];
        v41 = a4[3];
        a4 += 4;
        v42 = v41;
        v267.val[1] = 0uLL;
        v272.val[0] = v40;
        v262.val[1] = 0uLL;
        v43 = (char *)v34;
        vst2q_s8(v43, v262);
        v43 += 32;
        v272.val[1] = 0uLL;
        vst2q_s8(v43, v272);
        v44 = (char *)(v34 + 64);
        vst2q_s8(v44, v267);
        v45 = (char *)(v34 + 96);
        vst2q_s8(v45, *(int8x16x2_t *)(&v37 - 1));
        v34 += 128;
      }
      while (v34 != v36);
      v34 = v36;
      v15 = v15;
      if (v36 == v35)
      {
LABEL_47:
        v58 = (_WORD *)(v35 + 2 * v13);
        if ((v13 & 0xFFFFFFC0) != 0)
        {
          v59 = v35 + 2 * (v13 & 0xFFFFFFC0);
          v60 = 0uLL;
          do
          {
            v263.val[0] = *a6;
            v61 = a6[1];
            v268.val[0] = a6[2];
            v62 = a6[3];
            a6 += 4;
            v63 = v62;
            v268.val[1] = 0uLL;
            v273.val[0] = v61;
            v263.val[1] = 0uLL;
            v64 = (char *)v35;
            vst2q_s8(v64, v263);
            v64 += 32;
            v273.val[1] = 0uLL;
            vst2q_s8(v64, v273);
            v65 = (char *)(v35 + 64);
            vst2q_s8(v65, v268);
            v66 = (char *)(v35 + 96);
            vst2q_s8(v66, *(int8x16x2_t *)(&v60 - 1));
            v35 += 128;
          }
          while (v35 != v59);
          v35 = v59;
        }
        if ((_WORD *)v35 != v58)
        {
          v67 = v261 + 2 * (v15 + v13) - v35 + 18;
          if (v67 < 0xE
            || v35 < (unint64_t)a6->u64 + (v67 >> 1) + 1
            && (unint64_t)a6 < (v67 & 0xFFFFFFFFFFFFFFFELL) + v35 + 2)
          {
            v68 = (_WORD *)v35;
            v69 = a6;
            goto LABEL_56;
          }
          v97 = (v67 >> 1) + 1;
          if (v67 >= 0x3E)
          {
            v98 = v97 & 0xFFFFFFFFFFFFFFE0;
            v187 = (uint8x8_t *)&a6[1];
            v188 = (uint16x8_t *)(v35 + 32);
            v189 = v97 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v190 = *(uint8x16_t *)v187[-2].i8;
              v191 = vmovl_u8(*v187);
              v192 = vmovl_high_u8(*(uint8x16_t *)v187->i8);
              v188[-2] = vmovl_u8(*(uint8x8_t *)v190.i8);
              v188[-1] = vmovl_high_u8(v190);
              *v188 = v191;
              v188[1] = v192;
              v188 += 4;
              v187 += 4;
              v189 -= 32;
            }
            while (v189);
            if (v97 == v98)
              goto LABEL_57;
            if ((v97 & 0x18) == 0)
            {
              v69 = (int8x16_t *)((char *)a6 + v98);
              v68 = (_WORD *)(v35 + 2 * v98);
              do
              {
LABEL_56:
                v70 = v69->u8[0];
                v69 = (int8x16_t *)((char *)v69 + 1);
                *v68++ = v70;
              }
              while (v68 != v58);
              goto LABEL_57;
            }
          }
          else
          {
            v98 = 0;
          }
          v68 = (_WORD *)(v35 + 2 * (v97 & 0xFFFFFFFFFFFFFFF8));
          v69 = (int8x16_t *)((char *)a6 + (v97 & 0xFFFFFFFFFFFFFFF8));
          v193 = (uint8x8_t *)&a6->i8[v98];
          v194 = (uint16x8_t *)(v35 + 2 * v98);
          v195 = v98 - (v97 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v196 = *v193++;
            *v194++ = vmovl_u8(v196);
            v195 += 8;
          }
          while (v195);
          if (v97 != (v97 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_56;
        }
LABEL_57:
        *v58 = a8;
        v71 = v58 + 1;
        if (!result)
        {
          v74 = a11;
          v75 = 0;
          v76 = v71;
          if (v39)
            goto LABEL_147;
          goto LABEL_63;
        }
        v72 = *(int8x16_t **)(result + 8);
        v73 = *(unsigned int *)(result + 4);
        if ((*(_BYTE *)(result + 16) & 4) == 0)
        {
          if ((_DWORD)v73)
          {
            if ((_DWORD)v73 == 1)
            {
              *v71 = v72->i16[0];
            }
            else
            {
              memcpy(v71, v72, 2 * v73);
              v20 = v261;
              result = a9;
              v39 = a10;
              v38 = a12;
            }
          }
LABEL_146:
          v74 = a11;
          v75 = *(unsigned int *)(result + 4);
          v76 = &v71[v75];
          if (v39)
          {
LABEL_147:
            v136 = *(int8x16_t **)(v39 + 8);
            v137 = *(unsigned int *)(v39 + 4);
            if ((*(_BYTE *)(v39 + 16) & 4) == 0)
            {
              if ((_DWORD)v137)
              {
                if ((_DWORD)v137 == 1)
                {
                  *v76 = v136->i16[0];
                }
                else
                {
                  v155 = v20;
                  result = (uint64_t)memcpy(v76, v136, 2 * v137);
                  v20 = v155;
                  v39 = a10;
                  v38 = a12;
                }
              }
LABEL_169:
              v77 = *(unsigned int *)(v39 + 4);
              v156 = &v76[v77];
              *v156 = v74;
              v78 = v156 + 1;
              if (v38)
              {
LABEL_170:
                v157 = *(int8x16_t **)(v38 + 8);
                v158 = *(unsigned int *)(v38 + 4);
                if ((*(_BYTE *)(v38 + 16) & 4) == 0)
                {
                  if ((_DWORD)v158)
                  {
                    if ((_DWORD)v158 == 1)
                    {
                      *v78 = v157->i16[0];
                    }
                    else
                    {
                      v176 = v20;
                      result = (uint64_t)memcpy(v78, v157, 2 * v158);
                      v20 = v176;
                      v38 = a12;
                    }
                  }
                  goto LABEL_192;
                }
                v159 = &v78[v158];
                if (v158 < 0x40)
                {
                  v160 = (unint64_t)v78;
                }
                else
                {
                  v160 = (unint64_t)&v78[v158 & 0xFFFFFFC0];
                  v161 = 0uLL;
                  v162 = (char *)v78;
                  do
                  {
                    v266.val[0] = *v157;
                    v163 = v157[1];
                    v271.val[0] = v157[2];
                    v164 = v157[3];
                    v157 += 4;
                    v165 = v164;
                    v271.val[1] = 0uLL;
                    v276.val[0] = v163;
                    v266.val[1] = 0uLL;
                    v166 = v162;
                    vst2q_s8(v166, v266);
                    v166 += 32;
                    v276.val[1] = 0uLL;
                    vst2q_s8(v166, v276);
                    v167 = v162 + 64;
                    vst2q_s8(v167, v271);
                    v168 = v162 + 96;
                    vst2q_s8(v168, *(int8x16x2_t *)(&v161 - 1));
                    v162 += 128;
                  }
                  while (v162 != (char *)v160);
                }
                if ((_WORD *)v160 == v159)
                {
LABEL_192:
                  v79 = *(unsigned int *)(v38 + 4);
                  goto LABEL_193;
                }
                v169 = v20 + 2 * (v75 + v77 + v158 + v15 + v13) - v160 + 22;
                if (v169 < 0xE
                  || (v160 < (unint64_t)v157->u64 + (v169 >> 1) + 1
                    ? (v170 = (unint64_t)v157 >= (v169 & 0xFFFFFFFFFFFFFFFELL) + v160 + 2)
                    : (v170 = 1),
                      !v170))
                {
                  v173 = (_WORD *)v160;
                  v174 = v157;
                  goto LABEL_189;
                }
                v171 = (v169 >> 1) + 1;
                if (v169 >= 0x3E)
                {
                  v172 = v171 & 0xFFFFFFFFFFFFFFE0;
                  v250 = (uint8x8_t *)&v157[1];
                  v251 = (uint16x8_t *)(v160 + 32);
                  v252 = v171 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v253 = *(uint8x16_t *)v250[-2].i8;
                    v254 = vmovl_u8(*v250);
                    v255 = vmovl_high_u8(*(uint8x16_t *)v250->i8);
                    v251[-2] = vmovl_u8(*(uint8x8_t *)v253.i8);
                    v251[-1] = vmovl_high_u8(v253);
                    *v251 = v254;
                    v251[1] = v255;
                    v251 += 4;
                    v250 += 4;
                    v252 -= 32;
                  }
                  while (v252);
                  if (v171 == v172)
                    goto LABEL_192;
                  if ((v171 & 0x18) == 0)
                  {
                    v174 = (int8x16_t *)((char *)v157 + v172);
                    v173 = (_WORD *)(v160 + 2 * v172);
                    do
                    {
LABEL_189:
                      v175 = v174->u8[0];
                      v174 = (int8x16_t *)((char *)v174 + 1);
                      *v173++ = v175;
                    }
                    while (v173 != v159);
                    goto LABEL_192;
                  }
                }
                else
                {
                  v172 = 0;
                }
                v173 = (_WORD *)(v160 + 2 * (v171 & 0xFFFFFFFFFFFFFFF8));
                v174 = (int8x16_t *)((char *)v157 + (v171 & 0xFFFFFFFFFFFFFFF8));
                v256 = (uint8x8_t *)&v157->i8[v172];
                v257 = (uint16x8_t *)(v160 + 2 * v172);
                v258 = v172 - (v171 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v259 = *v256++;
                  *v257++ = vmovl_u8(v259);
                  v258 += 8;
                }
                while (v258);
                if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_192;
                goto LABEL_189;
              }
LABEL_64:
              v79 = 0;
LABEL_193:
              v78[v79] = a13;
              goto LABEL_194;
            }
            v138 = &v76[v137];
            if (v137 < 0x40)
            {
              v139 = (unint64_t)v76;
            }
            else
            {
              v139 = (unint64_t)&v76[v137 & 0xFFFFFFC0];
              v140 = 0uLL;
              v141 = (char *)v76;
              do
              {
                v265.val[0] = *v136;
                v142 = v136[1];
                v270.val[0] = v136[2];
                v143 = v136[3];
                v136 += 4;
                v144 = v143;
                v270.val[1] = 0uLL;
                v275.val[0] = v142;
                v265.val[1] = 0uLL;
                v145 = v141;
                vst2q_s8(v145, v265);
                v145 += 32;
                v275.val[1] = 0uLL;
                vst2q_s8(v145, v275);
                v146 = v141 + 64;
                vst2q_s8(v146, v270);
                v147 = v141 + 96;
                vst2q_s8(v147, *(int8x16x2_t *)(&v140 - 1));
                v141 += 128;
              }
              while (v141 != (char *)v139);
            }
            if ((_WORD *)v139 == v138)
              goto LABEL_169;
            v148 = v20 + 2 * (v75 + v137 + v15 + v13) - v139 + 20;
            if (v148 < 0xE
              || (v139 < (unint64_t)v136->u64 + (v148 >> 1) + 1
                ? (v149 = (unint64_t)v136 >= (v148 & 0xFFFFFFFFFFFFFFFELL) + v139 + 2)
                : (v149 = 1),
                  !v149))
            {
              v152 = (_WORD *)v139;
              v153 = v136;
              goto LABEL_166;
            }
            v150 = (v148 >> 1) + 1;
            if (v148 >= 0x3E)
            {
              v151 = v150 & 0xFFFFFFFFFFFFFFE0;
              v240 = (uint8x8_t *)&v136[1];
              v241 = (uint16x8_t *)(v139 + 32);
              v242 = v150 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v243 = *(uint8x16_t *)v240[-2].i8;
                v244 = vmovl_u8(*v240);
                v245 = vmovl_high_u8(*(uint8x16_t *)v240->i8);
                v241[-2] = vmovl_u8(*(uint8x8_t *)v243.i8);
                v241[-1] = vmovl_high_u8(v243);
                *v241 = v244;
                v241[1] = v245;
                v241 += 4;
                v240 += 4;
                v242 -= 32;
              }
              while (v242);
              if (v150 == v151)
                goto LABEL_169;
              if ((v150 & 0x18) == 0)
              {
                v153 = (int8x16_t *)((char *)v136 + v151);
                v152 = (_WORD *)(v139 + 2 * v151);
                goto LABEL_166;
              }
            }
            else
            {
              v151 = 0;
            }
            v152 = (_WORD *)(v139 + 2 * (v150 & 0xFFFFFFFFFFFFFFF8));
            v153 = (int8x16_t *)((char *)v136 + (v150 & 0xFFFFFFFFFFFFFFF8));
            v246 = (uint8x8_t *)&v136->i8[v151];
            v247 = (uint16x8_t *)(v139 + 2 * v151);
            v248 = v151 - (v150 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v249 = *v246++;
              *v247++ = vmovl_u8(v249);
              v248 += 8;
            }
            while (v248);
            if (v150 == (v150 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_169;
            do
            {
LABEL_166:
              v154 = v153->u8[0];
              v153 = (int8x16_t *)((char *)v153 + 1);
              *v152++ = v154;
            }
            while (v152 != v138);
            goto LABEL_169;
          }
LABEL_63:
          v77 = 0;
          *v76 = v74;
          v78 = v76 + 1;
          if (v38)
            goto LABEL_170;
          goto LABEL_64;
        }
        v80 = &v71[v73];
        if (v73 < 0x40)
        {
          v81 = (unint64_t)v71;
        }
        else
        {
          v81 = (unint64_t)&v71[v73 & 0xFFFFFFC0];
          v82 = 0uLL;
          v83 = (char *)v71;
          do
          {
            v264.val[0] = *v72;
            v84 = v72[1];
            v269.val[0] = v72[2];
            v85 = v72[3];
            v72 += 4;
            v86 = v85;
            v269.val[1] = 0uLL;
            v274.val[0] = v84;
            v264.val[1] = 0uLL;
            v87 = v83;
            vst2q_s8(v87, v264);
            v87 += 32;
            v274.val[1] = 0uLL;
            vst2q_s8(v87, v274);
            v88 = v83 + 64;
            vst2q_s8(v88, v269);
            v89 = v83 + 96;
            vst2q_s8(v89, *(int8x16x2_t *)(&v82 - 1));
            v83 += 128;
          }
          while (v83 != (char *)v81);
        }
        if ((_WORD *)v81 == v80)
          goto LABEL_146;
        v99 = v261 + 2 * (v15 + v73 + v13) - v81 + 20;
        if (v99 < 0xE
          || (v81 < (unint64_t)v72->u64 + (v99 >> 1) + 1
            ? (v100 = (unint64_t)v72 >= (v99 & 0xFFFFFFFFFFFFFFFELL) + v81 + 2)
            : (v100 = 1),
              !v100))
        {
          v103 = (_WORD *)v81;
          v104 = v72;
          goto LABEL_95;
        }
        v101 = (v99 >> 1) + 1;
        if (v99 >= 0x3E)
        {
          v102 = v101 & 0xFFFFFFFFFFFFFFE0;
          v230 = (uint8x8_t *)&v72[1];
          v231 = (uint16x8_t *)(v81 + 32);
          v232 = v101 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v233 = *(uint8x16_t *)v230[-2].i8;
            v234 = vmovl_u8(*v230);
            v235 = vmovl_high_u8(*(uint8x16_t *)v230->i8);
            v231[-2] = vmovl_u8(*(uint8x8_t *)v233.i8);
            v231[-1] = vmovl_high_u8(v233);
            *v231 = v234;
            v231[1] = v235;
            v231 += 4;
            v230 += 4;
            v232 -= 32;
          }
          while (v232);
          if (v101 == v102)
            goto LABEL_146;
          if ((v101 & 0x18) == 0)
          {
            v104 = (int8x16_t *)((char *)v72 + v102);
            v103 = (_WORD *)(v81 + 2 * v102);
            goto LABEL_95;
          }
        }
        else
        {
          v102 = 0;
        }
        v103 = (_WORD *)(v81 + 2 * (v101 & 0xFFFFFFFFFFFFFFF8));
        v104 = (int8x16_t *)((char *)v72 + (v101 & 0xFFFFFFFFFFFFFFF8));
        v236 = (uint8x8_t *)&v72->i8[v102];
        v237 = (uint16x8_t *)(v81 + 2 * v102);
        v238 = v102 - (v101 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v239 = *v236++;
          *v237++ = vmovl_u8(v239);
          v238 += 8;
        }
        while (v238);
        if (v101 == (v101 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_146;
        do
        {
LABEL_95:
          v105 = v104->u8[0];
          v104 = (int8x16_t *)((char *)v104 + 1);
          *v103++ = v105;
        }
        while (v103 != v80);
        goto LABEL_146;
      }
    }
    else
    {
      v39 = a10;
      v38 = a12;
      result = a9;
      v15 = v15;
      if (v34 == v35)
        goto LABEL_47;
    }
    v51 = v261 + 2 * v15 - v34 + 18;
    if (v51 < 0xE
      || (v34 < (unint64_t)a4->u64 + (v51 >> 1) + 1
        ? (v52 = (unint64_t)a4 >= (v51 & 0xFFFFFFFFFFFFFFFELL) + v34 + 2)
        : (v52 = 1),
          !v52))
    {
      v55 = (_WORD *)v34;
      v56 = a4;
      goto LABEL_46;
    }
    v53 = (v51 >> 1) + 1;
    if (v51 >= 0x3E)
    {
      v54 = v53 & 0xFFFFFFFFFFFFFFE0;
      v177 = (uint8x8_t *)&a4[1];
      v178 = (uint16x8_t *)(v34 + 32);
      v179 = v53 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v180 = *(uint8x16_t *)v177[-2].i8;
        v181 = vmovl_u8(*v177);
        v182 = vmovl_high_u8(*(uint8x16_t *)v177->i8);
        v178[-2] = vmovl_u8(*(uint8x8_t *)v180.i8);
        v178[-1] = vmovl_high_u8(v180);
        *v178 = v181;
        v178[1] = v182;
        v178 += 4;
        v177 += 4;
        v179 -= 32;
      }
      while (v179);
      if (v53 == v54)
        goto LABEL_47;
      if ((v53 & 0x18) == 0)
      {
        v56 = (int8x16_t *)((char *)a4 + v54);
        v55 = (_WORD *)(v34 + 2 * v54);
        goto LABEL_46;
      }
    }
    else
    {
      v54 = 0;
    }
    v55 = (_WORD *)(v34 + 2 * (v53 & 0xFFFFFFFFFFFFFFF8));
    v56 = (int8x16_t *)((char *)a4 + (v53 & 0xFFFFFFFFFFFFFFF8));
    v183 = (uint8x8_t *)&a4->i8[v54];
    v184 = (uint16x8_t *)(v34 + 2 * v54);
    v185 = v54 - (v53 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v186 = *v183++;
      *v184++ = vmovl_u8(v186);
      v185 += 8;
    }
    while (v185);
    if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_47;
    do
    {
LABEL_46:
      v57 = v56->u8[0];
      v56 = (int8x16_t *)((char *)v56 + 1);
      *v55++ = v57;
    }
    while (v55 != (_WORD *)v35);
    goto LABEL_47;
  }
  if (!a2)
  {
LABEL_18:
    v20 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_194;
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    v20 = 0;
    goto LABEL_194;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20));
  v20 = v261;
  if (v261)
  {
    v21 = v18;
    v22 = (_BYTE *)(v261 + 20);
    *(_DWORD *)v261 = 2;
    *(_DWORD *)(v261 + 4) = a2;
    *(_QWORD *)(v261 + 8) = v261 + 20;
    *(_DWORD *)(v261 + 16) = 4;
    v24 = a10;
    v23 = a12;
    result = a9;
    if ((_DWORD)v15)
    {
      if ((_DWORD)v15 != 1)
      {
        memcpy((void *)(v261 + 20), a4, v15);
        v20 = v261;
        result = a9;
        v24 = a10;
        v23 = a12;
        v15 = v15;
        v25 = &v22[v15];
        v18 = v21;
        v26 = a13;
        if (!(_DWORD)v13)
        {
LABEL_9:
          v13 = v13;
          v25[v13] = a8;
          v27 = &v25[v13 + 1];
          if (result)
            goto LABEL_10;
LABEL_30:
          v47 = 0;
          v48 = v27;
          if (v24)
            goto LABEL_99;
          goto LABEL_31;
        }
LABEL_26:
        if ((_DWORD)v13 == 1)
        {
          *v25 = a6->i8[0];
          v13 = 1;
          v25[1] = a8;
          v27 = v25 + 2;
          if (!result)
            goto LABEL_30;
        }
        else
        {
          v46 = v20;
          memcpy(v25, a6, v13);
          v20 = v46;
          result = a9;
          v24 = a10;
          v23 = a12;
          v13 = v13;
          v25[v13] = a8;
          v27 = &v25[v13 + 1];
          if (!a9)
            goto LABEL_30;
        }
LABEL_10:
        v28 = *(int8x16_t **)(result + 8);
        v29 = *(unsigned int *)(result + 4);
        if ((*(_BYTE *)(result + 16) & 4) != 0)
        {
          if ((_DWORD)v29)
          {
            if ((_DWORD)v29 == 1)
            {
              *v27 = v28->i8[0];
            }
            else
            {
              v106 = v20;
              memcpy(v27, v28, v29);
              v20 = v106;
              result = a9;
              v24 = a10;
              v23 = a12;
            }
          }
        }
        else
        {
          v30 = &v27[v29];
          if (v29 < 0x10)
          {
            v31 = (unint64_t)v27;
          }
          else
          {
            v31 = (unint64_t)&v27[v29 & 0xFFFFFFF0];
            v32 = (unsigned __int128 *)v27;
            do
            {
              v33 = (unsigned __int128)vld2q_s8(v28->i8);
              v28 += 2;
              *v32++ = v33;
            }
            while (v32 != (unsigned __int128 *)v31);
          }
          if ((_BYTE *)v31 != v30)
          {
            v90 = v20 + v29 + v15 + v13;
            v91 = v90 - v31 + 21;
            if (v91 < 8
              || (v31 < (unint64_t)&v28[2].u64[1] + 2 * v90 + -2 * v31 + 2
                ? (v92 = (unint64_t)v28 >= v20 + v29 + v13 + v15 + 21)
                : (v92 = 1),
                  !v92))
            {
              v94 = (_BYTE *)v31;
              v95 = v28;
              goto LABEL_80;
            }
            if (v91 >= 0x20)
            {
              v93 = v91 & 0xFFFFFFFFFFFFFFE0;
              v197 = v28 + 2;
              v198 = (int8x16_t *)(v31 + 16);
              v199 = v91 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v201 = v197[-2];
                v200 = v197[-1];
                v203 = *v197;
                v202 = v197[1];
                v197 += 4;
                v198[-1] = vuzp1q_s8(v201, v200);
                *v198 = vuzp1q_s8(v203, v202);
                v198 += 2;
                v199 -= 32;
              }
              while (v199);
              if (v91 == v93)
                goto LABEL_98;
              if ((v91 & 0x18) == 0)
              {
                v95 = (int8x16_t *)((char *)v28 + 2 * v93);
                v94 = (_BYTE *)(v31 + v93);
                do
                {
LABEL_80:
                  v96 = v95->i8[0];
                  v95 = (int8x16_t *)((char *)v95 + 2);
                  *v94++ = v96;
                }
                while (v94 != v30);
                goto LABEL_98;
              }
            }
            else
            {
              v93 = 0;
            }
            v94 = (_BYTE *)(v31 + (v91 & 0xFFFFFFFFFFFFFFF8));
            v95 = (int8x16_t *)((char *)v28 + 2 * (v91 & 0xFFFFFFFFFFFFFFF8));
            v204 = (int16x8_t *)((char *)v28 + 2 * v93);
            v205 = (int8x8_t *)(v31 + v93);
            v206 = v93 - (v91 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v207 = *v204++;
              *v205++ = vmovn_s16(v207);
              v206 += 8;
            }
            while (v206);
            if (v91 != (v91 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_80;
          }
        }
LABEL_98:
        v47 = *(unsigned int *)(result + 4);
        v48 = &v27[v47];
        if (v24)
        {
LABEL_99:
          v107 = *(int8x16_t **)(v24 + 8);
          v108 = *(unsigned int *)(v24 + 4);
          if ((*(_BYTE *)(v24 + 16) & 4) != 0)
          {
            if ((_DWORD)v108)
            {
              if ((_DWORD)v108 == 1)
              {
                *v48 = v107->i8[0];
              }
              else
              {
                v120 = v20;
                result = (uint64_t)memcpy(v48, v107, v108);
                v20 = v120;
                v24 = a10;
                v23 = a12;
              }
            }
          }
          else
          {
            v109 = &v48[v108];
            if (v108 < 0x10)
            {
              v110 = (unint64_t)v48;
            }
            else
            {
              v110 = (unint64_t)&v48[v108 & 0xFFFFFFF0];
              v111 = (unsigned __int128 *)v48;
              do
              {
                v112 = (unsigned __int128)vld2q_s8(v107->i8);
                v107 += 2;
                *v111++ = v112;
              }
              while (v111 != (unsigned __int128 *)v110);
            }
            if ((_BYTE *)v110 != v109)
            {
              v113 = v47 + v20 + v108 + v15 + v13 - v110 + 21;
              if (v113 < 8
                || ((v114 = v47 + v20 + v108,
                     v110 < (unint64_t)&v107[2].u64[1] + 2 * v114 + 2 * v15 + 2 * v13 + -2 * v110 + 2)
                  ? (v115 = (unint64_t)v107 >= v114 + v13 + v15 + 21)
                  : (v115 = 1),
                    !v115))
              {
                v117 = (_BYTE *)v110;
                v118 = v107;
                goto LABEL_118;
              }
              if (v113 >= 0x20)
              {
                v116 = v113 & 0xFFFFFFFFFFFFFFE0;
                v208 = v107 + 2;
                v209 = (int8x16_t *)(v110 + 16);
                v210 = v113 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v212 = v208[-2];
                  v211 = v208[-1];
                  v214 = *v208;
                  v213 = v208[1];
                  v208 += 4;
                  v209[-1] = vuzp1q_s8(v212, v211);
                  *v209 = vuzp1q_s8(v214, v213);
                  v209 += 2;
                  v210 -= 32;
                }
                while (v210);
                if (v113 == v116)
                  goto LABEL_121;
                if ((v113 & 0x18) == 0)
                {
                  v118 = (int8x16_t *)((char *)v107 + 2 * v116);
                  v117 = (_BYTE *)(v110 + v116);
                  do
                  {
LABEL_118:
                    v119 = v118->i8[0];
                    v118 = (int8x16_t *)((char *)v118 + 2);
                    *v117++ = v119;
                  }
                  while (v117 != v109);
                  goto LABEL_121;
                }
              }
              else
              {
                v116 = 0;
              }
              v117 = (_BYTE *)(v110 + (v113 & 0xFFFFFFFFFFFFFFF8));
              v118 = (int8x16_t *)((char *)v107 + 2 * (v113 & 0xFFFFFFFFFFFFFFF8));
              v215 = (int16x8_t *)((char *)v107 + 2 * v116);
              v216 = (int8x8_t *)(v110 + v116);
              v217 = v116 - (v113 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v218 = *v215++;
                *v216++ = vmovn_s16(v218);
                v217 += 8;
              }
              while (v217);
              if (v113 != (v113 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_118;
            }
          }
LABEL_121:
          v49 = *(unsigned int *)(v24 + 4);
          v121 = &v48[v49];
          *v121 = a11;
          v50 = v121 + 1;
          if (v23)
          {
LABEL_122:
            v122 = *(int8x16_t **)(v23 + 8);
            v123 = *(unsigned int *)(v23 + 4);
            if ((*(_BYTE *)(v23 + 16) & 4) != 0)
            {
              if ((_DWORD)v123)
              {
                if ((_DWORD)v123 == 1)
                {
                  *v50 = v122->i8[0];
                }
                else
                {
                  v135 = v20;
                  result = (uint64_t)memcpy(v50, v122, v123);
                  v20 = v135;
                  v23 = a12;
                }
              }
              goto LABEL_144;
            }
            v124 = &v50[v123];
            if (v123 < 0x10)
            {
              v125 = (unint64_t)v50;
            }
            else
            {
              v125 = (unint64_t)&v50[v123 & 0xFFFFFFF0];
              v126 = (unsigned __int128 *)v50;
              do
              {
                v127 = (unsigned __int128)vld2q_s8(v122->i8);
                v122 += 2;
                *v126++ = v127;
              }
              while (v126 != (unsigned __int128 *)v125);
            }
            if ((_BYTE *)v125 == v124)
            {
LABEL_144:
              v50[*(unsigned int *)(v23 + 4)] = v26;
              goto LABEL_194;
            }
            v128 = v47 + v49 + v20 + v123 + v15 + v13 - v125 + 22;
            if (v128 < 8
              || ((v129 = v49 + v47 + v20 + v123,
                   v125 < (unint64_t)&v122[2].u64[1] + 2 * v129 + 2 * v15 + 2 * v13 + -2 * v125 + 4)
                ? (v130 = (unint64_t)v122 >= v129 + v13 + v15 + 22)
                : (v130 = 1),
                  !v130))
            {
              v132 = (_BYTE *)v125;
              v133 = v122;
              goto LABEL_141;
            }
            if (v128 >= 0x20)
            {
              v131 = v128 & 0xFFFFFFFFFFFFFFE0;
              v219 = v122 + 2;
              v220 = (int8x16_t *)(v125 + 16);
              v221 = v128 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v223 = v219[-2];
                v222 = v219[-1];
                v225 = *v219;
                v224 = v219[1];
                v219 += 4;
                v220[-1] = vuzp1q_s8(v223, v222);
                *v220 = vuzp1q_s8(v225, v224);
                v220 += 2;
                v221 -= 32;
              }
              while (v221);
              if (v128 == v131)
                goto LABEL_144;
              if ((v128 & 0x18) == 0)
              {
                v133 = (int8x16_t *)((char *)v122 + 2 * v131);
                v132 = (_BYTE *)(v125 + v131);
                do
                {
LABEL_141:
                  v134 = v133->i8[0];
                  v133 = (int8x16_t *)((char *)v133 + 2);
                  *v132++ = v134;
                }
                while (v132 != v124);
                goto LABEL_144;
              }
            }
            else
            {
              v131 = 0;
            }
            v132 = (_BYTE *)(v125 + (v128 & 0xFFFFFFFFFFFFFFF8));
            v133 = (int8x16_t *)((char *)v122 + 2 * (v128 & 0xFFFFFFFFFFFFFFF8));
            v226 = (int16x8_t *)((char *)v122 + 2 * v131);
            v227 = (int8x8_t *)(v125 + v131);
            v228 = v131 - (v128 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v229 = *v226++;
              *v227++ = vmovn_s16(v229);
              v228 += 8;
            }
            while (v228);
            if (v128 == (v128 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_144;
            goto LABEL_141;
          }
          goto LABEL_32;
        }
LABEL_31:
        v49 = 0;
        *v48 = a11;
        v50 = v48 + 1;
        if (v23)
          goto LABEL_122;
LABEL_32:
        *v50 = v26;
        goto LABEL_194;
      }
      *v22 = a4->i8[0];
    }
    v15 = v15;
    v25 = &v22[v15];
    v18 = v21;
    v26 = a13;
    if (!(_DWORD)v13)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_194:
  *v18 = v20;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier &,WTF::ASCIILiteral>(uint64_t a1, __int128 *a2, int8x16_t *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9, _BYTE *a10, uint64_t a11)
{
  _DWORD *v13;
  _DWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  __int128 v22;

  v13 = *(_DWORD **)(a9 + 24);
  if (v13)
    *v13 += 2;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(&v20, a3, a4, a5, a6, a7, a8, (uint64_t)v13, a10, a11);
  if (v20)
  {
    v21 = v20;
    v22 = *a2;
    v15 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 128))
    {
      v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v15 + 1, (unint64_t)&v21);
      v17 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      v18 = *(_QWORD *)v16;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)v17 = v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
      result = v21;
      ++*(_DWORD *)(a1 + 132);
      v21 = 0;
      if (result)
      {
        if (*result == 2)
        {
          result = (_DWORD *)WTF::StringImpl::destroy();
          if (!v13)
            goto LABEL_14;
        }
        else
        {
          *result -= 2;
          if (!v13)
            goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 120) + 24 * v15;
      *(_QWORD *)v19 = v20;
      *(_OWORD *)(v19 + 8) = v22;
      ++*(_DWORD *)(a1 + 132);
      v21 = 0;
    }
    if (!v13)
    {
LABEL_14:
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
      return result;
    }
LABEL_11:
    if (*v13 == 2)
      result = (_DWORD *)WTF::StringImpl::destroy();
    else
      *v13 -= 2;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WGSL::AST::Identifier,WTF::ASCIILiteral>(_QWORD *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10)
{
  size_t v10;
  size_t v12;
  size_t v14;
  unint64_t v15;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  int8x16_t *v46;
  size_t v47;
  _BYTE *v48;
  unint64_t v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  int8x16_t *v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _WORD *v65;
  int8x16_t *v66;
  __int16 v67;
  unint64_t v68;
  unint64_t v69;
  __int128 v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _WORD *v82;
  int8x16_t *v83;
  __int16 v84;
  char *v85;
  unint64_t v86;
  __int128 v87;
  int8x16_t v88;
  __int128 v89;
  __int128 v90;
  char *v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  unsigned __int8 *v100;
  __int16 v101;
  int8x16_t *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  __int128 v106;
  char *v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  char *v111;
  char *v112;
  char *v113;
  _BYTE *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  int8x16_t *v121;
  __int16 v122;
  uint64_t v123;
  unint64_t v124;
  _WORD *v125;
  unint64_t v126;
  __int128 v127;
  int8x16_t v128;
  __int128 v129;
  __int128 v130;
  char *v131;
  char *v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v140;
  unint64_t v141;
  _WORD *v142;
  unsigned __int8 *v143;
  __int16 v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint8x8_t *v154;
  uint16x8_t *v155;
  unint64_t v156;
  uint8x16_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint8x8_t *v160;
  uint16x8_t *v161;
  unint64_t v162;
  uint8x8_t v163;
  uint8x8_t *v164;
  uint16x8_t *v165;
  unint64_t v166;
  uint8x16_t v167;
  uint16x8_t v168;
  uint16x8_t v169;
  uint8x8_t *v170;
  uint16x8_t *v171;
  unint64_t v172;
  uint8x8_t v173;
  uint8x8_t *v174;
  uint16x8_t *v175;
  unint64_t v176;
  uint8x16_t v177;
  uint16x8_t v178;
  uint16x8_t v179;
  uint8x8_t *v180;
  uint16x8_t *v181;
  unint64_t v182;
  uint8x8_t v183;
  uint8x8_t *v184;
  uint16x8_t *v185;
  unint64_t v186;
  uint8x16_t v187;
  uint16x8_t v188;
  uint16x8_t v189;
  uint8x8_t *v190;
  uint16x8_t *v191;
  unint64_t v192;
  uint8x8_t v193;
  int8x16_t *v194;
  int8x16_t *v195;
  unint64_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int16x8_t *v201;
  int8x8_t *v202;
  unint64_t v203;
  int16x8_t v204;
  uint8x8_t *v205;
  uint16x8_t *v206;
  unint64_t v207;
  uint8x16_t v208;
  uint16x8_t v209;
  uint16x8_t v210;
  uint8x8_t *v211;
  uint16x8_t *v212;
  unint64_t v213;
  uint8x8_t v214;
  _QWORD *v217;
  uint64_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;
  int8x16x2_t v222;
  int8x16x2_t v223;
  int8x16x2_t v224;
  int8x16x2_t v225;
  int8x16x2_t v226;
  int8x16x2_t v227;
  int8x16x2_t v228;
  int8x16x2_t v229;
  int8x16x2_t v230;
  int8x16x2_t v231;
  int8x16x2_t v232;
  int8x16x2_t v233;
  int8x16x2_t v234;

  if (a3)
    v10 = a3 - 1;
  else
    v10 = 0;
  if (v10 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FD5D4);
  }
  if (a5)
    v12 = a5 - 1;
  else
    v12 = 0;
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FD5F4);
  }
  if (a7)
    v14 = a7 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FD614);
  }
  if (a10)
    v15 = a10 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FD634);
  }
  if (a8)
  {
    v19 = *(_DWORD *)(a8 + 4);
    if (((v19 | v15) & 0x80000000) != 0)
      goto LABEL_26;
  }
  else
  {
    v19 = 0;
    if ((v15 & 0x80000000) != 0)
    {
LABEL_26:
      v25 = 0;
      goto LABEL_27;
    }
  }
  v20 = __OFADD__(v19, (_DWORD)v15);
  v21 = v19 + v15;
  if (v20)
    goto LABEL_26;
  v20 = __OFADD__((_DWORD)v14, v21);
  v22 = v14 + v21;
  if (v20)
    goto LABEL_26;
  v20 = __OFADD__((_DWORD)v12, v22);
  v23 = v12 + v22;
  if (v20)
    goto LABEL_26;
  v24 = (v10 + v23);
  if (__OFADD__((_DWORD)v10, v23))
    goto LABEL_26;
  if (!a8 || (*(_BYTE *)(a8 + 16) & 4) != 0)
  {
    if (!(_DWORD)v24)
      goto LABEL_43;
    if ((v24 & 0x80000000) != 0)
      goto LABEL_26;
    v217 = result;
    WTF::tryFastCompactMalloc((WTF *)(v24 + 20));
    v25 = v219;
    if (!v219)
    {
LABEL_139:
      result = v217;
      goto LABEL_27;
    }
    v41 = (_BYTE *)(v219 + 20);
    *(_DWORD *)v219 = 2;
    *(_DWORD *)(v219 + 4) = v24;
    *(_QWORD *)(v219 + 8) = v219 + 20;
    *(_DWORD *)(v219 + 16) = 4;
    v42 = a6;
    if ((_DWORD)v10)
    {
      if ((_DWORD)v10 == 1)
      {
        *v41 = a2->i8[0];
      }
      else
      {
        memcpy((void *)(v219 + 20), a2, v10);
        v41 = (_BYTE *)(v219 + 20);
        v42 = a6;
        v25 = v219;
      }
    }
    v43 = &v41[v10];
    if ((_DWORD)v12)
    {
      if ((_DWORD)v12 == 1)
      {
        *v43 = a4->i8[0];
      }
      else
      {
        memcpy(v43, a4, v12);
        v42 = a6;
        v25 = v219;
      }
    }
    v44 = &v43[v12];
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
      {
        *v44 = *v42;
      }
      else
      {
        memcpy(v44, v42, v14);
        v25 = v219;
      }
    }
    v45 = &v44[v14];
    if (!a8)
    {
      v52 = 0;
      goto LABEL_136;
    }
    v46 = *(int8x16_t **)(a8 + 8);
    v47 = *(unsigned int *)(a8 + 4);
    if ((*(_BYTE *)(a8 + 16) & 4) != 0)
    {
      if ((_DWORD)v47)
      {
        if ((_DWORD)v47 == 1)
        {
          *v45 = v46->i8[0];
        }
        else
        {
          memcpy(&v44[v14], v46, v47);
          v25 = v219;
        }
      }
      goto LABEL_135;
    }
    v48 = &v45[v47];
    if (v47 < 0x10)
    {
      v49 = (unint64_t)&v44[v14];
    }
    else
    {
      v49 = (unint64_t)&v45[v47 & 0xFFFFFFF0];
      v50 = (unsigned __int128 *)&v44[v14];
      do
      {
        v51 = (unsigned __int128)vld2q_s8(v46->i8);
        v46 += 2;
        *v50++ = v51;
      }
      while (v50 != (unsigned __int128 *)v49);
    }
    if ((_BYTE *)v49 == v48)
    {
LABEL_135:
      v52 = *(unsigned int *)(a8 + 4);
LABEL_136:
      if ((_DWORD)v15)
      {
        v114 = &v45[v52];
        if ((_DWORD)v15 != 1)
        {
          memcpy(v114, a9, v15);
          v25 = v219;
          result = v217;
          goto LABEL_27;
        }
        *v114 = *a9;
      }
      goto LABEL_139;
    }
    v53 = a7 + a5 + a3 + v25 + v47;
    v54 = v53 - v49 - (a7 != 0) - (a5 != 0) - (a3 != 0) + 20;
    if (v54 < 8)
      goto LABEL_81;
    if (a3)
      v55 = v49 + 1;
    else
      v55 = v49;
    if (a5)
      ++v55;
    if (a7)
    {
      ++v55;
      v56 = v49 + 1;
    }
    else
    {
      v56 = v49;
    }
    if (a5)
      ++v56;
    if (a3)
      ++v56;
    if (v49 < (unint64_t)&v46[2].u64[1] + 2 * v53 + -2 * v56 && (unint64_t)v46 < v53 - v55 + v49 + 20)
    {
LABEL_81:
      v57 = (_BYTE *)v49;
      v58 = v46;
      goto LABEL_82;
    }
    if (v54 >= 0x20)
    {
      v151 = v54 & 0xFFFFFFFFFFFFFFE0;
      v194 = v46 + 2;
      v195 = (int8x16_t *)(v49 + 16);
      v196 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v198 = v194[-2];
        v197 = v194[-1];
        v200 = *v194;
        v199 = v194[1];
        v194 += 4;
        v195[-1] = vuzp1q_s8(v198, v197);
        *v195 = vuzp1q_s8(v200, v199);
        v195 += 2;
        v196 -= 32;
      }
      while (v196);
      if (v54 == v151)
        goto LABEL_135;
      if ((v54 & 0x18) == 0)
      {
        v58 = (int8x16_t *)((char *)v46 + 2 * v151);
        v57 = (_BYTE *)(v49 + v151);
        do
        {
LABEL_82:
          v59 = v58->i8[0];
          v58 = (int8x16_t *)((char *)v58 + 2);
          *v57++ = v59;
        }
        while (v57 != v48);
        goto LABEL_135;
      }
    }
    else
    {
      v151 = 0;
    }
    v57 = (_BYTE *)(v49 + (v54 & 0xFFFFFFFFFFFFFFF8));
    v58 = (int8x16_t *)((char *)v46 + 2 * (v54 & 0xFFFFFFFFFFFFFFF8));
    v201 = (int16x8_t *)((char *)v46 + 2 * v151);
    v202 = (int8x8_t *)(v49 + v151);
    v203 = v151 - (v54 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v204 = *v201++;
      *v202++ = vmovn_s16(v204);
      v203 += 8;
    }
    while (v203);
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_135;
    goto LABEL_82;
  }
  if (!(_DWORD)v24)
  {
LABEL_43:
    v25 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_27;
  }
  if (v24 > 0x7FFFFFEF)
    goto LABEL_26;
  v27 = result;
  WTF::tryFastCompactMalloc((WTF *)(2 * v24 + 20));
  v25 = v219;
  if (!v219)
  {
    result = v27;
    goto LABEL_27;
  }
  v28 = v219 + 20;
  *(_DWORD *)v219 = 2;
  *(_DWORD *)(v219 + 4) = v24;
  *(_QWORD *)(v219 + 8) = v219 + 20;
  *(_DWORD *)(v219 + 16) = 0;
  v29 = v219 + 20 + 2 * v10;
  result = v27;
  if ((v10 & 0xFFFFFFC0) != 0)
  {
    v30 = v28 + 2 * (v10 & 0xFFFFFFC0);
    v31 = 0uLL;
    v32 = (unint64_t)a9;
    v33 = a3;
    v34 = (unint64_t)a6;
    do
    {
      v220.val[0] = *a2;
      v35 = a2[1];
      v225.val[0] = a2[2];
      v36 = a2[3];
      a2 += 4;
      v37 = v36;
      v225.val[1] = 0uLL;
      v230.val[0] = v35;
      v220.val[1] = 0uLL;
      v38 = (char *)v28;
      vst2q_s8(v38, v220);
      v38 += 32;
      v230.val[1] = 0uLL;
      vst2q_s8(v38, v230);
      v39 = (char *)(v28 + 64);
      vst2q_s8(v39, v225);
      v40 = (char *)(v28 + 96);
      vst2q_s8(v40, *(int8x16x2_t *)(&v31 - 1));
      v28 += 128;
    }
    while (v28 != v30);
    v28 = v30;
  }
  else
  {
    v32 = (unint64_t)a9;
    v33 = a3;
    v34 = (unint64_t)a6;
  }
  if (v28 != v29)
  {
    v60 = v219 + 2 * v33 - v28;
    v61 = -2;
    if (v33)
      v62 = -2;
    else
      v62 = 0;
    v63 = v60 + v62 + 18;
    if (v63 < 0xE)
      goto LABEL_94;
    if (!v33)
      v61 = 0;
    v64 = v60 + v61 + 18;
    if (v28 < (unint64_t)a2->u64 + (v64 >> 1) + 1
      && (unint64_t)a2 < (v64 & 0xFFFFFFFFFFFFFFFELL) + v28 + 2)
    {
LABEL_94:
      v65 = (_WORD *)v28;
      v66 = a2;
      goto LABEL_95;
    }
    v145 = (v63 >> 1) + 1;
    if (v63 >= 0x3E)
    {
      v146 = v145 & 0xFFFFFFFFFFFFFFE0;
      v164 = (uint8x8_t *)&a2[1];
      v165 = (uint16x8_t *)(v28 + 32);
      v166 = v145 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v167 = *(uint8x16_t *)v164[-2].i8;
        v168 = vmovl_u8(*v164);
        v169 = vmovl_high_u8(*(uint8x16_t *)v164->i8);
        v165[-2] = vmovl_u8(*(uint8x8_t *)v167.i8);
        v165[-1] = vmovl_high_u8(v167);
        *v165 = v168;
        v165[1] = v169;
        v165 += 4;
        v164 += 4;
        v166 -= 32;
      }
      while (v166);
      if (v145 == v146)
        goto LABEL_96;
      if ((v145 & 0x18) == 0)
      {
        v66 = (int8x16_t *)((char *)a2 + v146);
        v65 = (_WORD *)(v28 + 2 * v146);
        do
        {
LABEL_95:
          v67 = v66->u8[0];
          v66 = (int8x16_t *)((char *)v66 + 1);
          *v65++ = v67;
        }
        while (v65 != (_WORD *)v29);
        goto LABEL_96;
      }
    }
    else
    {
      v146 = 0;
    }
    v65 = (_WORD *)(v28 + 2 * (v145 & 0xFFFFFFFFFFFFFFF8));
    v66 = (int8x16_t *)((char *)a2 + (v145 & 0xFFFFFFFFFFFFFFF8));
    v170 = (uint8x8_t *)&a2->i8[v146];
    v171 = (uint16x8_t *)(v28 + 2 * v146);
    v172 = v146 - (v145 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v173 = *v170++;
      *v171++ = vmovl_u8(v173);
      v172 += 8;
    }
    while (v172);
    if (v145 != (v145 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_95;
  }
LABEL_96:
  v68 = v29 + 2 * v12;
  if ((v12 & 0xFFFFFFC0) != 0)
  {
    v69 = v29 + 2 * (v12 & 0xFFFFFFC0);
    v70 = 0uLL;
    do
    {
      v221.val[0] = *a4;
      v71 = a4[1];
      v226.val[0] = a4[2];
      v72 = a4[3];
      a4 += 4;
      v73 = v72;
      v226.val[1] = 0uLL;
      v231.val[0] = v71;
      v221.val[1] = 0uLL;
      v74 = (char *)v29;
      vst2q_s8(v74, v221);
      v74 += 32;
      v231.val[1] = 0uLL;
      vst2q_s8(v74, v231);
      v75 = (char *)(v29 + 64);
      vst2q_s8(v75, v226);
      v76 = (char *)(v29 + 96);
      vst2q_s8(v76, *(int8x16x2_t *)(&v70 - 1));
      v29 += 128;
    }
    while (v29 != v69);
    v29 = v69;
  }
  if (v29 != v68)
  {
    v77 = v219 + 2 * (v12 + v33) - v29;
    v78 = -2;
    if (v33)
      v79 = -2;
    else
      v79 = 0;
    v80 = v77 + v79 + 18;
    if (v80 < 0xE)
      goto LABEL_109;
    if (!v33)
      v78 = 0;
    v81 = v77 + v78 + 18;
    if (v29 < (unint64_t)a4->u64 + (v81 >> 1) + 1
      && (unint64_t)a4 < (v81 & 0xFFFFFFFFFFFFFFFELL) + v29 + 2)
    {
LABEL_109:
      v82 = (_WORD *)v29;
      v83 = a4;
      goto LABEL_110;
    }
    v147 = (v80 >> 1) + 1;
    if (v80 >= 0x3E)
    {
      v148 = v147 & 0xFFFFFFFFFFFFFFE0;
      v174 = (uint8x8_t *)&a4[1];
      v175 = (uint16x8_t *)(v29 + 32);
      v176 = v147 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v177 = *(uint8x16_t *)v174[-2].i8;
        v178 = vmovl_u8(*v174);
        v179 = vmovl_high_u8(*(uint8x16_t *)v174->i8);
        v175[-2] = vmovl_u8(*(uint8x8_t *)v177.i8);
        v175[-1] = vmovl_high_u8(v177);
        *v175 = v178;
        v175[1] = v179;
        v175 += 4;
        v174 += 4;
        v176 -= 32;
      }
      while (v176);
      if (v147 == v148)
        goto LABEL_111;
      if ((v147 & 0x18) == 0)
      {
        v83 = (int8x16_t *)((char *)a4 + v148);
        v82 = (_WORD *)(v29 + 2 * v148);
        do
        {
LABEL_110:
          v84 = v83->u8[0];
          v83 = (int8x16_t *)((char *)v83 + 1);
          *v82++ = v84;
        }
        while (v82 != (_WORD *)v68);
        goto LABEL_111;
      }
    }
    else
    {
      v148 = 0;
    }
    v82 = (_WORD *)(v29 + 2 * (v147 & 0xFFFFFFFFFFFFFFF8));
    v83 = (int8x16_t *)((char *)a4 + (v147 & 0xFFFFFFFFFFFFFFF8));
    v180 = (uint8x8_t *)&a4->i8[v148];
    v181 = (uint16x8_t *)(v29 + 2 * v148);
    v182 = v148 - (v147 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v183 = *v180++;
      *v181++ = vmovl_u8(v183);
      v182 += 8;
    }
    while (v182);
    if (v147 != (v147 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_110;
  }
LABEL_111:
  v85 = (char *)(v68 + 2 * v14);
  if ((v14 & 0xFFFFFFC0) != 0)
  {
    v86 = v68 + 2 * (v14 & 0xFFFFFFC0);
    v87 = 0uLL;
    do
    {
      v222.val[0] = *(int8x16_t *)v34;
      v88 = *(int8x16_t *)(v34 + 16);
      v227.val[0] = *(int8x16_t *)(v34 + 32);
      v89 = *(_OWORD *)(v34 + 48);
      v34 += 64;
      v90 = v89;
      v227.val[1] = 0uLL;
      v232.val[0] = v88;
      v222.val[1] = 0uLL;
      v91 = (char *)v68;
      vst2q_s8(v91, v222);
      v91 += 32;
      v232.val[1] = 0uLL;
      vst2q_s8(v91, v232);
      v92 = (char *)(v68 + 64);
      vst2q_s8(v92, v227);
      v93 = (char *)(v68 + 96);
      vst2q_s8(v93, *(int8x16x2_t *)(&v87 - 1));
      v68 += 128;
    }
    while (v68 != v86);
    v68 = v86;
  }
  if ((char *)v68 != v85)
  {
    v94 = v219 + 2 * (v12 + v33 + v14) - v68;
    v95 = -2;
    if (v33)
      v96 = -2;
    else
      v96 = 0;
    v97 = v94 + v96 + 18;
    if (v97 < 0xE)
      goto LABEL_124;
    if (!v33)
      v95 = 0;
    v98 = v94 + v95 + 18;
    if (v68 < v34 + (v98 >> 1) + 1 && v34 < (v98 & 0xFFFFFFFFFFFFFFFELL) + v68 + 2)
    {
LABEL_124:
      v99 = (char *)v68;
      v100 = (unsigned __int8 *)v34;
      goto LABEL_125;
    }
    v149 = (v97 >> 1) + 1;
    if (v97 >= 0x3E)
    {
      v150 = v149 & 0xFFFFFFFFFFFFFFE0;
      v184 = (uint8x8_t *)(v34 + 16);
      v185 = (uint16x8_t *)(v68 + 32);
      v186 = v149 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v187 = *(uint8x16_t *)v184[-2].i8;
        v188 = vmovl_u8(*v184);
        v189 = vmovl_high_u8(*(uint8x16_t *)v184->i8);
        v185[-2] = vmovl_u8(*(uint8x8_t *)v187.i8);
        v185[-1] = vmovl_high_u8(v187);
        *v185 = v188;
        v185[1] = v189;
        v185 += 4;
        v184 += 4;
        v186 -= 32;
      }
      while (v186);
      if (v149 == v150)
        goto LABEL_126;
      if ((v149 & 0x18) == 0)
      {
        v100 = (unsigned __int8 *)(v34 + v150);
        v99 = (char *)(v68 + 2 * v150);
        do
        {
LABEL_125:
          v101 = *v100++;
          *(_WORD *)v99 = v101;
          v99 += 2;
        }
        while (v99 != v85);
        goto LABEL_126;
      }
    }
    else
    {
      v150 = 0;
    }
    v99 = (char *)(v68 + 2 * (v149 & 0xFFFFFFFFFFFFFFF8));
    v100 = (unsigned __int8 *)(v34 + (v149 & 0xFFFFFFFFFFFFFFF8));
    v190 = (uint8x8_t *)(v34 + v150);
    v191 = (uint16x8_t *)(v68 + 2 * v150);
    v192 = v150 - (v149 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v193 = *v190++;
      *v191++ = vmovl_u8(v193);
      v192 += 8;
    }
    while (v192);
    if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_125;
  }
LABEL_126:
  v102 = *(int8x16_t **)(a8 + 8);
  v103 = *(unsigned int *)(a8 + 4);
  if ((*(_BYTE *)(a8 + 16) & 4) != 0)
  {
    v104 = &v85[2 * v103];
    if (v103 < 0x40)
    {
      v105 = (unint64_t)v85;
    }
    else
    {
      v105 = (unint64_t)&v85[2 * (v103 & 0xFFFFFFC0)];
      v106 = 0uLL;
      v107 = v85;
      do
      {
        v223.val[0] = *v102;
        v108 = v102[1];
        v228.val[0] = v102[2];
        v109 = v102[3];
        v102 += 4;
        v110 = v109;
        v228.val[1] = 0uLL;
        v233.val[0] = v108;
        v223.val[1] = 0uLL;
        v111 = v107;
        vst2q_s8(v111, v223);
        v111 += 32;
        v233.val[1] = 0uLL;
        vst2q_s8(v111, v233);
        v112 = v107 + 64;
        vst2q_s8(v112, v228);
        v113 = v107 + 96;
        vst2q_s8(v113, *(int8x16x2_t *)(&v106 - 1));
        v107 += 128;
      }
      while (v107 != (char *)v105);
    }
    if ((char *)v105 == v104)
      goto LABEL_155;
    v115 = v219 + 2 * (v103 + v33 + v12 + v14) - v105;
    v116 = -2;
    if (v33)
      v117 = -2;
    else
      v117 = 0;
    v118 = v115 + v117 + 18;
    if (v118 < 0xE)
      goto LABEL_151;
    if (!v33)
      v116 = 0;
    v119 = v115 + v116 + 18;
    if (v105 < (unint64_t)v102->u64 + (v119 >> 1) + 1
      && (unint64_t)v102 < (v119 & 0xFFFFFFFFFFFFFFFELL) + v105 + 2)
    {
LABEL_151:
      v120 = (char *)v105;
      v121 = v102;
      goto LABEL_152;
    }
    v152 = (v118 >> 1) + 1;
    if (v118 >= 0x3E)
    {
      v153 = v152 & 0xFFFFFFFFFFFFFFE0;
      v205 = (uint8x8_t *)&v102[1];
      v206 = (uint16x8_t *)(v105 + 32);
      v207 = v152 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v208 = *(uint8x16_t *)v205[-2].i8;
        v209 = vmovl_u8(*v205);
        v210 = vmovl_high_u8(*(uint8x16_t *)v205->i8);
        v206[-2] = vmovl_u8(*(uint8x8_t *)v208.i8);
        v206[-1] = vmovl_high_u8(v208);
        *v206 = v209;
        v206[1] = v210;
        v206 += 4;
        v205 += 4;
        v207 -= 32;
      }
      while (v207);
      if (v152 == v153)
        goto LABEL_155;
      if ((v152 & 0x18) == 0)
      {
        v121 = (int8x16_t *)((char *)v102 + v153);
        v120 = (char *)(v105 + 2 * v153);
        goto LABEL_152;
      }
    }
    else
    {
      v153 = 0;
    }
    v120 = (char *)(v105 + 2 * (v152 & 0xFFFFFFFFFFFFFFF8));
    v121 = (int8x16_t *)((char *)v102 + (v152 & 0xFFFFFFFFFFFFFFF8));
    v211 = (uint8x8_t *)&v102->i8[v153];
    v212 = (uint16x8_t *)(v105 + 2 * v153);
    v213 = v153 - (v152 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v214 = *v211++;
      *v212++ = vmovl_u8(v214);
      v213 += 8;
    }
    while (v213);
    if (v152 == (v152 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_155;
    do
    {
LABEL_152:
      v122 = v121->u8[0];
      v121 = (int8x16_t *)((char *)v121 + 1);
      *(_WORD *)v120 = v122;
      v120 += 2;
    }
    while (v120 != v104);
    goto LABEL_155;
  }
  if ((_DWORD)v103)
  {
    if ((_DWORD)v103 == 1)
    {
      *(_WORD *)v85 = v102->i16[0];
    }
    else
    {
      memcpy(v85, v102, 2 * v103);
      v33 = a3;
      v32 = (unint64_t)a9;
      v25 = v219;
      result = v27;
    }
  }
LABEL_155:
  v123 = *(unsigned int *)(a8 + 4);
  v124 = (unint64_t)&v85[2 * v123];
  v125 = (_WORD *)(v124 + 2 * v15);
  if ((v15 & 0xFFFFFFC0) != 0)
  {
    v126 = v124 + 2 * (v15 & 0xFFFFFFC0);
    v127 = 0uLL;
    do
    {
      v224.val[0] = *(int8x16_t *)v32;
      v128 = *(int8x16_t *)(v32 + 16);
      v229.val[0] = *(int8x16_t *)(v32 + 32);
      v129 = *(_OWORD *)(v32 + 48);
      v32 += 64;
      v130 = v129;
      v229.val[1] = 0uLL;
      v234.val[0] = v128;
      v224.val[1] = 0uLL;
      v131 = (char *)v124;
      vst2q_s8(v131, v224);
      v131 += 32;
      v234.val[1] = 0uLL;
      vst2q_s8(v131, v234);
      v132 = (char *)(v124 + 64);
      vst2q_s8(v132, v229);
      v133 = (char *)(v124 + 96);
      vst2q_s8(v133, *(int8x16x2_t *)(&v127 - 1));
      v124 += 128;
    }
    while (v124 != v126);
    v124 = v126;
  }
  if ((_WORD *)v124 != v125)
  {
    v134 = v25 + 2 * (v123 + v33 + v12 + v14 + (unint64_t)v15) - v124;
    v135 = -2;
    if (v33)
      v136 = -2;
    else
      v136 = 0;
    v137 = v134 + v136 + 18;
    if (v137 < 0xE)
      goto LABEL_173;
    if (!v33)
      v135 = 0;
    v138 = v134 + v135 + 18;
    if (v124 < v32 + (v138 >> 1) + 1 && v32 < (v138 & 0xFFFFFFFFFFFFFFFELL) + v124 + 2)
    {
LABEL_173:
      v142 = (_WORD *)v124;
      v143 = (unsigned __int8 *)v32;
      goto LABEL_174;
    }
    v140 = (v137 >> 1) + 1;
    if (v137 >= 0x3E)
    {
      v141 = v140 & 0xFFFFFFFFFFFFFFE0;
      v154 = (uint8x8_t *)(v32 + 16);
      v155 = (uint16x8_t *)(v124 + 32);
      v156 = v140 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v157 = *(uint8x16_t *)v154[-2].i8;
        v158 = vmovl_u8(*v154);
        v159 = vmovl_high_u8(*(uint8x16_t *)v154->i8);
        v155[-2] = vmovl_u8(*(uint8x8_t *)v157.i8);
        v155[-1] = vmovl_high_u8(v157);
        *v155 = v158;
        v155[1] = v159;
        v155 += 4;
        v154 += 4;
        v156 -= 32;
      }
      while (v156);
      if (v140 == v141)
        goto LABEL_27;
      if ((v140 & 0x18) == 0)
      {
        v143 = (unsigned __int8 *)(v32 + v141);
        v142 = (_WORD *)(v124 + 2 * v141);
        do
        {
LABEL_174:
          v144 = *v143++;
          *v142++ = v144;
        }
        while (v142 != v125);
        goto LABEL_27;
      }
    }
    else
    {
      v141 = 0;
    }
    v142 = (_WORD *)(v124 + 2 * (v140 & 0xFFFFFFFFFFFFFFF8));
    v143 = (unsigned __int8 *)(v32 + (v140 & 0xFFFFFFFFFFFFFFF8));
    v160 = (uint8x8_t *)(v32 + v141);
    v161 = (uint16x8_t *)(v124 + 2 * v141);
    v162 = v141 - (v140 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v163 = *v160++;
      *v161++ = vmovl_u8(v163);
      v162 += 8;
    }
    while (v162);
    if (v140 != (v140 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_174;
  }
LABEL_27:
  *result = v25;
  return result;
}

_BYTE *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral>(_BYTE *result, __int128 *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t a10, _BYTE *a11, uint64_t a12)
{
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v23;
  _BYTE *v26;
  _DWORD *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _DWORD *v39;
  __int128 v40;

  if (a4)
    v12 = a4 - 1;
  else
    v12 = 0;
  if (v12 >> 31)
    goto LABEL_65;
  if (a6)
    v13 = a6 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FDCA8);
  }
  if (a8)
    v14 = a8 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FDCC8);
  }
  if (a10)
    v15 = a10 - 1;
  else
    v15 = 0;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FDCE8);
  }
  if (a12)
    v16 = a12 - 1;
  else
    v16 = 0;
  if (v16 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FDD08);
  }
  v17 = v15 + v16;
  if (__OFADD__((_DWORD)v15, (_DWORD)v16))
    goto LABEL_65;
  v18 = __OFADD__((_DWORD)v14, v17);
  v19 = v14 + v17;
  if (v18)
    goto LABEL_65;
  v18 = __OFADD__((_DWORD)v13, v19);
  v20 = v13 + v19;
  if (v18)
    goto LABEL_65;
  v21 = (v12 + v20);
  if (__OFADD__((_DWORD)v12, v20))
    goto LABEL_65;
  v23 = result;
  if (!(_DWORD)v21)
  {
    v27 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v39 = v27;
    v40 = *a2;
    v30 = *((unsigned int *)result + 33);
    if ((_DWORD)v30 == *((_DWORD *)result + 32))
      goto LABEL_55;
LABEL_34:
    v31 = v23[15] + 24 * v30;
    *(_QWORD *)v31 = v27;
    *(_OWORD *)(v31 + 8) = v40;
    ++*((_DWORD *)v23 + 33);
    goto LABEL_59;
  }
  if ((v21 & 0x80000000) != 0
    || (result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20)), v26 = a3, (v27 = v39) == 0))
  {
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x1825FDC88);
  }
  v37 = a2;
  v28 = v39 + 5;
  *v39 = 2;
  v27[1] = v21;
  *((_QWORD *)v27 + 1) = v27 + 5;
  v27[4] = 4;
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 != 1)
    {
      result = memcpy(v27 + 5, v26, v12);
      v29 = &v28[v12];
      if (!(_DWORD)v13)
        goto LABEL_38;
      goto LABEL_36;
    }
    *v28 = *v26;
  }
  v29 = &v28[v12];
  if (!(_DWORD)v13)
  {
LABEL_38:
    v32 = &v29[v13];
    if (!(_DWORD)v14)
      goto LABEL_43;
    goto LABEL_41;
  }
LABEL_36:
  if ((_DWORD)v13 == 1)
  {
    *v29 = *a5;
    goto LABEL_38;
  }
  result = memcpy(v29, a5, v13);
  v32 = &v29[v13];
  if (!(_DWORD)v14)
    goto LABEL_43;
LABEL_41:
  if ((_DWORD)v14 != 1)
  {
    result = memcpy(v32, a7, v14);
    v33 = &v32[v14];
    if (!(_DWORD)v15)
      goto LABEL_48;
    goto LABEL_46;
  }
  *v32 = *a7;
LABEL_43:
  v33 = &v32[v14];
  if (!(_DWORD)v15)
  {
LABEL_48:
    if (!(_DWORD)v16)
      goto LABEL_54;
    goto LABEL_51;
  }
LABEL_46:
  if ((_DWORD)v15 == 1)
  {
    *v33 = *a9;
    goto LABEL_48;
  }
  result = memcpy(v33, a9, v15);
  if (!(_DWORD)v16)
    goto LABEL_54;
LABEL_51:
  result = &v33[v15];
  if ((_DWORD)v16 == 1)
    *result = *a11;
  else
    result = memcpy(result, a11, v16);
LABEL_54:
  v39 = v27;
  v40 = *v37;
  v30 = *((unsigned int *)v23 + 33);
  if ((_DWORD)v30 != *((_DWORD *)v23 + 32))
    goto LABEL_34;
LABEL_55:
  v34 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v23 + 15), v30 + 1, (unint64_t)&v39);
  v35 = v23[15] + 24 * *((unsigned int *)v23 + 33);
  v36 = *(_QWORD *)v34;
  *(_QWORD *)v34 = 0;
  *(_QWORD *)v35 = v36;
  *(_OWORD *)(v35 + 8) = *(_OWORD *)(v34 + 8);
  result = v39;
  ++*((_DWORD *)v23 + 33);
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (_BYTE *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)result -= 2;
  }
LABEL_59:
  v23[11] = *(_QWORD *)(v23[14] + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned int &,WTF::ASCIILiteral,unsigned long &>(uint64_t a1, __int128 *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, unsigned int a9, _BYTE *a10, uint64_t a11, unint64_t a12)
{
  _DWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  __int128 v22;

  result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)&v20, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  if (v20)
  {
    v21 = v20;
    v22 = *a2;
    v15 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 128))
    {
      v16 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v15 + 1, (unint64_t)&v21);
      v17 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      v18 = *(_QWORD *)v16;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)v17 = v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v16 + 8);
      result = v21;
      ++*(_DWORD *)(a1 + 132);
      v21 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 120) + 24 * v15;
      *(_QWORD *)v19 = v20;
      *(_OWORD *)(v19 + 8) = v22;
      ++*(_DWORD *)(a1 + 132);
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6, uint64_t a7, unsigned int a8, _BYTE *a9, uint64_t a10, unint64_t a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  if (a3)
    v11 = a3 - 1;
  else
    v11 = 0;
  if (v11 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE1ACLL);
  }
  if (a5)
    v12 = a5 - 1;
  else
    v12 = 0;
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE1CCLL);
  }
  if (a7)
    v13 = a7 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE1ECLL);
  }
  if (a10)
    v14 = a10 - 1;
  else
    v14 = 0;
  v15 = v14 >> 31;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE20CLL);
  }
  v16 = a8;
  v19 = (_QWORD *)result;
  v20 = a11;
  v21 = a8;
  do
  {
    LODWORD(v15) = v15 + 1;
    v22 = v21 > 9;
    v21 /= 0xAu;
  }
  while (v22);
  v23 = 0;
  v24 = a11;
  do
  {
    ++v23;
    v22 = v24 > 9;
    v24 /= 0xAuLL;
  }
  while (v22);
  v25 = 0;
  if (((v23 | v14) & 0x80000000) == 0)
  {
    v26 = __OFADD__((_DWORD)v14, v23);
    v27 = v14 + v23;
    v28 = v26;
    if ((v15 & 0x80000000) == 0 && !v28)
    {
      v26 = __OFADD__((_DWORD)v15, v27);
      v29 = v15 + v27;
      if (v26)
        goto LABEL_32;
      v26 = __OFADD__((_DWORD)v13, v29);
      v30 = v13 + v29;
      if (v26)
        goto LABEL_32;
      v26 = __OFADD__((_DWORD)v12, v30);
      v31 = v12 + v30;
      if (v26)
        goto LABEL_32;
      v26 = __OFADD__((_DWORD)v11, v31);
      v32 = (v11 + v31);
      if (v26)
        goto LABEL_32;
      if (!(_DWORD)v32)
      {
        v25 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
        goto LABEL_33;
      }
      if ((v32 & 0x80000000) != 0)
      {
LABEL_32:
        v25 = 0;
      }
      else
      {
        v43 = v32;
        result = WTF::tryFastCompactMalloc((WTF *)(v32 + 20));
        v25 = v45[0];
        if (v45[0])
        {
          v33 = (_BYTE *)(v45[0] + 20);
          v34 = a6;
          *(_DWORD *)v45[0] = 2;
          *(_DWORD *)(v25 + 4) = v43;
          *(_QWORD *)(v25 + 8) = v25 + 20;
          *(_DWORD *)(v25 + 16) = 4;
          if ((_DWORD)v11)
          {
            if ((_DWORD)v11 == 1)
            {
              *v33 = *a2;
            }
            else
            {
              result = (uint64_t)memcpy((void *)(v25 + 20), a2, v11);
              v33 = (_BYTE *)(v25 + 20);
              v34 = a6;
            }
          }
          v35 = &v33[v11];
          if ((_DWORD)v12)
          {
            if ((_DWORD)v12 == 1)
            {
              *v35 = *a4;
            }
            else
            {
              result = (uint64_t)memcpy(&v33[v11], a4, v12);
              v34 = a6;
            }
          }
          v36 = &v35[v12];
          if ((_DWORD)v13)
          {
            if ((_DWORD)v13 == 1)
              *v36 = *v34;
            else
              result = (uint64_t)memcpy(v36, v34, v13);
          }
          v37 = 0;
          v38 = v16;
          do
          {
            *((_BYTE *)&v45[1] + v37-- + 4) = (v38 % 0xA) | 0x30;
            v22 = v38 > 9;
            v38 /= 0xAu;
          }
          while (v22);
          v39 = &v36[v13];
          if (v37 + 14 <= 13)
            result = (uint64_t)memcpy(&v36[v13], (char *)&v45[1] + v37 + 5, -v37);
          v40 = 0;
          do
          {
            ++v40;
            v22 = v16 > 9;
            v16 /= 0xAu;
          }
          while (v22);
          v41 = &v39[v40];
          if ((_DWORD)v14)
          {
            if ((_DWORD)v14 == 1)
              *v41 = *a9;
            else
              result = (uint64_t)memcpy(&v39[v40], a9, v14);
          }
          v42 = 0;
          do
          {
            *((_BYTE *)&v45[3] + v42--) = (v20 % 0xA) | 0x30;
            v22 = v20 > 9;
            v20 /= 0xAuLL;
          }
          while (v22);
          if (v42 + 26 <= 25)
            result = (uint64_t)memcpy(&v41[v14], (char *)&v45[3] + v42 + 1, -v42);
        }
      }
    }
  }
LABEL_33:
  *v19 = v25;
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WTF::ASCIILiteral&,WTF::ASCIILiteral,unsigned long &,WTF::ASCIILiteral,unsigned long &>(_DWORD *result, _OWORD *a2, _BYTE *a3, uint64_t a4, _BYTE *a5, uint64_t a6, _BYTE *a7, uint64_t a8, unint64_t a9, _BYTE *a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  _OWORD *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  size_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  int v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v58;
  unsigned int v59;
  _DWORD *v60;
  __int128 v61;
  _QWORD v62[2];

  v62[1] = *MEMORY[0x1E0C80C00];
  if (a4)
    v12 = a4 - 1;
  else
    v12 = 0;
  if (v12 >> 31)
    goto LABEL_74;
  if (a6)
    v13 = a6 - 1;
  else
    v13 = 0;
  if (v13 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE69CLL);
  }
  if (a8)
    v14 = a8 - 1;
  else
    v14 = 0;
  if (v14 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE6BCLL);
  }
  if (a11)
    v15 = a11 - 1;
  else
    v15 = 0;
  v16 = v15 >> 31;
  if (v15 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE6DCLL);
  }
  v18 = result;
  v19 = a12;
  v20 = a9;
  v21 = (uint64_t)(result + 30);
  v22 = a9;
  do
  {
    LODWORD(v16) = v16 + 1;
    v23 = v22 > 9;
    v22 /= 0xAuLL;
  }
  while (v23);
  v24 = 0;
  v25 = a12;
  do
  {
    ++v24;
    v23 = v25 > 9;
    v25 /= 0xAuLL;
  }
  while (v23);
  if (((v24 | v15) & 0x80000000) != 0)
    goto LABEL_74;
  v26 = __OFADD__((_DWORD)v15, v24);
  v27 = v15 + v24;
  v28 = v26;
  if ((v16 & 0x80000000) != 0)
    goto LABEL_74;
  if (v28)
    goto LABEL_74;
  v26 = __OFADD__((_DWORD)v16, v27);
  v29 = v16 + v27;
  if (v26)
    goto LABEL_74;
  v26 = __OFADD__((_DWORD)v14, v29);
  v30 = v14 + v29;
  if (v26)
    goto LABEL_74;
  v26 = __OFADD__((_DWORD)v13, v30);
  v31 = v13 + v30;
  if (v26)
    goto LABEL_74;
  v32 = (v12 + v31);
  if (__OFADD__((_DWORD)v12, v31))
    goto LABEL_74;
  if (!(_DWORD)v32)
  {
    v37 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_63;
  }
  if ((v32 & 0x80000000) != 0
    || (v58 = v14,
        v59 = v15,
        result = (_DWORD *)WTF::tryFastCompactMalloc((WTF *)(v32 + 20)),
        v34 = a3,
        v36 = v58,
        v35 = v59,
        (v37 = v60) == 0))
  {
LABEL_74:
    __break(0xC471u);
    JUMPOUT(0x1825FE67CLL);
  }
  v38 = v21;
  v39 = a2;
  v40 = v60 + 5;
  *v60 = 2;
  v37[1] = v32;
  *((_QWORD *)v37 + 1) = v37 + 5;
  v37[4] = 4;
  if (!(_DWORD)v12)
  {
LABEL_37:
    v41 = &v40[v12];
    a2 = v39;
    v21 = v38;
    v42 = a10;
    if (!(_DWORD)v13)
      goto LABEL_43;
    goto LABEL_41;
  }
  if ((_DWORD)v12 == 1)
  {
    *v40 = *v34;
    goto LABEL_37;
  }
  result = memcpy(v37 + 5, v34, v12);
  v36 = v58;
  v35 = v59;
  v41 = &v40[v12];
  a2 = v39;
  v21 = v38;
  v42 = a10;
  if (!(_DWORD)v13)
    goto LABEL_43;
LABEL_41:
  if ((_DWORD)v13 != 1)
  {
    result = memcpy(v41, a5, v13);
    v36 = v58;
    v35 = v59;
    v43 = v59;
    v44 = &v41[v13];
    if (!v58)
      goto LABEL_49;
LABEL_46:
    if (v36 == 1)
    {
      *v44 = *a7;
    }
    else
    {
      result = memcpy(v44, a7, v36);
      v36 = v58;
      v35 = v59;
    }
    goto LABEL_49;
  }
  *v41 = *a5;
LABEL_43:
  v43 = v35;
  v44 = &v41[v13];
  if (v36)
    goto LABEL_46;
LABEL_49:
  v45 = 0;
  v46 = a9;
  do
  {
    *((_BYTE *)v62 + v45--) = (v46 % 0xA) | 0x30;
    v23 = v46 > 9;
    v46 /= 0xAuLL;
  }
  while (v23);
  v47 = &v44[v36];
  if (v45 + 26 <= 25)
  {
    result = memcpy(&v44[v36], (char *)v62 + v45 + 1, -v45);
    v35 = v59;
  }
  v48 = 0;
  do
  {
    ++v48;
    v23 = v20 > 9;
    v20 /= 0xAuLL;
  }
  while (v23);
  v49 = &v47[v48];
  if (v35)
  {
    if (v35 == 1)
      *v49 = *v42;
    else
      result = memcpy(v49, v42, v43);
  }
  v50 = 0;
  do
  {
    *((_BYTE *)v62 + v50--) = (v19 % 0xA) | 0x30;
    v23 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v23);
  if (v50 + 26 <= 25)
    result = memcpy(&v49[v43], (char *)v62 + v50 + 1, -v50);
LABEL_63:
  v60 = v37;
  v61 = *a2;
  v51 = v18[33];
  if ((_DWORD)v51 == v18[32])
  {
    v52 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v51 + 1, (unint64_t)&v60);
    v53 = *((_QWORD *)v18 + 15) + 24 * v18[33];
    v54 = *(_QWORD *)v52;
    *(_QWORD *)v52 = 0;
    *(_QWORD *)v53 = v54;
    *(_OWORD *)(v53 + 8) = *(_OWORD *)(v52 + 8);
    result = v60;
    ++v18[33];
    v60 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
  }
  else
  {
    v55 = *((_QWORD *)v18 + 15) + 24 * v51;
    *(_QWORD *)v55 = v37;
    *(_OWORD *)(v55 + 8) = v61;
    ++v18[33];
  }
  *((_QWORD *)v18 + 11) = *(_QWORD *)(*((_QWORD *)v18 + 14) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,long long &,WTF::ASCIILiteral>(uint64_t a1, __int128 *a2, _BYTE *a3, uint64_t a4, unint64_t a5, char *a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  int v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  int v17;
  _DWORD *result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;

  if (a4)
    v7 = a4 - 1;
  else
    v7 = 0;
  if (v7 >> 31)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  if (a7)
    v8 = a7 - 1;
  else
    v8 = 0;
  if (v8 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FE8A4);
  }
  if ((a5 & 0x8000000000000000) != 0)
  {
    v14 = -(uint64_t)a5;
    v11 = 1;
    do
    {
      ++v11;
      v15 = v14 >= 0xA;
      v14 /= 0xAuLL;
    }
    while (v15);
  }
  else
  {
    v11 = 0;
    v12 = a5;
    do
    {
      ++v11;
      v13 = v12 > 9;
      v12 /= 0xAuLL;
    }
    while (v13);
  }
  if (((v11 | v8) & 0x80000000) != 0
    || (v16 = __OFADD__(v11, (_DWORD)v8), v17 = v11 + v8, v16)
    || __OFADD__((_DWORD)v7, v17)
    || (result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v24, (int)v7 + v17, a3, v7, a5, a6, v8), !v24))
  {
    __break(0xC471u);
LABEL_29:
    JUMPOUT(0x1825FE884);
  }
  v25 = v24;
  v26 = *a2;
  v19 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v19 == *(_DWORD *)(a1 + 128))
  {
    v20 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v19 + 1, (unint64_t)&v25);
    v21 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
    v22 = *(_QWORD *)v20;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)v21 = v22;
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(v20 + 8);
    result = v25;
    ++*(_DWORD *)(a1 + 132);
    v25 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WTF::StringImpl::destroy();
      else
        *result -= 2;
    }
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 120) + 24 * v19;
    *(_QWORD *)v23 = v24;
    *(_OWORD *)(v23 + 8) = v26;
    ++*(_DWORD *)(a1 + 132);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<char,WGSL::Type const&,WTF::ASCIILiteral,WGSL::Type const&,char>(uint64_t a1, __int128 *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  _DWORD *v22;
  BOOL v23;
  int v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  int *v29;
  _BOOL4 v30;
  int8x16_t *v31;
  uint16x8_t *v32;
  int v33;
  _DWORD *result;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _DWORD *v41;
  int *v42;
  _DWORD **v43;
  _DWORD **v44;
  _DWORD **v45;
  _DWORD **v46;
  _DWORD **v47;
  _DWORD **v48;
  _DWORD **v49;
  _DWORD **v50;
  _DWORD **v51;
  _DWORD **v52;
  _DWORD **v53;
  _DWORD **v54;
  _DWORD **v55;
  _DWORD **v56;
  int *v57;
  _BYTE v58[48];
  unsigned int v59;
  _BYTE v60[48];
  int v61;
  _DWORD *v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v60[0] = 0;
  v61 = -1;
  v13 = *(unsigned int *)(a4 + 48);
  if ((_DWORD)v13 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v13])(&v62, v60, a4);
    v61 = v13;
  }
  v14 = *(__int8 **)a5;
  v15 = *(_QWORD *)(a5 + 8);
  v58[0] = 0;
  v59 = -1;
  v16 = *(unsigned int *)(a6 + 48);
  if ((_DWORD)v16 != -1)
  {
    ((void (*)(_DWORD **, _BYTE *, uint64_t))off_1E0FD7E68[v16])(&v62, v58, a6);
    v59 = v16;
  }
  v17 = *a7;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v62);
  v42 = (int *)&v62;
  v43 = &v62;
  v44 = &v62;
  v45 = &v62;
  v46 = &v62;
  v47 = &v62;
  v48 = &v62;
  v49 = &v62;
  v50 = &v62;
  v51 = &v62;
  v52 = &v62;
  v53 = &v62;
  v54 = &v62;
  v55 = &v62;
  v56 = &v62;
  if (v61 == -1)
    goto LABEL_127;
  v57 = (int *)&v42;
  ((void (*)(int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v61])(&v57, v60);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v62);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v62);
  if (v15)
    v18 = v15 - 1;
  else
    v18 = 0;
  if (v18 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1825FEF80);
  }
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)&v62);
  v42 = (int *)&v62;
  v43 = &v62;
  v44 = &v62;
  v45 = &v62;
  v46 = &v62;
  v47 = &v62;
  v48 = &v62;
  v49 = &v62;
  v50 = &v62;
  v51 = &v62;
  v52 = &v62;
  v53 = &v62;
  v54 = &v62;
  v55 = &v62;
  v56 = &v62;
  if (v59 == -1)
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
  v57 = (int *)&v42;
  ((void (*)(int **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v59])(&v57, v58);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)&v62);
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)&v62);
  v19 = v57;
  if (v41)
  {
    v20 = v41[1];
    if (v57)
      goto LABEL_13;
LABEL_18:
    v22 = 0;
    v24 = 1;
LABEL_19:
    v23 = __OFADD__((_DWORD)v18, v24);
    v25 = v18 + v24;
    v26 = v23;
    if ((v20 & 0x80000000) == 0 && (v26 & 1) == 0)
    {
      v23 = __OFADD__(v20, v25);
      v27 = v20 + v25;
      if (!v23)
      {
        v28 = (v27 + 1);
        if (!__OFADD__(v27, 1))
        {
          if (!v41 || (v41[4] & 4) != 0)
          {
            v30 = !v57 || (v57[4] & 4) != 0;
            if (!v41)
            {
LABEL_38:
              if (v19)
                *v19 += 2;
              if (v30)
              {
                if ((_DWORD)v28)
                {
                  if ((v28 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v28 + 20));
                    v22 = v62;
                    if (!v62)
                      goto LABEL_87;
                    *v62 = 2;
                    v22[1] = v28;
                    *((_QWORD *)v22 + 1) = v22 + 5;
                    v22[4] = 4;
                    if (v41)
                      *v41 += 2;
                    if (v19)
                      *v19 += 2;
                    *((_BYTE *)v22 + 20) = a3;
                    v31 = (int8x16_t *)((char *)v22 + 21);
                    if (v41)
                      *v41 += 2;
                    v62 = v41;
                    if (v19)
                    {
                      *v19 += 2;
                      v42 = v19;
                      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v31, (uint64_t *)&v62, v14, v18, (uint64_t *)&v42, v17);
                      if (*v19 == 2)
                      {
                        WTF::StringImpl::destroy();
                        if (!v41)
                          goto LABEL_73;
                      }
                      else
                      {
                        *v19 -= 2;
                        if (!v41)
                          goto LABEL_73;
                      }
                    }
                    else
                    {
                      v42 = 0;
                      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v31, (uint64_t *)&v62, v14, v18, (uint64_t *)&v42, v17);
                      if (!v41)
                        goto LABEL_73;
                    }
                    if (*v41 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v41 -= 2;
LABEL_73:
                    if (!v19)
                      goto LABEL_83;
                    v33 = *v19 - 2;
                    if (*v19 == 2)
                    {
                      WTF::StringImpl::destroy();
                      goto LABEL_83;
                    }
                    goto LABEL_82;
                  }
LABEL_56:
                  v22 = 0;
                  goto LABEL_87;
                }
LABEL_57:
                v22 = (_DWORD *)MEMORY[0x1E0CBEF70];
                *MEMORY[0x1E0CBEF70] += 2;
                goto LABEL_87;
              }
              if (!(_DWORD)v28)
                goto LABEL_57;
              if (v28 > 0x7FFFFFEF)
                goto LABEL_56;
              WTF::tryFastCompactMalloc((WTF *)(2 * v28 + 20));
              v22 = v62;
              if (!v62)
                goto LABEL_87;
              *v62 = 2;
              v22[1] = v28;
              *((_QWORD *)v22 + 1) = v22 + 5;
              v22[4] = 0;
              if (v41)
                *v41 += 2;
              if (v19)
                *v19 += 2;
              *((_WORD *)v22 + 10) = a3;
              v32 = (uint16x8_t *)((char *)v22 + 22);
              if (v41)
                *v41 += 2;
              v62 = v41;
              if (v19)
              {
                *v19 += 2;
                v42 = v19;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v32, (uint64_t *)&v62, (unint64_t)v14, v18, (uint64_t *)&v42, v17);
                if (*v19 == 2)
                {
                  WTF::StringImpl::destroy();
                  if (!v41)
                  {
LABEL_80:
                    if (!v19)
                      goto LABEL_83;
                    v33 = *v19 - 2;
                    if (*v19 == 2)
                    {
                      WTF::StringImpl::destroy();
                      if (!v41)
                        goto LABEL_87;
                      goto LABEL_84;
                    }
LABEL_82:
                    *v19 = v33;
LABEL_83:
                    if (!v41)
                      goto LABEL_87;
LABEL_84:
                    if (*v41 == 2)
                      WTF::StringImpl::destroy();
                    else
                      *v41 -= 2;
LABEL_87:
                    if (v19)
                    {
                      if (*v19 == 2)
                        WTF::StringImpl::destroy();
                      else
                        *v19 -= 2;
                    }
                    if (v41)
                    {
                      if (*v41 != 2)
                      {
                        *v41 -= 2;
                        v29 = v57;
                        v57 = 0;
                        if (!v29)
                          goto LABEL_99;
                        goto LABEL_97;
                      }
                      WTF::StringImpl::destroy();
                    }
                    goto LABEL_96;
                  }
                }
                else
                {
                  *v19 -= 2;
                  if (!v41)
                    goto LABEL_80;
                }
              }
              else
              {
                v42 = 0;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WGSL::Type,void>,WTF::StringTypeAdapter<char,void>>(v32, (uint64_t *)&v62, (unint64_t)v14, v18, (uint64_t *)&v42, v17);
                if (!v41)
                  goto LABEL_80;
              }
              if (*v41 == 2)
                WTF::StringImpl::destroy();
              else
                *v41 -= 2;
              goto LABEL_80;
            }
          }
          else
          {
            v30 = 0;
          }
          *v41 += 2;
          goto LABEL_38;
        }
      }
LABEL_27:
      v22 = 0;
      v29 = v57;
      v57 = 0;
      if (!v29)
        goto LABEL_99;
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  v20 = 0;
  if (!v57)
    goto LABEL_18;
LABEL_13:
  v21 = v57[1];
  if (v21 < 0)
    goto LABEL_27;
  v22 = 0;
  v23 = __OFADD__(v21, 1);
  v24 = v21 + 1;
  if (!v23)
    goto LABEL_19;
LABEL_96:
  v29 = v57;
  v57 = 0;
  if (!v29)
    goto LABEL_99;
LABEL_97:
  if (*v29 == 2)
  {
    WTF::StringImpl::destroy();
    result = v41;
    if (!v41)
      goto LABEL_104;
    goto LABEL_102;
  }
  *v29 -= 2;
LABEL_99:
  result = v41;
  if (!v41)
  {
LABEL_104:
    if (v22)
      goto LABEL_105;
LABEL_117:
    __break(0xC471u);
    JUMPOUT(0x1825FEF34);
  }
LABEL_102:
  if (*result != 2)
  {
    *result -= 2;
    goto LABEL_104;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  if (!v22)
    goto LABEL_117;
LABEL_105:
  v62 = v22;
  v63 = *a2;
  v35 = *(unsigned int *)(a1 + 132);
  if ((_DWORD)v35 != *(_DWORD *)(a1 + 128))
  {
    v40 = *(_QWORD *)(a1 + 120) + 24 * v35;
    *(_QWORD *)v40 = v22;
    *(_OWORD *)(v40 + 8) = v63;
    ++*(_DWORD *)(a1 + 132);
    v62 = 0;
LABEL_111:
    v39 = v59;
    if (v59 == -1)
      goto LABEL_113;
    goto LABEL_112;
  }
  v36 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v35 + 1, (unint64_t)&v62);
  v37 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
  v38 = *(_QWORD *)v36;
  *(_QWORD *)v36 = 0;
  *(_QWORD *)v37 = v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v36 + 8);
  result = v62;
  ++*(_DWORD *)(a1 + 132);
  v62 = 0;
  if (!result)
    goto LABEL_111;
  if (*result != 2)
  {
    *result -= 2;
    v39 = v59;
    if (v59 == -1)
      goto LABEL_113;
LABEL_112:
    result = (_DWORD *)((uint64_t (*)(int **, _BYTE *))off_1E0FD7DF0[v39])(&v42, v58);
    goto LABEL_113;
  }
  result = (_DWORD *)WTF::StringImpl::destroy();
  v39 = v59;
  if (v59 != -1)
    goto LABEL_112;
LABEL_113:
  v59 = -1;
  if (v61 != -1)
    result = (_DWORD *)((uint64_t (*)(int **, _BYTE *))off_1E0FD7DF0[v61])(&v42, v60);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  return result;
}

_DWORD *WGSL::TypeChecker::typeError<WTF::ASCIILiteral,unsigned long>(uint64_t a1, __int128 *a2, _BYTE *a3, uint64_t a4, unint64_t a5)
{
  _DWORD *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  __int128 v15;

  result = (_DWORD *)WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v13, a3, a4, a5);
  if (v13)
  {
    v14 = v13;
    v15 = *a2;
    v8 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 128))
    {
      v9 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 120, v8 + 1, (unint64_t)&v14);
      v10 = *(_QWORD *)(a1 + 120) + 24 * *(unsigned int *)(a1 + 132);
      v11 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)v10 = v11;
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v9 + 8);
      result = v14;
      ++*(_DWORD *)(a1 + 132);
      v14 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WTF::StringImpl::destroy();
        else
          *result -= 2;
      }
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 120) + 24 * v8;
      *(_QWORD *)v12 = v13;
      *(_OWORD *)(v12 + 8) = v15;
      ++*(_DWORD *)(a1 + 132);
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 24);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::add<WGSL::Binding const&>(uint64_t a1, uint64_t *a2, const WTF::StringImpl **a3, __int128 *a4)
{
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF *v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char v34;
  char v35;
  char v36;

  v8 = *a2;
  if (!*a2)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0);
    v8 = *a2;
    if (!*a2)
    {
      v9 = 0;
      v10 = *a3;
      v11 = *((_DWORD *)*a3 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a3;
  v11 = *((_DWORD *)*a3 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + (v15 << 6));
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + (v15 << 6));
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *((_OWORD *)v13 + 2) = 0u;
        *((_OWORD *)v13 + 3) = 0u;
        *(_OWORD *)v13 = 0u;
        *((_OWORD *)v13 + 1) = 0u;
        --*(_DWORD *)(*a2 - 16);
        v16 = v13;
      }
      v20 = *a3;
      if (*a3)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      v21 = *a4;
      *((_BYTE *)v16 + 24) = *((_BYTE *)a4 + 16);
      *(_OWORD *)((char *)v16 + 8) = v21;
      v22 = (char *)v16 + 32;
      v23 = (uint64_t)a4 + 24;
      if (*((unsigned __int8 *)v16 + 56) == *((unsigned __int8 *)a4 + 48))
      {
        if (!*((_BYTE *)v16 + 56))
          goto LABEL_35;
        v24 = *((unsigned int *)v16 + 12);
        v25 = *((unsigned int *)a4 + 10);
        if ((_DWORD)v24 == -1)
        {
          if ((_DWORD)v25 == -1)
            goto LABEL_35;
        }
        else if ((_DWORD)v25 == -1)
        {
          result = (WTF *)((uint64_t (*)(char *, char *, uint64_t))off_1E0FD7CC8[v24])(&v34, v22, v23);
          *((_DWORD *)v16 + 12) = -1;
          goto LABEL_35;
        }
        v33 = (char *)v16 + 32;
        result = (WTF *)((uint64_t (*)(char **))off_1E0FD80E0[v25])(&v33);
      }
      else if (*((_BYTE *)v16 + 56))
      {
        v26 = *((unsigned int *)v16 + 12);
        if ((_DWORD)v26 != -1)
          result = (WTF *)((uint64_t (*)(char *, char *, uint64_t))off_1E0FD7CC8[v26])(&v35, v22, v23);
        *((_DWORD *)v16 + 12) = -1;
        *((_BYTE *)v16 + 56) = 0;
      }
      else
      {
        *((_BYTE *)v16 + 32) = 0;
        *((_DWORD *)v16 + 12) = -1;
        v29 = *((unsigned int *)a4 + 10);
        if ((_DWORD)v29 != -1)
        {
          result = (WTF *)((uint64_t (*)(char *, char *, uint64_t))off_1E0FD8010[v29])(&v36, v22, v23);
          *((_DWORD *)v16 + 12) = v29;
        }
        *((_BYTE *)v16 + 56) = 1;
      }
LABEL_35:
      if (*a2)
      {
        ++*(_DWORD *)(*a2 - 12);
        v30 = *a2;
        if (*a2)
          goto LABEL_37;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v30 = *a2;
        if (*a2)
        {
LABEL_37:
          v31 = (*(_DWORD *)(v30 - 16) + *(_DWORD *)(v30 - 12));
          v32 = *(unsigned int *)(v30 - 4);
          if (v32 <= 0x400)
            goto LABEL_38;
          goto LABEL_44;
        }
      }
      v31 = *(unsigned int *)(v30 - 16);
      v32 = *(unsigned int *)(v30 - 4);
      if (v32 <= 0x400)
      {
LABEL_38:
        if (3 * v32 > 4 * v31)
        {
LABEL_47:
          v28 = v30 + (v32 << 6);
          v27 = 1;
          goto LABEL_48;
        }
        if (!(_DWORD)v32)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v30 = *a2;
          if (!*a2)
          {
LABEL_41:
            v32 = 0;
            goto LABEL_47;
          }
LABEL_46:
          v32 = *(unsigned int *)(v30 - 4);
          goto LABEL_47;
        }
LABEL_45:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, (_DWORD)v32 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v32)), (WTF::StringImpl **)v16);
        v16 = result;
        v30 = *a2;
        if (!*a2)
          goto LABEL_41;
        goto LABEL_46;
      }
LABEL_44:
      if (v32 > 2 * v31)
        goto LABEL_47;
      goto LABEL_45;
    }
    result = (WTF *)WTF::equal(result, *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a2;
  if (*a2)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v27 = 0;
  v28 = v18 + (v19 << 6);
LABEL_48:
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v28;
  *(_BYTE *)(a1 + 16) = v27;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Binding>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Binding>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Binding,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Binding>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(((unint64_t)a2 << 6) | 0x10));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), (unint64_t)a2 << 6);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    v44 = v5;
    while (1)
    {
      v14 = (WTF::StringImpl **)(v4 + (v11 << 6));
      v15 = *v14;
      if (*v14 != (WTF::StringImpl *)-1)
      {
        if (v15)
        {
          v19 = *a1;
          if (*a1)
          {
            v20 = *(_DWORD *)(v19 - 8);
            v21 = *((_DWORD *)v15 + 4);
            if (v21 >= 0x100)
              goto LABEL_23;
LABEL_26:
            v22 = WTF::StringImpl::hashSlowCase(v15);
          }
          else
          {
            v20 = 0;
            v21 = *((_DWORD *)v15 + 4);
            if (v21 < 0x100)
              goto LABEL_26;
LABEL_23:
            v22 = v21 >> 8;
          }
          v23 = 0;
          do
          {
            v24 = v22 & v20;
            v22 = ++v23 + v24;
          }
          while (*(_QWORD *)(v19 + (v24 << 6)));
          v25 = v19 + (v24 << 6);
          v26 = (_BYTE *)(v25 + 56);
          v47 = v12;
          if (*(_BYTE *)(v25 + 56))
          {
            v28 = (_DWORD *)(v25 + 48);
            v27 = *(unsigned int *)(v25 + 48);
            if ((_DWORD)v27 == -1)
            {
              *v28 = -1;
              *(_QWORD *)v25 = 0;
            }
            else
            {
              ((void (*)(char *, uint64_t))off_1E0FD7CC8[v27])(&v50, v25 + 32);
              v29 = *(_DWORD **)v25;
              *v28 = -1;
              *(_QWORD *)v25 = 0;
              if (v29)
              {
                if (*v29 == 2)
                  WTF::StringImpl::destroy();
                else
                  *v29 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)v25 = 0;
          }
          v30 = *v14;
          *v14 = 0;
          *(_QWORD *)v25 = v30;
          v31 = v19 + (v24 << 6);
          v32 = v4 + (v11 << 6);
          v33 = *(_OWORD *)(v32 + 8);
          *(_BYTE *)(v31 + 24) = *(_BYTE *)(v32 + 24);
          *(_OWORD *)(v31 + 8) = v33;
          *(_BYTE *)(v25 + 32) = 0;
          *v26 = 0;
          v34 = (_BYTE *)(v32 + 56);
          if (*(_BYTE *)(v32 + 56))
          {
            v35 = v4;
            v36 = (_BYTE *)(v32 + 32);
            *(_DWORD *)(v31 + 48) = -1;
            v37 = (_DWORD *)(v31 + 48);
            v40 = *(_DWORD *)(v32 + 48);
            v39 = (_DWORD *)(v32 + 48);
            v38 = v40;
            if (v40 != -1)
            {
              ((void (*)(char *, uint64_t, _BYTE *))off_1E0FD7D20[v38])(&v51, v25 + 32, v34 - 24);
              v36 = v34 - 24;
              *v37 = v38;
            }
            *v26 = 1;
            v4 = v35;
            if (*v34)
            {
              v41 = *v39;
              if ((_DWORD)v41 != -1)
                ((void (*)(char *, _BYTE *))off_1E0FD7CC8[v41])(&v49, v36);
              *v39 = -1;
            }
          }
          v42 = *v14;
          *v14 = 0;
          v12 = v47;
          v13 = v44;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy();
            else
              *(_DWORD *)v42 -= 2;
          }
          if (v14 == a3)
            v12 = v25;
          goto LABEL_11;
        }
        v16 = v4 + (v11 << 6);
        if (*(_BYTE *)(v16 + 56))
        {
          v18 = (_DWORD *)(v16 + 48);
          v17 = *(unsigned int *)(v16 + 48);
          if ((_DWORD)v17 != -1)
          {
            ((void (*)(char *, uint64_t))off_1E0FD7CC8[v17])(&v48, v16 + 32);
            v15 = *v14;
          }
          *v18 = -1;
        }
        *v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy();
          else
            *(_DWORD *)v15 -= 2;
        }
      }
LABEL_11:
      if (++v11 == v13)
        goto LABEL_48;
    }
  }
  v12 = 0;
  result = 0;
  if (v4)
  {
LABEL_48:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(unsigned __int16 ***a1, _BYTE *a2, __n128 a3)
{
  uint64_t result;
  unsigned __int16 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  uint64_t v11;
  uint64_t v14;
  _BOOL4 v15;
  double v16;
  unsigned int v22;
  uint64_t v25;
  double v27;
  float v28;
  unint64_t v29;
  _DWORD v30[4];
  int v31;
  char v32;

  result = 0;
  v5 = **a1;
  switch(*a2)
  {
    case 0:
      if (*((_DWORD *)v5 + 4) != 5)
      {
        __break(0xC471u);
        JUMPOUT(0x1825FFBA0);
      }
      return 1;
    case 1:
      v6 = *((_DWORD *)v5 + 4);
      if (v6 == 3)
        return 1;
      if (v6 != 5 || *(_QWORD *)v5 != (int)*(_QWORD *)v5)
        return 0;
      *(_DWORD *)v5 = *(_QWORD *)v5;
      v7 = 3;
      goto LABEL_17;
    case 2:
      v8 = *((_DWORD *)v5 + 4);
      if (v8 == 4)
        return 1;
      if (v8 != 5 || HIDWORD(*(_QWORD *)v5))
        return 0;
      *(_DWORD *)v5 = *(_QWORD *)v5;
      v7 = 4;
      goto LABEL_17;
    case 3:
      if (!v5)
        goto LABEL_73;
      v9 = *((_DWORD *)v5 + 4);
      if (v9 != 2)
      {
        if (v9 != 5)
        {
LABEL_73:
          __break(0xC471u);
          JUMPOUT(0x1825FFBE0);
        }
        v10 = (double)*(uint64_t *)v5;
        WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
        WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
        *(double *)v5 = v10;
        v7 = 2;
LABEL_17:
        *((_DWORD *)v5 + 4) = v7;
        return 1;
      }
      v16 = *(double *)v5;
      WGSL::convertFloat<double,double>(double)::max = 0x7FEFFFFFFFFFFFFFLL;
      WGSL::convertFloat<double,double>(double)::lowest = 0xFFEFFFFFFFFFFFFFLL;
      if (v16 <= 1.79769313e308 && v16 >= -1.79769313e308)
      {
        *(double *)v5 = v16;
        return 1;
      }
      return 0;
    case 4:
      if (!v5)
        return 0;
      v11 = *((unsigned int *)v5 + 4);
      switch((_DWORD)v11)
      {
        case 1:
          result = 0;
          _H0 = *v5;
          __asm { FCVT            S1, H0 }
          v22 = *v5 | 0x10000;
          if (_S1 < -65504.0 || _S1 > 65504.0)
            v22 = 0;
          if (v22 >= 0x10000)
          {
            *v5 = v22;
            return 1;
          }
          return result;
        case 5:
          v25 = *(_QWORD *)v5;
          WGSL::convertFloat<half,double>(double)::max = 31743;
          WGSL::convertFloat<half,double>(double)::lowest = -1025;
          if ((unint64_t)(v25 - 65505) < 0xFFFFFFFFFFFE003FLL)
            return 0;
          _D0 = (double)v25;
          goto LABEL_54;
        case 2:
          _D0 = *(double *)v5;
          WGSL::convertFloat<half,double>(double)::max = 31743;
          WGSL::convertFloat<half,double>(double)::lowest = -1025;
          if (_D0 <= 65504.0 && _D0 >= -65504.0)
          {
LABEL_54:
            __asm { FCVT            H8, D0 }
            ((void (*)(_DWORD *, unsigned __int16 *))off_1E0FD7CC8[v11])(v30, v5);
            *v5 = _H8;
            result = 1;
            *((_DWORD *)v5 + 4) = 1;
            return result;
          }
          break;
      }
      return 0;
    case 5:
      if (!v5)
        return 0;
      v14 = *((unsigned int *)v5 + 4);
      if ((_DWORD)v14 == 5)
      {
        v27 = (double)*(uint64_t *)v5;
        WGSL::convertFloat<float,double>(double)::max = 2139095039;
        WGSL::convertFloat<float,double>(double)::lowest = -8388609;
        v28 = v27;
        *(float *)v30 = v28;
        v31 = 0;
        goto LABEL_66;
      }
      if ((_DWORD)v14 == 2)
      {
        a3.n128_u64[0] = *(_QWORD *)v5;
        WGSL::convertFloat<float,double>(double)::max = 2139095039;
        WGSL::convertFloat<float,double>(double)::lowest = -8388609;
        v15 = a3.n128_f64[0] > 3.40282347e38;
        if (a3.n128_f64[0] < -3.40282347e38)
          v15 = 1;
        a3.n128_f32[0] = a3.n128_f64[0];
      }
      else
      {
        if ((_DWORD)v14)
          return 0;
        a3.n128_u32[0] = *(_DWORD *)v5;
        v15 = *(float *)v5 > 3.4028e38;
        if (*(float *)v5 < -3.4028e38)
          v15 = 1;
      }
      if (v15)
        v29 = 0;
      else
        v29 = a3.n128_u32[0] | 0x100000000;
      if (HIDWORD(v29))
      {
        v30[0] = v29;
        v31 = 0;
        if (!(_DWORD)v14)
        {
          *(_DWORD *)v5 = v29;
LABEL_69:
          ((void (*)(char *, _DWORD *, __n128))off_1E0FD7CC8[v14])(&v32, v30, a3);
          return 1;
        }
        v28 = *(float *)&v29;
LABEL_66:
        ((void (*)(char *, unsigned __int16 *))off_1E0FD7CC8[v14])(&v32, v5);
        *(float *)v5 = v28;
        *((_DWORD *)v5 + 4) = 0;
        LODWORD(v14) = v31;
        if (v31 == -1)
          return 1;
        goto LABEL_69;
      }
      return 0;
    case 7:
      if (*((_DWORD *)v5 + 4) != 6)
      {
        __break(0xC471u);
        JUMPOUT(0x1825FFBC0);
      }
      return 1;
    default:
      return result;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  _BOOL8 v15;
  _QWORD v16[16];
  _QWORD *v17;

  v2 = *a1;
  v3 = *(unsigned int ***)(*a1 + 8);
  if (*((_DWORD *)v3 + 4) == 8)
  {
    v5 = *v3;
    v6 = (uint64_t)(*v3 + 2);
    if (v5)
      v7 = v6;
    else
      v7 = 0;
    if (v5)
    {
      v8 = v6 + 24 * *v5;
      if (v7 != v8)
        goto LABEL_7;
    }
    else
    {
      v8 = 0;
      if (v7)
      {
LABEL_7:
        v9 = *(_QWORD *)(v2 + 16);
        while (1)
        {
          v10 = *(_QWORD *)(v2 + 24);
          v11 = *a2;
          v16[2] = v9;
          v16[3] = v10;
          v16[4] = v7;
          v16[5] = v9;
          v16[6] = v10;
          v16[7] = v7;
          v16[8] = v9;
          v16[9] = v10;
          v16[10] = v7;
          v16[11] = v9;
          v16[12] = v10;
          v16[13] = v7;
          v16[14] = v9;
          v16[15] = v10;
          v16[0] = v7;
          v16[1] = v7;
          v12 = *(unsigned int *)(v11 + 48);
          if ((_DWORD)v12 == -1)
            break;
          v17 = v16;
          result = ((uint64_t (*)(_QWORD **))off_1E0FD8348[v12])(&v17);
          v7 += 24;
          if ((_DWORD)result)
            v14 = v7 == v8;
          else
            v14 = 1;
          if (v14)
            return result;
        }
        goto LABEL_17;
      }
    }
    return 1;
  }
LABEL_17:
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v15);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;
  _BOOL8 v14;
  _QWORD v15[16];
  _QWORD *v16;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 32);
  if (*(_DWORD *)(v3 + 16) == 9)
  {
    v5 = *(unsigned int **)(v3 + 8);
    if (v5)
      v6 = v5 + 2;
    else
      v6 = 0;
    if (v5)
    {
      v7 = (uint64_t)&v5[6 * *v5 + 2];
      if (v6 != (unsigned int *)v7)
        goto LABEL_7;
    }
    else
    {
      v7 = 0;
      if (v6)
      {
LABEL_7:
        v8 = *(_QWORD *)(v2 + 40);
        while (1)
        {
          v9 = *(_QWORD *)(v2 + 48);
          v10 = *a2;
          v15[2] = v8;
          v15[3] = v9;
          v15[4] = v6;
          v15[5] = v8;
          v15[6] = v9;
          v15[7] = v6;
          v15[8] = v8;
          v15[9] = v9;
          v15[10] = v6;
          v15[11] = v8;
          v15[12] = v9;
          v15[13] = v6;
          v15[14] = v8;
          v15[15] = v9;
          v15[0] = v6;
          v15[1] = v6;
          v11 = *(unsigned int *)(v10 + 48);
          if ((_DWORD)v11 == -1)
            break;
          v16 = v15;
          result = ((uint64_t (*)(_QWORD **))off_1E0FD8348[v11])(&v16);
          v6 += 6;
          if ((_DWORD)result)
            v13 = v6 == (unsigned int *)v7;
          else
            v13 = 1;
          if (v13)
            return result;
        }
        goto LABEL_17;
      }
    }
    return 1;
  }
LABEL_17:
  v14 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int **v3;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  _BOOL8 v15;
  _QWORD v16[16];
  _QWORD *v17;

  v2 = *a1;
  v3 = *(unsigned int ***)(*a1 + 56);
  if (*((_DWORD *)v3 + 4) == 7)
  {
    v5 = *v3;
    v6 = (uint64_t)(*v3 + 2);
    if (v5)
      v7 = v6;
    else
      v7 = 0;
    if (v5)
    {
      v8 = v6 + 24 * *v5;
      if (v7 != v8)
        goto LABEL_7;
    }
    else
    {
      v8 = 0;
      if (v7)
      {
LABEL_7:
        v9 = *(_QWORD *)(v2 + 64);
        while (1)
        {
          v10 = *(_QWORD *)(v2 + 72);
          v11 = *a2;
          v16[2] = v9;
          v16[3] = v10;
          v16[4] = v7;
          v16[5] = v9;
          v16[6] = v10;
          v16[7] = v7;
          v16[8] = v9;
          v16[9] = v10;
          v16[10] = v7;
          v16[11] = v9;
          v16[12] = v10;
          v16[13] = v7;
          v16[14] = v9;
          v16[15] = v10;
          v16[0] = v7;
          v16[1] = v7;
          v12 = *(unsigned int *)(v11 + 48);
          if ((_DWORD)v12 == -1)
            break;
          v17 = v16;
          result = ((uint64_t (*)(_QWORD **))off_1E0FD8348[v12])(&v17);
          v7 += 24;
          if ((_DWORD)result)
            v14 = v7 == v8;
          else
            v14 = 1;
          if (v14)
            return result;
        }
        goto LABEL_17;
      }
    }
    return 1;
  }
LABEL_17:
  v15 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v15);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  _BOOL8 v27;
  _QWORD v28[16];
  _QWORD *v29;

  v3 = *a1;
  v4 = *(uint64_t **)(*a1 + 80);
  if (*((_DWORD *)v4 + 4) != 10)
  {
LABEL_40:
    v27 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v27);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 16 * v6;
    if (!*(_DWORD *)(v5 - 12))
    {
      v8 = v5 + 16 * v6;
      v7 = v8;
      goto LABEL_11;
    }
    v8 = *(_QWORD *)(a2 + 8);
    if ((_DWORD)v6)
    {
      v9 = 16 * v6;
      v8 = *(_QWORD *)(a2 + 8);
      do
      {
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
          goto LABEL_10;
        v8 += 16;
        v9 -= 16;
      }
      while (v9);
      v8 = v7;
LABEL_11:
      v10 = v5 + 16 * *(unsigned int *)(v5 - 4);
      if (v10 != v8)
      {
LABEL_12:
        v11 = *(_QWORD *)(v3 + 88);
        while (1)
        {
          v12 = *v4;
          if (!*v4)
          {
LABEL_39:
            __break(0xC471u);
            JUMPOUT(0x182600108);
          }
          v13 = *(_DWORD *)(v12 - 8);
          v14 = *(_DWORD *)(*(_QWORD *)v8 + 16);
          if (v14 < 0x100)
            v15 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v8);
          else
            v15 = v14 >> 8;
          for (i = 0; ; v15 = i + v17)
          {
            v17 = v15 & v13;
            v18 = *(WTF **)(v12 + 32 * v17);
            if (v18 == (WTF *)-1)
              goto LABEL_19;
            if (!v18)
              break;
            if ((WTF::equal(v18, *(const WTF::StringImpl **)v8, a3) & 1) != 0)
            {
              v19 = v12 + 32 * v17;
              v20 = *v4;
              if (*v4)
              {
                v21 = *(unsigned int *)(v20 - 4);
                goto LABEL_27;
              }
              goto LABEL_28;
            }
LABEL_19:
            ++i;
          }
          v20 = *v4;
          if (!*v4)
            goto LABEL_39;
          v21 = *(unsigned int *)(v20 - 4);
          v19 = v20 + 32 * v21;
LABEL_27:
          if (v19 == v20 + 32 * v21)
            goto LABEL_39;
LABEL_28:
          v22 = *(_QWORD *)(v3 + 96);
          v23 = *(_QWORD *)(v8 + 8);
          v28[2] = v11;
          v28[3] = v22;
          v28[4] = v19 + 8;
          v28[5] = v11;
          v28[6] = v22;
          v28[7] = v19 + 8;
          v28[8] = v11;
          v28[9] = v22;
          v28[10] = v19 + 8;
          v28[11] = v11;
          v28[12] = v22;
          v28[13] = v19 + 8;
          v28[14] = v11;
          v28[15] = v22;
          v28[0] = v19 + 8;
          v28[1] = v19 + 8;
          v24 = *(unsigned int *)(v23 + 48);
          if ((_DWORD)v24 == -1)
            goto LABEL_40;
          v29 = v28;
          result = ((uint64_t (*)(_QWORD **))off_1E0FD8348[v24])(&v29);
          if ((_DWORD)result)
          {
            v26 = v8 + 16;
            v8 = v7;
            if (v26 != v7)
            {
              v8 = v26;
              while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
              {
                v8 += 16;
                if (v8 == v7)
                {
                  v8 = v7;
                  break;
                }
              }
            }
            if (v8 != v10)
              continue;
          }
          return result;
        }
      }
      return 1;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
LABEL_10:
  if (v5)
    goto LABEL_11;
  v10 = 0;
  if (v8)
    goto LABEL_12;
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  _QWORD v27[16];
  _QWORD *v28;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 104);
  if (*(_DWORD *)(v3 + 16) != 10)
  {
LABEL_33:
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v5 = *(_QWORD **)v3;
  if (v5)
  {
    v6 = *((unsigned int *)v5 - 1);
    v7 = &v5[4 * v6];
    if (!*((_DWORD *)v5 - 3))
    {
      v8 = &v5[4 * v6];
      v7 = v8;
      goto LABEL_11;
    }
    v8 = v5;
    if ((_DWORD)v6)
    {
      v9 = 32 * v6;
      v8 = v5;
      do
      {
        if ((unint64_t)(*v8 + 1) > 1)
          goto LABEL_10;
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
      v8 = v7;
      goto LABEL_11;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
LABEL_10:
  if (!v5)
  {
    v10 = 0;
    if (v8)
      goto LABEL_12;
    return 1;
  }
LABEL_11:
  v10 = &v5[4 * *((unsigned int *)v5 - 1)];
  if (v10 != v8)
  {
LABEL_12:
    v11 = *(_QWORD *)(v2 + 112);
    v12 = WGSL::Types::PrimitiveStruct::keys[*(unsigned __int8 *)(a2 + 8)];
    while (1)
    {
      v13 = *v8;
      if (*v8)
      {
        v14 = *(unsigned __int8 **)(v13 + 8);
        v15 = *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32);
        v16 = WTF::operator==(v14, v15, *(unsigned __int8 **)v12, *((_QWORD *)v12 + 1));
        v17 = v12;
        if (!v16)
          goto LABEL_18;
      }
      else
      {
        v14 = 0;
        v15 = 0x100000000;
        v18 = WTF::operator==(0, 0x100000000, *(unsigned __int8 **)v12, *((_QWORD *)v12 + 1));
        v17 = v12;
        if (!v18)
        {
LABEL_18:
          v19 = WTF::operator==(v14, v15, *((unsigned __int8 **)v12 + 3), *((_QWORD *)v12 + 4));
          v17 = v12 + 24;
          if (!v19)
          {
            __break(0xC471u);
            JUMPOUT(0x18260034CLL);
          }
        }
      }
      v20 = *((unsigned int *)v17 + 4);
      v21 = *(_DWORD **)(a2 + 16);
      if (*v21 <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x18260036CLL);
      }
      v22 = *(_QWORD *)&v21[2 * v20 + 2];
      v23 = *(_QWORD *)(v2 + 120);
      v27[2] = v11;
      v27[3] = v23;
      v27[4] = v8 + 1;
      v27[5] = v11;
      v27[6] = v23;
      v27[7] = v8 + 1;
      v27[8] = v11;
      v27[9] = v23;
      v27[10] = v8 + 1;
      v27[11] = v11;
      v27[12] = v23;
      v27[13] = v8 + 1;
      v27[14] = v11;
      v27[15] = v23;
      v27[0] = v8 + 1;
      v27[1] = v8 + 1;
      v24 = *(unsigned int *)(v22 + 48);
      if ((_DWORD)v24 == -1)
        goto LABEL_33;
      v28 = v27;
      result = ((uint64_t (*)(_QWORD **))off_1E0FD8348[v24])(&v28);
      if ((_DWORD)result)
      {
        v26 = v8 + 4;
        v8 = v7;
        if (v26 != v7)
        {
          v8 = v26;
          while ((unint64_t)(*v8 + 1) <= 1)
          {
            v8 += 4;
            if (v8 == v7)
            {
              v8 = v7;
              break;
            }
          }
        }
        if (v8 != v10)
          continue;
      }
      return result;
    }
  }
  return 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_0,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_1,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_2,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_3,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_4,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_5,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_6,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_7,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_8,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_9,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_10,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_11,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_12,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_13,WGSL::TypeChecker::convertValueImpl(WGSL::SourceSpan const&,WGSL::Type const*,WGSL::ConstantValue &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::~__func()
{
  JUMPOUT(0x186DAB2A8);
}

__n128 std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E0FD83D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E0FD83D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0,std::allocator<WGSL::TypeChecker::allocateTextureStorageConstructor(WTF::ASCIILiteral,WGSL::Types::TextureStorage::Kind)::$_0>,WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  char v21;
  char v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a2 + 108) != 2)
  {
    WGSL::TypeChecker::typeError<char,WGSL::AST::Identifier &,WTF::ASCIILiteral>(*(_BYTE **)(a1 + 8), (__int128 *)(a2 + 8), 39, *(_QWORD *)(a2 + 88), (int8x16_t *)"' requires 2 template argument", 31);
    return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 24);
  }
  v5 = **(_QWORD **)(a2 + 96);
  v6 = *(_WORD *)(v3 + 104);
  *(_WORD *)(v3 + 104) = 3;
  WGSL::AST::Visitor::visit((_BYTE *)v3, v5);
  v7 = *(unsigned __int8 **)(v3 + 88);
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v3 + 88) = 0;
  *(_WORD *)(v3 + 104) = v6;
  v8 = *(_QWORD *)(v3 + 112);
  v9 = *(unsigned __int8 **)(v8 + 24);
  if (v9 == v7)
    return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 24);
  v10 = *(unsigned __int8 **)(v8 + 128);
  v11 = v7 == v10 || v9 == v10;
  if (!v11 && WGSL::conversionRank(v10, v7) == -1)
  {
    *(_QWORD *)&v25 = "' as texel format";
    *((_QWORD *)&v25 + 1) = 18;
    WGSL::TypeChecker::typeError<WTF::ASCIILiteral,WGSL::Type const&,WTF::ASCIILiteral>(v3, 0, (_OWORD *)(v5 + 8), (int8x16_t *)"cannot use '", 13, (uint64_t)v7, &v25);
    return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 24);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) != 22
    || (v12 = WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::TexelFormat> [17]>::tryGet<WTF::String>((unsigned __int8 ***)WGSL::parseTexelFormat(WTF::String const&)::__map, (uint64_t *)(v5 + 88)), *(_DWORD *)(a2 + 108) <= 1u))
  {
    __break(0xC471u);
    JUMPOUT(0x18260071CLL);
  }
  v13 = *(unsigned __int8 *)v12;
  v14 = WGSL::TypeChecker::accessMode((WGSL::TypeChecker *)v3, *(WGSL::AST::Expression **)(*(_QWORD *)(a2 + 96) + 8));
  if (v14 <= 0xFFu)
    return *(_QWORD *)(*(_QWORD *)(v3 + 112) + 24);
  v15 = *(_QWORD *)(v3 + 112);
  v23 = *(_BYTE *)(a1 + 16);
  v22 = v13;
  v21 = v14;
  v16 = (v13 << 16) | ((unint64_t)v23 << 8) | ((unint64_t)v14 << 32) | 5;
  v25 = v16;
  v17 = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>((uint64_t *)(v15 + 16), (unsigned __int8 *)&v25);
  v18 = *(unsigned __int8 **)(v15 + 16);
  if (v18)
    v18 += 24 * *((unsigned int *)v18 - 1);
  if (v18 == v17 || (v19 = *((_QWORD *)v17 + 2)) == 0)
  {
    v19 = WGSL::TypeStore::allocateType<WGSL::Types::TextureStorage,WGSL::Types::TextureStorage::Kind &,WGSL::TexelFormat &,WGSL::AccessMode &>(v15, &v23, &v22, &v21);
    v26 = v19;
    v24[0] = v16;
    v24[1] = 0;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(v15 + 16), (unsigned __int8 *)v24, &v26, (uint64_t)&v25);
  }
  return v19;
}

uint64_t WGSL::conversionRank(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  BOOL v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t result;
  int v16;
  char v17;
  char *v18;

  if (a1 == a2)
    return 0;
  v2 = a2;
  v3 = a1;
  while (1)
  {
LABEL_3:
    if (!v3)
    {
      while (1)
      {
        v4 = v2 == 0;
        if (!v2 || *((_DWORD *)v2 + 12) != 10)
          break;
        if (v2[1] == 2)
          return 0xFFFFFFFFLL;
        v2 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
        if (!v2)
          return 0;
      }
      goto LABEL_12;
    }
    if (*((_DWORD *)v3 + 12) != 10)
      break;
    if (v3[1] == 2)
      return 0xFFFFFFFFLL;
    v3 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
    if (v3 == v2)
      return 0;
  }
  while (1)
  {
    v4 = v2 == 0;
    if (!v2 || *((_DWORD *)v2 + 12) != 10)
      break;
    if (v2[1] == 2)
      return 0xFFFFFFFFLL;
    v2 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
    if (v3 == v2)
      return 0;
  }
LABEL_12:
  if (!v3)
    return 0xFFFFFFFFLL;
  v5 = *((_DWORD *)v3 + 12);
  switch(v5)
  {
    case 0:
      if (v4 || *((_DWORD *)v2 + 12))
        return 0xFFFFFFFFLL;
      v16 = *v2 | (*v3 << 8);
      switch(v16)
      {
        case 1:
          result = 3;
          break;
        case 2:
          result = 4;
          break;
        case 3:
          result = 5;
          break;
        case 4:
          result = 7;
          break;
        case 5:
          result = 6;
          break;
        default:
          if (v16 == 773)
          {
            result = 1;
          }
          else
          {
            if (v16 != 772)
              return 0xFFFFFFFFLL;
            result = 2;
          }
          break;
      }
      return result;
    case 1:
      if (v4 || *((_DWORD *)v2 + 12) != 1 || v3[8] != v2[8])
        return 0xFFFFFFFFLL;
      v2 = *(unsigned __int8 **)v2;
      v3 = *(unsigned __int8 **)v3;
      if (v3 == v2)
        return 0;
      goto LABEL_3;
    case 2:
      if (v4 || *((_DWORD *)v2 + 12) != 2 || v3[8] != v2[8] || v3[9] != v2[9])
        return 0xFFFFFFFFLL;
      v2 = *(unsigned __int8 **)v2;
      v3 = *(unsigned __int8 **)v3;
      if (v3 == v2)
        return 0;
      goto LABEL_3;
    case 3:
      if (v4 || *((_DWORD *)v2 + 12) != 3)
        return 0xFFFFFFFFLL;
      v9 = *((unsigned int *)v3 + 4);
      v10 = *((_DWORD *)v2 + 4);
      v12 = v10 == (_DWORD)v9 && v10 != -1;
      if ((_DWORD)v9 != -1 && v12)
      {
        v18 = &v17;
        if ((((uint64_t (*)(char **, unsigned __int8 *, unsigned __int8 *))off_1E0FD8420[v9])(&v18, v3 + 8, v2 + 8) & 1) != 0)return 0xFFFFFFFFLL;
        goto LABEL_56;
      }
      v13 = v10 == -1;
      if ((_DWORD)v9 == -1)
        v14 = v13;
      else
        v14 = v12;
      if (v14)
      {
LABEL_56:
        v2 = *(unsigned __int8 **)v2;
        v3 = *(unsigned __int8 **)v3;
        if (v3 == v2)
          return 0;
        goto LABEL_3;
      }
      return 0xFFFFFFFFLL;
    default:
      if (v5 != 5)
        v4 = 1;
      if (v4)
        return 0xFFFFFFFFLL;
      if (*((_DWORD *)v2 + 12) != 5)
        return 0xFFFFFFFFLL;
      v6 = v3[8];
      if (v6 != v2[8])
        return 0xFFFFFFFFLL;
      if (v6 == 1)
      {
        v7 = *((_QWORD *)v3 + 2);
        if (!*(_DWORD *)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x182600B28);
        }
        v8 = *((_QWORD *)v2 + 2);
        if (!*(_DWORD *)v8)
        {
          __break(0xC471u);
          JUMPOUT(0x182600B48);
        }
      }
      else
      {
        if (v3[8])
          return 0xFFFFFFFFLL;
        v7 = *((_QWORD *)v3 + 2);
        if (!*(_DWORD *)v7)
        {
          __break(0xC471u);
          JUMPOUT(0x182600AE8);
        }
        v8 = *((_QWORD *)v2 + 2);
        if (!*(_DWORD *)v8)
        {
          __break(0xC471u);
          JUMPOUT(0x182600B08);
        }
      }
      v2 = *(unsigned __int8 **)(v8 + 8);
      v3 = *(unsigned __int8 **)(v7 + 8);
      if (v3 == v2)
        return 0;
      goto LABEL_3;
  }
}

uint64_t WGSL::Type::size(WGSL::Type *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Type::alignment((WGSL::Type *)v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WGSL::Type *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WGSL::Type::alignment(WGSL::Type *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Type::packing((WGSL::Type *)v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WGSL::Type *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WGSL::Type::packing(WGSL::Type *this)
{
  int v1;
  unsigned int v3;

  if (!this)
    return 2;
  while (1)
  {
    v1 = *((_DWORD *)this + 12);
    if (v1 != 10)
      break;
    this = (WGSL::Type *)*((_QWORD *)this + 1);
    if (!this)
      return 2;
  }
  if (v1 == 1)
  {
    if (*((_BYTE *)this + 8) == 3)
      return 17;
    return 2;
  }
  if (v1 != 3)
  {
    if (v1 == 4 && *(_BYTE *)(*(_QWORD *)this + 88) == 6)
      return 5;
    return 2;
  }
  v3 = WGSL::Type::packing(*(WGSL::Type **)this);
  return (8 * (v3 & 1)) | v3;
}

uint64_t WGSL::Type::isConstructible(WGSL::Type *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Type::isHostShareable((WGSL::Type *)v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WGSL::Type *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

uint64_t WGSL::Type::isHostShareable(WGSL::Type *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Type::hasFixedFootprint((WGSL::Type *)v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, WGSL::Type *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isHostShareableEvE3__0JZNKS9_15isHostShareableEvE3__1ZNKS9_15isHostShareableEvE3__2ZNKS9_15isHostShareableEvE3__3ZNKS9_15isHostShareableEvE3__4ZNKS9_15isHostShareableEvE3__5ZNKS9_15isHostShareableEvE3__6ZNKS9_15isHostShareableEvE3__7ZNKS9_15isHostShareableEvE3__8ZNKS9_15isHostShareableEvE3__9ZNKS9_15isHostShareableEvE4__10ZNKS9_15isHostShareableEvE4__11ZNKS9_15isHostShareableEvE4__12ZNKS9_15isHostShareableEvE4__13ZNKS9_15isHostShareableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

_DWORD *WGSL::Type::hasFixedFootprint(WGSL::Type *this)
{
  uint64_t v1;
  _BOOL8 v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 12);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WGSL::Type::containsRuntimeArray((_DWORD *)v3);
  }
  else
  {
    v5 = &v4;
    return (_DWORD *)((uint64_t (*)(char **, WGSL::Type *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type17hasFixedFootprintEvE3__0JZNKS9_17hasFixedFootprintEvE3__1ZNKS9_17hasFixedFootprintEvE3__2ZNKS9_17hasFixedFootprintEvE3__3ZNKS9_17hasFixedFootprintEvE3__4ZNKS9_17hasFixedFootprintEvE3__5ZNKS9_17hasFixedFootprintEvE3__6ZNKS9_17hasFixedFootprintEvE3__7ZNKS9_17hasFixedFootprintEvE3__8ZNKS9_17hasFixedFootprintEvE3__9ZNKS9_17hasFixedFootprintEvE4__10ZNKS9_17hasFixedFootprintEvE4__11ZNKS9_17hasFixedFootprintEvE4__12ZNKS9_17hasFixedFootprintEvE4__13ZNKS9_17hasFixedFootprintEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, this);
  }
}

_DWORD *WGSL::Type::containsRuntimeArray(_DWORD *this)
{
  uint64_t v1;
  int v2;

  if (this)
  {
    while (1)
    {
      while (1)
      {
        v2 = this[12];
        if (v2 != 4)
          break;
        v1 = *(unsigned int *)(*(_QWORD *)this + 84);
        if (!(_DWORD)v1)
        {
          __break(0xC471u);
          return this;
        }
        this = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 72) + 8 * v1 - 8) + 104) + 24);
        if (!this)
          return this;
      }
      if (v2 != 10)
        break;
      this = (_DWORD *)*((_QWORD *)this + 1);
      if (!this)
        return this;
    }
    if (v2 == 3)
      return (_DWORD *)(this[4] == 0);
    else
      return 0;
  }
  return this;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 != *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 != *a3;
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t **result, char *a2)
{
  uint64_t v2;

  if ((unint64_t)*a2 <= 0xD)
  {
    v2 = **result;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    WTF::printInternal();
    return (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v7;
  _QWORD v8[15];
  _QWORD *v9;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  v8[0] = v4;
  v8[1] = v4;
  v8[2] = v4;
  v8[3] = v4;
  v8[4] = v4;
  v8[5] = v4;
  v8[6] = v4;
  v8[7] = v4;
  v8[8] = v4;
  v8[9] = v4;
  v8[10] = v4;
  v8[11] = v4;
  v8[12] = v4;
  v8[13] = v4;
  v8[14] = v4;
  v5 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v9 = v8;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, v3);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v7;
  _QWORD v8[15];
  _QWORD *v9;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  WTF::printInternal();
  v8[0] = v4;
  v8[1] = v4;
  v8[2] = v4;
  v8[3] = v4;
  v8[4] = v4;
  v8[5] = v4;
  v8[6] = v4;
  v8[7] = v4;
  v8[8] = v4;
  v8[9] = v4;
  v8[10] = v4;
  v8[11] = v4;
  v8[12] = v4;
  v8[13] = v4;
  v8[14] = v4;
  v5 = *(unsigned int *)(v3 + 48);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v9 = v8;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, v3);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 24);
  v5 = *a2;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  v12 = v6;
  v13 = v6;
  v14 = v6;
  v15 = v6;
  v16 = v6;
  v17 = v6;
  v18 = v6;
  v19 = v6;
  v20 = v6;
  v21 = v6;
  v22 = v6;
  v23 = v6;
  v24 = v6;
  v25 = v6;
  v26 = v6;
  v7 = *(unsigned int *)(v5 + 48);
  if ((_DWORD)v7 == -1
    || (v27 = &v12,
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v27, v5), (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4), v12 = *(_QWORD *)(v3 + 24), v13 = v12, v8 = *((unsigned int *)a2 + 4), (_DWORD)v8 == -1))
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v11);
  }
  else
  {
    v27 = &v12;
    ((void (*)(uint64_t **, uint64_t *))off_1E0FD84B0[v8])(&v27, a2 + 1);
    v9 = *(_QWORD *)(v3 + 24);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v12;
  _QWORD v13[15];
  _QWORD *v14;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == 2)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1826012BCLL);
    }
  }
  else if (v5 == 1)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1826013A0);
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 8))
    {
LABEL_11:
      v10 = *(_QWORD *)(v3 + 40);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      WTF::printInternal();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    }
    v6 = *(_QWORD *)(a2 + 16);
    if (!*(_DWORD *)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x182601290);
    }
  }
  v7 = *(_QWORD *)(v3 + 40);
  v8 = *(_QWORD *)(v6 + 8);
  v13[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v13[1] = v13[0];
  v13[2] = v13[0];
  v13[3] = v13[0];
  v13[4] = v13[0];
  v13[5] = v13[0];
  v13[6] = v13[0];
  v13[7] = v13[0];
  v13[8] = v13[0];
  v13[9] = v13[0];
  v13[10] = v13[0];
  v13[11] = v13[0];
  v13[12] = v13[0];
  v13[13] = v13[0];
  v13[14] = v13[0];
  v9 = *(unsigned int *)(v8 + 48);
  if ((_DWORD)v9 != -1)
  {
    v14 = v13;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v14, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    goto LABEL_11;
  }
  v12 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 48);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = *a2;
    v7 = **a2;
    v8 = *(_QWORD *)(v3 + 48);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v23 = v22;
    v24 = v22;
    v25 = v22;
    v26 = v22;
    v27 = v22;
    v28 = v22;
    v29 = v22;
    v30 = v22;
    v31 = v22;
    v32 = v22;
    v33 = v22;
    v34 = v22;
    v35 = v22;
    v36 = v22;
    v9 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v9 == -1)
      goto LABEL_9;
    v37 = &v22;
    ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v37, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    if ((_DWORD)v5 != 1)
    {
      v10 = v6 + 1;
      v11 = 8 * v5 - 8;
      do
      {
        v12 = *v10;
        v13 = *(_QWORD *)(v3 + 48);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
        WTF::printInternal();
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        v14 = *(_QWORD *)(v3 + 48);
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
        v23 = v22;
        v24 = v22;
        v25 = v22;
        v26 = v22;
        v27 = v22;
        v28 = v22;
        v29 = v22;
        v30 = v22;
        v31 = v22;
        v32 = v22;
        v33 = v22;
        v34 = v22;
        v35 = v22;
        v36 = v22;
        v15 = *(unsigned int *)(v12 + 48);
        if ((_DWORD)v15 == -1)
          goto LABEL_9;
        v37 = &v22;
        ((void (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v37, v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  v16 = *(_QWORD *)(v3 + 48);
  v17 = a2[2];
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  WTF::printInternal();
  v22 = v18;
  v23 = v18;
  v24 = v18;
  v25 = v18;
  v26 = v18;
  v27 = v18;
  v28 = v18;
  v29 = v18;
  v30 = v18;
  v31 = v18;
  v32 = v18;
  v33 = v18;
  v34 = v18;
  v35 = v18;
  v36 = v18;
  v19 = *((unsigned int *)v17 + 12);
  if ((_DWORD)v19 != -1)
  {
    v37 = &v22;
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v37, v17);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
LABEL_9:
  v21 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v21);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v10;
  _QWORD v11[15];
  _QWORD *v12;

  v3 = *a1;
  if (*((unsigned __int8 *)a2 + 8) - 1 <= 6)
  {
    v4 = *(_QWORD *)(v3 + 56);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  }
  v5 = *(_QWORD *)(v3 + 56);
  v6 = *a2;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::printInternal();
  v11[0] = v7;
  v11[1] = v7;
  v11[2] = v7;
  v11[3] = v7;
  v11[4] = v7;
  v11[5] = v7;
  v11[6] = v7;
  v11[7] = v7;
  v11[8] = v7;
  v11[9] = v7;
  v11[10] = v7;
  v11[11] = v7;
  v11[12] = v7;
  v11[13] = v7;
  v11[14] = v7;
  v8 = *(unsigned int *)(v6 + 48);
  if ((_DWORD)v8 == -1)
  {
    v10 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v10);
  }
  else
  {
    v12 = v11;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v12, v6);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if ((*a2 - 1) <= 3u)
  {
    v3 = *(_QWORD *)(v2 + 64);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    WTF::printInternal();
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*a2 - 1 <= 4)
  {
    v2 = *(_QWORD *)(*(_QWORD *)result + 72);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printImpl<char [3],WGSL::Type,char [3],WGSL::AccessMode,char [2]>(v5, v4, (unsigned __int8 *)(a2 + 1));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::ASCIILiteral::dump();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  WTF::PrintStream::printImpl<char [3],WGSL::Type,char [3],WGSL::AccessMode,char [2]>(v5, v4, (unsigned __int8 *)(a2 + 1));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v7;
  _QWORD v8[15];
  _QWORD *v9;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  WTF::printInternal();
  v8[0] = v4;
  v8[1] = v4;
  v8[2] = v4;
  v8[3] = v4;
  v8[4] = v4;
  v8[5] = v4;
  v8[6] = v4;
  v8[7] = v4;
  v8[8] = v4;
  v8[9] = v4;
  v8[10] = v4;
  v8[11] = v4;
  v8[12] = v4;
  v8[13] = v4;
  v8[14] = v4;
  v5 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v5 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v9 = v8;
    ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9, v2);
    WTF::printInternal();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::ASCIILiteral::dump();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_1,WGSL::Type::dump(WTF::PrintStream &)::$_2,WGSL::Type::dump(WTF::PrintStream &)::$_3,WGSL::Type::dump(WTF::PrintStream &)::$_0,WGSL::Type::dump(WTF::PrintStream &)::$_4,WGSL::Type::dump(WTF::PrintStream &)::$_5,WGSL::Type::dump(WTF::PrintStream &)::$_6,WGSL::Type::dump(WTF::PrintStream &)::$_7,WGSL::Type::dump(WTF::PrintStream &)::$_8,WGSL::Type::dump(WTF::PrintStream &)::$_9,WGSL::Type::dump(WTF::PrintStream &)::$_10,WGSL::Type::dump(WTF::PrintStream &)::$_11,WGSL::Type::dump(WTF::PrintStream &)::$_12,WGSL::Type::dump(WTF::PrintStream &)::$_13,WGSL::Type::dump(WTF::PrintStream &)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(unsigned int)#1},WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(std::monostate)#1},WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t **a1)
{
  uint64_t v1;

  v1 = **a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  WTF::printInternal();
  WTF::printInternal();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(unsigned int)#1},WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(std::monostate)#1},WGSL::Type::dump(WTF::PrintStream &)::$_0::operator() const(WGSL::Types::Array const&)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  void (**v9)(WGSL::AST::Visitor *__hidden);
  _DWORD *v10;
  char v11;
  _BYTE v12[160];
  _DWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v5 = *(_QWORD *)(v2 + 8);
  LOBYTE(v10) = 0;
  v11 = 0;
  v9 = &off_1E0FD2330;
  WTF::StringPrintStream::StringPrintStream((WTF::StringPrintStream *)v12);
  v13 = 0;
  WGSL::AST::Visitor::visit(&v9, v3);
  WTF::StringPrintStream::toString((WTF::StringPrintStream *)v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  WTF::printInternal();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  if (v8)
  {
    if (*v8 == 2)
    {
      WTF::StringImpl::destroy();
      v6 = v13;
      v13 = 0;
      if (!v6)
        goto LABEL_10;
      goto LABEL_7;
    }
    *v8 -= 2;
  }
  v6 = v13;
  v13 = 0;
  if (!v6)
    goto LABEL_10;
LABEL_7:
  if (*v6 == 2)
    WTF::StringImpl::destroy();
  else
    *v6 -= 2;
LABEL_10:
  WTF::StringPrintStream::~StringPrintStream((WTF::StringPrintStream *)v12);
  v9 = &off_1E0FD25C8;
  if (v11)
  {
    v7 = v10;
    v10 = 0;
    if (v7)
    {
      if (*v7 == 2)
        WTF::StringImpl::destroy();
      else
        *v7 -= 2;
    }
  }
}

uint64_t WTF::PrintStream::printImpl<char [3],WGSL::Type,char [3],WGSL::AccessMode,char [2]>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int64x2_t v8;
  const char *v9;
  _BOOL8 v11;
  unsigned __int8 *v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t *v27;

  WTF::printInternal();
  v13.i64[0] = a1;
  v13.i64[1] = a1;
  v14 = a1;
  v15 = a1;
  v16 = a1;
  v17 = a1;
  v18 = a1;
  v19 = a1;
  v20 = a1;
  v21 = a1;
  v22 = a1;
  v23 = a1;
  v24 = a1;
  v25 = a1;
  v26 = a1;
  v6 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v6 == -1)
  {
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v11, v12);
  }
  else
  {
    v27 = &v13;
    ((void (*)(int64x2_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4dumpERNS6_11PrintStreamEE3__1JZNKS9_4dumpESB_E3__2ZNKS9_4dumpESB_E3__3ZNKS9_4dumpESB_E3__0ZNKS9_4dumpESB_E3__4ZNKS9_4dumpESB_E3__5ZNKS9_4dumpESB_E3__6ZNKS9_4dumpESB_E3__7ZNKS9_4dumpESB_E3__8ZNKS9_4dumpESB_E3__9ZNKS9_4dumpESB_E4__10ZNKS9_4dumpESB_E4__11ZNKS9_4dumpESB_E4__12ZNKS9_4dumpESB_E4__13ZNKS9_4dumpESB_E4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSU_6VectorENSU_6MatrixENSU_5ArrayENSU_6StructENSU_15PrimitiveStructENSU_8FunctionENSU_7TextureENSU_14TextureStorageENSU_12TextureDepthENSU_9ReferenceENSU_7PointerENSU_6AtomicENSU_15TypeConstructorENSU_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v27, a2);
    WTF::printInternal();
    v7 = *a3;
    if (v7 == 2)
    {
      v8 = vdupq_n_s64(6uLL);
      v9 = "write";
    }
    else if (v7 == 1)
    {
      v8 = vdupq_n_s64(0xBuLL);
      v9 = "read_write";
    }
    else
    {
      v8 = vdupq_n_s64(5uLL);
      v9 = "read";
    }
    v8.i64[0] = (uint64_t)v9;
    v13 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::ASCIILiteral::dump();
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    return WTF::printInternal();
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *a2;
  result = 2;
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x26) != 0)
    {
      return 4;
    }
    else if (v2 == 7)
    {
      return 1;
    }
    else if (((1 << v2) & 0x3F49) != 0)
    {
      result = 311;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((unsigned int (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6)
         * a2[8];
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  _BOOL8 v12;
  char v13;
  char *v14;

  v3 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v3 == -1
    || (v4 = a2[9],
        v14 = &v13,
        v5 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v14),
        v6 = *(unsigned int *)(*(_QWORD *)a2 + 48),
        (_DWORD)v6 == -1))
  {
    v12 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v12);
  }
  else
  {
    v7 = v5;
    v8 = a2[9];
    v14 = &v13;
    v9 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v14);
    if (v8 == 2)
      v10 = 1;
    else
      v10 = 2;
    return (((v9 << v10) + v7 * v4 - 1) & -(v9 << v10)) * a2[8];
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  char *v19;

  v3 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v3 == -1
    || (v4 = a2[4],
        v5 = a2[2],
        v19 = &v18,
        v6 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v19),
        v7 = *(unsigned int *)(*(_QWORD *)a2 + 48),
        (_DWORD)v7 == -1))
  {
    v16 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v16, v17);
  }
  else
  {
    v8 = v6;
    if (v4 == 1)
      v9 = v5;
    else
      v9 = 1;
    v19 = &v18;
    v10 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v7])(&v19);
    v11 = (v8 + v10 - 1) & -v10;
    v12 = v9 * (unint64_t)v11;
    if ((v12 & 0xFFFFFFFF00000000) != 0 || v11 < v8)
      return 0xFFFFFFFFLL;
    else
      return v12;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)a2 + 128))
    return *(unsigned int *)(*(_QWORD *)a2 + 124);
  __break(1u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char *v9;

  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
    v3 = v2 + 2;
  else
    v3 = 0;
  if (v2)
  {
    v4 = (uint64_t)&v2[2 * *v2 + 2];
    if (v3 != (unsigned int *)v4)
      goto LABEL_6;
    return 0;
  }
  v4 = 0;
  if (!v3)
    return 0;
LABEL_6:
  LODWORD(v5) = 0;
  do
  {
    v6 = *(unsigned int *)(*(_QWORD *)v3 + 48);
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
    }
    v9 = &v8;
    v5 = ((unsigned int (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v9)
       + v5;
    v3 += 2;
  }
  while (v3 != (unsigned int *)v4);
  return v5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *a2;
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1826025BCLL);
  }
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v6 = &v5;
  return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3ZNKS9_4sizeEvE3__4ZNKS9_4sizeEvE3__5ZNKS9_4sizeEvE3__6ZNKS9_4sizeEvE3__7ZNKS9_4sizeEvE3__8ZNKS9_4sizeEvE3__9ZNKS9_4sizeEvE4__10ZNKS9_4sizeEvE4__11ZNKS9_4sizeEvE4__12ZNKS9_4sizeEvE4__13ZNKS9_4sizeEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::size(void)::$_0,WGSL::Type::size(void)::$_1,WGSL::Type::size(void)::$_2,WGSL::Type::size(void)::$_3,WGSL::Type::size(void)::$_4,WGSL::Type::size(void)::$_5,WGSL::Type::size(void)::$_6,WGSL::Type::size(void)::$_7,WGSL::Type::size(void)::$_8,WGSL::Type::size(void)::$_9,WGSL::Type::size(void)::$_10,WGSL::Type::size(void)::$_11,WGSL::Type::size(void)::$_12,WGSL::Type::size(void)::$_13,WGSL::Type::size(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2;
  uint64_t result;

  v2 = *a2;
  result = 2;
  if (v2 <= 0xD)
  {
    if (((1 << v2) & 0x26) != 0)
    {
      return 4;
    }
    else if (v2 == 7)
    {
      return 1;
    }
    else if (((1 << v2) & 0x3F49) != 0)
    {
      result = 399;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  _BOOL8 v7;
  char v8;
  char *v9;

  v3 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v9 = &v8;
    v4 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v9);
    if (a2[8] == 2)
      v5 = 1;
    else
      v5 = 2;
    return (v4 << v5);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  _BOOL8 v7;
  char v8;
  char *v9;

  v3 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v3 == -1)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v7);
  }
  else
  {
    v9 = &v8;
    v4 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v9);
    if (a2[9] == 2)
      v5 = 1;
    else
      v5 = 2;
    return (v4 << v5);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  uint64_t v5;
  char v6;
  char *v7;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)a2 + 136))
    return *(unsigned int *)(*(_QWORD *)a2 + 132);
  __break(1u);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char *v6;

  v2 = *a2;
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x1826028E8);
  }
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
  }
  v6 = &v5;
  return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type9alignmentEvE3__0JZNKS9_9alignmentEvE3__1ZNKS9_9alignmentEvE3__2ZNKS9_9alignmentEvE3__3ZNKS9_9alignmentEvE3__4ZNKS9_9alignmentEvE3__5ZNKS9_9alignmentEvE3__6ZNKS9_9alignmentEvE3__7ZNKS9_9alignmentEvE3__8ZNKS9_9alignmentEvE3__9ZNKS9_9alignmentEvE4__10ZNKS9_9alignmentEvE4__11ZNKS9_9alignmentEvE4__12ZNKS9_9alignmentEvE4__13ZNKS9_9alignmentEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v6);
}

void std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

void std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::alignment(void)::$_0,WGSL::Type::alignment(void)::$_1,WGSL::Type::alignment(void)::$_2,WGSL::Type::alignment(void)::$_3,WGSL::Type::alignment(void)::$_4,WGSL::Type::alignment(void)::$_5,WGSL::Type::alignment(void)::$_6,WGSL::Type::alignment(void)::$_7,WGSL::Type::alignment(void)::$_8,WGSL::Type::alignment(void)::$_9,WGSL::Type::alignment(void)::$_10,WGSL::Type::alignment(void)::$_11,WGSL::Type::alignment(void)::$_12,WGSL::Type::alignment(void)::$_13,WGSL::Type::alignment(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  __break(0xC471u);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  return (*a2 > 0xDuLL) | (0xBFu >> *a2) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _BOOL8 v4;
  uint64_t v5;
  char v6;
  char *v7;

  if (a2[4] != 1)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v7);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 104) + 24) + 48);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isConstructibleEvE3__0JZNKS9_15isConstructibleEvE3__1ZNKS9_15isConstructibleEvE3__2ZNKS9_15isConstructibleEvE3__3ZNKS9_15isConstructibleEvE3__4ZNKS9_15isConstructibleEvE3__5ZNKS9_15isConstructibleEvE3__6ZNKS9_15isConstructibleEvE3__7ZNKS9_15isConstructibleEvE3__8ZNKS9_15isConstructibleEvE3__9ZNKS9_15isConstructibleEvE4__10ZNKS9_15isConstructibleEvE4__11ZNKS9_15isConstructibleEvE4__12ZNKS9_15isConstructibleEvE4__13ZNKS9_15isConstructibleEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9);
    v3 += 8;
    if ((_DWORD)result)
      v7 = i == 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isConstructible(void)::$_0,WGSL::Type::isConstructible(void)::$_1,WGSL::Type::isConstructible(void)::$_2,WGSL::Type::isConstructible(void)::$_3,WGSL::Type::isConstructible(void)::$_4,WGSL::Type::isConstructible(void)::$_5,WGSL::Type::isConstructible(void)::$_6,WGSL::Type::isConstructible(void)::$_7,WGSL::Type::isConstructible(void)::$_8,WGSL::Type::isConstructible(void)::$_9,WGSL::Type::isConstructible(void)::$_10,WGSL::Type::isConstructible(void)::$_11,WGSL::Type::isConstructible(void)::$_12,WGSL::Type::isConstructible(void)::$_13,WGSL::Type::isConstructible(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  return (*a2 > 0xDuLL) | (0x7B6u >> *a2) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type10isStorableEvE3__0JZNKS9_10isStorableEvE3__1ZNKS9_10isStorableEvE3__2ZNKS9_10isStorableEvE3__3ZNKS9_10isStorableEvE3__4ZNKS9_10isStorableEvE3__5ZNKS9_10isStorableEvE3__6ZNKS9_10isStorableEvE3__7ZNKS9_10isStorableEvE3__8ZNKS9_10isStorableEvE3__9ZNKS9_10isStorableEvE4__10ZNKS9_10isStorableEvE4__11ZNKS9_10isStorableEvE4__12ZNKS9_10isStorableEvE4__13ZNKS9_10isStorableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type10isStorableEvE3__0JZNKS9_10isStorableEvE3__1ZNKS9_10isStorableEvE3__2ZNKS9_10isStorableEvE3__3ZNKS9_10isStorableEvE3__4ZNKS9_10isStorableEvE3__5ZNKS9_10isStorableEvE3__6ZNKS9_10isStorableEvE3__7ZNKS9_10isStorableEvE3__8ZNKS9_10isStorableEvE3__9ZNKS9_10isStorableEvE4__10ZNKS9_10isStorableEvE4__11ZNKS9_10isStorableEvE4__12ZNKS9_10isStorableEvE4__13ZNKS9_10isStorableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type10isStorableEvE3__0JZNKS9_10isStorableEvE3__1ZNKS9_10isStorableEvE3__2ZNKS9_10isStorableEvE3__3ZNKS9_10isStorableEvE3__4ZNKS9_10isStorableEvE3__5ZNKS9_10isStorableEvE3__6ZNKS9_10isStorableEvE3__7ZNKS9_10isStorableEvE3__8ZNKS9_10isStorableEvE3__9ZNKS9_10isStorableEvE4__10ZNKS9_10isStorableEvE4__11ZNKS9_10isStorableEvE4__12ZNKS9_10isStorableEvE4__13ZNKS9_10isStorableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 104) + 24) + 48);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type10isStorableEvE3__0JZNKS9_10isStorableEvE3__1ZNKS9_10isStorableEvE3__2ZNKS9_10isStorableEvE3__3ZNKS9_10isStorableEvE3__4ZNKS9_10isStorableEvE3__5ZNKS9_10isStorableEvE3__6ZNKS9_10isStorableEvE3__7ZNKS9_10isStorableEvE3__8ZNKS9_10isStorableEvE3__9ZNKS9_10isStorableEvE4__10ZNKS9_10isStorableEvE4__11ZNKS9_10isStorableEvE4__12ZNKS9_10isStorableEvE4__13ZNKS9_10isStorableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9);
    v3 += 8;
    if ((_DWORD)result)
      v7 = i == 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isStorable(void)::$_0,WGSL::Type::isStorable(void)::$_1,WGSL::Type::isStorable(void)::$_2,WGSL::Type::isStorable(void)::$_3,WGSL::Type::isStorable(void)::$_4,WGSL::Type::isStorable(void)::$_5,WGSL::Type::isStorable(void)::$_6,WGSL::Type::isStorable(void)::$_7,WGSL::Type::isStorable(void)::$_8,WGSL::Type::isStorable(void)::$_9,WGSL::Type::isStorable(void)::$_10,WGSL::Type::isStorable(void)::$_11,WGSL::Type::isStorable(void)::$_12,WGSL::Type::isStorable(void)::$_13,WGSL::Type::isStorable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  return (*a2 > 0xDuLL) | (0x36u >> *a2) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isHostShareableEvE3__0JZNKS9_15isHostShareableEvE3__1ZNKS9_15isHostShareableEvE3__2ZNKS9_15isHostShareableEvE3__3ZNKS9_15isHostShareableEvE3__4ZNKS9_15isHostShareableEvE3__5ZNKS9_15isHostShareableEvE3__6ZNKS9_15isHostShareableEvE3__7ZNKS9_15isHostShareableEvE3__8ZNKS9_15isHostShareableEvE3__9ZNKS9_15isHostShareableEvE4__10ZNKS9_15isHostShareableEvE4__11ZNKS9_15isHostShareableEvE4__12ZNKS9_15isHostShareableEvE4__13ZNKS9_15isHostShareableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isHostShareableEvE3__0JZNKS9_15isHostShareableEvE3__1ZNKS9_15isHostShareableEvE3__2ZNKS9_15isHostShareableEvE3__3ZNKS9_15isHostShareableEvE3__4ZNKS9_15isHostShareableEvE3__5ZNKS9_15isHostShareableEvE3__6ZNKS9_15isHostShareableEvE3__7ZNKS9_15isHostShareableEvE3__8ZNKS9_15isHostShareableEvE3__9ZNKS9_15isHostShareableEvE4__10ZNKS9_15isHostShareableEvE4__11ZNKS9_15isHostShareableEvE4__12ZNKS9_15isHostShareableEvE4__13ZNKS9_15isHostShareableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v4;
  char v5;
  char *v6;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 48);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isHostShareableEvE3__0JZNKS9_15isHostShareableEvE3__1ZNKS9_15isHostShareableEvE3__2ZNKS9_15isHostShareableEvE3__3ZNKS9_15isHostShareableEvE3__4ZNKS9_15isHostShareableEvE3__5ZNKS9_15isHostShareableEvE3__6ZNKS9_15isHostShareableEvE3__7ZNKS9_15isHostShareableEvE3__8ZNKS9_15isHostShareableEvE3__9ZNKS9_15isHostShareableEvE4__10ZNKS9_15isHostShareableEvE4__11ZNKS9_15isHostShareableEvE4__12ZNKS9_15isHostShareableEvE4__13ZNKS9_15isHostShareableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v6);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 104) + 24) + 48);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type15isHostShareableEvE3__0JZNKS9_15isHostShareableEvE3__1ZNKS9_15isHostShareableEvE3__2ZNKS9_15isHostShareableEvE3__3ZNKS9_15isHostShareableEvE3__4ZNKS9_15isHostShareableEvE3__5ZNKS9_15isHostShareableEvE3__6ZNKS9_15isHostShareableEvE3__7ZNKS9_15isHostShareableEvE3__8ZNKS9_15isHostShareableEvE3__9ZNKS9_15isHostShareableEvE4__10ZNKS9_15isHostShareableEvE4__11ZNKS9_15isHostShareableEvE4__12ZNKS9_15isHostShareableEvE4__13ZNKS9_15isHostShareableEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9);
    v3 += 8;
    if ((_DWORD)result)
      v7 = i == 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::isHostShareable(void)::$_0,WGSL::Type::isHostShareable(void)::$_1,WGSL::Type::isHostShareable(void)::$_2,WGSL::Type::isHostShareable(void)::$_3,WGSL::Type::isHostShareable(void)::$_4,WGSL::Type::isHostShareable(void)::$_5,WGSL::Type::isHostShareable(void)::$_6,WGSL::Type::isHostShareable(void)::$_7,WGSL::Type::isHostShareable(void)::$_8,WGSL::Type::isHostShareable(void)::$_9,WGSL::Type::isHostShareable(void)::$_10,WGSL::Type::isHostShareable(void)::$_11,WGSL::Type::isHostShareable(void)::$_12,WGSL::Type::isHostShareable(void)::$_13,WGSL::Type::isHostShareable(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  return (*a2 > 0xDuLL) | (0xB6u >> *a2) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 16) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 104) + 24) + 48);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type17hasFixedFootprintEvE3__0JZNKS9_17hasFixedFootprintEvE3__1ZNKS9_17hasFixedFootprintEvE3__2ZNKS9_17hasFixedFootprintEvE3__3ZNKS9_17hasFixedFootprintEvE3__4ZNKS9_17hasFixedFootprintEvE3__5ZNKS9_17hasFixedFootprintEvE3__6ZNKS9_17hasFixedFootprintEvE3__7ZNKS9_17hasFixedFootprintEvE3__8ZNKS9_17hasFixedFootprintEvE3__9ZNKS9_17hasFixedFootprintEvE4__10ZNKS9_17hasFixedFootprintEvE4__11ZNKS9_17hasFixedFootprintEvE4__12ZNKS9_17hasFixedFootprintEvE4__13ZNKS9_17hasFixedFootprintEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9);
    v3 += 8;
    if ((_DWORD)result)
      v7 = i == 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasFixedFootprint(void)::$_0,WGSL::Type::hasFixedFootprint(void)::$_1,WGSL::Type::hasFixedFootprint(void)::$_2,WGSL::Type::hasFixedFootprint(void)::$_3,WGSL::Type::hasFixedFootprint(void)::$_4,WGSL::Type::hasFixedFootprint(void)::$_5,WGSL::Type::hasFixedFootprint(void)::$_6,WGSL::Type::hasFixedFootprint(void)::$_7,WGSL::Type::hasFixedFootprint(void)::$_8,WGSL::Type::hasFixedFootprint(void)::$_9,WGSL::Type::hasFixedFootprint(void)::$_10,WGSL::Type::hasFixedFootprint(void)::$_11,WGSL::Type::hasFixedFootprint(void)::$_12,WGSL::Type::hasFixedFootprint(void)::$_13,WGSL::Type::hasFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, _BYTE *a2)
{
  return (*a2 > 0xDuLL) | (0xB6u >> *a2) & 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 16) == 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  for (i = 8 * v2 - 8; ; i -= 8)
  {
    v5 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 104) + 24) + 48);
    if ((_DWORD)v5 == -1)
      break;
    v9 = &v8;
    result = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK4WGSL4Type25hasCreationFixedFootprintEvE3__0JZNKS9_25hasCreationFixedFootprintEvE3__1ZNKS9_25hasCreationFixedFootprintEvE3__2ZNKS9_25hasCreationFixedFootprintEvE3__3ZNKS9_25hasCreationFixedFootprintEvE3__4ZNKS9_25hasCreationFixedFootprintEvE3__5ZNKS9_25hasCreationFixedFootprintEvE3__6ZNKS9_25hasCreationFixedFootprintEvE3__7ZNKS9_25hasCreationFixedFootprintEvE3__8ZNKS9_25hasCreationFixedFootprintEvE3__9ZNKS9_25hasCreationFixedFootprintEvE4__10ZNKS9_25hasCreationFixedFootprintEvE4__11ZNKS9_25hasCreationFixedFootprintEvE4__12ZNKS9_25hasCreationFixedFootprintEvE4__13ZNKS9_25hasCreationFixedFootprintEvE4__14EEEEEJRKNS0_6__implIJNS8_5Types9PrimitiveENSS_6VectorENSS_6MatrixENSS_5ArrayENSS_6StructENSS_15PrimitiveStructENSS_8FunctionENSS_7TextureENSS_14TextureStorageENSS_12TextureDepthENSS_9ReferenceENSS_7PointerENSS_6AtomicENSS_15TypeConstructorENSS_6BottomEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v9);
    v3 += 8;
    if ((_DWORD)result)
      v7 = i == 0;
    else
      v7 = 1;
    if (v7)
      return result;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>();
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<10ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<11ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<12ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<13ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<14ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::Type::hasCreationFixedFootprint(void)::$_0,WGSL::Type::hasCreationFixedFootprint(void)::$_1,WGSL::Type::hasCreationFixedFootprint(void)::$_2,WGSL::Type::hasCreationFixedFootprint(void)::$_3,WGSL::Type::hasCreationFixedFootprint(void)::$_4,WGSL::Type::hasCreationFixedFootprint(void)::$_5,WGSL::Type::hasCreationFixedFootprint(void)::$_6,WGSL::Type::hasCreationFixedFootprint(void)::$_7,WGSL::Type::hasCreationFixedFootprint(void)::$_8,WGSL::Type::hasCreationFixedFootprint(void)::$_9,WGSL::Type::hasCreationFixedFootprint(void)::$_10,WGSL::Type::hasCreationFixedFootprint(void)::$_11,WGSL::Type::hasCreationFixedFootprint(void)::$_12,WGSL::Type::hasCreationFixedFootprint(void)::$_13,WGSL::Type::hasCreationFixedFootprint(void)::$_14>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WGSL::Types::Primitive,std::__variant_detail::_Trait::Vector,std::__variant_detail::_Trait::Matrix,std::__variant_detail::_Trait::Array,std::__variant_detail::_Trait::Struct,std::__variant_detail::_Trait::PrimitiveStruct,std::__variant_detail::_Trait::Function,std::__variant_detail::_Trait::Texture,std::__variant_detail::_Trait::TextureStorage,std::__variant_detail::_Trait::TextureDepth,std::__variant_detail::_Trait::Reference,std::__variant_detail::_Trait::Pointer,std::__variant_detail::_Trait::Atomic,std::__variant_detail::_Trait::TypeConstructor,std::__variant_detail::_Trait::Bottom> const&>()
{
  return 1;
}

WGSL::TypeStore *WGSL::TypeStore::TypeStore(WGSL::TypeStore *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  char v13;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  v2 = operator new();
  *(_DWORD *)(v2 + 48) = 14;
  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3 == *((_DWORD *)this + 2))
  {
    v4 = v3 + (v3 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 <= v3 + 1)
      v6 = v3 + 1;
    else
      v6 = v5;
    if (v6 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1826033E8);
    }
    v7 = *(void **)this;
    v8 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *((_DWORD *)this + 2) = v6;
    *(_QWORD *)this = v8;
    memcpy(v8, v7, 8 * v3);
    if (v7)
    {
      if (*(void **)this == v7)
      {
        *(_QWORD *)this = 0;
        *((_DWORD *)this + 2) = 0;
      }
      WTF::fastFree((WTF *)v7, v9);
    }
    v3 = *((unsigned int *)this + 3);
    v10 = *(_QWORD *)this;
    v11 = (uint64_t *)(*(_QWORD *)this + 8 * v3);
  }
  else
  {
    v10 = *(_QWORD *)this;
    v11 = (uint64_t *)(*(_QWORD *)this + 8 * v3);
  }
  *v11 = v2;
  *((_DWORD *)this + 3) = v3 + 1;
  if ((_DWORD)v3 == -1)
    goto LABEL_17;
  *((_QWORD *)this + 3) = *(_QWORD *)(v10 + 8 * (v3 + 1) - 8);
  v13 = 0;
  *((_QWORD *)this + 4) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 3;
  *((_QWORD *)this + 5) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 6;
  *((_QWORD *)this + 6) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 7;
  *((_QWORD *)this + 7) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 1;
  *((_QWORD *)this + 8) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 2;
  *((_QWORD *)this + 9) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 5;
  *((_QWORD *)this + 10) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 4;
  *((_QWORD *)this + 11) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 8;
  *((_QWORD *)this + 12) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 9;
  *((_QWORD *)this + 13) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 10;
  *((_QWORD *)this + 14) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 11;
  *((_QWORD *)this + 15) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 12;
  *((_QWORD *)this + 16) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 13;
  *((_QWORD *)this + 17) = WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>((uint64_t)this, &v13);
  v13 = 1;
  *((_QWORD *)this + 18) = WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>((uint64_t)this, &v13);
  v13 = 2;
  *((_QWORD *)this + 19) = WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>((uint64_t)this, &v13);
  v13 = 3;
  *((_QWORD *)this + 20) = WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>((uint64_t)this, &v13);
  v13 = 4;
  *((_QWORD *)this + 21) = WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>((uint64_t)this, &v13);
  v13 = 5;
  *((_QWORD *)this + 22) = WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>((uint64_t)this, &v13);
  *((_QWORD *)this + 23) = WGSL::TypeStore::allocateType<WGSL::Types::Atomic,WGSL::Type const*&>((uint64_t)this, (_QWORD *)this + 8);
  *((_QWORD *)this + 24) = WGSL::TypeStore::allocateType<WGSL::Types::Atomic,WGSL::Type const*&>((uint64_t)this, (_QWORD *)this + 9);
  return this;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Primitive,WGSL::Types::Primitive::Kind>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t *v13;

  v4 = operator new();
  *(_BYTE *)v4 = *a2;
  *(_DWORD *)(v4 + 48) = 0;
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 8))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1826034F0);
    }
    v9 = *(_QWORD **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *(unsigned int *)(a1 + 12);
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  else
  {
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  *v13 = v4;
  *(_DWORD *)(a1 + 12) = v5 + 1;
  if ((_DWORD)v5 == -1)
    goto LABEL_17;
  return v12[(v5 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::TextureDepth,WGSL::Types::TextureDepth::Kind>(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t *v13;

  v4 = operator new();
  *(_BYTE *)v4 = *a2;
  *(_DWORD *)(v4 + 48) = 9;
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 8))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1826035FCLL);
    }
    v9 = *(_QWORD **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *(unsigned int *)(a1 + 12);
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  else
  {
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  *v13 = v4;
  *(_DWORD *)(a1 + 12) = v5 + 1;
  if ((_DWORD)v5 == -1)
    goto LABEL_17;
  return v12[(v5 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Atomic,WGSL::Type const*&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t *v13;

  v4 = operator new();
  *(_QWORD *)v4 = *a2;
  *(_DWORD *)(v4 + 48) = 12;
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 8))
  {
    v6 = v5 + (v5 >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 <= v5 + 1)
      v8 = v5 + 1;
    else
      v8 = v7;
    if (v8 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182603708);
    }
    v9 = *(_QWORD **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(_QWORD **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
    v5 = *(unsigned int *)(a1 + 12);
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  else
  {
    v12 = *(_QWORD **)a1;
    v13 = (uint64_t *)(*(_QWORD *)a1 + 8 * v5);
  }
  *v13 = v4;
  *(_DWORD *)(a1 + 12) = v5 + 1;
  if ((_DWORD)v5 == -1)
    goto LABEL_17;
  return v12[(v5 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Struct,WGSL::AST::Structure &,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits> &>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  _DWORD **v17;
  uint64_t v18;
  _DWORD **v19;
  _DWORD *v20;
  __int128 v22;

  v6 = operator new();
  *(_QWORD *)&v22 = a2;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::Type const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::Type const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)&v22 + 1, a3);
  v8 = v22;
  *((_QWORD *)&v22 + 1) = 0;
  *(_OWORD *)v6 = v8;
  *(_DWORD *)(v6 + 48) = 4;
  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9 != *(_DWORD *)(a1 + 8))
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v6;
    v16 = v9 + 1;
    *(_DWORD *)(a1 + 12) = v9 + 1;
    v17 = (_DWORD **)*((_QWORD *)&v22 + 1);
    if (!*((_QWORD *)&v22 + 1))
      goto LABEL_25;
    goto LABEL_16;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (v12 >> 29)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1826038ACLL);
  }
  v13 = *(void **)a1;
  v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
  *(_DWORD *)(a1 + 8) = v12;
  *(_QWORD *)a1 = v14;
  memcpy(v14, v13, 8 * v9);
  if (v13)
  {
    if (*(void **)a1 == v13)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree((WTF *)v13, v7);
  }
  v15 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v6;
  v16 = v15 + 1;
  *(_DWORD *)(a1 + 12) = v15 + 1;
  v17 = (_DWORD **)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
LABEL_16:
    v18 = *((unsigned int *)v17 - 1);
    if ((_DWORD)v18)
    {
      v19 = v17;
      do
      {
        v20 = *v19;
        if (*v19 != (_DWORD *)-1)
        {
          *v19 = 0;
          if (v20)
          {
            if (*v20 == 2)
              WTF::StringImpl::destroy();
            else
              *v20 -= 2;
          }
        }
        v19 += 2;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree((WTF *)(v17 - 2), v7);
    v16 = *(_DWORD *)(a1 + 12);
  }
LABEL_25:
  if (!v16)
    goto LABEL_27;
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * v16 - 8);
}

uint64_t WGSL::TypeStore::arrayType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int i;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  BOOL v19;
  BOOL v21;
  uint64_t v22;
  _BOOL8 v24;
  uint64_t *v25;
  _OWORD *v26;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  _QWORD v32[3];
  uint64_t v33;

  *(_QWORD *)&v30 = a3;
  *((_QWORD *)&v30 + 1) = a4;
  v29 = a2;
  if ((_DWORD)a4 == 2)
    return WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>(a1, &v29, &v30);
  v28 = v30;
  if (DWORD2(v30) != -1)
  {
    v6 = (uint64_t *)(a1 + 16);
    v31[0] = &v33;
    v7 = ((uint64_t (*)(_QWORD *, __int128 *))off_1E0FD8900[DWORD2(v30)])(v31, &v28);
    v8 = v7;
    v32[0] = (v7 << 32) | 3;
    v32[1] = a2;
    v9 = *v6;
    if (*v6)
    {
      v10 = *(_DWORD *)(v9 - 8);
      v11 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v32);
      for (i = 0; ; v11 = i + (v11 & v10))
      {
        v13 = v9 + 24 * (v11 & v10);
        v14 = *(unsigned __int8 *)(v13 + 1);
        v15 = *(unsigned __int16 *)(v13 + 2);
        v16 = *(_BYTE *)v13 == 3 && v14 == 0;
        if (v16 && v15 == 0 && *(_DWORD *)(v13 + 4) == v8 && *(_QWORD *)(v13 + 8) == a2)
          break;
        if (*(_BYTE *)v13)
          v19 = 0;
        else
          v19 = v14 == 0;
        v21 = v19 && v15 == 0 && *(_DWORD *)(v13 + 4) == 0;
        if (v21 && !*(_QWORD *)(v13 + 8))
          goto LABEL_34;
        ++i;
      }
      if (v9 + 24 * *(unsigned int *)(v9 - 4) != v13)
      {
        v5 = *(_QWORD *)(v13 + 16);
        if (v5)
          return v5;
      }
    }
LABEL_34:
    v22 = WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>(a1, &v29, &v30);
    v33 = v22;
    if (DWORD2(v28) != -1)
    {
      v5 = v22;
      v32[0] = v31;
      v31[0] = (((uint64_t (*)(_QWORD *, __int128 *))off_1E0FD8900[DWORD2(v28)])(v32, &v28) << 32) | 3;
      v31[1] = a2;
      WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>((uint64_t *)(a1 + 16), (unsigned __int8 *)v31, &v33, (uint64_t)v32);
      return v5;
    }
  }
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  return WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>(v24, v25, v26);
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Array,WGSL::Type const*&,std::variant<std::monostate,unsigned int,WGSL::AST::Expression *> &>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t *v16;

  v6 = operator new();
  v7 = *a2;
  *(_OWORD *)(v6 + 8) = *a3;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 48) = 3;
  v8 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 8))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182603BA4);
    }
    v12 = *(_QWORD **)a1;
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if (*(_QWORD **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *(unsigned int *)(a1 + 12);
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  *v16 = v6;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  if ((_DWORD)v8 == -1)
    goto LABEL_17;
  return v15[(v8 + 1) - 1];
}

uint64_t WGSL::TypeStore::vectorType(WGSL::TypeStore *this, unsigned int a2, const WGSL::Type *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v18;
  BOOL v20;
  uint64_t v21;
  const WGSL::Type *v23;
  char v24;
  _QWORD v25[2];
  _QWORD v26[3];
  uint64_t v27;

  v24 = a2;
  v5 = (uint64_t *)((char *)this + 16);
  v6 = *((_QWORD *)this + 2);
  v23 = a3;
  v7 = ((unint64_t)a2 << 8) | 1;
  v26[0] = v7;
  v26[1] = a3;
  if (!v6)
    goto LABEL_31;
  v9 = *(_DWORD *)(v6 - 8);
  v10 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v26);
  for (i = 0; ; v10 = ++i + (v10 & v9))
  {
    v12 = v6 + 24 * (v10 & v9);
    v13 = *(unsigned __int8 *)(v12 + 1);
    v14 = *(unsigned __int16 *)(v12 + 2);
    v15 = *(_BYTE *)v12 == 1 && v13 == a2;
    if (v15 && v14 == 0 && !*(_DWORD *)(v12 + 4) && *(_QWORD *)(v12 + 8) == (_QWORD)a3)
      break;
    if (*(_BYTE *)v12)
      v18 = 0;
    else
      v18 = v13 == 0;
    v20 = v18 && v14 == 0 && *(_DWORD *)(v12 + 4) == 0;
    if (v20 && !*(_QWORD *)(v12 + 8))
      goto LABEL_31;
  }
  if (v6 + 24 * *(unsigned int *)(v6 - 4) == v12 || (v21 = *(_QWORD *)(v12 + 16)) == 0)
  {
LABEL_31:
    v21 = WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>((uint64_t)this, &v23, &v24);
    v27 = v21;
    v25[0] = v7;
    v25[1] = a3;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v5, (unsigned __int8 *)v25, &v27, (uint64_t)v26);
  }
  return v21;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Vector,WGSL::Type const*&,unsigned char &>(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t *v16;

  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)v6 = *a2;
  *(_BYTE *)(v6 + 8) = v7;
  *(_DWORD *)(v6 + 48) = 1;
  v8 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 8))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182603E0CLL);
    }
    v12 = *(_QWORD **)a1;
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if (*(_QWORD **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *(unsigned int *)(a1 + 12);
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  *v16 = v6;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  if ((_DWORD)v8 == -1)
    goto LABEL_17;
  return v15[(v8 + 1) - 1];
}

uint64_t WGSL::TypeStore::matrixType(WGSL::TypeStore *this, unsigned int a2, unsigned int a3, const WGSL::Type *a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  BOOL v20;
  BOOL v22;
  uint64_t v23;
  const WGSL::Type *v25;
  char v26;
  char v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;

  v27 = a2;
  v26 = a3;
  v25 = a4;
  v7 = (uint64_t *)((char *)this + 16);
  v8 = *((_QWORD *)this + 2);
  v9 = ((unint64_t)a2 << 8) | ((unint64_t)a3 << 16) | 2;
  v29[0] = v9;
  v29[1] = a4;
  if (!v8)
    goto LABEL_31;
  v11 = *(_DWORD *)(v8 - 8);
  v12 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v29);
  for (i = 0; ; v12 = ++i + (v12 & v11))
  {
    v14 = v8 + 24 * (v12 & v11);
    v15 = *(unsigned __int8 *)(v14 + 1);
    v16 = *(unsigned __int16 *)(v14 + 2);
    v17 = *(_BYTE *)v14 == 2 && v15 == a2;
    if (v17 && v16 == a3 && !*(_DWORD *)(v14 + 4) && *(_QWORD *)(v14 + 8) == (_QWORD)a4)
      break;
    if (*(_BYTE *)v14)
      v20 = 0;
    else
      v20 = v15 == 0;
    v22 = v20 && v16 == 0 && *(_DWORD *)(v14 + 4) == 0;
    if (v22 && !*(_QWORD *)(v14 + 8))
      goto LABEL_31;
  }
  if (v8 + 24 * *(unsigned int *)(v8 - 4) == v14 || (v23 = *(_QWORD *)(v14 + 16)) == 0)
  {
LABEL_31:
    v23 = WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>((uint64_t)this, &v25, &v27, &v26);
    v30 = v23;
    v28[0] = v9;
    v28[1] = a4;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v7, (unsigned __int8 *)v28, &v30, (uint64_t)v29);
  }
  return v23;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Matrix,WGSL::Type const*&,unsigned char &,unsigned char &>(uint64_t a1, _QWORD *a2, char *a3, char *a4)
{
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;

  v8 = operator new();
  v9 = *a3;
  v10 = *a4;
  *(_QWORD *)v8 = *a2;
  *(_BYTE *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 9) = v10;
  *(_DWORD *)(v8 + 48) = 2;
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182604090);
    }
    v15 = *(_QWORD **)a1;
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if (*(_QWORD **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *(unsigned int *)(a1 + 12);
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  else
  {
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  *v19 = v8;
  *(_DWORD *)(a1 + 12) = v11 + 1;
  if ((_DWORD)v11 == -1)
    goto LABEL_17;
  return v18[(v11 + 1) - 1];
}

uint64_t WGSL::TypeStore::textureType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v18;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  _QWORD v25[2];
  _QWORD v26[3];
  uint64_t v27;

  v24 = a2;
  v5 = (uint64_t *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  v23 = a3;
  v7 = ((unint64_t)a2 << 8) | 4;
  v26[0] = v7;
  v26[1] = a3;
  if (!v6)
    goto LABEL_31;
  v9 = *(_DWORD *)(v6 - 8);
  v10 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v26);
  for (i = 0; ; v10 = ++i + (v10 & v9))
  {
    v12 = v6 + 24 * (v10 & v9);
    v13 = *(unsigned __int8 *)(v12 + 1);
    v14 = *(unsigned __int16 *)(v12 + 2);
    v15 = *(_BYTE *)v12 == 4 && v13 == a2;
    if (v15 && v14 == 0 && !*(_DWORD *)(v12 + 4) && *(_QWORD *)(v12 + 8) == a3)
      break;
    if (*(_BYTE *)v12)
      v18 = 0;
    else
      v18 = v13 == 0;
    v20 = v18 && v14 == 0 && *(_DWORD *)(v12 + 4) == 0;
    if (v20 && !*(_QWORD *)(v12 + 8))
      goto LABEL_31;
  }
  if (v6 + 24 * *(unsigned int *)(v6 - 4) == v12 || (v21 = *(_QWORD *)(v12 + 16)) == 0)
  {
LABEL_31:
    v21 = WGSL::TypeStore::allocateType<WGSL::Types::Texture,WGSL::Type const*&,WGSL::Types::Texture::Kind &>(a1, &v23, &v24);
    v27 = v21;
    v25[0] = v7;
    v25[1] = a3;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v5, (unsigned __int8 *)v25, &v27, (uint64_t)v26);
  }
  return v21;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Texture,WGSL::Type const*&,WGSL::Types::Texture::Kind &>(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t *v16;

  v6 = operator new();
  v7 = *a3;
  *(_QWORD *)v6 = *a2;
  *(_BYTE *)(v6 + 8) = v7;
  *(_DWORD *)(v6 + 48) = 7;
  v8 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 8))
  {
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8 + 1)
      v11 = v8 + 1;
    else
      v11 = v10;
    if (v11 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x1826042F8);
    }
    v12 = *(_QWORD **)a1;
    v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
    *(_DWORD *)(a1 + 8) = v11;
    *(_QWORD *)a1 = v13;
    memcpy(v13, v12, 8 * v8);
    if (v12)
    {
      if (*(_QWORD **)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
    v8 = *(unsigned int *)(a1 + 12);
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v15 = *(_QWORD **)a1;
    v16 = (uint64_t *)(*(_QWORD *)a1 + 8 * v8);
  }
  *v16 = v6;
  *(_DWORD *)(a1 + 12) = v8 + 1;
  if ((_DWORD)v8 == -1)
    goto LABEL_17;
  return v15[(v8 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::TextureStorage,WGSL::Types::TextureStorage::Kind &,WGSL::TexelFormat &,WGSL::AccessMode &>(uint64_t a1, _BYTE *a2, char *a3, char *a4)
{
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;

  v8 = operator new();
  v9 = *a3;
  v10 = *a4;
  *(_BYTE *)v8 = *a2;
  *(_BYTE *)(v8 + 1) = v9;
  *(_BYTE *)(v8 + 2) = v10;
  *(_DWORD *)(v8 + 48) = 8;
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x18260441CLL);
    }
    v15 = *(_QWORD **)a1;
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if (*(_QWORD **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *(unsigned int *)(a1 + 12);
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  else
  {
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  *v19 = v8;
  *(_DWORD *)(a1 + 12) = v11 + 1;
  if ((_DWORD)v11 == -1)
    goto LABEL_17;
  return v18[(v11 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Function,WTF::Vector<WGSL::Type const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WGSL::Type const*&,BOOL &>(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  _QWORD *v20;
  uint64_t *v21;

  v8 = operator new();
  v9 = *a2;
  *a2 = 0;
  v10 = *a3;
  v11 = *a4;
  *(_QWORD *)v8 = v9;
  v12 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 16) = v10;
  *(_BYTE *)(v8 + 24) = v11;
  *(_DWORD *)(v8 + 48) = 6;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 8))
  {
    v14 = v13 + (v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13 + 1)
      v16 = v13 + 1;
    else
      v16 = v15;
    if (v16 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182604550);
    }
    v17 = *(_QWORD **)a1;
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *(_DWORD *)(a1 + 8) = v16;
    *(_QWORD *)a1 = v18;
    memcpy(v18, v17, 8 * v13);
    if (v17)
    {
      if (*(_QWORD **)a1 == v17)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v17, v19);
    }
    v13 = *(unsigned int *)(a1 + 12);
    v20 = *(_QWORD **)a1;
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v13);
  }
  else
  {
    v20 = *(_QWORD **)a1;
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v13);
  }
  *v21 = v8;
  *(_DWORD *)(a1 + 12) = v13 + 1;
  if ((_DWORD)v13 == -1)
    goto LABEL_17;
  return v20[(v13 + 1) - 1];
}

uint64_t WGSL::TypeStore::referenceType(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unsigned int v14;
  int v15;
  int i;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v23;
  BOOL v25;
  uint64_t v26;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  _QWORD v33[3];
  uint64_t v34;

  v31 = a2;
  v30 = a3;
  v29 = a4;
  v28 = a5;
  v8 = (uint64_t *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 0x100000000;
  if (!a5)
    v10 = 0;
  v11 = ((unint64_t)a4 << 16) | ((unint64_t)a2 << 8) | v10 | 6;
  v33[0] = v11;
  v33[1] = a3;
  if (!v9)
    goto LABEL_33;
  v13 = HIDWORD(v10);
  v14 = *(_DWORD *)(v9 - 8);
  v15 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v33);
  for (i = 0; ; v15 = ++i + (v15 & v14))
  {
    v17 = v9 + 24 * (v15 & v14);
    v18 = *(unsigned __int8 *)(v17 + 1);
    v19 = *(unsigned __int16 *)(v17 + 2);
    v20 = *(_BYTE *)v17 == 6 && v18 == a2;
    if (v20 && v19 == a4 && *(_DWORD *)(v17 + 4) == (_DWORD)v13 && *(_QWORD *)(v17 + 8) == a3)
      break;
    if (*(_BYTE *)v17)
      v23 = 0;
    else
      v23 = v18 == 0;
    v25 = v23 && v19 == 0 && *(_DWORD *)(v17 + 4) == 0;
    if (v25 && !*(_QWORD *)(v17 + 8))
      goto LABEL_33;
  }
  if (v9 + 24 * *(unsigned int *)(v9 - 4) == v17 || (v26 = *(_QWORD *)(v17 + 16)) == 0)
  {
LABEL_33:
    v26 = WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(a1, &v31, &v29, &v30, &v28);
    v34 = v26;
    v32[0] = v11;
    v32[1] = a3;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v8, (unsigned __int8 *)v32, &v34, (uint64_t)v33);
  }
  return v26;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Reference,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&,BOOL &>(uint64_t a1, _BYTE *a2, char *a3, uint64_t *a4, char *a5)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t *v22;

  v10 = operator new();
  v11 = *a3;
  v12 = *a4;
  v13 = *a5;
  *(_BYTE *)v10 = *a2;
  *(_BYTE *)(v10 + 1) = v11;
  *(_QWORD *)(v10 + 8) = v12;
  *(_BYTE *)(v10 + 16) = v13;
  *(_DWORD *)(v10 + 48) = 10;
  v14 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 8))
  {
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v14 + 1)
      v17 = v14 + 1;
    else
      v17 = v16;
    if (v17 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182604804);
    }
    v18 = *(_QWORD **)a1;
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
    *(_DWORD *)(a1 + 8) = v17;
    *(_QWORD *)a1 = v19;
    memcpy(v19, v18, 8 * v14);
    if (v18)
    {
      if (*(_QWORD **)a1 == v18)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v18, v20);
    }
    v14 = *(unsigned int *)(a1 + 12);
    v21 = *(_QWORD **)a1;
    v22 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
  }
  else
  {
    v21 = *(_QWORD **)a1;
    v22 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
  }
  *v22 = v10;
  *(_DWORD *)(a1 + 12) = v14 + 1;
  if ((_DWORD)v14 == -1)
    goto LABEL_17;
  return v21[(v14 + 1) - 1];
}

uint64_t WGSL::TypeStore::pointerType(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  int v12;
  int i;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  BOOL v20;
  BOOL v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  _QWORD v29[3];
  uint64_t v30;

  v27 = a2;
  v26 = a3;
  v25 = a4;
  v7 = (uint64_t *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = ((unint64_t)a2 << 8) | ((unint64_t)a4 << 16) | 7;
  v29[0] = v9;
  v29[1] = a3;
  if (!v8)
    goto LABEL_31;
  v11 = *(_DWORD *)(v8 - 8);
  v12 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)v29);
  for (i = 0; ; v12 = ++i + (v12 & v11))
  {
    v14 = v8 + 24 * (v12 & v11);
    v15 = *(unsigned __int8 *)(v14 + 1);
    v16 = *(unsigned __int16 *)(v14 + 2);
    v17 = *(_BYTE *)v14 == 7 && v15 == a2;
    if (v17 && v16 == a4 && !*(_DWORD *)(v14 + 4) && *(_QWORD *)(v14 + 8) == a3)
      break;
    if (*(_BYTE *)v14)
      v20 = 0;
    else
      v20 = v15 == 0;
    v22 = v20 && v16 == 0 && *(_DWORD *)(v14 + 4) == 0;
    if (v22 && !*(_QWORD *)(v14 + 8))
      goto LABEL_31;
  }
  if (v8 + 24 * *(unsigned int *)(v8 - 4) == v14 || (v23 = *(_QWORD *)(v14 + 16)) == 0)
  {
LABEL_31:
    v23 = WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(a1, &v27, &v25, &v26);
    v30 = v23;
    v28[0] = v9;
    v28[1] = a3;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v7, (unsigned __int8 *)v28, &v30, (uint64_t)v29);
  }
  return v23;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::Pointer,WGSL::AddressSpace &,WGSL::AccessMode &,WGSL::Type const*&>(uint64_t a1, _BYTE *a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  uint64_t *v19;

  v8 = operator new();
  v9 = *a3;
  v10 = *a4;
  *(_BYTE *)v8 = *a2;
  *(_BYTE *)(v8 + 1) = v9;
  *(_QWORD *)(v8 + 8) = v10;
  *(_DWORD *)(v8 + 48) = 11;
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 8))
  {
    v12 = v11 + (v11 >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 <= v11 + 1)
      v14 = v11 + 1;
    else
      v14 = v13;
    if (v14 >> 29)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x182604A88);
    }
    v15 = *(_QWORD **)a1;
    v16 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(a1 + 8) = v14;
    *(_QWORD *)a1 = v16;
    memcpy(v16, v15, 8 * v11);
    if (v15)
    {
      if (*(_QWORD **)a1 == v15)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v15, v17);
    }
    v11 = *(unsigned int *)(a1 + 12);
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  else
  {
    v18 = *(_QWORD **)a1;
    v19 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  }
  *v19 = v8;
  *(_DWORD *)(a1 + 12) = v11 + 1;
  if ((_DWORD)v11 == -1)
    goto LABEL_17;
  return v18[(v11 + 1) - 1];
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::TypeConstructor,WTF::ASCIILiteral &,std::function<WGSL::Type const* ()(WGSL::AST::ElaboratedTypeExpression &)>>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = v6;
  v22 = *a2;
  v8 = v23;
  v9 = (_QWORD *)a3[3];
  if (!v9)
  {
    v24 = 0;
    *(_OWORD *)v6 = *a2;
    *(_QWORD *)(v6 + 40) = 0;
    *(_DWORD *)(v6 + 48) = 13;
    v10 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v10 != *(_DWORD *)(a1 + 8))
      goto LABEL_25;
LABEL_11:
    v11 = v10 + (v10 >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 <= v10 + 1)
      v13 = v10 + 1;
    else
      v13 = v12;
    if (v13 >> 29)
    {
LABEL_31:
      __break(0xC471u);
      JUMPOUT(0x182604CECLL);
    }
    v14 = *(void **)a1;
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 8) = v13;
    *(_QWORD *)a1 = v15;
    memcpy(v15, v14, 8 * v10);
    if (v14)
    {
      if (*(void **)a1 == v14)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v14, v16);
    }
    v17 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v17) = v7;
    v18 = v17 + 1;
    *(_DWORD *)(a1 + 12) = v17 + 1;
    v19 = v24;
    if (v24 != v23)
      goto LABEL_26;
LABEL_23:
    v20 = 4;
    goto LABEL_28;
  }
  if (v9 != a3)
  {
    v24 = (_QWORD *)a3[3];
    a3[3] = 0;
    *(_OWORD *)v6 = v22;
    goto LABEL_7;
  }
  v24 = v23;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v23);
  v9 = v24;
  *(_OWORD *)v7 = v22;
  if (!v9)
  {
    *(_QWORD *)(v7 + 40) = 0;
    *(_DWORD *)(v7 + 48) = 13;
    v10 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v10 != *(_DWORD *)(a1 + 8))
      goto LABEL_25;
    goto LABEL_11;
  }
LABEL_7:
  if (v9 == v23)
  {
    *(_QWORD *)(v7 + 40) = v7 + 16;
    (*(void (**)(_QWORD *))(v23[0] + 24))(v23);
    *(_DWORD *)(v7 + 48) = 13;
    v10 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v10 != *(_DWORD *)(a1 + 8))
      goto LABEL_25;
    goto LABEL_11;
  }
  *(_QWORD *)(v7 + 40) = v9;
  v24 = 0;
  *(_DWORD *)(v7 + 48) = 13;
  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
    goto LABEL_11;
LABEL_25:
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v7;
  v18 = v10 + 1;
  *(_DWORD *)(a1 + 12) = v10 + 1;
  v19 = v24;
  if (v24 == v23)
    goto LABEL_23;
LABEL_26:
  if (!v19)
    goto LABEL_29;
  v20 = 5;
  v8 = v19;
LABEL_28:
  (*(void (**)(_QWORD *))(*v8 + 8 * v20))(v8);
  v18 = *(_DWORD *)(a1 + 12);
LABEL_29:
  if (!v18)
    goto LABEL_31;
  return *(_QWORD *)(*(_QWORD *)a1 + 8 * v18 - 8);
}

uint64_t WGSL::TypeStore::frexpResultType(WGSL::TypeStore *this, const WGSL::Type *a2, const WGSL::Type *a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (uint64_t *)((char *)this + 16);
  v7 = *((_QWORD *)this + 2);
  v26 = 8;
  v27 = (uint64_t)a2;
  if (!v7)
    goto LABEL_31;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)&v26);
  for (i = 0; ; v9 = i + (v9 & v8))
  {
    v11 = v7 + 24 * (v9 & v8);
    v12 = *(unsigned __int8 *)(v11 + 1);
    v13 = *(unsigned __int16 *)(v11 + 2);
    if (*(_BYTE *)v11 == 8 && v12 == 0)
      break;
LABEL_16:
    if (*(_BYTE *)v11)
      v16 = 0;
    else
      v16 = v12 == 0;
    v18 = v16 && v13 == 0 && *(_DWORD *)(v11 + 4) == 0;
    if (v18 && !*(_QWORD *)(v11 + 8))
      goto LABEL_31;
    ++i;
  }
  if (*(_WORD *)(v11 + 2))
  {
LABEL_15:
    v12 = 0;
    goto LABEL_16;
  }
  if (*(_DWORD *)(v11 + 4))
    v15 = 0;
  else
    v15 = *(_QWORD *)(v11 + 8) == (_QWORD)a2;
  if (!v15)
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (v7 + 24 * *(unsigned int *)(v7 - 4) == v11 || (v19 = *(_QWORD *)(v11 + 16)) == 0)
  {
LABEL_31:
    v20 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v20 = 2;
    v24 = v20;
    *((_QWORD *)v20 + 1) = a2;
    *((_QWORD *)v20 + 2) = a3;
    v26 = (uint64_t)"__frexp_result";
    v27 = 15;
    v19 = WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>((uint64_t)this, (uint64_t)&v26, (char *)&WGSL::Types::PrimitiveStruct::FrexpResult::kind, (unsigned int **)&v24);
    v28 = v19;
    v25[0] = 8;
    v25[1] = a2;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v6, (unsigned __int8 *)v25, &v28, (uint64_t)&v26);
    v22 = v24;
    v24 = 0;
    if (v22)
      WTF::fastFree(v22, v21);
  }
  return v19;
}

uint64_t WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>(uint64_t a1, uint64_t a2, char *a3, unsigned int **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  _DWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v36;

  v8 = operator new();
  v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v10 = 0;
    v11 = *a3;
    v12 = *a4;
    if (*a4)
      goto LABEL_6;
    goto LABEL_14;
  }
  if (v9 == 1)
  {
    v10 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    v11 = *a3;
    v12 = *a4;
    if (*a4)
      goto LABEL_6;
LABEL_14:
    v15 = 0;
    goto LABEL_17;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = v36;
  v11 = *a3;
  v12 = *a4;
  if (!*a4)
    goto LABEL_14;
LABEL_6:
  v13 = v12 + 2;
  v14 = *v12;
  v15 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v14 + 8));
  *v15 = v14;
  if (!(_DWORD)v14)
    goto LABEL_17;
  v16 = v15 + 2;
  v17 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v17 < 7)
  {
    v18 = v12 + 2;
    do
    {
LABEL_16:
      v25 = *(_QWORD *)v18;
      v18 += 2;
      *v16++ = v25;
    }
    while (v18 != &v13[2 * v14]);
    goto LABEL_17;
  }
  v18 = v12 + 2;
  if ((unint64_t)((char *)v15 - (char *)v12) < 0x20)
    goto LABEL_16;
  v19 = 0;
  v20 = v17 + 1;
  v21 = 2 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
  v16 = (_QWORD *)((char *)v16 + v21 * 4);
  v18 = &v13[v21];
  v22 = v20 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = &v15[v19];
    v24 = *(_OWORD *)&v12[v19 + 6];
    *(_OWORD *)(v23 + 2) = *(_OWORD *)&v12[v19 + 2];
    *(_OWORD *)(v23 + 6) = v24;
    v19 += 8;
    v22 -= 4;
  }
  while (v22);
  if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_16;
LABEL_17:
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v15;
  *(_DWORD *)(v8 + 48) = 5;
  v26 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v26 == *(_DWORD *)(a1 + 8))
  {
    v27 = v26 + (v26 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v26 + 1)
      v29 = v26 + 1;
    else
      v29 = v28;
    if (v29 >> 29)
    {
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1826050A4);
    }
    v30 = *(_QWORD **)a1;
    v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
    *(_DWORD *)(a1 + 8) = v29;
    *(_QWORD *)a1 = v31;
    memcpy(v31, v30, 8 * v26);
    if (v30)
    {
      if (*(_QWORD **)a1 == v30)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v30, v32);
    }
    v26 = *(unsigned int *)(a1 + 12);
    v33 = *(_QWORD **)a1;
    v34 = (uint64_t *)(*(_QWORD *)a1 + 8 * v26);
  }
  else
  {
    v33 = *(_QWORD **)a1;
    v34 = (uint64_t *)(*(_QWORD *)a1 + 8 * v26);
  }
  *v34 = v8;
  *(_DWORD *)(a1 + 12) = v26 + 1;
  if ((_DWORD)v26 == -1)
    goto LABEL_33;
  return v33[(v26 + 1) - 1];
}

uint64_t WGSL::TypeStore::modfResultType(WGSL::TypeStore *this, const WGSL::Type *a2, const WGSL::Type *a3)
{
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  WTF *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = (uint64_t *)((char *)this + 16);
  v7 = *((_QWORD *)this + 2);
  v26 = 264;
  v27 = (uint64_t)a2;
  if (!v7)
    goto LABEL_31;
  v8 = *(_DWORD *)(v7 - 8);
  v9 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)&v26);
  for (i = 0; ; v9 = i + (v9 & v8))
  {
    v11 = v7 + 24 * (v9 & v8);
    v12 = *(unsigned __int8 *)(v11 + 1);
    v13 = *(unsigned __int16 *)(v11 + 2);
    if (*(_BYTE *)v11 == 8 && v12 == 1)
      break;
LABEL_16:
    if (*(_BYTE *)v11)
      v16 = 0;
    else
      v16 = v12 == 0;
    v18 = v16 && v13 == 0 && *(_DWORD *)(v11 + 4) == 0;
    if (v18 && !*(_QWORD *)(v11 + 8))
      goto LABEL_31;
    ++i;
  }
  if (*(_WORD *)(v11 + 2))
  {
LABEL_15:
    v12 = 1;
    goto LABEL_16;
  }
  if (*(_DWORD *)(v11 + 4))
    v15 = 0;
  else
    v15 = *(_QWORD *)(v11 + 8) == (_QWORD)a2;
  if (!v15)
  {
    v13 = 0;
    goto LABEL_15;
  }
  if (v7 + 24 * *(unsigned int *)(v7 - 4) == v11 || (v19 = *(_QWORD *)(v11 + 16)) == 0)
  {
LABEL_31:
    v20 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v20 = 2;
    v24 = v20;
    *((_QWORD *)v20 + 1) = a2;
    *((_QWORD *)v20 + 2) = a3;
    v26 = (uint64_t)"__modf_result";
    v27 = 14;
    v19 = WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>((uint64_t)this, (uint64_t)&v26, (char *)&WGSL::Types::PrimitiveStruct::ModfResult::kind, (unsigned int **)&v24);
    v28 = v19;
    v25[0] = 264;
    v25[1] = a2;
    WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>(v6, (unsigned __int8 *)v25, &v28, (uint64_t)&v26);
    v22 = v24;
    v24 = 0;
    if (v22)
      WTF::fastFree(v22, v21);
  }
  return v19;
}

uint64_t WGSL::TypeStore::atomicCompareExchangeResultType(WGSL::TypeStore *this, const WGSL::Type *a2)
{
  uint64_t v4;
  WTF *v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  const char *v10;
  uint64_t v11;
  WTF *v12;

  if (*((const WGSL::Type **)this + 8) == a2)
  {
    v4 = *((_QWORD *)this + 25);
    if (!v4)
    {
      v6 = (WTF *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v6 = 2;
      *((_QWORD *)v6 + 1) = a2;
      *((_QWORD *)v6 + 2) = *((_QWORD *)this + 7);
      v10 = "__atomic_compare_exchange_result";
      v11 = 33;
      v12 = v6;
      v4 = WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>((uint64_t)this, (uint64_t)&v10, WGSL::Types::PrimitiveStruct::AtomicCompareExchangeResult::kind, (unsigned int **)&v12);
      *((_QWORD *)this + 25) = v4;
      v8 = v12;
      v12 = 0;
      if (v8)
        goto LABEL_8;
    }
    return v4;
  }
  v4 = *((_QWORD *)this + 26);
  if (v4)
    return v4;
  v9 = (WTF *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v9 = 2;
  *((_QWORD *)v9 + 1) = a2;
  *((_QWORD *)v9 + 2) = *((_QWORD *)this + 7);
  v10 = "__atomic_compare_exchange_result";
  v11 = 33;
  v12 = v9;
  v4 = WGSL::TypeStore::allocateType<WGSL::Types::PrimitiveStruct,WTF::ASCIILiteral,WGSL::Types::PrimitiveStruct::Kind const&,WTF::FixedVector<WGSL::Type const*> &>((uint64_t)this, (uint64_t)&v10, WGSL::Types::PrimitiveStruct::AtomicCompareExchangeResult::kind, (unsigned int **)&v12);
  *((_QWORD *)this + 26) = v4;
  v8 = v12;
  v12 = 0;
  if (!v8)
    return v4;
LABEL_8:
  WTF::fastFree(v8, v7);
  return v4;
}

unsigned __int8 *WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>,std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  int i;
  int v7;
  unsigned __int8 *result;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  BOOL v15;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(a2);
  for (i = 0; ; v5 = i + v7)
  {
    v7 = v5 & v4;
    result = (unsigned __int8 *)(v2 + 24 * (v5 & v4));
    v9 = result[1];
    v10 = *((unsigned __int16 *)result + 1);
    if (*result == *a2 && v9 == a2[1])
    {
      v9 = a2[1];
      if (v10 == *((unsigned __int16 *)a2 + 1))
      {
        v12 = *((_DWORD *)result + 1) == *((_DWORD *)a2 + 1) && *((_QWORD *)result + 1) == *((_QWORD *)a2 + 1);
        v10 = *((unsigned __int16 *)a2 + 1);
        v9 = a2[1];
        if (v12)
          break;
      }
    }
    if (*result)
      v13 = 0;
    else
      v13 = v9 == 0;
    v15 = v13 && v10 == 0 && *((_DWORD *)result + 1) == 0;
    if (v15 && !*((_QWORD *)result + 1))
      return (unsigned __int8 *)(v2 + 24 * *(unsigned int *)(v2 - 4));
    ++i;
  }
  return result;
}

unint64_t WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = ~(*a1 << 15) + *a1;
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3 = ~(a1[1] << 15) + a1[1];
  v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  v5 = ~(*((unsigned __int16 *)a1 + 1) << 15) + *((unsigned __int16 *)a1 + 1);
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7 = *((_DWORD *)a1 + 1) + ~(*((_DWORD *)a1 + 1) << 15);
  v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
  v9 = (v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16);
  v10 = *((_QWORD *)a1 + 1) + ~(*((_QWORD *)a1 + 1) << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                              + 95187966
                                                              * ((0xD7862706ELL
                                                                              * (unint64_t)(277951225
                                                                                                 * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                                                                                 + 95187966
                                                                                                 * ((0xD7862706ELL * (unint64_t)(277951225 * v9 + 95187966 * (((v12 + ~(v12 << 27)) >> 31) ^ ((_DWORD)v12 + ~((_DWORD)v12 << 27))))) >> 4))) >> 4))) >> 4))) >> 4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ArrayKey::encode(void)::{lambda(unsigned int)#1},WGSL::ArrayKey::encode(void)::{lambda(std::monostate)#1},WGSL::ArrayKey::encode(void)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ArrayKey::encode(void)::{lambda(unsigned int)#1},WGSL::ArrayKey::encode(void)::{lambda(std::monostate)#1},WGSL::ArrayKey::encode(void)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WGSL::ArrayKey::encode(void)::{lambda(unsigned int)#1},WGSL::ArrayKey::encode(void)::{lambda(std::monostate)#1},WGSL::ArrayKey::encode(void)::{lambda(WGSL::AST::Expression *)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,unsigned int,WGSL::AST::Expression *> const&>()
{
  __break(0xC471u);
}

uint64_t WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::add<WGSL::Type const*&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  int i;
  unsigned int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>(a2);
  v11 = 0;
  v12 = *a2;
  for (i = 1; ; ++i)
  {
    v14 = v10 & v9;
    v15 = (unsigned __int8 *)(v8 + 24 * (v10 & v9));
    v16 = *v15;
    v17 = v15[1];
    v18 = *((unsigned __int16 *)v15 + 1);
    result = *((unsigned int *)v15 + 1);
    v20 = !*v15 && v17 == 0;
    v21 = v20 && v18 == 0;
    v22 = v21 && (_DWORD)result == 0;
    if (v22 && !*((_QWORD *)v15 + 1))
      break;
    if (v16 == v12
      && v17 == a2[1]
      && v18 == *((unsigned __int16 *)a2 + 1)
      && (_DWORD)result == *((_DWORD *)a2 + 1)
      && *((_QWORD *)v15 + 1) == *((_QWORD *)a2 + 1))
    {
      v26 = 0;
      v27 = v8 + 24 * *(unsigned int *)(v8 - 4);
      goto LABEL_49;
    }
    if (v16 == 255)
      v11 = (unsigned __int8 *)(v8 + 24 * v14);
    v10 = i + v14;
  }
  if (v11)
  {
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    --*(_DWORD *)(*a1 - 16);
    LOBYTE(v12) = *a2;
    v15 = v11;
  }
  *v15 = v12;
  v15[1] = a2[1];
  *((_WORD *)v15 + 1) = *((_WORD *)a2 + 1);
  *((_DWORD *)v15 + 1) = *((_DWORD *)a2 + 1);
  v28 = *a3;
  *((_QWORD *)v15 + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)v15 + 2) = v28;
  if (*a1)
  {
    ++*(_DWORD *)(*a1 - 12);
    v29 = *a1;
    if (*a1)
      goto LABEL_38;
  }
  else
  {
    MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
    v29 = *a1;
    if (*a1)
    {
LABEL_38:
      v30 = (*(_DWORD *)(v29 - 16) + *(_DWORD *)(v29 - 12));
      v31 = *(unsigned int *)(v29 - 4);
      if (v31 <= 0x400)
        goto LABEL_39;
LABEL_45:
      if (v31 > 2 * v30)
        goto LABEL_48;
      goto LABEL_46;
    }
  }
  v30 = *(unsigned int *)(v29 - 16);
  v31 = *(unsigned int *)(v29 - 4);
  if (v31 > 0x400)
    goto LABEL_45;
LABEL_39:
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, 8u, v15);
      v15 = (unsigned __int8 *)result;
      v29 = *a1;
      if (!*a1)
      {
LABEL_42:
        LODWORD(v31) = 0;
        goto LABEL_48;
      }
LABEL_47:
      LODWORD(v31) = *(_DWORD *)(v29 - 4);
      goto LABEL_48;
    }
LABEL_46:
    result = WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(a1, (_DWORD)v31 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v31)), v15);
    v15 = (unsigned __int8 *)result;
    v29 = *a1;
    if (!*a1)
      goto LABEL_42;
    goto LABEL_47;
  }
LABEL_48:
  v27 = v29 + 24 * v31;
  v26 = 1;
LABEL_49:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*>>,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashMap<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>,WGSL::Type const*,WTF::DefaultHash<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>,WTF::HashTraits<WGSL::Type const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  __int128 v26;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned __int8 *)(v6 + 24 * v11);
      if (*v13 != 255)
      {
        v14 = !*v13 && v13[1] == 0;
        v15 = v14 && *((_WORD *)v13 + 1) == 0;
        v16 = v15 && *((_DWORD *)v13 + 1) == 0;
        if (!v16 || *((_QWORD *)v13 + 1))
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = WTF::TupleHash<unsigned char,unsigned char,unsigned short,unsigned int,unsigned long>::hash<0ul>((unsigned __int8 *)(v6 + 24 * v11));
          for (i = 0; ; v19 = i + v21)
          {
            v21 = v19 & v18;
            v22 = v17 + 24 * (v19 & v18);
            v23 = !*(_BYTE *)v22 && *(_BYTE *)(v22 + 1) == 0;
            v24 = v23 && *(_WORD *)(v22 + 2) == 0;
            v25 = v24 && *(_DWORD *)(v22 + 4) == 0;
            if (v25 && !*(_QWORD *)(v22 + 8))
              break;
            ++i;
          }
          v26 = *(_OWORD *)v13;
          *(_QWORD *)(v22 + 16) = *((_QWORD *)v13 + 2);
          *(_OWORD *)v22 = v26;
          if (v13 == a3)
            v12 = v17 + 24 * v21;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_BYTE *WGSL::VisibilityValidator::visit(WGSL::VisibilityValidator *this, Function *a2)
{
  _BYTE *result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  WGSL::AST::Function *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  result = WGSL::AST::Visitor::visit(this, a2);
  v5 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v5 + 392))
  {
    __break(1u);
    return result;
  }
  v6 = *(_QWORD *)(v5 + 384);
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = v6 + 24 * v11;
  v13 = *(WGSL::AST::Function **)v12;
  if (*(Function **)v12 == a2)
  {
LABEL_6:
    v15 = *(unsigned int *)(v12 + 20);
    if (!(_DWORD)v15)
      return result;
    goto LABEL_9;
  }
  v14 = 1;
  while (v13)
  {
    v11 = (v11 + v14) & v7;
    v12 = v6 + 24 * v11;
    v13 = *(WGSL::AST::Function **)v12;
    ++v14;
    if (*(Function **)v12 == a2)
      goto LABEL_6;
  }
  v12 = v6 + 24 * *(unsigned int *)(v6 - 4);
  v15 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v15)
  {
LABEL_9:
    v16 = *(uint64_t **)(v12 + 8);
    v17 = 24 * v15;
    do
    {
      v18 = *v16;
      v16 += 3;
      result = (_BYTE *)(*(uint64_t (**)(WGSL::VisibilityValidator *, uint64_t))(*(_QWORD *)this + 48))(this, v18);
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

_BYTE *WGSL::VisibilityValidator::visit(_BYTE *this, WGSL::AST::CallExpression *a2)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  BOOL v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  __int128 v21;
  const char *v22;
  int v23;
  const char *v24;
  int v25;

  v3 = this;
  if (!this[32])
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)this + 208))(this, *((_QWORD *)a2 + 8));
  v4 = *((unsigned int *)a2 + 21);
  if ((_DWORD)v4 && !v3[32])
  {
    v16 = (_QWORD *)*((_QWORD *)a2 + 9);
    v17 = 8 * v4 - 8;
LABEL_22:
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v3 + 208))(v3, *v16);
    while (v17)
    {
      ++v16;
      v17 -= 8;
      if (!v3[32])
        goto LABEL_22;
    }
  }
  v5 = v3[64];
  if ((*((_BYTE *)a2 + 89) & v5) == 0)
  {
    v6 = "compute";
    if (v5 == 2)
    {
      v6 = "fragment";
      v7 = 8;
    }
    else
    {
      v7 = 7;
    }
    v8 = v5 == 1;
    if (v5 == 1)
      v9 = "vertex";
    else
      v9 = v6;
    if (v8)
      v7 = 6;
    v20 = "built-in cannot be used by ";
    LODWORD(v21) = 27;
    v24 = v9;
    v25 = v7;
    v22 = " pipeline stage";
    v23 = 15;
    this = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v20, (uint64_t)&v24, (uint64_t)&v22, &v19);
    v10 = v19;
    if (!v19)
    {
      __break(0xC471u);
      return this;
    }
    v19 = 0;
    v20 = v10;
    v21 = *(_OWORD *)((char *)a2 + 8);
    v11 = *((unsigned int *)v3 + 15);
    if ((_DWORD)v11 == *((_DWORD *)v3 + 14))
    {
      v12 = WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v3 + 48), v11 + 1, (unint64_t)&v20);
      v13 = *((_QWORD *)v3 + 6) + 24 * *((unsigned int *)v3 + 15);
      v14 = *(_QWORD *)v12;
      *(_QWORD *)v12 = 0;
      *(_QWORD *)v13 = v14;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
      v15 = v20;
      ++*((_DWORD *)v3 + 15);
      v20 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::destroy();
          this = v19;
          v19 = 0;
          if (!this)
            return this;
        }
        else
        {
          *(_DWORD *)v15 -= 2;
          this = v19;
          v19 = 0;
          if (!this)
            return this;
        }
        goto LABEL_28;
      }
    }
    else
    {
      v18 = *((_QWORD *)v3 + 6) + 24 * v11;
      *(_QWORD *)v18 = v10;
      *(_OWORD *)(v18 + 8) = v21;
      ++*((_DWORD *)v3 + 15);
      v20 = 0;
    }
    this = v19;
    v19 = 0;
    if (!this)
      return this;
LABEL_28:
    if (*(_DWORD *)this == 2)
      return (_BYTE *)WTF::StringImpl::destroy();
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WGSL::validateVisibility@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  Function **v6;
  void *v7;
  int v8;
  int v9;
  void (**v10)(WGSL::AST::Visitor *__hidden);
  uint64_t v11;
  char v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  char v16;

  LOBYTE(v11) = 0;
  v12 = 0;
  v10 = &off_1E0FD8928;
  v14 = 0;
  v15 = 0;
  v13 = this;
  if (*(_BYTE *)(this + 392))
  {
    v4 = *(unsigned int *)(this + 372);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = (Function **)(*(_QWORD *)(this + 360) + 8);
      do
      {
        v16 = *(_BYTE *)v6;
        ((void (*)(WGSL::VisibilityValidator *, Function *))v10[6])((WGSL::VisibilityValidator *)&v10, *(v6 - 1));
        v6 += 3;
        v5 -= 24;
      }
      while (v5);
      v8 = HIDWORD(v15);
      this = (uint64_t)v14;
      if (HIDWORD(v15))
      {
        v9 = v15;
        v14 = 0;
        v15 = 0;
        *(_QWORD *)a2 = this;
        *(_DWORD *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 12) = v8;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 32) = 0;
        v10 = &off_1E0FD8928;
        if (this)
        {
          v14 = 0;
          LODWORD(v15) = 0;
          this = WTF::fastFree((WTF *)this, v7);
        }
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
    }
    v10 = &off_1E0FD25C8;
    if (v12)
    {
      this = v11;
      v11 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy();
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return this;
}

void WGSL::VisibilityValidator::~VisibilityValidator(WGSL::VisibilityValidator *this, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E0FD8928;
  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 6);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2)
        WTF::StringImpl::destroy();
      else
        *v8 -= 2;
    }
  }
}

{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF *v7;
  _DWORD *v8;

  *(_QWORD *)this = &off_1E0FD8928;
  v3 = *((unsigned int *)this + 15);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)*((_QWORD *)this + 6);
    v5 = 24 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WTF::StringImpl::destroy();
        else
          *v6 -= 2;
      }
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v7, a2);
  }
  *(_QWORD *)this = &off_1E0FD25C8;
  if (*((_BYTE *)this + 32))
  {
    v8 = (_DWORD *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      if (*v8 == 2)
        WTF::StringImpl::destroy();
      else
        *v8 -= 2;
    }
  }
  JUMPOUT(0x186DAB2A8);
}

uint64_t WGSL::staticCheck@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WGSL::ShaderModule *v22;
  void *v23;
  void *v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  void *v36;
  WTF *v37;
  void *v38;
  void *v39;
  void *v40;
  WGSL::ShaderModule *v41;
  void *v42;
  WGSL::ShaderModule *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  _QWORD v49[2];
  uint64_t v50[4];
  char v51;
  uint64_t v52[4];
  char v53;
  uint64_t v54[4];
  char v55;
  uint64_t v56[4];
  char v57;
  uint64_t v58[4];
  char v59;
  uint64_t v60[4];
  char v61;

  v6 = WTF::fastMalloc((WTF *)0x1A8);
  v7 = v6;
  v8 = *a1;
  if (*a1)
    *v8 += 2;
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)a2;
  *(_QWORD *)(v6 + 56) = 0;
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    goto LABEL_30;
  v10 = *(unsigned int *)(v9 - 12);
  if (!(_DWORD)v10)
    goto LABEL_30;
  v11 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = (v12 | HIWORD(v12)) + 1;
  if (v13 > 0x400)
  {
    if (v13 > 2 * v10)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (3 * v13 <= 4 * v10)
  {
LABEL_9:
    LODWORD(v13) = 2 * v13;
    if (v13 <= 0x400)
      goto LABEL_10;
LABEL_12:
    if ((double)v13 * 0.416666667 > (double)v10)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_10:
  if ((double)v13 * 0.604166667 <= (double)v10)
LABEL_13:
    LODWORD(v13) = 2 * v13;
LABEL_14:
  if (v13 <= 8)
    v14 = 8;
  else
    v14 = v13;
  v15 = WTF::fastZeroedMalloc((WTF *)(8 * v14 + 16));
  *(_QWORD *)(v7 + 56) = v15 + 16;
  *(_DWORD *)(v15 + 12) = v14;
  *(_DWORD *)(*(_QWORD *)(v7 + 56) - 8) = v14 - 1;
  *(_DWORD *)(*(_QWORD *)(v7 + 56) - 12) = v10;
  *(_DWORD *)(*(_QWORD *)(v7 + 56) - 16) = 0;
  v16 = *(WTF::StringImpl ***)(a2 + 16);
  if (!v16)
  {
    v19 = 0;
    v18 = 0;
LABEL_25:
    if (v16)
      goto LABEL_26;
    v21 = 0;
    if (!v19)
      goto LABEL_30;
    while (1)
    {
LABEL_37:
      v27 = *(_QWORD *)(v7 + 56);
      if (v27)
      {
        v28 = *(_DWORD *)(v27 - 8);
        v29 = *v19;
        v30 = *((_DWORD *)*v19 + 4);
        if (v30 >= 0x100)
          goto LABEL_39;
      }
      else
      {
        v28 = 0;
        v29 = *v19;
        v30 = *((_DWORD *)*v19 + 4);
        if (v30 >= 0x100)
        {
LABEL_39:
          v31 = v30 >> 8;
          goto LABEL_42;
        }
      }
      v31 = WTF::StringImpl::hashSlowCase(v29);
LABEL_42:
      v32 = 0;
      do
      {
        v33 = v31 & v28;
        v31 = ++v32 + v33;
      }
      while (*(_QWORD *)(v27 + 8 * v33));
      v34 = *v19;
      if (*v19)
        *(_DWORD *)v34 += 2;
      *(_QWORD *)(v27 + 8 * v33) = v34;
      v35 = v19 + 1;
      v19 = v18;
      if (v35 != v18)
      {
        v19 = v35;
        while ((unint64_t)*v19 + 1 <= 1)
        {
          if (++v19 == v18)
          {
            v19 = v18;
            break;
          }
        }
      }
      if (v19 == v21)
        goto LABEL_30;
    }
  }
  v17 = *((unsigned int *)v16 - 1);
  v18 = &v16[v17];
  if (*((_DWORD *)v16 - 3))
  {
    v19 = v16;
    if ((_DWORD)v17)
    {
      v20 = 8 * v17;
      v19 = v16;
      do
      {
        if ((unint64_t)*v19 + 1 > 1)
          goto LABEL_25;
        ++v19;
        v20 -= 8;
      }
      while (v20);
      v19 = v18;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  v19 = &v16[v17];
  v18 = v19;
LABEL_26:
  v21 = &v16[*((unsigned int *)v16 - 1)];
  if (v21 != v19)
    goto LABEL_37;
LABEL_30:
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  WGSL::TypeStore::TypeStore((WGSL::TypeStore *)(v7 + 96));
  *(_BYTE *)(v7 + 392) = 0;
  *(_OWORD *)(v7 + 312) = 0u;
  *(_OWORD *)(v7 + 328) = 0u;
  *(_OWORD *)(v7 + 344) = 0u;
  *(_BYTE *)(v7 + 360) = 0;
  *(_QWORD *)(v7 + 408) = 0;
  *(_QWORD *)(v7 + 416) = 0;
  *(_QWORD *)(v7 + 400) = 0;
  if (*(_QWORD *)v7 && (*(_BYTE *)(*(_QWORD *)v7 + 16) & 4) == 0)
  {
    WGSL::parse<WGSL::Lexer<char16_t>>((uint64_t *)v7, (uint64_t)v60);
    if (!v61)
      goto LABEL_33;
LABEL_52:
    std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v60);
    *(_DWORD *)(a3 + 32) = 1;
    std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v36);
    goto LABEL_53;
  }
  WGSL::parse<WGSL::Lexer<unsigned char>>((uint64_t *)v7, (uint64_t)v60);
  if (v61)
    goto LABEL_52;
LABEL_33:
  WGSL::reorderGlobals((WGSL *)v7, v22, (uint64_t)v58);
  if (v59)
  {
    std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v58);
    *(_DWORD *)(a3 + 32) = 1;
    std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v23);
    result = std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v24);
    if (!v7)
      return result;
LABEL_53:
    WGSL::ShaderModule::~ShaderModule((WGSL::ShaderModule *)v7, v26);
    return WTF::fastFree(v37, v38);
  }
  WGSL::typeCheck((WGSL *)v7, (uint64_t)v56);
  if (v57)
  {
    std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v56);
    *(_DWORD *)(a3 + 32) = 1;
  }
  else
  {
    WGSL::validateAttributes(v7, v39, (uint64_t)v54);
    if (v55)
    {
      std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v54);
      *(_DWORD *)(a3 + 32) = 1;
    }
    else
    {
      WGSL::buildCallGraph((WGSL *)v7, v41);
      WGSL::validateIO((WGSL *)v7, v43, (uint64_t)v52);
      if (v53)
      {
        std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v52);
        *(_DWORD *)(a3 + 32) = 1;
      }
      else
      {
        WGSL::validateVisibility(v7, (uint64_t)v50);
        if (v51)
        {
          std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(a3, v50);
          *(_DWORD *)(a3 + 32) = 1;
        }
        else
        {
          v49[0] = 0;
          *(_QWORD *)a3 = 0;
          v49[1] = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 16) = v7;
          *(_DWORD *)(a3 + 32) = 0;
          WTF::Vector<WGSL::CompilationMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v45);
          v7 = 0;
        }
        std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50, v46);
      }
      std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52, v44);
    }
    std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v42);
  }
  std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v56, v40);
  std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v58, v47);
  result = std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v60, v48);
  if (v7)
    goto LABEL_53;
  return result;
}

WTF *WGSL::prepare@<X0>(WGSL *this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X8>)
{
  WGSL::ShaderModule *v7;
  void *v8;
  WTF *result;
  WGSL::ShaderModule *v10;
  unint64_t v11;
  uint64_t (***v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  WTF **v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD **v21;
  _DWORD *v22;
  _DWORD **v23;
  const WTF::String *v24;
  _QWORD v25[4];
  WTF *v26;
  uint64_t v27;
  _BYTE v28[8];
  WGSL::ShaderModule *v29;
  uint64_t v30;
  WGSL::ShaderModule *v31;

  v23 = 0;
  v24 = a3;
  WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits>::add<WGSL::PipelineLayout *&>((uint64_t *)&v23, a2, (const WTF::StringImpl *)&v24, (uint64_t)v28);
  v28[0] = 0;
  v29 = this;
  v30 = WGSL::AST::Builder::saveCurrentState((WGSL *)((char *)this + 312));
  v31 = v7;
  v26 = 0;
  v27 = 0;
  v25[0] = &v26;
  v25[1] = this;
  v25[2] = &v23;
  v25[3] = v28;
  WGSL::prepareImpl(WGSL::ShaderModule &,WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits> const&)::{lambda(void)#1}::operator()((uint64_t)v25, v7, a4);
  result = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    result = (WTF *)WTF::fastFree(result, v8);
  }
  if (!v28[0])
  {
    result = WGSL::ShaderModule::revertReplacements(v29, v8);
    v10 = v29;
    v11 = HIDWORD(v31);
    if (HIDWORD(v31) < *((_DWORD *)v29 + 89))
    {
      do
      {
        v12 = *(uint64_t (****)(_QWORD))(*((_QWORD *)v10 + 43) + 8 * v11);
        result = (WTF *)(**v12)(v12);
        ++v11;
      }
      while (v11 < *((unsigned int *)v10 + 89));
      LODWORD(v11) = HIDWORD(v31);
    }
    *((_DWORD *)v10 + 89) = v11;
    *((_QWORD *)v10 + 39) = v30;
    v13 = v31;
    v14 = *((unsigned int *)v10 + 85);
    if ((_DWORD)v14 != (_DWORD)v31)
    {
      v15 = (WTF **)(*((_QWORD *)v10 + 41) + 8 * v31);
      v16 = 8 * v14 - 8 * v31;
      do
      {
        v17 = *v15++;
        result = (WTF *)WTF::fastFree(v17, v8);
        v16 -= 8;
      }
      while (v16);
    }
    *((_DWORD *)v10 + 85) = v13;
    if ((_DWORD)v13)
      v18 = *(_QWORD *)(*((_QWORD *)v10 + 41) + 8 * v13 - 8) + 0x4000;
    else
      v18 = 0;
    *((_QWORD *)v10 + 40) = v18;
  }
  v19 = (uint64_t)v23;
  if (v23)
  {
    v20 = *((unsigned int *)v23 - 1);
    if ((_DWORD)v20)
    {
      v21 = v23;
      do
      {
        v22 = *v21;
        if (*v21 != (_DWORD *)-1)
        {
          *v21 = 0;
          if (v22)
          {
            if (*v22 == 2)
              WTF::StringImpl::destroy();
            else
              *v22 -= 2;
          }
        }
        v21 += 2;
        --v20;
      }
      while (v20);
    }
    return (WTF *)WTF::fastFree((WTF *)(v19 - 16), v8);
  }
  return result;
}

WTF *WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits>::add<WGSL::PipelineLayout *&>@<X0>(uint64_t *a1@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  int i;
  unsigned int v15;
  WTF *v16;
  WTF *result;
  uint64_t v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v8 = *a1;
  if (!*a1)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, 0);
    v8 = *a1;
    if (!*a1)
    {
      v9 = 0;
      v10 = *a2;
      v11 = *((_DWORD *)*a2 + 4);
      if (v11 >= 0x100)
        goto LABEL_4;
LABEL_6:
      v12 = WTF::StringImpl::hashSlowCase(v10);
      goto LABEL_7;
    }
  }
  v9 = *(_DWORD *)(v8 - 8);
  v10 = *a2;
  v11 = *((_DWORD *)*a2 + 4);
  if (v11 < 0x100)
    goto LABEL_6;
LABEL_4:
  v12 = v11 >> 8;
LABEL_7:
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = v12 & v9;
    v16 = (WTF *)(v8 + 16 * (v12 & v9));
    result = *(WTF **)v16;
    if (*(_QWORD *)v16 == -1)
    {
      v13 = (WTF *)(v8 + 16 * v15);
      goto LABEL_9;
    }
    if (!result)
    {
      if (v13)
      {
        result = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v16 = v13;
      }
      v20 = *a2;
      if (*a2)
        *(_DWORD *)v20 += 2;
      *(_QWORD *)v16 = v20;
      *((_QWORD *)v16 + 1) = *(_QWORD *)a3;
      if (*a1)
      {
        ++*(_DWORD *)(*a1 - 12);
        v21 = *a1;
        if (*a1)
          goto LABEL_21;
      }
      else
      {
        MEMORY[0xFFFFFFFFFFFFFFF4] = 1;
        v21 = *a1;
        if (*a1)
        {
LABEL_21:
          v22 = (*(_DWORD *)(v21 - 16) + *(_DWORD *)(v21 - 12));
          v23 = *(unsigned int *)(v21 - 4);
          if (v23 <= 0x400)
            goto LABEL_22;
          goto LABEL_30;
        }
      }
      v22 = *(unsigned int *)(v21 - 16);
      v23 = *(unsigned int *)(v21 - 4);
      if (v23 <= 0x400)
      {
LABEL_22:
        if (3 * v23 > 4 * v22)
        {
LABEL_33:
          v25 = v21 + 16 * v23;
          v24 = 1;
          goto LABEL_34;
        }
        if (!(_DWORD)v23)
        {
          result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, 8u, (WTF::StringImpl **)v16);
          v16 = result;
          v21 = *a1;
          if (!*a1)
          {
LABEL_25:
            v23 = 0;
            goto LABEL_33;
          }
LABEL_32:
          v23 = *(unsigned int *)(v21 - 4);
          goto LABEL_33;
        }
LABEL_31:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WGSL::AST::Variable *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WGSL::AST::Variable *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::AST::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, (_DWORD)v23 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v23)), (WTF::StringImpl **)v16);
        v16 = result;
        v21 = *a1;
        if (!*a1)
          goto LABEL_25;
        goto LABEL_32;
      }
LABEL_30:
      if (v23 > 2 * v22)
        goto LABEL_33;
      goto LABEL_31;
    }
    result = (WTF *)WTF::equal(result, *a2, a3);
    if ((_DWORD)result)
      break;
LABEL_9:
    v12 = i + v15;
  }
  v18 = *a1;
  if (*a1)
    v19 = *(unsigned int *)(v18 - 4);
  else
    v19 = 0;
  v24 = 0;
  v25 = v18 + 16 * v19;
LABEL_34:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v25;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

uint64_t WGSL::evaluate@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  int v8;
  uint64_t v9;
  const WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  int v16;
  int i;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE v27[16];
  unsigned int v28;
  _DWORD v29[4];
  unsigned int v30;
  unsigned __int8 v31;
  uint64_t v32;

  v3 = result;
  v5 = result + 32;
  LOBYTE(v29[0]) = 0;
  v31 = 0;
  if (!*(_BYTE *)(result + 56))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    if ((_DWORD)result != 22)
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 24) = 0;
      return result;
    }
    v12 = *a2;
    if (v12)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = *(WTF::StringImpl **)(v3 + 88);
      v15 = *((_DWORD *)v14 + 4);
      if (v15 < 0x100)
        v16 = WTF::StringImpl::hashSlowCase(v14);
      else
        v16 = v15 >> 8;
      for (i = 0; ; v16 = i + v18)
      {
        v18 = v16 & v13;
        v19 = *(WTF **)(v12 + 32 * v18);
        if (v19 != (WTF *)-1)
        {
          if (!v19)
            goto LABEL_20;
          result = WTF::equal(v19, *(const WTF::StringImpl **)(v3 + 88), v11);
          if ((result & 1) != 0)
            break;
        }
        ++i;
      }
      v20 = v12 + 32 * v18;
      LOBYTE(v29[0]) = 0;
      v21 = -1;
      v30 = -1;
      v22 = *(unsigned int *)(v20 + 24);
      if ((_DWORD)v22 == -1)
      {
        v27[0] = 0;
        v28 = -1;
        if (*(_BYTE *)(v3 + 56))
        {
LABEL_22:
          v24 = *(unsigned int *)(v3 + 48);
          if ((_DWORD)v24 == -1)
          {
            if (v21 == -1)
              goto LABEL_31;
          }
          else if (v21 == -1)
          {
            result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E0FD8BD8[v24])(&v32, v5);
            *(_DWORD *)(v3 + 48) = -1;
            v25 = v28;
            if (v28 == -1)
              goto LABEL_31;
LABEL_30:
            result = ((uint64_t (*)(uint64_t *, _BYTE *))off_1E0FD8BD8[v25])(&v32, v27);
            goto LABEL_31;
          }
          v32 = v5;
          result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E0FD8C30[v21])(&v32, v5, v27);
          v25 = v28;
          if (v28 == -1)
            goto LABEL_31;
          goto LABEL_30;
        }
        *(_BYTE *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = -1;
        *(_BYTE *)(v3 + 56) = 1;
        v25 = v28;
        if (v28 != -1)
          goto LABEL_30;
LABEL_31:
        v28 = -1;
        *(_BYTE *)a3 = 0;
        *(_DWORD *)(a3 + 16) = -1;
        v26 = v30;
        if (v30 != -1)
        {
          result = ((uint64_t (*)(uint64_t *, uint64_t, _DWORD *))off_1E0FD8CE0[v30])(&v32, a3, v29);
          *(_DWORD *)(a3 + 16) = v26;
          v9 = v30;
          *(_BYTE *)(a3 + 24) = 1;
          if ((_DWORD)v9 == -1)
            return result;
          return ((uint64_t (*)(uint64_t *, _DWORD *))off_1E0FD8BD8[v9])(&v32, v29);
        }
LABEL_34:
        *(_BYTE *)(a3 + 24) = 1;
        return result;
      }
      v23 = off_1E0FD8C88[v22];
      ((void (*)(uint64_t *, _DWORD *, uint64_t))v23)(&v32, v29, v20 + 8);
      v30 = v22;
      v21 = v22;
    }
    else
    {
LABEL_20:
      v21 = 0;
      v29[0] = 0;
      v30 = 0;
      v23 = (uint64_t (*)())_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJfDhdijxbN4WGSL13ConstantArrayENS8_14ConstantVectorENS8_14ConstantMatrixENS8_14ConstantStructEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSM_OT0_E_JRNS0_6__baseILSH_1EJfDhdijxbS9_SA_SB_SC_EEERKSU_EEEDcSM_DpT0_;
    }
    v27[0] = 0;
    v28 = -1;
    result = ((uint64_t (*)(uint64_t *, _BYTE *, _DWORD *))v23)(&v32, v27, v29);
    v28 = v21;
    if (*(_BYTE *)(v3 + 56))
      goto LABEL_22;
    *(_BYTE *)(v3 + 32) = 0;
    *(_DWORD *)(v3 + 48) = -1;
    result = ((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))v23)(&v32, v5, v27);
    *(_DWORD *)(v3 + 48) = v21;
    *(_BYTE *)(v3 + 56) = 1;
    v25 = v28;
    if (v28 != -1)
      goto LABEL_30;
    goto LABEL_31;
  }
  v30 = -1;
  v6 = *(unsigned int *)(result + 48);
  if ((_DWORD)v6 == -1)
  {
    *(_BYTE *)a3 = 0;
    *(_DWORD *)(a3 + 16) = -1;
    goto LABEL_34;
  }
  v7 = off_1E0FD8C88[v6];
  ((void (*)(uint64_t *, _DWORD *, uint64_t))v7)(&v32, v29, v5);
  v30 = v6;
  v31 = 1;
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 16) = -1;
  result = ((uint64_t (*)(uint64_t *, uint64_t, _DWORD *))v7)(&v32, a3, v29);
  *(_DWORD *)(a3 + 16) = v6;
  v8 = v31;
  *(_BYTE *)(a3 + 24) = 1;
  if (v8)
  {
    v9 = v30;
    if (v30 != -1)
      return ((uint64_t (*)(uint64_t *, _DWORD *))off_1E0FD8BD8[v9])(&v32, v29);
  }
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,WGSL::FailedCheck>::__alt[abi:sn180100]<WGSL::FailedCheck&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v4 = *((unsigned int *)a2 + 3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >= 0xAAAAAAB)
      goto LABEL_16;
    v5 = 24 * v4;
    v6 = WTF::fastMalloc((WTF *)(24 * v4));
    *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v6;
    v7 = *((_DWORD *)a2 + 3);
    if (v7)
    {
      v8 = *a2;
      v9 = *a2 + 24 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *(_QWORD *)v6 = v10;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)(v8 + 8);
        v8 += 24;
        v6 += 24;
      }
      while (v8 != v9);
    }
  }
  v11 = *((unsigned int *)a2 + 7);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = v11;
  if (!(_DWORD)v11)
    return a1;
  if (v11 >= 0xAAAAAAB)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x182606C6CLL);
  }
  v12 = 24 * v11;
  v13 = WTF::fastMalloc((WTF *)(24 * v11));
  *(_DWORD *)(a1 + 24) = (v12 & 0xFFFFFFF8) / 0x18;
  *(_QWORD *)(a1 + 16) = v13;
  v14 = *((_DWORD *)a2 + 7);
  if (v14)
  {
    v15 = a2[2];
    v16 = v15 + 24 * v14;
    do
    {
      v17 = *(_DWORD **)v15;
      if (*(_QWORD *)v15)
        *v17 += 2;
      *(_QWORD *)v13 = v17;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)(v15 + 8);
      v15 += 24;
      v13 += 24;
    }
    while (v15 != v16);
  }
  return a1;
}

void WGSL::ShaderModule::~ShaderModule(WGSL::ShaderModule *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (***v11)(_QWORD);
  WTF *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD **v29;
  _DWORD *v30;
  _DWORD *v31;
  char v32;

  v3 = *((_QWORD *)this + 52);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((unsigned int *)this + 103);
  v5 = (_QWORD *)*((_QWORD *)this + 50);
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    while (1)
    {
      v7 = (_QWORD *)v5[3];
      if (v5 == v7)
      {
        v7 = v5;
        v8 = 4;
      }
      else
      {
        if (!v7)
          goto LABEL_7;
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
      v5 += 4;
      v6 -= 32;
      if (!v6)
      {
        v5 = (_QWORD *)*((_QWORD *)this + 50);
        break;
      }
    }
  }
  if (v5)
  {
    *((_QWORD *)this + 50) = 0;
    *((_DWORD *)this + 102) = 0;
    WTF::fastFree((WTF *)v5, a2);
  }
  if (*((_BYTE *)this + 392))
    WGSL::CallGraph::~CallGraph((WGSL::ShaderModule *)((char *)this + 360), a2);
  v9 = *((unsigned int *)this + 89);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (v10 < *((unsigned int *)this + 89))
    {
      v11 = *(void (****)(_QWORD))(*((_QWORD *)this + 43) + 8 * v10);
      (**v11)(v11);
      if (v9 == ++v10)
        goto LABEL_20;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_20:
    v12 = (WTF *)*((_QWORD *)this + 43);
    if (v12)
    {
      *((_QWORD *)this + 43) = 0;
      *((_DWORD *)this + 88) = 0;
      WTF::fastFree(v12, a2);
    }
    v13 = *((unsigned int *)this + 85);
    if ((_DWORD)v13)
    {
      v14 = (WTF **)*((_QWORD *)this + 41);
      v15 = 8 * v13;
      do
      {
        v16 = *v14++;
        WTF::fastFree(v16, a2);
        v15 -= 8;
      }
      while (v15);
    }
    v17 = (WTF *)*((_QWORD *)this + 41);
    if (v17)
    {
      *((_QWORD *)this + 41) = 0;
      *((_DWORD *)this + 84) = 0;
      WTF::fastFree(v17, a2);
    }
    v18 = *((_QWORD *)this + 14);
    if (v18)
      WTF::fastFree((WTF *)(v18 - 16), a2);
    v19 = *((unsigned int *)this + 27);
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)*((_QWORD *)this + 12);
      v21 = 8 * v19;
      do
      {
        v22 = *v20;
        *v20 = 0;
        if (v22)
        {
          v23 = *(unsigned int *)(v22 + 48);
          if ((_DWORD)v23 != -1)
            ((void (*)(char *, uint64_t))off_1E0FD8B60[v23])(&v32, v22);
          *(_DWORD *)(v22 + 48) = -1;
          MEMORY[0x186DAB2A8](v22, 0x10F2C40D7D86127);
        }
        ++v20;
        v21 -= 8;
      }
      while (v21);
    }
    v24 = (WTF *)*((_QWORD *)this + 12);
    if (v24)
    {
      *((_QWORD *)this + 12) = 0;
      *((_DWORD *)this + 26) = 0;
      WTF::fastFree(v24, a2);
    }
    v25 = (WTF *)*((_QWORD *)this + 10);
    if (v25)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
      WTF::fastFree(v25, a2);
    }
    v26 = (WTF *)*((_QWORD *)this + 8);
    if (v26)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v26, a2);
    }
    v27 = *((_QWORD *)this + 7);
    if (v27)
    {
      v28 = *(unsigned int *)(v27 - 4);
      if ((_DWORD)v28)
      {
        v29 = (_DWORD **)*((_QWORD *)this + 7);
        do
        {
          v30 = *v29;
          if (*v29 != (_DWORD *)-1)
          {
            *v29 = 0;
            if (v30)
            {
              if (*v30 == 2)
                WTF::StringImpl::destroy();
              else
                *v30 -= 2;
            }
          }
          ++v29;
          --v28;
        }
        while (v28);
      }
      WTF::fastFree((WTF *)(v27 - 16), a2);
    }
    v31 = *(_DWORD **)this;
    *(_QWORD *)this = 0;
    if (v31)
    {
      if (*v31 == 2)
        WTF::StringImpl::destroy();
      else
        *v31 -= 2;
    }
  }
}

void WGSL::prepareImpl(WGSL::ShaderModule &,WTF::HashMap<WTF::String,WGSL::PipelineLayout *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WGSL::PipelineLayout *>,WTF::HashTableTraits> const&)::{lambda(void)#1}::operator()(uint64_t a1@<X0>, WGSL::ShaderModule *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  WGSL::ShaderModule *v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const WTF::StringImpl *v12;
  void *v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WGSL::Reflection::EntryPointInformation *v23;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;
  void (**v30)(WGSL::RewriteGlobalVariables *__hidden);
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  int v50;

  v29 = 0;
  WGSL::mangleNames(*(WGSL **)(a1 + 8), a2);
  WGSL::insertBoundsChecks(*(_QWORD *)(a1 + 8), &v28);
  std::__optional_destruct_base<WGSL::FailedCheck,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v5);
  WGSL::rewritePointers(*(uint64_t ***)(a1 + 8), v6);
  WGSL::rewriteEntryPoints(*(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 16), v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v31 = 0u;
  v32 = 0u;
  v30 = &off_1E0FD3BB0;
  v33 = v8;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0;
  v43 = 1;
  v44 = v9;
  v45 = &v29;
  v50 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  WGSL::RewriteGlobalVariables::collectGlobals((WGSL::RewriteGlobalVariables *)&v30, v10, (uint64_t)&v25);
  if (!v27)
  {
    if (!*(_BYTE *)(v33 + 392))
    {
      __break(1u);
      return;
    }
    v17 = *(unsigned int *)(v33 + 372);
    if (!(_DWORD)v17)
    {
LABEL_11:
      WGSL::RewriteGlobalVariables::~RewriteGlobalVariables((WGSL::RewriteGlobalVariables *)&v30, v11);
      v20 = v29;
      v29 = 0;
      v21 = *(_QWORD *)(a1 + 24);
      *(_BYTE *)v21 = 1;
      *(_QWORD *)a3 = v20;
      *(_BYTE *)(a3 + 8) = 0;
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(v21 + 8);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v21 + 24);
      *(_DWORD *)(a3 + 40) = 0;
      v16 = v29;
      if (!v29)
        return;
      goto LABEL_14;
    }
    v18 = *(uint64_t **)(v33 + 360);
    v19 = 24 * v17;
    while (1)
    {
      WGSL::RewriteGlobalVariables::visitEntryPoint((uint64_t)&v30, v18, v12, (uint64_t)&v25);
      if (v27)
        break;
      v18 += 3;
      v19 -= 24;
      if (!v19)
        goto LABEL_11;
    }
  }
  WGSL::RewriteGlobalVariables::~RewriteGlobalVariables((WGSL::RewriteGlobalVariables *)&v30, v11);
  v14 = v25;
  if (v25)
  {
    v15 = *v25;
    *v25 += 2;
    *(_QWORD *)a3 = v14;
    *(_OWORD *)(a3 + 8) = v26;
    *(_DWORD *)(a3 + 40) = 1;
    if (v15)
    {
      *v14 = v15;
      v16 = v29;
      if (!v29)
        return;
    }
    else
    {
      WTF::StringImpl::destroy();
      v16 = v29;
      if (!v29)
        return;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_OWORD *)(a3 + 8) = v26;
    *(_DWORD *)(a3 + 40) = 1;
    v16 = v29;
    if (!v29)
      return;
  }
LABEL_14:
  v22 = *(unsigned int *)(v16 - 4);
  if ((_DWORD)v22)
  {
    v23 = (WGSL::Reflection::EntryPointInformation *)(v16 + 8);
    do
    {
      if (*((_QWORD *)v23 - 1) != -1)
      {
        WGSL::Reflection::EntryPointInformation::~EntryPointInformation(v23, v13);
        v24 = (_DWORD *)*((_QWORD *)v23 - 1);
        *((_QWORD *)v23 - 1) = 0;
        if (v24)
        {
          if (*v24 == 2)
            WTF::StringImpl::destroy();
          else
            *v24 -= 2;
        }
      }
      v23 = (WGSL::Reflection::EntryPointInformation *)((char *)v23 + 96);
      --v22;
    }
    while (v22);
  }
  WTF::fastFree((WTF *)(v16 - 16), v13);
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::AddressSpace> [6]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 **v10;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      v7 = v6;
      goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
    v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1]))
      goto LABEL_3;
  }
  v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          v7 = v6 + 18;
          v8 = v6[15];
          v9 = (uint64_t)v6[16];
          v10 = v6 + 15;
          if (WTF::operator==(v4, v5, v8, v9))
            v7 = v10;
        }
      }
    }
  }
LABEL_11:
  if (v7 == *a1 + 18)
    return 0;
  else
    return v7 + 2;
}

void *WGSL::parseAccessMode(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v9;
  int v10;
  uint16x8_t v13;
  uint16x8_t v14;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "read" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 114 || *(_WORD *)(v3 + 1) != 24933 || *((_WORD *)v3 + 1) != 25697)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 114)
        return 0;
      v9 = *(_DWORD *)(v3 + 2);
      v10 = *((_DWORD *)v3 + 1);
      if (v9 != 6357093 || v10 != 6553697)
        return 0;
    }
    return &unk_1E0FD8DE0;
  }
  if (v3 == "read" && v4 == 4)
    return &unk_1E0FD8DE0;
  if (v3 != "read_write" && v4 == 10)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 114 || *(_QWORD *)(v3 + 1) != 0x746972775F646165 || *(_QWORD *)(v3 + 2) != 0x65746972775F6461)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 114)
        return 0;
      v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826104F0);
      v13.i16[0] = vminvq_u16(v13);
      if (!v13.i32[0])
        return 0;
      v14 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 4), (int16x8_t)xmmword_182610500);
      v14.i16[0] = vminvq_u16(v14);
      if (!v14.i32[0])
        return 0;
    }
    return &unk_1E0FD8DF8;
  }
  if (v3 == "read_write" && v4 == 10)
    return &unk_1E0FD8DF8;
  if (v3 == "write" || v4 != 5)
  {
    if (v4 != 5 || v3 != "write")
      return 0;
    return &unk_1E0FD8E10;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 != 119 || *(_WORD *)(v3 + 1) != 26994 || *(_WORD *)(v3 + 3) != 25972)
      return 0;
    return &unk_1E0FD8E10;
  }
  if (*(_WORD *)v3 == 119 && *(_QWORD *)(v3 + 2) == 0x65007400690072)
    return &unk_1E0FD8E10;
  return 0;
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::TexelFormat> [17]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      v7 = v6;
      goto LABEL_27;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
    v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1]))
      goto LABEL_3;
  }
  v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          v7 = v6 + 15;
          if (!WTF::operator==(v4, v5, v6[15], (uint64_t)v6[16]))
          {
            v7 = v6 + 18;
            if (!WTF::operator==(v4, v5, v6[18], (uint64_t)v6[19]))
            {
              v7 = v6 + 21;
              if (!WTF::operator==(v4, v5, v6[21], (uint64_t)v6[22]))
              {
                v7 = v6 + 24;
                if (!WTF::operator==(v4, v5, v6[24], (uint64_t)v6[25]))
                {
                  v7 = v6 + 27;
                  if (!WTF::operator==(v4, v5, v6[27], (uint64_t)v6[28]))
                  {
                    v7 = v6 + 30;
                    if (!WTF::operator==(v4, v5, v6[30], (uint64_t)v6[31]))
                    {
                      if (WTF::operator==(v4, v5, v6[33], (uint64_t)v6[34]))
                      {
                        v7 = v6 + 33;
                      }
                      else if (WTF::operator==(v4, v5, v6[36], (uint64_t)v6[37]))
                      {
                        v7 = v6 + 36;
                      }
                      else if (WTF::operator==(v4, v5, v6[39], (uint64_t)v6[40]))
                      {
                        v7 = v6 + 39;
                      }
                      else if (WTF::operator==(v4, v5, v6[42], (uint64_t)v6[43]))
                      {
                        v7 = v6 + 42;
                      }
                      else if (WTF::operator==(v4, v5, v6[45], (uint64_t)v6[46]))
                      {
                        v7 = v6 + 45;
                      }
                      else
                      {
                        v7 = v6 + 51;
                        if (WTF::operator==(v4, v5, v6[48], (uint64_t)v6[49]))
                          v7 = v6 + 48;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_27:
  if (v7 == *a1 + 51)
    return 0;
  else
    return v7 + 2;
}

void *WGSL::parseInterpolationType(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  uint16x8_t v9;
  uint16x8_t v10;
  int v11;
  int v12;
  uint64_t v15;
  uint64_t v16;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "flat" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 102 || *(_WORD *)(v3 + 1) != 24940 || *((_WORD *)v3 + 1) != 29793)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 102)
        return 0;
      v11 = *(_DWORD *)(v3 + 2);
      v12 = *((_DWORD *)v3 + 1);
      if (v11 != 6357100 || v12 != 7602273)
        return 0;
    }
    return &unk_1E0FD8FC8;
  }
  if (v3 == "flat" && v4 == 4)
    return &unk_1E0FD8FC8;
  if (v3 != "linear" && v4 == 6)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 108 || *(_DWORD *)(v3 + 1) != 1634037353 || *(_DWORD *)(v3 + 2) != 1918985582)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 108)
        return 0;
      v15 = *(_QWORD *)(v3 + 2);
      v16 = *(_QWORD *)(v3 + 4);
      if (v15 != 0x610065006E0069 || v16 != 0x7200610065006ELL)
        return 0;
    }
    return &unk_1E0FD8FE0;
  }
  if (v3 == "linear" && v4 == 6)
    return &unk_1E0FD8FE0;
  if (v3 == "perspective" || v4 != 11)
  {
    if (v4 != 11 || v3 != "perspective")
      return 0;
    return &unk_1E0FD8FF8;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 != 112 || *(_QWORD *)(v3 + 1) != 0x6974636570737265 || *(_QWORD *)(v3 + 3) != 0x6576697463657073)
      return 0;
    return &unk_1E0FD8FF8;
  }
  if (*(_WORD *)v3 == 112)
  {
    v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_182610510);
    v9.i16[0] = vminvq_u16(v9);
    if (v9.i32[0])
    {
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 6), (int16x8_t)xmmword_182610520);
      v10.i16[0] = vminvq_u16(v10);
      if (v10.i32[0])
        return &unk_1E0FD8FF8;
    }
  }
  return 0;
}

void *WGSL::parseInterpolationSampling(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  BOOL v11;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(unsigned int *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  v5 = (v2 >> 2) & 1;
  v6 = v5 << 32;
  v7 = v4 != 6;
  if (v3 != "center" && v4 == 6)
  {
    if ((_DWORD)v5)
    {
      if (*v3 != 99 || *(_DWORD *)(v3 + 1) != 1702129253 || *(_DWORD *)(v3 + 2) != 1919251566)
      {
        v7 = 0;
LABEL_9:
        v8 = 8;
        v6 = 0x100000000;
        goto LABEL_10;
      }
      return &unk_1E0FD9010;
    }
    if (*(_WORD *)v3 == 99 && *(_QWORD *)(v3 + 2) == 0x650074006E0065 && *(_QWORD *)(v3 + 4) == 0x7200650074006ELL)
      return &unk_1E0FD9010;
    v7 = 0;
LABEL_32:
    v8 = 8;
    if (v3 == "sample")
      goto LABEL_41;
LABEL_33:
    if (v7)
      goto LABEL_41;
    if (!v8)
      return &unk_1E0FD9040;
    if (!v6)
    {
      if (*(_WORD *)v3 != 115)
        return 0;
      if (*(_QWORD *)(v3 + 4) != 0x65006C0070006DLL || *(_QWORD *)(v3 + 2) != 0x6C0070006D0061)
        return 0;
      return &unk_1E0FD9040;
    }
    if (*v3 == 115 && *(_DWORD *)(v3 + 1) == 1819307361 && *(_DWORD *)(v3 + 2) == 1701605485)
      return &unk_1E0FD9040;
    return 0;
  }
  if (v3 == "center" && v4 == 6)
    return &unk_1E0FD9010;
  if (v3 == "centroid" || v4 != 8)
  {
    v11 = v3 == "centroid" && v4 == 8;
    v8 = v4;
    if (v11)
      return &unk_1E0FD9028;
LABEL_10:
    if (v3 == "sample")
    {
LABEL_41:
      if (v4 != 6 || v3 != "sample")
        return 0;
      return &unk_1E0FD9040;
    }
    goto LABEL_33;
  }
  if ((_DWORD)v5)
  {
    if (*v3 == 99 && *(_DWORD *)(v3 + 1) == 1920233061 && *((_DWORD *)v3 + 1) == 1684631410)
      return &unk_1E0FD9028;
    goto LABEL_9;
  }
  if (*(_WORD *)v3 != 99)
    goto LABEL_32;
  if (*(_QWORD *)(v3 + 2) != 0x720074006E0065 || *((_QWORD *)v3 + 1) != 0x640069006F0072)
    goto LABEL_32;
  return &unk_1E0FD9028;
}

void *WGSL::parseSeverityControl(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  int v10;
  int v11;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "error" && v4 == 5)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 101 || *(_WORD *)(v3 + 1) != 29298 || *(_WORD *)(v3 + 3) != 29295)
        return 0;
    }
    else if (*(_WORD *)v3 != 101 || *(_QWORD *)(v3 + 2) != 0x72006F00720072)
    {
      return 0;
    }
    return &unk_1E0FD9058;
  }
  if (v3 == "error" && v4 == 5)
    return &unk_1E0FD9058;
  if (v3 != "info" && v4 == 4)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 105 || *(_WORD *)(v3 + 1) != 26222 || *((_WORD *)v3 + 1) != 28518)
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 105)
        return 0;
      v10 = *(_DWORD *)(v3 + 2);
      v11 = *((_DWORD *)v3 + 1);
      if (v10 != 6684782 || v11 != 7274598)
        return 0;
    }
    return &unk_1E0FD9070;
  }
  if (v3 == "info" && v4 == 4)
    return &unk_1E0FD9070;
  if (v3 != "off" && v4 == 3)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 == 111 && *(_WORD *)(v3 + 1) == 26214)
        return &unk_1E0FD9088;
    }
    else if (*(_WORD *)v3 == 111 && *(_DWORD *)(v3 + 2) == 6684774)
    {
      return &unk_1E0FD9088;
    }
    return 0;
  }
  if (v3 == "off" && v4 == 3)
    return &unk_1E0FD9088;
  if (v3 == "warning" || v4 != 7)
  {
    if (v4 != 7 || v3 != "warning")
      return 0;
    return &unk_1E0FD90A0;
  }
  if ((v2 & 4) == 0)
  {
    if (*(_WORD *)v3 != 119)
      return 0;
    if (*(_QWORD *)(v3 + 6) != 0x67006E0069006ELL || *(_QWORD *)(v3 + 2) != 0x69006E00720061)
      return 0;
    return &unk_1E0FD90A0;
  }
  if (*v3 == 119 && *(_DWORD *)(v3 + 1) == 1768845921 && *(_DWORD *)(v3 + 3) == 1735289198)
    return &unk_1E0FD90A0;
  return 0;
}

unsigned __int8 **WTF::SortedArrayMap<std::pair<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)0>,WGSL::Builtin> [12]>::tryGet<WTF::String>(unsigned __int8 ***a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unsigned __int8 **v7;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    v5 = *(unsigned int *)(v3 + 4) | ((unint64_t)((*(_DWORD *)(v3 + 16) >> 2) & 1) << 32);
    v6 = *a1;
    if (WTF::operator==(v4, v5, **a1, (uint64_t)(*a1)[1]))
    {
LABEL_3:
      v7 = v6;
      goto LABEL_17;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
    v6 = *a1;
    if (WTF::operator==(0, 0x100000000, **a1, (uint64_t)(*a1)[1]))
      goto LABEL_3;
  }
  v7 = v6 + 3;
  if (!WTF::operator==(v4, v5, v6[3], (uint64_t)v6[4]))
  {
    v7 = v6 + 6;
    if (!WTF::operator==(v4, v5, v6[6], (uint64_t)v6[7]))
    {
      v7 = v6 + 9;
      if (!WTF::operator==(v4, v5, v6[9], (uint64_t)v6[10]))
      {
        v7 = v6 + 12;
        if (!WTF::operator==(v4, v5, v6[12], (uint64_t)v6[13]))
        {
          v7 = v6 + 15;
          if (!WTF::operator==(v4, v5, v6[15], (uint64_t)v6[16]))
          {
            v7 = v6 + 18;
            if (!WTF::operator==(v4, v5, v6[18], (uint64_t)v6[19]))
            {
              v7 = v6 + 21;
              if (!WTF::operator==(v4, v5, v6[21], (uint64_t)v6[22]))
              {
                v7 = v6 + 24;
                if (!WTF::operator==(v4, v5, v6[24], (uint64_t)v6[25]))
                {
                  v7 = v6 + 27;
                  if (!WTF::operator==(v4, v5, v6[27], (uint64_t)v6[28]))
                  {
                    v7 = v6 + 30;
                    if (!WTF::operator==(v4, v5, v6[30], (uint64_t)v6[31]))
                    {
                      v7 = v6 + 36;
                      if (WTF::operator==(v4, v5, v6[33], (uint64_t)v6[34]))
                        v7 = v6 + 33;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_17:
  if (v7 == *a1 + 36)
    return 0;
  else
    return v7 + 2;
}

void *WGSL::parseLanguageFeature(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  const char *v3;
  int v4;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint8x16_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(const char **)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 4);
  if (v3 != "packed_4x8_integer_dot_product" && v4 == 30)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112)
        return 0;
      v21 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 14), (int8x16_t)xmmword_182610540), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_182610530));
      v21.i8[0] = vminvq_u8(v21);
      if (!v21.i32[0])
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 112)
        return 0;
      v15 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_182610550);
      v15.i16[0] = vminvq_u16(v15);
      if (!v15.i32[0])
        return 0;
      v16 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 12), (int16x8_t)xmmword_182610560);
      v16.i16[0] = vminvq_u16(v16);
      if (!v16.i32[0]
        || (v17 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 28), (int16x8_t)xmmword_182610570),
            v17.i16[0] = vminvq_u16(v17),
            !v17.i32[0])
        || (v18 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 44), (int16x8_t)xmmword_182610580),
            v18.i16[0] = vminvq_u16(v18),
            !v18.i32[0]))
      {
        v19 = 0;
        v20 = v3 == "unrestricted_pointer_parameters";
        goto LABEL_35;
      }
    }
    return &unk_1E0FD91F8;
  }
  if (v3 == "packed_4x8_integer_dot_product" && v4 == 30)
    return &unk_1E0FD91F8;
  if (v3 != "pointer_composite_access" && v4 == 24)
  {
    if ((v2 & 4) != 0)
    {
      if (*v3 != 112)
        return 0;
      v25 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 8), (int8x16_t)xmmword_1826105A0), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_182610590));
      v25.i8[0] = vminvq_u8(v25);
      if (!v25.i32[0])
        return 0;
    }
    else
    {
      if (*(_WORD *)v3 != 112)
        return 0;
      v22 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_1826105B0);
      v22.i16[0] = vminvq_u16(v22);
      if (!v22.i32[0])
        return 0;
      v23 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v3 + 1), (int16x8_t)xmmword_1826105C0);
      v23.i16[0] = vminvq_u16(v23);
      if (!v23.i32[0])
        return 0;
      v24 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v3 + 2), (int16x8_t)xmmword_1826105D0);
      v24.i16[0] = vminvq_u16(v24);
      if (!v24.i32[0])
        return 0;
    }
    return &unk_1E0FD9210;
  }
  if (v3 == "pointer_composite_access" && v4 == 24)
    return &unk_1E0FD9210;
  if (v3 == "readonly_and_readwrite_storage_textures" || v4 != 39)
  {
    if (v3 == "readonly_and_readwrite_storage_textures" && v4 == 39)
      return &unk_1E0FD9228;
    v19 = v4 == 31;
    v20 = v3 == "unrestricted_pointer_parameters";
    if (v3 != "unrestricted_pointer_parameters" && v4 == 31)
    {
      if ((v2 & 4) != 0)
      {
        if (*v3 != 117
          || !vminvq_u8((uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v3 + 15), (int8x16_t)xmmword_182610670), vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_182610660))))
        {
          return 0;
        }
      }
      else
      {
        if (*(_WORD *)v3 != 117)
          return 0;
        v29 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_182610680);
        v29.i16[0] = vminvq_u16(v29);
        if (!v29.i32[0])
          return 0;
        v30 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_182610690);
        v30.i16[0] = vminvq_u16(v30);
        if (!v30.i32[0])
          return 0;
        v31 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_1826106A0);
        v31.i16[0] = vminvq_u16(v31);
        if (!v31.i32[0])
          return 0;
        v32 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 46), (int16x8_t)xmmword_1826106B0);
        v32.i16[0] = vminvq_u16(v32);
        if (!v32.i32[0])
          return 0;
      }
      return &unk_1E0FD9240;
    }
LABEL_35:
    if (!v20 || !v19)
      return 0;
    return &unk_1E0FD9240;
  }
  if ((v2 & 4) != 0)
  {
    if (*v3 == 114)
    {
      v26 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 1), (int8x16_t)xmmword_1826105E0);
      v26.i8[0] = vminvq_u8(v26);
      if (v26.i32[0])
      {
        v27 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 7), (int8x16_t)xmmword_1826105F0);
        v27.i8[0] = vminvq_u8(v27);
        if (v27.i32[0])
        {
          v28 = (uint8x16_t)vceqq_s8(*(int8x16_t *)(v3 + 23), (int8x16_t)xmmword_182610600);
          v28.i8[0] = vminvq_u8(v28);
          if (v28.i32[0])
            return &unk_1E0FD9228;
        }
      }
    }
  }
  else if (*(_WORD *)v3 == 114)
  {
    v9 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 2), (int16x8_t)xmmword_182610610);
    v9.i16[0] = vminvq_u16(v9);
    if (v9.i32[0])
    {
      v10 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 14), (int16x8_t)xmmword_182610620);
      v10.i16[0] = vminvq_u16(v10);
      if (v10.i32[0])
      {
        v11 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 30), (int16x8_t)xmmword_182610630);
        v11.i16[0] = vminvq_u16(v11);
        if (v11.i32[0])
        {
          v12 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 46), (int16x8_t)xmmword_182610640);
          v12.i16[0] = vminvq_u16(v12);
          if (v12.i32[0])
          {
            v13 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v3 + 62), (int16x8_t)xmmword_182610650);
            v13.i16[0] = vminvq_u16(v13);
            if (v13.i32[0])
              return &unk_1E0FD9228;
          }
        }
      }
    }
  }
  return 0;
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1E0CA8900](buffer, key, attachmentMode);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureGetCleanTexCoords(CVMetalTextureRef image, float *lowerLeft, float *lowerRight, float *upperRight, float *upperLeft)
{
  MEMORY[0x1E0CA8A48](image, lowerLeft, lowerRight, upperRight, upperLeft);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1E0CA8AE8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B00](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B28](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1E0CA8B30](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1E0CA8B58](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t IOSurfaceSetOwnershipIdentity()
{
  return MEMORY[0x1E0CBBE28]();
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

uint64_t WTFLogAlways()
{
  return MEMORY[0x1E0CBE138]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t WTF::StringImpl::createWithoutCopyingNonEmpty()
{
  return MEMORY[0x1E0CBEFA8]();
}

{
  return MEMORY[0x1E0CBEFB0]();
}

uint64_t WTF::StringImpl::destroy()
{
  return MEMORY[0x1E0CBEFF8]();
}

uint64_t WTF::StringImpl::endsWith()
{
  return MEMORY[0x1E0CBF020]();
}

uint64_t WTF::StringImpl::substring(WTF::StringImpl *this)
{
  return MEMORY[0x1E0CBF028](this);
}

uint64_t WTF::StringImpl::operator NSString *()
{
  return MEMORY[0x1E0CBF030]();
}

uint64_t WTF::fastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF100](this);
}

uint64_t WTF::parseDouble()
{
  return MEMORY[0x1E0CBF2A8]();
}

{
  return MEMORY[0x1E0CBF2B0]();
}

uint64_t WTF::MachSendRight::MachSendRight()
{
  return MEMORY[0x1E0CBF320]();
}

{
  return MEMORY[0x1E0CBF328]();
}

void WTF::MachSendRight::~MachSendRight(WTF::MachSendRight *this)
{
  MEMORY[0x1E0CBF330](this);
}

uint64_t WTF::MonotonicTime::now(WTF::MonotonicTime *this)
{
  return MEMORY[0x1E0CBF348](this);
}

uint64_t WTF::StringBuilder::shrinkToFit(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF350](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingLChar(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF368](this);
}

uint64_t WTF::StringBuilder::extendBufferForAppendingWithUpconvert(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CBF370](this);
}

uint64_t WTF::StringBuilder::append()
{
  return MEMORY[0x1E0CBF378]();
}

{
  return MEMORY[0x1E0CBF380]();
}

uint64_t WTF::printInternal()
{
  return MEMORY[0x1E0CBF3E8]();
}

{
  return MEMORY[0x1E0CBF3F0]();
}

{
  return MEMORY[0x1E0CBF3F8]();
}

{
  return MEMORY[0x1E0CBF400]();
}

{
  return MEMORY[0x1E0CBF408]();
}

{
  return MEMORY[0x1E0CBF410]();
}

{
  return MEMORY[0x1E0CBF418]();
}

{
  return MEMORY[0x1E0CBF420]();
}

{
  return MEMORY[0x1E0CBF428]();
}

uint64_t WTF::tryFastMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF438](this);
}

uint64_t WTF::numberToString()
{
  return MEMORY[0x1E0CBF6F8]();
}

{
  return MEMORY[0x1E0CBF700]();
}

uint64_t WTF::BinarySemaphore::signal(WTF::BinarySemaphore *this)
{
  return MEMORY[0x1E0CBF720](this);
}

uint64_t WTF::BinarySemaphore::waitUntil()
{
  return MEMORY[0x1E0CBF728]();
}

uint64_t WTF::codePointCompare()
{
  return MEMORY[0x1E0CBF780]();
}

uint64_t WTF::fastZeroedMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF790](this);
}

uint64_t WTF::StringPrintStream::toString(WTF::StringPrintStream *this)
{
  return MEMORY[0x1E0CBF7C8](this);
}

uint64_t WTF::StringPrintStream::StringPrintStream(WTF::StringPrintStream *this)
{
  return MEMORY[0x1E0CBF7D8](this);
}

void WTF::StringPrintStream::~StringPrintStream(WTF::StringPrintStream *this)
{
  MEMORY[0x1E0CBF7E0](this);
}

uint64_t WTF::fastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF820](this);
}

uint64_t WTF::tryFastCompactMalloc(WTF *this)
{
  return MEMORY[0x1E0CBF9A0](this);
}

uint64_t WTF::numberToStringWithTrailingPoint()
{
  return MEMORY[0x1E0CBFBA8]();
}

uint64_t WTF::Lock::unlockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCE8](this);
}

uint64_t WTF::Lock::lockSlow(WTF::Lock *this)
{
  return MEMORY[0x1E0CBFCF0](this);
}

uint64_t WTF::equal()
{
  return MEMORY[0x1E0CBFD78]();
}

uint64_t WTF::equal(WTF *this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  return MEMORY[0x1E0CBFD88](this, a2, a3);
}

{
  return MEMORY[0x1E0CBFD90](this, a2, a3);
}

uint64_t WTF::String::number(WTF::String *this, double a2)
{
  return MEMORY[0x1E0CBFDD8](this, a2);
}

uint64_t WTF::String::number(WTF::String *this, float a2)
{
  return MEMORY[0x1E0CBFDE0](this, a2);
}

uint64_t WTF::String::number(WTF::String *this)
{
  return MEMORY[0x1E0CBFDE8](this);
}

{
  return MEMORY[0x1E0CBFDF0](this);
}

{
  return MEMORY[0x1E0CBFE00](this);
}

{
  return MEMORY[0x1E0CBFE08](this);
}

uint64_t WTF::String::fromUTF8()
{
  return MEMORY[0x1E0CBFE18]();
}

uint64_t WTF::String::String(WTF::String *this, const __CFString *a2)
{
  return MEMORY[0x1E0CBFE40](this, a2);
}

uint64_t WTF::dataFile(WTF *this)
{
  return MEMORY[0x1E0CC0008](this);
}

uint64_t WTF::fastFree(WTF *this, void *a2)
{
  return MEMORY[0x1E0CC0018](this, a2);
}

uint64_t WTF::StringImpl::hashSlowCase(WTF::StringImpl *this)
{
  return MEMORY[0x1E0CC0BA8](this);
}

uint64_t WTF::ASCIILiteral::dump()
{
  return MEMORY[0x1E0CC0C90]();
}

uint64_t WTF::StringBuilder::reifyString(WTF::StringBuilder *this)
{
  return MEMORY[0x1E0CC0CA8](this);
}

uint64_t WTF::String::utf8()
{
  return MEMORY[0x1E0CC0E60]();
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

void operator delete(void *__p)
{
  off_1E0FD1178(__p);
}

uint64_t operator delete()
{
  return off_1E0FD1180();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E0FD1188(__sz);
}

uint64_t operator new()
{
  return off_1E0FD1190();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

long double acosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C81510](__x);
  return result;
}

float acoshf(float a1)
{
  float result;

  MEMORY[0x1E0C81518](a1);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

float asinf(float a1)
{
  float result;

  MEMORY[0x1E0C815A0](a1);
  return result;
}

long double asinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C815A8](__x);
  return result;
}

float asinhf(float a1)
{
  float result;

  MEMORY[0x1E0C815B0](a1);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

float atanf(float a1)
{
  float result;

  MEMORY[0x1E0C81630](a1);
  return result;
}

long double atanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C81638](__x);
  return result;
}

float atanhf(float a1)
{
  float result;

  MEMORY[0x1E0C81640](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B50](__x);
  return result;
}

float coshf(float a1)
{
  float result;

  MEMORY[0x1E0C82B58](a1);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float exp2f(float a1)
{
  float result;

  MEMORY[0x1E0C83290](a1);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

long double frexp(long double __x, int *__e)
{
  long double result;

  MEMORY[0x1E0C834E8](__e, __x);
  return result;
}

float frexpf(float a1, int *a2)
{
  float result;

  MEMORY[0x1E0C834F0](a2, a1);
  return result;
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

float ldexpf(float a1, int a2)
{
  float result;

  MEMORY[0x1E0C83B48](*(_QWORD *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x1E0C83BF0](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  float result;

  MEMORY[0x1E0C841E8](a2, a1);
  return result;
}

float nextafterf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C843B0](a1, a2);
  return result;
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

long double sinh(long double __x)
{
  long double result;

  MEMORY[0x1E0C85428](__x);
  return result;
}

float sinhf(float a1)
{
  float result;

  MEMORY[0x1E0C85430](a1);
  return result;
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

long double tanh(long double __x)
{
  long double result;

  MEMORY[0x1E0C857F8](__x);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

UBool u_stringHasBinaryProperty(const UChar *s, int32_t length, UProperty which)
{
  return MEMORY[0x1E0DE5AF0](s, *(_QWORD *)&length, *(_QWORD *)&which);
}

